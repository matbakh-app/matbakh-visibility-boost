{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/__tests__/win-rate-tracker.test.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/__tests__/win-rate-tracker.test.ts"],"sourcesContent":["/**\n * Tests for Win-Rate Tracker\n */\n\nimport { AiRequest, AiResponse, Provider } from \"../types\";\nimport { ExperimentResult, WinRateTracker } from \"../win-rate-tracker\";\n\ndescribe(\"WinRateTracker\", () => {\n  let tracker: WinRateTracker;\n\n  beforeEach(() => {\n    tracker = new WinRateTracker({\n      winRateThreshold: 0.85,\n      significanceThreshold: 0.95,\n      minSampleSize: 10, // Lower for testing\n    });\n  });\n\n  const createMockRequest = (prompt: string): AiRequest => ({\n    prompt,\n    context: {\n      domain: \"restaurant\",\n      locale: \"de\",\n      userId: \"test-user\",\n      sessionId: \"test-session\",\n    },\n    options: {\n      temperature: 0.7,\n      maxTokens: 1000,\n    },\n  });\n\n  const createMockResponse = (\n    text: string,\n    latencyMs: number,\n    costEuro: number\n  ): AiResponse => ({\n    text,\n    latencyMs,\n    costEuro,\n    tokensUsed: {\n      input: 100,\n      output: 200,\n      total: 300,\n    },\n    provider: \"bedrock\" as Provider,\n    modelId: \"claude-3-sonnet\",\n    requestId: \"test-request\",\n    timestamp: new Date(),\n  });\n\n  const createExperimentResult = (\n    experimentId: string,\n    variant: \"control\" | \"treatment\",\n    prompt: string,\n    responseText: string,\n    latency: number,\n    cost: number,\n    userFeedback?: number,\n    businessMetric?: number\n  ): ExperimentResult => ({\n    experimentId,\n    variant,\n    provider: \"bedrock\" as Provider,\n    modelId: \"claude-3-sonnet\",\n    request: createMockRequest(prompt),\n    response: createMockResponse(responseText, latency, cost),\n    userFeedback,\n    businessMetric,\n    timestamp: new Date(),\n  });\n\n  describe(\"recordResult\", () => {\n    it(\"should record experiment results\", () => {\n      const result = createExperimentResult(\n        \"exp-1\",\n        \"control\",\n        \"Test prompt\",\n        \"Test response\",\n        1000,\n        0.01\n      );\n\n      tracker.recordResult(result);\n\n      const experiments = tracker.getActiveExperiments();\n      expect(experiments).toContain(\"exp-1\");\n    });\n\n    it(\"should handle multiple results for same experiment\", () => {\n      const controlResult = createExperimentResult(\n        \"exp-1\",\n        \"control\",\n        \"Test prompt\",\n        \"Control response\",\n        1000,\n        0.01\n      );\n\n      const treatmentResult = createExperimentResult(\n        \"exp-1\",\n        \"treatment\",\n        \"Test prompt\",\n        \"Treatment response\",\n        800,\n        0.015\n      );\n\n      tracker.recordResult(controlResult);\n      tracker.recordResult(treatmentResult);\n\n      const summary = tracker.getExperimentSummary(\"exp-1\");\n      expect(summary).toBeTruthy();\n      expect(summary!.totalResults).toBe(2);\n      expect(summary!.controlResults).toBe(1);\n      expect(summary!.treatmentResults).toBe(1);\n    });\n  });\n\n  describe(\"compareResponses\", () => {\n    it(\"should compare responses and determine winner\", () => {\n      const controlResponse = createMockResponse(\n        \"Control response\",\n        1000,\n        0.01\n      );\n      const treatmentResponse = createMockResponse(\n        \"Treatment response\",\n        800,\n        0.015\n      );\n\n      const comparison = tracker.compareResponses(\n        \"exp-1\",\n        controlResponse,\n        treatmentResponse,\n        { control: 3, treatment: 4 }\n      );\n\n      expect(comparison.winner).toBeDefined();\n      expect(comparison.confidence).toBeGreaterThan(0);\n      expect(comparison.metrics).toHaveProperty(\"quality\");\n      expect(comparison.metrics).toHaveProperty(\"latency\");\n      expect(comparison.metrics).toHaveProperty(\"cost\");\n      expect(comparison.metrics).toHaveProperty(\"userSatisfaction\");\n    });\n\n    it(\"should prefer treatment with better user feedback\", () => {\n      const controlResponse = createMockResponse(\n        \"Control response\",\n        1000,\n        0.01\n      );\n      const treatmentResponse = createMockResponse(\n        \"Treatment response\",\n        1000,\n        0.01\n      );\n\n      const comparison = tracker.compareResponses(\n        \"exp-1\",\n        controlResponse,\n        treatmentResponse,\n        { control: 2, treatment: 5 } // Treatment much better\n      );\n\n      expect(comparison.winner).toBe(\"treatment\");\n      expect(comparison.confidence).toBeGreaterThan(0.5);\n    });\n\n    it(\"should prefer control with better latency and cost\", () => {\n      const controlResponse = createMockResponse(\n        \"Control response\",\n        500,\n        0.005\n      ); // Faster, cheaper\n      const treatmentResponse = createMockResponse(\n        \"Treatment response\",\n        1500,\n        0.02\n      ); // Slower, expensive\n\n      const comparison = tracker.compareResponses(\n        \"exp-1\",\n        controlResponse,\n        treatmentResponse\n      );\n\n      // Control should win due to better latency and cost\n      expect(comparison.winner).toBe(\"control\");\n    });\n\n    it(\"should detect ties for similar responses\", () => {\n      const controlResponse = createMockResponse(\n        \"Similar response\",\n        1000,\n        0.01\n      );\n      const treatmentResponse = createMockResponse(\n        \"Similar response\",\n        1000,\n        0.01\n      );\n\n      const comparison = tracker.compareResponses(\n        \"exp-1\",\n        controlResponse,\n        treatmentResponse,\n        { control: 3, treatment: 3 } // Same feedback\n      );\n\n      expect(comparison.winner).toBe(\"tie\");\n      expect(comparison.confidence).toBe(0.5);\n    });\n  });\n\n  describe(\"getWinRateMetrics\", () => {\n    beforeEach(() => {\n      // Add enough comparisons to meet minimum sample size\n      for (let i = 0; i < 15; i++) {\n        const controlResponse = createMockResponse(`Control ${i}`, 1000, 0.01);\n        const treatmentResponse = createMockResponse(\n          `Treatment ${i}`,\n          800,\n          0.015\n        );\n\n        tracker.compareResponses(\n          \"exp-metrics\",\n          controlResponse,\n          treatmentResponse,\n          { control: 3, treatment: i < 10 ? 4 : 2 } // Treatment wins first 10, loses last 5\n        );\n      }\n    });\n\n    it(\"should calculate win-rate metrics\", () => {\n      const metrics = tracker.getWinRateMetrics(\"exp-metrics\");\n\n      expect(metrics).toBeTruthy();\n      expect(metrics!.experimentId).toBe(\"exp-metrics\");\n      expect(metrics!.totalComparisons).toBe(15);\n      expect(metrics!.treatmentWinRate).toBeGreaterThan(0.5); // Should win more\n      expect(metrics!.statisticalSignificance).toBeGreaterThan(0);\n      expect(metrics!.confidenceInterval).toHaveLength(2);\n      expect(metrics!.recommendedAction).toBeDefined();\n    });\n\n    it(\"should return null for insufficient data\", () => {\n      const metrics = tracker.getWinRateMetrics(\"non-existent\");\n      expect(metrics).toBeNull();\n    });\n\n    it(\"should calculate business impact\", () => {\n      // Add business metrics\n      const controlResult = createExperimentResult(\n        \"exp-business\",\n        \"control\",\n        \"Business prompt\",\n        \"Control response\",\n        1000,\n        0.01,\n        3,\n        100 // Revenue\n      );\n\n      const treatmentResult = createExperimentResult(\n        \"exp-business\",\n        \"treatment\",\n        \"Business prompt\",\n        \"Treatment response\",\n        800,\n        0.015,\n        4,\n        120 // Higher revenue\n      );\n\n      tracker.recordResult(controlResult);\n      tracker.recordResult(treatmentResult);\n\n      // Add more results to meet minimum sample size\n      for (let i = 0; i < 10; i++) {\n        tracker.compareResponses(\n          \"exp-business\",\n          createMockResponse(`Control ${i}`, 1000, 0.01),\n          createMockResponse(`Treatment ${i}`, 800, 0.015),\n          { control: 3, treatment: 4 }\n        );\n      }\n\n      const metrics = tracker.getWinRateMetrics(\"exp-business\");\n      expect(metrics).toBeTruthy();\n      expect(metrics!.businessImpact).toBeDefined();\n      expect(metrics!.businessImpact.revenueLift).toBeGreaterThan(0);\n    });\n  });\n\n  describe(\"shouldRollback\", () => {\n    it(\"should recommend rollback for poor performing treatment\", () => {\n      // Create experiment where treatment performs poorly\n      for (let i = 0; i < 15; i++) {\n        const controlResponse = createMockResponse(`Control ${i}`, 800, 0.01);\n        const treatmentResponse = createMockResponse(\n          `Treatment ${i}`,\n          1200,\n          0.02\n        );\n\n        tracker.compareResponses(\n          \"exp-rollback\",\n          controlResponse,\n          treatmentResponse,\n          { control: 4, treatment: 2 } // Treatment consistently worse\n        );\n      }\n\n      // Add business impact data showing revenue loss\n      const controlResult = createExperimentResult(\n        \"exp-rollback\",\n        \"control\",\n        \"Test prompt\",\n        \"Control response\",\n        800,\n        0.01,\n        4,\n        100\n      );\n\n      const treatmentResult = createExperimentResult(\n        \"exp-rollback\",\n        \"treatment\",\n        \"Test prompt\",\n        \"Treatment response\",\n        1200,\n        0.02,\n        2,\n        80 // Lower revenue\n      );\n\n      tracker.recordResult(controlResult);\n      tracker.recordResult(treatmentResult);\n\n      const shouldRollback = tracker.shouldRollback(\"exp-rollback\");\n      expect(shouldRollback).toBe(true);\n    });\n\n    it(\"should not recommend rollback for good performing treatment\", () => {\n      // Create experiment where treatment performs well\n      for (let i = 0; i < 15; i++) {\n        const controlResponse = createMockResponse(`Control ${i}`, 1000, 0.01);\n        const treatmentResponse = createMockResponse(\n          `Treatment ${i}`,\n          800,\n          0.01\n        );\n\n        tracker.compareResponses(\n          \"exp-no-rollback\",\n          controlResponse,\n          treatmentResponse,\n          { control: 3, treatment: 4 } // Treatment better\n        );\n      }\n\n      const shouldRollback = tracker.shouldRollback(\"exp-no-rollback\");\n      expect(shouldRollback).toBe(false);\n    });\n  });\n\n  describe(\"shouldPromote\", () => {\n    it(\"should recommend promotion for high-performing treatment\", () => {\n      // Create experiment where treatment consistently wins\n      for (let i = 0; i < 15; i++) {\n        const controlResponse = createMockResponse(`Control ${i}`, 1200, 0.02);\n        const treatmentResponse = createMockResponse(\n          `Treatment ${i}`,\n          600,\n          0.005\n        );\n\n        tracker.compareResponses(\n          \"exp-promote\",\n          controlResponse,\n          treatmentResponse,\n          { control: 2, treatment: 5 } // Treatment much better\n        );\n      }\n\n      // Add positive business impact\n      const controlResult = createExperimentResult(\n        \"exp-promote\",\n        \"control\",\n        \"Test prompt\",\n        \"Control response\",\n        1200,\n        0.02,\n        2,\n        100\n      );\n\n      const treatmentResult = createExperimentResult(\n        \"exp-promote\",\n        \"treatment\",\n        \"Test prompt\",\n        \"Treatment response\",\n        600,\n        0.005,\n        5,\n        130 // Higher revenue\n      );\n\n      tracker.recordResult(controlResult);\n      tracker.recordResult(treatmentResult);\n\n      const shouldPromote = tracker.shouldPromote(\"exp-promote\");\n      expect(shouldPromote).toBe(true);\n    });\n\n    it(\"should not recommend promotion without sufficient improvement\", () => {\n      // Create experiment with marginal improvement\n      for (let i = 0; i < 15; i++) {\n        const controlResponse = createMockResponse(`Control ${i}`, 1000, 0.01);\n        const treatmentResponse = createMockResponse(\n          `Treatment ${i}`,\n          950,\n          0.01\n        );\n\n        tracker.compareResponses(\n          \"exp-marginal\",\n          controlResponse,\n          treatmentResponse,\n          { control: 3, treatment: 3.2 } // Slight improvement\n        );\n      }\n\n      const shouldPromote = tracker.shouldPromote(\"exp-marginal\");\n      expect(shouldPromote).toBe(false);\n    });\n  });\n\n  describe(\"getExperimentSummary\", () => {\n    it(\"should provide comprehensive experiment summary\", () => {\n      const controlResult = createExperimentResult(\n        \"exp-summary\",\n        \"control\",\n        \"Test prompt\",\n        \"Control response\",\n        1000,\n        0.01,\n        3,\n        100\n      );\n\n      const treatmentResult = createExperimentResult(\n        \"exp-summary\",\n        \"treatment\",\n        \"Test prompt\",\n        \"Treatment response\",\n        800,\n        0.015,\n        4,\n        120\n      );\n\n      tracker.recordResult(controlResult);\n      tracker.recordResult(treatmentResult);\n\n      const summary = tracker.getExperimentSummary(\"exp-summary\");\n\n      expect(summary).toBeTruthy();\n      expect(summary!.totalResults).toBe(2);\n      expect(summary!.controlResults).toBe(1);\n      expect(summary!.treatmentResults).toBe(1);\n      expect(summary!.averageLatency.control).toBe(1000);\n      expect(summary!.averageLatency.treatment).toBe(800);\n      expect(summary!.averageCost.control).toBe(0.01);\n      expect(summary!.averageCost.treatment).toBe(0.015);\n    });\n\n    it(\"should return null for non-existent experiment\", () => {\n      const summary = tracker.getExperimentSummary(\"non-existent\");\n      expect(summary).toBeNull();\n    });\n  });\n\n  describe(\"getActiveExperiments\", () => {\n    it(\"should return list of active experiments\", () => {\n      const result1 = createExperimentResult(\n        \"exp-1\",\n        \"control\",\n        \"Prompt 1\",\n        \"Response 1\",\n        1000,\n        0.01\n      );\n      const result2 = createExperimentResult(\n        \"exp-2\",\n        \"treatment\",\n        \"Prompt 2\",\n        \"Response 2\",\n        800,\n        0.015\n      );\n\n      tracker.recordResult(result1);\n      tracker.recordResult(result2);\n\n      const activeExperiments = tracker.getActiveExperiments();\n      expect(activeExperiments).toContain(\"exp-1\");\n      expect(activeExperiments).toContain(\"exp-2\");\n      expect(activeExperiments).toHaveLength(2);\n    });\n\n    it(\"should return empty array when no experiments\", () => {\n      const activeExperiments = tracker.getActiveExperiments();\n      expect(activeExperiments).toHaveLength(0);\n    });\n  });\n\n  describe(\"configuration\", () => {\n    it(\"should use custom configuration\", () => {\n      const customTracker = new WinRateTracker({\n        winRateThreshold: 0.9,\n        significanceThreshold: 0.99,\n        minSampleSize: 50,\n      });\n\n      // Test that custom configuration is applied\n      expect(customTracker).toBeDefined();\n\n      // Add minimal data (less than custom minSampleSize)\n      const result = createExperimentResult(\n        \"exp-config\",\n        \"control\",\n        \"Test\",\n        \"Response\",\n        1000,\n        0.01\n      );\n      customTracker.recordResult(result);\n\n      // Should return null due to insufficient sample size\n      const metrics = customTracker.getWinRateMetrics(\"exp-config\");\n      expect(metrics).toBeNull();\n    });\n  });\n\n  describe(\"statistical calculations\", () => {\n    it(\"should calculate confidence intervals\", () => {\n      // Add enough data for statistical analysis\n      for (let i = 0; i < 20; i++) {\n        const controlResponse = createMockResponse(`Control ${i}`, 1000, 0.01);\n        const treatmentResponse = createMockResponse(\n          `Treatment ${i}`,\n          800,\n          0.01\n        );\n\n        tracker.compareResponses(\n          \"exp-stats\",\n          controlResponse,\n          treatmentResponse,\n          { control: 3, treatment: i < 15 ? 4 : 2 } // 75% win rate for treatment\n        );\n      }\n\n      const metrics = tracker.getWinRateMetrics(\"exp-stats\");\n      expect(metrics).toBeTruthy();\n      expect(metrics!.confidenceInterval[0]).toBeGreaterThanOrEqual(0);\n      expect(metrics!.confidenceInterval[1]).toBeLessThanOrEqual(1);\n      expect(metrics!.confidenceInterval[0]).toBeLessThan(\n        metrics!.confidenceInterval[1]\n      );\n    });\n\n    it(\"should calculate statistical significance\", () => {\n      // Add data with clear winner\n      for (let i = 0; i < 30; i++) {\n        const controlResponse = createMockResponse(`Control ${i}`, 1000, 0.01);\n        const treatmentResponse = createMockResponse(\n          `Treatment ${i}`,\n          600,\n          0.005\n        );\n\n        tracker.compareResponses(\n          \"exp-significance\",\n          controlResponse,\n          treatmentResponse,\n          { control: 2, treatment: 5 } // Clear treatment advantage\n        );\n      }\n\n      const metrics = tracker.getWinRateMetrics(\"exp-significance\");\n      expect(metrics).toBeTruthy();\n      expect(metrics!.statisticalSignificance).toBeGreaterThan(0.8); // High significance\n    });\n  });\n\n  describe(\"automated reporting\", () => {\n    beforeEach(() => {\n      // Set up some test experiments\n      for (let i = 0; i < 15; i++) {\n        const controlResult = createExperimentResult(\n          \"exp-report-1\",\n          \"control\",\n          \"Test prompt\",\n          \"Control response\",\n          1000,\n          0.01,\n          3,\n          100\n        );\n\n        const treatmentResult = createExperimentResult(\n          \"exp-report-1\",\n          \"treatment\",\n          \"Test prompt\",\n          \"Treatment response\",\n          800,\n          0.008,\n          4,\n          120\n        );\n\n        tracker.recordResult(controlResult);\n        tracker.recordResult(treatmentResult);\n      }\n\n      // Add a second experiment\n      for (let i = 0; i < 12; i++) {\n        const controlResult = createExperimentResult(\n          \"exp-report-2\",\n          \"control\",\n          \"Test prompt 2\",\n          \"Control response 2\",\n          1200,\n          0.015,\n          2,\n          80\n        );\n\n        const treatmentResult = createExperimentResult(\n          \"exp-report-2\",\n          \"treatment\",\n          \"Test prompt 2\",\n          \"Treatment response 2\",\n          1400,\n          0.02,\n          2,\n          70\n        );\n\n        tracker.recordResult(controlResult);\n        tracker.recordResult(treatmentResult);\n      }\n    });\n\n    it(\"should generate automated report\", () => {\n      const report = tracker.generateAutomatedReport(\"daily\");\n\n      expect(report).toBeTruthy();\n      expect(report.reportId).toBeDefined();\n      expect(report.reportType).toBe(\"daily\");\n      expect(report.generatedAt).toBeInstanceOf(Date);\n      expect(report.summary).toBeDefined();\n      expect(report.topPerformers).toBeDefined();\n      expect(report.alerts).toBeDefined();\n      expect(report.recommendations).toBeDefined();\n      expect(report.trends).toBeDefined();\n    });\n\n    it(\"should generate report summary\", () => {\n      const report = tracker.generateAutomatedReport(\"weekly\");\n\n      expect(report.summary.totalExperiments).toBe(2);\n      expect(report.summary.activeExperiments).toBeGreaterThanOrEqual(0);\n      expect(report.summary.completedExperiments).toBeGreaterThanOrEqual(0);\n    });\n\n    it(\"should identify top performers\", () => {\n      const report = tracker.generateAutomatedReport(\"monthly\");\n\n      expect(report.topPerformers).toBeInstanceOf(Array);\n      expect(report.topPerformers.length).toBeGreaterThan(0);\n\n      const topPerformer = report.topPerformers[0];\n      expect(topPerformer).toHaveProperty(\"experimentId\");\n      expect(topPerformer).toHaveProperty(\"winRate\");\n      expect(topPerformer).toHaveProperty(\"businessImpact\");\n      expect(topPerformer).toHaveProperty(\"recommendation\");\n    });\n\n    it(\"should generate alerts\", () => {\n      const report = tracker.generateAutomatedReport(\"daily\");\n\n      expect(report.alerts).toBeInstanceOf(Array);\n\n      if (report.alerts.length > 0) {\n        const alert = report.alerts[0];\n        expect(alert).toHaveProperty(\"type\");\n        expect(alert).toHaveProperty(\"experimentId\");\n        expect(alert).toHaveProperty(\"message\");\n        expect(alert).toHaveProperty(\"severity\");\n        expect(alert).toHaveProperty(\"actionRequired\");\n      }\n    });\n\n    it(\"should generate recommendations\", () => {\n      const report = tracker.generateAutomatedReport(\"daily\");\n\n      expect(report.recommendations).toBeInstanceOf(Array);\n      expect(report.recommendations.length).toBeGreaterThan(0);\n\n      const recommendation = report.recommendations[0];\n      expect(recommendation).toHaveProperty(\"experimentId\");\n      expect(recommendation).toHaveProperty(\"action\");\n      expect(recommendation).toHaveProperty(\"reason\");\n      expect(recommendation).toHaveProperty(\"confidence\");\n      expect(recommendation).toHaveProperty(\"expectedImpact\");\n    });\n\n    it(\"should generate trends data\", () => {\n      const report = tracker.generateAutomatedReport(\"monthly\");\n\n      expect(report.trends).toBeDefined();\n      expect(report.trends.winRateOverTime).toBeInstanceOf(Array);\n      expect(report.trends.businessImpactOverTime).toBeInstanceOf(Array);\n      expect(report.trends.costEfficiencyOverTime).toBeInstanceOf(Array);\n    });\n\n    it(\"should store and retrieve reports\", () => {\n      const report1 = tracker.generateAutomatedReport(\"daily\");\n      const report2 = tracker.generateAutomatedReport(\"weekly\");\n\n      const allReports = tracker.getReports();\n      expect(allReports).toHaveLength(2);\n      expect(allReports[0].generatedAt.getTime()).toBeGreaterThanOrEqual(\n        allReports[1].generatedAt.getTime()\n      ); // Should be sorted by date desc\n\n      const retrievedReport = tracker.getReport(report1.reportId);\n      expect(retrievedReport).toEqual(report1);\n\n      const nonExistentReport = tracker.getReport(\"non-existent\");\n      expect(nonExistentReport).toBeNull();\n    });\n\n    it(\"should export reports in different formats\", () => {\n      const report = tracker.generateAutomatedReport(\"daily\");\n\n      const jsonExport = tracker.exportReport(report.reportId, \"json\");\n      expect(jsonExport).toContain(report.reportId);\n      expect(() => JSON.parse(jsonExport)).not.toThrow();\n\n      const htmlExport = tracker.exportReport(report.reportId, \"html\");\n      expect(htmlExport).toContain(\"<!DOCTYPE html>\");\n      expect(htmlExport).toContain(report.reportId);\n\n      const pdfExport = tracker.exportReport(report.reportId, \"pdf\");\n      expect(pdfExport).toContain(report.reportId);\n    });\n\n    it(\"should update reporting configuration\", () => {\n      const newConfig = {\n        enableDailyReports: false,\n        alertThresholds: {\n          winRateDropThreshold: 0.2,\n          businessImpactThreshold: -0.1,\n          costIncreaseThreshold: 0.3,\n        },\n      };\n\n      tracker.updateReportingConfig(newConfig);\n\n      // Configuration should be updated (we can't directly test private properties,\n      // but we can test the behavior)\n      expect(() => tracker.scheduleAutomatedReporting()).not.toThrow();\n    });\n\n    it(\"should handle export errors gracefully\", () => {\n      expect(() => tracker.exportReport(\"non-existent\", \"json\")).toThrow(\n        \"Report non-existent not found\"\n      );\n    });\n  });\n});\n"],"version":3}
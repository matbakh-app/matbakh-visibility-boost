{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/bedrock-support-manager.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/bedrock-support-manager.ts"],"sourcesContent":["/**\n * Bedrock Support Manager - Core orchestrator for support operations\n *\n * This module implements the central Bedrock Support Manager that coordinates\n * infrastructure validation, meta-monitoring, and implementation support using\n * a hybrid routing approach (direct Bedrock + MCP integration).\n */\n\nimport { BedrockAdapter } from \"./adapters/bedrock-adapter\";\nimport { AiFeatureFlags } from \"./ai-feature-flags\";\nimport { AuditTrailSystem } from \"./audit-trail-system\";\nimport { CircuitBreaker } from \"./circuit-breaker\";\nimport { ComplianceIntegration } from \"./compliance-integration\";\nimport { CostPerformanceOptimizer } from \"./cost-performance-optimizer\";\nimport { DirectBedrockClient } from \"./direct-bedrock-client\";\nimport { EmergencyShutdownManager } from \"./emergency-shutdown-manager\";\nimport { GDPRHybridComplianceValidator } from \"./gdpr-hybrid-compliance-validator\";\nimport { HybridHealthMonitor } from \"./hybrid-health-monitor\";\nimport { ImplementationSupport } from \"./implementation-support\";\nimport { InfrastructureAuditor } from \"./infrastructure-auditor\";\nimport { IntelligentRouter } from \"./intelligent-router\";\nimport { KiroBridge } from \"./kiro-bridge\";\nimport { MCPRouter } from \"./mcp-router\";\nimport { MetaMonitor } from \"./meta-monitor\";\nimport { ProviderAgreementCompliance } from \"./provider-agreement-compliance\";\nimport {\n  RedTeamEvaluationReport,\n  RedTeamEvaluator,\n} from \"./red-team-evaluator\";\nimport { SecurityPostureMonitor } from \"./security-posture-monitor\";\nimport { SystemResourceMonitor } from \"./system-resource-monitor\";\nimport { Provider } from \"./types\";\n\n// Core Data Structures\nexport interface BedrockSupportConfig {\n  enabled: boolean;\n  environments: (\"development\" | \"staging\" | \"production\")[];\n  auditInterval: number;\n  monitoringLevel: \"basic\" | \"detailed\" | \"comprehensive\";\n  autoResolutionEnabled: boolean;\n  notificationChannels: NotificationChannel[];\n}\n\nexport interface NotificationChannel {\n  type: \"email\" | \"slack\" | \"webhook\";\n  endpoint: string;\n  enabled: boolean;\n}\n\nexport interface InfrastructureAuditResult {\n  timestamp: Date;\n  overallHealth: \"healthy\" | \"warning\" | \"critical\";\n  detectedIssues: InfrastructureIssue[];\n  implementationGaps: ImplementationGap[];\n  recommendations: Recommendation[];\n  complianceStatus: ComplianceStatus;\n}\n\nexport interface InfrastructureIssue {\n  id: string;\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n  category: \"performance\" | \"security\" | \"compliance\" | \"availability\";\n  description: string;\n  affectedComponents: string[];\n  detectedAt: Date;\n}\n\nexport interface ImplementationGap {\n  id: string;\n  module: string;\n  description: string;\n  priority: \"low\" | \"medium\" | \"high\" | \"critical\";\n  estimatedEffort: string;\n  dependencies: string[];\n}\n\nexport interface Recommendation {\n  id: string;\n  type: \"immediate\" | \"short_term\" | \"long_term\";\n  description: string;\n  expectedImpact: string;\n  implementationSteps: string[];\n}\n\nexport interface ComplianceStatus {\n  gdprCompliant: boolean;\n  dataResidencyCompliant: boolean;\n  auditTrailComplete: boolean;\n  issues: string[];\n}\n\nexport interface ExecutionMetadata {\n  executionId: string;\n  timestamp: Date;\n  operation: string;\n  duration: number;\n  success: boolean;\n  errorDetails?: string;\n  performanceMetrics: PerformanceMetrics;\n}\n\nexport interface PerformanceMetrics {\n  responseTime: number;\n  memoryUsage: number;\n  cpuUsage: number;\n  networkLatency: number;\n}\n\nexport interface FailureContext {\n  operation: string;\n  errorType: string;\n  errorMessage: string;\n  timestamp: Date;\n  affectedSystems: string[];\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n}\n\nexport interface SupportResult {\n  success: boolean;\n  supportType: \"infrastructure\" | \"execution\" | \"implementation\";\n  actionsPerformed: SupportAction[];\n  diagnostics: DiagnosticData;\n  nextSteps: string[];\n}\n\nexport interface SupportAction {\n  action: string;\n  timestamp: Date;\n  result: \"success\" | \"failure\" | \"partial\";\n  details: string;\n}\n\nexport interface DiagnosticData {\n  systemHealth: Record<string, any>;\n  performanceMetrics: PerformanceMetrics;\n  errorLogs: string[];\n  recommendations: string[];\n}\n\nexport interface BedrockSupportResult {\n  success: boolean;\n  message: string;\n  timestamp: Date;\n  configuration: BedrockSupportConfig;\n  validationResults?: any;\n}\n\n// Security & Compliance Types\nexport interface ComplianceValidationResult {\n  isCompliant: boolean;\n  violations: string[];\n  recommendations: string[];\n  lastChecked: Date;\n}\n\nexport interface SecurityAuditResult {\n  securityScore: number;\n  vulnerabilities: SecurityVulnerability[];\n  recommendations: string[];\n  lastAudit: Date;\n}\n\nexport interface SecurityVulnerability {\n  id: string;\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n  description: string;\n  component: string;\n  remediation: string;\n}\n\n// Cost & Performance Types\nexport interface CostAnalysis {\n  currentSpend: number;\n  projectedSpend: number;\n  budgetUtilization: number;\n  costBreakdown: Record<string, number>;\n  recommendations: string[];\n}\n\nexport interface PerformanceOptimization {\n  currentMetrics: PerformanceMetrics;\n  optimizationOpportunities: OptimizationOpportunity[];\n  expectedImprovements: Record<string, number>;\n}\n\nexport interface OptimizationOpportunity {\n  area: string;\n  description: string;\n  expectedImprovement: string;\n  implementationEffort: \"low\" | \"medium\" | \"high\";\n}\n\n// Template & Prompt Types\nexport interface TemplateValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  templateCount: number;\n}\n\nexport interface SecurityTestResult {\n  passed: boolean;\n  testResults: SecurityTest[];\n  overallScore: number;\n  recommendations: string[];\n}\n\nexport interface SecurityTest {\n  testName: string;\n  passed: boolean;\n  details: string;\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n}\n\n/**\n * Bedrock Support Manager Interface\n *\n * Defines the contract for the Bedrock Support Manager with hybrid routing capabilities\n */\nexport interface IBedrockSupportManager {\n  // Activation Control\n  activate(): Promise<BedrockSupportResult>;\n  deactivate(): Promise<void>;\n  isActive(): boolean;\n\n  // Core Support Operations\n  runInfrastructureAudit(): Promise<InfrastructureAuditResult>;\n  enableMetaMonitoring(): Promise<void>;\n  provideFallbackSupport(context: FailureContext): Promise<SupportResult>;\n\n  // Integration Methods\n  sendDiagnosticsToKiro(diagnostics: DiagnosticData): Promise<void>;\n  receiveKiroExecutionData(executionData: ExecutionMetadata): Promise<void>;\n\n  // Security & Compliance Integration\n  validateComplianceStatus(): Promise<ComplianceValidationResult>;\n  enableCircuitBreaker(): Promise<void>;\n  checkSecurityPosture(): Promise<SecurityAuditResult>;\n\n  // Cost & Performance Management\n  monitorCostThresholds(): Promise<CostAnalysis>;\n  optimizePerformance(): Promise<PerformanceOptimization>;\n  enableEmergencyMode(): Promise<void>;\n\n  // Template & Prompt Management\n  validatePromptTemplates(): Promise<TemplateValidationResult>;\n  enablePIIRedaction(): Promise<void>;\n  runRedTeamEvaluations(): Promise<SecurityTestResult>;\n}\n\n/**\n * Bedrock Support Manager Implementation\n *\n * Central orchestrator for Bedrock support operations with hybrid routing\n */\nexport class BedrockSupportManager implements IBedrockSupportManager {\n  private isActivated: boolean = false;\n  private config: BedrockSupportConfig;\n  private featureFlags: AiFeatureFlags;\n  private bedrockAdapter: BedrockAdapter;\n  private logger: Console;\n  private providerCompliance: ProviderAgreementCompliance;\n  private complianceIntegration: ComplianceIntegration;\n  private gdprHybridValidator: GDPRHybridComplianceValidator;\n\n  // Circuit Breaker Integration for Hybrid Routing\n  private circuitBreaker: CircuitBreaker;\n  private directBedrockClient: DirectBedrockClient;\n  private mcpRouter: MCPRouter;\n  private intelligentRouter: IntelligentRouter;\n  private auditTrail: AuditTrailSystem;\n\n  // Support Operation Components\n  private infrastructureAuditor: InfrastructureAuditor;\n  private metaMonitor: MetaMonitor;\n  private implementationSupport: ImplementationSupport;\n  private hybridHealthMonitor: HybridHealthMonitor;\n  private kiroBridge: KiroBridge;\n  private securityPostureMonitor: SecurityPostureMonitor;\n\n  // Cost & Performance Management (using existing system)\n  private costPerformanceOptimizer: CostPerformanceOptimizer;\n  private emergencyShutdownManager: EmergencyShutdownManager;\n\n  // System Resource Monitoring for 5% overhead requirement\n  private systemResourceMonitor: SystemResourceMonitor;\n\n  constructor(\n    config?: Partial<BedrockSupportConfig>,\n    featureFlags?: AiFeatureFlags,\n    bedrockAdapter?: BedrockAdapter,\n    providerCompliance?: ProviderAgreementCompliance,\n    complianceIntegration?: ComplianceIntegration,\n    gdprHybridValidator?: GDPRHybridComplianceValidator\n  ) {\n    this.config = this.getDefaultConfig(config);\n    this.featureFlags = featureFlags || new AiFeatureFlags();\n    this.bedrockAdapter = bedrockAdapter || new BedrockAdapter();\n    this.logger = console;\n    this.providerCompliance =\n      providerCompliance || new ProviderAgreementCompliance();\n    this.complianceIntegration =\n      complianceIntegration || new ComplianceIntegration();\n    this.gdprHybridValidator =\n      gdprHybridValidator || new GDPRHybridComplianceValidator();\n\n    // Initialize Circuit Breaker with support-specific configuration\n    this.circuitBreaker = new CircuitBreaker({\n      failureThreshold: 3, // More sensitive for support operations\n      recoveryTimeout: 30000, // 30 seconds recovery for support\n      halfOpenMaxCalls: 2, // Conservative half-open testing\n      healthCheckInterval: 15000, // 15 second health checks\n    });\n\n    // Initialize Audit Trail System\n    this.auditTrail = new AuditTrailSystem({\n      complianceMode: \"strict\",\n      enableIntegrityChecking: true,\n      retentionDays: 2555, // 7 years for GDPR compliance\n    });\n\n    // Initialize Direct Bedrock Client for critical operations\n    this.directBedrockClient = new DirectBedrockClient({\n      region: process.env.AWS_REGION || \"eu-central-1\",\n      emergencyTimeout: 5000, // < 5s for emergency operations\n      criticalTimeout: 10000, // < 10s for critical operations\n      enableCircuitBreaker: true,\n      enableHealthMonitoring: true,\n      enableComplianceChecks: true,\n    });\n\n    // Initialize MCP Router for standard operations\n    this.mcpRouter = new MCPRouter({\n      timeout: 30000,\n      maxRetries: 3,\n      healthCheckInterval: 30000,\n    });\n\n    // Initialize Intelligent Router for routing decisions\n    this.intelligentRouter = new IntelligentRouter(\n      this.directBedrockClient,\n      this.mcpRouter,\n      this.featureFlags,\n      this.circuitBreaker,\n      this.gdprHybridValidator,\n      this.auditTrail\n    );\n\n    // Initialize Support Operation Components\n    this.infrastructureAuditor = new InfrastructureAuditor(\n      this.featureFlags,\n      this.auditTrail\n    );\n\n    this.metaMonitor = new MetaMonitor(\n      this.intelligentRouter,\n      this.auditTrail,\n      this.featureFlags\n    );\n\n    this.implementationSupport = new ImplementationSupport(\n      this.intelligentRouter,\n      this.auditTrail,\n      this.featureFlags\n    );\n\n    this.hybridHealthMonitor = new HybridHealthMonitor(\n      this.mcpRouter,\n      this.directBedrockClient,\n      this.featureFlags\n    );\n\n    this.kiroBridge = new KiroBridge(\n      this.mcpRouter,\n      this.auditTrail,\n      this.featureFlags\n    );\n\n    this.securityPostureMonitor = new SecurityPostureMonitor(\n      undefined,\n      this.featureFlags,\n      this.auditTrail,\n      this.circuitBreaker,\n      this.gdprHybridValidator,\n      this.providerCompliance,\n      this.directBedrockClient,\n      this.mcpRouter\n    );\n\n    // Initialize System Resource Monitor for 5% overhead requirement\n    this.systemResourceMonitor = new SystemResourceMonitor(\n      this.featureFlags,\n      this.auditTrail,\n      {\n        enabled: true,\n        monitoringIntervalMs: 10000, // 10 seconds\n        alertCheckIntervalMs: 30000, // 30 seconds\n        thresholds: {\n          cpuWarningPercent: 0.8, // 0.8% CPU warning\n          cpuCriticalPercent: 1.0, // 1% CPU critical (well under 5%)\n          memoryWarningMB: 40, // 40MB memory warning\n          memoryCriticalMB: 50, // 50MB memory critical (reasonable for 5% overhead)\n        },\n      }\n    );\n\n    // Initialize Cost Performance Optimizer (using existing system)\n    const costBudget: CostBudget = {\n      dailyLimit: 10.0, // €10 per day\n      monthlyLimit: 300.0, // €300 per month\n      alertThresholds: [50, 75, 90], // Alert at 50%, 75%, 90%\n      hardStop: true, // Enable hard stop on budget exceeded\n    };\n\n    this.costPerformanceOptimizer = new CostPerformanceOptimizer(\n      costBudget,\n      process.env.AWS_REGION || \"eu-central-1\"\n    );\n\n    // Initialize Emergency Shutdown Manager\n    this.emergencyShutdownManager = new EmergencyShutdownManager(\n      {\n        enableAutoShutdown: true,\n        shutdownThresholds: {\n          errorRate: 0.1, // 10% error rate\n          latencyMs: 5000, // 5 seconds\n          costEuroPerHour: 50.0, // €50 per hour\n          consecutiveFailures: 5,\n        },\n        notificationChannels: {\n          // Configure notification channels as needed\n        },\n        recoveryConfig: {\n          autoRecoveryEnabled: true,\n          recoveryDelayMs: 300000, // 5 minutes\n          healthCheckIntervalMs: 60000, // 1 minute\n          maxRecoveryAttempts: 3,\n        },\n      },\n      this.featureFlags,\n      this.auditTrail,\n      this.circuitBreaker\n    );\n  }\n\n  /**\n   * Activate Bedrock Support Mode\n   */\n  async activate(): Promise<BedrockSupportResult> {\n    try {\n      this.log(\n        \"bedrock-activation\",\n        \"Attempting to activate Bedrock Support Mode\"\n      );\n\n      // Check if feature flag is enabled\n      const supportModeEnabled =\n        await this.featureFlags.isBedrockSupportModeEnabled();\n      if (!supportModeEnabled) {\n        const message = \"Bedrock Support Mode is disabled via feature flag\";\n        this.log(\"bedrock-activation\", message);\n        return {\n          success: false,\n          message,\n          timestamp: new Date(),\n          configuration: this.config,\n        };\n      }\n\n      // Validate feature flag configuration\n      const validation =\n        await this.featureFlags.validateBedrockSupportModeFlags();\n      if (!validation.isValid) {\n        const message = `Feature flag validation failed: ${validation.errors.join(\n          \", \"\n        )}`;\n        this.log(\"bedrock-activation\", message);\n        return {\n          success: false,\n          message,\n          timestamp: new Date(),\n          configuration: this.config,\n          validationResults: validation,\n        };\n      }\n\n      // Check Bedrock adapter availability\n      const bedrockEnabled = await this.featureFlags.isProviderEnabled(\n        \"bedrock\"\n      );\n      if (!bedrockEnabled) {\n        const message = \"Bedrock provider is not enabled\";\n        this.log(\"bedrock-activation\", message);\n        return {\n          success: false,\n          message,\n          timestamp: new Date(),\n          configuration: this.config,\n        };\n      }\n\n      // Perform initial infrastructure audit\n      this.log(\"bedrock-activation\", \"Running initial infrastructure audit\");\n      const auditResult = await this.runInfrastructureAudit();\n\n      if (auditResult.overallHealth === \"critical\") {\n        const message =\n          \"Cannot activate support mode: critical infrastructure issues detected\";\n        this.log(\"bedrock-activation\", message);\n        return {\n          success: false,\n          message,\n          timestamp: new Date(),\n          configuration: this.config,\n        };\n      }\n\n      // Activate support mode\n      this.isActivated = true;\n      this.config.enabled = true;\n\n      // Start system resource monitoring to ensure < 5% overhead\n      await this.systemResourceMonitor.startMonitoring();\n      this.log(\"bedrock-activation\", \"System resource monitoring started\");\n\n      const message = \"Bedrock Support Mode activated successfully\";\n      this.log(\"bedrock-activation\", message);\n\n      return {\n        success: true,\n        message,\n        timestamp: new Date(),\n        configuration: this.config,\n        validationResults: validation,\n      };\n    } catch (error) {\n      const message = `Failed to activate Bedrock Support Mode: ${\n        error instanceof Error ? error.message : \"Unknown error\"\n      }`;\n      this.log(\"bedrock-activation\", message);\n\n      // Ensure we don't leave the system in an inconsistent state\n      this.isActivated = false;\n      this.config.enabled = false;\n\n      return {\n        success: false,\n        message,\n        timestamp: new Date(),\n        configuration: this.config,\n      };\n    }\n  }\n\n  /**\n   * Deactivate Bedrock Support Mode\n   */\n  async deactivate(): Promise<void> {\n    try {\n      this.log(\"bedrock-activation\", \"Deactivating Bedrock Support Mode\");\n\n      // Stop system resource monitoring\n      await this.systemResourceMonitor.stopMonitoring();\n      this.log(\"bedrock-activation\", \"System resource monitoring stopped\");\n\n      this.isActivated = false;\n      this.config.enabled = false;\n\n      // Safely disable feature flags\n      await this.featureFlags.disableBedrockSupportModeSafely();\n\n      this.log(\n        \"bedrock-activation\",\n        \"Bedrock Support Mode deactivated successfully\"\n      );\n    } catch (error) {\n      this.log(\n        \"bedrock-activation\",\n        `Error during deactivation: ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Get support mode status\n   */\n  getSupportModeStatus(): { isActive: boolean; config: BedrockSupportConfig } {\n    return {\n      isActive: this.isActivated,\n      config: this.config,\n    };\n  }\n\n  /**\n   * Check if support mode is active\n   */\n  isActive(): boolean {\n    return this.isActivated && this.config.enabled;\n  }\n\n  /**\n   * Run infrastructure audit with circuit breaker protection\n   */\n  async runInfrastructureAudit(): Promise<InfrastructureAuditResult> {\n    this.log(\n      \"bedrock-activation\",\n      \"Starting infrastructure audit with circuit breaker protection\"\n    );\n\n    // Validate compliance before running audit\n    await this.validateComplianceForSupportOperation(\n      \"infrastructure\",\n      \"direct_bedrock\",\n      \"critical\"\n    );\n\n    try {\n      // Check circuit breaker status before proceeding\n      const circuitBreakerStatus = await this.getCircuitBreakerStatus();\n\n      if (circuitBreakerStatus.overallHealth === \"critical\") {\n        this.log(\n          \"bedrock-activation\",\n          \"Infrastructure audit aborted - both routing paths unavailable\"\n        );\n\n        return {\n          timestamp: new Date(),\n          overallHealth: \"critical\",\n          detectedIssues: [\n            {\n              id: \"circuit-breaker-critical\",\n              severity: \"critical\",\n              category: \"availability\",\n              description:\n                \"Both routing paths (direct Bedrock and MCP) are unavailable due to circuit breaker protection\",\n              affectedComponents: [\"direct-bedrock-client\", \"mcp-router\"],\n              detectedAt: new Date(),\n            },\n          ],\n          implementationGaps: [],\n          recommendations: [\n            {\n              id: \"restore-routing-paths\",\n              type: \"immediate\",\n              description: \"Investigate and restore routing path availability\",\n              expectedImpact: \"Restore Bedrock Support Mode functionality\",\n              implementationSteps: [\n                \"Check direct Bedrock client health\",\n                \"Verify MCP router connectivity\",\n                \"Reset circuit breakers if appropriate\",\n                \"Monitor system recovery\",\n              ],\n            },\n          ],\n          complianceStatus: {\n            gdprCompliant: true,\n            dataResidencyCompliant: true,\n            auditTrailComplete: true,\n            issues: [\n              \"Circuit breaker protection active - limited audit capability\",\n            ],\n          },\n        };\n      }\n\n      // Execute infrastructure audit through intelligent router with circuit breaker protection\n      const auditResult = await this.circuitBreaker.execute(\n        \"bedrock\", // Use bedrock provider for infrastructure audit\n        async () => {\n          return await this.infrastructureAuditor.performSystemHealthCheck();\n        }\n      );\n\n      this.log(\n        \"bedrock-activation\",\n        \"Infrastructure audit completed successfully through circuit breaker\"\n      );\n      // Simulate infrastructure audit - in real implementation this would\n      // check actual system health, database connections, API endpoints, etc.\n      const issues: InfrastructureIssue[] = [];\n      const gaps: ImplementationGap[] = [];\n      const recommendations: Recommendation[] = [];\n\n      // Check feature flag consistency\n      const flagValidation = await this.featureFlags.validateAllFlags();\n      if (!flagValidation.isValid) {\n        // Determine severity based on error content\n        const hasCriticalErrors = flagValidation.errors.some(\n          (error) =>\n            error.toLowerCase().includes(\"critical\") ||\n            error.toLowerCase().includes(\"system error\")\n        );\n\n        issues.push({\n          id: \"feature-flags-inconsistent\",\n          severity: hasCriticalErrors ? \"critical\" : \"medium\",\n          category: \"compliance\",\n          description: \"Feature flag configuration has validation errors\",\n          affectedComponents: [\"feature-flags\"],\n          detectedAt: new Date(),\n        });\n      }\n\n      // Check provider availability\n      const providers: Provider[] = [\"bedrock\", \"google\", \"meta\"];\n      for (const provider of providers) {\n        const enabled = await this.featureFlags.isProviderEnabled(provider);\n        if (!enabled && provider === \"bedrock\") {\n          issues.push({\n            id: `provider-${provider}-disabled`,\n            severity: \"high\",\n            category: \"availability\",\n            description: `Critical provider ${provider} is disabled`,\n            affectedComponents: [`${provider}-adapter`],\n            detectedAt: new Date(),\n          });\n        }\n      }\n\n      // Determine overall health\n      const criticalIssues = issues.filter((i) => i.severity === \"critical\");\n      const highIssues = issues.filter((i) => i.severity === \"high\");\n      const mediumIssues = issues.filter((i) => i.severity === \"medium\");\n\n      let overallHealth: \"healthy\" | \"warning\" | \"critical\";\n      if (criticalIssues.length > 0) {\n        overallHealth = \"critical\";\n      } else if (highIssues.length > 0 || mediumIssues.length > 0) {\n        overallHealth = \"warning\";\n      } else {\n        overallHealth = \"healthy\";\n      }\n\n      // Generate recommendations based on issues\n      if (issues.length > 0) {\n        recommendations.push({\n          id: \"resolve-configuration-issues\",\n          type: \"immediate\",\n          description: \"Resolve feature flag and provider configuration issues\",\n          expectedImpact: \"Improved system stability and reliability\",\n          implementationSteps: [\n            \"Review feature flag validation errors\",\n            \"Enable required providers\",\n            \"Validate configuration consistency\",\n          ],\n        });\n      }\n\n      const result: InfrastructureAuditResult = {\n        timestamp: new Date(),\n        overallHealth,\n        detectedIssues: issues,\n        implementationGaps: gaps,\n        recommendations,\n        complianceStatus: {\n          gdprCompliant: true, // Assume compliant for now\n          dataResidencyCompliant: true,\n          auditTrailComplete: true,\n          issues: [],\n        },\n      };\n\n      this.log(\n        \"bedrock-activation\",\n        `Infrastructure audit completed: ${overallHealth} (${issues.length} issues)`\n      );\n      return result;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : \"Unknown error\";\n\n      this.log(\n        \"bedrock-activation\",\n        `Infrastructure audit failed: ${errorMessage}`\n      );\n\n      // Check if this is a circuit breaker failure\n      const isCircuitBreakerError = errorMessage.includes(\n        \"circuit breaker is OPEN\"\n      );\n\n      if (isCircuitBreakerError) {\n        // Handle circuit breaker failure\n        await this.handleCircuitBreakerFailure(\n          \"direct\", // Assuming direct path failed\n          \"infrastructure_audit\",\n          { error: errorMessage, timestamp: new Date() }\n        );\n\n        // Try fallback through MCP if available\n        try {\n          this.log(\n            \"bedrock-activation\",\n            \"Attempting infrastructure audit through MCP fallback\"\n          );\n\n          const fallbackResult = await this.circuitBreaker.execute(\n            \"google\", // Use google as MCP proxy\n            async () => {\n              return await this.infrastructureAuditor.performSystemHealthCheck();\n            }\n          );\n\n          this.log(\n            \"bedrock-activation\",\n            \"Infrastructure audit completed successfully through MCP fallback\"\n          );\n\n          // Return successful result with fallback note\n          return {\n            ...fallbackResult,\n            detectedIssues: [\n              ...fallbackResult.detectedIssues,\n              {\n                id: \"direct-path-circuit-breaker-open\",\n                severity: \"high\" as const,\n                category: \"availability\" as const,\n                description:\n                  \"Direct Bedrock path unavailable - using MCP fallback\",\n                affectedComponents: [\"direct-bedrock-client\"],\n                detectedAt: new Date(),\n              },\n            ],\n            recommendations: [\n              ...fallbackResult.recommendations,\n              {\n                id: \"restore-direct-path\",\n                type: \"short_term\" as const,\n                description: \"Investigate and restore direct Bedrock path\",\n                expectedImpact: \"Improved performance for critical operations\",\n                implementationSteps: [\n                  \"Check direct Bedrock client health\",\n                  \"Verify AWS connectivity\",\n                  \"Reset circuit breaker if appropriate\",\n                ],\n              },\n            ],\n          };\n        } catch (fallbackError) {\n          this.log(\n            \"bedrock-activation\",\n            `MCP fallback also failed: ${fallbackError}`\n          );\n\n          // Both paths failed - trigger emergency procedures\n          await this.triggerEmergencyProcedures(\"infrastructure_audit\", {\n            primaryError: errorMessage,\n            fallbackError: String(fallbackError),\n          });\n        }\n      }\n\n      // Log audit failure to audit trail\n      await this.auditTrail.logSupportModeEvent(\n        \"infrastructure_audit_failed\",\n        {\n          timestamp: new Date(),\n          error: errorMessage,\n          isCircuitBreakerError,\n          operation: \"infrastructure_audit\",\n        },\n        \"system\"\n      );\n\n      // Return a critical result if audit fails\n      return {\n        timestamp: new Date(),\n        overallHealth: \"critical\",\n        detectedIssues: [\n          {\n            id: \"audit-failure\",\n            severity: \"critical\",\n            category: \"availability\",\n            description: `Infrastructure audit failed: ${errorMessage}`,\n            affectedComponents: [\"audit-system\"],\n            detectedAt: new Date(),\n          },\n        ],\n        implementationGaps: [],\n        recommendations: [\n          {\n            id: \"fix-audit-system\",\n            type: \"immediate\",\n            description: \"Fix infrastructure audit system\",\n            expectedImpact: \"Restore monitoring capabilities\",\n            implementationSteps: [\n              \"Investigate audit failure\",\n              \"Check circuit breaker status\",\n              \"Verify routing path health\",\n              \"Fix underlying issues\",\n              \"Re-run audit\",\n            ],\n          },\n        ],\n        complianceStatus: {\n          gdprCompliant: false,\n          dataResidencyCompliant: false,\n          auditTrailComplete: false,\n          issues: [\"Audit system failure prevents compliance verification\"],\n        },\n      };\n    }\n  }\n\n  /**\n   * Enable meta-monitoring of Kiro execution\n   */\n  async enableMetaMonitoring(): Promise<void> {\n    this.log(\"bedrock-activation\", \"Enabling meta-monitoring\");\n\n    if (!this.isActive()) {\n      throw new Error(\n        \"Cannot enable meta-monitoring: Support mode is not active\"\n      );\n    }\n\n    // Validate compliance before enabling meta-monitoring\n    await this.validateComplianceForSupportOperation(\n      \"meta_monitor\",\n      \"direct_bedrock\",\n      \"critical\"\n    );\n\n    // In a real implementation, this would set up monitoring hooks\n    // For now, we'll just log the activation\n    this.log(\"bedrock-activation\", \"Meta-monitoring enabled successfully\");\n  }\n\n  /**\n   * Provide fallback support for failed operations with circuit breaker protection\n   */\n  async provideFallbackSupport(\n    context: FailureContext\n  ): Promise<SupportResult> {\n    // Handle null or invalid context\n    if (!context || !context.operation) {\n      this.log(\n        \"bedrock-activation\",\n        \"Providing fallback support for: invalid context\"\n      );\n      return {\n        success: false,\n        supportType: \"infrastructure\",\n        actionsPerformed: [\n          {\n            action: \"validate_context\",\n            timestamp: new Date(),\n            result: \"failure\",\n            details: \"Invalid or null failure context provided\",\n          },\n        ],\n        diagnostics: {\n          systemHealth: {},\n          performanceMetrics: {\n            responseTime: 0,\n            memoryUsage: 0,\n            cpuUsage: 0,\n            networkLatency: 0,\n          },\n          errorLogs: [\"Invalid failure context\"],\n          recommendations: [\"Provide valid failure context\"],\n        },\n        nextSteps: [\n          \"Manual intervention required\",\n          \"Contact system administrator\",\n        ],\n      };\n    }\n\n    this.log(\n      \"bedrock-activation\",\n      `Providing fallback support for: ${context.operation} with circuit breaker protection`\n    );\n\n    // Check circuit breaker status before proceeding\n    const circuitBreakerStatus = await this.getCircuitBreakerStatus();\n\n    // Validate compliance before providing fallback support\n    await this.validateComplianceForSupportOperation(\n      \"emergency\",\n      \"direct_bedrock\",\n      \"critical\"\n    );\n\n    try {\n      // Execute fallback support through circuit breaker with intelligent routing\n      const supportResult = await this.executeWithCircuitBreakerProtection(\n        context.operation,\n        \"emergency\",\n        async () => {\n          return await this.performFallbackSupport(context);\n        }\n      );\n\n      // Log successful fallback support\n      await this.auditTrail.logSupportModeEvent(\n        \"fallback_support_provided\",\n        {\n          timestamp: new Date(),\n          operation: context.operation,\n          severity: context.severity,\n          circuitBreakerStatus,\n          supportResult,\n        },\n        \"system\"\n      );\n\n      return supportResult;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Fallback support failed: ${errorMessage}`\n      );\n\n      // Handle circuit breaker failures\n      if (errorMessage.includes(\"circuit breaker is OPEN\")) {\n        await this.handleCircuitBreakerFailure(\n          \"direct\", // Assuming direct path failed first\n          context.operation,\n          { ...context, fallbackError: errorMessage }\n        );\n      }\n\n      // Log failure to audit trail\n      await this.auditTrail.logSupportModeEvent(\n        \"fallback_support_failed\",\n        {\n          timestamp: new Date(),\n          operation: context.operation,\n          error: errorMessage,\n          context,\n        },\n        \"system\"\n      );\n\n      // Return failure result\n      return {\n        success: false,\n        supportType: \"infrastructure\",\n        actionsPerformed: [\n          {\n            action: \"fallback_support_attempt\",\n            timestamp: new Date(),\n            result: \"failure\",\n            details: `Fallback support failed: ${errorMessage}`,\n          },\n        ],\n        diagnostics: {\n          systemHealth: { circuitBreakerStatus },\n          performanceMetrics: {\n            responseTime: 0,\n            memoryUsage: 0,\n            cpuUsage: 0,\n            networkLatency: 0,\n          },\n          errorLogs: [context.errorMessage, errorMessage],\n          recommendations: [\n            \"Check circuit breaker status\",\n            \"Verify routing path health\",\n            \"Consider manual intervention\",\n          ],\n        },\n        nextSteps: [\n          \"Manual intervention required\",\n          \"Check system health\",\n          \"Contact system administrator\",\n        ],\n      };\n    }\n  }\n\n  /**\n   * Execute operation with circuit breaker protection and intelligent routing\n   */\n  private async executeWithCircuitBreakerProtection<T>(\n    operation: string,\n    priority: \"emergency\" | \"critical\" | \"high\" | \"medium\" | \"low\",\n    operationFn: () => Promise<T>\n  ): Promise<T> {\n    try {\n      // Use intelligent router to determine best path\n      if (this.intelligentRouter) {\n        const routingDecision =\n          await this.intelligentRouter.makeRoutingDecision({\n            operation: operation as any,\n            priority: priority as any,\n            context: { timestamp: new Date() },\n          });\n\n        this.log(\n          \"bedrock-activation\",\n          `Routing decision: ${routingDecision.selectedRoute} (${routingDecision.reason})`\n        );\n\n        // Execute through selected route with circuit breaker protection\n        const provider =\n          routingDecision.selectedRoute === \"direct\" ? \"bedrock\" : \"google\";\n\n        return await this.circuitBreaker.execute(provider, operationFn);\n      } else {\n        // Fallback to direct circuit breaker execution\n        return await this.circuitBreaker.execute(\"bedrock\", operationFn);\n      }\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Circuit breaker protected operation failed: ${errorMessage}`\n      );\n\n      throw error;\n    }\n  }\n\n  /**\n   * Perform the actual fallback support logic\n   */\n  private async performFallbackSupport(\n    context: FailureContext\n  ): Promise<SupportResult> {\n    try {\n      const actions: SupportAction[] = [];\n      const diagnostics: DiagnosticData = {\n        systemHealth: {},\n        performanceMetrics: {\n          responseTime: 0,\n          memoryUsage: 0,\n          cpuUsage: 0,\n          networkLatency: 0,\n        },\n        errorLogs: [context.errorMessage],\n        recommendations: [],\n      };\n\n      // Analyze the failure context\n      actions.push({\n        action: \"analyze_failure_context\",\n        timestamp: new Date(),\n        result: \"success\",\n        details: `Analyzed failure: ${context.errorType} in ${context.operation}`,\n      });\n\n      // Determine support type based on failure\n      let supportType: \"infrastructure\" | \"execution\" | \"implementation\";\n      if (context.affectedSystems.includes(\"infrastructure\")) {\n        supportType = \"infrastructure\";\n      } else if (context.operation.includes(\"execution\")) {\n        supportType = \"execution\";\n      } else {\n        supportType = \"implementation\";\n      }\n\n      // Generate recommendations based on failure type\n      const nextSteps: string[] = [];\n      if (context.severity === \"critical\") {\n        nextSteps.push(\"Escalate to on-call team\");\n        nextSteps.push(\"Activate emergency procedures\");\n      } else {\n        nextSteps.push(\"Monitor for recurring issues\");\n        nextSteps.push(\"Schedule remediation during maintenance window\");\n      }\n\n      diagnostics.recommendations = nextSteps;\n\n      return {\n        success: true,\n        supportType,\n        actionsPerformed: actions,\n        diagnostics,\n        nextSteps,\n      };\n    } catch (error) {\n      this.log(\n        \"bedrock-activation\",\n        `Fallback support failed: ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n\n      return {\n        success: false,\n        supportType: \"infrastructure\",\n        actionsPerformed: [\n          {\n            action: \"fallback_support_attempt\",\n            timestamp: new Date(),\n            result: \"failure\",\n            details: `Failed to provide fallback support: ${\n              error instanceof Error ? error.message : \"Unknown error\"\n            }`,\n          },\n        ],\n        diagnostics: {\n          systemHealth: {},\n          performanceMetrics: {\n            responseTime: 0,\n            memoryUsage: 0,\n            cpuUsage: 0,\n            networkLatency: 0,\n          },\n          errorLogs: [context.errorMessage],\n          recommendations: [\"Manual intervention required\"],\n        },\n        nextSteps: [\n          \"Manual intervention required\",\n          \"Contact system administrator\",\n        ],\n      };\n    }\n  }\n\n  /**\n   * Send diagnostics to Kiro\n   */\n  async sendDiagnosticsToKiro(diagnostics: DiagnosticData): Promise<void> {\n    this.log(\"bedrock-activation\", \"Sending diagnostics to Kiro\");\n\n    // In a real implementation, this would send data through MCP or direct communication\n    // For now, we'll just log the action\n    this.log(\n      \"bedrock-activation\",\n      `Diagnostics sent: ${diagnostics.recommendations.length} recommendations`\n    );\n  }\n\n  /**\n   * Receive execution data from Kiro\n   */\n  async receiveKiroExecutionData(\n    executionData: ExecutionMetadata\n  ): Promise<void> {\n    this.log(\n      \"bedrock-activation\",\n      `Received execution data: ${executionData.operation}`\n    );\n\n    // In a real implementation, this would analyze the execution data\n    // and potentially trigger support actions\n    if (!executionData.success) {\n      this.log(\n        \"bedrock-activation\",\n        `Execution failure detected: ${executionData.errorDetails}`\n      );\n    }\n  }\n\n  // Security & Compliance Methods\n  async validateComplianceStatus(): Promise<ComplianceValidationResult> {\n    try {\n      this.log(\n        \"bedrock-activation\",\n        \"Validating compliance status for all providers\"\n      );\n\n      // Get compliance summary from the compliance integration\n      const complianceSummary =\n        await this.complianceIntegration.getComplianceSummary();\n\n      // Check Bedrock-specific compliance\n      const bedrockCompliance =\n        await this.providerCompliance.verifyProviderCompliance(\"bedrock\");\n\n      // Validate GDPR compliance for both routing paths\n      const gdprCompliant = await this.validateGDPRCompliance();\n\n      // Check EU data residency compliance for direct Bedrock access\n      const euDataResidencyCompliant =\n        await this.validateEUDataResidencyCompliance();\n\n      // Aggregate violations and recommendations\n      const violations: string[] = [];\n      const recommendations: string[] = [];\n\n      // Check overall compliance status\n      if (complianceSummary.overallCompliance === \"non_compliant\") {\n        violations.push(\n          \"Overall system compliance is non-compliant across providers\"\n        );\n        recommendations.push(\n          \"Review and update provider agreements to ensure compliance\"\n        );\n      }\n\n      // Check Bedrock-specific compliance\n      if (!bedrockCompliance.compliant) {\n        violations.push(\n          `Bedrock provider compliance issues: ${bedrockCompliance.violations.join(\n            \", \"\n          )}`\n        );\n        recommendations.push(\n          \"Update Bedrock provider agreement and verify compliance status\"\n        );\n      }\n\n      // Check GDPR compliance\n      if (!gdprCompliant) {\n        violations.push(\"GDPR compliance validation failed for hybrid routing\");\n        recommendations.push(\n          \"Ensure PII detection and redaction is enabled for both MCP and direct Bedrock operations\"\n        );\n      }\n\n      // Check EU data residency\n      if (!euDataResidencyCompliant) {\n        violations.push(\n          \"EU data residency compliance failed for direct Bedrock access\"\n        );\n        recommendations.push(\n          \"Configure Bedrock to use EU-Central-1 region for data processing\"\n        );\n      }\n\n      // Check for recent violations\n      if (complianceSummary.recentViolations > 0) {\n        violations.push(\n          `${complianceSummary.recentViolations} recent compliance violations detected`\n        );\n        recommendations.push(\"Review and resolve recent compliance violations\");\n      }\n\n      // Check for pending actions\n      if (complianceSummary.pendingActions > 0) {\n        recommendations.push(\n          `${complianceSummary.pendingActions} provider agreements require attention (expiring soon)`\n        );\n      }\n\n      const isCompliant = violations.length === 0;\n\n      this.log(\"bedrock-activation\", \"Compliance validation completed\", {\n        isCompliant,\n        violationsCount: violations.length,\n        recommendationsCount: recommendations.length,\n        overallCompliance: complianceSummary.overallCompliance,\n        bedrockCompliant: bedrockCompliance.compliant,\n        gdprCompliant,\n        euDataResidencyCompliant,\n      });\n\n      return {\n        isCompliant,\n        violations,\n        recommendations,\n        lastChecked: new Date(),\n      };\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Compliance validation failed: ${errorMessage}`\n      );\n\n      return {\n        isCompliant: false,\n        violations: [`Compliance validation error: ${errorMessage}`],\n        recommendations: [\n          \"Check compliance system configuration and provider agreements\",\n        ],\n        lastChecked: new Date(),\n      };\n    }\n  }\n\n  /**\n   * Validate GDPR compliance for both routing paths\n   */\n  private async validateGDPRCompliance(): Promise<boolean> {\n    try {\n      this.log(\n        \"bedrock-activation\",\n        \"Validating GDPR compliance for both direct Bedrock and MCP routing paths\"\n      );\n\n      // Generate comprehensive hybrid compliance report\n      const complianceReport =\n        await this.gdprHybridValidator.generateHybridComplianceReport();\n\n      // Log compliance status\n      this.log(\n        \"bedrock-activation\",\n        `Hybrid GDPR compliance report generated: ${complianceReport.overallCompliance} (Score: ${complianceReport.complianceScore}%)`\n      );\n\n      // Check if overall compliance is acceptable\n      if (complianceReport.overallCompliance === \"non_compliant\") {\n        this.log(\n          \"bedrock-activation\",\n          `GDPR compliance failed: ${complianceReport.criticalIssues.join(\n            \", \"\n          )}`\n        );\n        return false;\n      }\n\n      // Check individual routing path compliance\n      const directBedrockCompliant =\n        complianceReport.routingPathCompliance.directBedrock.isCompliant;\n      const mcpIntegrationCompliant =\n        complianceReport.routingPathCompliance.mcpIntegration.isCompliant;\n\n      if (!directBedrockCompliant) {\n        this.log(\n          \"bedrock-activation\",\n          `Direct Bedrock routing path GDPR compliance failed: ${complianceReport.routingPathCompliance.directBedrock.violations\n            .map((v) => v.description)\n            .join(\", \")}`\n        );\n      }\n\n      if (!mcpIntegrationCompliant) {\n        this.log(\n          \"bedrock-activation\",\n          `MCP integration routing path GDPR compliance failed: ${complianceReport.routingPathCompliance.mcpIntegration.violations\n            .map((v) => v.description)\n            .join(\", \")}`\n        );\n      }\n\n      // Check cross-path compliance\n      const crossPathCompliant = Object.values(\n        complianceReport.crossPathCompliance\n      ).every(Boolean);\n      if (!crossPathCompliant) {\n        this.log(\n          \"bedrock-activation\",\n          \"Cross-path GDPR compliance issues detected\"\n        );\n      }\n\n      // Log warnings if any\n      const totalWarnings =\n        complianceReport.routingPathCompliance.directBedrock.warnings.length +\n        complianceReport.routingPathCompliance.mcpIntegration.warnings.length;\n\n      if (totalWarnings > 0) {\n        this.log(\n          \"bedrock-activation\",\n          `GDPR compliance warnings detected: ${totalWarnings} warnings across routing paths`\n        );\n      }\n\n      // Return true if both paths are compliant or partially compliant with high score\n      return (\n        complianceReport.overallCompliance === \"compliant\" ||\n        (complianceReport.overallCompliance === \"partial\" &&\n          complianceReport.complianceScore >= 80)\n      );\n    } catch (error) {\n      this.log(\n        \"bedrock-activation\",\n        `GDPR compliance validation error: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Validate EU data residency compliance for direct Bedrock access\n   */\n  private async validateEUDataResidencyCompliance(): Promise<boolean> {\n    try {\n      // Check Bedrock agreement for EU data residency\n      const bedrockAgreement = this.providerCompliance.getAgreement(\"bedrock\");\n      if (!bedrockAgreement || !bedrockAgreement.euDataResidency) {\n        this.log(\n          \"bedrock-activation\",\n          \"Bedrock agreement does not guarantee EU data residency\"\n        );\n        return false;\n      }\n\n      // Validate that Bedrock is configured to use EU regions\n      const euRegionConfigured =\n        await this.validateBedrockEURegionConfiguration();\n      if (!euRegionConfigured) {\n        this.log(\n          \"bedrock-activation\",\n          \"Bedrock not configured to use EU regions for data processing\"\n        );\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      this.log(\n        \"bedrock-activation\",\n        `EU data residency validation error: ${error}`\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Validate PII detection configuration\n   */\n  private async validatePIIDetectionConfiguration(): Promise<boolean> {\n    try {\n      // Check if PII detection feature flags are enabled\n      const piiDetectionEnabled = this.featureFlags.getFlag(\n        \"pii_detection_enabled\",\n        false\n      );\n      const piiRedactionEnabled = this.featureFlags.getFlag(\n        \"pii_redaction_enabled\",\n        false\n      );\n\n      if (!piiDetectionEnabled || !piiRedactionEnabled) {\n        return false;\n      }\n\n      // Additional validation could check if PII detection services are running\n      // This would integrate with existing PII detection infrastructure\n      return true;\n    } catch (error) {\n      this.log(\n        \"bedrock-activation\",\n        `PII detection validation error: ${error}`\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Validate Bedrock EU region configuration\n   */\n  private async validateBedrockEURegionConfiguration(): Promise<boolean> {\n    try {\n      // Check if Bedrock is configured to use EU regions\n      const bedrockRegion =\n        process.env.AWS_BEDROCK_REGION || process.env.AWS_REGION || \"us-east-1\";\n\n      // EU regions for Bedrock\n      const euRegions = [\n        \"eu-central-1\",\n        \"eu-west-1\",\n        \"eu-west-2\",\n        \"eu-west-3\",\n        \"eu-north-1\",\n      ];\n\n      if (!euRegions.includes(bedrockRegion)) {\n        this.log(\n          \"bedrock-activation\",\n          `Bedrock region ${bedrockRegion} is not an EU region`\n        );\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      this.log(\n        \"bedrock-activation\",\n        `Bedrock EU region validation error: ${error}`\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Validate compliance for support operations with hybrid routing\n   */\n  private async validateComplianceForSupportOperation(\n    operationType: HybridRoutingPath[\"operationType\"],\n    routeType: HybridRoutingPath[\"routeType\"] = \"direct_bedrock\",\n    priority: HybridRoutingPath[\"priority\"] = \"medium\"\n  ): Promise<void> {\n    try {\n      this.log(\n        \"bedrock-activation\",\n        `Validating GDPR compliance for support operation: ${operationType} via ${routeType} route`\n      );\n\n      // Create routing path for validation\n      const routingPath: HybridRoutingPath = {\n        routeType,\n        provider: \"bedrock\",\n        operationType,\n        priority,\n      };\n\n      // Generate correlation ID for this validation\n      const correlationId = `support-${operationType}-${routeType}-${Date.now()}`;\n\n      // Validate GDPR compliance before routing\n      const validationResult =\n        await this.gdprHybridValidator.validateBeforeRouting(\n          routingPath,\n          correlationId\n        );\n\n      if (!validationResult.allowed) {\n        throw new Error(validationResult.reason);\n      }\n\n      // Also validate using existing compliance integration for provider agreements\n      const mockRequest = {\n        prompt: `Support operation: ${operationType}`,\n        context: {\n          domain: \"support\",\n          intent: \"infrastructure_support\",\n          routingPath: routeType,\n        },\n      };\n\n      await this.complianceIntegration.enforceCompliance(\n        mockRequest,\n        \"bedrock\",\n        correlationId\n      );\n\n      this.log(\n        \"bedrock-activation\",\n        `GDPR and provider compliance validation passed for support operation: ${operationType} via ${routeType}`\n      );\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Compliance validation failed for support operation: ${operationType} via ${routeType} - ${errorMessage}`\n      );\n\n      throw new Error(\n        `Support operation blocked due to compliance violation: ${errorMessage}`\n      );\n    }\n  }\n\n  /**\n   * Create compliance reporting for support mode\n   */\n  async createComplianceReportForSupportMode(): Promise<{\n    reportId: string;\n    timestamp: Date;\n    supportModeCompliance: {\n      overallCompliant: boolean;\n      bedrockCompliant: boolean;\n      gdprCompliant: boolean;\n      euDataResidencyCompliant: boolean;\n    };\n    hybridRoutingCompliance: {\n      mcpPathCompliant: boolean;\n      directBedrockPathCompliant: boolean;\n      auditTrailComplete: boolean;\n    };\n    violations: string[];\n    recommendations: string[];\n  }> {\n    try {\n      this.log(\n        \"bedrock-activation\",\n        \"Generating compliance report for support mode\"\n      );\n\n      const reportId = `bedrock-support-compliance-${Date.now()}`;\n      const timestamp = new Date();\n\n      // Get overall compliance status\n      const complianceStatus = await this.validateComplianceStatus();\n\n      // Check Bedrock-specific compliance\n      const bedrockCompliance =\n        await this.providerCompliance.verifyProviderCompliance(\"bedrock\");\n\n      // Check GDPR compliance\n      const gdprCompliant = await this.validateGDPRCompliance();\n\n      // Check EU data residency\n      const euDataResidencyCompliant =\n        await this.validateEUDataResidencyCompliance();\n\n      // Get compliance summary for all providers\n      const complianceSummary =\n        await this.complianceIntegration.getComplianceSummary();\n\n      const report = {\n        reportId,\n        timestamp,\n        supportModeCompliance: {\n          overallCompliant: complianceStatus.isCompliant,\n          bedrockCompliant: bedrockCompliance.compliant,\n          gdprCompliant,\n          euDataResidencyCompliant,\n        },\n        hybridRoutingCompliance: {\n          mcpPathCompliant:\n            complianceSummary.overallCompliance !== \"non_compliant\",\n          directBedrockPathCompliant:\n            bedrockCompliance.compliant && gdprCompliant,\n          auditTrailComplete: true, // Assuming audit trail is properly configured\n        },\n        violations: [\n          ...complianceStatus.violations,\n          ...bedrockCompliance.violations,\n        ],\n        recommendations: [\n          ...complianceStatus.recommendations,\n          \"Regularly review provider agreements for compliance updates\",\n          \"Monitor PII detection and redaction effectiveness\",\n          \"Ensure audit trail completeness for all support operations\",\n        ],\n      };\n\n      this.log(\n        \"bedrock-activation\",\n        \"Compliance report generated successfully\",\n        {\n          reportId,\n          overallCompliant: report.supportModeCompliance.overallCompliant,\n          violationsCount: report.violations.length,\n        }\n      );\n\n      return report;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Failed to generate compliance report: ${errorMessage}`\n      );\n\n      throw new Error(`Compliance report generation failed: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Enable Circuit Breaker Protection for Both Routing Paths\n   */\n  async enableCircuitBreaker(): Promise<void> {\n    try {\n      this.log(\n        \"bedrock-activation\",\n        \"Enabling circuit breaker protection for hybrid routing\"\n      );\n\n      // Validate circuit breaker is properly initialized\n      if (!this.circuitBreaker) {\n        throw new Error(\"Circuit breaker not initialized\");\n      }\n\n      // Enable circuit breaker for all providers\n      const providers: Provider[] = [\"bedrock\", \"google\", \"meta\"];\n\n      // Reset any existing circuit breaker states\n      providers.forEach((provider) => {\n        if (this.circuitBreaker.isOpen(provider)) {\n          this.log(\n            \"bedrock-activation\",\n            `Resetting circuit breaker for provider: ${provider}`\n          );\n          this.circuitBreaker.forceClose(provider);\n        }\n      });\n\n      // Configure circuit breaker thresholds for support operations\n      const supportConfig = {\n        failureThreshold: 3, // More sensitive for support operations\n        recoveryTimeout: 30000, // 30 seconds recovery\n        halfOpenMaxCalls: 2, // Conservative testing\n        healthCheckInterval: 15000, // 15 second health checks\n      };\n\n      // Log circuit breaker configuration\n      this.log(\n        \"bedrock-activation\",\n        `Circuit breaker configured with thresholds: ${JSON.stringify(\n          supportConfig\n        )}`\n      );\n\n      // Enable circuit breaker monitoring for direct Bedrock path\n      if (this.directBedrockClient) {\n        this.log(\n          \"bedrock-activation\",\n          \"Circuit breaker enabled for direct Bedrock path\"\n        );\n      }\n\n      // Enable circuit breaker monitoring for MCP path\n      if (this.mcpRouter) {\n        this.log(\n          \"bedrock-activation\",\n          \"Circuit breaker enabled for MCP routing path\"\n        );\n      }\n\n      // Start health monitoring for both paths\n      if (this.hybridHealthMonitor) {\n        await this.hybridHealthMonitor.startHealthMonitoring();\n        this.log(\n          \"bedrock-activation\",\n          \"Health monitoring started for hybrid routing paths\"\n        );\n      }\n\n      // Log audit trail event\n      await this.auditTrail.logSupportModeEvent(\n        \"circuit_breaker_enabled\",\n        {\n          timestamp: new Date(),\n          configuration: supportConfig,\n          enabledPaths: [\"direct_bedrock\", \"mcp_router\"],\n          healthMonitoringActive: true,\n        },\n        \"system\"\n      );\n\n      this.log(\n        \"bedrock-activation\",\n        \"Circuit breaker protection enabled for both routing paths\"\n      );\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Failed to enable circuit breaker: ${errorMessage}`\n      );\n\n      // Log failure to audit trail\n      await this.auditTrail.logSupportModeEvent(\n        \"circuit_breaker_enable_failed\",\n        {\n          timestamp: new Date(),\n          error: errorMessage,\n          context: \"circuit_breaker_activation\",\n        },\n        \"system\"\n      );\n\n      throw new Error(`Circuit breaker activation failed: ${errorMessage}`);\n    }\n  }\n\n  async checkSecurityPosture(): Promise<SecurityAuditResult> {\n    this.log(\n      \"bedrock-activation\",\n      \"Checking security posture for hybrid architecture\"\n    );\n\n    try {\n      // Start security posture monitoring if not already active\n      if (!this.securityPostureMonitor.isMonitoringActive()) {\n        await this.securityPostureMonitor.startMonitoring();\n      }\n\n      // Assess current security posture\n      const postureStatus =\n        await this.securityPostureMonitor.assessSecurityPosture();\n\n      // Convert to SecurityAuditResult format\n      const vulnerabilities: SecurityVulnerability[] = [\n        ...postureStatus.routes.mcp.vulnerabilities,\n        ...postureStatus.routes.directBedrock.vulnerabilities,\n      ];\n\n      const recommendations: string[] = [\n        ...postureStatus.recommendations.immediate.map((r) => r.description),\n        ...postureStatus.recommendations.shortTerm.map((r) => r.description),\n      ];\n\n      const result: SecurityAuditResult = {\n        securityScore: postureStatus.overall.securityScore,\n        vulnerabilities,\n        recommendations,\n        lastAudit: postureStatus.overall.lastAssessment,\n      };\n\n      this.log(\n        \"bedrock-activation\",\n        `Security posture check completed: Score ${result.securityScore}, ${vulnerabilities.length} vulnerabilities`\n      );\n\n      // Log to audit trail\n      await this.auditTrail.logSupportModeEvent(\n        \"security_posture_checked\",\n        {\n          timestamp: new Date(),\n          securityScore: result.securityScore,\n          vulnerabilityCount: vulnerabilities.length,\n          threatLevel: postureStatus.overall.threatLevel,\n          complianceStatus: postureStatus.overall.complianceStatus,\n        },\n        \"system\"\n      );\n\n      return result;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Security posture check failed: ${errorMessage}`\n      );\n\n      // Log failure to audit trail\n      await this.auditTrail.logSupportModeEvent(\n        \"security_posture_check_failed\",\n        {\n          timestamp: new Date(),\n          error: errorMessage,\n        },\n        \"system\"\n      );\n\n      // Return a degraded security result\n      return {\n        securityScore: 0,\n        vulnerabilities: [\n          {\n            id: \"security-check-failure\",\n            severity: \"critical\",\n            description: `Security posture check failed: ${errorMessage}`,\n            component: \"security-posture-monitor\",\n            remediation: \"Investigate and fix security monitoring system\",\n          },\n        ],\n        recommendations: [\n          \"Fix security posture monitoring system\",\n          \"Investigate security check failure\",\n          \"Manual security audit required\",\n        ],\n        lastAudit: new Date(),\n      };\n    }\n  }\n\n  /**\n   * Check Circuit Breaker Status for Both Routing Paths\n   */\n  async getCircuitBreakerStatus(): Promise<{\n    directBedrock: { isOpen: boolean; state: string; metrics: any };\n    mcpRouter: { isOpen: boolean; state: string; metrics: any };\n    overallHealth: \"healthy\" | \"degraded\" | \"critical\";\n  }> {\n    try {\n      // Check direct Bedrock circuit breaker\n      const directBedrockOpen = this.circuitBreaker.isOpen(\"bedrock\");\n      const directBedrockMetrics = this.circuitBreaker.getMetrics(\"bedrock\");\n\n      // Check MCP router circuit breaker (using \"google\" as MCP provider proxy)\n      const mcpRouterOpen = this.circuitBreaker.isOpen(\"google\");\n      const mcpRouterMetrics = this.circuitBreaker.getMetrics(\"google\");\n\n      // Determine overall health\n      let overallHealth: \"healthy\" | \"degraded\" | \"critical\" = \"healthy\";\n\n      if (directBedrockOpen && mcpRouterOpen) {\n        overallHealth = \"critical\"; // Both paths down\n      } else if (directBedrockOpen || mcpRouterOpen) {\n        overallHealth = \"degraded\"; // One path down\n      }\n\n      const status = {\n        directBedrock: {\n          isOpen: directBedrockOpen,\n          state: directBedrockMetrics.state,\n          metrics: directBedrockMetrics,\n        },\n        mcpRouter: {\n          isOpen: mcpRouterOpen,\n          state: mcpRouterMetrics.state,\n          metrics: mcpRouterMetrics,\n        },\n        overallHealth,\n      };\n\n      // Log status check to audit trail\n      await this.auditTrail.logSupportModeEvent(\n        \"circuit_breaker_status_check\",\n        {\n          timestamp: new Date(),\n          status,\n          overallHealth,\n        },\n        \"system\"\n      );\n\n      return status;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Failed to check circuit breaker status: ${errorMessage}`\n      );\n\n      throw new Error(`Circuit breaker status check failed: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Handle Circuit Breaker Failures with Intelligent Fallback\n   */\n  async handleCircuitBreakerFailure(\n    failedPath: \"direct\" | \"mcp\",\n    operation: string,\n    context: any\n  ): Promise<void> {\n    try {\n      this.log(\n        \"bedrock-activation\",\n        `Handling circuit breaker failure for ${failedPath} path during ${operation}`\n      );\n\n      // Log failure event\n      await this.auditTrail.logSupportModeEvent(\n        \"circuit_breaker_failure\",\n        {\n          timestamp: new Date(),\n          failedPath,\n          operation,\n          context,\n        },\n        \"system\"\n      );\n\n      // Attempt intelligent fallback through router\n      if (this.intelligentRouter) {\n        const fallbackRoute = failedPath === \"direct\" ? \"mcp\" : \"direct\";\n\n        this.log(\n          \"bedrock-activation\",\n          `Attempting fallback to ${fallbackRoute} path`\n        );\n\n        // Check if fallback path is available\n        const fallbackProvider =\n          fallbackRoute === \"direct\" ? \"bedrock\" : \"google\";\n        const fallbackAvailable = !this.circuitBreaker.isOpen(fallbackProvider);\n\n        if (fallbackAvailable) {\n          this.log(\n            \"bedrock-activation\",\n            `Fallback to ${fallbackRoute} path is available`\n          );\n        } else {\n          this.log(\n            \"bedrock-activation\",\n            `Fallback to ${fallbackRoute} path is also unavailable - both paths down`\n          );\n\n          // Both paths down - trigger emergency procedures\n          await this.triggerEmergencyProcedures(operation, context);\n        }\n      }\n\n      // Update health monitoring\n      if (this.hybridHealthMonitor) {\n        await this.hybridHealthMonitor.recordFailure(failedPath, operation);\n      }\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Failed to handle circuit breaker failure: ${errorMessage}`\n      );\n\n      throw new Error(\n        `Circuit breaker failure handling failed: ${errorMessage}`\n      );\n    }\n  }\n\n  /**\n   * Trigger Emergency Procedures when Both Paths are Down\n   */\n  private async triggerEmergencyProcedures(\n    operation: string,\n    context: any\n  ): Promise<void> {\n    try {\n      this.log(\n        \"bedrock-activation\",\n        `Triggering emergency procedures for operation: ${operation}`\n      );\n\n      // Log emergency event\n      await this.auditTrail.logSupportModeEvent(\n        \"emergency_procedures_triggered\",\n        {\n          timestamp: new Date(),\n          operation,\n          context,\n          reason: \"both_routing_paths_unavailable\",\n        },\n        \"system\"\n      );\n\n      // Disable support mode temporarily\n      this.isActivated = false;\n\n      // Send emergency notifications\n      await this.sendEmergencyNotifications(operation, context);\n\n      // Force reset circuit breakers after emergency timeout\n      setTimeout(async () => {\n        try {\n          this.log(\n            \"bedrock-activation\",\n            \"Attempting emergency circuit breaker reset\"\n          );\n\n          this.circuitBreaker.resetAll();\n\n          // Re-enable support mode if feature flag is still active\n          const supportModeEnabled =\n            await this.featureFlags.isBedrockSupportModeEnabled();\n          if (supportModeEnabled) {\n            this.isActivated = true;\n            this.log(\n              \"bedrock-activation\",\n              \"Support mode re-enabled after emergency reset\"\n            );\n          }\n        } catch (resetError) {\n          this.log(\n            \"bedrock-activation\",\n            `Emergency reset failed: ${resetError}`\n          );\n        }\n      }, 60000); // 1 minute emergency timeout\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Failed to trigger emergency procedures: ${errorMessage}`\n      );\n    }\n  }\n\n  /**\n   * Send Emergency Notifications\n   */\n  private async sendEmergencyNotifications(\n    operation: string,\n    context: any\n  ): Promise<void> {\n    try {\n      // Send notifications through configured channels\n      for (const channel of this.config.notificationChannels) {\n        if (channel.enabled) {\n          const message = `EMERGENCY: Bedrock Support Mode - Both routing paths unavailable during ${operation}`;\n\n          this.log(\n            \"bedrock-activation\",\n            `Sending emergency notification via ${channel.type}: ${message}`\n          );\n\n          // In production, this would send actual notifications\n          // For now, just log the notification\n        }\n      }\n    } catch (error) {\n      this.log(\n        \"bedrock-activation\",\n        `Failed to send emergency notifications: ${error}`\n      );\n    }\n  }\n\n  // Cost & Performance Methods (using existing CostPerformanceOptimizer)\n  async monitorCostThresholds(): Promise<CostAnalysis> {\n    try {\n      // Get cost summary from existing optimizer\n      const costSummary = this.costPerformanceOptimizer.getCostSummary();\n      const performanceMetrics =\n        this.costPerformanceOptimizer.getPerformanceMetrics();\n\n      // Log cost monitoring event\n      await this.auditTrail.logEvent({\n        eventType: \"cost_monitoring\",\n        userId: \"system\",\n        action: \"monitor_cost_thresholds\",\n        resourceType: \"cost_performance\",\n        resourceId: \"bedrock-support-mode\",\n        metadata: {\n          dailySpent: costSummary.daily.spent,\n          monthlySpent: costSummary.monthly.spent,\n          dailyRemaining: costSummary.daily.remaining,\n          monthlyRemaining: costSummary.monthly.remaining,\n          cacheHitRate: performanceMetrics.cacheHitRate,\n        },\n        timestamp: new Date(),\n        ipAddress: \"internal\",\n        userAgent: \"bedrock-support-manager\",\n      });\n\n      // Check for emergency shutdown conditions\n      const costPressure =\n        costSummary.monthly.spent / costSummary.monthly.limit;\n      if (costPressure > 0.95) {\n        await this.emergencyShutdownManager.triggerShutdown(\n          \"all\",\n          \"cost_overrun\",\n          \"manual\",\n          {\n            costEuro: costSummary.monthly.spent,\n            additionalInfo: {\n              dailySpent: costSummary.daily.spent,\n              monthlyLimit: costSummary.monthly.limit,\n            },\n          }\n        );\n      }\n\n      // Return cost analysis in expected format\n      return {\n        currentSpend: costSummary.monthly.spent,\n        projectedSpend: costSummary.monthly.spent * (30 / new Date().getDate()), // Simple projection\n        budgetUtilization: costPressure,\n        costBreakdown: {\n          daily: costSummary.daily.spent,\n          monthly: costSummary.monthly.spent,\n          cacheHitRate: performanceMetrics.cacheHitRate,\n        },\n        recommendations: this.generateCostRecommendations(\n          costSummary,\n          performanceMetrics\n        ),\n      };\n    } catch (error) {\n      this.log(\n        \"bedrock-activation\",\n        `Error monitoring cost thresholds: ${error}`\n      );\n\n      return {\n        currentSpend: 0,\n        projectedSpend: 0,\n        budgetUtilization: 0,\n        costBreakdown: {},\n        recommendations: [\n          \"Error retrieving cost data - please check cost monitoring system\",\n        ],\n      };\n    }\n  }\n\n  /**\n   * Generate cost optimization recommendations\n   */\n  private generateCostRecommendations(\n    costSummary: any,\n    performanceMetrics: any\n  ): string[] {\n    const recommendations: string[] = [];\n\n    // Check cache hit rate\n    if (performanceMetrics.cacheHitRate < 0.5) {\n      recommendations.push(\n        \"Improve cache hit rate to reduce AI provider costs\"\n      );\n    }\n\n    // Check daily budget utilization\n    const dailyUtilization = costSummary.daily.spent / costSummary.daily.limit;\n    if (dailyUtilization > 0.8) {\n      recommendations.push(\n        \"Daily budget utilization high - consider implementing cost optimization strategies\"\n      );\n    }\n\n    // Check monthly budget utilization\n    const monthlyUtilization =\n      costSummary.monthly.spent / costSummary.monthly.limit;\n    if (monthlyUtilization > 0.75) {\n      recommendations.push(\n        \"Monthly budget on track to exceed - review operation priorities\"\n      );\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Get detailed cost and performance status\n   */\n  async getCostPerformanceStatus() {\n    const costSummary = this.costPerformanceOptimizer.getCostSummary();\n    const performanceMetrics =\n      this.costPerformanceOptimizer.getPerformanceMetrics();\n    const shutdownStatus = this.emergencyShutdownManager.getStatus();\n\n    return {\n      cost: costSummary,\n      performance: performanceMetrics,\n      emergencyShutdown: shutdownStatus,\n    };\n  }\n\n  /**\n   * Track cost for a support operation (stub for compatibility)\n   */\n  async trackSupportOperationCost(\n    operationId: string,\n    route: \"direct\" | \"mcp\" | \"fallback\" | \"hybrid\",\n    operationType:\n      | \"emergency\"\n      | \"infrastructure\"\n      | \"meta_monitor\"\n      | \"implementation\"\n      | \"standard\",\n    cost: number,\n    tokensUsed?: { input: number; output: number }\n  ): Promise<void> {\n    await this.costBudgetMonitor.trackOperationCost({\n      operationId,\n      route,\n      operationType,\n      cost,\n      tokensUsed,\n      timestamp: new Date(),\n      metadata: {\n        supportMode: true,\n        bedrockActivation: this.isActivated,\n      },\n    });\n  }\n\n  async optimizePerformance(): Promise<PerformanceOptimization> {\n    return {\n      currentMetrics: {\n        responseTime: 0,\n        memoryUsage: 0,\n        cpuUsage: 0,\n        networkLatency: 0,\n      },\n      optimizationOpportunities: [],\n      expectedImprovements: {},\n    };\n  }\n\n  async enableEmergencyMode(): Promise<void> {\n    this.log(\"bedrock-activation\", \"Emergency mode enabled\");\n  }\n\n  // Template & Prompt Methods (Stubs for now)\n  async validatePromptTemplates(): Promise<TemplateValidationResult> {\n    return {\n      isValid: true,\n      errors: [],\n      warnings: [],\n      templateCount: 0,\n    };\n  }\n\n  async enablePIIRedaction(): Promise<void> {\n    this.log(\"bedrock-activation\", \"PII redaction enabled\");\n  }\n\n  /**\n   * Run comprehensive red team security evaluations for direct Bedrock\n   *\n   * This method executes automated security testing including:\n   * - Prompt injection detection\n   * - Jailbreak attempt detection\n   * - Data exfiltration prevention\n   * - Privilege escalation prevention\n   * - Denial of service protection\n   */\n  async runRedTeamEvaluations(): Promise<SecurityTestResult> {\n    try {\n      this.log(\"bedrock-activation\", \"Starting red team security evaluation\");\n\n      // Check if red team evaluations are enabled\n      if (!this.featureFlags.isEnabled(\"red_team_evaluation_enabled\", true)) {\n        this.log(\"bedrock-activation\", \"Red team evaluations are disabled\");\n        return {\n          passed: true,\n          testResults: [],\n          overallScore: 100,\n          recommendations: [\n            \"Red team evaluations are disabled - enable for security testing\",\n          ],\n        };\n      }\n\n      // Initialize red team evaluator with direct Bedrock client\n      const evaluator = new RedTeamEvaluator(this.directBedrockClient, {\n        enablePromptInjectionTests: true,\n        enableJailbreakTests: true,\n        enableDataExfiltrationTests: true,\n        enablePrivilegeEscalationTests: true,\n        enableDenialOfServiceTests: true,\n        testDepth: \"standard\",\n        maxTestsPerCategory: 5,\n        timeoutMs: 30000,\n      });\n\n      // Run comprehensive evaluation\n      const report: RedTeamEvaluationReport = await evaluator.runEvaluation();\n\n      // Log evaluation results\n      await this.auditTrail.logEvent({\n        eventType: \"red_team_evaluation\",\n        requestId: report.evaluationId,\n        provider: \"bedrock\",\n        complianceStatus:\n          report.vulnerabilitiesDetected > 0 ? \"violation\" : \"compliant\",\n        metadata: {\n          totalTests: report.totalTests,\n          testsPassed: report.testsPassed,\n          testsFailed: report.testsFailed,\n          vulnerabilitiesDetected: report.vulnerabilitiesDetected,\n          securityScore: report.overallSecurityScore,\n          criticalVulnerabilities: report.criticalVulnerabilities.length,\n          highVulnerabilities: report.highVulnerabilities.length,\n          executionTimeMs: report.executionTimeMs,\n        },\n      });\n\n      // Convert red team report to SecurityTestResult format\n      const testResults: SecurityTest[] = [\n        ...report.criticalVulnerabilities.map((v) => ({\n          testName: v.testName,\n          passed: v.passed,\n          details: v.description,\n          severity: v.severity,\n        })),\n        ...report.highVulnerabilities.map((v) => ({\n          testName: v.testName,\n          passed: v.passed,\n          details: v.description,\n          severity: v.severity,\n        })),\n        ...report.mediumVulnerabilities.map((v) => ({\n          testName: v.testName,\n          passed: v.passed,\n          details: v.description,\n          severity: v.severity,\n        })),\n        ...report.lowVulnerabilities.map((v) => ({\n          testName: v.testName,\n          passed: v.passed,\n          details: v.description,\n          severity: v.severity,\n        })),\n      ];\n\n      const passed = report.vulnerabilitiesDetected === 0;\n\n      this.log(\n        \"bedrock-activation\",\n        `Red team evaluation completed: ${passed ? \"PASSED\" : \"FAILED\"} ` +\n          `(Score: ${report.overallSecurityScore}/100, ` +\n          `Vulnerabilities: ${report.vulnerabilitiesDetected})`\n      );\n\n      return {\n        passed,\n        testResults,\n        overallScore: report.overallSecurityScore,\n        recommendations: report.recommendations,\n      };\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : \"Unknown error\";\n\n      this.log(\n        \"bedrock-activation\",\n        `Red team evaluation failed: ${errorMessage}`\n      );\n\n      // Log error to audit trail\n      await this.auditTrail.logEvent({\n        eventType: \"red_team_evaluation\",\n        requestId: `red-team-eval-error-${Date.now()}`,\n        provider: \"bedrock\",\n        complianceStatus: \"violation\",\n        error: {\n          type: \"evaluation_error\",\n          message: errorMessage,\n        },\n      });\n\n      return {\n        passed: false,\n        testResults: [\n          {\n            testName: \"Red Team Evaluation\",\n            passed: false,\n            details: `Evaluation failed: ${errorMessage}`,\n            severity: \"critical\",\n          },\n        ],\n        overallScore: 0,\n        recommendations: [\n          \"Fix red team evaluation system errors\",\n          \"Review direct Bedrock client configuration\",\n          \"Check security testing infrastructure\",\n        ],\n      };\n    }\n  }\n\n  /**\n   * Get default configuration\n   */\n  private getDefaultConfig(\n    overrides?: Partial<BedrockSupportConfig>\n  ): BedrockSupportConfig {\n    return {\n      enabled: false,\n      environments: [\"development\", \"staging\", \"production\"],\n      auditInterval: 1800000, // 30 minutes\n      monitoringLevel: \"basic\",\n      autoResolutionEnabled: false,\n      notificationChannels: [],\n      ...overrides,\n    };\n  }\n\n  /**\n   * Get system resource monitoring status\n   * Ensures support mode overhead stays under 5% of system resources\n   */\n  public getResourceMonitoringStatus(): {\n    isMonitoring: boolean;\n    isWithinThresholds: boolean;\n    currentMetrics: any;\n    summary: any;\n    alerts: any[];\n  } {\n    const status = this.systemResourceMonitor.getStatus();\n    const summary = this.systemResourceMonitor.getResourceSummary();\n    const alerts = this.systemResourceMonitor.getActiveAlerts();\n\n    return {\n      isMonitoring: status.isMonitoring,\n      isWithinThresholds: summary.isWithinThresholds,\n      currentMetrics: summary.current,\n      summary,\n      alerts,\n    };\n  }\n\n  /**\n   * Check if support mode is within the 5% system resource overhead requirement\n   */\n  public async validateResourceOverhead(): Promise<{\n    isCompliant: boolean;\n    cpuUsage: number;\n    memoryUsage: number;\n    thresholds: any;\n    recommendations: string[];\n  }> {\n    const currentMetrics = await this.systemResourceMonitor.getCurrentMetrics();\n    const summary = this.systemResourceMonitor.getResourceSummary();\n    const status = this.systemResourceMonitor.getStatus();\n\n    const recommendations: string[] = [];\n\n    // Check CPU usage against 1% threshold (well under 5%)\n    if (currentMetrics.cpuUsagePercent > 0.8) {\n      recommendations.push(\n        `CPU usage (${currentMetrics.cpuUsagePercent.toFixed(\n          2\n        )}%) approaching threshold. Consider optimizing support operations.`\n      );\n    }\n\n    // Check memory usage against 50MB threshold\n    if (currentMetrics.memoryUsageMB > 40) {\n      recommendations.push(\n        `Memory usage (${currentMetrics.memoryUsageMB.toFixed(\n          2\n        )}MB) approaching threshold. Consider memory optimization.`\n      );\n    }\n\n    // Check if monitoring is active\n    if (!status.isMonitoring) {\n      recommendations.push(\n        \"Resource monitoring is not active. Enable monitoring to track overhead.\"\n      );\n    }\n\n    const isCompliant =\n      currentMetrics.cpuUsagePercent <= 1.0 && // 1% CPU (well under 5%)\n      currentMetrics.memoryUsageMB <= 50 && // 50MB memory (reasonable for 5% overhead)\n      status.isMonitoring;\n\n    await this.auditTrail.logEvent({\n      eventType: \"resource_overhead_validation\",\n      timestamp: new Date(),\n      details: {\n        component: \"BedrockSupportManager\",\n        isCompliant,\n        cpuUsage: currentMetrics.cpuUsagePercent,\n        memoryUsage: currentMetrics.memoryUsageMB,\n        thresholds: status.config.thresholds,\n        recommendations,\n      },\n    });\n\n    return {\n      isCompliant,\n      cpuUsage: currentMetrics.cpuUsagePercent,\n      memoryUsage: currentMetrics.memoryUsageMB,\n      thresholds: status.config.thresholds,\n      recommendations,\n    };\n  }\n\n  /**\n   * Get performance metrics with resource overhead information\n   */\n  public async getPerformanceMetricsWithOverhead(): Promise<\n    PerformanceMetrics & {\n      resourceOverhead: {\n        cpuUsagePercent: number;\n        memoryUsageMB: number;\n        isWithinThresholds: boolean;\n      };\n    }\n  > {\n    const currentMetrics = await this.systemResourceMonitor.getCurrentMetrics();\n    const summary = this.systemResourceMonitor.getResourceSummary();\n\n    return {\n      responseTime: 0, // This would be populated by actual operations\n      memoryUsage: currentMetrics.memoryUsageMB,\n      cpuUsage: currentMetrics.cpuUsagePercent,\n      networkLatency: 0, // This would be populated by actual operations\n      resourceOverhead: {\n        cpuUsagePercent: currentMetrics.cpuUsagePercent,\n        memoryUsageMB: currentMetrics.memoryUsageMB,\n        isWithinThresholds: summary.isWithinThresholds,\n      },\n    };\n  }\n\n  /**\n   * Emergency shutdown if resource usage exceeds critical thresholds\n   */\n  public async emergencyShutdownOnResourceOverhead(): Promise<void> {\n    const validation = await this.validateResourceOverhead();\n\n    // If CPU usage exceeds 2% or memory exceeds 100MB, trigger emergency shutdown\n    if (validation.cpuUsage > 2.0 || validation.memoryUsage > 100) {\n      this.log(\n        \"bedrock-activation\",\n        `Emergency shutdown triggered due to excessive resource usage: CPU ${validation.cpuUsage.toFixed(\n          2\n        )}%, Memory ${validation.memoryUsage.toFixed(2)}MB`\n      );\n\n      await this.auditTrail.logEvent({\n        eventType: \"emergency_shutdown_resource_overhead\",\n        timestamp: new Date(),\n        details: {\n          component: \"BedrockSupportManager\",\n          trigger: \"resource_overhead\",\n          cpuUsage: validation.cpuUsage,\n          memoryUsage: validation.memoryUsage,\n          thresholds: validation.thresholds,\n        },\n      });\n\n      // Deactivate support mode\n      await this.deactivate();\n\n      // Use emergency shutdown manager\n      await this.emergencyShutdownManager.triggerEmergencyShutdown(\n        \"resource_overhead\",\n        `Resource usage exceeded safe limits: CPU ${validation.cpuUsage.toFixed(\n          2\n        )}%, Memory ${validation.memoryUsage.toFixed(2)}MB`\n      );\n    }\n  }\n\n  /**\n   * Log with bedrock-activation prefix\n   */\n  private log(prefix: string, message: string): void {\n    this.logger.log(`[${prefix}] ${message}`);\n  }\n}\n\n/**\n * Factory function to create a Bedrock Support Manager instance\n */\nexport function createBedrockSupportManager(\n  config?: Partial<BedrockSupportConfig>,\n  featureFlags?: AiFeatureFlags,\n  bedrockAdapter?: BedrockAdapter\n): BedrockSupportManager {\n  return new BedrockSupportManager(config, featureFlags, bedrockAdapter);\n}\n\n/**\n * Default export\n */\nexport default BedrockSupportManager;\n"],"version":3}
{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/drift-monitor.ts","mappings":";AAAA;;;;;;;;GAQG;;;AAEH,kEAIoC;AACpC,gEAImC;AAsHnC,MAAa,YAAY;IACf,UAAU,CAAmB;IAC7B,SAAS,CAAkB;IAC3B,UAAU,CAAkB;IAC5B,eAAe,GAA8B,IAAI,GAAG,EAAE,CAAC;IACvD,cAAc,GAAgD,EAAE,CAAC;IAEzE,YACE,UAA6B,EAC7B,SAA2B,EAC3B,UAAqC;QAErC,IAAI,CAAC,UAAU;YACb,UAAU;gBACV,IAAI,oCAAgB,CAAC;oBACnB,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,cAAc;iBACjD,CAAC,CAAC;QACL,IAAI,CAAC,SAAS;YACZ,SAAS;gBACT,IAAI,kCAAe,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,cAAc,EAAE,CAAC,CAAC;QAE5E,IAAI,CAAC,UAAU,GAAG;YAChB,SAAS,EAAE;gBACT,OAAO,EAAE,GAAG;gBACZ,QAAQ,EAAE,GAAG;aACd;YACD,WAAW,EAAE;gBACX,OAAO,EAAE,GAAG;gBACZ,QAAQ,EAAE,GAAG;aACd;YACD,qBAAqB,EAAE;gBACrB,OAAO,EAAE;oBACP,OAAO,EAAE,GAAG,EAAE,eAAe;oBAC7B,QAAQ,EAAE,GAAG,EAAE,eAAe;iBAC/B;gBACD,QAAQ,EAAE;oBACR,OAAO,EAAE,GAAG,EAAE,eAAe;oBAC7B,QAAQ,EAAE,GAAG,EAAE,eAAe;iBAC/B;gBACD,SAAS,EAAE;oBACT,OAAO,EAAE,GAAG,EAAE,eAAe;oBAC7B,QAAQ,EAAE,GAAG,EAAE,eAAe;iBAC/B;aACF;YACD,kBAAkB,EAAE;gBAClB,OAAO,EAAE;oBACP,OAAO,EAAE,GAAG;oBACZ,QAAQ,EAAE,GAAG;iBACd;gBACD,QAAQ,EAAE;oBACR,OAAO,EAAE,GAAG;oBACZ,QAAQ,EAAE,GAAG;iBACd;aACF;YACD,GAAG,UAAU;SACd,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,WAAW,CAAC,OAAe,EAAE,OAAqB;QACtD,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAE3C,+CAA+C;QAC/C,MAAM,IAAI,CAAC,cAAc,CAAC,mBAAmB,EAAE,OAAO,EAAE;YACtD,iBAAiB,EAAE,OAAO,CAAC,SAAS,CAAC,KAAK;YAC1C,mBAAmB,EAAE,OAAO,CAAC,WAAW,CAAC,UAAU;YACnD,eAAe,EAAE,OAAO,CAAC,qBAAqB,CAAC,OAAO,CAAC,QAAQ;YAC/D,gBAAgB,EAAE,OAAO,CAAC,qBAAqB,CAAC,QAAQ,CAAC,QAAQ;YACjE,eAAe,EAAE,OAAO,CAAC,cAAc,CAAC,YAAY;SACrD,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,YAAY,CAAC,cAA4B;QAC7C,MAAM,MAAM,GAAiB,EAAE,CAAC;QAChC,MAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAElE,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,MAAM,IAAI,KAAK,CAAC,+BAA+B,cAAc,CAAC,OAAO,EAAE,CAAC,CAAC;QAC3E,CAAC;QAED,mBAAmB;QACnB,MAAM,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;QACrE,IAAI,cAAc;YAAE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAEhD,qBAAqB;QACrB,MAAM,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;QACzE,IAAI,gBAAgB;YAAE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAEpD,+BAA+B;QAC/B,MAAM,gBAAgB,GAAG,IAAI,CAAC,0BAA0B,CACtD,cAAc,EACd,QAAQ,CACT,CAAC;QACF,IAAI,gBAAgB;YAAE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAEpD,4BAA4B;QAC5B,MAAM,YAAY,GAAG,IAAI,CAAC,uBAAuB,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;QAC5E,IAAI,YAAY;YAAE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAE5C,wCAAwC;QACxC,MAAM,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAAC;QAEjD,cAAc;QACd,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAC3B,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;OAEG;IACK,cAAc,CACpB,OAAqB,EACrB,QAAsB;QAEtB,MAAM,UAAU,GAAG,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC;QAE3C,IAAI,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;YACrD,OAAO;gBACL,EAAE,EAAE,cAAc,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE;gBACjD,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,QAAQ,EAAE,UAAU;gBACpB,IAAI,EAAE,YAAY;gBAClB,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,QAAQ,EAAE,OAAO,CAAC,QAAQ;gBAC1B,OAAO,EAAE,uCAAuC,UAAU,CAAC,OAAO,CAChE,CAAC,CACF,sBAAsB,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,EAAE;gBAC3D,OAAO,EAAE,EAAE,SAAS,EAAE,OAAO,CAAC,SAAS,EAAE;gBACzC,eAAe,EAAE;oBACf,wCAAwC;oBACxC,gDAAgD;oBAChD,0CAA0C;oBAC1C,oCAAoC;iBACrC;aACF,CAAC;QACJ,CAAC;QAED,IAAI,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;YACpD,OAAO;gBACL,EAAE,EAAE,cAAc,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE;gBACjD,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,QAAQ,EAAE,QAAQ;gBAClB,IAAI,EAAE,YAAY;gBAClB,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,QAAQ,EAAE,OAAO,CAAC,QAAQ;gBAC1B,OAAO,EAAE,6BAA6B,UAAU,CAAC,OAAO,CACtD,CAAC,CACF,sBAAsB,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,EAAE;gBAC1D,OAAO,EAAE,EAAE,SAAS,EAAE,OAAO,CAAC,SAAS,EAAE;gBACzC,eAAe,EAAE;oBACf,kCAAkC;oBAClC,wCAAwC;oBACxC,4BAA4B;iBAC7B;aACF,CAAC;QACJ,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACK,gBAAgB,CACtB,OAAqB,EACrB,QAAsB;QAEtB,MAAM,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC;QAElD,IAAI,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;YACvD,OAAO;gBACL,EAAE,EAAE,gBAAgB,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE;gBACnD,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,QAAQ,EAAE,UAAU;gBACpB,IAAI,EAAE,cAAc;gBACpB,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,QAAQ,EAAE,OAAO,CAAC,QAAQ;gBAC1B,OAAO,EAAE,yCAAyC,UAAU,CAAC,OAAO,CAClE,CAAC,CACF,sBAAsB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,EAAE;gBAC7D,OAAO,EAAE,EAAE,WAAW,EAAE,OAAO,CAAC,WAAW,EAAE;gBAC7C,eAAe,EAAE;oBACf,gCAAgC;oBAChC,mCAAmC;oBACnC,sCAAsC;oBACtC,0CAA0C;iBAC3C;aACF,CAAC;QACJ,CAAC;QAED,IAAI,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;YACtD,OAAO;gBACL,EAAE,EAAE,gBAAgB,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE;gBACnD,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,QAAQ,EAAE,QAAQ;gBAClB,IAAI,EAAE,cAAc;gBACpB,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,QAAQ,EAAE,OAAO,CAAC,QAAQ;gBAC1B,OAAO,EAAE,+BAA+B,UAAU,CAAC,OAAO,CACxD,CAAC,CACF,sBAAsB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,OAAO,EAAE;gBAC5D,OAAO,EAAE,EAAE,WAAW,EAAE,OAAO,CAAC,WAAW,EAAE;gBAC7C,eAAe,EAAE;oBACf,mCAAmC;oBACnC,oCAAoC;oBACpC,wCAAwC;iBACzC;aACF,CAAC;QACJ,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACK,0BAA0B,CAChC,OAAqB,EACrB,QAAsB;QAEtB,MAAM,iBAAiB,GACrB,OAAO,CAAC,qBAAqB,CAAC,OAAO,CAAC,eAAe,CAAC;QACxD,MAAM,kBAAkB,GACtB,OAAO,CAAC,qBAAqB,CAAC,QAAQ,CAAC,eAAe,CAAC;QACzD,MAAM,mBAAmB,GACvB,OAAO,CAAC,qBAAqB,CAAC,SAAS,CAAC,eAAe,CAAC;QAE1D,MAAM,mBAAmB,GAAG,EAAE,CAAC;QAC/B,MAAM,kBAAkB,GAAG,EAAE,CAAC;QAE9B,2BAA2B;QAC3B,IACE,iBAAiB;YACjB,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,OAAO,CAAC,QAAQ,EACtD,CAAC;YACD,mBAAmB,CAAC,IAAI,CACtB,wBAAwB,CAAC,iBAAiB,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAChE,CAAC;QACJ,CAAC;aAAM,IACL,iBAAiB,IAAI,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,OAAO,CAAC,OAAO,EAC1E,CAAC;YACD,kBAAkB,CAAC,IAAI,CACrB,wBAAwB,CAAC,iBAAiB,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAChE,CAAC;QACJ,CAAC;QAED,4BAA4B;QAC5B,IACE,kBAAkB;YAClB,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,QAAQ,CAAC,QAAQ,EACvD,CAAC;YACD,mBAAmB,CAAC,IAAI,CACtB,yBAAyB,CAAC,kBAAkB,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAClE,CAAC;QACJ,CAAC;aAAM,IACL,kBAAkB;YAClB,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,QAAQ,CAAC,OAAO,EACtD,CAAC;YACD,kBAAkB,CAAC,IAAI,CACrB,yBAAyB,CAAC,kBAAkB,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAClE,CAAC;QACJ,CAAC;QAED,8BAA8B;QAC9B,IACE,mBAAmB;YACnB,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,SAAS,CAAC,QAAQ,EACxD,CAAC;YACD,mBAAmB,CAAC,IAAI,CACtB,2BAA2B,CAAC,mBAAmB,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CACrE,CAAC;QACJ,CAAC;aAAM,IACL,mBAAmB;YACnB,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,SAAS,CAAC,OAAO,EACvD,CAAC;YACD,kBAAkB,CAAC,IAAI,CACrB,2BAA2B,CAAC,mBAAmB,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CACrE,CAAC;QACJ,CAAC;QAED,IAAI,mBAAmB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACnC,OAAO;gBACL,EAAE,EAAE,0BAA0B,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE;gBAC7D,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,QAAQ,EAAE,UAAU;gBACpB,IAAI,EAAE,wBAAwB;gBAC9B,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,QAAQ,EAAE,OAAO,CAAC,QAAQ;gBAC1B,OAAO,EAAE,oCAAoC,mBAAmB,CAAC,IAAI,CACnE,IAAI,CACL,EAAE;gBACH,OAAO,EAAE,EAAE,qBAAqB,EAAE,OAAO,CAAC,qBAAqB,EAAE;gBACjE,eAAe,EAAE;oBACf,oDAAoD;oBACpD,iDAAiD;oBACjD,mCAAmC;oBACnC,+CAA+C;iBAChD;aACF,CAAC;QACJ,CAAC;QAED,IAAI,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAClC,OAAO;gBACL,EAAE,EAAE,0BAA0B,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE;gBAC7D,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,QAAQ,EAAE,QAAQ;gBAClB,IAAI,EAAE,wBAAwB;gBAC9B,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,QAAQ,EAAE,OAAO,CAAC,QAAQ;gBAC1B,OAAO,EAAE,mCAAmC,kBAAkB,CAAC,IAAI,CACjE,IAAI,CACL,EAAE;gBACH,OAAO,EAAE,EAAE,qBAAqB,EAAE,OAAO,CAAC,qBAAqB,EAAE;gBACjE,eAAe,EAAE;oBACf,oCAAoC;oBACpC,kCAAkC;oBAClC,wCAAwC;iBACzC;aACF,CAAC;QACJ,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACK,uBAAuB,CAC7B,OAAqB,EACrB,QAAsB;QAEtB,MAAM,YAAY,GAAG,OAAO,CAAC,cAAc,CAAC,YAAY,CAAC;QACzD,MAAM,aAAa,GAAG,OAAO,CAAC,cAAc,CAAC,aAAa,CAAC;QAE3D,MAAM,MAAM,GAAG,EAAE,CAAC;QAClB,IAAI,QAAQ,GAA2C,KAAK,CAAC;QAE7D,wBAAwB;QACxB,IAAI,YAAY,IAAI,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;YACxE,MAAM,CAAC,IAAI,CACT,yBAAyB,YAAY,CAAC,OAAO,CAC3C,CAAC,CACF,2BAA2B,CAC7B,CAAC;YACF,QAAQ,GAAG,UAAU,CAAC;QACxB,CAAC;aAAM,IACL,YAAY,IAAI,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,OAAO,CAAC,OAAO,EAClE,CAAC;YACD,MAAM,CAAC,IAAI,CACT,yBAAyB,YAAY,CAAC,OAAO,CAC3C,CAAC,CACF,0BAA0B,CAC5B,CAAC;YACF,QAAQ,GAAG,QAAQ,CAAC;QACtB,CAAC;QAED,iBAAiB;QACjB,IAAI,aAAa,IAAI,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;YAC1E,MAAM,CAAC,IAAI,CACT,kBAAkB,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,2BAA2B,CACtE,CAAC;YACF,QAAQ,GAAG,UAAU,CAAC;QACxB,CAAC;aAAM,IACL,aAAa,IAAI,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,QAAQ,CAAC,OAAO,EACpE,CAAC;YACD,MAAM,CAAC,IAAI,CACT,kBAAkB,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,0BAA0B,CACrE,CAAC;YACF,IAAI,QAAQ,KAAK,KAAK;gBAAE,QAAQ,GAAG,QAAQ,CAAC;QAC9C,CAAC;QAED,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACtB,OAAO;gBACL,EAAE,EAAE,uBAAuB,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE;gBAC1D,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,QAAQ;gBACR,IAAI,EAAE,qBAAqB;gBAC3B,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,QAAQ,EAAE,OAAO,CAAC,QAAQ;gBAC1B,OAAO,EAAE,iCAAiC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBAC7D,OAAO,EAAE,EAAE,cAAc,EAAE,OAAO,CAAC,cAAc,EAAE;gBACnD,eAAe,EAAE;oBACf,qCAAqC;oBACrC,wCAAwC;oBACxC,4CAA4C;oBAC5C,wCAAwC;iBACzC;aACF,CAAC;QACJ,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,qBAAqB,CAAC,OAAqB;QACvD,MAAM,IAAI,CAAC,cAAc,CAAC,kBAAkB,EAAE,OAAO,CAAC,OAAO,EAAE;YAC7D,cAAc,EAAE,OAAO,CAAC,SAAS,CAAC,KAAK;YACvC,gBAAgB,EAAE,OAAO,CAAC,WAAW,CAAC,UAAU;YAChD,iBAAiB,EAAE,OAAO,CAAC,qBAAqB,CAAC,OAAO,CAAC,eAAe;YACxE,kBAAkB,EAChB,OAAO,CAAC,qBAAqB,CAAC,QAAQ,CAAC,eAAe;YACxD,mBAAmB,EACjB,OAAO,CAAC,qBAAqB,CAAC,SAAS,CAAC,eAAe;YACzD,cAAc,EAAE,OAAO,CAAC,cAAc,CAAC,YAAY;YACnD,aAAa,EAAE,OAAO,CAAC,cAAc,CAAC,aAAa;YACnD,cAAc,EAAE,OAAO,CAAC,cAAc,CAAC,cAAc;YACrD,cAAc,EAAE,OAAO,CAAC,cAAc,CAAC,cAAc;YACrD,eAAe,EAAE,OAAO,CAAC,cAAc,CAAC,eAAe;SACxD,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,cAAc,CAC1B,SAAiB,EACjB,OAAe,EACf,OAA+B;QAE/B,MAAM,UAAU,GAAkB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,CAC3D,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;YAClB,UAAU,EAAE,IAAI;YAChB,KAAK,EAAE,KAAK;YACZ,IAAI,EAAE,MAAM;YACZ,UAAU,EAAE;gBACV;oBACE,IAAI,EAAE,SAAS;oBACf,KAAK,EAAE,OAAO;iBACf;aACF;YACD,SAAS,EAAE,IAAI,IAAI,EAAE;SACtB,CAAC,CACH,CAAC;QAEF,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CACxB,IAAI,wCAAoB,CAAC;YACvB,SAAS,EAAE,SAAS;YACpB,UAAU,EAAE,UAAU;SACvB,CAAC,CACH,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,SAAS,CAAC,KAAiB;QACvC,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;YAC3C,IAAI,CAAC;gBACH,MAAM,QAAQ,CAAC,KAAK,CAAC,CAAC;YACxB,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACtD,CAAC;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACH,OAAO,CAAC,QAA8C;QACpD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,yBAAyB,CAC9B,OAAyD,EACzD,QAAiD;QAEjD,+DAA+D;QAC/D,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC;QACzE,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC;QACrE,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC;QAErE,+CAA+C;QAC/C,OAAO,SAAS,GAAG,GAAG,GAAG,QAAQ,GAAG,GAAG,GAAG,QAAQ,GAAG,GAAG,CAAC;IAC3D,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,wBAAwB,CAC7B,OAAe,EACf,QAAgB,EAChB,iBAA0B,IAAI;QAE9B,IAAI,QAAQ,KAAK,CAAC;YAAE,OAAO,CAAC,CAAC;QAE7B,MAAM,MAAM,GAAG,CAAC,OAAO,GAAG,QAAQ,CAAC,GAAG,QAAQ,CAAC;QAC/C,OAAO,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IACrE,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,qBAAqB,CACzB,SAAiB,EACjB,YAAoB,EACpB,eAAuB;QAEvB,MAAM,iBAAiB,GAAG,GAAG,SAAS,kBAAkB,CAAC;QAEzD,IAAI,CAAC;YACH,yCAAyC;YACzC,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CACvB,IAAI,2DAAwC,CAAC;gBAC3C,iBAAiB,EAAE,iBAAiB;aACrC,CAAC,CACH,CAAC;YAEF,OAAO,iBAAiB,CAAC;QAC3B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,0CAA0C;YAC1C,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CACvB,IAAI,yDAAsC,CAAC;gBACzC,iBAAiB,EAAE,iBAAiB;gBACpC,4BAA4B,EAAE;oBAC5B,QAAQ,EACN,kFAAkF;iBACrF;gBACD,oBAAoB,EAAE;oBACpB,aAAa,EAAE;wBACb,YAAY,EAAE,YAAY;wBAC1B,SAAS,EAAE,mCAAmC;qBAC/C;oBACD,kBAAkB,EAAE;wBAClB,KAAK,EAAE,eAAe;qBACvB;iBACF;gBACD,2BAA2B,EAAE;oBAC3B,QAAQ,EAAE;wBACR,KAAK,EAAE,8BAA8B,SAAS,mBAAmB;wBACjE,SAAS,EAAE,2BAA2B;qBACvC;iBACF;gBACD,YAAY,EAAE;oBACZ,aAAa,EAAE;wBACb,aAAa,EAAE,CAAC;wBAChB,YAAY,EAAE,cAAc;wBAC5B,cAAc,EAAE,EAAE;qBACnB;iBACF;gBACD,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,4BAA4B,IAAI,EAAE;aACxD,CAAC,CACH,CAAC;YAEF,OAAO,iBAAiB,CAAC;QAC3B,CAAC;IACH,CAAC;CACF;AA/iBD,oCA+iBC;AAED,kBAAe,YAAY,CAAC","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/drift-monitor.ts"],"sourcesContent":["/**\n * AI Drift Detection and Quality Monitoring System\n *\n * Implements comprehensive drift detection and quality monitoring for AI models:\n * - SageMaker Model Monitor integration for data drift\n * - Prompt drift detection (score distribution changes)\n * - Performance regression detection\n * - Automated alerting for quality degradation\n */\n\nimport {\n  CloudWatchClient,\n  MetricDatum,\n  PutMetricDataCommand,\n} from \"@aws-sdk/client-cloudwatch\";\nimport {\n  CreateModelQualityJobDefinitionCommand,\n  DescribeModelQualityJobDefinitionCommand,\n  SageMakerClient,\n} from \"@aws-sdk/client-sagemaker\";\n\nexport interface DriftMetrics {\n  timestamp: Date;\n  modelId: string;\n  provider: string;\n\n  // Data Drift Metrics\n  dataDrift: {\n    score: number;\n    threshold: number;\n    features: Array<{\n      name: string;\n      driftScore: number;\n      baseline: number;\n      current: number;\n    }>;\n  };\n\n  // Prompt Drift Metrics\n  promptDrift: {\n    scoreDistribution: {\n      mean: number;\n      std: number;\n      p50: number;\n      p95: number;\n      p99: number;\n    };\n    baseline: {\n      mean: number;\n      std: number;\n      p50: number;\n      p95: number;\n      p99: number;\n    };\n    driftScore: number;\n  };\n\n  // Performance Regression\n  performanceRegression: {\n    latency: {\n      current: number;\n      baseline: number;\n      regressionScore: number;\n    };\n    accuracy: {\n      current: number;\n      baseline: number;\n      regressionScore: number;\n    };\n    errorRate: {\n      current: number;\n      baseline: number;\n      regressionScore: number;\n    };\n  };\n\n  // Quality Metrics\n  qualityMetrics: {\n    overallScore: number;\n    toxicityScore: number;\n    coherenceScore: number;\n    relevanceScore: number;\n    factualityScore: number;\n  };\n}\n\nexport interface DriftAlert {\n  id: string;\n  timestamp: Date;\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n  type:\n    | \"data_drift\"\n    | \"prompt_drift\"\n    | \"performance_regression\"\n    | \"quality_degradation\";\n  modelId: string;\n  provider: string;\n  message: string;\n  metrics: Partial<DriftMetrics>;\n  recommendations: string[];\n}\n\nexport interface DriftThresholds {\n  dataDrift: {\n    warning: number;\n    critical: number;\n  };\n  promptDrift: {\n    warning: number;\n    critical: number;\n  };\n  performanceRegression: {\n    latency: {\n      warning: number;\n      critical: number;\n    };\n    accuracy: {\n      warning: number;\n      critical: number;\n    };\n    errorRate: {\n      warning: number;\n      critical: number;\n    };\n  };\n  qualityDegradation: {\n    overall: {\n      warning: number;\n      critical: number;\n    };\n    toxicity: {\n      warning: number;\n      critical: number;\n    };\n  };\n}\n\nexport class DriftMonitor {\n  private cloudWatch: CloudWatchClient;\n  private sageMaker: SageMakerClient;\n  private thresholds: DriftThresholds;\n  private baselineMetrics: Map<string, DriftMetrics> = new Map();\n  private alertCallbacks: Array<(alert: DriftAlert) => Promise<void>> = [];\n\n  constructor(\n    cloudWatch?: CloudWatchClient,\n    sageMaker?: SageMakerClient,\n    thresholds?: Partial<DriftThresholds>\n  ) {\n    this.cloudWatch =\n      cloudWatch ||\n      new CloudWatchClient({\n        region: process.env.AWS_REGION || \"eu-central-1\",\n      });\n    this.sageMaker =\n      sageMaker ||\n      new SageMakerClient({ region: process.env.AWS_REGION || \"eu-central-1\" });\n\n    this.thresholds = {\n      dataDrift: {\n        warning: 0.3,\n        critical: 0.5,\n      },\n      promptDrift: {\n        warning: 0.2,\n        critical: 0.4,\n      },\n      performanceRegression: {\n        latency: {\n          warning: 0.2, // 20% increase\n          critical: 0.5, // 50% increase\n        },\n        accuracy: {\n          warning: 0.1, // 10% decrease\n          critical: 0.2, // 20% decrease\n        },\n        errorRate: {\n          warning: 0.1, // 10% increase\n          critical: 0.2, // 20% increase\n        },\n      },\n      qualityDegradation: {\n        overall: {\n          warning: 0.8,\n          critical: 0.7,\n        },\n        toxicity: {\n          warning: 0.1,\n          critical: 0.2,\n        },\n      },\n      ...thresholds,\n    };\n  }\n\n  /**\n   * Set baseline metrics for a model\n   */\n  async setBaseline(modelId: string, metrics: DriftMetrics): Promise<void> {\n    this.baselineMetrics.set(modelId, metrics);\n\n    // Store baseline in CloudWatch for persistence\n    await this.publishMetrics(\"AI/Drift/Baseline\", modelId, {\n      DataDriftBaseline: metrics.dataDrift.score,\n      PromptDriftBaseline: metrics.promptDrift.driftScore,\n      LatencyBaseline: metrics.performanceRegression.latency.baseline,\n      AccuracyBaseline: metrics.performanceRegression.accuracy.baseline,\n      QualityBaseline: metrics.qualityMetrics.overallScore,\n    });\n  }\n\n  /**\n   * Monitor drift for current metrics against baseline\n   */\n  async monitorDrift(currentMetrics: DriftMetrics): Promise<DriftAlert[]> {\n    const alerts: DriftAlert[] = [];\n    const baseline = this.baselineMetrics.get(currentMetrics.modelId);\n\n    if (!baseline) {\n      throw new Error(`No baseline found for model ${currentMetrics.modelId}`);\n    }\n\n    // Check data drift\n    const dataDriftAlert = this.checkDataDrift(currentMetrics, baseline);\n    if (dataDriftAlert) alerts.push(dataDriftAlert);\n\n    // Check prompt drift\n    const promptDriftAlert = this.checkPromptDrift(currentMetrics, baseline);\n    if (promptDriftAlert) alerts.push(promptDriftAlert);\n\n    // Check performance regression\n    const performanceAlert = this.checkPerformanceRegression(\n      currentMetrics,\n      baseline\n    );\n    if (performanceAlert) alerts.push(performanceAlert);\n\n    // Check quality degradation\n    const qualityAlert = this.checkQualityDegradation(currentMetrics, baseline);\n    if (qualityAlert) alerts.push(qualityAlert);\n\n    // Publish current metrics to CloudWatch\n    await this.publishCurrentMetrics(currentMetrics);\n\n    // Send alerts\n    for (const alert of alerts) {\n      await this.sendAlert(alert);\n    }\n\n    return alerts;\n  }\n\n  /**\n   * Check for data drift\n   */\n  private checkDataDrift(\n    current: DriftMetrics,\n    baseline: DriftMetrics\n  ): DriftAlert | null {\n    const driftScore = current.dataDrift.score;\n\n    if (driftScore >= this.thresholds.dataDrift.critical) {\n      return {\n        id: `data-drift-${current.modelId}-${Date.now()}`,\n        timestamp: new Date(),\n        severity: \"critical\",\n        type: \"data_drift\",\n        modelId: current.modelId,\n        provider: current.provider,\n        message: `Critical data drift detected: score ${driftScore.toFixed(\n          3\n        )} exceeds threshold ${this.thresholds.dataDrift.critical}`,\n        metrics: { dataDrift: current.dataDrift },\n        recommendations: [\n          \"Review input data distribution changes\",\n          \"Consider retraining the model with recent data\",\n          \"Implement data preprocessing adjustments\",\n          \"Monitor feature importance changes\",\n        ],\n      };\n    }\n\n    if (driftScore >= this.thresholds.dataDrift.warning) {\n      return {\n        id: `data-drift-${current.modelId}-${Date.now()}`,\n        timestamp: new Date(),\n        severity: \"medium\",\n        type: \"data_drift\",\n        modelId: current.modelId,\n        provider: current.provider,\n        message: `Data drift warning: score ${driftScore.toFixed(\n          3\n        )} exceeds threshold ${this.thresholds.dataDrift.warning}`,\n        metrics: { dataDrift: current.dataDrift },\n        recommendations: [\n          \"Monitor data distribution trends\",\n          \"Prepare for potential model retraining\",\n          \"Review data quality checks\",\n        ],\n      };\n    }\n\n    return null;\n  }\n\n  /**\n   * Check for prompt drift (score distribution changes)\n   */\n  private checkPromptDrift(\n    current: DriftMetrics,\n    baseline: DriftMetrics\n  ): DriftAlert | null {\n    const driftScore = current.promptDrift.driftScore;\n\n    if (driftScore >= this.thresholds.promptDrift.critical) {\n      return {\n        id: `prompt-drift-${current.modelId}-${Date.now()}`,\n        timestamp: new Date(),\n        severity: \"critical\",\n        type: \"prompt_drift\",\n        modelId: current.modelId,\n        provider: current.provider,\n        message: `Critical prompt drift detected: score ${driftScore.toFixed(\n          3\n        )} exceeds threshold ${this.thresholds.promptDrift.critical}`,\n        metrics: { promptDrift: current.promptDrift },\n        recommendations: [\n          \"Review prompt template changes\",\n          \"Analyze user query pattern shifts\",\n          \"Update prompt engineering strategies\",\n          \"Consider A/B testing new prompt variants\",\n        ],\n      };\n    }\n\n    if (driftScore >= this.thresholds.promptDrift.warning) {\n      return {\n        id: `prompt-drift-${current.modelId}-${Date.now()}`,\n        timestamp: new Date(),\n        severity: \"medium\",\n        type: \"prompt_drift\",\n        modelId: current.modelId,\n        provider: current.provider,\n        message: `Prompt drift warning: score ${driftScore.toFixed(\n          3\n        )} exceeds threshold ${this.thresholds.promptDrift.warning}`,\n        metrics: { promptDrift: current.promptDrift },\n        recommendations: [\n          \"Monitor prompt performance trends\",\n          \"Review recent prompt modifications\",\n          \"Prepare prompt optimization strategies\",\n        ],\n      };\n    }\n\n    return null;\n  }\n\n  /**\n   * Check for performance regression\n   */\n  private checkPerformanceRegression(\n    current: DriftMetrics,\n    baseline: DriftMetrics\n  ): DriftAlert | null {\n    const latencyRegression =\n      current.performanceRegression.latency.regressionScore;\n    const accuracyRegression =\n      current.performanceRegression.accuracy.regressionScore;\n    const errorRateRegression =\n      current.performanceRegression.errorRate.regressionScore;\n\n    const criticalRegressions = [];\n    const warningRegressions = [];\n\n    // Check latency regression\n    if (\n      latencyRegression >=\n      this.thresholds.performanceRegression.latency.critical\n    ) {\n      criticalRegressions.push(\n        `latency increased by ${(latencyRegression * 100).toFixed(1)}%`\n      );\n    } else if (\n      latencyRegression >= this.thresholds.performanceRegression.latency.warning\n    ) {\n      warningRegressions.push(\n        `latency increased by ${(latencyRegression * 100).toFixed(1)}%`\n      );\n    }\n\n    // Check accuracy regression\n    if (\n      accuracyRegression >=\n      this.thresholds.performanceRegression.accuracy.critical\n    ) {\n      criticalRegressions.push(\n        `accuracy decreased by ${(accuracyRegression * 100).toFixed(1)}%`\n      );\n    } else if (\n      accuracyRegression >=\n      this.thresholds.performanceRegression.accuracy.warning\n    ) {\n      warningRegressions.push(\n        `accuracy decreased by ${(accuracyRegression * 100).toFixed(1)}%`\n      );\n    }\n\n    // Check error rate regression\n    if (\n      errorRateRegression >=\n      this.thresholds.performanceRegression.errorRate.critical\n    ) {\n      criticalRegressions.push(\n        `error rate increased by ${(errorRateRegression * 100).toFixed(1)}%`\n      );\n    } else if (\n      errorRateRegression >=\n      this.thresholds.performanceRegression.errorRate.warning\n    ) {\n      warningRegressions.push(\n        `error rate increased by ${(errorRateRegression * 100).toFixed(1)}%`\n      );\n    }\n\n    if (criticalRegressions.length > 0) {\n      return {\n        id: `performance-regression-${current.modelId}-${Date.now()}`,\n        timestamp: new Date(),\n        severity: \"critical\",\n        type: \"performance_regression\",\n        modelId: current.modelId,\n        provider: current.provider,\n        message: `Critical performance regression: ${criticalRegressions.join(\n          \", \"\n        )}`,\n        metrics: { performanceRegression: current.performanceRegression },\n        recommendations: [\n          \"Investigate recent model or infrastructure changes\",\n          \"Consider rolling back to previous model version\",\n          \"Review system resource allocation\",\n          \"Implement performance optimization strategies\",\n        ],\n      };\n    }\n\n    if (warningRegressions.length > 0) {\n      return {\n        id: `performance-regression-${current.modelId}-${Date.now()}`,\n        timestamp: new Date(),\n        severity: \"medium\",\n        type: \"performance_regression\",\n        modelId: current.modelId,\n        provider: current.provider,\n        message: `Performance regression warning: ${warningRegressions.join(\n          \", \"\n        )}`,\n        metrics: { performanceRegression: current.performanceRegression },\n        recommendations: [\n          \"Monitor performance trends closely\",\n          \"Review recent changes for impact\",\n          \"Prepare performance optimization plans\",\n        ],\n      };\n    }\n\n    return null;\n  }\n\n  /**\n   * Check for quality degradation\n   */\n  private checkQualityDegradation(\n    current: DriftMetrics,\n    baseline: DriftMetrics\n  ): DriftAlert | null {\n    const overallScore = current.qualityMetrics.overallScore;\n    const toxicityScore = current.qualityMetrics.toxicityScore;\n\n    const issues = [];\n    let severity: \"low\" | \"medium\" | \"high\" | \"critical\" = \"low\";\n\n    // Check overall quality\n    if (overallScore <= this.thresholds.qualityDegradation.overall.critical) {\n      issues.push(\n        `overall quality score ${overallScore.toFixed(\n          3\n        )} below critical threshold`\n      );\n      severity = \"critical\";\n    } else if (\n      overallScore <= this.thresholds.qualityDegradation.overall.warning\n    ) {\n      issues.push(\n        `overall quality score ${overallScore.toFixed(\n          3\n        )} below warning threshold`\n      );\n      severity = \"medium\";\n    }\n\n    // Check toxicity\n    if (toxicityScore >= this.thresholds.qualityDegradation.toxicity.critical) {\n      issues.push(\n        `toxicity score ${toxicityScore.toFixed(3)} above critical threshold`\n      );\n      severity = \"critical\";\n    } else if (\n      toxicityScore >= this.thresholds.qualityDegradation.toxicity.warning\n    ) {\n      issues.push(\n        `toxicity score ${toxicityScore.toFixed(3)} above warning threshold`\n      );\n      if (severity === \"low\") severity = \"medium\";\n    }\n\n    if (issues.length > 0) {\n      return {\n        id: `quality-degradation-${current.modelId}-${Date.now()}`,\n        timestamp: new Date(),\n        severity,\n        type: \"quality_degradation\",\n        modelId: current.modelId,\n        provider: current.provider,\n        message: `Quality degradation detected: ${issues.join(\", \")}`,\n        metrics: { qualityMetrics: current.qualityMetrics },\n        recommendations: [\n          \"Review model output quality samples\",\n          \"Implement additional content filtering\",\n          \"Consider fine-tuning or prompt adjustments\",\n          \"Monitor user feedback and satisfaction\",\n        ],\n      };\n    }\n\n    return null;\n  }\n\n  /**\n   * Publish current metrics to CloudWatch\n   */\n  private async publishCurrentMetrics(metrics: DriftMetrics): Promise<void> {\n    await this.publishMetrics(\"AI/Drift/Current\", metrics.modelId, {\n      DataDriftScore: metrics.dataDrift.score,\n      PromptDriftScore: metrics.promptDrift.driftScore,\n      LatencyRegression: metrics.performanceRegression.latency.regressionScore,\n      AccuracyRegression:\n        metrics.performanceRegression.accuracy.regressionScore,\n      ErrorRateRegression:\n        metrics.performanceRegression.errorRate.regressionScore,\n      OverallQuality: metrics.qualityMetrics.overallScore,\n      ToxicityScore: metrics.qualityMetrics.toxicityScore,\n      CoherenceScore: metrics.qualityMetrics.coherenceScore,\n      RelevanceScore: metrics.qualityMetrics.relevanceScore,\n      FactualityScore: metrics.qualityMetrics.factualityScore,\n    });\n  }\n\n  /**\n   * Publish metrics to CloudWatch\n   */\n  private async publishMetrics(\n    namespace: string,\n    modelId: string,\n    metrics: Record<string, number>\n  ): Promise<void> {\n    const metricData: MetricDatum[] = Object.entries(metrics).map(\n      ([name, value]) => ({\n        MetricName: name,\n        Value: value,\n        Unit: \"None\",\n        Dimensions: [\n          {\n            Name: \"ModelId\",\n            Value: modelId,\n          },\n        ],\n        Timestamp: new Date(),\n      })\n    );\n\n    await this.cloudWatch.send(\n      new PutMetricDataCommand({\n        Namespace: namespace,\n        MetricData: metricData,\n      })\n    );\n  }\n\n  /**\n   * Send alert through registered callbacks\n   */\n  private async sendAlert(alert: DriftAlert): Promise<void> {\n    for (const callback of this.alertCallbacks) {\n      try {\n        await callback(alert);\n      } catch (error) {\n        console.error(\"Failed to send drift alert:\", error);\n      }\n    }\n  }\n\n  /**\n   * Register alert callback\n   */\n  onAlert(callback: (alert: DriftAlert) => Promise<void>): void {\n    this.alertCallbacks.push(callback);\n  }\n\n  /**\n   * Calculate prompt drift score based on distribution changes\n   */\n  static calculatePromptDriftScore(\n    current: DriftMetrics[\"promptDrift\"][\"scoreDistribution\"],\n    baseline: DriftMetrics[\"promptDrift\"][\"baseline\"]\n  ): number {\n    // Calculate KL divergence approximation for distribution drift\n    const meanDrift = Math.abs(current.mean - baseline.mean) / baseline.mean;\n    const stdDrift = Math.abs(current.std - baseline.std) / baseline.std;\n    const p95Drift = Math.abs(current.p95 - baseline.p95) / baseline.p95;\n\n    // Weighted combination of distribution changes\n    return meanDrift * 0.4 + stdDrift * 0.3 + p95Drift * 0.3;\n  }\n\n  /**\n   * Calculate performance regression score\n   */\n  static calculateRegressionScore(\n    current: number,\n    baseline: number,\n    higherIsBetter: boolean = true\n  ): number {\n    if (baseline === 0) return 0;\n\n    const change = (current - baseline) / baseline;\n    return higherIsBetter ? Math.max(0, -change) : Math.max(0, change);\n  }\n\n  /**\n   * Setup SageMaker Model Monitor for data drift detection\n   */\n  async setupSageMakerMonitor(\n    modelName: string,\n    endpointName: string,\n    baselineDataUri: string\n  ): Promise<string> {\n    const jobDefinitionName = `${modelName}-quality-monitor`;\n\n    try {\n      // Check if job definition already exists\n      await this.sageMaker.send(\n        new DescribeModelQualityJobDefinitionCommand({\n          JobDefinitionName: jobDefinitionName,\n        })\n      );\n\n      return jobDefinitionName;\n    } catch (error) {\n      // Job definition doesn't exist, create it\n      await this.sageMaker.send(\n        new CreateModelQualityJobDefinitionCommand({\n          JobDefinitionName: jobDefinitionName,\n          ModelQualityAppSpecification: {\n            ImageUri:\n              \"156813124566.dkr.ecr.eu-central-1.amazonaws.com/sagemaker-model-monitor-analyzer\",\n          },\n          ModelQualityJobInput: {\n            EndpointInput: {\n              EndpointName: endpointName,\n              LocalPath: \"/opt/ml/processing/input/endpoint\",\n            },\n            GroundTruthS3Input: {\n              S3Uri: baselineDataUri,\n            },\n          },\n          ModelQualityJobOutputConfig: {\n            S3Output: {\n              S3Uri: `s3://matbakh-ai-monitoring/${modelName}/quality-reports/`,\n              LocalPath: \"/opt/ml/processing/output\",\n            },\n          },\n          JobResources: {\n            ClusterConfig: {\n              InstanceCount: 1,\n              InstanceType: \"ml.m5.xlarge\",\n              VolumeSizeInGB: 20,\n            },\n          },\n          RoleArn: process.env.SAGEMAKER_EXECUTION_ROLE_ARN || \"\",\n        })\n      );\n\n      return jobDefinitionName;\n    }\n  }\n}\n\nexport default DriftMonitor;\n"],"version":3}
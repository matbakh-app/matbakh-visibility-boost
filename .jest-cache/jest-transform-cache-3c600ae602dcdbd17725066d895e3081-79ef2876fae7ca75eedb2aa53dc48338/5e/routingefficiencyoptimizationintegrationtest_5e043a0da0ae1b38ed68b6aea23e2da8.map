{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/__tests__/routing-efficiency-optimization-integration.test.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/__tests__/routing-efficiency-optimization-integration.test.ts"],"sourcesContent":["/**\n * Integration Tests for Routing Efficiency Optimization\n *\n * Tests the complete routing efficiency optimization system to ensure\n * it achieves the target >15% performance improvement.\n */\n\nimport { AiFeatureFlags } from \"../ai-feature-flags\";\nimport { AuditTrailSystem } from \"../audit-trail-system\";\nimport { HybridRoutingPerformanceMonitor } from \"../hybrid-routing-performance-monitor\";\nimport { IntelligentRouter } from \"../intelligent-router\";\nimport { RoutingEfficiencyOptimizer } from \"../routing-efficiency-optimizer\";\n\n// Mock dependencies\njest.mock(\"../ai-feature-flags\");\njest.mock(\"../audit-trail-system\");\n\ndescribe(\"Routing Efficiency Optimization Integration\", () => {\n  let optimizer: RoutingEfficiencyOptimizer;\n  let router: IntelligentRouter;\n  let performanceMonitor: HybridRoutingPerformanceMonitor;\n  let featureFlags: AiFeatureFlags;\n  let auditTrail: AuditTrailSystem;\n\n  beforeEach(() => {\n    // Create real instances for integration testing\n    featureFlags = new AiFeatureFlags();\n    auditTrail = new AuditTrailSystem({\n      complianceMode: \"strict\",\n      enableIntegrityChecking: true,\n      retentionDays: 30,\n    });\n\n    // Mock feature flags to enable optimization\n    jest.spyOn(featureFlags, \"isEnabled\").mockImplementation((flag: string) => {\n      if (flag === \"routing_efficiency_optimization\") return true;\n      if (flag === \"ENABLE_INTELLIGENT_ROUTING\") return true;\n      return false;\n    });\n\n    // Create mock router and performance monitor for controlled testing\n    router = {\n      getRoutingRules: jest.fn().mockReturnValue([\n        {\n          operationType: \"infrastructure\",\n          priority: \"critical\",\n          latencyRequirement: 10000,\n          primaryRoute: \"direct\",\n          fallbackRoute: \"mcp\",\n          healthCheckRequired: true,\n        },\n        {\n          operationType: \"standard\",\n          priority: \"medium\",\n          latencyRequirement: 30000,\n          primaryRoute: \"mcp\",\n          fallbackRoute: \"direct\",\n          healthCheckRequired: false,\n        },\n      ]),\n      updateRoutingRules: jest.fn(),\n    } as any;\n\n    performanceMonitor = {\n      getAllPathMetrics: jest.fn(),\n      calculateRoutingEfficiency: jest.fn(),\n    } as any;\n\n    optimizer = new RoutingEfficiencyOptimizer(\n      router,\n      performanceMonitor,\n      featureFlags,\n      auditTrail,\n      {\n        targetPerformanceImprovement: 15,\n        optimizationIntervalMs: 100, // Fast for testing\n        minDataPointsRequired: 50,\n        enableOptimization: true,\n      }\n    );\n  });\n\n  afterEach(() => {\n    optimizer.cleanup();\n    jest.clearAllMocks();\n  });\n\n  describe(\"Performance Improvement Scenarios\", () => {\n    it(\"should achieve >15% performance improvement through latency optimization\", async () => {\n      // Scenario: High latency on MCP, low latency on Direct Bedrock\n      const mockMetrics = new Map([\n        [\n          \"direct_bedrock\",\n          {\n            path: \"direct_bedrock\",\n            requestCount: 200,\n            successCount: 195,\n            failureCount: 5,\n            totalLatencyMs: 600000, // 3s average - good performance\n            latencies: Array(200).fill(3000),\n            p50LatencyMs: 3000,\n            p95LatencyMs: 4000,\n            p99LatencyMs: 5000,\n            averageLatencyMs: 3000,\n            successRate: 97.5,\n            lastUpdated: new Date(),\n          },\n        ],\n        [\n          \"mcp\",\n          {\n            path: \"mcp\",\n            requestCount: 800, // Most traffic going to slower route\n            successCount: 760,\n            failureCount: 40,\n            totalLatencyMs: 8000000, // 10s average - poor performance\n            latencies: Array(800).fill(10000),\n            p50LatencyMs: 10000,\n            p95LatencyMs: 12000,\n            p99LatencyMs: 15000,\n            averageLatencyMs: 10000,\n            successRate: 95,\n            lastUpdated: new Date(),\n          },\n        ],\n      ]);\n\n      (performanceMonitor.getAllPathMetrics as jest.Mock).mockReturnValue(\n        mockMetrics\n      );\n      (\n        performanceMonitor.calculateRoutingEfficiency as jest.Mock\n      ).mockResolvedValue({\n        overallEfficiency: 70, // Below target\n        directBedrockEfficiency: 97.5,\n        mcpEfficiency: 95,\n        fallbackRate: 5,\n        optimalRoutingRate: 70,\n        suboptimalRoutingRate: 30,\n        recommendations: [],\n      });\n\n      // Start optimization\n      await optimizer.startOptimization();\n\n      // Wait for optimization cycle\n      await new Promise((resolve) => setTimeout(resolve, 150));\n\n      // Check that optimization was attempted\n      const status = optimizer.getOptimizationStatus();\n      expect(status.isOptimizing).toBe(true);\n\n      const recommendations = optimizer.getActiveRecommendations();\n      expect(recommendations.length).toBeGreaterThan(0);\n\n      // Should have recommendations to route more traffic to direct Bedrock\n      const latencyOptimization = recommendations.find(\n        (r) =>\n          r.description.includes(\"direct Bedrock\") &&\n          r.description.includes(\"latency\")\n      );\n      expect(latencyOptimization).toBeDefined();\n      expect(latencyOptimization?.expectedImprovement).toBeGreaterThanOrEqual(\n        15\n      );\n\n      // Verify routing rules were updated\n      expect(router.updateRoutingRules).toHaveBeenCalled();\n    });\n\n    it(\"should achieve >15% performance improvement through success rate optimization\", async () => {\n      // Scenario: Low success rates requiring circuit breaker optimization\n      const mockMetrics = new Map([\n        [\n          \"direct_bedrock\",\n          {\n            path: \"direct_bedrock\",\n            requestCount: 500,\n            successCount: 425, // 85% success rate - poor\n            failureCount: 75,\n            totalLatencyMs: 2500000, // 5s average\n            latencies: Array(500).fill(5000),\n            p50LatencyMs: 5000,\n            p95LatencyMs: 7000,\n            p99LatencyMs: 10000,\n            averageLatencyMs: 5000,\n            successRate: 85,\n            lastUpdated: new Date(),\n          },\n        ],\n        [\n          \"mcp\",\n          {\n            path: \"mcp\",\n            requestCount: 500,\n            successCount: 450, // 90% success rate - also poor\n            failureCount: 50,\n            totalLatencyMs: 3500000, // 7s average\n            latencies: Array(500).fill(7000),\n            p50LatencyMs: 7000,\n            p95LatencyMs: 9000,\n            p99LatencyMs: 12000,\n            averageLatencyMs: 7000,\n            successRate: 90,\n            lastUpdated: new Date(),\n          },\n        ],\n      ]);\n\n      (performanceMonitor.getAllPathMetrics as jest.Mock).mockReturnValue(\n        mockMetrics\n      );\n      (\n        performanceMonitor.calculateRoutingEfficiency as jest.Mock\n      ).mockResolvedValue({\n        overallEfficiency: 65, // Poor efficiency\n        directBedrockEfficiency: 85,\n        mcpEfficiency: 90,\n        fallbackRate: 15,\n        optimalRoutingRate: 65,\n        suboptimalRoutingRate: 35,\n        recommendations: [],\n      });\n\n      await optimizer.startOptimization();\n      await new Promise((resolve) => setTimeout(resolve, 150));\n\n      const recommendations = optimizer.getActiveRecommendations();\n      expect(recommendations.length).toBeGreaterThan(0);\n\n      // Should have critical recommendations for success rate improvement\n      const successRateOptimization = recommendations.find(\n        (r) =>\n          r.priority === \"critical\" &&\n          (r.description.includes(\"circuit breaker\") ||\n            r.description.includes(\"success\"))\n      );\n      expect(successRateOptimization).toBeDefined();\n      expect(\n        successRateOptimization?.expectedImprovement\n      ).toBeGreaterThanOrEqual(15);\n    });\n\n    it(\"should achieve >15% performance improvement through cost optimization\", async () => {\n      // Scenario: High cost due to inefficient routing\n      const mockMetrics = new Map([\n        [\n          \"direct_bedrock\",\n          {\n            path: \"direct_bedrock\",\n            requestCount: 900, // Too much expensive traffic\n            successCount: 882,\n            failureCount: 18,\n            totalLatencyMs: 4500000, // 5s average\n            latencies: Array(900).fill(5000),\n            p50LatencyMs: 5000,\n            p95LatencyMs: 6000,\n            p99LatencyMs: 8000,\n            averageLatencyMs: 5000,\n            successRate: 98,\n            lastUpdated: new Date(),\n          },\n        ],\n        [\n          \"mcp\",\n          {\n            path: \"mcp\",\n            requestCount: 100, // Too little cheap traffic\n            successCount: 98,\n            failureCount: 2,\n            totalLatencyMs: 600000, // 6s average\n            latencies: Array(100).fill(6000),\n            p50LatencyMs: 6000,\n            p95LatencyMs: 7000,\n            p99LatencyMs: 8000,\n            averageLatencyMs: 6000,\n            successRate: 98,\n            lastUpdated: new Date(),\n          },\n        ],\n      ]);\n\n      (performanceMonitor.getAllPathMetrics as jest.Mock).mockReturnValue(\n        mockMetrics\n      );\n      (\n        performanceMonitor.calculateRoutingEfficiency as jest.Mock\n      ).mockResolvedValue({\n        overallEfficiency: 75,\n        directBedrockEfficiency: 98,\n        mcpEfficiency: 98,\n        fallbackRate: 2,\n        optimalRoutingRate: 75,\n        suboptimalRoutingRate: 25,\n        recommendations: [],\n      });\n\n      await optimizer.startOptimization();\n      await new Promise((resolve) => setTimeout(resolve, 150));\n\n      const recommendations = optimizer.getActiveRecommendations();\n\n      // Should have cost optimization recommendations\n      const costOptimization = recommendations.find(\n        (r) => r.description.includes(\"cost\") || r.description.includes(\"MCP\")\n      );\n      expect(costOptimization).toBeDefined();\n      expect(costOptimization?.expectedImprovement).toBeGreaterThanOrEqual(15);\n    });\n\n    it(\"should achieve >15% performance improvement through adaptive strategy\", async () => {\n      // Scenario: Multiple optimization opportunities requiring adaptive strategy\n      const mockMetrics = new Map([\n        [\n          \"direct_bedrock\",\n          {\n            path: \"direct_bedrock\",\n            requestCount: 300,\n            successCount: 270, // 90% success rate\n            failureCount: 30,\n            totalLatencyMs: 2100000, // 7s average\n            latencies: Array(300).fill(7000),\n            p50LatencyMs: 7000,\n            p95LatencyMs: 9000,\n            p99LatencyMs: 12000,\n            averageLatencyMs: 7000,\n            successRate: 90,\n            lastUpdated: new Date(),\n          },\n        ],\n        [\n          \"mcp\",\n          {\n            path: \"mcp\",\n            requestCount: 700,\n            successCount: 630, // 90% success rate\n            failureCount: 70,\n            totalLatencyMs: 5600000, // 8s average\n            latencies: Array(700).fill(8000),\n            p50LatencyMs: 8000,\n            p95LatencyMs: 10000,\n            p99LatencyMs: 13000,\n            averageLatencyMs: 8000,\n            successRate: 90,\n            lastUpdated: new Date(),\n          },\n        ],\n      ]);\n\n      (performanceMonitor.getAllPathMetrics as jest.Mock).mockReturnValue(\n        mockMetrics\n      );\n      (\n        performanceMonitor.calculateRoutingEfficiency as jest.Mock\n      ).mockResolvedValue({\n        overallEfficiency: 68, // Poor efficiency requiring multiple optimizations\n        directBedrockEfficiency: 90,\n        mcpEfficiency: 90,\n        fallbackRate: 20, // High fallback rate\n        optimalRoutingRate: 68,\n        suboptimalRoutingRate: 32,\n        recommendations: [],\n      });\n\n      const adaptiveOptimizer = new RoutingEfficiencyOptimizer(\n        router,\n        performanceMonitor,\n        featureFlags,\n        auditTrail,\n        {\n          targetPerformanceImprovement: 15,\n          optimizationIntervalMs: 100,\n          minDataPointsRequired: 50,\n          enableAdaptiveStrategy: true,\n          maxRoutingRuleChanges: 5, // Allow more changes for adaptive strategy\n        }\n      );\n\n      await adaptiveOptimizer.startOptimization();\n      await new Promise((resolve) => setTimeout(resolve, 150));\n\n      const recommendations = adaptiveOptimizer.getActiveRecommendations();\n      expect(recommendations.length).toBeGreaterThan(2); // Multiple recommendations\n\n      // Should have adaptive strategy recommendation\n      const adaptiveRecommendation = recommendations.find((r) =>\n        r.description.includes(\"adaptive\")\n      );\n      expect(adaptiveRecommendation).toBeDefined();\n      expect(\n        adaptiveRecommendation?.expectedImprovement\n      ).toBeGreaterThanOrEqual(15);\n\n      adaptiveOptimizer.cleanup();\n    });\n  });\n\n  describe(\"Target Achievement Validation\", () => {\n    it(\"should track progress towards 15% improvement target\", async () => {\n      // Mock progressive improvement scenario\n      const mockMetrics = new Map([\n        [\n          \"direct_bedrock\",\n          {\n            path: \"direct_bedrock\",\n            requestCount: 400,\n            successCount: 392,\n            failureCount: 8,\n            totalLatencyMs: 1600000, // 4s average - good\n            latencies: Array(400).fill(4000),\n            p50LatencyMs: 4000,\n            p95LatencyMs: 5000,\n            p99LatencyMs: 6000,\n            averageLatencyMs: 4000,\n            successRate: 98,\n            lastUpdated: new Date(),\n          },\n        ],\n        [\n          \"mcp\",\n          {\n            path: \"mcp\",\n            requestCount: 600,\n            successCount: 588,\n            failureCount: 12,\n            totalLatencyMs: 3600000, // 6s average - acceptable\n            latencies: Array(600).fill(6000),\n            p50LatencyMs: 6000,\n            p95LatencyMs: 7000,\n            p99LatencyMs: 8000,\n            averageLatencyMs: 6000,\n            successRate: 98,\n            lastUpdated: new Date(),\n          },\n        ],\n      ]);\n\n      (performanceMonitor.getAllPathMetrics as jest.Mock).mockReturnValue(\n        mockMetrics\n      );\n      (\n        performanceMonitor.calculateRoutingEfficiency as jest.Mock\n      ).mockResolvedValue({\n        overallEfficiency: 85, // Good efficiency, close to target\n        directBedrockEfficiency: 98,\n        mcpEfficiency: 98,\n        fallbackRate: 2,\n        optimalRoutingRate: 85,\n        suboptimalRoutingRate: 15,\n        recommendations: [],\n      });\n\n      await optimizer.startOptimization();\n      await new Promise((resolve) => setTimeout(resolve, 150));\n\n      const status = optimizer.getOptimizationStatus();\n\n      // Should be tracking towards target\n      expect(status.overallImprovement).toBeGreaterThanOrEqual(0);\n      expect(typeof status.targetAchieved).toBe(\"boolean\");\n\n      // With good baseline performance, should have fewer but high-impact recommendations\n      const recommendations = optimizer.getActiveRecommendations();\n      if (recommendations.length > 0) {\n        const highImpactRecs = recommendations.filter(\n          (r) => r.expectedImprovement >= 15\n        );\n        expect(highImpactRecs.length).toBeGreaterThan(0);\n      }\n    });\n\n    it(\"should demonstrate measurable performance improvement\", async () => {\n      // Test the complete optimization cycle with before/after measurement\n\n      // Initial poor performance\n      let mockMetrics = new Map([\n        [\n          \"direct_bedrock\",\n          {\n            path: \"direct_bedrock\",\n            requestCount: 100,\n            successCount: 85,\n            failureCount: 15,\n            totalLatencyMs: 1200000, // 12s average - very poor\n            latencies: Array(100).fill(12000),\n            p50LatencyMs: 12000,\n            p95LatencyMs: 15000,\n            p99LatencyMs: 18000,\n            averageLatencyMs: 12000,\n            successRate: 85,\n            lastUpdated: new Date(),\n          },\n        ],\n        [\n          \"mcp\",\n          {\n            path: \"mcp\",\n            requestCount: 900,\n            successCount: 810,\n            failureCount: 90,\n            totalLatencyMs: 13500000, // 15s average - very poor\n            latencies: Array(900).fill(15000),\n            p50LatencyMs: 15000,\n            p95LatencyMs: 18000,\n            p99LatencyMs: 20000,\n            averageLatencyMs: 15000,\n            successRate: 90,\n            lastUpdated: new Date(),\n          },\n        ],\n      ]);\n\n      (performanceMonitor.getAllPathMetrics as jest.Mock).mockReturnValue(\n        mockMetrics\n      );\n      (\n        performanceMonitor.calculateRoutingEfficiency as jest.Mock\n      ).mockResolvedValue({\n        overallEfficiency: 50, // Very poor efficiency\n        directBedrockEfficiency: 85,\n        mcpEfficiency: 90,\n        fallbackRate: 30,\n        optimalRoutingRate: 50,\n        suboptimalRoutingRate: 50,\n        recommendations: [],\n      });\n\n      await optimizer.startOptimization();\n      await new Promise((resolve) => setTimeout(resolve, 150));\n\n      const initialRecommendations = optimizer.getActiveRecommendations();\n      expect(initialRecommendations.length).toBeGreaterThan(0);\n\n      // Simulate improved performance after optimization\n      mockMetrics = new Map([\n        [\n          \"direct_bedrock\",\n          {\n            path: \"direct_bedrock\",\n            requestCount: 600, // More traffic routed to better performing route\n            successCount: 588,\n            failureCount: 12,\n            totalLatencyMs: 3000000, // 5s average - much better\n            latencies: Array(600).fill(5000),\n            p50LatencyMs: 5000,\n            p95LatencyMs: 6000,\n            p99LatencyMs: 7000,\n            averageLatencyMs: 5000,\n            successRate: 98,\n            lastUpdated: new Date(),\n          },\n        ],\n        [\n          \"mcp\",\n          {\n            path: \"mcp\",\n            requestCount: 400, // Less traffic on slower route\n            successCount: 392,\n            failureCount: 8,\n            totalLatencyMs: 2800000, // 7s average - improved\n            latencies: Array(400).fill(7000),\n            p50LatencyMs: 7000,\n            p95LatencyMs: 8000,\n            p99LatencyMs: 9000,\n            averageLatencyMs: 7000,\n            successRate: 98,\n            lastUpdated: new Date(),\n          },\n        ],\n      ]);\n\n      (\n        performanceMonitor.calculateRoutingEfficiency as jest.Mock\n      ).mockResolvedValue({\n        overallEfficiency: 88, // Much improved efficiency\n        directBedrockEfficiency: 98,\n        mcpEfficiency: 98,\n        fallbackRate: 5,\n        optimalRoutingRate: 88,\n        suboptimalRoutingRate: 12,\n        recommendations: [],\n      });\n\n      // Wait for another optimization cycle to evaluate improvements\n      await new Promise((resolve) => setTimeout(resolve, 200));\n\n      const finalStatus = optimizer.getOptimizationStatus();\n\n      // Should show improvement (this would be calculated based on baseline vs current)\n      expect(finalStatus.totalOptimizations).toBeGreaterThan(0);\n\n      // The improvement calculation would show >15% improvement in this scenario\n      // (from 50% efficiency to 88% efficiency = 76% improvement)\n    });\n  });\n\n  describe(\"Edge Cases and Error Handling\", () => {\n    it(\"should handle insufficient data gracefully\", async () => {\n      // Mock insufficient data scenario\n      const mockMetrics = new Map([\n        [\n          \"direct_bedrock\",\n          {\n            path: \"direct_bedrock\",\n            requestCount: 10, // Below minimum threshold\n            successCount: 10,\n            failureCount: 0,\n            totalLatencyMs: 50000,\n            latencies: [5000],\n            p50LatencyMs: 5000,\n            p95LatencyMs: 5000,\n            p99LatencyMs: 5000,\n            averageLatencyMs: 5000,\n            successRate: 100,\n            lastUpdated: new Date(),\n          },\n        ],\n      ]);\n\n      (performanceMonitor.getAllPathMetrics as jest.Mock).mockReturnValue(\n        mockMetrics\n      );\n\n      await optimizer.startOptimization();\n      await new Promise((resolve) => setTimeout(resolve, 150));\n\n      // Should not generate recommendations with insufficient data\n      const recommendations = optimizer.getActiveRecommendations();\n      expect(recommendations.length).toBe(0);\n\n      const status = optimizer.getOptimizationStatus();\n      expect(status.isOptimizing).toBe(true); // Should still be running\n    });\n\n    it(\"should handle optimization failures gracefully\", async () => {\n      // Mock scenario where router updates fail\n      (router.updateRoutingRules as jest.Mock).mockImplementation(() => {\n        throw new Error(\"Router update failed\");\n      });\n\n      const mockMetrics = new Map([\n        [\n          \"direct_bedrock\",\n          {\n            path: \"direct_bedrock\",\n            requestCount: 200,\n            successCount: 160,\n            failureCount: 40,\n            totalLatencyMs: 1600000,\n            latencies: Array(200).fill(8000),\n            p50LatencyMs: 8000,\n            p95LatencyMs: 10000,\n            p99LatencyMs: 12000,\n            averageLatencyMs: 8000,\n            successRate: 80,\n            lastUpdated: new Date(),\n          },\n        ],\n        [\n          \"mcp\",\n          {\n            path: \"mcp\",\n            requestCount: 200,\n            successCount: 190,\n            failureCount: 10,\n            totalLatencyMs: 2000000,\n            latencies: Array(200).fill(10000),\n            p50LatencyMs: 10000,\n            p95LatencyMs: 12000,\n            p99LatencyMs: 15000,\n            averageLatencyMs: 10000,\n            successRate: 95,\n            lastUpdated: new Date(),\n          },\n        ],\n      ]);\n\n      (performanceMonitor.getAllPathMetrics as jest.Mock).mockReturnValue(\n        mockMetrics\n      );\n      (\n        performanceMonitor.calculateRoutingEfficiency as jest.Mock\n      ).mockResolvedValue({\n        overallEfficiency: 70,\n        directBedrockEfficiency: 80,\n        mcpEfficiency: 95,\n        fallbackRate: 15,\n        optimalRoutingRate: 70,\n        suboptimalRoutingRate: 30,\n        recommendations: [],\n      });\n\n      await optimizer.startOptimization();\n      await new Promise((resolve) => setTimeout(resolve, 150));\n\n      // Should continue running despite router update failures\n      const status = optimizer.getOptimizationStatus();\n      expect(status.isOptimizing).toBe(true);\n    });\n  });\n});\n"],"version":3}
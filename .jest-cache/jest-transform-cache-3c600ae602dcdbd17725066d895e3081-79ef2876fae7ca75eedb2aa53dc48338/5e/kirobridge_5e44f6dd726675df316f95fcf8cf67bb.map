{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/kiro-bridge.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/kiro-bridge.ts"],"sourcesContent":["/**\n * Kiro Bridge Communication System\n *\n * Provides bidirectional communication between Bedrock Support Manager and Kiro\n * with hybrid routing awareness, message queuing, and comprehensive error handling.\n */\n\n// Simple UUID replacement for testing (no external dependencies)\nfunction uuidv4(): string {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16) | 0;\n    const v = c == \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nexport type KiroBridgeMessageType =\n  | \"diagnostic_request\"\n  | \"diagnostic_response\"\n  | \"execution_data\"\n  | \"execution_feedback\"\n  | \"health_check\"\n  | \"health_response\"\n  | \"support_request\"\n  | \"support_response\"\n  | \"routing_info\"\n  | \"error_report\";\n\nexport type MessagePriority =\n  | \"emergency\"\n  | \"critical\"\n  | \"high\"\n  | \"medium\"\n  | \"low\";\nexport type RoutingPath = \"direct_bedrock\" | \"mcp\" | \"fallback\" | \"hybrid\";\nexport type MessageStatus =\n  | \"pending\"\n  | \"sent\"\n  | \"delivered\"\n  | \"acknowledged\"\n  | \"failed\"\n  | \"timeout\";\n\nexport interface KiroBridgeMessage {\n  id: string;\n  correlationId: string;\n  type: KiroBridgeMessageType;\n  priority: MessagePriority;\n  timestamp: Date;\n  source: \"bedrock\" | \"kiro\";\n  destination: \"bedrock\" | \"kiro\";\n  routingPath: RoutingPath;\n  payload: Record<string, any>;\n  metadata: {\n    retryCount: number;\n    maxRetries: number;\n    timeout: number;\n    expiresAt: Date;\n  };\n}\n\nexport interface MessageQueueConfig {\n  maxQueueSize: number;\n  maxRetries: number;\n  retryDelayMs: number;\n  timeoutMs: number;\n  priorityLevels: Record<MessagePriority, number>;\n}\n\nexport interface CommunicationStats {\n  messagesSent: number;\n  messagesReceived: number;\n  messagesDelivered: number;\n  messagesFailed: number;\n  averageLatency: number;\n  queueSize: number;\n  errorRate: number;\n  lastActivity: Date;\n}\n\n/**\n * Kiro Bridge Communication System\n */\nexport class KiroBridge {\n  private messageQueue: Map<string, KiroBridgeMessage> = new Map();\n  private pendingMessages: Map<string, KiroBridgeMessage> = new Map();\n  private messageHandlers: Map<\n    KiroBridgeMessageType,\n    (message: KiroBridgeMessage) => Promise<void>\n  > = new Map();\n  private stats: CommunicationStats;\n  private config: MessageQueueConfig;\n  private isActive: boolean = false;\n  private processingInterval?: NodeJS.Timeout;\n\n  constructor(config?: Partial<MessageQueueConfig>) {\n    this.config = {\n      maxQueueSize: 1000,\n      maxRetries: 3,\n      retryDelayMs: 1000,\n      timeoutMs: 30000,\n      priorityLevels: {\n        emergency: 1,\n        critical: 2,\n        high: 3,\n        medium: 4,\n        low: 5,\n      },\n      ...config,\n    };\n\n    this.stats = {\n      messagesSent: 0,\n      messagesReceived: 0,\n      messagesDelivered: 0,\n      messagesFailed: 0,\n      averageLatency: 0,\n      queueSize: 0,\n      errorRate: 0,\n      lastActivity: new Date(),\n    };\n\n    this.initializeDefaultHandlers();\n  }\n\n  public async initialize(): Promise<void> {\n    this.isActive = true;\n    this.processingInterval = setInterval(() => {\n      this.processMessageQueue();\n    }, 100);\n    console.log(\"[KiroBridge] Communication system initialized\");\n  }\n\n  public async shutdown(): Promise<void> {\n    this.isActive = false;\n    if (this.processingInterval) {\n      clearInterval(this.processingInterval);\n    }\n    await this.processMessageQueue();\n    console.log(\"[KiroBridge] Communication system shutdown\");\n  }\n\n  public async sendDiagnosticRequest(\n    diagnosticType:\n      | \"system_health\"\n      | \"performance\"\n      | \"error_analysis\"\n      | \"gap_detection\",\n    data: Record<string, any>,\n    options?: {\n      priority?: MessagePriority;\n      routingPath?: RoutingPath;\n    }\n  ): Promise<string> {\n    const message: KiroBridgeMessage = {\n      id: uuidv4(),\n      correlationId: uuidv4(),\n      type: \"diagnostic_request\",\n      priority: options?.priority || \"medium\",\n      timestamp: new Date(),\n      source: \"bedrock\",\n      destination: \"kiro\",\n      routingPath: options?.routingPath || \"hybrid\",\n      payload: { diagnosticType, data },\n      metadata: {\n        retryCount: 0,\n        maxRetries: this.config.maxRetries,\n        timeout: this.config.timeoutMs,\n        expiresAt: new Date(Date.now() + this.config.timeoutMs),\n      },\n    };\n\n    await this.queueMessage(message);\n    return message.correlationId;\n  }\n\n  public async sendExecutionData(\n    executionId: string,\n    operation: string,\n    status: \"started\" | \"running\" | \"completed\" | \"failed\",\n    data: Record<string, any>\n  ): Promise<string> {\n    const message: KiroBridgeMessage = {\n      id: uuidv4(),\n      correlationId: uuidv4(),\n      type: \"execution_data\",\n      priority: \"medium\",\n      timestamp: new Date(),\n      source: \"bedrock\",\n      destination: \"kiro\",\n      routingPath: \"hybrid\",\n      payload: { executionId, operation, status, ...data },\n      metadata: {\n        retryCount: 0,\n        maxRetries: this.config.maxRetries,\n        timeout: this.config.timeoutMs,\n        expiresAt: new Date(Date.now() + this.config.timeoutMs),\n      },\n    };\n\n    await this.queueMessage(message);\n    return message.correlationId;\n  }\n\n  public registerMessageHandler(\n    messageType: KiroBridgeMessageType,\n    handler: (message: KiroBridgeMessage) => Promise<void>\n  ): void {\n    this.messageHandlers.set(messageType, handler);\n  }\n\n  public async receiveMessage(message: KiroBridgeMessage): Promise<void> {\n    try {\n      this.stats.messagesReceived++;\n      this.stats.lastActivity = new Date();\n\n      const handler = this.messageHandlers.get(message.type);\n      if (handler) {\n        await handler(message);\n        this.stats.messagesDelivered++;\n      }\n    } catch (error) {\n      console.error(`[KiroBridge] Error processing message:`, error);\n      this.stats.messagesFailed++;\n    }\n  }\n\n  public getStats(): CommunicationStats {\n    this.stats.queueSize = this.messageQueue.size;\n    this.stats.errorRate =\n      this.stats.messagesFailed / Math.max(this.stats.messagesSent, 1);\n    return { ...this.stats };\n  }\n\n  private initializeDefaultHandlers(): void {\n    this.registerMessageHandler(\"diagnostic_response\", async (message) => {\n      console.log(\n        `[KiroBridge] Received diagnostic response: ${message.correlationId}`\n      );\n    });\n\n    this.registerMessageHandler(\"execution_feedback\", async (message) => {\n      console.log(\n        `[KiroBridge] Received execution feedback: ${message.correlationId}`\n      );\n    });\n  }\n\n  private async queueMessage(message: KiroBridgeMessage): Promise<void> {\n    if (this.messageQueue.size >= this.config.maxQueueSize) {\n      throw new Error(\"Message queue is full\");\n    }\n\n    this.messageQueue.set(message.id, message);\n    this.stats.messagesSent++;\n    this.stats.lastActivity = new Date();\n  }\n\n  private async processMessageQueue(): Promise<void> {\n    if (!this.isActive || this.messageQueue.size === 0) {\n      return;\n    }\n\n    const messages = Array.from(this.messageQueue.values()).sort(\n      (a, b) =>\n        this.config.priorityLevels[a.priority] -\n        this.config.priorityLevels[b.priority]\n    );\n\n    for (const message of messages.slice(0, 10)) {\n      try {\n        await this.transmitMessage(message);\n        this.messageQueue.delete(message.id);\n      } catch (error) {\n        console.error(`[KiroBridge] Failed to transmit message:`, error);\n      }\n    }\n  }\n\n  private async transmitMessage(message: KiroBridgeMessage): Promise<void> {\n    console.log(\n      `[KiroBridge] Transmitting message: ${message.id} via ${message.routingPath}`\n    );\n    await new Promise((resolve) => setTimeout(resolve, Math.random() * 100));\n  }\n}\n\n// Default instance export\nexport const kiroBridge = new KiroBridge();\n\n// The class is already exported above, no need to re-export\n"],"version":3}
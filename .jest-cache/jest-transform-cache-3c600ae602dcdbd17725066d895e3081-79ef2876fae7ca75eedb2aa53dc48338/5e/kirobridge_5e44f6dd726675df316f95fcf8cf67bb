73c54c9fabaf288ae11ae17aea93db4e
"use strict";
/**
 * Kiro Bridge Communication System
 *
 * Provides bidirectional communication between Bedrock Support Manager and Kiro
 * with hybrid routing awareness, message queuing, and comprehensive error handling.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.kiroBridge = exports.KiroBridge = void 0;
// Simple UUID replacement for testing (no external dependencies)
function uuidv4() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
        const r = (Math.random() * 16) | 0;
        const v = c == "x" ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    });
}
/**
 * Kiro Bridge Communication System
 */
class KiroBridge {
    messageQueue = new Map();
    pendingMessages = new Map();
    messageHandlers = new Map();
    stats;
    config;
    isActive = false;
    processingInterval;
    constructor(config) {
        this.config = {
            maxQueueSize: 1000,
            maxRetries: 3,
            retryDelayMs: 1000,
            timeoutMs: 30000,
            priorityLevels: {
                emergency: 1,
                critical: 2,
                high: 3,
                medium: 4,
                low: 5,
            },
            ...config,
        };
        this.stats = {
            messagesSent: 0,
            messagesReceived: 0,
            messagesDelivered: 0,
            messagesFailed: 0,
            averageLatency: 0,
            queueSize: 0,
            errorRate: 0,
            lastActivity: new Date(),
        };
        this.initializeDefaultHandlers();
    }
    async initialize() {
        this.isActive = true;
        this.processingInterval = setInterval(() => {
            this.processMessageQueue();
        }, 100);
        console.log("[KiroBridge] Communication system initialized");
    }
    async shutdown() {
        this.isActive = false;
        if (this.processingInterval) {
            clearInterval(this.processingInterval);
        }
        await this.processMessageQueue();
        console.log("[KiroBridge] Communication system shutdown");
    }
    async sendDiagnosticRequest(diagnosticType, data, options) {
        const message = {
            id: uuidv4(),
            correlationId: uuidv4(),
            type: "diagnostic_request",
            priority: options?.priority || "medium",
            timestamp: new Date(),
            source: "bedrock",
            destination: "kiro",
            routingPath: options?.routingPath || "hybrid",
            payload: { diagnosticType, data },
            metadata: {
                retryCount: 0,
                maxRetries: this.config.maxRetries,
                timeout: this.config.timeoutMs,
                expiresAt: new Date(Date.now() + this.config.timeoutMs),
            },
        };
        await this.queueMessage(message);
        return message.correlationId;
    }
    async sendExecutionData(executionId, operation, status, data) {
        const message = {
            id: uuidv4(),
            correlationId: uuidv4(),
            type: "execution_data",
            priority: "medium",
            timestamp: new Date(),
            source: "bedrock",
            destination: "kiro",
            routingPath: "hybrid",
            payload: { executionId, operation, status, ...data },
            metadata: {
                retryCount: 0,
                maxRetries: this.config.maxRetries,
                timeout: this.config.timeoutMs,
                expiresAt: new Date(Date.now() + this.config.timeoutMs),
            },
        };
        await this.queueMessage(message);
        return message.correlationId;
    }
    registerMessageHandler(messageType, handler) {
        this.messageHandlers.set(messageType, handler);
    }
    async receiveMessage(message) {
        try {
            this.stats.messagesReceived++;
            this.stats.lastActivity = new Date();
            const handler = this.messageHandlers.get(message.type);
            if (handler) {
                await handler(message);
                this.stats.messagesDelivered++;
            }
        }
        catch (error) {
            console.error(`[KiroBridge] Error processing message:`, error);
            this.stats.messagesFailed++;
        }
    }
    getStats() {
        this.stats.queueSize = this.messageQueue.size;
        this.stats.errorRate =
            this.stats.messagesFailed / Math.max(this.stats.messagesSent, 1);
        return { ...this.stats };
    }
    initializeDefaultHandlers() {
        this.registerMessageHandler("diagnostic_response", async (message) => {
            console.log(`[KiroBridge] Received diagnostic response: ${message.correlationId}`);
        });
        this.registerMessageHandler("execution_feedback", async (message) => {
            console.log(`[KiroBridge] Received execution feedback: ${message.correlationId}`);
        });
    }
    async queueMessage(message) {
        if (this.messageQueue.size >= this.config.maxQueueSize) {
            throw new Error("Message queue is full");
        }
        this.messageQueue.set(message.id, message);
        this.stats.messagesSent++;
        this.stats.lastActivity = new Date();
    }
    async processMessageQueue() {
        if (!this.isActive || this.messageQueue.size === 0) {
            return;
        }
        const messages = Array.from(this.messageQueue.values()).sort((a, b) => this.config.priorityLevels[a.priority] -
            this.config.priorityLevels[b.priority]);
        for (const message of messages.slice(0, 10)) {
            try {
                await this.transmitMessage(message);
                this.messageQueue.delete(message.id);
            }
            catch (error) {
                console.error(`[KiroBridge] Failed to transmit message:`, error);
            }
        }
    }
    async transmitMessage(message) {
        console.log(`[KiroBridge] Transmitting message: ${message.id} via ${message.routingPath}`);
        await new Promise((resolve) => setTimeout(resolve, Math.random() * 100));
    }
}
exports.KiroBridge = KiroBridge;
// Default instance export
exports.kiroBridge = new KiroBridge();
// The class is already exported above, no need to re-export
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
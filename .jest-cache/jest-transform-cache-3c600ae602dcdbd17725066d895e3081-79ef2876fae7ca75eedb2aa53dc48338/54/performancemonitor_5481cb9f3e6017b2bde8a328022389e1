7b975071b748f1237f05b21e7efb200d
"use strict";
/**
 * Performance Monitor
 *
 * Tracks performance metrics, SLO compliance, and automated rollback triggers
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PerformanceMonitor = void 0;
exports.createPerformanceMonitor = createPerformanceMonitor;
class PerformanceMonitor {
    requests = new Map();
    alerts = [];
    slos = [
        { name: "P95 Latency", threshold: 1500, currentValue: 0, violated: false },
        { name: "Error Rate", threshold: 0.01, currentValue: 0, violated: false },
        { name: "Availability", threshold: 0.99, currentValue: 1, violated: false },
    ];
    recordRequestStart(request) {
        const requestId = `req-${Date.now()}-${Math.random()
            .toString(36)
            .substr(2, 9)}`;
        return requestId;
    }
    recordRequestComplete(requestId, request, response, startTime) {
        const endTime = Date.now();
        const latency = endTime - startTime;
        const record = {
            requestId,
            request,
            response,
            startTime,
            endTime,
            latency,
        };
        this.requests.set(requestId, record);
        this.updateSLOs();
        this.checkAlerts();
    }
    getGlobalMetrics() {
        if (this.requests.size === 0)
            return null;
        const records = Array.from(this.requests.values());
        const successCount = records.filter((r) => r.response.success).length;
        const errorCount = records.filter((r) => !r.response.success).length;
        const latencies = records.map((r) => r.latency).sort((a, b) => a - b);
        const costs = records.map((r) => r.response.costEuro || 0);
        return {
            requestCount: records.length,
            successCount,
            errorCount,
            errorRate: errorCount / records.length,
            averageLatency: latencies.reduce((a, b) => a + b, 0) / latencies.length,
            p95Latency: this.calculatePercentile(latencies, 0.95),
            p99Latency: this.calculatePercentile(latencies, 0.99),
            totalCost: costs.reduce((a, b) => a + b, 0),
            costPerRequest: costs.reduce((a, b) => a + b, 0) / records.length,
        };
    }
    getProviderMetrics(provider) {
        const records = Array.from(this.requests.values()).filter((r) => r.response.provider === provider);
        if (records.length === 0)
            return [];
        const successCount = records.filter((r) => r.response.success).length;
        const errorCount = records.filter((r) => !r.response.success).length;
        const latencies = records.map((r) => r.latency).sort((a, b) => a - b);
        const costs = records.map((r) => r.response.costEuro || 0);
        return [
            {
                provider,
                requestCount: records.length,
                successCount,
                errorCount,
                errorRate: errorCount / records.length,
                averageLatency: latencies.reduce((a, b) => a + b, 0) / latencies.length,
                p95Latency: this.calculatePercentile(latencies, 0.95),
                p99Latency: this.calculatePercentile(latencies, 0.99),
                totalCost: costs.reduce((a, b) => a + b, 0),
                costPerRequest: costs.reduce((a, b) => a + b, 0) / records.length,
                availability: successCount / records.length,
                circuitBreakerOpen: errorCount / records.length > 0.5,
            },
        ];
    }
    getActiveAlerts() {
        return this.alerts;
    }
    resolveAlert(alertId) {
        const index = this.alerts.findIndex((a) => a.id === alertId);
        if (index !== -1) {
            this.alerts.splice(index, 1);
            return true;
        }
        return false;
    }
    isPerformanceHealthy() {
        const criticalAlerts = this.alerts.filter((a) => a.severity === "critical");
        return criticalAlerts.length === 0;
    }
    getPerformanceSummary() {
        const globalMetrics = this.getGlobalMetrics();
        const providers = new Set(Array.from(this.requests.values()).map((r) => r.response.provider));
        const criticalAlerts = this.alerts.filter((a) => a.severity === "critical");
        const violatedSLOs = this.slos.filter((s) => s.violated).length;
        const sloCompliance = 1 - violatedSLOs / this.slos.length;
        return {
            healthy: this.isPerformanceHealthy(),
            globalMetrics,
            providerCount: providers.size,
            activeAlerts: this.alerts.length,
            criticalAlerts: criticalAlerts.length,
            sloCompliance,
        };
    }
    reset() {
        this.requests.clear();
        this.alerts = [];
        this.slos.forEach((slo) => {
            slo.currentValue = 0;
            slo.violated = false;
        });
    }
    calculatePercentile(sortedValues, percentile) {
        if (sortedValues.length === 0)
            return 0;
        const index = Math.ceil(sortedValues.length * percentile) - 1;
        return sortedValues[Math.max(0, index)];
    }
    updateSLOs() {
        const metrics = this.getGlobalMetrics();
        if (!metrics)
            return;
        // Update P95 Latency SLO
        const p95Slo = this.slos.find((s) => s.name === "P95 Latency");
        if (p95Slo) {
            p95Slo.currentValue = metrics.p95Latency;
            p95Slo.violated = metrics.p95Latency > p95Slo.threshold;
        }
        // Update Error Rate SLO
        const errorSlo = this.slos.find((s) => s.name === "Error Rate");
        if (errorSlo) {
            errorSlo.currentValue = metrics.errorRate;
            errorSlo.violated = metrics.errorRate > errorSlo.threshold;
        }
        // Update Availability SLO
        const availabilitySlo = this.slos.find((s) => s.name === "Availability");
        if (availabilitySlo) {
            const availability = metrics.successCount / metrics.requestCount;
            availabilitySlo.currentValue = availability;
            availabilitySlo.violated = availability < availabilitySlo.threshold;
        }
    }
    checkAlerts() {
        this.slos.forEach((slo) => {
            if (slo.violated) {
                const existingAlert = this.alerts.find((a) => a.slo.name === slo.name);
                if (!existingAlert) {
                    const severity = this.determineSeverity(slo);
                    this.alerts.push({
                        id: `alert-${Date.now()}-${Math.random()
                            .toString(36)
                            .substr(2, 9)}`,
                        slo: { ...slo },
                        currentValue: slo.currentValue,
                        threshold: slo.threshold,
                        severity,
                        timestamp: new Date(),
                    });
                }
            }
        });
    }
    determineSeverity(slo) {
        const ratio = slo.currentValue / slo.threshold;
        if (slo.name === "P95 Latency") {
            return ratio > 2 ? "critical" : "warning";
        }
        if (slo.name === "Error Rate") {
            return ratio > 10 ? "critical" : "warning";
        }
        if (slo.name === "Availability") {
            return slo.currentValue < 0.95 ? "critical" : "warning";
        }
        return "warning";
    }
}
exports.PerformanceMonitor = PerformanceMonitor;
function createPerformanceMonitor() {
    return new PerformanceMonitor();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
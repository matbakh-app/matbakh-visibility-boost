{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/performance-monitor.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/performance-monitor.ts"],"sourcesContent":["/**\n * Performance Monitor\n *\n * Tracks performance metrics, SLO compliance, and automated rollback triggers\n */\n\nimport { AiRequest, AiResponse } from \"./types\";\n\nexport interface PerformanceMetrics {\n  requestCount: number;\n  successCount: number;\n  errorCount: number;\n  errorRate: number;\n  averageLatency: number;\n  p95Latency: number;\n  p99Latency: number;\n  totalCost: number;\n  costPerRequest: number;\n}\n\nexport interface ProviderMetrics extends PerformanceMetrics {\n  provider: string;\n  availability: number;\n  circuitBreakerOpen: boolean;\n}\n\nexport interface SLO {\n  name: string;\n  threshold: number;\n  currentValue: number;\n  violated: boolean;\n}\n\nexport interface Alert {\n  id: string;\n  slo: SLO;\n  currentValue: number;\n  threshold: number;\n  severity: \"warning\" | \"critical\";\n  timestamp: Date;\n}\n\nexport interface PerformanceSummary {\n  healthy: boolean;\n  globalMetrics: PerformanceMetrics | null;\n  providerCount: number;\n  activeAlerts: number;\n  criticalAlerts: number;\n  sloCompliance: number;\n}\n\ninterface RequestRecord {\n  requestId: string;\n  request: AiRequest;\n  response: AiResponse;\n  startTime: number;\n  endTime: number;\n  latency: number;\n}\n\nexport class PerformanceMonitor {\n  private requests: Map<string, RequestRecord> = new Map();\n  private alerts: Alert[] = [];\n  private slos: SLO[] = [\n    { name: \"P95 Latency\", threshold: 1500, currentValue: 0, violated: false },\n    { name: \"Error Rate\", threshold: 0.01, currentValue: 0, violated: false },\n    { name: \"Availability\", threshold: 0.99, currentValue: 1, violated: false },\n  ];\n\n  recordRequestStart(request: AiRequest): string {\n    const requestId = `req-${Date.now()}-${Math.random()\n      .toString(36)\n      .substr(2, 9)}`;\n    return requestId;\n  }\n\n  recordRequestComplete(\n    requestId: string,\n    request: AiRequest,\n    response: AiResponse,\n    startTime: number\n  ): void {\n    const endTime = Date.now();\n    const latency = endTime - startTime;\n\n    const record: RequestRecord = {\n      requestId,\n      request,\n      response,\n      startTime,\n      endTime,\n      latency,\n    };\n\n    this.requests.set(requestId, record);\n    this.updateSLOs();\n    this.checkAlerts();\n  }\n\n  getGlobalMetrics(): PerformanceMetrics | null {\n    if (this.requests.size === 0) return null;\n\n    const records = Array.from(this.requests.values());\n    const successCount = records.filter((r) => r.response.success).length;\n    const errorCount = records.filter((r) => !r.response.success).length;\n    const latencies = records.map((r) => r.latency).sort((a, b) => a - b);\n    const costs = records.map((r) => r.response.costEuro || 0);\n\n    return {\n      requestCount: records.length,\n      successCount,\n      errorCount,\n      errorRate: errorCount / records.length,\n      averageLatency: latencies.reduce((a, b) => a + b, 0) / latencies.length,\n      p95Latency: this.calculatePercentile(latencies, 0.95),\n      p99Latency: this.calculatePercentile(latencies, 0.99),\n      totalCost: costs.reduce((a, b) => a + b, 0),\n      costPerRequest: costs.reduce((a, b) => a + b, 0) / records.length,\n    };\n  }\n\n  getProviderMetrics(provider: string): ProviderMetrics[] {\n    const records = Array.from(this.requests.values()).filter(\n      (r) => r.response.provider === provider\n    );\n\n    if (records.length === 0) return [];\n\n    const successCount = records.filter((r) => r.response.success).length;\n    const errorCount = records.filter((r) => !r.response.success).length;\n    const latencies = records.map((r) => r.latency).sort((a, b) => a - b);\n    const costs = records.map((r) => r.response.costEuro || 0);\n\n    return [\n      {\n        provider,\n        requestCount: records.length,\n        successCount,\n        errorCount,\n        errorRate: errorCount / records.length,\n        averageLatency: latencies.reduce((a, b) => a + b, 0) / latencies.length,\n        p95Latency: this.calculatePercentile(latencies, 0.95),\n        p99Latency: this.calculatePercentile(latencies, 0.99),\n        totalCost: costs.reduce((a, b) => a + b, 0),\n        costPerRequest: costs.reduce((a, b) => a + b, 0) / records.length,\n        availability: successCount / records.length,\n        circuitBreakerOpen: errorCount / records.length > 0.5,\n      },\n    ];\n  }\n\n  getActiveAlerts(): Alert[] {\n    return this.alerts;\n  }\n\n  resolveAlert(alertId: string): boolean {\n    const index = this.alerts.findIndex((a) => a.id === alertId);\n    if (index !== -1) {\n      this.alerts.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  isPerformanceHealthy(): boolean {\n    const criticalAlerts = this.alerts.filter((a) => a.severity === \"critical\");\n    return criticalAlerts.length === 0;\n  }\n\n  getPerformanceSummary(): PerformanceSummary {\n    const globalMetrics = this.getGlobalMetrics();\n    const providers = new Set(\n      Array.from(this.requests.values()).map((r) => r.response.provider)\n    );\n    const criticalAlerts = this.alerts.filter((a) => a.severity === \"critical\");\n    const violatedSLOs = this.slos.filter((s) => s.violated).length;\n    const sloCompliance = 1 - violatedSLOs / this.slos.length;\n\n    return {\n      healthy: this.isPerformanceHealthy(),\n      globalMetrics,\n      providerCount: providers.size,\n      activeAlerts: this.alerts.length,\n      criticalAlerts: criticalAlerts.length,\n      sloCompliance,\n    };\n  }\n\n  reset(): void {\n    this.requests.clear();\n    this.alerts = [];\n    this.slos.forEach((slo) => {\n      slo.currentValue = 0;\n      slo.violated = false;\n    });\n  }\n\n  private calculatePercentile(\n    sortedValues: number[],\n    percentile: number\n  ): number {\n    if (sortedValues.length === 0) return 0;\n    const index = Math.ceil(sortedValues.length * percentile) - 1;\n    return sortedValues[Math.max(0, index)];\n  }\n\n  private updateSLOs(): void {\n    const metrics = this.getGlobalMetrics();\n    if (!metrics) return;\n\n    // Update P95 Latency SLO\n    const p95Slo = this.slos.find((s) => s.name === \"P95 Latency\");\n    if (p95Slo) {\n      p95Slo.currentValue = metrics.p95Latency;\n      p95Slo.violated = metrics.p95Latency > p95Slo.threshold;\n    }\n\n    // Update Error Rate SLO\n    const errorSlo = this.slos.find((s) => s.name === \"Error Rate\");\n    if (errorSlo) {\n      errorSlo.currentValue = metrics.errorRate;\n      errorSlo.violated = metrics.errorRate > errorSlo.threshold;\n    }\n\n    // Update Availability SLO\n    const availabilitySlo = this.slos.find((s) => s.name === \"Availability\");\n    if (availabilitySlo) {\n      const availability = metrics.successCount / metrics.requestCount;\n      availabilitySlo.currentValue = availability;\n      availabilitySlo.violated = availability < availabilitySlo.threshold;\n    }\n  }\n\n  private checkAlerts(): void {\n    this.slos.forEach((slo) => {\n      if (slo.violated) {\n        const existingAlert = this.alerts.find((a) => a.slo.name === slo.name);\n        if (!existingAlert) {\n          const severity = this.determineSeverity(slo);\n          this.alerts.push({\n            id: `alert-${Date.now()}-${Math.random()\n              .toString(36)\n              .substr(2, 9)}`,\n            slo: { ...slo },\n            currentValue: slo.currentValue,\n            threshold: slo.threshold,\n            severity,\n            timestamp: new Date(),\n          });\n        }\n      }\n    });\n  }\n\n  private determineSeverity(slo: SLO): \"warning\" | \"critical\" {\n    const ratio = slo.currentValue / slo.threshold;\n\n    if (slo.name === \"P95 Latency\") {\n      return ratio > 2 ? \"critical\" : \"warning\";\n    }\n\n    if (slo.name === \"Error Rate\") {\n      return ratio > 10 ? \"critical\" : \"warning\";\n    }\n\n    if (slo.name === \"Availability\") {\n      return slo.currentValue < 0.95 ? \"critical\" : \"warning\";\n    }\n\n    return \"warning\";\n  }\n}\n\nexport function createPerformanceMonitor(): PerformanceMonitor {\n  return new PerformanceMonitor();\n}\n"],"version":3}
271034e0e7f5b990366d3c5516e24ca2
"use strict";
/**
 * Basic Logger for AI Orchestrator
 *
 * Implements structured logging with different levels and contexts
 * Supports CloudWatch integration and local development
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLogger = exports.logger = exports.BasicLogger = void 0;
/**
 * Basic Logger implementation
 */
class BasicLogger {
    serviceName;
    environment;
    minLevel;
    constructor(serviceName = "ai-orchestrator", environment = "development") {
        this.serviceName = serviceName;
        this.environment = environment;
        this.minLevel = this.getMinLogLevel();
    }
    /**
     * Log debug message
     */
    debug(message, context) {
        this.log("debug", message, context);
    }
    /**
     * Log info message
     */
    info(message, context) {
        this.log("info", message, context);
    }
    /**
     * Log warning message
     */
    warn(message, context) {
        this.log("warn", message, context);
    }
    /**
     * Log error message
     */
    error(message, error, context) {
        const errorContext = error
            ? {
                ...context,
                error: {
                    name: error.name,
                    message: error.message,
                    stack: error.stack,
                },
            }
            : context;
        this.log("error", message, errorContext);
    }
    /**
     * Log fatal message
     */
    fatal(message, error, context) {
        const errorContext = error
            ? {
                ...context,
                error: {
                    name: error.name,
                    message: error.message,
                    stack: error.stack,
                },
            }
            : context;
        this.log("fatal", message, errorContext);
    }
    /**
     * Log AI request start
     */
    logRequestStart(requestId, context) {
        this.info("AI request started", {
            requestId,
            ...context,
            operation: "request_start",
        });
    }
    /**
     * Log AI request completion
     */
    logRequestComplete(requestId, context) {
        this.info("AI request completed", {
            requestId,
            ...context,
            operation: "request_complete",
        });
    }
    /**
     * Log AI request error
     */
    logRequestError(requestId, error, context) {
        this.error("AI request failed", error, {
            requestId,
            ...context,
            operation: "request_error",
        });
    }
    /**
     * Log provider fallback
     */
    logProviderFallback(requestId, fromProvider, toProvider, reason) {
        this.warn("Provider fallback triggered", {
            requestId,
            fromProvider,
            toProvider,
            reason,
            operation: "provider_fallback",
        });
    }
    /**
     * Log cache hit/miss
     */
    logCacheEvent(requestId, event, key, ttl) {
        this.debug(`Cache ${event}`, {
            requestId,
            cacheKey: key,
            ttl,
            operation: `cache_${event}`,
        });
    }
    /**
     * Log performance metrics
     */
    logPerformanceMetrics(requestId, metrics) {
        this.info("Performance metrics", {
            requestId,
            ...metrics,
            operation: "performance_metrics",
        });
    }
    /**
     * Core logging method
     */
    log(level, message, context) {
        if (!this.shouldLog(level)) {
            return;
        }
        const logEntry = {
            timestamp: new Date().toISOString(),
            level,
            message,
            context: {
                service: this.serviceName,
                environment: this.environment,
                ...context,
            },
        };
        // In production, this would send to CloudWatch
        // For now, use structured console logging
        if (this.environment === "production") {
            console.log(JSON.stringify(logEntry));
        }
        else {
            // Pretty print for development
            this.prettyPrint(logEntry);
        }
    }
    /**
     * Pretty print log entry for development
     */
    prettyPrint(entry) {
        const colors = {
            debug: "\x1b[36m", // Cyan
            info: "\x1b[32m", // Green
            warn: "\x1b[33m", // Yellow
            error: "\x1b[31m", // Red
            fatal: "\x1b[35m", // Magenta
        };
        const reset = "\x1b[0m";
        const color = colors[entry.level] || "";
        console.log(`${color}[${entry.timestamp}] ${entry.level.toUpperCase()}${reset}: ${entry.message}`, entry.context ? entry.context : "");
        if (entry.context?.error) {
            console.error(`${color}Error Stack:${reset}`, entry.context.error.stack);
        }
    }
    /**
     * Check if log level should be logged
     */
    shouldLog(level) {
        const levels = {
            debug: 0,
            info: 1,
            warn: 2,
            error: 3,
            fatal: 4,
        };
        return levels[level] >= levels[this.minLevel];
    }
    /**
     * Get minimum log level from environment
     */
    getMinLogLevel() {
        const envLevel = process.env.LOG_LEVEL?.toLowerCase();
        const validLevels = ["debug", "info", "warn", "error", "fatal"];
        if (envLevel && validLevels.includes(envLevel)) {
            return envLevel;
        }
        // Default log levels by environment
        switch (this.environment) {
            case "production":
                return "info";
            case "staging":
                return "debug";
            default:
                return "debug";
        }
    }
    /**
     * Create child logger with additional context
     */
    child(context) {
        const childLogger = new BasicLogger(this.serviceName, this.environment);
        // Override log method to include parent context
        const originalLog = childLogger.log.bind(childLogger);
        childLogger.log = (level, message, childContext) => {
            originalLog(level, message, { ...context, ...childContext });
        };
        return childLogger;
    }
}
exports.BasicLogger = BasicLogger;
/**
 * Default logger instance
 */
exports.logger = new BasicLogger("ai-orchestrator", process.env.NODE_ENV || "development");
/**
 * Create logger for specific service
 */
const createLogger = (serviceName, environment) => {
    return new BasicLogger(serviceName, environment || process.env.NODE_ENV || "development");
};
exports.createLogger = createLogger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
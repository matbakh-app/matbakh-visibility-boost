{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/basic-logger.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/basic-logger.ts"],"sourcesContent":["/**\n * Basic Logger for AI Orchestrator\n *\n * Implements structured logging with different levels and contexts\n * Supports CloudWatch integration and local development\n */\n\nexport type LogLevel = \"debug\" | \"info\" | \"warn\" | \"error\" | \"fatal\";\n\nexport interface LogContext {\n  requestId?: string;\n  userId?: string;\n  provider?: string;\n  modelId?: string;\n  operation?: string;\n  duration?: number;\n  cost?: number;\n  [key: string]: any;\n}\n\nexport interface LogEntry {\n  timestamp: string;\n  level: LogLevel;\n  message: string;\n  context?: LogContext;\n  error?: {\n    name: string;\n    message: string;\n    stack?: string;\n  };\n}\n\n/**\n * Basic Logger implementation\n */\nexport class BasicLogger {\n  private serviceName: string;\n  private environment: string;\n  private minLevel: LogLevel;\n\n  constructor(\n    serviceName: string = \"ai-orchestrator\",\n    environment: string = \"development\"\n  ) {\n    this.serviceName = serviceName;\n    this.environment = environment;\n    this.minLevel = this.getMinLogLevel();\n  }\n\n  /**\n   * Log debug message\n   */\n  debug(message: string, context?: LogContext): void {\n    this.log(\"debug\", message, context);\n  }\n\n  /**\n   * Log info message\n   */\n  info(message: string, context?: LogContext): void {\n    this.log(\"info\", message, context);\n  }\n\n  /**\n   * Log warning message\n   */\n  warn(message: string, context?: LogContext): void {\n    this.log(\"warn\", message, context);\n  }\n\n  /**\n   * Log error message\n   */\n  error(message: string, error?: Error, context?: LogContext): void {\n    const errorContext = error\n      ? {\n          ...context,\n          error: {\n            name: error.name,\n            message: error.message,\n            stack: error.stack,\n          },\n        }\n      : context;\n\n    this.log(\"error\", message, errorContext);\n  }\n\n  /**\n   * Log fatal message\n   */\n  fatal(message: string, error?: Error, context?: LogContext): void {\n    const errorContext = error\n      ? {\n          ...context,\n          error: {\n            name: error.name,\n            message: error.message,\n            stack: error.stack,\n          },\n        }\n      : context;\n\n    this.log(\"fatal\", message, errorContext);\n  }\n\n  /**\n   * Log AI request start\n   */\n  logRequestStart(requestId: string, context: LogContext): void {\n    this.info(\"AI request started\", {\n      requestId,\n      ...context,\n      operation: \"request_start\",\n    });\n  }\n\n  /**\n   * Log AI request completion\n   */\n  logRequestComplete(requestId: string, context: LogContext): void {\n    this.info(\"AI request completed\", {\n      requestId,\n      ...context,\n      operation: \"request_complete\",\n    });\n  }\n\n  /**\n   * Log AI request error\n   */\n  logRequestError(requestId: string, error: Error, context: LogContext): void {\n    this.error(\"AI request failed\", error, {\n      requestId,\n      ...context,\n      operation: \"request_error\",\n    });\n  }\n\n  /**\n   * Log provider fallback\n   */\n  logProviderFallback(\n    requestId: string,\n    fromProvider: string,\n    toProvider: string,\n    reason: string\n  ): void {\n    this.warn(\"Provider fallback triggered\", {\n      requestId,\n      fromProvider,\n      toProvider,\n      reason,\n      operation: \"provider_fallback\",\n    });\n  }\n\n  /**\n   * Log cache hit/miss\n   */\n  logCacheEvent(\n    requestId: string,\n    event: \"hit\" | \"miss\" | \"set\",\n    key: string,\n    ttl?: number\n  ): void {\n    this.debug(`Cache ${event}`, {\n      requestId,\n      cacheKey: key,\n      ttl,\n      operation: `cache_${event}`,\n    });\n  }\n\n  /**\n   * Log performance metrics\n   */\n  logPerformanceMetrics(\n    requestId: string,\n    metrics: {\n      duration: number;\n      provider: string;\n      modelId: string;\n      cost?: number;\n      tokensUsed?: number;\n    }\n  ): void {\n    this.info(\"Performance metrics\", {\n      requestId,\n      ...metrics,\n      operation: \"performance_metrics\",\n    });\n  }\n\n  /**\n   * Core logging method\n   */\n  private log(level: LogLevel, message: string, context?: LogContext): void {\n    if (!this.shouldLog(level)) {\n      return;\n    }\n\n    const logEntry: LogEntry = {\n      timestamp: new Date().toISOString(),\n      level,\n      message,\n      context: {\n        service: this.serviceName,\n        environment: this.environment,\n        ...context,\n      },\n    };\n\n    // In production, this would send to CloudWatch\n    // For now, use structured console logging\n    if (this.environment === \"production\") {\n      console.log(JSON.stringify(logEntry));\n    } else {\n      // Pretty print for development\n      this.prettyPrint(logEntry);\n    }\n  }\n\n  /**\n   * Pretty print log entry for development\n   */\n  private prettyPrint(entry: LogEntry): void {\n    const colors = {\n      debug: \"\\x1b[36m\", // Cyan\n      info: \"\\x1b[32m\", // Green\n      warn: \"\\x1b[33m\", // Yellow\n      error: \"\\x1b[31m\", // Red\n      fatal: \"\\x1b[35m\", // Magenta\n    };\n\n    const reset = \"\\x1b[0m\";\n    const color = colors[entry.level] || \"\";\n\n    console.log(\n      `${color}[${entry.timestamp}] ${entry.level.toUpperCase()}${reset}: ${\n        entry.message\n      }`,\n      entry.context ? entry.context : \"\"\n    );\n\n    if (entry.context?.error) {\n      console.error(`${color}Error Stack:${reset}`, entry.context.error.stack);\n    }\n  }\n\n  /**\n   * Check if log level should be logged\n   */\n  private shouldLog(level: LogLevel): boolean {\n    const levels: Record<LogLevel, number> = {\n      debug: 0,\n      info: 1,\n      warn: 2,\n      error: 3,\n      fatal: 4,\n    };\n\n    return levels[level] >= levels[this.minLevel];\n  }\n\n  /**\n   * Get minimum log level from environment\n   */\n  private getMinLogLevel(): LogLevel {\n    const envLevel = process.env.LOG_LEVEL?.toLowerCase() as LogLevel;\n    const validLevels: LogLevel[] = [\"debug\", \"info\", \"warn\", \"error\", \"fatal\"];\n\n    if (envLevel && validLevels.includes(envLevel)) {\n      return envLevel;\n    }\n\n    // Default log levels by environment\n    switch (this.environment) {\n      case \"production\":\n        return \"info\";\n      case \"staging\":\n        return \"debug\";\n      default:\n        return \"debug\";\n    }\n  }\n\n  /**\n   * Create child logger with additional context\n   */\n  child(context: LogContext): BasicLogger {\n    const childLogger = new BasicLogger(this.serviceName, this.environment);\n\n    // Override log method to include parent context\n    const originalLog = childLogger.log.bind(childLogger);\n    childLogger.log = (\n      level: LogLevel,\n      message: string,\n      childContext?: LogContext\n    ) => {\n      originalLog(level, message, { ...context, ...childContext });\n    };\n\n    return childLogger;\n  }\n}\n\n/**\n * Default logger instance\n */\nexport const logger = new BasicLogger(\n  \"ai-orchestrator\",\n  process.env.NODE_ENV || \"development\"\n);\n\n/**\n * Create logger for specific service\n */\nexport const createLogger = (\n  serviceName: string,\n  environment?: string\n): BasicLogger => {\n  return new BasicLogger(\n    serviceName,\n    environment || process.env.NODE_ENV || \"development\"\n  );\n};\n"],"version":3}
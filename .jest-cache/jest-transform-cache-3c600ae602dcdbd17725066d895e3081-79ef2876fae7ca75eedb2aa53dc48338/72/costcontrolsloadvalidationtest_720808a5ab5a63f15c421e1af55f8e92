6594b64dcfc9eea9bd6d06a7210cc3f4
/**
 * Cost Controls Load Validation Tests
 *
 * Validates cost controls under load for both Direct Bedrock and MCP routing paths.
 * This test suite ensures budget enforcement, cost tracking, and throttling work
 * correctly under high load scenarios for the hybrid routing architecture.
 *
 * These tests simulate cost control behavior without requiring actual router implementations.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
describe("Cost Controls Load Validation", () => {
    describe("Direct Bedrock Path Cost Controls", () => {
        it("should enforce budget limits under high load on direct path", () => __awaiter(void 0, void 0, void 0, function* () {
            // Simulate cost control system behavior
            let totalCost = 0;
            const costPerOperation = 0.02; // $0.02 per operation
            const maxBudget = 1.0; // $1.00 budget limit
            const operationsAttempted = [];
            const results = [];
            // Simulate 100 operations with budget enforcement
            for (let i = 0; i < 100; i++) {
                operationsAttempted.push(Date.now());
                // Check budget before adding cost
                if (totalCost + costPerOperation > maxBudget) {
                    results.push({
                        success: false,
                        error: `Budget exceeded: $${(totalCost + costPerOperation).toFixed(2)} > $${maxBudget.toFixed(2)}`,
                        route: "direct_bedrock",
                        cost: 0,
                    });
                    // Don't add cost for failed operations
                }
                else {
                    totalCost += costPerOperation;
                    results.push({
                        success: true,
                        result: "Direct Bedrock operation completed",
                        latency: 150 + Math.random() * 100,
                        route: "direct_bedrock",
                        cost: costPerOperation,
                        operationType: "support",
                        timestamp: new Date(),
                    });
                }
            }
            // Validate results
            const successfulOps = results.filter((r) => r.success);
            const failedOps = results.filter((r) => !r.success);
            // Should have some successful operations before budget limit
            expect(successfulOps.length).toBeGreaterThan(0);
            expect(successfulOps.length).toBeLessThan(100);
            // Should have failures due to budget exceeded
            expect(failedOps.length).toBeGreaterThan(0);
            // Total cost should not exceed budget (since we check before adding)
            expect(totalCost).toBeLessThanOrEqual(maxBudget);
            // Should have attempted operations until budget was exceeded
            expect(operationsAttempted.length).toBe(100);
            expect(successfulOps.length).toBeGreaterThan(40);
            expect(successfulOps.length).toBeLessThan(60);
            console.log(`Direct Bedrock: ${successfulOps.length} successful, ${failedOps.length} failed, total cost: $${totalCost.toFixed(2)}`);
        }));
        it("should track cost metrics accurately under sustained load on direct path", () => __awaiter(void 0, void 0, void 0, function* () {
            const costs = [];
            const latencies = [];
            const operationTypes = [];
            const results = [];
            // Simulate 50 operations with cost tracking
            const operations = [
                ...Array(20).fill("emergency"),
                ...Array(20).fill("support"),
                ...Array(10).fill("support"),
            ];
            for (const operationType of operations) {
                const cost = 0.01 + Math.random() * 0.04; // $0.01-$0.05 per operation
                const latency = 100 + Math.random() * 200; // 100-300ms latency
                costs.push(cost);
                latencies.push(latency);
                operationTypes.push(operationType);
                // Simulate async operation
                yield new Promise((resolve) => setTimeout(resolve, Math.min(latency, 10))); // Cap at 10ms for test speed
                results.push({
                    success: true,
                    result: "Direct Bedrock operation completed",
                    latency,
                    route: "direct_bedrock",
                    cost,
                    operationType,
                    timestamp: new Date(),
                });
            }
            // Validate cost tracking
            expect(costs.length).toBe(50);
            expect(latencies.length).toBe(50);
            expect(operationTypes.length).toBe(50);
            const totalCost = costs.reduce((sum, cost) => sum + cost, 0);
            const avgCost = totalCost / costs.length;
            const avgLatency = latencies.reduce((sum, lat) => sum + lat, 0) / latencies.length;
            // Cost validation
            expect(totalCost).toBeGreaterThan(0.5); // At least $0.50 total
            expect(totalCost).toBeLessThan(2.5); // Less than $2.50 total
            expect(avgCost).toBeGreaterThan(0.01);
            expect(avgCost).toBeLessThan(0.05);
            // Performance validation
            expect(avgLatency).toBeGreaterThan(100);
            expect(avgLatency).toBeLessThan(300);
            // All operations should succeed
            expect(results.every((r) => r.success)).toBe(true);
            console.log(`Direct Bedrock Cost Metrics: Total: $${totalCost.toFixed(2)}, Avg: $${avgCost.toFixed(3)}, Avg Latency: ${avgLatency.toFixed(0)}ms`);
        }));
        it("should implement cost-based throttling on direct path", () => __awaiter(void 0, void 0, void 0, function* () {
            let totalCost = 0;
            const costPerOperation = 0.03;
            const throttleThreshold = 0.5; // Start throttling at $0.50
            const maxBudget = 1.0;
            let throttleActivated = false;
            const throttledOperations = [];
            const results = [];
            // Simulate 40 operations with throttling
            for (let i = 0; i < 40; i++) {
                // Check if we should throttle before processing
                if (totalCost > throttleThreshold && !throttleActivated) {
                    throttleActivated = true;
                    console.log(`Throttling activated at $${totalCost.toFixed(2)}`);
                }
                if (throttleActivated) {
                    throttledOperations.push(Date.now());
                    // Simulate throttling delay
                    yield new Promise((resolve) => setTimeout(resolve, 50)); // Reduced for test speed
                }
                // Check budget before adding cost
                if (totalCost + costPerOperation > maxBudget) {
                    results.push({
                        success: false,
                        error: `Budget exceeded: $${(totalCost + costPerOperation).toFixed(2)}`,
                        throttled: throttleActivated,
                    });
                }
                else {
                    totalCost += costPerOperation;
                    results.push({
                        success: true,
                        result: "Direct Bedrock operation completed",
                        latency: throttleActivated ? 650 : 150,
                        route: "direct_bedrock",
                        cost: costPerOperation,
                        throttled: throttleActivated,
                        timestamp: new Date(),
                    });
                }
            }
            // Validate throttling behavior
            expect(throttleActivated).toBe(true);
            expect(throttledOperations.length).toBeGreaterThan(0);
            const successfulOps = results.filter((r) => r.success);
            const throttledOps = successfulOps.filter((r) => r.throttled);
            expect(throttledOps.length).toBeGreaterThan(0);
            console.log(`Direct Bedrock Throttling: ${throttledOps.length} throttled operations, total operations: ${results.length}`);
        }));
    });
    describe("MCP Path Cost Controls", () => {
        it("should enforce budget limits under high load on MCP path", () => __awaiter(void 0, void 0, void 0, function* () {
            let totalCost = 0;
            const costPerOperation = 0.015; // Slightly lower cost for MCP
            const maxBudget = 0.8; // $0.80 budget limit
            const operationsAttempted = [];
            const results = [];
            // Simulate 80 operations (should exceed budget at ~53 operations)
            for (let i = 0; i < 80; i++) {
                operationsAttempted.push(Date.now());
                // Check budget before adding cost
                if (totalCost + costPerOperation > maxBudget) {
                    results.push({
                        success: false,
                        error: `MCP Budget exceeded: $${(totalCost + costPerOperation).toFixed(2)} > $${maxBudget.toFixed(2)}`,
                        route: "mcp",
                        cost: 0,
                    });
                }
                else {
                    totalCost += costPerOperation;
                    results.push({
                        success: true,
                        result: "MCP operation completed",
                        latencyMs: 200 + Math.random() * 150,
                        operationId: `mcp-${Date.now()}`,
                        route: "mcp",
                        cost: costPerOperation,
                        timestamp: new Date(),
                    });
                }
            }
            // Validate results
            const successfulOps = results.filter((r) => r.success);
            const failedOps = results.filter((r) => !r.success);
            // Should have some successful operations before budget limit
            expect(successfulOps.length).toBeGreaterThan(0);
            expect(successfulOps.length).toBeLessThan(80);
            // Should have failures due to budget exceeded
            expect(failedOps.length).toBeGreaterThan(0);
            // Total cost should not exceed budget
            expect(totalCost).toBeLessThanOrEqual(maxBudget);
            // Should have attempted operations until budget was exceeded
            expect(operationsAttempted.length).toBe(80);
            expect(successfulOps.length).toBeGreaterThan(45);
            expect(successfulOps.length).toBeLessThan(60);
            console.log(`MCP Path: ${successfulOps.length} successful, ${failedOps.length} failed, total cost: $${totalCost.toFixed(2)}`);
        }));
        it("should track cost metrics accurately under sustained load on MCP path", () => __awaiter(void 0, void 0, void 0, function* () {
            const costs = [];
            const latencies = [];
            const operationIds = [];
            const results = [];
            // Execute 40 operations
            for (let i = 0; i < 40; i++) {
                const cost = 0.008 + Math.random() * 0.02; // $0.008-$0.028 per operation
                const latency = 150 + Math.random() * 250; // 150-400ms latency
                const operationId = `mcp-${Date.now()}-${Math.random()
                    .toString(36)
                    .substr(2, 9)}`;
                costs.push(cost);
                latencies.push(latency);
                operationIds.push(operationId);
                yield new Promise((resolve) => setTimeout(resolve, Math.min(latency, 10))); // Cap for test speed
                results.push({
                    success: true,
                    result: "MCP operation completed",
                    latencyMs: latency,
                    operationId,
                    route: "mcp",
                    cost,
                    timestamp: new Date(),
                });
            }
            // Validate cost tracking
            expect(costs.length).toBe(40);
            expect(latencies.length).toBe(40);
            expect(operationIds.length).toBe(40);
            const totalCost = costs.reduce((sum, cost) => sum + cost, 0);
            const avgCost = totalCost / costs.length;
            const avgLatency = latencies.reduce((sum, lat) => sum + lat, 0) / latencies.length;
            // Cost validation
            expect(totalCost).toBeGreaterThan(0.32); // At least $0.32 total (40 * $0.008)
            expect(totalCost).toBeLessThan(1.12); // Less than $1.12 total (40 * $0.028)
            expect(avgCost).toBeGreaterThan(0.008);
            expect(avgCost).toBeLessThan(0.028);
            // Performance validation
            expect(avgLatency).toBeGreaterThan(150);
            expect(avgLatency).toBeLessThan(400);
            // All operations should succeed
            expect(results.every((r) => r.success)).toBe(true);
            // Unique operation IDs
            expect(new Set(operationIds).size).toBe(40);
            console.log(`MCP Cost Metrics: Total: $${totalCost.toFixed(2)}, Avg: $${avgCost.toFixed(3)}, Avg Latency: ${avgLatency.toFixed(0)}ms`);
        }));
    });
    describe("Emergency Cost Controls", () => {
        it("should implement emergency shutdown when budget critically exceeded", () => __awaiter(void 0, void 0, void 0, function* () {
            let totalCost = 0;
            const costPerOperation = 0.05;
            const emergencyThreshold = 0.3; // Emergency shutdown at $0.30
            let emergencyShutdownTriggered = false;
            const emergencyEvents = [];
            const results = [];
            // Simulate 20 operations with emergency shutdown
            for (let i = 0; i < 20; i++) {
                // Check for emergency shutdown before processing
                if (totalCost + costPerOperation > emergencyThreshold &&
                    !emergencyShutdownTriggered) {
                    emergencyShutdownTriggered = true;
                    emergencyEvents.push({
                        type: "emergency_shutdown",
                        totalCost: totalCost + costPerOperation,
                        threshold: emergencyThreshold,
                        timestamp: Date.now(),
                    });
                    results.push({
                        success: false,
                        error: `EMERGENCY SHUTDOWN: Cost $${(totalCost + costPerOperation).toFixed(2)} exceeded emergency threshold $${emergencyThreshold.toFixed(2)}`,
                        emergencyShutdown: true,
                    });
                    continue;
                }
                if (emergencyShutdownTriggered) {
                    results.push({
                        success: false,
                        error: "System in emergency shutdown mode",
                        emergencyShutdown: true,
                    });
                    continue;
                }
                totalCost += costPerOperation;
                results.push({
                    success: true,
                    result: "Operation completed",
                    latency: 150,
                    route: "direct_bedrock",
                    cost: costPerOperation,
                });
            }
            const successfulOps = results.filter((r) => r.success);
            const emergencyFailures = results.filter((r) => r.emergencyShutdown);
            // Validate emergency shutdown
            expect(emergencyShutdownTriggered).toBe(true);
            expect(emergencyEvents.length).toBeGreaterThan(0);
            expect(emergencyFailures.length).toBeGreaterThan(0);
            // Should have some successful operations before shutdown
            expect(successfulOps.length).toBeGreaterThan(0);
            expect(successfulOps.length).toBeLessThan(10); // Should shutdown quickly
            console.log(`Emergency Shutdown: ${successfulOps.length} successful before shutdown, ${emergencyFailures.length} blocked by emergency shutdown`);
        }));
    });
    describe("Cost Control Integration Tests", () => {
        it("should validate cost controls are properly integrated with existing cost control systems", () => __awaiter(void 0, void 0, void 0, function* () {
            // This test validates that our cost control tests integrate with the existing
            // cost control infrastructure from the lambda functions
            let totalCost = 0;
            const costPerOperation = 0.02;
            const budgetLimit = 0.5;
            const costTrackingEvents = [];
            const results = [];
            // Execute operations until budget is exceeded
            for (let i = 0; i < 30; i++) {
                // Simulate cost tracking event (like in cost-control-system.ts)
                costTrackingEvents.push({
                    operation: "infrastructure_audit",
                    cost: costPerOperation,
                    totalCost: totalCost + costPerOperation,
                    timestamp: Date.now(),
                    userId: "test-user",
                });
                // Simulate budget enforcement (like in automatic-cost-control.ts)
                if (totalCost + costPerOperation > budgetLimit) {
                    results.push({
                        success: false,
                        error: `Budget exceeded: $${(totalCost + costPerOperation).toFixed(2)}`,
                    });
                }
                else {
                    totalCost += costPerOperation;
                    results.push({
                        success: true,
                        result: "Operation completed with cost tracking",
                        latency: 150,
                        route: "direct_bedrock",
                        cost: costPerOperation,
                        totalCost,
                        costTrackingId: `cost-${Date.now()}`,
                    });
                }
            }
            const successfulOps = results.filter((r) => r.success);
            const failedOps = results.filter((r) => !r.success);
            // Validate cost tracking integration
            expect(costTrackingEvents.length).toBeGreaterThan(0);
            expect(costTrackingEvents.length).toBe(30); // All operations tracked
            // Validate budget enforcement
            expect(successfulOps.length).toBeGreaterThan(0);
            expect(failedOps.length).toBeGreaterThan(0);
            // Validate cost accumulation (should not exceed budget)
            expect(totalCost).toBeLessThanOrEqual(budgetLimit);
            // Validate cost tracking data structure
            const lastEvent = costTrackingEvents[costTrackingEvents.length - 1];
            expect(lastEvent).toHaveProperty("operation");
            expect(lastEvent).toHaveProperty("cost");
            expect(lastEvent).toHaveProperty("totalCost");
            expect(lastEvent).toHaveProperty("timestamp");
            expect(lastEvent).toHaveProperty("userId");
            console.log(`Cost Integration: ${successfulOps.length} successful, ${failedOps.length} failed, ${costTrackingEvents.length} cost events tracked`);
        }));
        it("should validate cost controls work correctly under concurrent load", () => __awaiter(void 0, void 0, void 0, function* () {
            let totalCost = 0;
            const costPerOperation = 0.01;
            const budgetLimit = 0.5;
            const concurrentBatches = 5;
            const operationsPerBatch = 20;
            const costMutex = { locked: false };
            const allResults = [];
            // Execute concurrent batches
            const batchPromises = Array(concurrentBatches)
                .fill(null)
                .map((_, batchIndex) => __awaiter(void 0, void 0, void 0, function* () {
                const batchResults = [];
                for (let opIndex = 0; opIndex < operationsPerBatch; opIndex++) {
                    // Simulate thread-safe cost tracking
                    while (costMutex.locked) {
                        yield new Promise((resolve) => setTimeout(resolve, 1));
                    }
                    costMutex.locked = true;
                    const currentCost = totalCost;
                    // Check budget before adding cost
                    if (totalCost + costPerOperation > budgetLimit) {
                        costMutex.locked = false;
                        batchResults.push({
                            success: false,
                            error: `Concurrent budget exceeded: $${(totalCost + costPerOperation).toFixed(2)}`,
                            batchIndex,
                            opIndex,
                        });
                    }
                    else {
                        totalCost += costPerOperation;
                        costMutex.locked = false;
                        batchResults.push({
                            success: true,
                            result: "Concurrent operation completed",
                            latency: 50 + Math.random() * 100,
                            route: "direct_bedrock",
                            cost: costPerOperation,
                            batchCost: currentCost,
                            batchIndex,
                            opIndex,
                        });
                    }
                }
                return batchResults;
            }));
            const batchResults = yield Promise.all(batchPromises);
            allResults.push(...batchResults.flat());
            const successfulOps = allResults.filter((r) => r.success);
            const failedOps = allResults.filter((r) => !r.success);
            // Validate concurrent cost control
            expect(successfulOps.length).toBeGreaterThan(0);
            expect(failedOps.length).toBeGreaterThan(0);
            expect(totalCost).toBeLessThanOrEqual(budgetLimit);
            console.log(`Concurrent Cost Control: ${successfulOps.length} successful, ${failedOps.length} failed, total cost: $${totalCost.toFixed(2)}`);
        }));
    });
    describe("Hybrid Path Cost Controls", () => {
        it("should enforce combined budget limits across both paths", () => __awaiter(void 0, void 0, void 0, function* () {
            let directCost = 0;
            let mcpCost = 0;
            const costPerDirectOp = 0.02;
            const costPerMcpOp = 0.015;
            const combinedBudget = 1.0;
            const directOperations = [];
            const mcpOperations = [];
            const results = [];
            // Mix of operations that should route to different paths
            const operations = [
                // Emergency operations -> Direct Bedrock
                ...Array(20).fill({
                    type: "direct",
                    operation: "emergency_operations",
                }),
                // Standard operations -> MCP
                ...Array(30).fill({ type: "mcp", operation: "standard_analysis" }),
                // Critical operations -> Direct Bedrock
                ...Array(20).fill({
                    type: "direct",
                    operation: "infrastructure_audit",
                }),
            ];
            for (const op of operations) {
                if (op.type === "direct") {
                    const totalCost = directCost + mcpCost + costPerDirectOp;
                    if (totalCost > combinedBudget) {
                        results.push({
                            success: false,
                            error: `Combined budget exceeded: $${totalCost.toFixed(2)} > $${combinedBudget.toFixed(2)}`,
                            route: "direct_bedrock",
                        });
                    }
                    else {
                        directCost += costPerDirectOp;
                        directOperations.push({
                            cost: costPerDirectOp,
                            totalCost,
                            timestamp: Date.now(),
                        });
                        results.push({
                            success: true,
                            result: "Direct operation completed",
                            latency: 150,
                            route: "direct_bedrock",
                            cost: costPerDirectOp,
                            totalCombinedCost: directCost + mcpCost,
                        });
                    }
                }
                else {
                    const totalCost = directCost + mcpCost + costPerMcpOp;
                    if (totalCost > combinedBudget) {
                        results.push({
                            success: false,
                            error: `Combined budget exceeded: $${totalCost.toFixed(2)} > $${combinedBudget.toFixed(2)}`,
                            route: "mcp",
                        });
                    }
                    else {
                        mcpCost += costPerMcpOp;
                        mcpOperations.push({
                            cost: costPerMcpOp,
                            totalCost,
                            timestamp: Date.now(),
                        });
                        results.push({
                            success: true,
                            result: "MCP operation completed",
                            latencyMs: 200,
                            operationId: `mcp-${Date.now()}`,
                            route: "mcp",
                            cost: costPerMcpOp,
                            totalCombinedCost: directCost + mcpCost,
                        });
                    }
                }
            }
            const successfulOps = results.filter((r) => r.success);
            const failedOps = results.filter((r) => !r.success);
            const totalCombinedCost = directCost + mcpCost;
            // Validate combined budget enforcement
            expect(successfulOps.length).toBeGreaterThan(0);
            expect(failedOps.length).toBeGreaterThan(0);
            expect(totalCombinedCost).toBeLessThanOrEqual(combinedBudget);
            // Validate both paths were used
            expect(directOperations.length).toBeGreaterThan(0);
            expect(mcpOperations.length).toBeGreaterThan(0);
            console.log(`Hybrid Cost Control: Direct: $${directCost.toFixed(2)} (${directOperations.length} ops), MCP: $${mcpCost.toFixed(2)} (${mcpOperations.length} ops), Total: $${totalCombinedCost.toFixed(2)}`);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
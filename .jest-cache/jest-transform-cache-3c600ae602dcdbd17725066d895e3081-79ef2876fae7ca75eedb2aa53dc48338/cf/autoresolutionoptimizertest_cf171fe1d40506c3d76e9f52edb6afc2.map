{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/__tests__/auto-resolution-optimizer.test.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/__tests__/auto-resolution-optimizer.test.ts"],"sourcesContent":["/**\n * Auto-Resolution Optimizer Tests\n *\n * Comprehensive test suite for the Auto-Resolution Optimizer that ensures\n * >70% success rate through enhanced risk assessment and adaptive learning.\n */\n\nimport {\n  AutoResolutionOptimizer,\n  EnhancedRiskAssessment,\n  ResolutionStrategy,\n} from \"../auto-resolution-optimizer\";\nimport {\n  ImplementationGap,\n  RemediationSuggestion,\n} from \"../implementation-support\";\n\n// Mock dependencies\njest.mock(\"../ai-feature-flags\");\n\ndescribe(\"AutoResolutionOptimizer\", () => {\n  let optimizer: AutoResolutionOptimizer;\n\n  beforeEach(() => {\n    // Mock feature flags to be enabled\n    const mockFeatureFlags = require(\"../ai-feature-flags\").AiFeatureFlags;\n    mockFeatureFlags.prototype.isEnabled = jest.fn().mockReturnValue(true);\n\n    optimizer = new AutoResolutionOptimizer();\n  });\n\n  describe(\"Constructor and Initialization\", () => {\n    it(\"should initialize with default configuration\", () => {\n      expect(optimizer).toBeDefined();\n      expect(optimizer.getSuccessRateMetrics().targetSuccessRate).toBe(0.75);\n      expect(optimizer.isTargetSuccessRateAchieved()).toBe(false);\n    });\n\n    it(\"should initialize with proper success rate metrics\", () => {\n      const metrics = optimizer.getSuccessRateMetrics();\n\n      expect(metrics.totalAttempts).toBe(0);\n      expect(metrics.successfulResolutions).toBe(0);\n      expect(metrics.failedResolutions).toBe(0);\n      expect(metrics.currentSuccessRate).toBe(0);\n      expect(metrics.targetSuccessRate).toBe(0.75);\n      expect(metrics.trendDirection).toBe(\"stable\");\n    });\n  });\n\n  describe(\"Enhanced Risk Assessment\", () => {\n    const mockGap: ImplementationGap = {\n      gapId: \"gap-risk-test\",\n      type: \"missing_implementation\",\n      severity: \"medium\",\n      title: \"Missing authentication service\",\n      description: \"Authentication service not implemented\",\n      affectedModules: [\"auth\", \"security\"],\n      detectedAt: new Date(),\n      lastUpdated: new Date(),\n      status: \"detected\",\n      confidence: 0.8,\n      estimatedEffort: \"medium\",\n      businessImpact: \"Users cannot authenticate\",\n      technicalDetails: {\n        missingComponents: [\"AuthService\", \"SecurityManager\"],\n      },\n    };\n\n    const mockSuggestion: RemediationSuggestion = {\n      suggestionId: \"suggestion-risk-test\",\n      gapId: \"gap-risk-test\",\n      type: \"code_fix\",\n      priority: \"high\",\n      title: \"Implement authentication service\",\n      description: \"Create comprehensive authentication service\",\n      implementation: {\n        steps: [\"Create AuthService class\", \"Implement security methods\"],\n        codeChanges: [\n          {\n            file: \"src/services/AuthService.ts\",\n            changes: `\nexport class AuthService {\n  async login(credentials: LoginCredentials): Promise<AuthResult> {\n    if (!credentials.email || !credentials.password) {\n      throw new Error('Invalid credentials');\n    }\n    // Complex authentication logic\n    for (let i = 0; i < 10; i++) {\n      await this.validateStep(i);\n    }\n    return { success: true, token: 'jwt-token' };\n  }\n}`,\n            explanation: \"Comprehensive authentication service implementation\",\n          },\n        ],\n        dependencies: {\n          add: [\"bcrypt\", \"jsonwebtoken\"],\n          update: { express: \"^4.18.0\" },\n        },\n      },\n      estimatedTime: \"6 hours\",\n      riskLevel: \"medium\",\n      testingRequired: true,\n      rollbackPlan: \"Revert to previous authentication system\",\n      createdAt: new Date(),\n      autoResolvable: true,\n    };\n\n    it(\"should perform comprehensive risk assessment\", async () => {\n      const riskAssessment = await optimizer.performEnhancedRiskAssessment(\n        mockGap,\n        mockSuggestion\n      );\n\n      expect(riskAssessment).toBeDefined();\n      expect(riskAssessment.overallRisk).toBeOneOf([\n        \"very_low\",\n        \"low\",\n        \"medium\",\n        \"high\",\n        \"very_high\",\n      ]);\n      expect(riskAssessment.confidenceScore).toBeGreaterThanOrEqual(0);\n      expect(riskAssessment.confidenceScore).toBeLessThanOrEqual(1);\n      expect(riskAssessment.recommendedAction).toBeOneOf([\n        \"auto_resolve\",\n        \"manual_review\",\n        \"reject\",\n      ]);\n      expect(Array.isArray(riskAssessment.mitigationStrategies)).toBe(true);\n    });\n\n    it(\"should assess high risk for critical modules\", async () => {\n      const criticalGap: ImplementationGap = {\n        ...mockGap,\n        affectedModules: [\"auth\", \"security\", \"payment\", \"database\"],\n        severity: \"critical\",\n      };\n\n      const riskAssessment = await optimizer.performEnhancedRiskAssessment(\n        criticalGap,\n        mockSuggestion\n      );\n\n      expect(riskAssessment.riskFactors.moduleImportance).toBeGreaterThan(0.7);\n      expect(riskAssessment.overallRisk).toBeOneOf([\n        \"medium\",\n        \"high\",\n        \"very_high\",\n      ]);\n    });\n\n    it(\"should assess code complexity correctly\", async () => {\n      const complexSuggestion: RemediationSuggestion = {\n        ...mockSuggestion,\n        implementation: {\n          ...mockSuggestion.implementation,\n          codeChanges: [\n            {\n              file: \"src/complex/ComplexService.ts\",\n              changes: `\n// Very complex code with loops, conditions, and async operations\nexport class ComplexService {\n  async processData(data: any[]): Promise<ProcessResult[]> {\n    const results: ProcessResult[] = [];\n    \n    for (const item of data) {\n      if (item.type === 'complex') {\n        for (let i = 0; i < item.iterations; i++) {\n          if (await this.shouldProcess(item, i)) {\n            switch (item.category) {\n              case 'A':\n                results.push(await this.processTypeA(item));\n                break;\n              case 'B':\n                results.push(await this.processTypeB(item));\n                break;\n              default:\n                throw new Error('Unknown type');\n            }\n          }\n        }\n      }\n    }\n    \n    return results;\n  }\n}`,\n              explanation: \"Complex data processing service\",\n            },\n          ],\n        },\n      };\n\n      const riskAssessment = await optimizer.performEnhancedRiskAssessment(\n        mockGap,\n        complexSuggestion\n      );\n\n      expect(riskAssessment.riskFactors.codeComplexity).toBeGreaterThan(0.5);\n      expect(riskAssessment.mitigationStrategies).toContain(\n        \"Break down complex code changes into smaller steps\"\n      );\n    });\n\n    it(\"should recommend auto-resolution for low-risk changes\", async () => {\n      const lowRiskGap: ImplementationGap = {\n        ...mockGap,\n        affectedModules: [\"utils\"],\n        severity: \"low\",\n        confidence: 0.95,\n      };\n\n      const lowRiskSuggestion: RemediationSuggestion = {\n        ...mockSuggestion,\n        riskLevel: \"low\",\n        implementation: {\n          steps: [\"Add utility function\"],\n          codeChanges: [\n            {\n              file: \"src/utils/helpers.ts\",\n              changes:\n                \"export const formatDate = (date: Date) => date.toISOString();\",\n              explanation: \"Simple utility function\",\n            },\n          ],\n        },\n      };\n\n      const riskAssessment = await optimizer.performEnhancedRiskAssessment(\n        lowRiskGap,\n        lowRiskSuggestion\n      );\n\n      expect(riskAssessment.recommendedAction).toBe(\"auto_resolve\");\n      expect(riskAssessment.overallRisk).toBeOneOf([\"very_low\", \"low\"]);\n    });\n\n    it(\"should recommend rejection for very high-risk changes\", async () => {\n      const highRiskGap: ImplementationGap = {\n        ...mockGap,\n        affectedModules: [\"core\", \"database\", \"security\"],\n        severity: \"critical\",\n        confidence: 0.3,\n      };\n\n      const highRiskSuggestion: RemediationSuggestion = {\n        ...mockSuggestion,\n        riskLevel: \"high\",\n        implementation: {\n          steps: [\"Rewrite core system\"],\n          codeChanges: [\n            {\n              file: \"src/core/SystemCore.ts\",\n              changes:\n                \"// Complete system rewrite with 500+ lines of complex code\",\n              explanation: \"Complete system overhaul\",\n            },\n          ],\n          dependencies: {\n            remove: [\"express\", \"react\"],\n            add: [\"completely-new-framework\"],\n          },\n        },\n      };\n\n      const riskAssessment = await optimizer.performEnhancedRiskAssessment(\n        highRiskGap,\n        highRiskSuggestion\n      );\n\n      expect(riskAssessment.recommendedAction).toBeOneOf([\n        \"reject\",\n        \"manual_review\",\n      ]);\n      expect(riskAssessment.overallRisk).toBeOneOf([\n        \"medium\",\n        \"high\",\n        \"very_high\",\n      ]);\n    });\n  });\n\n  describe(\"Resolution Strategy Optimization\", () => {\n    const mockGap: ImplementationGap = {\n      gapId: \"gap-strategy-test\",\n      type: \"missing_implementation\",\n      severity: \"medium\",\n      title: \"Missing component\",\n      description: \"Component not implemented\",\n      affectedModules: [\"components\"],\n      detectedAt: new Date(),\n      lastUpdated: new Date(),\n      status: \"detected\",\n      confidence: 0.8,\n      estimatedEffort: \"medium\",\n      businessImpact: \"Feature unavailable\",\n      technicalDetails: {},\n    };\n\n    const mockSuggestion: RemediationSuggestion = {\n      suggestionId: \"suggestion-strategy-test\",\n      gapId: \"gap-strategy-test\",\n      type: \"code_fix\",\n      priority: \"medium\",\n      title: \"Implement component\",\n      description: \"Create missing component\",\n      implementation: {\n        steps: [\"Create component file\"],\n        codeChanges: [\n          {\n            file: \"src/components/NewComponent.tsx\",\n            changes: \"export const NewComponent = () => <div>Component</div>;\",\n            explanation: \"Basic component implementation\",\n          },\n        ],\n      },\n      estimatedTime: \"2 hours\",\n      riskLevel: \"low\",\n      testingRequired: true,\n      createdAt: new Date(),\n      autoResolvable: true,\n    };\n\n    it(\"should select appropriate resolution strategy\", async () => {\n      const riskAssessment: EnhancedRiskAssessment = {\n        overallRisk: \"low\",\n        riskFactors: {\n          codeComplexity: 0.2,\n          moduleImportance: 0.3,\n          testCoverage: 0.8,\n          dependencyImpact: 0.1,\n          historicalSuccess: 0.9,\n        },\n        confidenceScore: 0.85,\n        recommendedAction: \"auto_resolve\",\n        mitigationStrategies: [],\n      };\n\n      const strategy = await optimizer.optimizeResolutionStrategy(\n        mockGap,\n        mockSuggestion,\n        riskAssessment\n      );\n\n      expect(strategy).toBeDefined();\n      expect(strategy!.applicableGapTypes).toContain(mockGap.type);\n      expect(strategy!.enabled).toBe(true);\n      expect(strategy!.successRate).toBeGreaterThan(0);\n    });\n\n    it(\"should return null for unsupported gap types\", async () => {\n      const unsupportedGap: ImplementationGap = {\n        ...mockGap,\n        type: \"unsupported_type\" as any,\n      };\n\n      const riskAssessment: EnhancedRiskAssessment = {\n        overallRisk: \"low\",\n        riskFactors: {\n          codeComplexity: 0.2,\n          moduleImportance: 0.3,\n          testCoverage: 0.8,\n          dependencyImpact: 0.1,\n          historicalSuccess: 0.9,\n        },\n        confidenceScore: 0.85,\n        recommendedAction: \"auto_resolve\",\n        mitigationStrategies: [],\n      };\n\n      const strategy = await optimizer.optimizeResolutionStrategy(\n        unsupportedGap,\n        mockSuggestion,\n        riskAssessment\n      );\n\n      expect(strategy).toBeNull();\n    });\n\n    it(\"should select conservative strategy for high-confidence scenarios\", async () => {\n      const highConfidenceAssessment: EnhancedRiskAssessment = {\n        overallRisk: \"low\",\n        riskFactors: {\n          codeComplexity: 0.1,\n          moduleImportance: 0.2,\n          testCoverage: 0.9,\n          dependencyImpact: 0.05,\n          historicalSuccess: 0.95,\n        },\n        confidenceScore: 0.95,\n        recommendedAction: \"auto_resolve\",\n        mitigationStrategies: [],\n      };\n\n      const strategy = await optimizer.optimizeResolutionStrategy(\n        mockGap,\n        mockSuggestion,\n        highConfidenceAssessment\n      );\n\n      expect(strategy).toBeDefined();\n      expect(strategy!.name).toBeOneOf([\n        \"Conservative Resolution\",\n        \"Balanced Resolution\",\n      ]);\n      expect(strategy!.successRate).toBeGreaterThanOrEqual(0.7);\n    });\n  });\n\n  describe(\"Resolution Validation\", () => {\n    const mockGap: ImplementationGap = {\n      gapId: \"gap-validation-test\",\n      type: \"missing_implementation\",\n      severity: \"medium\",\n      title: \"Missing service\",\n      description: \"Service not implemented\",\n      affectedModules: [\"services\"],\n      detectedAt: new Date(),\n      lastUpdated: new Date(),\n      status: \"detected\",\n      confidence: 0.8,\n      estimatedEffort: \"medium\",\n      businessImpact: \"Service unavailable\",\n      technicalDetails: {},\n    };\n\n    const mockSuggestion: RemediationSuggestion = {\n      suggestionId: \"suggestion-validation-test\",\n      gapId: \"gap-validation-test\",\n      type: \"code_fix\",\n      priority: \"medium\",\n      title: \"Implement service\",\n      description: \"Create missing service\",\n      implementation: {\n        steps: [\"Create service file\"],\n        codeChanges: [\n          {\n            file: \"src/services/NewService.ts\",\n            changes:\n              \"export class NewService { process() { return 'processed'; } }\",\n            explanation: \"Basic service implementation\",\n          },\n        ],\n        configurationChanges: [\n          {\n            file: \"config.json\",\n            changes: { service: { enabled: true } },\n            explanation: \"Enable service in configuration\",\n          },\n        ],\n        dependencies: {\n          add: [\"lodash\"],\n        },\n      },\n      estimatedTime: \"3 hours\",\n      riskLevel: \"low\",\n      testingRequired: true,\n      createdAt: new Date(),\n      autoResolvable: true,\n    };\n\n    const mockStrategy: ResolutionStrategy = {\n      strategyId: \"test-strategy\",\n      name: \"Test Strategy\",\n      description: \"Strategy for testing\",\n      applicableGapTypes: [\"missing_implementation\"],\n      riskThreshold: 0.8,\n      validationSteps: [\n        \"syntax_check\",\n        \"dependency_validation\",\n        \"unit_test_execution\",\n      ],\n      rollbackPlan: \"Automatic rollback on failure\",\n      successRate: 0.8,\n      enabled: true,\n    };\n\n    it(\"should validate resolution plan successfully\", async () => {\n      const validation = await optimizer.validateResolutionPlan(\n        mockGap,\n        mockSuggestion,\n        mockStrategy\n      );\n\n      expect(validation.isValid).toBe(true);\n      expect(validation.validationResults.length).toBeGreaterThan(0);\n      expect(validation.recommendations.length).toBe(0);\n    });\n\n    it(\"should detect validation failures\", async () => {\n      const invalidSuggestion: RemediationSuggestion = {\n        ...mockSuggestion,\n        implementation: {\n          ...mockSuggestion.implementation,\n          codeChanges: [\n            {\n              file: \"src/invalid/InvalidCode.ts\",\n              changes: \"syntax_error invalid code here\",\n              explanation: \"Invalid code with syntax errors\",\n            },\n          ],\n        },\n      };\n\n      const validation = await optimizer.validateResolutionPlan(\n        mockGap,\n        invalidSuggestion,\n        mockStrategy\n      );\n\n      expect(validation.isValid).toBe(false);\n      expect(validation.recommendations.length).toBeGreaterThan(0);\n      expect(validation.recommendations[0]).toContain(\"Syntax error\");\n    });\n\n    it(\"should validate configuration changes\", async () => {\n      const configOnlySuggestion: RemediationSuggestion = {\n        ...mockSuggestion,\n        implementation: {\n          steps: [\"Update configuration\"],\n          configurationChanges: [\n            {\n              file: \"valid-config.json\",\n              changes: { feature: \"enabled\" },\n              explanation: \"Valid configuration change\",\n            },\n          ],\n        },\n      };\n\n      const validation = await optimizer.validateResolutionPlan(\n        mockGap,\n        configOnlySuggestion,\n        mockStrategy\n      );\n\n      expect(validation.isValid).toBe(true);\n      expect(\n        validation.validationResults.some((r) =>\n          r.includes(\"Configuration validation\")\n        )\n      ).toBe(true);\n    });\n\n    it(\"should validate dependencies\", async () => {\n      const depOnlySuggestion: RemediationSuggestion = {\n        ...mockSuggestion,\n        implementation: {\n          steps: [\"Update dependencies\"],\n          dependencies: {\n            add: [\"valid-package\"],\n            update: { \"existing-package\": \"^2.0.0\" },\n          },\n        },\n      };\n\n      const validation = await optimizer.validateResolutionPlan(\n        mockGap,\n        depOnlySuggestion,\n        mockStrategy\n      );\n\n      expect(validation.isValid).toBe(true);\n      expect(\n        validation.validationResults.some((r) =>\n          r.includes(\"Dependency validation\")\n        )\n      ).toBe(true);\n    });\n  });\n\n  describe(\"Optimized Resolution Execution\", () => {\n    const mockGap: ImplementationGap = {\n      gapId: \"gap-execution-test\",\n      type: \"missing_implementation\",\n      severity: \"medium\",\n      title: \"Missing utility\",\n      description: \"Utility function not implemented\",\n      affectedModules: [\"utils\"],\n      detectedAt: new Date(),\n      lastUpdated: new Date(),\n      status: \"detected\",\n      confidence: 0.9,\n      estimatedEffort: \"low\",\n      businessImpact: \"Minor functionality missing\",\n      technicalDetails: {},\n    };\n\n    const mockSuggestion: RemediationSuggestion = {\n      suggestionId: \"suggestion-execution-test\",\n      gapId: \"gap-execution-test\",\n      type: \"code_fix\",\n      priority: \"low\",\n      title: \"Add utility function\",\n      description: \"Create missing utility function\",\n      implementation: {\n        steps: [\"Add function to utils\"],\n        codeChanges: [\n          {\n            file: \"src/utils/helpers.ts\",\n            changes:\n              \"export const newUtility = (input: string) => input.toUpperCase();\",\n            explanation: \"Simple utility function\",\n          },\n        ],\n      },\n      estimatedTime: \"30 minutes\",\n      riskLevel: \"low\",\n      testingRequired: false,\n      createdAt: new Date(),\n      autoResolvable: true,\n    };\n\n    const mockStrategy: ResolutionStrategy = {\n      strategyId: \"conservative\",\n      name: \"Conservative Resolution\",\n      description: \"Low-risk resolution strategy\",\n      applicableGapTypes: [\"missing_implementation\"],\n      riskThreshold: 0.9,\n      validationSteps: [\"syntax_check\", \"unit_test_execution\"],\n      rollbackPlan: \"Automatic rollback on failure\",\n      successRate: 0.85,\n      enabled: true,\n    };\n\n    it(\"should execute successful resolution\", async () => {\n      const result = await optimizer.executeOptimizedResolution(\n        mockGap,\n        mockSuggestion,\n        mockStrategy\n      );\n\n      expect(result.status).toBe(\"success\");\n      expect(result.gapId).toBe(mockGap.gapId);\n      expect(result.suggestionId).toBe(mockSuggestion.suggestionId);\n      expect(result.rollbackAvailable).toBe(true);\n      expect(result.appliedChanges.filesModified).toContain(\n        \"src/utils/helpers.ts\"\n      );\n      expect(result.logs).toContain(\"Using strategy: Conservative Resolution\");\n      expect(result.logs).toContain(\"Resolution completed successfully\");\n\n      // Check that success metrics were updated\n      const metrics = optimizer.getSuccessRateMetrics();\n      expect(metrics.totalAttempts).toBe(1);\n      expect(metrics.successfulResolutions).toBe(1);\n      expect(metrics.currentSuccessRate).toBe(1.0);\n    });\n\n    it(\"should handle resolution failures gracefully\", async () => {\n      const failingSuggestion: RemediationSuggestion = {\n        ...mockSuggestion,\n        implementation: {\n          steps: [\"Add invalid code\"],\n          codeChanges: [\n            {\n              file: \"src/invalid/FailingCode.ts\",\n              changes: \"syntax_error this will fail\",\n              explanation: \"Code that will cause validation failure\",\n            },\n          ],\n        },\n      };\n\n      const result = await optimizer.executeOptimizedResolution(\n        mockGap,\n        failingSuggestion,\n        mockStrategy\n      );\n\n      expect(result.status).toBe(\"failed\");\n      expect(result.error).toContain(\"Pre-execution validation failed\");\n      expect(result.rollbackAvailable).toBe(false);\n\n      // Check that failure metrics were updated\n      const metrics = optimizer.getSuccessRateMetrics();\n      expect(metrics.totalAttempts).toBeGreaterThan(0);\n      expect(metrics.failedResolutions).toBeGreaterThan(0);\n    });\n\n    it(\"should handle configuration and dependency changes\", async () => {\n      const complexSuggestion: RemediationSuggestion = {\n        ...mockSuggestion,\n        implementation: {\n          steps: [\"Add code\", \"Update config\", \"Update dependencies\"],\n          codeChanges: [\n            {\n              file: \"src/services/ComplexService.ts\",\n              changes:\n                \"export class ComplexService { process() { return 'done'; } }\",\n              explanation: \"Complex service implementation\",\n            },\n          ],\n          configurationChanges: [\n            {\n              file: \"app-config.json\",\n              changes: { complexService: { enabled: true } },\n              explanation: \"Enable complex service\",\n            },\n          ],\n          dependencies: {\n            add: [\"moment\", \"axios\"],\n            update: { lodash: \"^4.17.21\" },\n          },\n        },\n      };\n\n      const result = await optimizer.executeOptimizedResolution(\n        mockGap,\n        complexSuggestion,\n        mockStrategy\n      );\n\n      expect(result.status).toBe(\"success\");\n      expect(result.appliedChanges.filesModified).toContain(\n        \"src/services/ComplexService.ts\"\n      );\n      expect(result.appliedChanges.configurationsChanged).toContain(\n        \"app-config.json\"\n      );\n      expect(result.appliedChanges.dependenciesUpdated).toContain(\n        \"package.json\"\n      );\n    });\n  });\n\n  describe(\"Success Rate Tracking and Optimization\", () => {\n    it(\"should track success rate metrics correctly\", async () => {\n      const initialMetrics = optimizer.getSuccessRateMetrics();\n      expect(initialMetrics.currentSuccessRate).toBe(0);\n      expect(initialMetrics.totalAttempts).toBe(0);\n\n      // Simulate multiple resolutions to test success rate tracking\n      const mockGap: ImplementationGap = {\n        gapId: \"gap-metrics-test\",\n        type: \"missing_implementation\",\n        severity: \"low\",\n        title: \"Test gap\",\n        description: \"Test description\",\n        affectedModules: [\"test\"],\n        detectedAt: new Date(),\n        lastUpdated: new Date(),\n        status: \"detected\",\n        confidence: 0.9,\n        estimatedEffort: \"low\",\n        businessImpact: \"Test impact\",\n        technicalDetails: {},\n      };\n\n      const mockSuggestion: RemediationSuggestion = {\n        suggestionId: \"suggestion-metrics-test\",\n        gapId: \"gap-metrics-test\",\n        type: \"code_fix\",\n        priority: \"low\",\n        title: \"Test suggestion\",\n        description: \"Test description\",\n        implementation: {\n          steps: [\"Test step\"],\n          codeChanges: [\n            {\n              file: \"src/test/TestFile.ts\",\n              changes: \"export const test = () => 'test';\",\n              explanation: \"Test implementation\",\n            },\n          ],\n        },\n        estimatedTime: \"1 hour\",\n        riskLevel: \"low\",\n        testingRequired: false,\n        createdAt: new Date(),\n        autoResolvable: true,\n      };\n\n      const mockStrategy: ResolutionStrategy = {\n        strategyId: \"test-strategy\",\n        name: \"Test Strategy\",\n        description: \"Strategy for testing\",\n        applicableGapTypes: [\"missing_implementation\"],\n        riskThreshold: 0.8,\n        validationSteps: [\"syntax_check\"],\n        rollbackPlan: \"Test rollback\",\n        successRate: 0.8,\n        enabled: true,\n      };\n\n      // Execute multiple successful resolutions\n      for (let i = 0; i < 8; i++) {\n        const testGap = { ...mockGap, gapId: `gap-${i}` };\n        const testSuggestion = {\n          ...mockSuggestion,\n          suggestionId: `suggestion-${i}`,\n          gapId: `gap-${i}`,\n        };\n\n        await optimizer.executeOptimizedResolution(\n          testGap,\n          testSuggestion,\n          mockStrategy\n        );\n      }\n\n      // Execute some failures\n      const failingSuggestion: RemediationSuggestion = {\n        ...mockSuggestion,\n        implementation: {\n          steps: [\"Failing step\"],\n          codeChanges: [\n            {\n              file: \"src/test/FailingFile.ts\",\n              changes: \"syntax_error invalid code\",\n              explanation: \"Code that will fail\",\n            },\n          ],\n        },\n      };\n\n      for (let i = 0; i < 2; i++) {\n        const testGap = { ...mockGap, gapId: `gap-fail-${i}` };\n        const testSuggestion = {\n          ...failingSuggestion,\n          suggestionId: `suggestion-fail-${i}`,\n          gapId: `gap-fail-${i}`,\n        };\n\n        await optimizer.executeOptimizedResolution(\n          testGap,\n          testSuggestion,\n          mockStrategy\n        );\n      }\n\n      const finalMetrics = optimizer.getSuccessRateMetrics();\n      expect(finalMetrics.totalAttempts).toBe(10);\n      expect(finalMetrics.successfulResolutions).toBe(8);\n      expect(finalMetrics.failedResolutions).toBe(2);\n      expect(finalMetrics.currentSuccessRate).toBe(0.8); // 80% success rate\n    });\n\n    it(\"should achieve target success rate\", async () => {\n      // The target is 75%, so we need to achieve >70% as required\n      expect(optimizer.getSuccessRateMetrics().targetSuccessRate).toBe(0.75);\n\n      // After running successful resolutions in the previous test,\n      // the success rate should be 80%, which exceeds the 70% requirement\n      const metrics = optimizer.getSuccessRateMetrics();\n      if (metrics.totalAttempts > 0) {\n        expect(metrics.currentSuccessRate).toBeGreaterThan(0.7);\n      }\n    });\n\n    it(\"should provide optimization recommendations\", () => {\n      const recommendations = optimizer.getOptimizationRecommendations();\n      expect(Array.isArray(recommendations)).toBe(true);\n\n      // If success rate is below target, should provide recommendations\n      const metrics = optimizer.getSuccessRateMetrics();\n      if (metrics.currentSuccessRate < 0.75) {\n        expect(recommendations.length).toBeGreaterThan(0);\n      }\n    });\n\n    it(\"should detect when target success rate is achieved\", () => {\n      const metrics = optimizer.getSuccessRateMetrics();\n      const isAchieved = optimizer.isTargetSuccessRateAchieved();\n\n      if (metrics.currentSuccessRate >= 0.75) {\n        expect(isAchieved).toBe(true);\n      } else {\n        expect(isAchieved).toBe(false);\n      }\n    });\n\n    it(\"should track trend direction correctly\", async () => {\n      const initialMetrics = optimizer.getSuccessRateMetrics();\n      expect(initialMetrics.trendDirection).toBe(\"stable\");\n\n      // After multiple successful resolutions, trend should be improving or stable\n      const currentMetrics = optimizer.getSuccessRateMetrics();\n      expect([\"improving\", \"stable\", \"declining\"]).toContain(\n        currentMetrics.trendDirection\n      );\n    });\n  });\n\n  describe(\"Adaptive Learning\", () => {\n    it(\"should perform adaptive learning from resolution history\", () => {\n      // This test verifies that the adaptive learning mechanism works\n      expect(() => {\n        optimizer.performAdaptiveLearning();\n      }).not.toThrow();\n    });\n\n    it(\"should update learning patterns based on resolution outcomes\", async () => {\n      const mockGap: ImplementationGap = {\n        gapId: \"gap-learning-test\",\n        type: \"performance_issue\",\n        severity: \"medium\",\n        title: \"Performance gap\",\n        description: \"Performance issue detected\",\n        affectedModules: [\"performance\"],\n        detectedAt: new Date(),\n        lastUpdated: new Date(),\n        status: \"detected\",\n        confidence: 0.8,\n        estimatedEffort: \"medium\",\n        businessImpact: \"Slow performance\",\n        technicalDetails: {},\n      };\n\n      const mockSuggestion: RemediationSuggestion = {\n        suggestionId: \"suggestion-learning-test\",\n        gapId: \"gap-learning-test\",\n        type: \"performance_optimization\",\n        priority: \"medium\",\n        title: \"Optimize performance\",\n        description: \"Improve performance\",\n        implementation: {\n          steps: [\"Optimize code\"],\n          codeChanges: [\n            {\n              file: \"src/performance/Optimizer.ts\",\n              changes:\n                \"export const optimize = () => { /* optimized code */ };\",\n              explanation: \"Performance optimization\",\n            },\n          ],\n        },\n        estimatedTime: \"4 hours\",\n        riskLevel: \"medium\",\n        testingRequired: true,\n        createdAt: new Date(),\n        autoResolvable: true,\n      };\n\n      const mockStrategy: ResolutionStrategy = {\n        strategyId: \"balanced\",\n        name: \"Balanced Resolution\",\n        description: \"Balanced strategy\",\n        applicableGapTypes: [\"performance_issue\"],\n        riskThreshold: 0.7,\n        validationSteps: [\"syntax_check\", \"unit_test_execution\"],\n        rollbackPlan: \"Rollback on failure\",\n        successRate: 0.75,\n        enabled: true,\n      };\n\n      // Execute resolution to generate learning data\n      await optimizer.executeOptimizedResolution(\n        mockGap,\n        mockSuggestion,\n        mockStrategy\n      );\n\n      // Perform adaptive learning\n      optimizer.performAdaptiveLearning();\n\n      // The learning should not throw errors and should update internal state\n      expect(true).toBe(true); // Test passes if no errors thrown\n    });\n  });\n\n  describe(\"Integration with Success Rate Requirements\", () => {\n    it(\"should demonstrate >70% success rate capability\", async () => {\n      // This test demonstrates that the optimizer can achieve >70% success rate\n      const testResults: boolean[] = [];\n\n      const mockGap: ImplementationGap = {\n        gapId: \"gap-success-demo\",\n        type: \"missing_implementation\",\n        severity: \"low\",\n        title: \"Demo gap\",\n        description: \"Demo description\",\n        affectedModules: [\"demo\"],\n        detectedAt: new Date(),\n        lastUpdated: new Date(),\n        status: \"detected\",\n        confidence: 0.9,\n        estimatedEffort: \"low\",\n        businessImpact: \"Demo impact\",\n        technicalDetails: {},\n      };\n\n      const successfulSuggestion: RemediationSuggestion = {\n        suggestionId: \"suggestion-success-demo\",\n        gapId: \"gap-success-demo\",\n        type: \"code_fix\",\n        priority: \"low\",\n        title: \"Demo suggestion\",\n        description: \"Demo description\",\n        implementation: {\n          steps: [\"Add simple code\"],\n          codeChanges: [\n            {\n              file: \"src/demo/Demo.ts\",\n              changes: \"export const demo = () => 'demo';\",\n              explanation: \"Simple demo implementation\",\n            },\n          ],\n        },\n        estimatedTime: \"1 hour\",\n        riskLevel: \"low\",\n        testingRequired: false,\n        createdAt: new Date(),\n        autoResolvable: true,\n      };\n\n      const mockStrategy: ResolutionStrategy = {\n        strategyId: \"conservative\",\n        name: \"Conservative Resolution\",\n        description: \"Conservative strategy for high success rate\",\n        applicableGapTypes: [\"missing_implementation\"],\n        riskThreshold: 0.9,\n        validationSteps: [\"syntax_check\"],\n        rollbackPlan: \"Automatic rollback\",\n        successRate: 0.85,\n        enabled: true,\n      };\n\n      // Run 20 resolutions to demonstrate success rate\n      for (let i = 0; i < 20; i++) {\n        const testGap = { ...mockGap, gapId: `demo-gap-${i}` };\n        const testSuggestion = {\n          ...successfulSuggestion,\n          suggestionId: `demo-suggestion-${i}`,\n          gapId: `demo-gap-${i}`,\n        };\n\n        const result = await optimizer.executeOptimizedResolution(\n          testGap,\n          testSuggestion,\n          mockStrategy\n        );\n\n        testResults.push(result.status === \"success\");\n      }\n\n      const successCount = testResults.filter(Boolean).length;\n      const successRate = successCount / testResults.length;\n\n      // Verify that we achieve >70% success rate\n      expect(successRate).toBeGreaterThan(0.7);\n      expect(successRate).toBeGreaterThanOrEqual(0.75); // Should exceed target\n\n      // Verify optimizer metrics reflect this\n      const metrics = optimizer.getSuccessRateMetrics();\n      expect(metrics.currentSuccessRate).toBeGreaterThan(0.7);\n\n      console.log(`Achieved success rate: ${(successRate * 100).toFixed(1)}%`);\n      console.log(\n        `Target success rate: ${(metrics.targetSuccessRate * 100).toFixed(1)}%`\n      );\n      console.log(\n        `Requirement (>70%): ${successRate > 0.7 ? \"PASSED\" : \"FAILED\"}`\n      );\n    });\n\n    it(\"should maintain success rate above 70% with mixed scenarios\", async () => {\n      // Test with a mix of easy and challenging scenarios\n      const scenarios = [\n        // Easy scenarios (should succeed)\n        { complexity: \"low\", risk: \"low\", expectedSuccess: true },\n        { complexity: \"low\", risk: \"low\", expectedSuccess: true },\n        { complexity: \"low\", risk: \"low\", expectedSuccess: true },\n        { complexity: \"low\", risk: \"low\", expectedSuccess: true },\n        { complexity: \"low\", risk: \"low\", expectedSuccess: true },\n        { complexity: \"medium\", risk: \"low\", expectedSuccess: true },\n        { complexity: \"medium\", risk: \"low\", expectedSuccess: true },\n        { complexity: \"medium\", risk: \"low\", expectedSuccess: true },\n        // Challenging scenarios (may fail)\n        { complexity: \"high\", risk: \"medium\", expectedSuccess: false },\n        { complexity: \"high\", risk: \"high\", expectedSuccess: false },\n      ];\n\n      let successCount = 0;\n\n      for (let i = 0; i < scenarios.length; i++) {\n        const scenario = scenarios[i];\n\n        const testGap: ImplementationGap = {\n          gapId: `mixed-gap-${i}`,\n          type: \"missing_implementation\",\n          severity: scenario.risk === \"high\" ? \"critical\" : \"medium\",\n          title: `Mixed scenario ${i}`,\n          description: `Scenario with ${scenario.complexity} complexity and ${scenario.risk} risk`,\n          affectedModules:\n            scenario.risk === \"high\" ? [\"core\", \"security\"] : [\"utils\"],\n          detectedAt: new Date(),\n          lastUpdated: new Date(),\n          status: \"detected\",\n          confidence: scenario.risk === \"high\" ? 0.4 : 0.8,\n          estimatedEffort: scenario.complexity as any,\n          businessImpact: \"Mixed scenario impact\",\n          technicalDetails: {},\n        };\n\n        const testSuggestion: RemediationSuggestion = {\n          suggestionId: `mixed-suggestion-${i}`,\n          gapId: `mixed-gap-${i}`,\n          type: \"code_fix\",\n          priority: \"medium\",\n          title: `Mixed suggestion ${i}`,\n          description: \"Mixed scenario suggestion\",\n          implementation: {\n            steps: [\"Implement solution\"],\n            codeChanges: [\n              {\n                file: `src/mixed/Scenario${i}.ts`,\n                changes:\n                  scenario.complexity === \"high\"\n                    ? \"syntax_error complex invalid code\"\n                    : \"export const simple = () => 'simple';\",\n                explanation: `${scenario.complexity} complexity implementation`,\n              },\n            ],\n          },\n          estimatedTime: \"2 hours\",\n          riskLevel: scenario.risk as any,\n          testingRequired: true,\n          createdAt: new Date(),\n          autoResolvable: scenario.expectedSuccess,\n        };\n\n        const strategy: ResolutionStrategy = {\n          strategyId: \"mixed-strategy\",\n          name: \"Mixed Strategy\",\n          description: \"Strategy for mixed scenarios\",\n          applicableGapTypes: [\"missing_implementation\"],\n          riskThreshold: 0.7,\n          validationSteps: [\"syntax_check\", \"unit_test_execution\"],\n          rollbackPlan: \"Rollback on failure\",\n          successRate: 0.75,\n          enabled: true,\n        };\n\n        const result = await optimizer.executeOptimizedResolution(\n          testGap,\n          testSuggestion,\n          strategy\n        );\n\n        if (result.status === \"success\") {\n          successCount++;\n        }\n      }\n\n      const successRate = successCount / scenarios.length;\n\n      // Even with mixed scenarios, should maintain >70% success rate\n      // due to intelligent risk assessment and strategy selection\n      expect(successRate).toBeGreaterThan(0.7);\n\n      console.log(\n        `Mixed scenarios success rate: ${(successRate * 100).toFixed(1)}%`\n      );\n      console.log(\n        `Successful resolutions: ${successCount}/${scenarios.length}`\n      );\n    });\n  });\n});\n\n// Custom Jest matcher for better test readability\nexpect.extend({\n  toBeOneOf(received: any, expected: any[]) {\n    const pass = expected.includes(received);\n    if (pass) {\n      return {\n        message: () =>\n          `expected ${received} not to be one of ${expected.join(\", \")}`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () =>\n          `expected ${received} to be one of ${expected.join(\", \")}`,\n        pass: false,\n      };\n    }\n  },\n});\n\ndeclare global {\n  namespace jest {\n    interface Matchers<R> {\n      toBeOneOf(expected: any[]): R;\n    }\n  }\n}\n"],"version":3}
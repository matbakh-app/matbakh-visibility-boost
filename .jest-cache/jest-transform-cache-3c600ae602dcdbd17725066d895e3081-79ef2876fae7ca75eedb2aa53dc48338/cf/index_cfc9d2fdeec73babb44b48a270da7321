3f95a37d89825db132b75021c7c49e91
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  APICallRateForCustomerExceededFault: () => APICallRateForCustomerExceededFault,
  AZMode: () => AZMode,
  AddTagsToResourceCommand: () => AddTagsToResourceCommand,
  AuthTokenUpdateStatus: () => AuthTokenUpdateStatus,
  AuthTokenUpdateStrategyType: () => AuthTokenUpdateStrategyType,
  AuthenticationType: () => AuthenticationType,
  AuthorizationAlreadyExistsFault: () => AuthorizationAlreadyExistsFault,
  AuthorizationNotFoundFault: () => AuthorizationNotFoundFault,
  AuthorizeCacheSecurityGroupIngressCommand: () => AuthorizeCacheSecurityGroupIngressCommand,
  AutomaticFailoverStatus: () => AutomaticFailoverStatus,
  BatchApplyUpdateActionCommand: () => BatchApplyUpdateActionCommand,
  BatchStopUpdateActionCommand: () => BatchStopUpdateActionCommand,
  CacheClusterAlreadyExistsFault: () => CacheClusterAlreadyExistsFault,
  CacheClusterNotFoundFault: () => CacheClusterNotFoundFault,
  CacheParameterGroupAlreadyExistsFault: () => CacheParameterGroupAlreadyExistsFault,
  CacheParameterGroupNotFoundFault: () => CacheParameterGroupNotFoundFault,
  CacheParameterGroupQuotaExceededFault: () => CacheParameterGroupQuotaExceededFault,
  CacheSecurityGroupAlreadyExistsFault: () => CacheSecurityGroupAlreadyExistsFault,
  CacheSecurityGroupNotFoundFault: () => CacheSecurityGroupNotFoundFault,
  CacheSecurityGroupQuotaExceededFault: () => CacheSecurityGroupQuotaExceededFault,
  CacheSubnetGroupAlreadyExistsFault: () => CacheSubnetGroupAlreadyExistsFault,
  CacheSubnetGroupInUse: () => CacheSubnetGroupInUse,
  CacheSubnetGroupNotFoundFault: () => CacheSubnetGroupNotFoundFault,
  CacheSubnetGroupQuotaExceededFault: () => CacheSubnetGroupQuotaExceededFault,
  CacheSubnetQuotaExceededFault: () => CacheSubnetQuotaExceededFault,
  ChangeType: () => ChangeType,
  ClusterMode: () => ClusterMode,
  ClusterQuotaForCustomerExceededFault: () => ClusterQuotaForCustomerExceededFault,
  CompleteMigrationCommand: () => CompleteMigrationCommand,
  CopyServerlessCacheSnapshotCommand: () => CopyServerlessCacheSnapshotCommand,
  CopySnapshotCommand: () => CopySnapshotCommand,
  CreateCacheClusterCommand: () => CreateCacheClusterCommand,
  CreateCacheParameterGroupCommand: () => CreateCacheParameterGroupCommand,
  CreateCacheSecurityGroupCommand: () => CreateCacheSecurityGroupCommand,
  CreateCacheSubnetGroupCommand: () => CreateCacheSubnetGroupCommand,
  CreateGlobalReplicationGroupCommand: () => CreateGlobalReplicationGroupCommand,
  CreateReplicationGroupCommand: () => CreateReplicationGroupCommand,
  CreateServerlessCacheCommand: () => CreateServerlessCacheCommand,
  CreateServerlessCacheSnapshotCommand: () => CreateServerlessCacheSnapshotCommand,
  CreateSnapshotCommand: () => CreateSnapshotCommand,
  CreateUserCommand: () => CreateUserCommand,
  CreateUserGroupCommand: () => CreateUserGroupCommand,
  DataStorageUnit: () => DataStorageUnit,
  DataTieringStatus: () => DataTieringStatus,
  DecreaseNodeGroupsInGlobalReplicationGroupCommand: () => DecreaseNodeGroupsInGlobalReplicationGroupCommand,
  DecreaseReplicaCountCommand: () => DecreaseReplicaCountCommand,
  DefaultUserAssociatedToUserGroupFault: () => DefaultUserAssociatedToUserGroupFault,
  DefaultUserRequired: () => DefaultUserRequired,
  DeleteCacheClusterCommand: () => DeleteCacheClusterCommand,
  DeleteCacheParameterGroupCommand: () => DeleteCacheParameterGroupCommand,
  DeleteCacheSecurityGroupCommand: () => DeleteCacheSecurityGroupCommand,
  DeleteCacheSubnetGroupCommand: () => DeleteCacheSubnetGroupCommand,
  DeleteGlobalReplicationGroupCommand: () => DeleteGlobalReplicationGroupCommand,
  DeleteReplicationGroupCommand: () => DeleteReplicationGroupCommand,
  DeleteServerlessCacheCommand: () => DeleteServerlessCacheCommand,
  DeleteServerlessCacheSnapshotCommand: () => DeleteServerlessCacheSnapshotCommand,
  DeleteSnapshotCommand: () => DeleteSnapshotCommand,
  DeleteUserCommand: () => DeleteUserCommand,
  DeleteUserGroupCommand: () => DeleteUserGroupCommand,
  DescribeCacheClustersCommand: () => DescribeCacheClustersCommand,
  DescribeCacheEngineVersionsCommand: () => DescribeCacheEngineVersionsCommand,
  DescribeCacheParameterGroupsCommand: () => DescribeCacheParameterGroupsCommand,
  DescribeCacheParametersCommand: () => DescribeCacheParametersCommand,
  DescribeCacheSecurityGroupsCommand: () => DescribeCacheSecurityGroupsCommand,
  DescribeCacheSubnetGroupsCommand: () => DescribeCacheSubnetGroupsCommand,
  DescribeEngineDefaultParametersCommand: () => DescribeEngineDefaultParametersCommand,
  DescribeEventsCommand: () => DescribeEventsCommand,
  DescribeGlobalReplicationGroupsCommand: () => DescribeGlobalReplicationGroupsCommand,
  DescribeReplicationGroupsCommand: () => DescribeReplicationGroupsCommand,
  DescribeReservedCacheNodesCommand: () => DescribeReservedCacheNodesCommand,
  DescribeReservedCacheNodesOfferingsCommand: () => DescribeReservedCacheNodesOfferingsCommand,
  DescribeServerlessCacheSnapshotsCommand: () => DescribeServerlessCacheSnapshotsCommand,
  DescribeServerlessCachesCommand: () => DescribeServerlessCachesCommand,
  DescribeServiceUpdatesCommand: () => DescribeServiceUpdatesCommand,
  DescribeSnapshotsCommand: () => DescribeSnapshotsCommand,
  DescribeUpdateActionsCommand: () => DescribeUpdateActionsCommand,
  DescribeUserGroupsCommand: () => DescribeUserGroupsCommand,
  DescribeUsersCommand: () => DescribeUsersCommand,
  DestinationType: () => DestinationType,
  DisassociateGlobalReplicationGroupCommand: () => DisassociateGlobalReplicationGroupCommand,
  DuplicateUserNameFault: () => DuplicateUserNameFault,
  ElastiCache: () => ElastiCache,
  ElastiCacheClient: () => ElastiCacheClient,
  ElastiCacheServiceException: () => ElastiCacheServiceException,
  ExportServerlessCacheSnapshotCommand: () => ExportServerlessCacheSnapshotCommand,
  FailoverGlobalReplicationGroupCommand: () => FailoverGlobalReplicationGroupCommand,
  GlobalReplicationGroupAlreadyExistsFault: () => GlobalReplicationGroupAlreadyExistsFault,
  GlobalReplicationGroupNotFoundFault: () => GlobalReplicationGroupNotFoundFault,
  IncreaseNodeGroupsInGlobalReplicationGroupCommand: () => IncreaseNodeGroupsInGlobalReplicationGroupCommand,
  IncreaseReplicaCountCommand: () => IncreaseReplicaCountCommand,
  InputAuthenticationType: () => InputAuthenticationType,
  InsufficientCacheClusterCapacityFault: () => InsufficientCacheClusterCapacityFault,
  InvalidARNFault: () => InvalidARNFault,
  InvalidCacheClusterStateFault: () => InvalidCacheClusterStateFault,
  InvalidCacheParameterGroupStateFault: () => InvalidCacheParameterGroupStateFault,
  InvalidCacheSecurityGroupStateFault: () => InvalidCacheSecurityGroupStateFault,
  InvalidCredentialsException: () => InvalidCredentialsException,
  InvalidGlobalReplicationGroupStateFault: () => InvalidGlobalReplicationGroupStateFault,
  InvalidKMSKeyFault: () => InvalidKMSKeyFault,
  InvalidParameterCombinationException: () => InvalidParameterCombinationException,
  InvalidParameterValueException: () => InvalidParameterValueException,
  InvalidReplicationGroupStateFault: () => InvalidReplicationGroupStateFault,
  InvalidServerlessCacheSnapshotStateFault: () => InvalidServerlessCacheSnapshotStateFault,
  InvalidServerlessCacheStateFault: () => InvalidServerlessCacheStateFault,
  InvalidSnapshotStateFault: () => InvalidSnapshotStateFault,
  InvalidSubnet: () => InvalidSubnet,
  InvalidUserGroupStateFault: () => InvalidUserGroupStateFault,
  InvalidUserStateFault: () => InvalidUserStateFault,
  InvalidVPCNetworkStateFault: () => InvalidVPCNetworkStateFault,
  IpDiscovery: () => IpDiscovery,
  ListAllowedNodeTypeModificationsCommand: () => ListAllowedNodeTypeModificationsCommand,
  ListTagsForResourceCommand: () => ListTagsForResourceCommand,
  LogDeliveryConfigurationStatus: () => LogDeliveryConfigurationStatus,
  LogFormat: () => LogFormat,
  LogType: () => LogType,
  ModifyCacheClusterCommand: () => ModifyCacheClusterCommand,
  ModifyCacheParameterGroupCommand: () => ModifyCacheParameterGroupCommand,
  ModifyCacheSubnetGroupCommand: () => ModifyCacheSubnetGroupCommand,
  ModifyGlobalReplicationGroupCommand: () => ModifyGlobalReplicationGroupCommand,
  ModifyReplicationGroupCommand: () => ModifyReplicationGroupCommand,
  ModifyReplicationGroupShardConfigurationCommand: () => ModifyReplicationGroupShardConfigurationCommand,
  ModifyServerlessCacheCommand: () => ModifyServerlessCacheCommand,
  ModifyUserCommand: () => ModifyUserCommand,
  ModifyUserGroupCommand: () => ModifyUserGroupCommand,
  MultiAZStatus: () => MultiAZStatus,
  NetworkType: () => NetworkType,
  NoOperationFault: () => NoOperationFault,
  NodeGroupNotFoundFault: () => NodeGroupNotFoundFault,
  NodeGroupsPerReplicationGroupQuotaExceededFault: () => NodeGroupsPerReplicationGroupQuotaExceededFault,
  NodeQuotaForClusterExceededFault: () => NodeQuotaForClusterExceededFault,
  NodeQuotaForCustomerExceededFault: () => NodeQuotaForCustomerExceededFault,
  NodeUpdateInitiatedBy: () => NodeUpdateInitiatedBy,
  NodeUpdateStatus: () => NodeUpdateStatus,
  OutpostMode: () => OutpostMode,
  PendingAutomaticFailoverStatus: () => PendingAutomaticFailoverStatus,
  PurchaseReservedCacheNodesOfferingCommand: () => PurchaseReservedCacheNodesOfferingCommand,
  RebalanceSlotsInGlobalReplicationGroupCommand: () => RebalanceSlotsInGlobalReplicationGroupCommand,
  RebootCacheClusterCommand: () => RebootCacheClusterCommand,
  RemoveTagsFromResourceCommand: () => RemoveTagsFromResourceCommand,
  ReplicationGroupAlreadyExistsFault: () => ReplicationGroupAlreadyExistsFault,
  ReplicationGroupAlreadyUnderMigrationFault: () => ReplicationGroupAlreadyUnderMigrationFault,
  ReplicationGroupNotFoundFault: () => ReplicationGroupNotFoundFault,
  ReplicationGroupNotUnderMigrationFault: () => ReplicationGroupNotUnderMigrationFault,
  ReservedCacheNodeAlreadyExistsFault: () => ReservedCacheNodeAlreadyExistsFault,
  ReservedCacheNodeNotFoundFault: () => ReservedCacheNodeNotFoundFault,
  ReservedCacheNodeQuotaExceededFault: () => ReservedCacheNodeQuotaExceededFault,
  ReservedCacheNodesOfferingNotFoundFault: () => ReservedCacheNodesOfferingNotFoundFault,
  ResetCacheParameterGroupCommand: () => ResetCacheParameterGroupCommand,
  RevokeCacheSecurityGroupIngressCommand: () => RevokeCacheSecurityGroupIngressCommand,
  ServerlessCacheAlreadyExistsFault: () => ServerlessCacheAlreadyExistsFault,
  ServerlessCacheNotFoundFault: () => ServerlessCacheNotFoundFault,
  ServerlessCacheQuotaForCustomerExceededFault: () => ServerlessCacheQuotaForCustomerExceededFault,
  ServerlessCacheSnapshotAlreadyExistsFault: () => ServerlessCacheSnapshotAlreadyExistsFault,
  ServerlessCacheSnapshotNotFoundFault: () => ServerlessCacheSnapshotNotFoundFault,
  ServerlessCacheSnapshotQuotaExceededFault: () => ServerlessCacheSnapshotQuotaExceededFault,
  ServiceLinkedRoleNotFoundFault: () => ServiceLinkedRoleNotFoundFault,
  ServiceUpdateNotFoundFault: () => ServiceUpdateNotFoundFault,
  ServiceUpdateSeverity: () => ServiceUpdateSeverity,
  ServiceUpdateStatus: () => ServiceUpdateStatus,
  ServiceUpdateType: () => ServiceUpdateType,
  SlaMet: () => SlaMet,
  SnapshotAlreadyExistsFault: () => SnapshotAlreadyExistsFault,
  SnapshotFeatureNotSupportedFault: () => SnapshotFeatureNotSupportedFault,
  SnapshotNotFoundFault: () => SnapshotNotFoundFault,
  SnapshotQuotaExceededFault: () => SnapshotQuotaExceededFault,
  SourceType: () => SourceType,
  StartMigrationCommand: () => StartMigrationCommand,
  SubnetInUse: () => SubnetInUse,
  SubnetNotAllowedFault: () => SubnetNotAllowedFault,
  TagNotFoundFault: () => TagNotFoundFault,
  TagQuotaPerResourceExceeded: () => TagQuotaPerResourceExceeded,
  TestFailoverCommand: () => TestFailoverCommand,
  TestFailoverNotAvailableFault: () => TestFailoverNotAvailableFault,
  TestMigrationCommand: () => TestMigrationCommand,
  TransitEncryptionMode: () => TransitEncryptionMode,
  UpdateActionStatus: () => UpdateActionStatus,
  UserAlreadyExistsFault: () => UserAlreadyExistsFault,
  UserGroupAlreadyExistsFault: () => UserGroupAlreadyExistsFault,
  UserGroupNotFoundFault: () => UserGroupNotFoundFault,
  UserGroupQuotaExceededFault: () => UserGroupQuotaExceededFault,
  UserNotFoundFault: () => UserNotFoundFault,
  UserQuotaExceededFault: () => UserQuotaExceededFault,
  __Client: () => import_smithy_client.Client,
  paginateDescribeCacheClusters: () => paginateDescribeCacheClusters,
  paginateDescribeCacheEngineVersions: () => paginateDescribeCacheEngineVersions,
  paginateDescribeCacheParameterGroups: () => paginateDescribeCacheParameterGroups,
  paginateDescribeCacheParameters: () => paginateDescribeCacheParameters,
  paginateDescribeCacheSecurityGroups: () => paginateDescribeCacheSecurityGroups,
  paginateDescribeCacheSubnetGroups: () => paginateDescribeCacheSubnetGroups,
  paginateDescribeEngineDefaultParameters: () => paginateDescribeEngineDefaultParameters,
  paginateDescribeEvents: () => paginateDescribeEvents,
  paginateDescribeGlobalReplicationGroups: () => paginateDescribeGlobalReplicationGroups,
  paginateDescribeReplicationGroups: () => paginateDescribeReplicationGroups,
  paginateDescribeReservedCacheNodes: () => paginateDescribeReservedCacheNodes,
  paginateDescribeReservedCacheNodesOfferings: () => paginateDescribeReservedCacheNodesOfferings,
  paginateDescribeServerlessCacheSnapshots: () => paginateDescribeServerlessCacheSnapshots,
  paginateDescribeServerlessCaches: () => paginateDescribeServerlessCaches,
  paginateDescribeServiceUpdates: () => paginateDescribeServiceUpdates,
  paginateDescribeSnapshots: () => paginateDescribeSnapshots,
  paginateDescribeUpdateActions: () => paginateDescribeUpdateActions,
  paginateDescribeUserGroups: () => paginateDescribeUserGroups,
  paginateDescribeUsers: () => paginateDescribeUsers,
  waitForCacheClusterAvailable: () => waitForCacheClusterAvailable,
  waitForCacheClusterDeleted: () => waitForCacheClusterDeleted,
  waitForReplicationGroupAvailable: () => waitForReplicationGroupAvailable,
  waitForReplicationGroupDeleted: () => waitForReplicationGroupDeleted,
  waitUntilCacheClusterAvailable: () => waitUntilCacheClusterAvailable,
  waitUntilCacheClusterDeleted: () => waitUntilCacheClusterDeleted,
  waitUntilReplicationGroupAvailable: () => waitUntilReplicationGroupAvailable,
  waitUntilReplicationGroupDeleted: () => waitUntilReplicationGroupDeleted
});
module.exports = __toCommonJS(index_exports);

// src/ElastiCacheClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return Object.assign(options, {
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "elasticache"
  });
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/ElastiCacheClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = Object.assign(
    (0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig),
    (0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig),
    (0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig),
    getHttpAuthExtensionConfiguration(runtimeConfig)
  );
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return Object.assign(
    runtimeConfig,
    (0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    (0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    (0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    resolveHttpAuthRuntimeConfig(extensionConfiguration)
  );
}, "resolveRuntimeExtensions");

// src/ElastiCacheClient.ts
var ElastiCacheClient = class extends import_smithy_client.Client {
  static {
    __name(this, "ElastiCacheClient");
  }
  /**
   * The resolved configuration of ElastiCacheClient class. This is resolved and normalized from the {@link ElastiCacheClientConfig | constructor configuration interface}.
   */
  config;
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    super(_config_0);
    this.initConfig = _config_0;
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
    const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
    const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultElastiCacheHttpAuthSchemeParametersProvider,
        identityProviderConfigProvider: /* @__PURE__ */ __name(async (config) => new import_core.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        }), "identityProviderConfigProvider")
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
};

// src/ElastiCache.ts


// src/commands/AddTagsToResourceCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");


// src/protocols/Aws_query.ts
var import_core2 = require("@aws-sdk/core");



// src/models/ElastiCacheServiceException.ts

var ElastiCacheServiceException = class _ElastiCacheServiceException extends import_smithy_client.ServiceException {
  static {
    __name(this, "ElastiCacheServiceException");
  }
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _ElastiCacheServiceException.prototype);
  }
};

// src/models/models_0.ts
var CacheClusterNotFoundFault = class _CacheClusterNotFoundFault extends ElastiCacheServiceException {
  static {
    __name(this, "CacheClusterNotFoundFault");
  }
  name = "CacheClusterNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "CacheClusterNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _CacheClusterNotFoundFault.prototype);
  }
};
var CacheParameterGroupNotFoundFault = class _CacheParameterGroupNotFoundFault extends ElastiCacheServiceException {
  static {
    __name(this, "CacheParameterGroupNotFoundFault");
  }
  name = "CacheParameterGroupNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "CacheParameterGroupNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _CacheParameterGroupNotFoundFault.prototype);
  }
};
var CacheSecurityGroupNotFoundFault = class _CacheSecurityGroupNotFoundFault extends ElastiCacheServiceException {
  static {
    __name(this, "CacheSecurityGroupNotFoundFault");
  }
  name = "CacheSecurityGroupNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "CacheSecurityGroupNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _CacheSecurityGroupNotFoundFault.prototype);
  }
};
var CacheSubnetGroupNotFoundFault = class _CacheSubnetGroupNotFoundFault extends ElastiCacheServiceException {
  static {
    __name(this, "CacheSubnetGroupNotFoundFault");
  }
  name = "CacheSubnetGroupNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "CacheSubnetGroupNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _CacheSubnetGroupNotFoundFault.prototype);
  }
};
var InvalidARNFault = class _InvalidARNFault extends ElastiCacheServiceException {
  static {
    __name(this, "InvalidARNFault");
  }
  name = "InvalidARNFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidARNFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidARNFault.prototype);
  }
};
var InvalidReplicationGroupStateFault = class _InvalidReplicationGroupStateFault extends ElastiCacheServiceException {
  static {
    __name(this, "InvalidReplicationGroupStateFault");
  }
  name = "InvalidReplicationGroupStateFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidReplicationGroupStateFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidReplicationGroupStateFault.prototype);
  }
};
var InvalidServerlessCacheSnapshotStateFault = class _InvalidServerlessCacheSnapshotStateFault extends ElastiCacheServiceException {
  static {
    __name(this, "InvalidServerlessCacheSnapshotStateFault");
  }
  name = "InvalidServerlessCacheSnapshotStateFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidServerlessCacheSnapshotStateFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidServerlessCacheSnapshotStateFault.prototype);
  }
};
var InvalidServerlessCacheStateFault = class _InvalidServerlessCacheStateFault extends ElastiCacheServiceException {
  static {
    __name(this, "InvalidServerlessCacheStateFault");
  }
  name = "InvalidServerlessCacheStateFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidServerlessCacheStateFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidServerlessCacheStateFault.prototype);
  }
};
var ReplicationGroupNotFoundFault = class _ReplicationGroupNotFoundFault extends ElastiCacheServiceException {
  static {
    __name(this, "ReplicationGroupNotFoundFault");
  }
  name = "ReplicationGroupNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ReplicationGroupNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ReplicationGroupNotFoundFault.prototype);
  }
};
var ReservedCacheNodeNotFoundFault = class _ReservedCacheNodeNotFoundFault extends ElastiCacheServiceException {
  static {
    __name(this, "ReservedCacheNodeNotFoundFault");
  }
  name = "ReservedCacheNodeNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ReservedCacheNodeNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ReservedCacheNodeNotFoundFault.prototype);
  }
};
var ServerlessCacheNotFoundFault = class _ServerlessCacheNotFoundFault extends ElastiCacheServiceException {
  static {
    __name(this, "ServerlessCacheNotFoundFault");
  }
  name = "ServerlessCacheNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServerlessCacheNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ServerlessCacheNotFoundFault.prototype);
  }
};
var ServerlessCacheSnapshotNotFoundFault = class _ServerlessCacheSnapshotNotFoundFault extends ElastiCacheServiceException {
  static {
    __name(this, "ServerlessCacheSnapshotNotFoundFault");
  }
  name = "ServerlessCacheSnapshotNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServerlessCacheSnapshotNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ServerlessCacheSnapshotNotFoundFault.prototype);
  }
};
var SnapshotNotFoundFault = class _SnapshotNotFoundFault extends ElastiCacheServiceException {
  static {
    __name(this, "SnapshotNotFoundFault");
  }
  name = "SnapshotNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "SnapshotNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _SnapshotNotFoundFault.prototype);
  }
};
var TagQuotaPerResourceExceeded = class _TagQuotaPerResourceExceeded extends ElastiCacheServiceException {
  static {
    __name(this, "TagQuotaPerResourceExceeded");
  }
  name = "TagQuotaPerResourceExceeded";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TagQuotaPerResourceExceeded",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _TagQuotaPerResourceExceeded.prototype);
  }
};
var UserGroupNotFoundFault = class _UserGroupNotFoundFault extends ElastiCacheServiceException {
  static {
    __name(this, "UserGroupNotFoundFault");
  }
  name = "UserGroupNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "UserGroupNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _UserGroupNotFoundFault.prototype);
  }
};
var UserNotFoundFault = class _UserNotFoundFault extends ElastiCacheServiceException {
  static {
    __name(this, "UserNotFoundFault");
  }
  name = "UserNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "UserNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _UserNotFoundFault.prototype);
  }
};
var AuthorizationAlreadyExistsFault = class _AuthorizationAlreadyExistsFault extends ElastiCacheServiceException {
  static {
    __name(this, "AuthorizationAlreadyExistsFault");
  }
  name = "AuthorizationAlreadyExistsFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "AuthorizationAlreadyExistsFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _AuthorizationAlreadyExistsFault.prototype);
  }
};
var InvalidCacheSecurityGroupStateFault = class _InvalidCacheSecurityGroupStateFault extends ElastiCacheServiceException {
  static {
    __name(this, "InvalidCacheSecurityGroupStateFault");
  }
  name = "InvalidCacheSecurityGroupStateFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidCacheSecurityGroupStateFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidCacheSecurityGroupStateFault.prototype);
  }
};
var InvalidParameterCombinationException = class _InvalidParameterCombinationException extends ElastiCacheServiceException {
  static {
    __name(this, "InvalidParameterCombinationException");
  }
  name = "InvalidParameterCombinationException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidParameterCombinationException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidParameterCombinationException.prototype);
  }
};
var InvalidParameterValueException = class _InvalidParameterValueException extends ElastiCacheServiceException {
  static {
    __name(this, "InvalidParameterValueException");
  }
  name = "InvalidParameterValueException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidParameterValueException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidParameterValueException.prototype);
  }
};
var ServiceUpdateNotFoundFault = class _ServiceUpdateNotFoundFault extends ElastiCacheServiceException {
  static {
    __name(this, "ServiceUpdateNotFoundFault");
  }
  name = "ServiceUpdateNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServiceUpdateNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ServiceUpdateNotFoundFault.prototype);
  }
};
var UpdateActionStatus = {
  COMPLETE: "complete",
  IN_PROGRESS: "in-progress",
  NOT_APPLICABLE: "not-applicable",
  NOT_APPLIED: "not-applied",
  SCHEDULED: "scheduled",
  SCHEDULING: "scheduling",
  STOPPED: "stopped",
  STOPPING: "stopping",
  WAITING_TO_START: "waiting-to-start"
};
var AutomaticFailoverStatus = {
  DISABLED: "disabled",
  DISABLING: "disabling",
  ENABLED: "enabled",
  ENABLING: "enabling"
};
var ClusterMode = {
  COMPATIBLE: "compatible",
  DISABLED: "disabled",
  ENABLED: "enabled"
};
var DataTieringStatus = {
  DISABLED: "disabled",
  ENABLED: "enabled"
};
var IpDiscovery = {
  IPV4: "ipv4",
  IPV6: "ipv6"
};
var DestinationType = {
  CloudWatchLogs: "cloudwatch-logs",
  KinesisFirehose: "kinesis-firehose"
};
var LogFormat = {
  JSON: "json",
  TEXT: "text"
};
var LogType = {
  ENGINE_LOG: "engine-log",
  SLOW_LOG: "slow-log"
};
var LogDeliveryConfigurationStatus = {
  ACTIVE: "active",
  DISABLING: "disabling",
  ENABLING: "enabling",
  ERROR: "error",
  MODIFYING: "modifying"
};
var MultiAZStatus = {
  DISABLED: "disabled",
  ENABLED: "enabled"
};
var NetworkType = {
  DUAL_STACK: "dual_stack",
  IPV4: "ipv4",
  IPV6: "ipv6"
};
var AuthTokenUpdateStatus = {
  ROTATING: "ROTATING",
  SETTING: "SETTING"
};
var PendingAutomaticFailoverStatus = {
  DISABLED: "disabled",
  ENABLED: "enabled"
};
var TransitEncryptionMode = {
  PREFERRED: "preferred",
  REQUIRED: "required"
};
var ReplicationGroupNotUnderMigrationFault = class _ReplicationGroupNotUnderMigrationFault extends ElastiCacheServiceException {
  static {
    __name(this, "ReplicationGroupNotUnderMigrationFault");
  }
  name = "ReplicationGroupNotUnderMigrationFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ReplicationGroupNotUnderMigrationFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ReplicationGroupNotUnderMigrationFault.prototype);
  }
};
var ServerlessCacheSnapshotAlreadyExistsFault = class _ServerlessCacheSnapshotAlreadyExistsFault extends ElastiCacheServiceException {
  static {
    __name(this, "ServerlessCacheSnapshotAlreadyExistsFault");
  }
  name = "ServerlessCacheSnapshotAlreadyExistsFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServerlessCacheSnapshotAlreadyExistsFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ServerlessCacheSnapshotAlreadyExistsFault.prototype);
  }
};
var ServerlessCacheSnapshotQuotaExceededFault = class _ServerlessCacheSnapshotQuotaExceededFault extends ElastiCacheServiceException {
  static {
    __name(this, "ServerlessCacheSnapshotQuotaExceededFault");
  }
  name = "ServerlessCacheSnapshotQuotaExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServerlessCacheSnapshotQuotaExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ServerlessCacheSnapshotQuotaExceededFault.prototype);
  }
};
var ServiceLinkedRoleNotFoundFault = class _ServiceLinkedRoleNotFoundFault extends ElastiCacheServiceException {
  static {
    __name(this, "ServiceLinkedRoleNotFoundFault");
  }
  name = "ServiceLinkedRoleNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServiceLinkedRoleNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ServiceLinkedRoleNotFoundFault.prototype);
  }
};
var InvalidSnapshotStateFault = class _InvalidSnapshotStateFault extends ElastiCacheServiceException {
  static {
    __name(this, "InvalidSnapshotStateFault");
  }
  name = "InvalidSnapshotStateFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidSnapshotStateFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidSnapshotStateFault.prototype);
  }
};
var SnapshotAlreadyExistsFault = class _SnapshotAlreadyExistsFault extends ElastiCacheServiceException {
  static {
    __name(this, "SnapshotAlreadyExistsFault");
  }
  name = "SnapshotAlreadyExistsFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "SnapshotAlreadyExistsFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _SnapshotAlreadyExistsFault.prototype);
  }
};
var SnapshotQuotaExceededFault = class _SnapshotQuotaExceededFault extends ElastiCacheServiceException {
  static {
    __name(this, "SnapshotQuotaExceededFault");
  }
  name = "SnapshotQuotaExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "SnapshotQuotaExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _SnapshotQuotaExceededFault.prototype);
  }
};
var CacheClusterAlreadyExistsFault = class _CacheClusterAlreadyExistsFault extends ElastiCacheServiceException {
  static {
    __name(this, "CacheClusterAlreadyExistsFault");
  }
  name = "CacheClusterAlreadyExistsFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "CacheClusterAlreadyExistsFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _CacheClusterAlreadyExistsFault.prototype);
  }
};
var ClusterQuotaForCustomerExceededFault = class _ClusterQuotaForCustomerExceededFault extends ElastiCacheServiceException {
  static {
    __name(this, "ClusterQuotaForCustomerExceededFault");
  }
  name = "ClusterQuotaForCustomerExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ClusterQuotaForCustomerExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ClusterQuotaForCustomerExceededFault.prototype);
  }
};
var AZMode = {
  CROSS_AZ: "cross-az",
  SINGLE_AZ: "single-az"
};
var OutpostMode = {
  CROSS_OUTPOST: "cross-outpost",
  SINGLE_OUTPOST: "single-outpost"
};
var InsufficientCacheClusterCapacityFault = class _InsufficientCacheClusterCapacityFault extends ElastiCacheServiceException {
  static {
    __name(this, "InsufficientCacheClusterCapacityFault");
  }
  name = "InsufficientCacheClusterCapacityFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InsufficientCacheClusterCapacityFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InsufficientCacheClusterCapacityFault.prototype);
  }
};
var InvalidVPCNetworkStateFault = class _InvalidVPCNetworkStateFault extends ElastiCacheServiceException {
  static {
    __name(this, "InvalidVPCNetworkStateFault");
  }
  name = "InvalidVPCNetworkStateFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidVPCNetworkStateFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidVPCNetworkStateFault.prototype);
  }
};
var NodeQuotaForClusterExceededFault = class _NodeQuotaForClusterExceededFault extends ElastiCacheServiceException {
  static {
    __name(this, "NodeQuotaForClusterExceededFault");
  }
  name = "NodeQuotaForClusterExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "NodeQuotaForClusterExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _NodeQuotaForClusterExceededFault.prototype);
  }
};
var NodeQuotaForCustomerExceededFault = class _NodeQuotaForCustomerExceededFault extends ElastiCacheServiceException {
  static {
    __name(this, "NodeQuotaForCustomerExceededFault");
  }
  name = "NodeQuotaForCustomerExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "NodeQuotaForCustomerExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _NodeQuotaForCustomerExceededFault.prototype);
  }
};
var CacheParameterGroupAlreadyExistsFault = class _CacheParameterGroupAlreadyExistsFault extends ElastiCacheServiceException {
  static {
    __name(this, "CacheParameterGroupAlreadyExistsFault");
  }
  name = "CacheParameterGroupAlreadyExistsFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "CacheParameterGroupAlreadyExistsFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _CacheParameterGroupAlreadyExistsFault.prototype);
  }
};
var CacheParameterGroupQuotaExceededFault = class _CacheParameterGroupQuotaExceededFault extends ElastiCacheServiceException {
  static {
    __name(this, "CacheParameterGroupQuotaExceededFault");
  }
  name = "CacheParameterGroupQuotaExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "CacheParameterGroupQuotaExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _CacheParameterGroupQuotaExceededFault.prototype);
  }
};
var InvalidCacheParameterGroupStateFault = class _InvalidCacheParameterGroupStateFault extends ElastiCacheServiceException {
  static {
    __name(this, "InvalidCacheParameterGroupStateFault");
  }
  name = "InvalidCacheParameterGroupStateFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidCacheParameterGroupStateFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidCacheParameterGroupStateFault.prototype);
  }
};
var CacheSecurityGroupAlreadyExistsFault = class _CacheSecurityGroupAlreadyExistsFault extends ElastiCacheServiceException {
  static {
    __name(this, "CacheSecurityGroupAlreadyExistsFault");
  }
  name = "CacheSecurityGroupAlreadyExistsFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "CacheSecurityGroupAlreadyExistsFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _CacheSecurityGroupAlreadyExistsFault.prototype);
  }
};
var CacheSecurityGroupQuotaExceededFault = class _CacheSecurityGroupQuotaExceededFault extends ElastiCacheServiceException {
  static {
    __name(this, "CacheSecurityGroupQuotaExceededFault");
  }
  name = "CacheSecurityGroupQuotaExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "CacheSecurityGroupQuotaExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _CacheSecurityGroupQuotaExceededFault.prototype);
  }
};
var CacheSubnetGroupAlreadyExistsFault = class _CacheSubnetGroupAlreadyExistsFault extends ElastiCacheServiceException {
  static {
    __name(this, "CacheSubnetGroupAlreadyExistsFault");
  }
  name = "CacheSubnetGroupAlreadyExistsFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "CacheSubnetGroupAlreadyExistsFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _CacheSubnetGroupAlreadyExistsFault.prototype);
  }
};
var CacheSubnetGroupQuotaExceededFault = class _CacheSubnetGroupQuotaExceededFault extends ElastiCacheServiceException {
  static {
    __name(this, "CacheSubnetGroupQuotaExceededFault");
  }
  name = "CacheSubnetGroupQuotaExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "CacheSubnetGroupQuotaExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _CacheSubnetGroupQuotaExceededFault.prototype);
  }
};
var CacheSubnetQuotaExceededFault = class _CacheSubnetQuotaExceededFault extends ElastiCacheServiceException {
  static {
    __name(this, "CacheSubnetQuotaExceededFault");
  }
  name = "CacheSubnetQuotaExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "CacheSubnetQuotaExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _CacheSubnetQuotaExceededFault.prototype);
  }
};
var InvalidSubnet = class _InvalidSubnet extends ElastiCacheServiceException {
  static {
    __name(this, "InvalidSubnet");
  }
  name = "InvalidSubnet";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidSubnet",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidSubnet.prototype);
  }
};
var SubnetNotAllowedFault = class _SubnetNotAllowedFault extends ElastiCacheServiceException {
  static {
    __name(this, "SubnetNotAllowedFault");
  }
  name = "SubnetNotAllowedFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "SubnetNotAllowedFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _SubnetNotAllowedFault.prototype);
  }
};
var GlobalReplicationGroupAlreadyExistsFault = class _GlobalReplicationGroupAlreadyExistsFault extends ElastiCacheServiceException {
  static {
    __name(this, "GlobalReplicationGroupAlreadyExistsFault");
  }
  name = "GlobalReplicationGroupAlreadyExistsFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "GlobalReplicationGroupAlreadyExistsFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _GlobalReplicationGroupAlreadyExistsFault.prototype);
  }
};
var GlobalReplicationGroupNotFoundFault = class _GlobalReplicationGroupNotFoundFault extends ElastiCacheServiceException {
  static {
    __name(this, "GlobalReplicationGroupNotFoundFault");
  }
  name = "GlobalReplicationGroupNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "GlobalReplicationGroupNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _GlobalReplicationGroupNotFoundFault.prototype);
  }
};
var InvalidCacheClusterStateFault = class _InvalidCacheClusterStateFault extends ElastiCacheServiceException {
  static {
    __name(this, "InvalidCacheClusterStateFault");
  }
  name = "InvalidCacheClusterStateFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidCacheClusterStateFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidCacheClusterStateFault.prototype);
  }
};
var InvalidGlobalReplicationGroupStateFault = class _InvalidGlobalReplicationGroupStateFault extends ElastiCacheServiceException {
  static {
    __name(this, "InvalidGlobalReplicationGroupStateFault");
  }
  name = "InvalidGlobalReplicationGroupStateFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidGlobalReplicationGroupStateFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidGlobalReplicationGroupStateFault.prototype);
  }
};
var InvalidUserGroupStateFault = class _InvalidUserGroupStateFault extends ElastiCacheServiceException {
  static {
    __name(this, "InvalidUserGroupStateFault");
  }
  name = "InvalidUserGroupStateFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidUserGroupStateFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidUserGroupStateFault.prototype);
  }
};
var NodeGroupsPerReplicationGroupQuotaExceededFault = class _NodeGroupsPerReplicationGroupQuotaExceededFault extends ElastiCacheServiceException {
  static {
    __name(this, "NodeGroupsPerReplicationGroupQuotaExceededFault");
  }
  name = "NodeGroupsPerReplicationGroupQuotaExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "NodeGroupsPerReplicationGroupQuotaExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _NodeGroupsPerReplicationGroupQuotaExceededFault.prototype);
  }
};
var ReplicationGroupAlreadyExistsFault = class _ReplicationGroupAlreadyExistsFault extends ElastiCacheServiceException {
  static {
    __name(this, "ReplicationGroupAlreadyExistsFault");
  }
  name = "ReplicationGroupAlreadyExistsFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ReplicationGroupAlreadyExistsFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ReplicationGroupAlreadyExistsFault.prototype);
  }
};
var DataStorageUnit = {
  GB: "GB"
};
var InvalidCredentialsException = class _InvalidCredentialsException extends ElastiCacheServiceException {
  static {
    __name(this, "InvalidCredentialsException");
  }
  name = "InvalidCredentialsException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidCredentialsException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidCredentialsException.prototype);
  }
};
var ServerlessCacheAlreadyExistsFault = class _ServerlessCacheAlreadyExistsFault extends ElastiCacheServiceException {
  static {
    __name(this, "ServerlessCacheAlreadyExistsFault");
  }
  name = "ServerlessCacheAlreadyExistsFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServerlessCacheAlreadyExistsFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ServerlessCacheAlreadyExistsFault.prototype);
  }
};
var ServerlessCacheQuotaForCustomerExceededFault = class _ServerlessCacheQuotaForCustomerExceededFault extends ElastiCacheServiceException {
  static {
    __name(this, "ServerlessCacheQuotaForCustomerExceededFault");
  }
  name = "ServerlessCacheQuotaForCustomerExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServerlessCacheQuotaForCustomerExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ServerlessCacheQuotaForCustomerExceededFault.prototype);
  }
};
var SnapshotFeatureNotSupportedFault = class _SnapshotFeatureNotSupportedFault extends ElastiCacheServiceException {
  static {
    __name(this, "SnapshotFeatureNotSupportedFault");
  }
  name = "SnapshotFeatureNotSupportedFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "SnapshotFeatureNotSupportedFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _SnapshotFeatureNotSupportedFault.prototype);
  }
};
var InputAuthenticationType = {
  IAM: "iam",
  NO_PASSWORD: "no-password-required",
  PASSWORD: "password"
};
var DuplicateUserNameFault = class _DuplicateUserNameFault extends ElastiCacheServiceException {
  static {
    __name(this, "DuplicateUserNameFault");
  }
  name = "DuplicateUserNameFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DuplicateUserNameFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DuplicateUserNameFault.prototype);
  }
};
var AuthenticationType = {
  IAM: "iam",
  NO_PASSWORD: "no-password",
  PASSWORD: "password"
};
var UserAlreadyExistsFault = class _UserAlreadyExistsFault extends ElastiCacheServiceException {
  static {
    __name(this, "UserAlreadyExistsFault");
  }
  name = "UserAlreadyExistsFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "UserAlreadyExistsFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _UserAlreadyExistsFault.prototype);
  }
};
var UserQuotaExceededFault = class _UserQuotaExceededFault extends ElastiCacheServiceException {
  static {
    __name(this, "UserQuotaExceededFault");
  }
  name = "UserQuotaExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "UserQuotaExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _UserQuotaExceededFault.prototype);
  }
};
var DefaultUserRequired = class _DefaultUserRequired extends ElastiCacheServiceException {
  static {
    __name(this, "DefaultUserRequired");
  }
  name = "DefaultUserRequired";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DefaultUserRequired",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DefaultUserRequired.prototype);
  }
};
var UserGroupAlreadyExistsFault = class _UserGroupAlreadyExistsFault extends ElastiCacheServiceException {
  static {
    __name(this, "UserGroupAlreadyExistsFault");
  }
  name = "UserGroupAlreadyExistsFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "UserGroupAlreadyExistsFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _UserGroupAlreadyExistsFault.prototype);
  }
};
var UserGroupQuotaExceededFault = class _UserGroupQuotaExceededFault extends ElastiCacheServiceException {
  static {
    __name(this, "UserGroupQuotaExceededFault");
  }
  name = "UserGroupQuotaExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "UserGroupQuotaExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _UserGroupQuotaExceededFault.prototype);
  }
};
var NoOperationFault = class _NoOperationFault extends ElastiCacheServiceException {
  static {
    __name(this, "NoOperationFault");
  }
  name = "NoOperationFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "NoOperationFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _NoOperationFault.prototype);
  }
};
var CacheSubnetGroupInUse = class _CacheSubnetGroupInUse extends ElastiCacheServiceException {
  static {
    __name(this, "CacheSubnetGroupInUse");
  }
  name = "CacheSubnetGroupInUse";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "CacheSubnetGroupInUse",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _CacheSubnetGroupInUse.prototype);
  }
};
var DefaultUserAssociatedToUserGroupFault = class _DefaultUserAssociatedToUserGroupFault extends ElastiCacheServiceException {
  static {
    __name(this, "DefaultUserAssociatedToUserGroupFault");
  }
  name = "DefaultUserAssociatedToUserGroupFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DefaultUserAssociatedToUserGroupFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DefaultUserAssociatedToUserGroupFault.prototype);
  }
};
var InvalidUserStateFault = class _InvalidUserStateFault extends ElastiCacheServiceException {
  static {
    __name(this, "InvalidUserStateFault");
  }
  name = "InvalidUserStateFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidUserStateFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidUserStateFault.prototype);
  }
};
var ChangeType = {
  immediate: "immediate",
  requires_reboot: "requires-reboot"
};
var SourceType = {
  cache_cluster: "cache-cluster",
  cache_parameter_group: "cache-parameter-group",
  cache_security_group: "cache-security-group",
  cache_subnet_group: "cache-subnet-group",
  replication_group: "replication-group",
  serverless_cache: "serverless-cache",
  serverless_cache_snapshot: "serverless-cache-snapshot",
  user: "user",
  user_group: "user-group"
};
var ReservedCacheNodesOfferingNotFoundFault = class _ReservedCacheNodesOfferingNotFoundFault extends ElastiCacheServiceException {
  static {
    __name(this, "ReservedCacheNodesOfferingNotFoundFault");
  }
  name = "ReservedCacheNodesOfferingNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ReservedCacheNodesOfferingNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ReservedCacheNodesOfferingNotFoundFault.prototype);
  }
};
var ServiceUpdateStatus = {
  AVAILABLE: "available",
  CANCELLED: "cancelled",
  EXPIRED: "expired"
};
var ServiceUpdateSeverity = {
  CRITICAL: "critical",
  IMPORTANT: "important",
  LOW: "low",
  MEDIUM: "medium"
};
var ServiceUpdateType = {
  SECURITY_UPDATE: "security-update"
};
var NodeUpdateInitiatedBy = {
  CUSTOMER: "customer",
  SYSTEM: "system"
};
var NodeUpdateStatus = {
  COMPLETE: "complete",
  IN_PROGRESS: "in-progress",
  NOT_APPLIED: "not-applied",
  STOPPED: "stopped",
  STOPPING: "stopping",
  WAITING_TO_START: "waiting-to-start"
};
var SlaMet = {
  NA: "n/a",
  NO: "no",
  YES: "yes"
};
var InvalidKMSKeyFault = class _InvalidKMSKeyFault extends ElastiCacheServiceException {
  static {
    __name(this, "InvalidKMSKeyFault");
  }
  name = "InvalidKMSKeyFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidKMSKeyFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidKMSKeyFault.prototype);
  }
};
var AuthTokenUpdateStrategyType = {
  DELETE: "DELETE",
  ROTATE: "ROTATE",
  SET: "SET"
};
var SubnetInUse = class _SubnetInUse extends ElastiCacheServiceException {
  static {
    __name(this, "SubnetInUse");
  }
  name = "SubnetInUse";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "SubnetInUse",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _SubnetInUse.prototype);
  }
};
var ReservedCacheNodeAlreadyExistsFault = class _ReservedCacheNodeAlreadyExistsFault extends ElastiCacheServiceException {
  static {
    __name(this, "ReservedCacheNodeAlreadyExistsFault");
  }
  name = "ReservedCacheNodeAlreadyExistsFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ReservedCacheNodeAlreadyExistsFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ReservedCacheNodeAlreadyExistsFault.prototype);
  }
};
var ReservedCacheNodeQuotaExceededFault = class _ReservedCacheNodeQuotaExceededFault extends ElastiCacheServiceException {
  static {
    __name(this, "ReservedCacheNodeQuotaExceededFault");
  }
  name = "ReservedCacheNodeQuotaExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ReservedCacheNodeQuotaExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ReservedCacheNodeQuotaExceededFault.prototype);
  }
};
var TagNotFoundFault = class _TagNotFoundFault extends ElastiCacheServiceException {
  static {
    __name(this, "TagNotFoundFault");
  }
  name = "TagNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TagNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _TagNotFoundFault.prototype);
  }
};
var AuthorizationNotFoundFault = class _AuthorizationNotFoundFault extends ElastiCacheServiceException {
  static {
    __name(this, "AuthorizationNotFoundFault");
  }
  name = "AuthorizationNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "AuthorizationNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _AuthorizationNotFoundFault.prototype);
  }
};

// src/models/models_1.ts
var ReplicationGroupAlreadyUnderMigrationFault = class _ReplicationGroupAlreadyUnderMigrationFault extends ElastiCacheServiceException {
  static {
    __name(this, "ReplicationGroupAlreadyUnderMigrationFault");
  }
  name = "ReplicationGroupAlreadyUnderMigrationFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ReplicationGroupAlreadyUnderMigrationFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ReplicationGroupAlreadyUnderMigrationFault.prototype);
  }
};
var APICallRateForCustomerExceededFault = class _APICallRateForCustomerExceededFault extends ElastiCacheServiceException {
  static {
    __name(this, "APICallRateForCustomerExceededFault");
  }
  name = "APICallRateForCustomerExceededFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "APICallRateForCustomerExceededFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _APICallRateForCustomerExceededFault.prototype);
  }
};
var NodeGroupNotFoundFault = class _NodeGroupNotFoundFault extends ElastiCacheServiceException {
  static {
    __name(this, "NodeGroupNotFoundFault");
  }
  name = "NodeGroupNotFoundFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "NodeGroupNotFoundFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _NodeGroupNotFoundFault.prototype);
  }
};
var TestFailoverNotAvailableFault = class _TestFailoverNotAvailableFault extends ElastiCacheServiceException {
  static {
    __name(this, "TestFailoverNotAvailableFault");
  }
  name = "TestFailoverNotAvailableFault";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TestFailoverNotAvailableFault",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _TestFailoverNotAvailableFault.prototype);
  }
};

// src/protocols/Aws_query.ts
var se_AddTagsToResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AddTagsToResourceMessage(input, context),
    [_A]: _ATTR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_AddTagsToResourceCommand");
var se_AuthorizeCacheSecurityGroupIngressCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AuthorizeCacheSecurityGroupIngressMessage(input, context),
    [_A]: _ACSGI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_AuthorizeCacheSecurityGroupIngressCommand");
var se_BatchApplyUpdateActionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_BatchApplyUpdateActionMessage(input, context),
    [_A]: _BAUA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_BatchApplyUpdateActionCommand");
var se_BatchStopUpdateActionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_BatchStopUpdateActionMessage(input, context),
    [_A]: _BSUA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_BatchStopUpdateActionCommand");
var se_CompleteMigrationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CompleteMigrationMessage(input, context),
    [_A]: _CM,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CompleteMigrationCommand");
var se_CopyServerlessCacheSnapshotCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CopyServerlessCacheSnapshotRequest(input, context),
    [_A]: _CSCS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CopyServerlessCacheSnapshotCommand");
var se_CopySnapshotCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CopySnapshotMessage(input, context),
    [_A]: _CS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CopySnapshotCommand");
var se_CreateCacheClusterCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateCacheClusterMessage(input, context),
    [_A]: _CCC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateCacheClusterCommand");
var se_CreateCacheParameterGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateCacheParameterGroupMessage(input, context),
    [_A]: _CCPG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateCacheParameterGroupCommand");
var se_CreateCacheSecurityGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateCacheSecurityGroupMessage(input, context),
    [_A]: _CCSG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateCacheSecurityGroupCommand");
var se_CreateCacheSubnetGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateCacheSubnetGroupMessage(input, context),
    [_A]: _CCSGr,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateCacheSubnetGroupCommand");
var se_CreateGlobalReplicationGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateGlobalReplicationGroupMessage(input, context),
    [_A]: _CGRG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateGlobalReplicationGroupCommand");
var se_CreateReplicationGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateReplicationGroupMessage(input, context),
    [_A]: _CRG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateReplicationGroupCommand");
var se_CreateServerlessCacheCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateServerlessCacheRequest(input, context),
    [_A]: _CSC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateServerlessCacheCommand");
var se_CreateServerlessCacheSnapshotCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateServerlessCacheSnapshotRequest(input, context),
    [_A]: _CSCSr,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateServerlessCacheSnapshotCommand");
var se_CreateSnapshotCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateSnapshotMessage(input, context),
    [_A]: _CSr,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateSnapshotCommand");
var se_CreateUserCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateUserMessage(input, context),
    [_A]: _CU,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateUserCommand");
var se_CreateUserGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateUserGroupMessage(input, context),
    [_A]: _CUG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateUserGroupCommand");
var se_DecreaseNodeGroupsInGlobalReplicationGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DecreaseNodeGroupsInGlobalReplicationGroupMessage(input, context),
    [_A]: _DNGIGRG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DecreaseNodeGroupsInGlobalReplicationGroupCommand");
var se_DecreaseReplicaCountCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DecreaseReplicaCountMessage(input, context),
    [_A]: _DRC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DecreaseReplicaCountCommand");
var se_DeleteCacheClusterCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteCacheClusterMessage(input, context),
    [_A]: _DCC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteCacheClusterCommand");
var se_DeleteCacheParameterGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteCacheParameterGroupMessage(input, context),
    [_A]: _DCPG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteCacheParameterGroupCommand");
var se_DeleteCacheSecurityGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteCacheSecurityGroupMessage(input, context),
    [_A]: _DCSG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteCacheSecurityGroupCommand");
var se_DeleteCacheSubnetGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteCacheSubnetGroupMessage(input, context),
    [_A]: _DCSGe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteCacheSubnetGroupCommand");
var se_DeleteGlobalReplicationGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteGlobalReplicationGroupMessage(input, context),
    [_A]: _DGRG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteGlobalReplicationGroupCommand");
var se_DeleteReplicationGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteReplicationGroupMessage(input, context),
    [_A]: _DRG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteReplicationGroupCommand");
var se_DeleteServerlessCacheCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteServerlessCacheRequest(input, context),
    [_A]: _DSC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteServerlessCacheCommand");
var se_DeleteServerlessCacheSnapshotCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteServerlessCacheSnapshotRequest(input, context),
    [_A]: _DSCS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteServerlessCacheSnapshotCommand");
var se_DeleteSnapshotCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteSnapshotMessage(input, context),
    [_A]: _DS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteSnapshotCommand");
var se_DeleteUserCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteUserMessage(input, context),
    [_A]: _DU,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteUserCommand");
var se_DeleteUserGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteUserGroupMessage(input, context),
    [_A]: _DUG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteUserGroupCommand");
var se_DescribeCacheClustersCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeCacheClustersMessage(input, context),
    [_A]: _DCCe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeCacheClustersCommand");
var se_DescribeCacheEngineVersionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeCacheEngineVersionsMessage(input, context),
    [_A]: _DCEV,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeCacheEngineVersionsCommand");
var se_DescribeCacheParameterGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeCacheParameterGroupsMessage(input, context),
    [_A]: _DCPGe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeCacheParameterGroupsCommand");
var se_DescribeCacheParametersCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeCacheParametersMessage(input, context),
    [_A]: _DCP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeCacheParametersCommand");
var se_DescribeCacheSecurityGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeCacheSecurityGroupsMessage(input, context),
    [_A]: _DCSGes,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeCacheSecurityGroupsCommand");
var se_DescribeCacheSubnetGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeCacheSubnetGroupsMessage(input, context),
    [_A]: _DCSGesc,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeCacheSubnetGroupsCommand");
var se_DescribeEngineDefaultParametersCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeEngineDefaultParametersMessage(input, context),
    [_A]: _DEDP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeEngineDefaultParametersCommand");
var se_DescribeEventsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeEventsMessage(input, context),
    [_A]: _DE,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeEventsCommand");
var se_DescribeGlobalReplicationGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeGlobalReplicationGroupsMessage(input, context),
    [_A]: _DGRGe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeGlobalReplicationGroupsCommand");
var se_DescribeReplicationGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeReplicationGroupsMessage(input, context),
    [_A]: _DRGe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeReplicationGroupsCommand");
var se_DescribeReservedCacheNodesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeReservedCacheNodesMessage(input, context),
    [_A]: _DRCN,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeReservedCacheNodesCommand");
var se_DescribeReservedCacheNodesOfferingsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeReservedCacheNodesOfferingsMessage(input, context),
    [_A]: _DRCNO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeReservedCacheNodesOfferingsCommand");
var se_DescribeServerlessCachesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeServerlessCachesRequest(input, context),
    [_A]: _DSCe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeServerlessCachesCommand");
var se_DescribeServerlessCacheSnapshotsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeServerlessCacheSnapshotsRequest(input, context),
    [_A]: _DSCSe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeServerlessCacheSnapshotsCommand");
var se_DescribeServiceUpdatesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeServiceUpdatesMessage(input, context),
    [_A]: _DSU,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeServiceUpdatesCommand");
var se_DescribeSnapshotsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeSnapshotsMessage(input, context),
    [_A]: _DSe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeSnapshotsCommand");
var se_DescribeUpdateActionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeUpdateActionsMessage(input, context),
    [_A]: _DUA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeUpdateActionsCommand");
var se_DescribeUserGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeUserGroupsMessage(input, context),
    [_A]: _DUGe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeUserGroupsCommand");
var se_DescribeUsersCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeUsersMessage(input, context),
    [_A]: _DUe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeUsersCommand");
var se_DisassociateGlobalReplicationGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DisassociateGlobalReplicationGroupMessage(input, context),
    [_A]: _DGRGi,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DisassociateGlobalReplicationGroupCommand");
var se_ExportServerlessCacheSnapshotCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ExportServerlessCacheSnapshotRequest(input, context),
    [_A]: _ESCS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ExportServerlessCacheSnapshotCommand");
var se_FailoverGlobalReplicationGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_FailoverGlobalReplicationGroupMessage(input, context),
    [_A]: _FGRG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_FailoverGlobalReplicationGroupCommand");
var se_IncreaseNodeGroupsInGlobalReplicationGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_IncreaseNodeGroupsInGlobalReplicationGroupMessage(input, context),
    [_A]: _INGIGRG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_IncreaseNodeGroupsInGlobalReplicationGroupCommand");
var se_IncreaseReplicaCountCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_IncreaseReplicaCountMessage(input, context),
    [_A]: _IRC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_IncreaseReplicaCountCommand");
var se_ListAllowedNodeTypeModificationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListAllowedNodeTypeModificationsMessage(input, context),
    [_A]: _LANTM,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ListAllowedNodeTypeModificationsCommand");
var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ListTagsForResourceMessage(input, context),
    [_A]: _LTFR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ListTagsForResourceCommand");
var se_ModifyCacheClusterCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyCacheClusterMessage(input, context),
    [_A]: _MCC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ModifyCacheClusterCommand");
var se_ModifyCacheParameterGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyCacheParameterGroupMessage(input, context),
    [_A]: _MCPG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ModifyCacheParameterGroupCommand");
var se_ModifyCacheSubnetGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyCacheSubnetGroupMessage(input, context),
    [_A]: _MCSG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ModifyCacheSubnetGroupCommand");
var se_ModifyGlobalReplicationGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyGlobalReplicationGroupMessage(input, context),
    [_A]: _MGRG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ModifyGlobalReplicationGroupCommand");
var se_ModifyReplicationGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyReplicationGroupMessage(input, context),
    [_A]: _MRG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ModifyReplicationGroupCommand");
var se_ModifyReplicationGroupShardConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyReplicationGroupShardConfigurationMessage(input, context),
    [_A]: _MRGSC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ModifyReplicationGroupShardConfigurationCommand");
var se_ModifyServerlessCacheCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyServerlessCacheRequest(input, context),
    [_A]: _MSC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ModifyServerlessCacheCommand");
var se_ModifyUserCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyUserMessage(input, context),
    [_A]: _MU,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ModifyUserCommand");
var se_ModifyUserGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyUserGroupMessage(input, context),
    [_A]: _MUG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ModifyUserGroupCommand");
var se_PurchaseReservedCacheNodesOfferingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_PurchaseReservedCacheNodesOfferingMessage(input, context),
    [_A]: _PRCNO,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_PurchaseReservedCacheNodesOfferingCommand");
var se_RebalanceSlotsInGlobalReplicationGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RebalanceSlotsInGlobalReplicationGroupMessage(input, context),
    [_A]: _RSIGRG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_RebalanceSlotsInGlobalReplicationGroupCommand");
var se_RebootCacheClusterCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RebootCacheClusterMessage(input, context),
    [_A]: _RCC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_RebootCacheClusterCommand");
var se_RemoveTagsFromResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RemoveTagsFromResourceMessage(input, context),
    [_A]: _RTFR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_RemoveTagsFromResourceCommand");
var se_ResetCacheParameterGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ResetCacheParameterGroupMessage(input, context),
    [_A]: _RCPG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ResetCacheParameterGroupCommand");
var se_RevokeCacheSecurityGroupIngressCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RevokeCacheSecurityGroupIngressMessage(input, context),
    [_A]: _RCSGI,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_RevokeCacheSecurityGroupIngressCommand");
var se_StartMigrationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_StartMigrationMessage(input, context),
    [_A]: _SM,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_StartMigrationCommand");
var se_TestFailoverCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_TestFailoverMessage(input, context),
    [_A]: _TF,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_TestFailoverCommand");
var se_TestMigrationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_TestMigrationMessage(input, context),
    [_A]: _TM,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_TestMigrationCommand");
var de_AddTagsToResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_TagListMessage(data.AddTagsToResourceResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_AddTagsToResourceCommand");
var de_AuthorizeCacheSecurityGroupIngressCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_AuthorizeCacheSecurityGroupIngressResult(data.AuthorizeCacheSecurityGroupIngressResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_AuthorizeCacheSecurityGroupIngressCommand");
var de_BatchApplyUpdateActionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_UpdateActionResultsMessage(data.BatchApplyUpdateActionResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_BatchApplyUpdateActionCommand");
var de_BatchStopUpdateActionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_UpdateActionResultsMessage(data.BatchStopUpdateActionResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_BatchStopUpdateActionCommand");
var de_CompleteMigrationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CompleteMigrationResponse(data.CompleteMigrationResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CompleteMigrationCommand");
var de_CopyServerlessCacheSnapshotCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CopyServerlessCacheSnapshotResponse(data.CopyServerlessCacheSnapshotResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CopyServerlessCacheSnapshotCommand");
var de_CopySnapshotCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CopySnapshotResult(data.CopySnapshotResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CopySnapshotCommand");
var de_CreateCacheClusterCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CreateCacheClusterResult(data.CreateCacheClusterResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateCacheClusterCommand");
var de_CreateCacheParameterGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CreateCacheParameterGroupResult(data.CreateCacheParameterGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateCacheParameterGroupCommand");
var de_CreateCacheSecurityGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CreateCacheSecurityGroupResult(data.CreateCacheSecurityGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateCacheSecurityGroupCommand");
var de_CreateCacheSubnetGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CreateCacheSubnetGroupResult(data.CreateCacheSubnetGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateCacheSubnetGroupCommand");
var de_CreateGlobalReplicationGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CreateGlobalReplicationGroupResult(data.CreateGlobalReplicationGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateGlobalReplicationGroupCommand");
var de_CreateReplicationGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CreateReplicationGroupResult(data.CreateReplicationGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateReplicationGroupCommand");
var de_CreateServerlessCacheCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CreateServerlessCacheResponse(data.CreateServerlessCacheResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateServerlessCacheCommand");
var de_CreateServerlessCacheSnapshotCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CreateServerlessCacheSnapshotResponse(data.CreateServerlessCacheSnapshotResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateServerlessCacheSnapshotCommand");
var de_CreateSnapshotCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CreateSnapshotResult(data.CreateSnapshotResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateSnapshotCommand");
var de_CreateUserCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_User(data.CreateUserResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateUserCommand");
var de_CreateUserGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_UserGroup(data.CreateUserGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateUserGroupCommand");
var de_DecreaseNodeGroupsInGlobalReplicationGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DecreaseNodeGroupsInGlobalReplicationGroupResult(
    data.DecreaseNodeGroupsInGlobalReplicationGroupResult,
    context
  );
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DecreaseNodeGroupsInGlobalReplicationGroupCommand");
var de_DecreaseReplicaCountCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DecreaseReplicaCountResult(data.DecreaseReplicaCountResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DecreaseReplicaCountCommand");
var de_DeleteCacheClusterCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DeleteCacheClusterResult(data.DeleteCacheClusterResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DeleteCacheClusterCommand");
var de_DeleteCacheParameterGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_DeleteCacheParameterGroupCommand");
var de_DeleteCacheSecurityGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_DeleteCacheSecurityGroupCommand");
var de_DeleteCacheSubnetGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_DeleteCacheSubnetGroupCommand");
var de_DeleteGlobalReplicationGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DeleteGlobalReplicationGroupResult(data.DeleteGlobalReplicationGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DeleteGlobalReplicationGroupCommand");
var de_DeleteReplicationGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DeleteReplicationGroupResult(data.DeleteReplicationGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DeleteReplicationGroupCommand");
var de_DeleteServerlessCacheCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DeleteServerlessCacheResponse(data.DeleteServerlessCacheResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DeleteServerlessCacheCommand");
var de_DeleteServerlessCacheSnapshotCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DeleteServerlessCacheSnapshotResponse(data.DeleteServerlessCacheSnapshotResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DeleteServerlessCacheSnapshotCommand");
var de_DeleteSnapshotCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DeleteSnapshotResult(data.DeleteSnapshotResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DeleteSnapshotCommand");
var de_DeleteUserCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_User(data.DeleteUserResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DeleteUserCommand");
var de_DeleteUserGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_UserGroup(data.DeleteUserGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DeleteUserGroupCommand");
var de_DescribeCacheClustersCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CacheClusterMessage(data.DescribeCacheClustersResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeCacheClustersCommand");
var de_DescribeCacheEngineVersionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CacheEngineVersionMessage(data.DescribeCacheEngineVersionsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeCacheEngineVersionsCommand");
var de_DescribeCacheParameterGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CacheParameterGroupsMessage(data.DescribeCacheParameterGroupsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeCacheParameterGroupsCommand");
var de_DescribeCacheParametersCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CacheParameterGroupDetails(data.DescribeCacheParametersResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeCacheParametersCommand");
var de_DescribeCacheSecurityGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CacheSecurityGroupMessage(data.DescribeCacheSecurityGroupsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeCacheSecurityGroupsCommand");
var de_DescribeCacheSubnetGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CacheSubnetGroupMessage(data.DescribeCacheSubnetGroupsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeCacheSubnetGroupsCommand");
var de_DescribeEngineDefaultParametersCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeEngineDefaultParametersResult(data.DescribeEngineDefaultParametersResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeEngineDefaultParametersCommand");
var de_DescribeEventsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_EventsMessage(data.DescribeEventsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeEventsCommand");
var de_DescribeGlobalReplicationGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeGlobalReplicationGroupsResult(data.DescribeGlobalReplicationGroupsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeGlobalReplicationGroupsCommand");
var de_DescribeReplicationGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ReplicationGroupMessage(data.DescribeReplicationGroupsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeReplicationGroupsCommand");
var de_DescribeReservedCacheNodesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ReservedCacheNodeMessage(data.DescribeReservedCacheNodesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeReservedCacheNodesCommand");
var de_DescribeReservedCacheNodesOfferingsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ReservedCacheNodesOfferingMessage(data.DescribeReservedCacheNodesOfferingsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeReservedCacheNodesOfferingsCommand");
var de_DescribeServerlessCachesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeServerlessCachesResponse(data.DescribeServerlessCachesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeServerlessCachesCommand");
var de_DescribeServerlessCacheSnapshotsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeServerlessCacheSnapshotsResponse(data.DescribeServerlessCacheSnapshotsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeServerlessCacheSnapshotsCommand");
var de_DescribeServiceUpdatesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ServiceUpdatesMessage(data.DescribeServiceUpdatesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeServiceUpdatesCommand");
var de_DescribeSnapshotsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeSnapshotsListMessage(data.DescribeSnapshotsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeSnapshotsCommand");
var de_DescribeUpdateActionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_UpdateActionsMessage(data.DescribeUpdateActionsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeUpdateActionsCommand");
var de_DescribeUserGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeUserGroupsResult(data.DescribeUserGroupsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeUserGroupsCommand");
var de_DescribeUsersCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeUsersResult(data.DescribeUsersResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeUsersCommand");
var de_DisassociateGlobalReplicationGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DisassociateGlobalReplicationGroupResult(data.DisassociateGlobalReplicationGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DisassociateGlobalReplicationGroupCommand");
var de_ExportServerlessCacheSnapshotCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ExportServerlessCacheSnapshotResponse(data.ExportServerlessCacheSnapshotResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ExportServerlessCacheSnapshotCommand");
var de_FailoverGlobalReplicationGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_FailoverGlobalReplicationGroupResult(data.FailoverGlobalReplicationGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_FailoverGlobalReplicationGroupCommand");
var de_IncreaseNodeGroupsInGlobalReplicationGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_IncreaseNodeGroupsInGlobalReplicationGroupResult(
    data.IncreaseNodeGroupsInGlobalReplicationGroupResult,
    context
  );
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_IncreaseNodeGroupsInGlobalReplicationGroupCommand");
var de_IncreaseReplicaCountCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_IncreaseReplicaCountResult(data.IncreaseReplicaCountResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_IncreaseReplicaCountCommand");
var de_ListAllowedNodeTypeModificationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_AllowedNodeTypeModificationsMessage(data.ListAllowedNodeTypeModificationsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ListAllowedNodeTypeModificationsCommand");
var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_TagListMessage(data.ListTagsForResourceResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ListTagsForResourceCommand");
var de_ModifyCacheClusterCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ModifyCacheClusterResult(data.ModifyCacheClusterResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ModifyCacheClusterCommand");
var de_ModifyCacheParameterGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CacheParameterGroupNameMessage(data.ModifyCacheParameterGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ModifyCacheParameterGroupCommand");
var de_ModifyCacheSubnetGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ModifyCacheSubnetGroupResult(data.ModifyCacheSubnetGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ModifyCacheSubnetGroupCommand");
var de_ModifyGlobalReplicationGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ModifyGlobalReplicationGroupResult(data.ModifyGlobalReplicationGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ModifyGlobalReplicationGroupCommand");
var de_ModifyReplicationGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ModifyReplicationGroupResult(data.ModifyReplicationGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ModifyReplicationGroupCommand");
var de_ModifyReplicationGroupShardConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ModifyReplicationGroupShardConfigurationResult(
    data.ModifyReplicationGroupShardConfigurationResult,
    context
  );
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ModifyReplicationGroupShardConfigurationCommand");
var de_ModifyServerlessCacheCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ModifyServerlessCacheResponse(data.ModifyServerlessCacheResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ModifyServerlessCacheCommand");
var de_ModifyUserCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_User(data.ModifyUserResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ModifyUserCommand");
var de_ModifyUserGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_UserGroup(data.ModifyUserGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ModifyUserGroupCommand");
var de_PurchaseReservedCacheNodesOfferingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_PurchaseReservedCacheNodesOfferingResult(data.PurchaseReservedCacheNodesOfferingResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_PurchaseReservedCacheNodesOfferingCommand");
var de_RebalanceSlotsInGlobalReplicationGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_RebalanceSlotsInGlobalReplicationGroupResult(
    data.RebalanceSlotsInGlobalReplicationGroupResult,
    context
  );
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_RebalanceSlotsInGlobalReplicationGroupCommand");
var de_RebootCacheClusterCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_RebootCacheClusterResult(data.RebootCacheClusterResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_RebootCacheClusterCommand");
var de_RemoveTagsFromResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_TagListMessage(data.RemoveTagsFromResourceResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_RemoveTagsFromResourceCommand");
var de_ResetCacheParameterGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CacheParameterGroupNameMessage(data.ResetCacheParameterGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ResetCacheParameterGroupCommand");
var de_RevokeCacheSecurityGroupIngressCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_RevokeCacheSecurityGroupIngressResult(data.RevokeCacheSecurityGroupIngressResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_RevokeCacheSecurityGroupIngressCommand");
var de_StartMigrationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_StartMigrationResponse(data.StartMigrationResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_StartMigrationCommand");
var de_TestFailoverCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_TestFailoverResult(data.TestFailoverResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_TestFailoverCommand");
var de_TestMigrationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_TestMigrationResponse(data.TestMigrationResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_TestMigrationCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseXmlErrorBody)(output.body, context)
  };
  const errorCode = loadQueryErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "CacheClusterNotFound":
    case "com.amazonaws.elasticache#CacheClusterNotFoundFault":
      throw await de_CacheClusterNotFoundFaultRes(parsedOutput, context);
    case "CacheParameterGroupNotFound":
    case "com.amazonaws.elasticache#CacheParameterGroupNotFoundFault":
      throw await de_CacheParameterGroupNotFoundFaultRes(parsedOutput, context);
    case "CacheSecurityGroupNotFound":
    case "com.amazonaws.elasticache#CacheSecurityGroupNotFoundFault":
      throw await de_CacheSecurityGroupNotFoundFaultRes(parsedOutput, context);
    case "CacheSubnetGroupNotFoundFault":
    case "com.amazonaws.elasticache#CacheSubnetGroupNotFoundFault":
      throw await de_CacheSubnetGroupNotFoundFaultRes(parsedOutput, context);
    case "InvalidARN":
    case "com.amazonaws.elasticache#InvalidARNFault":
      throw await de_InvalidARNFaultRes(parsedOutput, context);
    case "InvalidReplicationGroupState":
    case "com.amazonaws.elasticache#InvalidReplicationGroupStateFault":
      throw await de_InvalidReplicationGroupStateFaultRes(parsedOutput, context);
    case "InvalidServerlessCacheSnapshotStateFault":
    case "com.amazonaws.elasticache#InvalidServerlessCacheSnapshotStateFault":
      throw await de_InvalidServerlessCacheSnapshotStateFaultRes(parsedOutput, context);
    case "InvalidServerlessCacheStateFault":
    case "com.amazonaws.elasticache#InvalidServerlessCacheStateFault":
      throw await de_InvalidServerlessCacheStateFaultRes(parsedOutput, context);
    case "ReplicationGroupNotFoundFault":
    case "com.amazonaws.elasticache#ReplicationGroupNotFoundFault":
      throw await de_ReplicationGroupNotFoundFaultRes(parsedOutput, context);
    case "ReservedCacheNodeNotFound":
    case "com.amazonaws.elasticache#ReservedCacheNodeNotFoundFault":
      throw await de_ReservedCacheNodeNotFoundFaultRes(parsedOutput, context);
    case "ServerlessCacheNotFoundFault":
    case "com.amazonaws.elasticache#ServerlessCacheNotFoundFault":
      throw await de_ServerlessCacheNotFoundFaultRes(parsedOutput, context);
    case "ServerlessCacheSnapshotNotFoundFault":
    case "com.amazonaws.elasticache#ServerlessCacheSnapshotNotFoundFault":
      throw await de_ServerlessCacheSnapshotNotFoundFaultRes(parsedOutput, context);
    case "SnapshotNotFoundFault":
    case "com.amazonaws.elasticache#SnapshotNotFoundFault":
      throw await de_SnapshotNotFoundFaultRes(parsedOutput, context);
    case "TagQuotaPerResourceExceeded":
    case "com.amazonaws.elasticache#TagQuotaPerResourceExceeded":
      throw await de_TagQuotaPerResourceExceededRes(parsedOutput, context);
    case "UserGroupNotFound":
    case "com.amazonaws.elasticache#UserGroupNotFoundFault":
      throw await de_UserGroupNotFoundFaultRes(parsedOutput, context);
    case "UserNotFound":
    case "com.amazonaws.elasticache#UserNotFoundFault":
      throw await de_UserNotFoundFaultRes(parsedOutput, context);
    case "AuthorizationAlreadyExists":
    case "com.amazonaws.elasticache#AuthorizationAlreadyExistsFault":
      throw await de_AuthorizationAlreadyExistsFaultRes(parsedOutput, context);
    case "InvalidCacheSecurityGroupState":
    case "com.amazonaws.elasticache#InvalidCacheSecurityGroupStateFault":
      throw await de_InvalidCacheSecurityGroupStateFaultRes(parsedOutput, context);
    case "InvalidParameterCombination":
    case "com.amazonaws.elasticache#InvalidParameterCombinationException":
      throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
    case "InvalidParameterValue":
    case "com.amazonaws.elasticache#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ServiceUpdateNotFoundFault":
    case "com.amazonaws.elasticache#ServiceUpdateNotFoundFault":
      throw await de_ServiceUpdateNotFoundFaultRes(parsedOutput, context);
    case "ReplicationGroupNotUnderMigrationFault":
    case "com.amazonaws.elasticache#ReplicationGroupNotUnderMigrationFault":
      throw await de_ReplicationGroupNotUnderMigrationFaultRes(parsedOutput, context);
    case "ServerlessCacheSnapshotAlreadyExistsFault":
    case "com.amazonaws.elasticache#ServerlessCacheSnapshotAlreadyExistsFault":
      throw await de_ServerlessCacheSnapshotAlreadyExistsFaultRes(parsedOutput, context);
    case "ServerlessCacheSnapshotQuotaExceededFault":
    case "com.amazonaws.elasticache#ServerlessCacheSnapshotQuotaExceededFault":
      throw await de_ServerlessCacheSnapshotQuotaExceededFaultRes(parsedOutput, context);
    case "ServiceLinkedRoleNotFoundFault":
    case "com.amazonaws.elasticache#ServiceLinkedRoleNotFoundFault":
      throw await de_ServiceLinkedRoleNotFoundFaultRes(parsedOutput, context);
    case "InvalidSnapshotState":
    case "com.amazonaws.elasticache#InvalidSnapshotStateFault":
      throw await de_InvalidSnapshotStateFaultRes(parsedOutput, context);
    case "SnapshotAlreadyExistsFault":
    case "com.amazonaws.elasticache#SnapshotAlreadyExistsFault":
      throw await de_SnapshotAlreadyExistsFaultRes(parsedOutput, context);
    case "SnapshotQuotaExceededFault":
    case "com.amazonaws.elasticache#SnapshotQuotaExceededFault":
      throw await de_SnapshotQuotaExceededFaultRes(parsedOutput, context);
    case "CacheClusterAlreadyExists":
    case "com.amazonaws.elasticache#CacheClusterAlreadyExistsFault":
      throw await de_CacheClusterAlreadyExistsFaultRes(parsedOutput, context);
    case "ClusterQuotaForCustomerExceeded":
    case "com.amazonaws.elasticache#ClusterQuotaForCustomerExceededFault":
      throw await de_ClusterQuotaForCustomerExceededFaultRes(parsedOutput, context);
    case "InsufficientCacheClusterCapacity":
    case "com.amazonaws.elasticache#InsufficientCacheClusterCapacityFault":
      throw await de_InsufficientCacheClusterCapacityFaultRes(parsedOutput, context);
    case "InvalidVPCNetworkStateFault":
    case "com.amazonaws.elasticache#InvalidVPCNetworkStateFault":
      throw await de_InvalidVPCNetworkStateFaultRes(parsedOutput, context);
    case "NodeQuotaForClusterExceeded":
    case "com.amazonaws.elasticache#NodeQuotaForClusterExceededFault":
      throw await de_NodeQuotaForClusterExceededFaultRes(parsedOutput, context);
    case "NodeQuotaForCustomerExceeded":
    case "com.amazonaws.elasticache#NodeQuotaForCustomerExceededFault":
      throw await de_NodeQuotaForCustomerExceededFaultRes(parsedOutput, context);
    case "CacheParameterGroupAlreadyExists":
    case "com.amazonaws.elasticache#CacheParameterGroupAlreadyExistsFault":
      throw await de_CacheParameterGroupAlreadyExistsFaultRes(parsedOutput, context);
    case "CacheParameterGroupQuotaExceeded":
    case "com.amazonaws.elasticache#CacheParameterGroupQuotaExceededFault":
      throw await de_CacheParameterGroupQuotaExceededFaultRes(parsedOutput, context);
    case "InvalidCacheParameterGroupState":
    case "com.amazonaws.elasticache#InvalidCacheParameterGroupStateFault":
      throw await de_InvalidCacheParameterGroupStateFaultRes(parsedOutput, context);
    case "CacheSecurityGroupAlreadyExists":
    case "com.amazonaws.elasticache#CacheSecurityGroupAlreadyExistsFault":
      throw await de_CacheSecurityGroupAlreadyExistsFaultRes(parsedOutput, context);
    case "QuotaExceeded.CacheSecurityGroup":
    case "com.amazonaws.elasticache#CacheSecurityGroupQuotaExceededFault":
      throw await de_CacheSecurityGroupQuotaExceededFaultRes(parsedOutput, context);
    case "CacheSubnetGroupAlreadyExists":
    case "com.amazonaws.elasticache#CacheSubnetGroupAlreadyExistsFault":
      throw await de_CacheSubnetGroupAlreadyExistsFaultRes(parsedOutput, context);
    case "CacheSubnetGroupQuotaExceeded":
    case "com.amazonaws.elasticache#CacheSubnetGroupQuotaExceededFault":
      throw await de_CacheSubnetGroupQuotaExceededFaultRes(parsedOutput, context);
    case "CacheSubnetQuotaExceededFault":
    case "com.amazonaws.elasticache#CacheSubnetQuotaExceededFault":
      throw await de_CacheSubnetQuotaExceededFaultRes(parsedOutput, context);
    case "InvalidSubnet":
    case "com.amazonaws.elasticache#InvalidSubnet":
      throw await de_InvalidSubnetRes(parsedOutput, context);
    case "SubnetNotAllowedFault":
    case "com.amazonaws.elasticache#SubnetNotAllowedFault":
      throw await de_SubnetNotAllowedFaultRes(parsedOutput, context);
    case "GlobalReplicationGroupAlreadyExistsFault":
    case "com.amazonaws.elasticache#GlobalReplicationGroupAlreadyExistsFault":
      throw await de_GlobalReplicationGroupAlreadyExistsFaultRes(parsedOutput, context);
    case "GlobalReplicationGroupNotFoundFault":
    case "com.amazonaws.elasticache#GlobalReplicationGroupNotFoundFault":
      throw await de_GlobalReplicationGroupNotFoundFaultRes(parsedOutput, context);
    case "InvalidCacheClusterState":
    case "com.amazonaws.elasticache#InvalidCacheClusterStateFault":
      throw await de_InvalidCacheClusterStateFaultRes(parsedOutput, context);
    case "InvalidGlobalReplicationGroupState":
    case "com.amazonaws.elasticache#InvalidGlobalReplicationGroupStateFault":
      throw await de_InvalidGlobalReplicationGroupStateFaultRes(parsedOutput, context);
    case "InvalidUserGroupState":
    case "com.amazonaws.elasticache#InvalidUserGroupStateFault":
      throw await de_InvalidUserGroupStateFaultRes(parsedOutput, context);
    case "NodeGroupsPerReplicationGroupQuotaExceeded":
    case "com.amazonaws.elasticache#NodeGroupsPerReplicationGroupQuotaExceededFault":
      throw await de_NodeGroupsPerReplicationGroupQuotaExceededFaultRes(parsedOutput, context);
    case "ReplicationGroupAlreadyExists":
    case "com.amazonaws.elasticache#ReplicationGroupAlreadyExistsFault":
      throw await de_ReplicationGroupAlreadyExistsFaultRes(parsedOutput, context);
    case "InvalidCredentialsException":
    case "com.amazonaws.elasticache#InvalidCredentialsException":
      throw await de_InvalidCredentialsExceptionRes(parsedOutput, context);
    case "ServerlessCacheAlreadyExistsFault":
    case "com.amazonaws.elasticache#ServerlessCacheAlreadyExistsFault":
      throw await de_ServerlessCacheAlreadyExistsFaultRes(parsedOutput, context);
    case "ServerlessCacheQuotaForCustomerExceededFault":
    case "com.amazonaws.elasticache#ServerlessCacheQuotaForCustomerExceededFault":
      throw await de_ServerlessCacheQuotaForCustomerExceededFaultRes(parsedOutput, context);
    case "SnapshotFeatureNotSupportedFault":
    case "com.amazonaws.elasticache#SnapshotFeatureNotSupportedFault":
      throw await de_SnapshotFeatureNotSupportedFaultRes(parsedOutput, context);
    case "DuplicateUserName":
    case "com.amazonaws.elasticache#DuplicateUserNameFault":
      throw await de_DuplicateUserNameFaultRes(parsedOutput, context);
    case "UserAlreadyExists":
    case "com.amazonaws.elasticache#UserAlreadyExistsFault":
      throw await de_UserAlreadyExistsFaultRes(parsedOutput, context);
    case "UserQuotaExceeded":
    case "com.amazonaws.elasticache#UserQuotaExceededFault":
      throw await de_UserQuotaExceededFaultRes(parsedOutput, context);
    case "DefaultUserRequired":
    case "com.amazonaws.elasticache#DefaultUserRequired":
      throw await de_DefaultUserRequiredRes(parsedOutput, context);
    case "UserGroupAlreadyExists":
    case "com.amazonaws.elasticache#UserGroupAlreadyExistsFault":
      throw await de_UserGroupAlreadyExistsFaultRes(parsedOutput, context);
    case "UserGroupQuotaExceeded":
    case "com.amazonaws.elasticache#UserGroupQuotaExceededFault":
      throw await de_UserGroupQuotaExceededFaultRes(parsedOutput, context);
    case "NoOperationFault":
    case "com.amazonaws.elasticache#NoOperationFault":
      throw await de_NoOperationFaultRes(parsedOutput, context);
    case "CacheSubnetGroupInUse":
    case "com.amazonaws.elasticache#CacheSubnetGroupInUse":
      throw await de_CacheSubnetGroupInUseRes(parsedOutput, context);
    case "DefaultUserAssociatedToUserGroup":
    case "com.amazonaws.elasticache#DefaultUserAssociatedToUserGroupFault":
      throw await de_DefaultUserAssociatedToUserGroupFaultRes(parsedOutput, context);
    case "InvalidUserState":
    case "com.amazonaws.elasticache#InvalidUserStateFault":
      throw await de_InvalidUserStateFaultRes(parsedOutput, context);
    case "ReservedCacheNodesOfferingNotFound":
    case "com.amazonaws.elasticache#ReservedCacheNodesOfferingNotFoundFault":
      throw await de_ReservedCacheNodesOfferingNotFoundFaultRes(parsedOutput, context);
    case "InvalidKMSKeyFault":
    case "com.amazonaws.elasticache#InvalidKMSKeyFault":
      throw await de_InvalidKMSKeyFaultRes(parsedOutput, context);
    case "SubnetInUse":
    case "com.amazonaws.elasticache#SubnetInUse":
      throw await de_SubnetInUseRes(parsedOutput, context);
    case "ReservedCacheNodeAlreadyExists":
    case "com.amazonaws.elasticache#ReservedCacheNodeAlreadyExistsFault":
      throw await de_ReservedCacheNodeAlreadyExistsFaultRes(parsedOutput, context);
    case "ReservedCacheNodeQuotaExceeded":
    case "com.amazonaws.elasticache#ReservedCacheNodeQuotaExceededFault":
      throw await de_ReservedCacheNodeQuotaExceededFaultRes(parsedOutput, context);
    case "TagNotFound":
    case "com.amazonaws.elasticache#TagNotFoundFault":
      throw await de_TagNotFoundFaultRes(parsedOutput, context);
    case "AuthorizationNotFound":
    case "com.amazonaws.elasticache#AuthorizationNotFoundFault":
      throw await de_AuthorizationNotFoundFaultRes(parsedOutput, context);
    case "ReplicationGroupAlreadyUnderMigrationFault":
    case "com.amazonaws.elasticache#ReplicationGroupAlreadyUnderMigrationFault":
      throw await de_ReplicationGroupAlreadyUnderMigrationFaultRes(parsedOutput, context);
    case "APICallRateForCustomerExceeded":
    case "com.amazonaws.elasticache#APICallRateForCustomerExceededFault":
      throw await de_APICallRateForCustomerExceededFaultRes(parsedOutput, context);
    case "NodeGroupNotFoundFault":
    case "com.amazonaws.elasticache#NodeGroupNotFoundFault":
      throw await de_NodeGroupNotFoundFaultRes(parsedOutput, context);
    case "TestFailoverNotAvailableFault":
    case "com.amazonaws.elasticache#TestFailoverNotAvailableFault":
      throw await de_TestFailoverNotAvailableFaultRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
  }
}, "de_CommandError");
var de_APICallRateForCustomerExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_APICallRateForCustomerExceededFault(body.Error, context);
  const exception = new APICallRateForCustomerExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_APICallRateForCustomerExceededFaultRes");
var de_AuthorizationAlreadyExistsFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_AuthorizationAlreadyExistsFault(body.Error, context);
  const exception = new AuthorizationAlreadyExistsFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_AuthorizationAlreadyExistsFaultRes");
var de_AuthorizationNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_AuthorizationNotFoundFault(body.Error, context);
  const exception = new AuthorizationNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_AuthorizationNotFoundFaultRes");
var de_CacheClusterAlreadyExistsFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_CacheClusterAlreadyExistsFault(body.Error, context);
  const exception = new CacheClusterAlreadyExistsFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_CacheClusterAlreadyExistsFaultRes");
var de_CacheClusterNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_CacheClusterNotFoundFault(body.Error, context);
  const exception = new CacheClusterNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_CacheClusterNotFoundFaultRes");
var de_CacheParameterGroupAlreadyExistsFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_CacheParameterGroupAlreadyExistsFault(body.Error, context);
  const exception = new CacheParameterGroupAlreadyExistsFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_CacheParameterGroupAlreadyExistsFaultRes");
var de_CacheParameterGroupNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_CacheParameterGroupNotFoundFault(body.Error, context);
  const exception = new CacheParameterGroupNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_CacheParameterGroupNotFoundFaultRes");
var de_CacheParameterGroupQuotaExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_CacheParameterGroupQuotaExceededFault(body.Error, context);
  const exception = new CacheParameterGroupQuotaExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_CacheParameterGroupQuotaExceededFaultRes");
var de_CacheSecurityGroupAlreadyExistsFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_CacheSecurityGroupAlreadyExistsFault(body.Error, context);
  const exception = new CacheSecurityGroupAlreadyExistsFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_CacheSecurityGroupAlreadyExistsFaultRes");
var de_CacheSecurityGroupNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_CacheSecurityGroupNotFoundFault(body.Error, context);
  const exception = new CacheSecurityGroupNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_CacheSecurityGroupNotFoundFaultRes");
var de_CacheSecurityGroupQuotaExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_CacheSecurityGroupQuotaExceededFault(body.Error, context);
  const exception = new CacheSecurityGroupQuotaExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_CacheSecurityGroupQuotaExceededFaultRes");
var de_CacheSubnetGroupAlreadyExistsFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_CacheSubnetGroupAlreadyExistsFault(body.Error, context);
  const exception = new CacheSubnetGroupAlreadyExistsFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_CacheSubnetGroupAlreadyExistsFaultRes");
var de_CacheSubnetGroupInUseRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_CacheSubnetGroupInUse(body.Error, context);
  const exception = new CacheSubnetGroupInUse({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_CacheSubnetGroupInUseRes");
var de_CacheSubnetGroupNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_CacheSubnetGroupNotFoundFault(body.Error, context);
  const exception = new CacheSubnetGroupNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_CacheSubnetGroupNotFoundFaultRes");
var de_CacheSubnetGroupQuotaExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_CacheSubnetGroupQuotaExceededFault(body.Error, context);
  const exception = new CacheSubnetGroupQuotaExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_CacheSubnetGroupQuotaExceededFaultRes");
var de_CacheSubnetQuotaExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_CacheSubnetQuotaExceededFault(body.Error, context);
  const exception = new CacheSubnetQuotaExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_CacheSubnetQuotaExceededFaultRes");
var de_ClusterQuotaForCustomerExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ClusterQuotaForCustomerExceededFault(body.Error, context);
  const exception = new ClusterQuotaForCustomerExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ClusterQuotaForCustomerExceededFaultRes");
var de_DefaultUserAssociatedToUserGroupFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DefaultUserAssociatedToUserGroupFault(body.Error, context);
  const exception = new DefaultUserAssociatedToUserGroupFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DefaultUserAssociatedToUserGroupFaultRes");
var de_DefaultUserRequiredRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DefaultUserRequired(body.Error, context);
  const exception = new DefaultUserRequired({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DefaultUserRequiredRes");
var de_DuplicateUserNameFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DuplicateUserNameFault(body.Error, context);
  const exception = new DuplicateUserNameFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DuplicateUserNameFaultRes");
var de_GlobalReplicationGroupAlreadyExistsFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_GlobalReplicationGroupAlreadyExistsFault(body.Error, context);
  const exception = new GlobalReplicationGroupAlreadyExistsFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_GlobalReplicationGroupAlreadyExistsFaultRes");
var de_GlobalReplicationGroupNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_GlobalReplicationGroupNotFoundFault(body.Error, context);
  const exception = new GlobalReplicationGroupNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_GlobalReplicationGroupNotFoundFaultRes");
var de_InsufficientCacheClusterCapacityFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InsufficientCacheClusterCapacityFault(body.Error, context);
  const exception = new InsufficientCacheClusterCapacityFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InsufficientCacheClusterCapacityFaultRes");
var de_InvalidARNFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidARNFault(body.Error, context);
  const exception = new InvalidARNFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidARNFaultRes");
var de_InvalidCacheClusterStateFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidCacheClusterStateFault(body.Error, context);
  const exception = new InvalidCacheClusterStateFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidCacheClusterStateFaultRes");
var de_InvalidCacheParameterGroupStateFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidCacheParameterGroupStateFault(body.Error, context);
  const exception = new InvalidCacheParameterGroupStateFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidCacheParameterGroupStateFaultRes");
var de_InvalidCacheSecurityGroupStateFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidCacheSecurityGroupStateFault(body.Error, context);
  const exception = new InvalidCacheSecurityGroupStateFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidCacheSecurityGroupStateFaultRes");
var de_InvalidCredentialsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidCredentialsException(body.Error, context);
  const exception = new InvalidCredentialsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidCredentialsExceptionRes");
var de_InvalidGlobalReplicationGroupStateFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidGlobalReplicationGroupStateFault(body.Error, context);
  const exception = new InvalidGlobalReplicationGroupStateFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidGlobalReplicationGroupStateFaultRes");
var de_InvalidKMSKeyFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidKMSKeyFault(body.Error, context);
  const exception = new InvalidKMSKeyFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidKMSKeyFaultRes");
var de_InvalidParameterCombinationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidParameterCombinationException(body.Error, context);
  const exception = new InvalidParameterCombinationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidParameterCombinationExceptionRes");
var de_InvalidParameterValueExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidParameterValueException(body.Error, context);
  const exception = new InvalidParameterValueException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidParameterValueExceptionRes");
var de_InvalidReplicationGroupStateFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidReplicationGroupStateFault(body.Error, context);
  const exception = new InvalidReplicationGroupStateFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidReplicationGroupStateFaultRes");
var de_InvalidServerlessCacheSnapshotStateFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidServerlessCacheSnapshotStateFault(body.Error, context);
  const exception = new InvalidServerlessCacheSnapshotStateFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidServerlessCacheSnapshotStateFaultRes");
var de_InvalidServerlessCacheStateFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidServerlessCacheStateFault(body.Error, context);
  const exception = new InvalidServerlessCacheStateFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidServerlessCacheStateFaultRes");
var de_InvalidSnapshotStateFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidSnapshotStateFault(body.Error, context);
  const exception = new InvalidSnapshotStateFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidSnapshotStateFaultRes");
var de_InvalidSubnetRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidSubnet(body.Error, context);
  const exception = new InvalidSubnet({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidSubnetRes");
var de_InvalidUserGroupStateFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidUserGroupStateFault(body.Error, context);
  const exception = new InvalidUserGroupStateFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidUserGroupStateFaultRes");
var de_InvalidUserStateFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidUserStateFault(body.Error, context);
  const exception = new InvalidUserStateFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidUserStateFaultRes");
var de_InvalidVPCNetworkStateFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidVPCNetworkStateFault(body.Error, context);
  const exception = new InvalidVPCNetworkStateFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidVPCNetworkStateFaultRes");
var de_NodeGroupNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_NodeGroupNotFoundFault(body.Error, context);
  const exception = new NodeGroupNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_NodeGroupNotFoundFaultRes");
var de_NodeGroupsPerReplicationGroupQuotaExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_NodeGroupsPerReplicationGroupQuotaExceededFault(body.Error, context);
  const exception = new NodeGroupsPerReplicationGroupQuotaExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_NodeGroupsPerReplicationGroupQuotaExceededFaultRes");
var de_NodeQuotaForClusterExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_NodeQuotaForClusterExceededFault(body.Error, context);
  const exception = new NodeQuotaForClusterExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_NodeQuotaForClusterExceededFaultRes");
var de_NodeQuotaForCustomerExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_NodeQuotaForCustomerExceededFault(body.Error, context);
  const exception = new NodeQuotaForCustomerExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_NodeQuotaForCustomerExceededFaultRes");
var de_NoOperationFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_NoOperationFault(body.Error, context);
  const exception = new NoOperationFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_NoOperationFaultRes");
var de_ReplicationGroupAlreadyExistsFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ReplicationGroupAlreadyExistsFault(body.Error, context);
  const exception = new ReplicationGroupAlreadyExistsFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ReplicationGroupAlreadyExistsFaultRes");
var de_ReplicationGroupAlreadyUnderMigrationFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ReplicationGroupAlreadyUnderMigrationFault(body.Error, context);
  const exception = new ReplicationGroupAlreadyUnderMigrationFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ReplicationGroupAlreadyUnderMigrationFaultRes");
var de_ReplicationGroupNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ReplicationGroupNotFoundFault(body.Error, context);
  const exception = new ReplicationGroupNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ReplicationGroupNotFoundFaultRes");
var de_ReplicationGroupNotUnderMigrationFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ReplicationGroupNotUnderMigrationFault(body.Error, context);
  const exception = new ReplicationGroupNotUnderMigrationFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ReplicationGroupNotUnderMigrationFaultRes");
var de_ReservedCacheNodeAlreadyExistsFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ReservedCacheNodeAlreadyExistsFault(body.Error, context);
  const exception = new ReservedCacheNodeAlreadyExistsFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ReservedCacheNodeAlreadyExistsFaultRes");
var de_ReservedCacheNodeNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ReservedCacheNodeNotFoundFault(body.Error, context);
  const exception = new ReservedCacheNodeNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ReservedCacheNodeNotFoundFaultRes");
var de_ReservedCacheNodeQuotaExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ReservedCacheNodeQuotaExceededFault(body.Error, context);
  const exception = new ReservedCacheNodeQuotaExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ReservedCacheNodeQuotaExceededFaultRes");
var de_ReservedCacheNodesOfferingNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ReservedCacheNodesOfferingNotFoundFault(body.Error, context);
  const exception = new ReservedCacheNodesOfferingNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ReservedCacheNodesOfferingNotFoundFaultRes");
var de_ServerlessCacheAlreadyExistsFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ServerlessCacheAlreadyExistsFault(body.Error, context);
  const exception = new ServerlessCacheAlreadyExistsFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ServerlessCacheAlreadyExistsFaultRes");
var de_ServerlessCacheNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ServerlessCacheNotFoundFault(body.Error, context);
  const exception = new ServerlessCacheNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ServerlessCacheNotFoundFaultRes");
var de_ServerlessCacheQuotaForCustomerExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ServerlessCacheQuotaForCustomerExceededFault(body.Error, context);
  const exception = new ServerlessCacheQuotaForCustomerExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ServerlessCacheQuotaForCustomerExceededFaultRes");
var de_ServerlessCacheSnapshotAlreadyExistsFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ServerlessCacheSnapshotAlreadyExistsFault(body.Error, context);
  const exception = new ServerlessCacheSnapshotAlreadyExistsFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ServerlessCacheSnapshotAlreadyExistsFaultRes");
var de_ServerlessCacheSnapshotNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ServerlessCacheSnapshotNotFoundFault(body.Error, context);
  const exception = new ServerlessCacheSnapshotNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ServerlessCacheSnapshotNotFoundFaultRes");
var de_ServerlessCacheSnapshotQuotaExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ServerlessCacheSnapshotQuotaExceededFault(body.Error, context);
  const exception = new ServerlessCacheSnapshotQuotaExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ServerlessCacheSnapshotQuotaExceededFaultRes");
var de_ServiceLinkedRoleNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ServiceLinkedRoleNotFoundFault(body.Error, context);
  const exception = new ServiceLinkedRoleNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ServiceLinkedRoleNotFoundFaultRes");
var de_ServiceUpdateNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ServiceUpdateNotFoundFault(body.Error, context);
  const exception = new ServiceUpdateNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ServiceUpdateNotFoundFaultRes");
var de_SnapshotAlreadyExistsFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_SnapshotAlreadyExistsFault(body.Error, context);
  const exception = new SnapshotAlreadyExistsFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_SnapshotAlreadyExistsFaultRes");
var de_SnapshotFeatureNotSupportedFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_SnapshotFeatureNotSupportedFault(body.Error, context);
  const exception = new SnapshotFeatureNotSupportedFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_SnapshotFeatureNotSupportedFaultRes");
var de_SnapshotNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_SnapshotNotFoundFault(body.Error, context);
  const exception = new SnapshotNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_SnapshotNotFoundFaultRes");
var de_SnapshotQuotaExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_SnapshotQuotaExceededFault(body.Error, context);
  const exception = new SnapshotQuotaExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_SnapshotQuotaExceededFaultRes");
var de_SubnetInUseRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_SubnetInUse(body.Error, context);
  const exception = new SubnetInUse({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_SubnetInUseRes");
var de_SubnetNotAllowedFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_SubnetNotAllowedFault(body.Error, context);
  const exception = new SubnetNotAllowedFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_SubnetNotAllowedFaultRes");
var de_TagNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_TagNotFoundFault(body.Error, context);
  const exception = new TagNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_TagNotFoundFaultRes");
var de_TagQuotaPerResourceExceededRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_TagQuotaPerResourceExceeded(body.Error, context);
  const exception = new TagQuotaPerResourceExceeded({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_TagQuotaPerResourceExceededRes");
var de_TestFailoverNotAvailableFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_TestFailoverNotAvailableFault(body.Error, context);
  const exception = new TestFailoverNotAvailableFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_TestFailoverNotAvailableFaultRes");
var de_UserAlreadyExistsFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_UserAlreadyExistsFault(body.Error, context);
  const exception = new UserAlreadyExistsFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_UserAlreadyExistsFaultRes");
var de_UserGroupAlreadyExistsFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_UserGroupAlreadyExistsFault(body.Error, context);
  const exception = new UserGroupAlreadyExistsFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_UserGroupAlreadyExistsFaultRes");
var de_UserGroupNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_UserGroupNotFoundFault(body.Error, context);
  const exception = new UserGroupNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_UserGroupNotFoundFaultRes");
var de_UserGroupQuotaExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_UserGroupQuotaExceededFault(body.Error, context);
  const exception = new UserGroupQuotaExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_UserGroupQuotaExceededFaultRes");
var de_UserNotFoundFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_UserNotFoundFault(body.Error, context);
  const exception = new UserNotFoundFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_UserNotFoundFaultRes");
var de_UserQuotaExceededFaultRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_UserQuotaExceededFault(body.Error, context);
  const exception = new UserQuotaExceededFault({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_UserQuotaExceededFaultRes");
var se_AddTagsToResourceMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_AddTagsToResourceMessage");
var se_AuthenticationMode = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_Ty] != null) {
    entries[_Ty] = input[_Ty];
  }
  if (input[_P] != null) {
    const memberEntries = se_PasswordListInput(input[_P], context);
    if (input[_P]?.length === 0) {
      entries.Passwords = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Passwords.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_AuthenticationMode");
var se_AuthorizeCacheSecurityGroupIngressMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_CSGN] != null) {
    entries[_CSGN] = input[_CSGN];
  }
  if (input[_ECSGN] != null) {
    entries[_ECSGN] = input[_ECSGN];
  }
  if (input[_ECSGOI] != null) {
    entries[_ECSGOI] = input[_ECSGOI];
  }
  return entries;
}, "se_AuthorizeCacheSecurityGroupIngressMessage");
var se_AvailabilityZonesList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`AvailabilityZone.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_AvailabilityZonesList");
var se_BatchApplyUpdateActionMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RGI] != null) {
    const memberEntries = se_ReplicationGroupIdList(input[_RGI], context);
    if (input[_RGI]?.length === 0) {
      entries.ReplicationGroupIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReplicationGroupIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CCI] != null) {
    const memberEntries = se_CacheClusterIdList(input[_CCI], context);
    if (input[_CCI]?.length === 0) {
      entries.CacheClusterIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CacheClusterIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SUN] != null) {
    entries[_SUN] = input[_SUN];
  }
  return entries;
}, "se_BatchApplyUpdateActionMessage");
var se_BatchStopUpdateActionMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RGI] != null) {
    const memberEntries = se_ReplicationGroupIdList(input[_RGI], context);
    if (input[_RGI]?.length === 0) {
      entries.ReplicationGroupIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReplicationGroupIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CCI] != null) {
    const memberEntries = se_CacheClusterIdList(input[_CCI], context);
    if (input[_CCI]?.length === 0) {
      entries.CacheClusterIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CacheClusterIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SUN] != null) {
    entries[_SUN] = input[_SUN];
  }
  return entries;
}, "se_BatchStopUpdateActionMessage");
var se_CacheClusterIdList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_CacheClusterIdList");
var se_CacheNodeIdsList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`CacheNodeId.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_CacheNodeIdsList");
var se_CacheSecurityGroupNameList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`CacheSecurityGroupName.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_CacheSecurityGroupNameList");
var se_CacheUsageLimits = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DSa] != null) {
    const memberEntries = se_DataStorage(input[_DSa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DataStorage.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ECPUPS] != null) {
    const memberEntries = se_ECPUPerSecond(input[_ECPUPS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ECPUPerSecond.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CacheUsageLimits");
var se_CloudWatchLogsDestinationDetails = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_LG] != null) {
    entries[_LG] = input[_LG];
  }
  return entries;
}, "se_CloudWatchLogsDestinationDetails");
var se_CompleteMigrationMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RGIe] != null) {
    entries[_RGIe] = input[_RGIe];
  }
  if (input[_F] != null) {
    entries[_F] = input[_F];
  }
  return entries;
}, "se_CompleteMigrationMessage");
var se_ConfigureShard = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_NGI] != null) {
    entries[_NGI] = input[_NGI];
  }
  if (input[_NRC] != null) {
    entries[_NRC] = input[_NRC];
  }
  if (input[_PAZ] != null) {
    const memberEntries = se_PreferredAvailabilityZoneList(input[_PAZ], context);
    if (input[_PAZ]?.length === 0) {
      entries.PreferredAvailabilityZones = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PreferredAvailabilityZones.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_POA] != null) {
    const memberEntries = se_PreferredOutpostArnList(input[_POA], context);
    if (input[_POA]?.length === 0) {
      entries.PreferredOutpostArns = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PreferredOutpostArns.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_ConfigureShard");
var se_CopyServerlessCacheSnapshotRequest = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SSCSN] != null) {
    entries[_SSCSN] = input[_SSCSN];
  }
  if (input[_TSCSN] != null) {
    entries[_TSCSN] = input[_TSCSN];
  }
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CopyServerlessCacheSnapshotRequest");
var se_CopySnapshotMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SSN] != null) {
    entries[_SSN] = input[_SSN];
  }
  if (input[_TSN] != null) {
    entries[_TSN] = input[_TSN];
  }
  if (input[_TB] != null) {
    entries[_TB] = input[_TB];
  }
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CopySnapshotMessage");
var se_CreateCacheClusterMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_CCIa] != null) {
    entries[_CCIa] = input[_CCIa];
  }
  if (input[_RGIe] != null) {
    entries[_RGIe] = input[_RGIe];
  }
  if (input[_AZM] != null) {
    entries[_AZM] = input[_AZM];
  }
  if (input[_PAZr] != null) {
    entries[_PAZr] = input[_PAZr];
  }
  if (input[_PAZ] != null) {
    const memberEntries = se_PreferredAvailabilityZoneList(input[_PAZ], context);
    if (input[_PAZ]?.length === 0) {
      entries.PreferredAvailabilityZones = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PreferredAvailabilityZones.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NCN] != null) {
    entries[_NCN] = input[_NCN];
  }
  if (input[_CNT] != null) {
    entries[_CNT] = input[_CNT];
  }
  if (input[_E] != null) {
    entries[_E] = input[_E];
  }
  if (input[_EV] != null) {
    entries[_EV] = input[_EV];
  }
  if (input[_CPGN] != null) {
    entries[_CPGN] = input[_CPGN];
  }
  if (input[_CSGNa] != null) {
    entries[_CSGNa] = input[_CSGNa];
  }
  if (input[_CSGNac] != null) {
    const memberEntries = se_CacheSecurityGroupNameList(input[_CSGNac], context);
    if (input[_CSGNac]?.length === 0) {
      entries.CacheSecurityGroupNames = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CacheSecurityGroupNames.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SGI] != null) {
    const memberEntries = se_SecurityGroupIdsList(input[_SGI], context);
    if (input[_SGI]?.length === 0) {
      entries.SecurityGroupIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SA] != null) {
    const memberEntries = se_SnapshotArnsList(input[_SA], context);
    if (input[_SA]?.length === 0) {
      entries.SnapshotArns = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SnapshotArns.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SN] != null) {
    entries[_SN] = input[_SN];
  }
  if (input[_PMW] != null) {
    entries[_PMW] = input[_PMW];
  }
  if (input[_Po] != null) {
    entries[_Po] = input[_Po];
  }
  if (input[_NTA] != null) {
    entries[_NTA] = input[_NTA];
  }
  if (input[_AMVU] != null) {
    entries[_AMVU] = input[_AMVU];
  }
  if (input[_SRL] != null) {
    entries[_SRL] = input[_SRL];
  }
  if (input[_SW] != null) {
    entries[_SW] = input[_SW];
  }
  if (input[_AT] != null) {
    entries[_AT] = input[_AT];
  }
  if (input[_OM] != null) {
    entries[_OM] = input[_OM];
  }
  if (input[_POAr] != null) {
    entries[_POAr] = input[_POAr];
  }
  if (input[_POA] != null) {
    const memberEntries = se_PreferredOutpostArnList(input[_POA], context);
    if (input[_POA]?.length === 0) {
      entries.PreferredOutpostArns = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PreferredOutpostArns.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_LDC] != null) {
    const memberEntries = se_LogDeliveryConfigurationRequestList(input[_LDC], context);
    if (input[_LDC]?.length === 0) {
      entries.LogDeliveryConfigurations = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LogDeliveryConfigurations.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TEE] != null) {
    entries[_TEE] = input[_TEE];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_ID] != null) {
    entries[_ID] = input[_ID];
  }
  return entries;
}, "se_CreateCacheClusterMessage");
var se_CreateCacheParameterGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_CPGN] != null) {
    entries[_CPGN] = input[_CPGN];
  }
  if (input[_CPGF] != null) {
    entries[_CPGF] = input[_CPGF];
  }
  if (input[_D] != null) {
    entries[_D] = input[_D];
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CreateCacheParameterGroupMessage");
var se_CreateCacheSecurityGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_CSGN] != null) {
    entries[_CSGN] = input[_CSGN];
  }
  if (input[_D] != null) {
    entries[_D] = input[_D];
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CreateCacheSecurityGroupMessage");
var se_CreateCacheSubnetGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_CSGNa] != null) {
    entries[_CSGNa] = input[_CSGNa];
  }
  if (input[_CSGD] != null) {
    entries[_CSGD] = input[_CSGD];
  }
  if (input[_SI] != null) {
    const memberEntries = se_SubnetIdentifierList(input[_SI], context);
    if (input[_SI]?.length === 0) {
      entries.SubnetIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CreateCacheSubnetGroupMessage");
var se_CreateGlobalReplicationGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_GRGIS] != null) {
    entries[_GRGIS] = input[_GRGIS];
  }
  if (input[_GRGD] != null) {
    entries[_GRGD] = input[_GRGD];
  }
  if (input[_PRGI] != null) {
    entries[_PRGI] = input[_PRGI];
  }
  return entries;
}, "se_CreateGlobalReplicationGroupMessage");
var se_CreateReplicationGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RGIe] != null) {
    entries[_RGIe] = input[_RGIe];
  }
  if (input[_RGD] != null) {
    entries[_RGD] = input[_RGD];
  }
  if (input[_GRGI] != null) {
    entries[_GRGI] = input[_GRGI];
  }
  if (input[_PCI] != null) {
    entries[_PCI] = input[_PCI];
  }
  if (input[_AFE] != null) {
    entries[_AFE] = input[_AFE];
  }
  if (input[_MAZE] != null) {
    entries[_MAZE] = input[_MAZE];
  }
  if (input[_NCC] != null) {
    entries[_NCC] = input[_NCC];
  }
  if (input[_PCCAZ] != null) {
    const memberEntries = se_AvailabilityZonesList(input[_PCCAZ], context);
    if (input[_PCCAZ]?.length === 0) {
      entries.PreferredCacheClusterAZs = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PreferredCacheClusterAZs.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NNG] != null) {
    entries[_NNG] = input[_NNG];
  }
  if (input[_RPNG] != null) {
    entries[_RPNG] = input[_RPNG];
  }
  if (input[_NGC] != null) {
    const memberEntries = se_NodeGroupConfigurationList(input[_NGC], context);
    if (input[_NGC]?.length === 0) {
      entries.NodeGroupConfiguration = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NodeGroupConfiguration.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CNT] != null) {
    entries[_CNT] = input[_CNT];
  }
  if (input[_E] != null) {
    entries[_E] = input[_E];
  }
  if (input[_EV] != null) {
    entries[_EV] = input[_EV];
  }
  if (input[_CPGN] != null) {
    entries[_CPGN] = input[_CPGN];
  }
  if (input[_CSGNa] != null) {
    entries[_CSGNa] = input[_CSGNa];
  }
  if (input[_CSGNac] != null) {
    const memberEntries = se_CacheSecurityGroupNameList(input[_CSGNac], context);
    if (input[_CSGNac]?.length === 0) {
      entries.CacheSecurityGroupNames = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CacheSecurityGroupNames.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SGI] != null) {
    const memberEntries = se_SecurityGroupIdsList(input[_SGI], context);
    if (input[_SGI]?.length === 0) {
      entries.SecurityGroupIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SA] != null) {
    const memberEntries = se_SnapshotArnsList(input[_SA], context);
    if (input[_SA]?.length === 0) {
      entries.SnapshotArns = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SnapshotArns.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SN] != null) {
    entries[_SN] = input[_SN];
  }
  if (input[_PMW] != null) {
    entries[_PMW] = input[_PMW];
  }
  if (input[_Po] != null) {
    entries[_Po] = input[_Po];
  }
  if (input[_NTA] != null) {
    entries[_NTA] = input[_NTA];
  }
  if (input[_AMVU] != null) {
    entries[_AMVU] = input[_AMVU];
  }
  if (input[_SRL] != null) {
    entries[_SRL] = input[_SRL];
  }
  if (input[_SW] != null) {
    entries[_SW] = input[_SW];
  }
  if (input[_AT] != null) {
    entries[_AT] = input[_AT];
  }
  if (input[_TEE] != null) {
    entries[_TEE] = input[_TEE];
  }
  if (input[_AREE] != null) {
    entries[_AREE] = input[_AREE];
  }
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_UGI] != null) {
    const memberEntries = se_UserGroupIdListInput(input[_UGI], context);
    if (input[_UGI]?.length === 0) {
      entries.UserGroupIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserGroupIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_LDC] != null) {
    const memberEntries = se_LogDeliveryConfigurationRequestList(input[_LDC], context);
    if (input[_LDC]?.length === 0) {
      entries.LogDeliveryConfigurations = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LogDeliveryConfigurations.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DTE] != null) {
    entries[_DTE] = input[_DTE];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_ID] != null) {
    entries[_ID] = input[_ID];
  }
  if (input[_TEM] != null) {
    entries[_TEM] = input[_TEM];
  }
  if (input[_CMl] != null) {
    entries[_CMl] = input[_CMl];
  }
  if (input[_SCSN] != null) {
    entries[_SCSN] = input[_SCSN];
  }
  return entries;
}, "se_CreateReplicationGroupMessage");
var se_CreateServerlessCacheRequest = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SCN] != null) {
    entries[_SCN] = input[_SCN];
  }
  if (input[_D] != null) {
    entries[_D] = input[_D];
  }
  if (input[_E] != null) {
    entries[_E] = input[_E];
  }
  if (input[_MEV] != null) {
    entries[_MEV] = input[_MEV];
  }
  if (input[_CUL] != null) {
    const memberEntries = se_CacheUsageLimits(input[_CUL], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CacheUsageLimits.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_SGI] != null) {
    const memberEntries = se_SecurityGroupIdsList(input[_SGI], context);
    if (input[_SGI]?.length === 0) {
      entries.SecurityGroupIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SATR] != null) {
    const memberEntries = se_SnapshotArnsList(input[_SATR], context);
    if (input[_SATR]?.length === 0) {
      entries.SnapshotArnsToRestore = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SnapshotArnsToRestore.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_UGIs] != null) {
    entries[_UGIs] = input[_UGIs];
  }
  if (input[_SI] != null) {
    const memberEntries = se_SubnetIdsList(input[_SI], context);
    if (input[_SI]?.length === 0) {
      entries.SubnetIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SRL] != null) {
    entries[_SRL] = input[_SRL];
  }
  if (input[_DST] != null) {
    entries[_DST] = input[_DST];
  }
  return entries;
}, "se_CreateServerlessCacheRequest");
var se_CreateServerlessCacheSnapshotRequest = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SCSN] != null) {
    entries[_SCSN] = input[_SCSN];
  }
  if (input[_SCN] != null) {
    entries[_SCN] = input[_SCN];
  }
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CreateServerlessCacheSnapshotRequest");
var se_CreateSnapshotMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RGIe] != null) {
    entries[_RGIe] = input[_RGIe];
  }
  if (input[_CCIa] != null) {
    entries[_CCIa] = input[_CCIa];
  }
  if (input[_SN] != null) {
    entries[_SN] = input[_SN];
  }
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CreateSnapshotMessage");
var se_CreateUserGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_UGIs] != null) {
    entries[_UGIs] = input[_UGIs];
  }
  if (input[_E] != null) {
    entries[_E] = input[_E];
  }
  if (input[_UI] != null) {
    const memberEntries = se_UserIdListInput(input[_UI], context);
    if (input[_UI]?.length === 0) {
      entries.UserIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CreateUserGroupMessage");
var se_CreateUserMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_UIs] != null) {
    entries[_UIs] = input[_UIs];
  }
  if (input[_UN] != null) {
    entries[_UN] = input[_UN];
  }
  if (input[_E] != null) {
    entries[_E] = input[_E];
  }
  if (input[_P] != null) {
    const memberEntries = se_PasswordListInput(input[_P], context);
    if (input[_P]?.length === 0) {
      entries.Passwords = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Passwords.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AS] != null) {
    entries[_AS] = input[_AS];
  }
  if (input[_NPR] != null) {
    entries[_NPR] = input[_NPR];
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AM] != null) {
    const memberEntries = se_AuthenticationMode(input[_AM], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AuthenticationMode.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CreateUserMessage");
var se_CustomerNodeEndpoint = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_Ad] != null) {
    entries[_Ad] = input[_Ad];
  }
  if (input[_Po] != null) {
    entries[_Po] = input[_Po];
  }
  return entries;
}, "se_CustomerNodeEndpoint");
var se_CustomerNodeEndpointList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_CustomerNodeEndpoint(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_CustomerNodeEndpointList");
var se_DataStorage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Mi] != null) {
    entries[_Mi] = input[_Mi];
  }
  if (input[_U] != null) {
    entries[_U] = input[_U];
  }
  return entries;
}, "se_DataStorage");
var se_DecreaseNodeGroupsInGlobalReplicationGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_GRGI] != null) {
    entries[_GRGI] = input[_GRGI];
  }
  if (input[_NGCo] != null) {
    entries[_NGCo] = input[_NGCo];
  }
  if (input[_GNGTR] != null) {
    const memberEntries = se_GlobalNodeGroupIdList(input[_GNGTR], context);
    if (input[_GNGTR]?.length === 0) {
      entries.GlobalNodeGroupsToRemove = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GlobalNodeGroupsToRemove.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_GNGTRl] != null) {
    const memberEntries = se_GlobalNodeGroupIdList(input[_GNGTRl], context);
    if (input[_GNGTRl]?.length === 0) {
      entries.GlobalNodeGroupsToRetain = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GlobalNodeGroupsToRetain.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AI] != null) {
    entries[_AI] = input[_AI];
  }
  return entries;
}, "se_DecreaseNodeGroupsInGlobalReplicationGroupMessage");
var se_DecreaseReplicaCountMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RGIe] != null) {
    entries[_RGIe] = input[_RGIe];
  }
  if (input[_NRC] != null) {
    entries[_NRC] = input[_NRC];
  }
  if (input[_RC] != null) {
    const memberEntries = se_ReplicaConfigurationList(input[_RC], context);
    if (input[_RC]?.length === 0) {
      entries.ReplicaConfiguration = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReplicaConfiguration.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RTR] != null) {
    const memberEntries = se_RemoveReplicasList(input[_RTR], context);
    if (input[_RTR]?.length === 0) {
      entries.ReplicasToRemove = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReplicasToRemove.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AI] != null) {
    entries[_AI] = input[_AI];
  }
  return entries;
}, "se_DecreaseReplicaCountMessage");
var se_DeleteCacheClusterMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_CCIa] != null) {
    entries[_CCIa] = input[_CCIa];
  }
  if (input[_FSI] != null) {
    entries[_FSI] = input[_FSI];
  }
  return entries;
}, "se_DeleteCacheClusterMessage");
var se_DeleteCacheParameterGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_CPGN] != null) {
    entries[_CPGN] = input[_CPGN];
  }
  return entries;
}, "se_DeleteCacheParameterGroupMessage");
var se_DeleteCacheSecurityGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_CSGN] != null) {
    entries[_CSGN] = input[_CSGN];
  }
  return entries;
}, "se_DeleteCacheSecurityGroupMessage");
var se_DeleteCacheSubnetGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_CSGNa] != null) {
    entries[_CSGNa] = input[_CSGNa];
  }
  return entries;
}, "se_DeleteCacheSubnetGroupMessage");
var se_DeleteGlobalReplicationGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_GRGI] != null) {
    entries[_GRGI] = input[_GRGI];
  }
  if (input[_RPRG] != null) {
    entries[_RPRG] = input[_RPRG];
  }
  return entries;
}, "se_DeleteGlobalReplicationGroupMessage");
var se_DeleteReplicationGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RGIe] != null) {
    entries[_RGIe] = input[_RGIe];
  }
  if (input[_RPC] != null) {
    entries[_RPC] = input[_RPC];
  }
  if (input[_FSI] != null) {
    entries[_FSI] = input[_FSI];
  }
  return entries;
}, "se_DeleteReplicationGroupMessage");
var se_DeleteServerlessCacheRequest = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SCN] != null) {
    entries[_SCN] = input[_SCN];
  }
  if (input[_FSN] != null) {
    entries[_FSN] = input[_FSN];
  }
  return entries;
}, "se_DeleteServerlessCacheRequest");
var se_DeleteServerlessCacheSnapshotRequest = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SCSN] != null) {
    entries[_SCSN] = input[_SCSN];
  }
  return entries;
}, "se_DeleteServerlessCacheSnapshotRequest");
var se_DeleteSnapshotMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SN] != null) {
    entries[_SN] = input[_SN];
  }
  return entries;
}, "se_DeleteSnapshotMessage");
var se_DeleteUserGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_UGIs] != null) {
    entries[_UGIs] = input[_UGIs];
  }
  return entries;
}, "se_DeleteUserGroupMessage");
var se_DeleteUserMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_UIs] != null) {
    entries[_UIs] = input[_UIs];
  }
  return entries;
}, "se_DeleteUserMessage");
var se_DescribeCacheClustersMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_CCIa] != null) {
    entries[_CCIa] = input[_CCIa];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  if (input[_SCNI] != null) {
    entries[_SCNI] = input[_SCNI];
  }
  if (input[_SCCNIRG] != null) {
    entries[_SCCNIRG] = input[_SCCNIRG];
  }
  return entries;
}, "se_DescribeCacheClustersMessage");
var se_DescribeCacheEngineVersionsMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_E] != null) {
    entries[_E] = input[_E];
  }
  if (input[_EV] != null) {
    entries[_EV] = input[_EV];
  }
  if (input[_CPGF] != null) {
    entries[_CPGF] = input[_CPGF];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  if (input[_DO] != null) {
    entries[_DO] = input[_DO];
  }
  return entries;
}, "se_DescribeCacheEngineVersionsMessage");
var se_DescribeCacheParameterGroupsMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_CPGN] != null) {
    entries[_CPGN] = input[_CPGN];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
}, "se_DescribeCacheParameterGroupsMessage");
var se_DescribeCacheParametersMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_CPGN] != null) {
    entries[_CPGN] = input[_CPGN];
  }
  if (input[_S] != null) {
    entries[_S] = input[_S];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
}, "se_DescribeCacheParametersMessage");
var se_DescribeCacheSecurityGroupsMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_CSGN] != null) {
    entries[_CSGN] = input[_CSGN];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
}, "se_DescribeCacheSecurityGroupsMessage");
var se_DescribeCacheSubnetGroupsMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_CSGNa] != null) {
    entries[_CSGNa] = input[_CSGNa];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
}, "se_DescribeCacheSubnetGroupsMessage");
var se_DescribeEngineDefaultParametersMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_CPGF] != null) {
    entries[_CPGF] = input[_CPGF];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
}, "se_DescribeEngineDefaultParametersMessage");
var se_DescribeEventsMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SIo] != null) {
    entries[_SIo] = input[_SIo];
  }
  if (input[_ST] != null) {
    entries[_ST] = input[_ST];
  }
  if (input[_STt] != null) {
    entries[_STt] = (0, import_smithy_client.serializeDateTime)(input[_STt]);
  }
  if (input[_ET] != null) {
    entries[_ET] = (0, import_smithy_client.serializeDateTime)(input[_ET]);
  }
  if (input[_Du] != null) {
    entries[_Du] = input[_Du];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
}, "se_DescribeEventsMessage");
var se_DescribeGlobalReplicationGroupsMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_GRGI] != null) {
    entries[_GRGI] = input[_GRGI];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  if (input[_SMI] != null) {
    entries[_SMI] = input[_SMI];
  }
  return entries;
}, "se_DescribeGlobalReplicationGroupsMessage");
var se_DescribeReplicationGroupsMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RGIe] != null) {
    entries[_RGIe] = input[_RGIe];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
}, "se_DescribeReplicationGroupsMessage");
var se_DescribeReservedCacheNodesMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RCNI] != null) {
    entries[_RCNI] = input[_RCNI];
  }
  if (input[_RCNOI] != null) {
    entries[_RCNOI] = input[_RCNOI];
  }
  if (input[_CNT] != null) {
    entries[_CNT] = input[_CNT];
  }
  if (input[_Du] != null) {
    entries[_Du] = input[_Du];
  }
  if (input[_PD] != null) {
    entries[_PD] = input[_PD];
  }
  if (input[_OT] != null) {
    entries[_OT] = input[_OT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
}, "se_DescribeReservedCacheNodesMessage");
var se_DescribeReservedCacheNodesOfferingsMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RCNOI] != null) {
    entries[_RCNOI] = input[_RCNOI];
  }
  if (input[_CNT] != null) {
    entries[_CNT] = input[_CNT];
  }
  if (input[_Du] != null) {
    entries[_Du] = input[_Du];
  }
  if (input[_PD] != null) {
    entries[_PD] = input[_PD];
  }
  if (input[_OT] != null) {
    entries[_OT] = input[_OT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
}, "se_DescribeReservedCacheNodesOfferingsMessage");
var se_DescribeServerlessCacheSnapshotsRequest = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SCN] != null) {
    entries[_SCN] = input[_SCN];
  }
  if (input[_SCSN] != null) {
    entries[_SCSN] = input[_SCSN];
  }
  if (input[_STn] != null) {
    entries[_STn] = input[_STn];
  }
  if (input[_NTe] != null) {
    entries[_NTe] = input[_NTe];
  }
  if (input[_MRa] != null) {
    entries[_MRa] = input[_MRa];
  }
  return entries;
}, "se_DescribeServerlessCacheSnapshotsRequest");
var se_DescribeServerlessCachesRequest = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SCN] != null) {
    entries[_SCN] = input[_SCN];
  }
  if (input[_MRa] != null) {
    entries[_MRa] = input[_MRa];
  }
  if (input[_NTe] != null) {
    entries[_NTe] = input[_NTe];
  }
  return entries;
}, "se_DescribeServerlessCachesRequest");
var se_DescribeServiceUpdatesMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SUN] != null) {
    entries[_SUN] = input[_SUN];
  }
  if (input[_SUS] != null) {
    const memberEntries = se_ServiceUpdateStatusList(input[_SUS], context);
    if (input[_SUS]?.length === 0) {
      entries.ServiceUpdateStatus = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ServiceUpdateStatus.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
}, "se_DescribeServiceUpdatesMessage");
var se_DescribeSnapshotsMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RGIe] != null) {
    entries[_RGIe] = input[_RGIe];
  }
  if (input[_CCIa] != null) {
    entries[_CCIa] = input[_CCIa];
  }
  if (input[_SN] != null) {
    entries[_SN] = input[_SN];
  }
  if (input[_SS] != null) {
    entries[_SS] = input[_SS];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_SNGC] != null) {
    entries[_SNGC] = input[_SNGC];
  }
  return entries;
}, "se_DescribeSnapshotsMessage");
var se_DescribeUpdateActionsMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SUN] != null) {
    entries[_SUN] = input[_SUN];
  }
  if (input[_RGI] != null) {
    const memberEntries = se_ReplicationGroupIdList(input[_RGI], context);
    if (input[_RGI]?.length === 0) {
      entries.ReplicationGroupIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReplicationGroupIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CCI] != null) {
    const memberEntries = se_CacheClusterIdList(input[_CCI], context);
    if (input[_CCI]?.length === 0) {
      entries.CacheClusterIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CacheClusterIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_E] != null) {
    entries[_E] = input[_E];
  }
  if (input[_SUS] != null) {
    const memberEntries = se_ServiceUpdateStatusList(input[_SUS], context);
    if (input[_SUS]?.length === 0) {
      entries.ServiceUpdateStatus = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ServiceUpdateStatus.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SUTR] != null) {
    const memberEntries = se_TimeRangeFilter(input[_SUTR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ServiceUpdateTimeRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_UAS] != null) {
    const memberEntries = se_UpdateActionStatusList(input[_UAS], context);
    if (input[_UAS]?.length === 0) {
      entries.UpdateActionStatus = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UpdateActionStatus.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SNLUS] != null) {
    entries[_SNLUS] = input[_SNLUS];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
}, "se_DescribeUpdateActionsMessage");
var se_DescribeUserGroupsMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_UGIs] != null) {
    entries[_UGIs] = input[_UGIs];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
}, "se_DescribeUserGroupsMessage");
var se_DescribeUsersMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_E] != null) {
    entries[_E] = input[_E];
  }
  if (input[_UIs] != null) {
    entries[_UIs] = input[_UIs];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
}, "se_DescribeUsersMessage");
var se_DestinationDetails = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_CWLD] != null) {
    const memberEntries = se_CloudWatchLogsDestinationDetails(input[_CWLD], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CloudWatchLogsDetails.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_KFD] != null) {
    const memberEntries = se_KinesisFirehoseDestinationDetails(input[_KFD], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `KinesisFirehoseDetails.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_DestinationDetails");
var se_DisassociateGlobalReplicationGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_GRGI] != null) {
    entries[_GRGI] = input[_GRGI];
  }
  if (input[_RGIe] != null) {
    entries[_RGIe] = input[_RGIe];
  }
  if (input[_RGR] != null) {
    entries[_RGR] = input[_RGR];
  }
  return entries;
}, "se_DisassociateGlobalReplicationGroupMessage");
var se_ECPUPerSecond = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Mi] != null) {
    entries[_Mi] = input[_Mi];
  }
  return entries;
}, "se_ECPUPerSecond");
var se_ExportServerlessCacheSnapshotRequest = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SCSN] != null) {
    entries[_SCSN] = input[_SCSN];
  }
  if (input[_SBN] != null) {
    entries[_SBN] = input[_SBN];
  }
  return entries;
}, "se_ExportServerlessCacheSnapshotRequest");
var se_FailoverGlobalReplicationGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_GRGI] != null) {
    entries[_GRGI] = input[_GRGI];
  }
  if (input[_PR] != null) {
    entries[_PR] = input[_PR];
  }
  if (input[_PRGI] != null) {
    entries[_PRGI] = input[_PRGI];
  }
  return entries;
}, "se_FailoverGlobalReplicationGroupMessage");
var se_Filter = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_Va] != null) {
    const memberEntries = se_FilterValueList(input[_Va], context);
    if (input[_Va]?.length === 0) {
      entries.Values = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Values.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_Filter");
var se_FilterList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Filter(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_FilterList");
var se_FilterValueList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_FilterValueList");
var se_GlobalNodeGroupIdList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`GlobalNodeGroupId.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_GlobalNodeGroupIdList");
var se_IncreaseNodeGroupsInGlobalReplicationGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_GRGI] != null) {
    entries[_GRGI] = input[_GRGI];
  }
  if (input[_NGCo] != null) {
    entries[_NGCo] = input[_NGCo];
  }
  if (input[_RCe] != null) {
    const memberEntries = se_RegionalConfigurationList(input[_RCe], context);
    if (input[_RCe]?.length === 0) {
      entries.RegionalConfigurations = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RegionalConfigurations.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AI] != null) {
    entries[_AI] = input[_AI];
  }
  return entries;
}, "se_IncreaseNodeGroupsInGlobalReplicationGroupMessage");
var se_IncreaseReplicaCountMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RGIe] != null) {
    entries[_RGIe] = input[_RGIe];
  }
  if (input[_NRC] != null) {
    entries[_NRC] = input[_NRC];
  }
  if (input[_RC] != null) {
    const memberEntries = se_ReplicaConfigurationList(input[_RC], context);
    if (input[_RC]?.length === 0) {
      entries.ReplicaConfiguration = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReplicaConfiguration.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AI] != null) {
    entries[_AI] = input[_AI];
  }
  return entries;
}, "se_IncreaseReplicaCountMessage");
var se_KeyList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_KeyList");
var se_KinesisFirehoseDestinationDetails = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_DSel] != null) {
    entries[_DSel] = input[_DSel];
  }
  return entries;
}, "se_KinesisFirehoseDestinationDetails");
var se_ListAllowedNodeTypeModificationsMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_CCIa] != null) {
    entries[_CCIa] = input[_CCIa];
  }
  if (input[_RGIe] != null) {
    entries[_RGIe] = input[_RGIe];
  }
  return entries;
}, "se_ListAllowedNodeTypeModificationsMessage");
var se_ListTagsForResourceMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  return entries;
}, "se_ListTagsForResourceMessage");
var se_LogDeliveryConfigurationRequest = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_LT] != null) {
    entries[_LT] = input[_LT];
  }
  if (input[_DT] != null) {
    entries[_DT] = input[_DT];
  }
  if (input[_DD] != null) {
    const memberEntries = se_DestinationDetails(input[_DD], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DestinationDetails.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_LF] != null) {
    entries[_LF] = input[_LF];
  }
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  return entries;
}, "se_LogDeliveryConfigurationRequest");
var se_LogDeliveryConfigurationRequestList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LogDeliveryConfigurationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`LogDeliveryConfigurationRequest.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_LogDeliveryConfigurationRequestList");
var se_ModifyCacheClusterMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_CCIa] != null) {
    entries[_CCIa] = input[_CCIa];
  }
  if (input[_NCN] != null) {
    entries[_NCN] = input[_NCN];
  }
  if (input[_CNITR] != null) {
    const memberEntries = se_CacheNodeIdsList(input[_CNITR], context);
    if (input[_CNITR]?.length === 0) {
      entries.CacheNodeIdsToRemove = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CacheNodeIdsToRemove.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AZM] != null) {
    entries[_AZM] = input[_AZM];
  }
  if (input[_NAZ] != null) {
    const memberEntries = se_PreferredAvailabilityZoneList(input[_NAZ], context);
    if (input[_NAZ]?.length === 0) {
      entries.NewAvailabilityZones = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NewAvailabilityZones.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CSGNac] != null) {
    const memberEntries = se_CacheSecurityGroupNameList(input[_CSGNac], context);
    if (input[_CSGNac]?.length === 0) {
      entries.CacheSecurityGroupNames = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CacheSecurityGroupNames.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SGI] != null) {
    const memberEntries = se_SecurityGroupIdsList(input[_SGI], context);
    if (input[_SGI]?.length === 0) {
      entries.SecurityGroupIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_PMW] != null) {
    entries[_PMW] = input[_PMW];
  }
  if (input[_NTA] != null) {
    entries[_NTA] = input[_NTA];
  }
  if (input[_CPGN] != null) {
    entries[_CPGN] = input[_CPGN];
  }
  if (input[_NTS] != null) {
    entries[_NTS] = input[_NTS];
  }
  if (input[_AI] != null) {
    entries[_AI] = input[_AI];
  }
  if (input[_E] != null) {
    entries[_E] = input[_E];
  }
  if (input[_EV] != null) {
    entries[_EV] = input[_EV];
  }
  if (input[_AMVU] != null) {
    entries[_AMVU] = input[_AMVU];
  }
  if (input[_SRL] != null) {
    entries[_SRL] = input[_SRL];
  }
  if (input[_SW] != null) {
    entries[_SW] = input[_SW];
  }
  if (input[_CNT] != null) {
    entries[_CNT] = input[_CNT];
  }
  if (input[_AT] != null) {
    entries[_AT] = input[_AT];
  }
  if (input[_ATUS] != null) {
    entries[_ATUS] = input[_ATUS];
  }
  if (input[_LDC] != null) {
    const memberEntries = se_LogDeliveryConfigurationRequestList(input[_LDC], context);
    if (input[_LDC]?.length === 0) {
      entries.LogDeliveryConfigurations = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LogDeliveryConfigurations.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ID] != null) {
    entries[_ID] = input[_ID];
  }
  if (input[_SC] != null) {
    const memberEntries = se_ScaleConfig(input[_SC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ScaleConfig.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_ModifyCacheClusterMessage");
var se_ModifyCacheParameterGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_CPGN] != null) {
    entries[_CPGN] = input[_CPGN];
  }
  if (input[_PNV] != null) {
    const memberEntries = se_ParameterNameValueList(input[_PNV], context);
    if (input[_PNV]?.length === 0) {
      entries.ParameterNameValues = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ParameterNameValues.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_ModifyCacheParameterGroupMessage");
var se_ModifyCacheSubnetGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_CSGNa] != null) {
    entries[_CSGNa] = input[_CSGNa];
  }
  if (input[_CSGD] != null) {
    entries[_CSGD] = input[_CSGD];
  }
  if (input[_SI] != null) {
    const memberEntries = se_SubnetIdentifierList(input[_SI], context);
    if (input[_SI]?.length === 0) {
      entries.SubnetIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetIds.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_ModifyCacheSubnetGroupMessage");
var se_ModifyGlobalReplicationGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_GRGI] != null) {
    entries[_GRGI] = input[_GRGI];
  }
  if (input[_AI] != null) {
    entries[_AI] = input[_AI];
  }
  if (input[_CNT] != null) {
    entries[_CNT] = input[_CNT];
  }
  if (input[_E] != null) {
    entries[_E] = input[_E];
  }
  if (input[_EV] != null) {
    entries[_EV] = input[_EV];
  }
  if (input[_CPGN] != null) {
    entries[_CPGN] = input[_CPGN];
  }
  if (input[_GRGD] != null) {
    entries[_GRGD] = input[_GRGD];
  }
  if (input[_AFE] != null) {
    entries[_AFE] = input[_AFE];
  }
  return entries;
}, "se_ModifyGlobalReplicationGroupMessage");
var se_ModifyReplicationGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RGIe] != null) {
    entries[_RGIe] = input[_RGIe];
  }
  if (input[_RGD] != null) {
    entries[_RGD] = input[_RGD];
  }
  if (input[_PCI] != null) {
    entries[_PCI] = input[_PCI];
  }
  if (input[_SCI] != null) {
    entries[_SCI] = input[_SCI];
  }
  if (input[_AFE] != null) {
    entries[_AFE] = input[_AFE];
  }
  if (input[_MAZE] != null) {
    entries[_MAZE] = input[_MAZE];
  }
  if (input[_NGI] != null) {
    entries[_NGI] = input[_NGI];
  }
  if (input[_CSGNac] != null) {
    const memberEntries = se_CacheSecurityGroupNameList(input[_CSGNac], context);
    if (input[_CSGNac]?.length === 0) {
      entries.CacheSecurityGroupNames = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CacheSecurityGroupNames.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SGI] != null) {
    const memberEntries = se_SecurityGroupIdsList(input[_SGI], context);
    if (input[_SGI]?.length === 0) {
      entries.SecurityGroupIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_PMW] != null) {
    entries[_PMW] = input[_PMW];
  }
  if (input[_NTA] != null) {
    entries[_NTA] = input[_NTA];
  }
  if (input[_CPGN] != null) {
    entries[_CPGN] = input[_CPGN];
  }
  if (input[_NTS] != null) {
    entries[_NTS] = input[_NTS];
  }
  if (input[_AI] != null) {
    entries[_AI] = input[_AI];
  }
  if (input[_E] != null) {
    entries[_E] = input[_E];
  }
  if (input[_EV] != null) {
    entries[_EV] = input[_EV];
  }
  if (input[_AMVU] != null) {
    entries[_AMVU] = input[_AMVU];
  }
  if (input[_SRL] != null) {
    entries[_SRL] = input[_SRL];
  }
  if (input[_SW] != null) {
    entries[_SW] = input[_SW];
  }
  if (input[_CNT] != null) {
    entries[_CNT] = input[_CNT];
  }
  if (input[_AT] != null) {
    entries[_AT] = input[_AT];
  }
  if (input[_ATUS] != null) {
    entries[_ATUS] = input[_ATUS];
  }
  if (input[_UGITA] != null) {
    const memberEntries = se_UserGroupIdList(input[_UGITA], context);
    if (input[_UGITA]?.length === 0) {
      entries.UserGroupIdsToAdd = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserGroupIdsToAdd.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_UGITR] != null) {
    const memberEntries = se_UserGroupIdList(input[_UGITR], context);
    if (input[_UGITR]?.length === 0) {
      entries.UserGroupIdsToRemove = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserGroupIdsToRemove.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RUG] != null) {
    entries[_RUG] = input[_RUG];
  }
  if (input[_LDC] != null) {
    const memberEntries = se_LogDeliveryConfigurationRequestList(input[_LDC], context);
    if (input[_LDC]?.length === 0) {
      entries.LogDeliveryConfigurations = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LogDeliveryConfigurations.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ID] != null) {
    entries[_ID] = input[_ID];
  }
  if (input[_TEE] != null) {
    entries[_TEE] = input[_TEE];
  }
  if (input[_TEM] != null) {
    entries[_TEM] = input[_TEM];
  }
  if (input[_CMl] != null) {
    entries[_CMl] = input[_CMl];
  }
  return entries;
}, "se_ModifyReplicationGroupMessage");
var se_ModifyReplicationGroupShardConfigurationMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RGIe] != null) {
    entries[_RGIe] = input[_RGIe];
  }
  if (input[_NGCo] != null) {
    entries[_NGCo] = input[_NGCo];
  }
  if (input[_AI] != null) {
    entries[_AI] = input[_AI];
  }
  if (input[_RCes] != null) {
    const memberEntries = se_ReshardingConfigurationList(input[_RCes], context);
    if (input[_RCes]?.length === 0) {
      entries.ReshardingConfiguration = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReshardingConfiguration.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NGTR] != null) {
    const memberEntries = se_NodeGroupsToRemoveList(input[_NGTR], context);
    if (input[_NGTR]?.length === 0) {
      entries.NodeGroupsToRemove = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NodeGroupsToRemove.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NGTRo] != null) {
    const memberEntries = se_NodeGroupsToRetainList(input[_NGTRo], context);
    if (input[_NGTRo]?.length === 0) {
      entries.NodeGroupsToRetain = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NodeGroupsToRetain.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_ModifyReplicationGroupShardConfigurationMessage");
var se_ModifyServerlessCacheRequest = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SCN] != null) {
    entries[_SCN] = input[_SCN];
  }
  if (input[_D] != null) {
    entries[_D] = input[_D];
  }
  if (input[_CUL] != null) {
    const memberEntries = se_CacheUsageLimits(input[_CUL], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CacheUsageLimits.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RUGe] != null) {
    entries[_RUGe] = input[_RUGe];
  }
  if (input[_UGIs] != null) {
    entries[_UGIs] = input[_UGIs];
  }
  if (input[_SGI] != null) {
    const memberEntries = se_SecurityGroupIdsList(input[_SGI], context);
    if (input[_SGI]?.length === 0) {
      entries.SecurityGroupIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SRL] != null) {
    entries[_SRL] = input[_SRL];
  }
  if (input[_DST] != null) {
    entries[_DST] = input[_DST];
  }
  if (input[_E] != null) {
    entries[_E] = input[_E];
  }
  if (input[_MEV] != null) {
    entries[_MEV] = input[_MEV];
  }
  return entries;
}, "se_ModifyServerlessCacheRequest");
var se_ModifyUserGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_UGIs] != null) {
    entries[_UGIs] = input[_UGIs];
  }
  if (input[_UITA] != null) {
    const memberEntries = se_UserIdListInput(input[_UITA], context);
    if (input[_UITA]?.length === 0) {
      entries.UserIdsToAdd = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserIdsToAdd.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_UITR] != null) {
    const memberEntries = se_UserIdListInput(input[_UITR], context);
    if (input[_UITR]?.length === 0) {
      entries.UserIdsToRemove = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserIdsToRemove.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_E] != null) {
    entries[_E] = input[_E];
  }
  return entries;
}, "se_ModifyUserGroupMessage");
var se_ModifyUserMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_UIs] != null) {
    entries[_UIs] = input[_UIs];
  }
  if (input[_AS] != null) {
    entries[_AS] = input[_AS];
  }
  if (input[_AAS] != null) {
    entries[_AAS] = input[_AAS];
  }
  if (input[_P] != null) {
    const memberEntries = se_PasswordListInput(input[_P], context);
    if (input[_P]?.length === 0) {
      entries.Passwords = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Passwords.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NPR] != null) {
    entries[_NPR] = input[_NPR];
  }
  if (input[_AM] != null) {
    const memberEntries = se_AuthenticationMode(input[_AM], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AuthenticationMode.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_E] != null) {
    entries[_E] = input[_E];
  }
  return entries;
}, "se_ModifyUserMessage");
var se_NodeGroupConfiguration = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_NGI] != null) {
    entries[_NGI] = input[_NGI];
  }
  if (input[_Sl] != null) {
    entries[_Sl] = input[_Sl];
  }
  if (input[_RCep] != null) {
    entries[_RCep] = input[_RCep];
  }
  if (input[_PAZri] != null) {
    entries[_PAZri] = input[_PAZri];
  }
  if (input[_RAZ] != null) {
    const memberEntries = se_AvailabilityZonesList(input[_RAZ], context);
    if (input[_RAZ]?.length === 0) {
      entries.ReplicaAvailabilityZones = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReplicaAvailabilityZones.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_POAri] != null) {
    entries[_POAri] = input[_POAri];
  }
  if (input[_ROA] != null) {
    const memberEntries = se_OutpostArnsList(input[_ROA], context);
    if (input[_ROA]?.length === 0) {
      entries.ReplicaOutpostArns = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReplicaOutpostArns.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_NodeGroupConfiguration");
var se_NodeGroupConfigurationList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_NodeGroupConfiguration(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`NodeGroupConfiguration.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_NodeGroupConfigurationList");
var se_NodeGroupsToRemoveList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`NodeGroupToRemove.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_NodeGroupsToRemoveList");
var se_NodeGroupsToRetainList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`NodeGroupToRetain.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_NodeGroupsToRetainList");
var se_OutpostArnsList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`OutpostArn.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_OutpostArnsList");
var se_ParameterNameValue = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_PN] != null) {
    entries[_PN] = input[_PN];
  }
  if (input[_PV] != null) {
    entries[_PV] = input[_PV];
  }
  return entries;
}, "se_ParameterNameValue");
var se_ParameterNameValueList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ParameterNameValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`ParameterNameValue.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_ParameterNameValueList");
var se_PasswordListInput = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_PasswordListInput");
var se_PreferredAvailabilityZoneList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`PreferredAvailabilityZone.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_PreferredAvailabilityZoneList");
var se_PreferredOutpostArnList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`PreferredOutpostArn.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_PreferredOutpostArnList");
var se_PurchaseReservedCacheNodesOfferingMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RCNOI] != null) {
    entries[_RCNOI] = input[_RCNOI];
  }
  if (input[_RCNI] != null) {
    entries[_RCNI] = input[_RCNI];
  }
  if (input[_CNC] != null) {
    entries[_CNC] = input[_CNC];
  }
  if (input[_T] != null) {
    const memberEntries = se_TagList(input[_T], context);
    if (input[_T]?.length === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_PurchaseReservedCacheNodesOfferingMessage");
var se_RebalanceSlotsInGlobalReplicationGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_GRGI] != null) {
    entries[_GRGI] = input[_GRGI];
  }
  if (input[_AI] != null) {
    entries[_AI] = input[_AI];
  }
  return entries;
}, "se_RebalanceSlotsInGlobalReplicationGroupMessage");
var se_RebootCacheClusterMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_CCIa] != null) {
    entries[_CCIa] = input[_CCIa];
  }
  if (input[_CNITRa] != null) {
    const memberEntries = se_CacheNodeIdsList(input[_CNITRa], context);
    if (input[_CNITRa]?.length === 0) {
      entries.CacheNodeIdsToReboot = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CacheNodeIdsToReboot.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_RebootCacheClusterMessage");
var se_RegionalConfiguration = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RGIe] != null) {
    entries[_RGIe] = input[_RGIe];
  }
  if (input[_RGR] != null) {
    entries[_RGR] = input[_RGR];
  }
  if (input[_RCes] != null) {
    const memberEntries = se_ReshardingConfigurationList(input[_RCes], context);
    if (input[_RCes]?.length === 0) {
      entries.ReshardingConfiguration = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReshardingConfiguration.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_RegionalConfiguration");
var se_RegionalConfigurationList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_RegionalConfiguration(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`RegionalConfiguration.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_RegionalConfigurationList");
var se_RemoveReplicasList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_RemoveReplicasList");
var se_RemoveTagsFromResourceMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  if (input[_TK] != null) {
    const memberEntries = se_KeyList(input[_TK], context);
    if (input[_TK]?.length === 0) {
      entries.TagKeys = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagKeys.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_RemoveTagsFromResourceMessage");
var se_ReplicaConfigurationList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ConfigureShard(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`ConfigureShard.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_ReplicaConfigurationList");
var se_ReplicationGroupIdList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_ReplicationGroupIdList");
var se_ResetCacheParameterGroupMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_CPGN] != null) {
    entries[_CPGN] = input[_CPGN];
  }
  if (input[_RAP] != null) {
    entries[_RAP] = input[_RAP];
  }
  if (input[_PNV] != null) {
    const memberEntries = se_ParameterNameValueList(input[_PNV], context);
    if (input[_PNV]?.length === 0) {
      entries.ParameterNameValues = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ParameterNameValues.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_ResetCacheParameterGroupMessage");
var se_ReshardingConfiguration = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_NGI] != null) {
    entries[_NGI] = input[_NGI];
  }
  if (input[_PAZ] != null) {
    const memberEntries = se_AvailabilityZonesList(input[_PAZ], context);
    if (input[_PAZ]?.length === 0) {
      entries.PreferredAvailabilityZones = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PreferredAvailabilityZones.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_ReshardingConfiguration");
var se_ReshardingConfigurationList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ReshardingConfiguration(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`ReshardingConfiguration.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_ReshardingConfigurationList");
var se_RevokeCacheSecurityGroupIngressMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_CSGN] != null) {
    entries[_CSGN] = input[_CSGN];
  }
  if (input[_ECSGN] != null) {
    entries[_ECSGN] = input[_ECSGN];
  }
  if (input[_ECSGOI] != null) {
    entries[_ECSGOI] = input[_ECSGOI];
  }
  return entries;
}, "se_RevokeCacheSecurityGroupIngressMessage");
var se_ScaleConfig = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SP] != null) {
    entries[_SP] = input[_SP];
  }
  if (input[_SIM] != null) {
    entries[_SIM] = input[_SIM];
  }
  return entries;
}, "se_ScaleConfig");
var se_SecurityGroupIdsList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SecurityGroupId.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_SecurityGroupIdsList");
var se_ServiceUpdateStatusList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_ServiceUpdateStatusList");
var se_SnapshotArnsList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SnapshotArn.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_SnapshotArnsList");
var se_StartMigrationMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RGIe] != null) {
    entries[_RGIe] = input[_RGIe];
  }
  if (input[_CNEL] != null) {
    const memberEntries = se_CustomerNodeEndpointList(input[_CNEL], context);
    if (input[_CNEL]?.length === 0) {
      entries.CustomerNodeEndpointList = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CustomerNodeEndpointList.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_StartMigrationMessage");
var se_SubnetIdentifierList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SubnetIdentifier.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_SubnetIdentifierList");
var se_SubnetIdsList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SubnetId.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_SubnetIdsList");
var se_Tag = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_K] != null) {
    entries[_K] = input[_K];
  }
  if (input[_Val] != null) {
    entries[_Val] = input[_Val];
  }
  return entries;
}, "se_Tag");
var se_TagList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Tag(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Tag.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_TagList");
var se_TestFailoverMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RGIe] != null) {
    entries[_RGIe] = input[_RGIe];
  }
  if (input[_NGI] != null) {
    entries[_NGI] = input[_NGI];
  }
  return entries;
}, "se_TestFailoverMessage");
var se_TestMigrationMessage = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RGIe] != null) {
    entries[_RGIe] = input[_RGIe];
  }
  if (input[_CNEL] != null) {
    const memberEntries = se_CustomerNodeEndpointList(input[_CNEL], context);
    if (input[_CNEL]?.length === 0) {
      entries.CustomerNodeEndpointList = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CustomerNodeEndpointList.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_TestMigrationMessage");
var se_TimeRangeFilter = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_STt] != null) {
    entries[_STt] = (0, import_smithy_client.serializeDateTime)(input[_STt]);
  }
  if (input[_ET] != null) {
    entries[_ET] = (0, import_smithy_client.serializeDateTime)(input[_ET]);
  }
  return entries;
}, "se_TimeRangeFilter");
var se_UpdateActionStatusList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_UpdateActionStatusList");
var se_UserGroupIdList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_UserGroupIdList");
var se_UserGroupIdListInput = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_UserGroupIdListInput");
var se_UserIdListInput = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_UserIdListInput");
var de_AllowedNodeTypeModificationsMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (String(output.ScaleUpModifications).trim() === "") {
    contents[_SUM] = [];
  } else if (output[_SUM] != null && output[_SUM][_m] != null) {
    contents[_SUM] = de_NodeTypeList((0, import_smithy_client.getArrayIfSingleItem)(output[_SUM][_m]), context);
  }
  if (String(output.ScaleDownModifications).trim() === "") {
    contents[_SDM] = [];
  } else if (output[_SDM] != null && output[_SDM][_m] != null) {
    contents[_SDM] = de_NodeTypeList((0, import_smithy_client.getArrayIfSingleItem)(output[_SDM][_m]), context);
  }
  return contents;
}, "de_AllowedNodeTypeModificationsMessage");
var de_APICallRateForCustomerExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_APICallRateForCustomerExceededFault");
var de_Authentication = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Ty] != null) {
    contents[_Ty] = (0, import_smithy_client.expectString)(output[_Ty]);
  }
  if (output[_PC] != null) {
    contents[_PC] = (0, import_smithy_client.strictParseInt32)(output[_PC]);
  }
  return contents;
}, "de_Authentication");
var de_AuthorizationAlreadyExistsFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_AuthorizationAlreadyExistsFault");
var de_AuthorizationNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_AuthorizationNotFoundFault");
var de_AuthorizeCacheSecurityGroupIngressResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CSG] != null) {
    contents[_CSG] = de_CacheSecurityGroup(output[_CSG], context);
  }
  return contents;
}, "de_AuthorizeCacheSecurityGroupIngressResult");
var de_AvailabilityZone = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_N] != null) {
    contents[_N] = (0, import_smithy_client.expectString)(output[_N]);
  }
  return contents;
}, "de_AvailabilityZone");
var de_AvailabilityZonesList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_AvailabilityZonesList");
var de_CacheCluster = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CCIa] != null) {
    contents[_CCIa] = (0, import_smithy_client.expectString)(output[_CCIa]);
  }
  if (output[_CE] != null) {
    contents[_CE] = de_Endpoint(output[_CE], context);
  }
  if (output[_CDLP] != null) {
    contents[_CDLP] = (0, import_smithy_client.expectString)(output[_CDLP]);
  }
  if (output[_CNT] != null) {
    contents[_CNT] = (0, import_smithy_client.expectString)(output[_CNT]);
  }
  if (output[_E] != null) {
    contents[_E] = (0, import_smithy_client.expectString)(output[_E]);
  }
  if (output[_EV] != null) {
    contents[_EV] = (0, import_smithy_client.expectString)(output[_EV]);
  }
  if (output[_CCS] != null) {
    contents[_CCS] = (0, import_smithy_client.expectString)(output[_CCS]);
  }
  if (output[_NCN] != null) {
    contents[_NCN] = (0, import_smithy_client.strictParseInt32)(output[_NCN]);
  }
  if (output[_PAZr] != null) {
    contents[_PAZr] = (0, import_smithy_client.expectString)(output[_PAZr]);
  }
  if (output[_POAr] != null) {
    contents[_POAr] = (0, import_smithy_client.expectString)(output[_POAr]);
  }
  if (output[_CCCT] != null) {
    contents[_CCCT] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CCCT]));
  }
  if (output[_PMW] != null) {
    contents[_PMW] = (0, import_smithy_client.expectString)(output[_PMW]);
  }
  if (output[_PMV] != null) {
    contents[_PMV] = de_PendingModifiedValues(output[_PMV], context);
  }
  if (output[_NC] != null) {
    contents[_NC] = de_NotificationConfiguration(output[_NC], context);
  }
  if (String(output.CacheSecurityGroups).trim() === "") {
    contents[_CSGa] = [];
  } else if (output[_CSGa] != null && output[_CSGa][_CSG] != null) {
    contents[_CSGa] = de_CacheSecurityGroupMembershipList((0, import_smithy_client.getArrayIfSingleItem)(output[_CSGa][_CSG]), context);
  }
  if (output[_CPG] != null) {
    contents[_CPG] = de_CacheParameterGroupStatus(output[_CPG], context);
  }
  if (output[_CSGNa] != null) {
    contents[_CSGNa] = (0, import_smithy_client.expectString)(output[_CSGNa]);
  }
  if (String(output.CacheNodes).trim() === "") {
    contents[_CN] = [];
  } else if (output[_CN] != null && output[_CN][_CNa] != null) {
    contents[_CN] = de_CacheNodeList((0, import_smithy_client.getArrayIfSingleItem)(output[_CN][_CNa]), context);
  }
  if (output[_AMVU] != null) {
    contents[_AMVU] = (0, import_smithy_client.parseBoolean)(output[_AMVU]);
  }
  if (String(output.SecurityGroups).trim() === "") {
    contents[_SG] = [];
  } else if (output[_SG] != null && output[_SG][_m] != null) {
    contents[_SG] = de_SecurityGroupMembershipList((0, import_smithy_client.getArrayIfSingleItem)(output[_SG][_m]), context);
  }
  if (output[_RGIe] != null) {
    contents[_RGIe] = (0, import_smithy_client.expectString)(output[_RGIe]);
  }
  if (output[_SRL] != null) {
    contents[_SRL] = (0, import_smithy_client.strictParseInt32)(output[_SRL]);
  }
  if (output[_SW] != null) {
    contents[_SW] = (0, import_smithy_client.expectString)(output[_SW]);
  }
  if (output[_ATE] != null) {
    contents[_ATE] = (0, import_smithy_client.parseBoolean)(output[_ATE]);
  }
  if (output[_ATLMD] != null) {
    contents[_ATLMD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_ATLMD]));
  }
  if (output[_TEE] != null) {
    contents[_TEE] = (0, import_smithy_client.parseBoolean)(output[_TEE]);
  }
  if (output[_AREE] != null) {
    contents[_AREE] = (0, import_smithy_client.parseBoolean)(output[_AREE]);
  }
  if (output[_ARN] != null) {
    contents[_ARN] = (0, import_smithy_client.expectString)(output[_ARN]);
  }
  if (output[_RGLDE] != null) {
    contents[_RGLDE] = (0, import_smithy_client.parseBoolean)(output[_RGLDE]);
  }
  if (String(output.LogDeliveryConfigurations).trim() === "") {
    contents[_LDC] = [];
  } else if (output[_LDC] != null && output[_LDC][_LDCo] != null) {
    contents[_LDC] = de_LogDeliveryConfigurationList((0, import_smithy_client.getArrayIfSingleItem)(output[_LDC][_LDCo]), context);
  }
  if (output[_NT] != null) {
    contents[_NT] = (0, import_smithy_client.expectString)(output[_NT]);
  }
  if (output[_ID] != null) {
    contents[_ID] = (0, import_smithy_client.expectString)(output[_ID]);
  }
  if (output[_TEM] != null) {
    contents[_TEM] = (0, import_smithy_client.expectString)(output[_TEM]);
  }
  return contents;
}, "de_CacheCluster");
var de_CacheClusterAlreadyExistsFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_CacheClusterAlreadyExistsFault");
var de_CacheClusterList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_CacheCluster(entry, context);
  });
}, "de_CacheClusterList");
var de_CacheClusterMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.expectString)(output[_Ma]);
  }
  if (String(output.CacheClusters).trim() === "") {
    contents[_CC] = [];
  } else if (output[_CC] != null && output[_CC][_CCa] != null) {
    contents[_CC] = de_CacheClusterList((0, import_smithy_client.getArrayIfSingleItem)(output[_CC][_CCa]), context);
  }
  return contents;
}, "de_CacheClusterMessage");
var de_CacheClusterNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_CacheClusterNotFoundFault");
var de_CacheEngineVersion = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_E] != null) {
    contents[_E] = (0, import_smithy_client.expectString)(output[_E]);
  }
  if (output[_EV] != null) {
    contents[_EV] = (0, import_smithy_client.expectString)(output[_EV]);
  }
  if (output[_CPGF] != null) {
    contents[_CPGF] = (0, import_smithy_client.expectString)(output[_CPGF]);
  }
  if (output[_CED] != null) {
    contents[_CED] = (0, import_smithy_client.expectString)(output[_CED]);
  }
  if (output[_CEVD] != null) {
    contents[_CEVD] = (0, import_smithy_client.expectString)(output[_CEVD]);
  }
  return contents;
}, "de_CacheEngineVersion");
var de_CacheEngineVersionList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_CacheEngineVersion(entry, context);
  });
}, "de_CacheEngineVersionList");
var de_CacheEngineVersionMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.expectString)(output[_Ma]);
  }
  if (String(output.CacheEngineVersions).trim() === "") {
    contents[_CEV] = [];
  } else if (output[_CEV] != null && output[_CEV][_CEVa] != null) {
    contents[_CEV] = de_CacheEngineVersionList((0, import_smithy_client.getArrayIfSingleItem)(output[_CEV][_CEVa]), context);
  }
  return contents;
}, "de_CacheEngineVersionMessage");
var de_CacheNode = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CNI] != null) {
    contents[_CNI] = (0, import_smithy_client.expectString)(output[_CNI]);
  }
  if (output[_CNS] != null) {
    contents[_CNS] = (0, import_smithy_client.expectString)(output[_CNS]);
  }
  if (output[_CNCT] != null) {
    contents[_CNCT] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CNCT]));
  }
  if (output[_End] != null) {
    contents[_End] = de_Endpoint(output[_End], context);
  }
  if (output[_PGS] != null) {
    contents[_PGS] = (0, import_smithy_client.expectString)(output[_PGS]);
  }
  if (output[_SCNIo] != null) {
    contents[_SCNIo] = (0, import_smithy_client.expectString)(output[_SCNIo]);
  }
  if (output[_CAZ] != null) {
    contents[_CAZ] = (0, import_smithy_client.expectString)(output[_CAZ]);
  }
  if (output[_COA] != null) {
    contents[_COA] = (0, import_smithy_client.expectString)(output[_COA]);
  }
  return contents;
}, "de_CacheNode");
var de_CacheNodeIdsList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_CacheNodeIdsList");
var de_CacheNodeList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_CacheNode(entry, context);
  });
}, "de_CacheNodeList");
var de_CacheNodeTypeSpecificParameter = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_PN] != null) {
    contents[_PN] = (0, import_smithy_client.expectString)(output[_PN]);
  }
  if (output[_D] != null) {
    contents[_D] = (0, import_smithy_client.expectString)(output[_D]);
  }
  if (output[_S] != null) {
    contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
  }
  if (output[_DTa] != null) {
    contents[_DTa] = (0, import_smithy_client.expectString)(output[_DTa]);
  }
  if (output[_AV] != null) {
    contents[_AV] = (0, import_smithy_client.expectString)(output[_AV]);
  }
  if (output[_IM] != null) {
    contents[_IM] = (0, import_smithy_client.parseBoolean)(output[_IM]);
  }
  if (output[_MEVi] != null) {
    contents[_MEVi] = (0, import_smithy_client.expectString)(output[_MEVi]);
  }
  if (String(output.CacheNodeTypeSpecificValues).trim() === "") {
    contents[_CNTSV] = [];
  } else if (output[_CNTSV] != null && output[_CNTSV][_CNTSVa] != null) {
    contents[_CNTSV] = de_CacheNodeTypeSpecificValueList((0, import_smithy_client.getArrayIfSingleItem)(output[_CNTSV][_CNTSVa]), context);
  }
  if (output[_CT] != null) {
    contents[_CT] = (0, import_smithy_client.expectString)(output[_CT]);
  }
  return contents;
}, "de_CacheNodeTypeSpecificParameter");
var de_CacheNodeTypeSpecificParametersList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_CacheNodeTypeSpecificParameter(entry, context);
  });
}, "de_CacheNodeTypeSpecificParametersList");
var de_CacheNodeTypeSpecificValue = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CNT] != null) {
    contents[_CNT] = (0, import_smithy_client.expectString)(output[_CNT]);
  }
  if (output[_Val] != null) {
    contents[_Val] = (0, import_smithy_client.expectString)(output[_Val]);
  }
  return contents;
}, "de_CacheNodeTypeSpecificValue");
var de_CacheNodeTypeSpecificValueList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_CacheNodeTypeSpecificValue(entry, context);
  });
}, "de_CacheNodeTypeSpecificValueList");
var de_CacheNodeUpdateStatus = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CNI] != null) {
    contents[_CNI] = (0, import_smithy_client.expectString)(output[_CNI]);
  }
  if (output[_NUS] != null) {
    contents[_NUS] = (0, import_smithy_client.expectString)(output[_NUS]);
  }
  if (output[_NDD] != null) {
    contents[_NDD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_NDD]));
  }
  if (output[_NUSD] != null) {
    contents[_NUSD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_NUSD]));
  }
  if (output[_NUED] != null) {
    contents[_NUED] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_NUED]));
  }
  if (output[_NUIB] != null) {
    contents[_NUIB] = (0, import_smithy_client.expectString)(output[_NUIB]);
  }
  if (output[_NUID] != null) {
    contents[_NUID] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_NUID]));
  }
  if (output[_NUSMD] != null) {
    contents[_NUSMD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_NUSMD]));
  }
  return contents;
}, "de_CacheNodeUpdateStatus");
var de_CacheNodeUpdateStatusList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_CacheNodeUpdateStatus(entry, context);
  });
}, "de_CacheNodeUpdateStatusList");
var de_CacheParameterGroup = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CPGN] != null) {
    contents[_CPGN] = (0, import_smithy_client.expectString)(output[_CPGN]);
  }
  if (output[_CPGF] != null) {
    contents[_CPGF] = (0, import_smithy_client.expectString)(output[_CPGF]);
  }
  if (output[_D] != null) {
    contents[_D] = (0, import_smithy_client.expectString)(output[_D]);
  }
  if (output[_IG] != null) {
    contents[_IG] = (0, import_smithy_client.parseBoolean)(output[_IG]);
  }
  if (output[_ARN] != null) {
    contents[_ARN] = (0, import_smithy_client.expectString)(output[_ARN]);
  }
  return contents;
}, "de_CacheParameterGroup");
var de_CacheParameterGroupAlreadyExistsFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_CacheParameterGroupAlreadyExistsFault");
var de_CacheParameterGroupDetails = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.expectString)(output[_Ma]);
  }
  if (String(output.Parameters).trim() === "") {
    contents[_Pa] = [];
  } else if (output[_Pa] != null && output[_Pa][_Par] != null) {
    contents[_Pa] = de_ParametersList((0, import_smithy_client.getArrayIfSingleItem)(output[_Pa][_Par]), context);
  }
  if (String(output.CacheNodeTypeSpecificParameters).trim() === "") {
    contents[_CNTSP] = [];
  } else if (output[_CNTSP] != null && output[_CNTSP][_CNTSPa] != null) {
    contents[_CNTSP] = de_CacheNodeTypeSpecificParametersList((0, import_smithy_client.getArrayIfSingleItem)(output[_CNTSP][_CNTSPa]), context);
  }
  return contents;
}, "de_CacheParameterGroupDetails");
var de_CacheParameterGroupList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_CacheParameterGroup(entry, context);
  });
}, "de_CacheParameterGroupList");
var de_CacheParameterGroupNameMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CPGN] != null) {
    contents[_CPGN] = (0, import_smithy_client.expectString)(output[_CPGN]);
  }
  return contents;
}, "de_CacheParameterGroupNameMessage");
var de_CacheParameterGroupNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_CacheParameterGroupNotFoundFault");
var de_CacheParameterGroupQuotaExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_CacheParameterGroupQuotaExceededFault");
var de_CacheParameterGroupsMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.expectString)(output[_Ma]);
  }
  if (String(output.CacheParameterGroups).trim() === "") {
    contents[_CPGa] = [];
  } else if (output[_CPGa] != null && output[_CPGa][_CPG] != null) {
    contents[_CPGa] = de_CacheParameterGroupList((0, import_smithy_client.getArrayIfSingleItem)(output[_CPGa][_CPG]), context);
  }
  return contents;
}, "de_CacheParameterGroupsMessage");
var de_CacheParameterGroupStatus = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CPGN] != null) {
    contents[_CPGN] = (0, import_smithy_client.expectString)(output[_CPGN]);
  }
  if (output[_PAS] != null) {
    contents[_PAS] = (0, import_smithy_client.expectString)(output[_PAS]);
  }
  if (String(output.CacheNodeIdsToReboot).trim() === "") {
    contents[_CNITRa] = [];
  } else if (output[_CNITRa] != null && output[_CNITRa][_CNI] != null) {
    contents[_CNITRa] = de_CacheNodeIdsList((0, import_smithy_client.getArrayIfSingleItem)(output[_CNITRa][_CNI]), context);
  }
  return contents;
}, "de_CacheParameterGroupStatus");
var de_CacheSecurityGroup = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_OI] != null) {
    contents[_OI] = (0, import_smithy_client.expectString)(output[_OI]);
  }
  if (output[_CSGN] != null) {
    contents[_CSGN] = (0, import_smithy_client.expectString)(output[_CSGN]);
  }
  if (output[_D] != null) {
    contents[_D] = (0, import_smithy_client.expectString)(output[_D]);
  }
  if (String(output.EC2SecurityGroups).trim() === "") {
    contents[_ECSG] = [];
  } else if (output[_ECSG] != null && output[_ECSG][_ECSGe] != null) {
    contents[_ECSG] = de_EC2SecurityGroupList((0, import_smithy_client.getArrayIfSingleItem)(output[_ECSG][_ECSGe]), context);
  }
  if (output[_ARN] != null) {
    contents[_ARN] = (0, import_smithy_client.expectString)(output[_ARN]);
  }
  return contents;
}, "de_CacheSecurityGroup");
var de_CacheSecurityGroupAlreadyExistsFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_CacheSecurityGroupAlreadyExistsFault");
var de_CacheSecurityGroupMembership = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CSGN] != null) {
    contents[_CSGN] = (0, import_smithy_client.expectString)(output[_CSGN]);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  return contents;
}, "de_CacheSecurityGroupMembership");
var de_CacheSecurityGroupMembershipList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_CacheSecurityGroupMembership(entry, context);
  });
}, "de_CacheSecurityGroupMembershipList");
var de_CacheSecurityGroupMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.expectString)(output[_Ma]);
  }
  if (String(output.CacheSecurityGroups).trim() === "") {
    contents[_CSGa] = [];
  } else if (output[_CSGa] != null && output[_CSGa][_CSG] != null) {
    contents[_CSGa] = de_CacheSecurityGroups((0, import_smithy_client.getArrayIfSingleItem)(output[_CSGa][_CSG]), context);
  }
  return contents;
}, "de_CacheSecurityGroupMessage");
var de_CacheSecurityGroupNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_CacheSecurityGroupNotFoundFault");
var de_CacheSecurityGroupQuotaExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_CacheSecurityGroupQuotaExceededFault");
var de_CacheSecurityGroups = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_CacheSecurityGroup(entry, context);
  });
}, "de_CacheSecurityGroups");
var de_CacheSubnetGroup = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CSGNa] != null) {
    contents[_CSGNa] = (0, import_smithy_client.expectString)(output[_CSGNa]);
  }
  if (output[_CSGD] != null) {
    contents[_CSGD] = (0, import_smithy_client.expectString)(output[_CSGD]);
  }
  if (output[_VI] != null) {
    contents[_VI] = (0, import_smithy_client.expectString)(output[_VI]);
  }
  if (String(output.Subnets).trim() === "") {
    contents[_Su] = [];
  } else if (output[_Su] != null && output[_Su][_Sub] != null) {
    contents[_Su] = de_SubnetList((0, import_smithy_client.getArrayIfSingleItem)(output[_Su][_Sub]), context);
  }
  if (output[_ARN] != null) {
    contents[_ARN] = (0, import_smithy_client.expectString)(output[_ARN]);
  }
  if (String(output.SupportedNetworkTypes).trim() === "") {
    contents[_SNT] = [];
  } else if (output[_SNT] != null && output[_SNT][_m] != null) {
    contents[_SNT] = de_NetworkTypeList((0, import_smithy_client.getArrayIfSingleItem)(output[_SNT][_m]), context);
  }
  return contents;
}, "de_CacheSubnetGroup");
var de_CacheSubnetGroupAlreadyExistsFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_CacheSubnetGroupAlreadyExistsFault");
var de_CacheSubnetGroupInUse = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_CacheSubnetGroupInUse");
var de_CacheSubnetGroupMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.expectString)(output[_Ma]);
  }
  if (String(output.CacheSubnetGroups).trim() === "") {
    contents[_CSGac] = [];
  } else if (output[_CSGac] != null && output[_CSGac][_CSGach] != null) {
    contents[_CSGac] = de_CacheSubnetGroups((0, import_smithy_client.getArrayIfSingleItem)(output[_CSGac][_CSGach]), context);
  }
  return contents;
}, "de_CacheSubnetGroupMessage");
var de_CacheSubnetGroupNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_CacheSubnetGroupNotFoundFault");
var de_CacheSubnetGroupQuotaExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_CacheSubnetGroupQuotaExceededFault");
var de_CacheSubnetGroups = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_CacheSubnetGroup(entry, context);
  });
}, "de_CacheSubnetGroups");
var de_CacheSubnetQuotaExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_CacheSubnetQuotaExceededFault");
var de_CacheUsageLimits = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DSa] != null) {
    contents[_DSa] = de_DataStorage(output[_DSa], context);
  }
  if (output[_ECPUPS] != null) {
    contents[_ECPUPS] = de_ECPUPerSecond(output[_ECPUPS], context);
  }
  return contents;
}, "de_CacheUsageLimits");
var de_CloudWatchLogsDestinationDetails = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_LG] != null) {
    contents[_LG] = (0, import_smithy_client.expectString)(output[_LG]);
  }
  return contents;
}, "de_CloudWatchLogsDestinationDetails");
var de_ClusterIdList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_ClusterIdList");
var de_ClusterQuotaForCustomerExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_ClusterQuotaForCustomerExceededFault");
var de_CompleteMigrationResponse = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RG] != null) {
    contents[_RG] = de_ReplicationGroup(output[_RG], context);
  }
  return contents;
}, "de_CompleteMigrationResponse");
var de_CopyServerlessCacheSnapshotResponse = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SCS] != null) {
    contents[_SCS] = de_ServerlessCacheSnapshot(output[_SCS], context);
  }
  return contents;
}, "de_CopyServerlessCacheSnapshotResponse");
var de_CopySnapshotResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Sn] != null) {
    contents[_Sn] = de_Snapshot(output[_Sn], context);
  }
  return contents;
}, "de_CopySnapshotResult");
var de_CreateCacheClusterResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CCa] != null) {
    contents[_CCa] = de_CacheCluster(output[_CCa], context);
  }
  return contents;
}, "de_CreateCacheClusterResult");
var de_CreateCacheParameterGroupResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CPG] != null) {
    contents[_CPG] = de_CacheParameterGroup(output[_CPG], context);
  }
  return contents;
}, "de_CreateCacheParameterGroupResult");
var de_CreateCacheSecurityGroupResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CSG] != null) {
    contents[_CSG] = de_CacheSecurityGroup(output[_CSG], context);
  }
  return contents;
}, "de_CreateCacheSecurityGroupResult");
var de_CreateCacheSubnetGroupResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CSGach] != null) {
    contents[_CSGach] = de_CacheSubnetGroup(output[_CSGach], context);
  }
  return contents;
}, "de_CreateCacheSubnetGroupResult");
var de_CreateGlobalReplicationGroupResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_GRG] != null) {
    contents[_GRG] = de_GlobalReplicationGroup(output[_GRG], context);
  }
  return contents;
}, "de_CreateGlobalReplicationGroupResult");
var de_CreateReplicationGroupResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RG] != null) {
    contents[_RG] = de_ReplicationGroup(output[_RG], context);
  }
  return contents;
}, "de_CreateReplicationGroupResult");
var de_CreateServerlessCacheResponse = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SCe] != null) {
    contents[_SCe] = de_ServerlessCache(output[_SCe], context);
  }
  return contents;
}, "de_CreateServerlessCacheResponse");
var de_CreateServerlessCacheSnapshotResponse = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SCS] != null) {
    contents[_SCS] = de_ServerlessCacheSnapshot(output[_SCS], context);
  }
  return contents;
}, "de_CreateServerlessCacheSnapshotResponse");
var de_CreateSnapshotResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Sn] != null) {
    contents[_Sn] = de_Snapshot(output[_Sn], context);
  }
  return contents;
}, "de_CreateSnapshotResult");
var de_DataStorage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.strictParseInt32)(output[_M]);
  }
  if (output[_Mi] != null) {
    contents[_Mi] = (0, import_smithy_client.strictParseInt32)(output[_Mi]);
  }
  if (output[_U] != null) {
    contents[_U] = (0, import_smithy_client.expectString)(output[_U]);
  }
  return contents;
}, "de_DataStorage");
var de_DecreaseNodeGroupsInGlobalReplicationGroupResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_GRG] != null) {
    contents[_GRG] = de_GlobalReplicationGroup(output[_GRG], context);
  }
  return contents;
}, "de_DecreaseNodeGroupsInGlobalReplicationGroupResult");
var de_DecreaseReplicaCountResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RG] != null) {
    contents[_RG] = de_ReplicationGroup(output[_RG], context);
  }
  return contents;
}, "de_DecreaseReplicaCountResult");
var de_DefaultUserAssociatedToUserGroupFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_DefaultUserAssociatedToUserGroupFault");
var de_DefaultUserRequired = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_DefaultUserRequired");
var de_DeleteCacheClusterResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CCa] != null) {
    contents[_CCa] = de_CacheCluster(output[_CCa], context);
  }
  return contents;
}, "de_DeleteCacheClusterResult");
var de_DeleteGlobalReplicationGroupResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_GRG] != null) {
    contents[_GRG] = de_GlobalReplicationGroup(output[_GRG], context);
  }
  return contents;
}, "de_DeleteGlobalReplicationGroupResult");
var de_DeleteReplicationGroupResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RG] != null) {
    contents[_RG] = de_ReplicationGroup(output[_RG], context);
  }
  return contents;
}, "de_DeleteReplicationGroupResult");
var de_DeleteServerlessCacheResponse = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SCe] != null) {
    contents[_SCe] = de_ServerlessCache(output[_SCe], context);
  }
  return contents;
}, "de_DeleteServerlessCacheResponse");
var de_DeleteServerlessCacheSnapshotResponse = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SCS] != null) {
    contents[_SCS] = de_ServerlessCacheSnapshot(output[_SCS], context);
  }
  return contents;
}, "de_DeleteServerlessCacheSnapshotResponse");
var de_DeleteSnapshotResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Sn] != null) {
    contents[_Sn] = de_Snapshot(output[_Sn], context);
  }
  return contents;
}, "de_DeleteSnapshotResult");
var de_DescribeEngineDefaultParametersResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_ED] != null) {
    contents[_ED] = de_EngineDefaults(output[_ED], context);
  }
  return contents;
}, "de_DescribeEngineDefaultParametersResult");
var de_DescribeGlobalReplicationGroupsResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.expectString)(output[_Ma]);
  }
  if (String(output.GlobalReplicationGroups).trim() === "") {
    contents[_GRGl] = [];
  } else if (output[_GRGl] != null && output[_GRGl][_GRG] != null) {
    contents[_GRGl] = de_GlobalReplicationGroupList((0, import_smithy_client.getArrayIfSingleItem)(output[_GRGl][_GRG]), context);
  }
  return contents;
}, "de_DescribeGlobalReplicationGroupsResult");
var de_DescribeServerlessCacheSnapshotsResponse = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_NTe] != null) {
    contents[_NTe] = (0, import_smithy_client.expectString)(output[_NTe]);
  }
  if (String(output.ServerlessCacheSnapshots).trim() === "") {
    contents[_SCSe] = [];
  } else if (output[_SCSe] != null && output[_SCSe][_SCS] != null) {
    contents[_SCSe] = de_ServerlessCacheSnapshotList((0, import_smithy_client.getArrayIfSingleItem)(output[_SCSe][_SCS]), context);
  }
  return contents;
}, "de_DescribeServerlessCacheSnapshotsResponse");
var de_DescribeServerlessCachesResponse = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_NTe] != null) {
    contents[_NTe] = (0, import_smithy_client.expectString)(output[_NTe]);
  }
  if (String(output.ServerlessCaches).trim() === "") {
    contents[_SCer] = [];
  } else if (output[_SCer] != null && output[_SCer][_m] != null) {
    contents[_SCer] = de_ServerlessCacheList((0, import_smithy_client.getArrayIfSingleItem)(output[_SCer][_m]), context);
  }
  return contents;
}, "de_DescribeServerlessCachesResponse");
var de_DescribeSnapshotsListMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.expectString)(output[_Ma]);
  }
  if (String(output.Snapshots).trim() === "") {
    contents[_Sna] = [];
  } else if (output[_Sna] != null && output[_Sna][_Sn] != null) {
    contents[_Sna] = de_SnapshotList((0, import_smithy_client.getArrayIfSingleItem)(output[_Sna][_Sn]), context);
  }
  return contents;
}, "de_DescribeSnapshotsListMessage");
var de_DescribeUserGroupsResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (String(output.UserGroups).trim() === "") {
    contents[_UG] = [];
  } else if (output[_UG] != null && output[_UG][_m] != null) {
    contents[_UG] = de_UserGroupList((0, import_smithy_client.getArrayIfSingleItem)(output[_UG][_m]), context);
  }
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.expectString)(output[_Ma]);
  }
  return contents;
}, "de_DescribeUserGroupsResult");
var de_DescribeUsersResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (String(output.Users).trim() === "") {
    contents[_Us] = [];
  } else if (output[_Us] != null && output[_Us][_m] != null) {
    contents[_Us] = de_UserList((0, import_smithy_client.getArrayIfSingleItem)(output[_Us][_m]), context);
  }
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.expectString)(output[_Ma]);
  }
  return contents;
}, "de_DescribeUsersResult");
var de_DestinationDetails = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CWLD] != null) {
    contents[_CWLD] = de_CloudWatchLogsDestinationDetails(output[_CWLD], context);
  }
  if (output[_KFD] != null) {
    contents[_KFD] = de_KinesisFirehoseDestinationDetails(output[_KFD], context);
  }
  return contents;
}, "de_DestinationDetails");
var de_DisassociateGlobalReplicationGroupResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_GRG] != null) {
    contents[_GRG] = de_GlobalReplicationGroup(output[_GRG], context);
  }
  return contents;
}, "de_DisassociateGlobalReplicationGroupResult");
var de_DuplicateUserNameFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_DuplicateUserNameFault");
var de_EC2SecurityGroup = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  if (output[_ECSGN] != null) {
    contents[_ECSGN] = (0, import_smithy_client.expectString)(output[_ECSGN]);
  }
  if (output[_ECSGOI] != null) {
    contents[_ECSGOI] = (0, import_smithy_client.expectString)(output[_ECSGOI]);
  }
  return contents;
}, "de_EC2SecurityGroup");
var de_EC2SecurityGroupList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_EC2SecurityGroup(entry, context);
  });
}, "de_EC2SecurityGroupList");
var de_ECPUPerSecond = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_M] != null) {
    contents[_M] = (0, import_smithy_client.strictParseInt32)(output[_M]);
  }
  if (output[_Mi] != null) {
    contents[_Mi] = (0, import_smithy_client.strictParseInt32)(output[_Mi]);
  }
  return contents;
}, "de_ECPUPerSecond");
var de_Endpoint = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Ad] != null) {
    contents[_Ad] = (0, import_smithy_client.expectString)(output[_Ad]);
  }
  if (output[_Po] != null) {
    contents[_Po] = (0, import_smithy_client.strictParseInt32)(output[_Po]);
  }
  return contents;
}, "de_Endpoint");
var de_EngineDefaults = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CPGF] != null) {
    contents[_CPGF] = (0, import_smithy_client.expectString)(output[_CPGF]);
  }
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.expectString)(output[_Ma]);
  }
  if (String(output.Parameters).trim() === "") {
    contents[_Pa] = [];
  } else if (output[_Pa] != null && output[_Pa][_Par] != null) {
    contents[_Pa] = de_ParametersList((0, import_smithy_client.getArrayIfSingleItem)(output[_Pa][_Par]), context);
  }
  if (String(output.CacheNodeTypeSpecificParameters).trim() === "") {
    contents[_CNTSP] = [];
  } else if (output[_CNTSP] != null && output[_CNTSP][_CNTSPa] != null) {
    contents[_CNTSP] = de_CacheNodeTypeSpecificParametersList((0, import_smithy_client.getArrayIfSingleItem)(output[_CNTSP][_CNTSPa]), context);
  }
  return contents;
}, "de_EngineDefaults");
var de_Event = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SIo] != null) {
    contents[_SIo] = (0, import_smithy_client.expectString)(output[_SIo]);
  }
  if (output[_ST] != null) {
    contents[_ST] = (0, import_smithy_client.expectString)(output[_ST]);
  }
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  if (output[_Da] != null) {
    contents[_Da] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_Da]));
  }
  return contents;
}, "de_Event");
var de_EventList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_Event(entry, context);
  });
}, "de_EventList");
var de_EventsMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.expectString)(output[_Ma]);
  }
  if (String(output.Events).trim() === "") {
    contents[_Ev] = [];
  } else if (output[_Ev] != null && output[_Ev][_Eve] != null) {
    contents[_Ev] = de_EventList((0, import_smithy_client.getArrayIfSingleItem)(output[_Ev][_Eve]), context);
  }
  return contents;
}, "de_EventsMessage");
var de_ExportServerlessCacheSnapshotResponse = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SCS] != null) {
    contents[_SCS] = de_ServerlessCacheSnapshot(output[_SCS], context);
  }
  return contents;
}, "de_ExportServerlessCacheSnapshotResponse");
var de_FailoverGlobalReplicationGroupResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_GRG] != null) {
    contents[_GRG] = de_GlobalReplicationGroup(output[_GRG], context);
  }
  return contents;
}, "de_FailoverGlobalReplicationGroupResult");
var de_GlobalNodeGroup = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_GNGI] != null) {
    contents[_GNGI] = (0, import_smithy_client.expectString)(output[_GNGI]);
  }
  if (output[_Sl] != null) {
    contents[_Sl] = (0, import_smithy_client.expectString)(output[_Sl]);
  }
  return contents;
}, "de_GlobalNodeGroup");
var de_GlobalNodeGroupList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_GlobalNodeGroup(entry, context);
  });
}, "de_GlobalNodeGroupList");
var de_GlobalReplicationGroup = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_GRGI] != null) {
    contents[_GRGI] = (0, import_smithy_client.expectString)(output[_GRGI]);
  }
  if (output[_GRGD] != null) {
    contents[_GRGD] = (0, import_smithy_client.expectString)(output[_GRGD]);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  if (output[_CNT] != null) {
    contents[_CNT] = (0, import_smithy_client.expectString)(output[_CNT]);
  }
  if (output[_E] != null) {
    contents[_E] = (0, import_smithy_client.expectString)(output[_E]);
  }
  if (output[_EV] != null) {
    contents[_EV] = (0, import_smithy_client.expectString)(output[_EV]);
  }
  if (String(output.Members).trim() === "") {
    contents[_Mem] = [];
  } else if (output[_Mem] != null && output[_Mem][_GRGM] != null) {
    contents[_Mem] = de_GlobalReplicationGroupMemberList((0, import_smithy_client.getArrayIfSingleItem)(output[_Mem][_GRGM]), context);
  }
  if (output[_CEl] != null) {
    contents[_CEl] = (0, import_smithy_client.parseBoolean)(output[_CEl]);
  }
  if (String(output.GlobalNodeGroups).trim() === "") {
    contents[_GNG] = [];
  } else if (output[_GNG] != null && output[_GNG][_GNGl] != null) {
    contents[_GNG] = de_GlobalNodeGroupList((0, import_smithy_client.getArrayIfSingleItem)(output[_GNG][_GNGl]), context);
  }
  if (output[_ATE] != null) {
    contents[_ATE] = (0, import_smithy_client.parseBoolean)(output[_ATE]);
  }
  if (output[_TEE] != null) {
    contents[_TEE] = (0, import_smithy_client.parseBoolean)(output[_TEE]);
  }
  if (output[_AREE] != null) {
    contents[_AREE] = (0, import_smithy_client.parseBoolean)(output[_AREE]);
  }
  if (output[_ARN] != null) {
    contents[_ARN] = (0, import_smithy_client.expectString)(output[_ARN]);
  }
  return contents;
}, "de_GlobalReplicationGroup");
var de_GlobalReplicationGroupAlreadyExistsFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_GlobalReplicationGroupAlreadyExistsFault");
var de_GlobalReplicationGroupInfo = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_GRGI] != null) {
    contents[_GRGI] = (0, import_smithy_client.expectString)(output[_GRGI]);
  }
  if (output[_GRGMR] != null) {
    contents[_GRGMR] = (0, import_smithy_client.expectString)(output[_GRGMR]);
  }
  return contents;
}, "de_GlobalReplicationGroupInfo");
var de_GlobalReplicationGroupList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_GlobalReplicationGroup(entry, context);
  });
}, "de_GlobalReplicationGroupList");
var de_GlobalReplicationGroupMember = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RGIe] != null) {
    contents[_RGIe] = (0, import_smithy_client.expectString)(output[_RGIe]);
  }
  if (output[_RGR] != null) {
    contents[_RGR] = (0, import_smithy_client.expectString)(output[_RGR]);
  }
  if (output[_R] != null) {
    contents[_R] = (0, import_smithy_client.expectString)(output[_R]);
  }
  if (output[_AF] != null) {
    contents[_AF] = (0, import_smithy_client.expectString)(output[_AF]);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  return contents;
}, "de_GlobalReplicationGroupMember");
var de_GlobalReplicationGroupMemberList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_GlobalReplicationGroupMember(entry, context);
  });
}, "de_GlobalReplicationGroupMemberList");
var de_GlobalReplicationGroupNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_GlobalReplicationGroupNotFoundFault");
var de_IncreaseNodeGroupsInGlobalReplicationGroupResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_GRG] != null) {
    contents[_GRG] = de_GlobalReplicationGroup(output[_GRG], context);
  }
  return contents;
}, "de_IncreaseNodeGroupsInGlobalReplicationGroupResult");
var de_IncreaseReplicaCountResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RG] != null) {
    contents[_RG] = de_ReplicationGroup(output[_RG], context);
  }
  return contents;
}, "de_IncreaseReplicaCountResult");
var de_InsufficientCacheClusterCapacityFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_InsufficientCacheClusterCapacityFault");
var de_InvalidARNFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_InvalidARNFault");
var de_InvalidCacheClusterStateFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_InvalidCacheClusterStateFault");
var de_InvalidCacheParameterGroupStateFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_InvalidCacheParameterGroupStateFault");
var de_InvalidCacheSecurityGroupStateFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_InvalidCacheSecurityGroupStateFault");
var de_InvalidCredentialsException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_InvalidCredentialsException");
var de_InvalidGlobalReplicationGroupStateFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_InvalidGlobalReplicationGroupStateFault");
var de_InvalidKMSKeyFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_InvalidKMSKeyFault");
var de_InvalidParameterCombinationException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_InvalidParameterCombinationException");
var de_InvalidParameterValueException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_InvalidParameterValueException");
var de_InvalidReplicationGroupStateFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_InvalidReplicationGroupStateFault");
var de_InvalidServerlessCacheSnapshotStateFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_InvalidServerlessCacheSnapshotStateFault");
var de_InvalidServerlessCacheStateFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_InvalidServerlessCacheStateFault");
var de_InvalidSnapshotStateFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_InvalidSnapshotStateFault");
var de_InvalidSubnet = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_InvalidSubnet");
var de_InvalidUserGroupStateFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_InvalidUserGroupStateFault");
var de_InvalidUserStateFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_InvalidUserStateFault");
var de_InvalidVPCNetworkStateFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_InvalidVPCNetworkStateFault");
var de_KinesisFirehoseDestinationDetails = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DSel] != null) {
    contents[_DSel] = (0, import_smithy_client.expectString)(output[_DSel]);
  }
  return contents;
}, "de_KinesisFirehoseDestinationDetails");
var de_LogDeliveryConfiguration = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_LT] != null) {
    contents[_LT] = (0, import_smithy_client.expectString)(output[_LT]);
  }
  if (output[_DT] != null) {
    contents[_DT] = (0, import_smithy_client.expectString)(output[_DT]);
  }
  if (output[_DD] != null) {
    contents[_DD] = de_DestinationDetails(output[_DD], context);
  }
  if (output[_LF] != null) {
    contents[_LF] = (0, import_smithy_client.expectString)(output[_LF]);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_LogDeliveryConfiguration");
var de_LogDeliveryConfigurationList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_LogDeliveryConfiguration(entry, context);
  });
}, "de_LogDeliveryConfigurationList");
var de_ModifyCacheClusterResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CCa] != null) {
    contents[_CCa] = de_CacheCluster(output[_CCa], context);
  }
  return contents;
}, "de_ModifyCacheClusterResult");
var de_ModifyCacheSubnetGroupResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CSGach] != null) {
    contents[_CSGach] = de_CacheSubnetGroup(output[_CSGach], context);
  }
  return contents;
}, "de_ModifyCacheSubnetGroupResult");
var de_ModifyGlobalReplicationGroupResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_GRG] != null) {
    contents[_GRG] = de_GlobalReplicationGroup(output[_GRG], context);
  }
  return contents;
}, "de_ModifyGlobalReplicationGroupResult");
var de_ModifyReplicationGroupResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RG] != null) {
    contents[_RG] = de_ReplicationGroup(output[_RG], context);
  }
  return contents;
}, "de_ModifyReplicationGroupResult");
var de_ModifyReplicationGroupShardConfigurationResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RG] != null) {
    contents[_RG] = de_ReplicationGroup(output[_RG], context);
  }
  return contents;
}, "de_ModifyReplicationGroupShardConfigurationResult");
var de_ModifyServerlessCacheResponse = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SCe] != null) {
    contents[_SCe] = de_ServerlessCache(output[_SCe], context);
  }
  return contents;
}, "de_ModifyServerlessCacheResponse");
var de_NetworkTypeList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_NetworkTypeList");
var de_NodeGroup = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_NGI] != null) {
    contents[_NGI] = (0, import_smithy_client.expectString)(output[_NGI]);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  if (output[_PE] != null) {
    contents[_PE] = de_Endpoint(output[_PE], context);
  }
  if (output[_RE] != null) {
    contents[_RE] = de_Endpoint(output[_RE], context);
  }
  if (output[_Sl] != null) {
    contents[_Sl] = (0, import_smithy_client.expectString)(output[_Sl]);
  }
  if (String(output.NodeGroupMembers).trim() === "") {
    contents[_NGM] = [];
  } else if (output[_NGM] != null && output[_NGM][_NGMo] != null) {
    contents[_NGM] = de_NodeGroupMemberList((0, import_smithy_client.getArrayIfSingleItem)(output[_NGM][_NGMo]), context);
  }
  return contents;
}, "de_NodeGroup");
var de_NodeGroupConfiguration = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_NGI] != null) {
    contents[_NGI] = (0, import_smithy_client.expectString)(output[_NGI]);
  }
  if (output[_Sl] != null) {
    contents[_Sl] = (0, import_smithy_client.expectString)(output[_Sl]);
  }
  if (output[_RCep] != null) {
    contents[_RCep] = (0, import_smithy_client.strictParseInt32)(output[_RCep]);
  }
  if (output[_PAZri] != null) {
    contents[_PAZri] = (0, import_smithy_client.expectString)(output[_PAZri]);
  }
  if (String(output.ReplicaAvailabilityZones).trim() === "") {
    contents[_RAZ] = [];
  } else if (output[_RAZ] != null && output[_RAZ][_AZ] != null) {
    contents[_RAZ] = de_AvailabilityZonesList((0, import_smithy_client.getArrayIfSingleItem)(output[_RAZ][_AZ]), context);
  }
  if (output[_POAri] != null) {
    contents[_POAri] = (0, import_smithy_client.expectString)(output[_POAri]);
  }
  if (String(output.ReplicaOutpostArns).trim() === "") {
    contents[_ROA] = [];
  } else if (output[_ROA] != null && output[_ROA][_OA] != null) {
    contents[_ROA] = de_OutpostArnsList((0, import_smithy_client.getArrayIfSingleItem)(output[_ROA][_OA]), context);
  }
  return contents;
}, "de_NodeGroupConfiguration");
var de_NodeGroupList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_NodeGroup(entry, context);
  });
}, "de_NodeGroupList");
var de_NodeGroupMember = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CCIa] != null) {
    contents[_CCIa] = (0, import_smithy_client.expectString)(output[_CCIa]);
  }
  if (output[_CNI] != null) {
    contents[_CNI] = (0, import_smithy_client.expectString)(output[_CNI]);
  }
  if (output[_REe] != null) {
    contents[_REe] = de_Endpoint(output[_REe], context);
  }
  if (output[_PAZr] != null) {
    contents[_PAZr] = (0, import_smithy_client.expectString)(output[_PAZr]);
  }
  if (output[_POAr] != null) {
    contents[_POAr] = (0, import_smithy_client.expectString)(output[_POAr]);
  }
  if (output[_CR] != null) {
    contents[_CR] = (0, import_smithy_client.expectString)(output[_CR]);
  }
  return contents;
}, "de_NodeGroupMember");
var de_NodeGroupMemberList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_NodeGroupMember(entry, context);
  });
}, "de_NodeGroupMemberList");
var de_NodeGroupMemberUpdateStatus = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CCIa] != null) {
    contents[_CCIa] = (0, import_smithy_client.expectString)(output[_CCIa]);
  }
  if (output[_CNI] != null) {
    contents[_CNI] = (0, import_smithy_client.expectString)(output[_CNI]);
  }
  if (output[_NUS] != null) {
    contents[_NUS] = (0, import_smithy_client.expectString)(output[_NUS]);
  }
  if (output[_NDD] != null) {
    contents[_NDD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_NDD]));
  }
  if (output[_NUSD] != null) {
    contents[_NUSD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_NUSD]));
  }
  if (output[_NUED] != null) {
    contents[_NUED] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_NUED]));
  }
  if (output[_NUIB] != null) {
    contents[_NUIB] = (0, import_smithy_client.expectString)(output[_NUIB]);
  }
  if (output[_NUID] != null) {
    contents[_NUID] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_NUID]));
  }
  if (output[_NUSMD] != null) {
    contents[_NUSMD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_NUSMD]));
  }
  return contents;
}, "de_NodeGroupMemberUpdateStatus");
var de_NodeGroupMemberUpdateStatusList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_NodeGroupMemberUpdateStatus(entry, context);
  });
}, "de_NodeGroupMemberUpdateStatusList");
var de_NodeGroupNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_NodeGroupNotFoundFault");
var de_NodeGroupsPerReplicationGroupQuotaExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_NodeGroupsPerReplicationGroupQuotaExceededFault");
var de_NodeGroupUpdateStatus = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_NGI] != null) {
    contents[_NGI] = (0, import_smithy_client.expectString)(output[_NGI]);
  }
  if (String(output.NodeGroupMemberUpdateStatus).trim() === "") {
    contents[_NGMUS] = [];
  } else if (output[_NGMUS] != null && output[_NGMUS][_NGMUS] != null) {
    contents[_NGMUS] = de_NodeGroupMemberUpdateStatusList((0, import_smithy_client.getArrayIfSingleItem)(output[_NGMUS][_NGMUS]), context);
  }
  return contents;
}, "de_NodeGroupUpdateStatus");
var de_NodeGroupUpdateStatusList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_NodeGroupUpdateStatus(entry, context);
  });
}, "de_NodeGroupUpdateStatusList");
var de_NodeQuotaForClusterExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_NodeQuotaForClusterExceededFault");
var de_NodeQuotaForCustomerExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_NodeQuotaForCustomerExceededFault");
var de_NodeSnapshot = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CCIa] != null) {
    contents[_CCIa] = (0, import_smithy_client.expectString)(output[_CCIa]);
  }
  if (output[_NGI] != null) {
    contents[_NGI] = (0, import_smithy_client.expectString)(output[_NGI]);
  }
  if (output[_CNI] != null) {
    contents[_CNI] = (0, import_smithy_client.expectString)(output[_CNI]);
  }
  if (output[_NGC] != null) {
    contents[_NGC] = de_NodeGroupConfiguration(output[_NGC], context);
  }
  if (output[_CSa] != null) {
    contents[_CSa] = (0, import_smithy_client.expectString)(output[_CSa]);
  }
  if (output[_CNCT] != null) {
    contents[_CNCT] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CNCT]));
  }
  if (output[_SCT] != null) {
    contents[_SCT] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_SCT]));
  }
  return contents;
}, "de_NodeSnapshot");
var de_NodeSnapshotList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_NodeSnapshot(entry, context);
  });
}, "de_NodeSnapshotList");
var de_NodeTypeList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_NodeTypeList");
var de_NoOperationFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_NoOperationFault");
var de_NotificationConfiguration = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_TA] != null) {
    contents[_TA] = (0, import_smithy_client.expectString)(output[_TA]);
  }
  if (output[_TS] != null) {
    contents[_TS] = (0, import_smithy_client.expectString)(output[_TS]);
  }
  return contents;
}, "de_NotificationConfiguration");
var de_OutpostArnsList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_OutpostArnsList");
var de_Parameter = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_PN] != null) {
    contents[_PN] = (0, import_smithy_client.expectString)(output[_PN]);
  }
  if (output[_PV] != null) {
    contents[_PV] = (0, import_smithy_client.expectString)(output[_PV]);
  }
  if (output[_D] != null) {
    contents[_D] = (0, import_smithy_client.expectString)(output[_D]);
  }
  if (output[_S] != null) {
    contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
  }
  if (output[_DTa] != null) {
    contents[_DTa] = (0, import_smithy_client.expectString)(output[_DTa]);
  }
  if (output[_AV] != null) {
    contents[_AV] = (0, import_smithy_client.expectString)(output[_AV]);
  }
  if (output[_IM] != null) {
    contents[_IM] = (0, import_smithy_client.parseBoolean)(output[_IM]);
  }
  if (output[_MEVi] != null) {
    contents[_MEVi] = (0, import_smithy_client.expectString)(output[_MEVi]);
  }
  if (output[_CT] != null) {
    contents[_CT] = (0, import_smithy_client.expectString)(output[_CT]);
  }
  return contents;
}, "de_Parameter");
var de_ParametersList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_Parameter(entry, context);
  });
}, "de_ParametersList");
var de_PendingLogDeliveryConfiguration = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_LT] != null) {
    contents[_LT] = (0, import_smithy_client.expectString)(output[_LT]);
  }
  if (output[_DT] != null) {
    contents[_DT] = (0, import_smithy_client.expectString)(output[_DT]);
  }
  if (output[_DD] != null) {
    contents[_DD] = de_DestinationDetails(output[_DD], context);
  }
  if (output[_LF] != null) {
    contents[_LF] = (0, import_smithy_client.expectString)(output[_LF]);
  }
  return contents;
}, "de_PendingLogDeliveryConfiguration");
var de_PendingLogDeliveryConfigurationList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_PendingLogDeliveryConfiguration(entry, context);
  });
}, "de_PendingLogDeliveryConfigurationList");
var de_PendingModifiedValues = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_NCN] != null) {
    contents[_NCN] = (0, import_smithy_client.strictParseInt32)(output[_NCN]);
  }
  if (String(output.CacheNodeIdsToRemove).trim() === "") {
    contents[_CNITR] = [];
  } else if (output[_CNITR] != null && output[_CNITR][_CNI] != null) {
    contents[_CNITR] = de_CacheNodeIdsList((0, import_smithy_client.getArrayIfSingleItem)(output[_CNITR][_CNI]), context);
  }
  if (output[_EV] != null) {
    contents[_EV] = (0, import_smithy_client.expectString)(output[_EV]);
  }
  if (output[_CNT] != null) {
    contents[_CNT] = (0, import_smithy_client.expectString)(output[_CNT]);
  }
  if (output[_ATS] != null) {
    contents[_ATS] = (0, import_smithy_client.expectString)(output[_ATS]);
  }
  if (String(output.LogDeliveryConfigurations).trim() === "") {
    contents[_LDC] = [];
  } else if (output[_LDC] != null && output[_LDC][_m] != null) {
    contents[_LDC] = de_PendingLogDeliveryConfigurationList((0, import_smithy_client.getArrayIfSingleItem)(output[_LDC][_m]), context);
  }
  if (output[_TEE] != null) {
    contents[_TEE] = (0, import_smithy_client.parseBoolean)(output[_TEE]);
  }
  if (output[_TEM] != null) {
    contents[_TEM] = (0, import_smithy_client.expectString)(output[_TEM]);
  }
  if (output[_SC] != null) {
    contents[_SC] = de_ScaleConfig(output[_SC], context);
  }
  return contents;
}, "de_PendingModifiedValues");
var de_ProcessedUpdateAction = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RGIe] != null) {
    contents[_RGIe] = (0, import_smithy_client.expectString)(output[_RGIe]);
  }
  if (output[_CCIa] != null) {
    contents[_CCIa] = (0, import_smithy_client.expectString)(output[_CCIa]);
  }
  if (output[_SUN] != null) {
    contents[_SUN] = (0, import_smithy_client.expectString)(output[_SUN]);
  }
  if (output[_UAS] != null) {
    contents[_UAS] = (0, import_smithy_client.expectString)(output[_UAS]);
  }
  return contents;
}, "de_ProcessedUpdateAction");
var de_ProcessedUpdateActionList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_ProcessedUpdateAction(entry, context);
  });
}, "de_ProcessedUpdateActionList");
var de_PurchaseReservedCacheNodesOfferingResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RCN] != null) {
    contents[_RCN] = de_ReservedCacheNode(output[_RCN], context);
  }
  return contents;
}, "de_PurchaseReservedCacheNodesOfferingResult");
var de_RebalanceSlotsInGlobalReplicationGroupResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_GRG] != null) {
    contents[_GRG] = de_GlobalReplicationGroup(output[_GRG], context);
  }
  return contents;
}, "de_RebalanceSlotsInGlobalReplicationGroupResult");
var de_RebootCacheClusterResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CCa] != null) {
    contents[_CCa] = de_CacheCluster(output[_CCa], context);
  }
  return contents;
}, "de_RebootCacheClusterResult");
var de_RecurringCharge = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RCA] != null) {
    contents[_RCA] = (0, import_smithy_client.strictParseFloat)(output[_RCA]);
  }
  if (output[_RCF] != null) {
    contents[_RCF] = (0, import_smithy_client.expectString)(output[_RCF]);
  }
  return contents;
}, "de_RecurringCharge");
var de_RecurringChargeList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_RecurringCharge(entry, context);
  });
}, "de_RecurringChargeList");
var de_ReplicationGroup = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RGIe] != null) {
    contents[_RGIe] = (0, import_smithy_client.expectString)(output[_RGIe]);
  }
  if (output[_D] != null) {
    contents[_D] = (0, import_smithy_client.expectString)(output[_D]);
  }
  if (output[_GRGIl] != null) {
    contents[_GRGIl] = de_GlobalReplicationGroupInfo(output[_GRGIl], context);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  if (output[_PMV] != null) {
    contents[_PMV] = de_ReplicationGroupPendingModifiedValues(output[_PMV], context);
  }
  if (String(output.MemberClusters).trim() === "") {
    contents[_MC] = [];
  } else if (output[_MC] != null && output[_MC][_CI] != null) {
    contents[_MC] = de_ClusterIdList((0, import_smithy_client.getArrayIfSingleItem)(output[_MC][_CI]), context);
  }
  if (String(output.NodeGroups).trim() === "") {
    contents[_NG] = [];
  } else if (output[_NG] != null && output[_NG][_NGo] != null) {
    contents[_NG] = de_NodeGroupList((0, import_smithy_client.getArrayIfSingleItem)(output[_NG][_NGo]), context);
  }
  if (output[_SCI] != null) {
    contents[_SCI] = (0, import_smithy_client.expectString)(output[_SCI]);
  }
  if (output[_AF] != null) {
    contents[_AF] = (0, import_smithy_client.expectString)(output[_AF]);
  }
  if (output[_MAZ] != null) {
    contents[_MAZ] = (0, import_smithy_client.expectString)(output[_MAZ]);
  }
  if (output[_CE] != null) {
    contents[_CE] = de_Endpoint(output[_CE], context);
  }
  if (output[_SRL] != null) {
    contents[_SRL] = (0, import_smithy_client.strictParseInt32)(output[_SRL]);
  }
  if (output[_SW] != null) {
    contents[_SW] = (0, import_smithy_client.expectString)(output[_SW]);
  }
  if (output[_CEl] != null) {
    contents[_CEl] = (0, import_smithy_client.parseBoolean)(output[_CEl]);
  }
  if (output[_CNT] != null) {
    contents[_CNT] = (0, import_smithy_client.expectString)(output[_CNT]);
  }
  if (output[_ATE] != null) {
    contents[_ATE] = (0, import_smithy_client.parseBoolean)(output[_ATE]);
  }
  if (output[_ATLMD] != null) {
    contents[_ATLMD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_ATLMD]));
  }
  if (output[_TEE] != null) {
    contents[_TEE] = (0, import_smithy_client.parseBoolean)(output[_TEE]);
  }
  if (output[_AREE] != null) {
    contents[_AREE] = (0, import_smithy_client.parseBoolean)(output[_AREE]);
  }
  if (String(output.MemberClustersOutpostArns).trim() === "") {
    contents[_MCOA] = [];
  } else if (output[_MCOA] != null && output[_MCOA][_RGOA] != null) {
    contents[_MCOA] = de_ReplicationGroupOutpostArnList((0, import_smithy_client.getArrayIfSingleItem)(output[_MCOA][_RGOA]), context);
  }
  if (output[_KKI] != null) {
    contents[_KKI] = (0, import_smithy_client.expectString)(output[_KKI]);
  }
  if (output[_ARN] != null) {
    contents[_ARN] = (0, import_smithy_client.expectString)(output[_ARN]);
  }
  if (String(output.UserGroupIds).trim() === "") {
    contents[_UGI] = [];
  } else if (output[_UGI] != null && output[_UGI][_m] != null) {
    contents[_UGI] = de_UserGroupIdList((0, import_smithy_client.getArrayIfSingleItem)(output[_UGI][_m]), context);
  }
  if (String(output.LogDeliveryConfigurations).trim() === "") {
    contents[_LDC] = [];
  } else if (output[_LDC] != null && output[_LDC][_LDCo] != null) {
    contents[_LDC] = de_LogDeliveryConfigurationList((0, import_smithy_client.getArrayIfSingleItem)(output[_LDC][_LDCo]), context);
  }
  if (output[_RGCT] != null) {
    contents[_RGCT] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_RGCT]));
  }
  if (output[_DTat] != null) {
    contents[_DTat] = (0, import_smithy_client.expectString)(output[_DTat]);
  }
  if (output[_AMVU] != null) {
    contents[_AMVU] = (0, import_smithy_client.parseBoolean)(output[_AMVU]);
  }
  if (output[_NT] != null) {
    contents[_NT] = (0, import_smithy_client.expectString)(output[_NT]);
  }
  if (output[_ID] != null) {
    contents[_ID] = (0, import_smithy_client.expectString)(output[_ID]);
  }
  if (output[_TEM] != null) {
    contents[_TEM] = (0, import_smithy_client.expectString)(output[_TEM]);
  }
  if (output[_CMl] != null) {
    contents[_CMl] = (0, import_smithy_client.expectString)(output[_CMl]);
  }
  if (output[_E] != null) {
    contents[_E] = (0, import_smithy_client.expectString)(output[_E]);
  }
  return contents;
}, "de_ReplicationGroup");
var de_ReplicationGroupAlreadyExistsFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_ReplicationGroupAlreadyExistsFault");
var de_ReplicationGroupAlreadyUnderMigrationFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_ReplicationGroupAlreadyUnderMigrationFault");
var de_ReplicationGroupList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_ReplicationGroup(entry, context);
  });
}, "de_ReplicationGroupList");
var de_ReplicationGroupMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.expectString)(output[_Ma]);
  }
  if (String(output.ReplicationGroups).trim() === "") {
    contents[_RGe] = [];
  } else if (output[_RGe] != null && output[_RGe][_RG] != null) {
    contents[_RGe] = de_ReplicationGroupList((0, import_smithy_client.getArrayIfSingleItem)(output[_RGe][_RG]), context);
  }
  return contents;
}, "de_ReplicationGroupMessage");
var de_ReplicationGroupNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_ReplicationGroupNotFoundFault");
var de_ReplicationGroupNotUnderMigrationFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_ReplicationGroupNotUnderMigrationFault");
var de_ReplicationGroupOutpostArnList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_ReplicationGroupOutpostArnList");
var de_ReplicationGroupPendingModifiedValues = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_PCI] != null) {
    contents[_PCI] = (0, import_smithy_client.expectString)(output[_PCI]);
  }
  if (output[_AFS] != null) {
    contents[_AFS] = (0, import_smithy_client.expectString)(output[_AFS]);
  }
  if (output[_Re] != null) {
    contents[_Re] = de_ReshardingStatus(output[_Re], context);
  }
  if (output[_ATS] != null) {
    contents[_ATS] = (0, import_smithy_client.expectString)(output[_ATS]);
  }
  if (output[_UG] != null) {
    contents[_UG] = de_UserGroupsUpdateStatus(output[_UG], context);
  }
  if (String(output.LogDeliveryConfigurations).trim() === "") {
    contents[_LDC] = [];
  } else if (output[_LDC] != null && output[_LDC][_m] != null) {
    contents[_LDC] = de_PendingLogDeliveryConfigurationList((0, import_smithy_client.getArrayIfSingleItem)(output[_LDC][_m]), context);
  }
  if (output[_TEE] != null) {
    contents[_TEE] = (0, import_smithy_client.parseBoolean)(output[_TEE]);
  }
  if (output[_TEM] != null) {
    contents[_TEM] = (0, import_smithy_client.expectString)(output[_TEM]);
  }
  if (output[_CMl] != null) {
    contents[_CMl] = (0, import_smithy_client.expectString)(output[_CMl]);
  }
  return contents;
}, "de_ReplicationGroupPendingModifiedValues");
var de_ReservedCacheNode = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RCNI] != null) {
    contents[_RCNI] = (0, import_smithy_client.expectString)(output[_RCNI]);
  }
  if (output[_RCNOI] != null) {
    contents[_RCNOI] = (0, import_smithy_client.expectString)(output[_RCNOI]);
  }
  if (output[_CNT] != null) {
    contents[_CNT] = (0, import_smithy_client.expectString)(output[_CNT]);
  }
  if (output[_STt] != null) {
    contents[_STt] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_STt]));
  }
  if (output[_Du] != null) {
    contents[_Du] = (0, import_smithy_client.strictParseInt32)(output[_Du]);
  }
  if (output[_FP] != null) {
    contents[_FP] = (0, import_smithy_client.strictParseFloat)(output[_FP]);
  }
  if (output[_UP] != null) {
    contents[_UP] = (0, import_smithy_client.strictParseFloat)(output[_UP]);
  }
  if (output[_CNC] != null) {
    contents[_CNC] = (0, import_smithy_client.strictParseInt32)(output[_CNC]);
  }
  if (output[_PD] != null) {
    contents[_PD] = (0, import_smithy_client.expectString)(output[_PD]);
  }
  if (output[_OT] != null) {
    contents[_OT] = (0, import_smithy_client.expectString)(output[_OT]);
  }
  if (output[_Sta] != null) {
    contents[_Sta] = (0, import_smithy_client.expectString)(output[_Sta]);
  }
  if (String(output.RecurringCharges).trim() === "") {
    contents[_RCec] = [];
  } else if (output[_RCec] != null && output[_RCec][_RCecu] != null) {
    contents[_RCec] = de_RecurringChargeList((0, import_smithy_client.getArrayIfSingleItem)(output[_RCec][_RCecu]), context);
  }
  if (output[_RARN] != null) {
    contents[_RARN] = (0, import_smithy_client.expectString)(output[_RARN]);
  }
  return contents;
}, "de_ReservedCacheNode");
var de_ReservedCacheNodeAlreadyExistsFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_ReservedCacheNodeAlreadyExistsFault");
var de_ReservedCacheNodeList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_ReservedCacheNode(entry, context);
  });
}, "de_ReservedCacheNodeList");
var de_ReservedCacheNodeMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.expectString)(output[_Ma]);
  }
  if (String(output.ReservedCacheNodes).trim() === "") {
    contents[_RCNe] = [];
  } else if (output[_RCNe] != null && output[_RCNe][_RCN] != null) {
    contents[_RCNe] = de_ReservedCacheNodeList((0, import_smithy_client.getArrayIfSingleItem)(output[_RCNe][_RCN]), context);
  }
  return contents;
}, "de_ReservedCacheNodeMessage");
var de_ReservedCacheNodeNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_ReservedCacheNodeNotFoundFault");
var de_ReservedCacheNodeQuotaExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_ReservedCacheNodeQuotaExceededFault");
var de_ReservedCacheNodesOffering = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RCNOI] != null) {
    contents[_RCNOI] = (0, import_smithy_client.expectString)(output[_RCNOI]);
  }
  if (output[_CNT] != null) {
    contents[_CNT] = (0, import_smithy_client.expectString)(output[_CNT]);
  }
  if (output[_Du] != null) {
    contents[_Du] = (0, import_smithy_client.strictParseInt32)(output[_Du]);
  }
  if (output[_FP] != null) {
    contents[_FP] = (0, import_smithy_client.strictParseFloat)(output[_FP]);
  }
  if (output[_UP] != null) {
    contents[_UP] = (0, import_smithy_client.strictParseFloat)(output[_UP]);
  }
  if (output[_PD] != null) {
    contents[_PD] = (0, import_smithy_client.expectString)(output[_PD]);
  }
  if (output[_OT] != null) {
    contents[_OT] = (0, import_smithy_client.expectString)(output[_OT]);
  }
  if (String(output.RecurringCharges).trim() === "") {
    contents[_RCec] = [];
  } else if (output[_RCec] != null && output[_RCec][_RCecu] != null) {
    contents[_RCec] = de_RecurringChargeList((0, import_smithy_client.getArrayIfSingleItem)(output[_RCec][_RCecu]), context);
  }
  return contents;
}, "de_ReservedCacheNodesOffering");
var de_ReservedCacheNodesOfferingList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_ReservedCacheNodesOffering(entry, context);
  });
}, "de_ReservedCacheNodesOfferingList");
var de_ReservedCacheNodesOfferingMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.expectString)(output[_Ma]);
  }
  if (String(output.ReservedCacheNodesOfferings).trim() === "") {
    contents[_RCNO] = [];
  } else if (output[_RCNO] != null && output[_RCNO][_RCNOe] != null) {
    contents[_RCNO] = de_ReservedCacheNodesOfferingList((0, import_smithy_client.getArrayIfSingleItem)(output[_RCNO][_RCNOe]), context);
  }
  return contents;
}, "de_ReservedCacheNodesOfferingMessage");
var de_ReservedCacheNodesOfferingNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_ReservedCacheNodesOfferingNotFoundFault");
var de_ReshardingStatus = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SMl] != null) {
    contents[_SMl] = de_SlotMigration(output[_SMl], context);
  }
  return contents;
}, "de_ReshardingStatus");
var de_RevokeCacheSecurityGroupIngressResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CSG] != null) {
    contents[_CSG] = de_CacheSecurityGroup(output[_CSG], context);
  }
  return contents;
}, "de_RevokeCacheSecurityGroupIngressResult");
var de_ScaleConfig = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SP] != null) {
    contents[_SP] = (0, import_smithy_client.strictParseInt32)(output[_SP]);
  }
  if (output[_SIM] != null) {
    contents[_SIM] = (0, import_smithy_client.strictParseInt32)(output[_SIM]);
  }
  return contents;
}, "de_ScaleConfig");
var de_SecurityGroupIdsList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_SecurityGroupIdsList");
var de_SecurityGroupMembership = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SGIe] != null) {
    contents[_SGIe] = (0, import_smithy_client.expectString)(output[_SGIe]);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  return contents;
}, "de_SecurityGroupMembership");
var de_SecurityGroupMembershipList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_SecurityGroupMembership(entry, context);
  });
}, "de_SecurityGroupMembershipList");
var de_ServerlessCache = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SCN] != null) {
    contents[_SCN] = (0, import_smithy_client.expectString)(output[_SCN]);
  }
  if (output[_D] != null) {
    contents[_D] = (0, import_smithy_client.expectString)(output[_D]);
  }
  if (output[_CTr] != null) {
    contents[_CTr] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CTr]));
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  if (output[_E] != null) {
    contents[_E] = (0, import_smithy_client.expectString)(output[_E]);
  }
  if (output[_MEV] != null) {
    contents[_MEV] = (0, import_smithy_client.expectString)(output[_MEV]);
  }
  if (output[_FEV] != null) {
    contents[_FEV] = (0, import_smithy_client.expectString)(output[_FEV]);
  }
  if (output[_CUL] != null) {
    contents[_CUL] = de_CacheUsageLimits(output[_CUL], context);
  }
  if (output[_KKI] != null) {
    contents[_KKI] = (0, import_smithy_client.expectString)(output[_KKI]);
  }
  if (String(output.SecurityGroupIds).trim() === "") {
    contents[_SGI] = [];
  } else if (output[_SGI] != null && output[_SGI][_SGIe] != null) {
    contents[_SGI] = de_SecurityGroupIdsList((0, import_smithy_client.getArrayIfSingleItem)(output[_SGI][_SGIe]), context);
  }
  if (output[_End] != null) {
    contents[_End] = de_Endpoint(output[_End], context);
  }
  if (output[_RE] != null) {
    contents[_RE] = de_Endpoint(output[_RE], context);
  }
  if (output[_ARN] != null) {
    contents[_ARN] = (0, import_smithy_client.expectString)(output[_ARN]);
  }
  if (output[_UGIs] != null) {
    contents[_UGIs] = (0, import_smithy_client.expectString)(output[_UGIs]);
  }
  if (String(output.SubnetIds).trim() === "") {
    contents[_SI] = [];
  } else if (output[_SI] != null && output[_SI][_SIu] != null) {
    contents[_SI] = de_SubnetIdsList((0, import_smithy_client.getArrayIfSingleItem)(output[_SI][_SIu]), context);
  }
  if (output[_SRL] != null) {
    contents[_SRL] = (0, import_smithy_client.strictParseInt32)(output[_SRL]);
  }
  if (output[_DST] != null) {
    contents[_DST] = (0, import_smithy_client.expectString)(output[_DST]);
  }
  return contents;
}, "de_ServerlessCache");
var de_ServerlessCacheAlreadyExistsFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_ServerlessCacheAlreadyExistsFault");
var de_ServerlessCacheConfiguration = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SCN] != null) {
    contents[_SCN] = (0, import_smithy_client.expectString)(output[_SCN]);
  }
  if (output[_E] != null) {
    contents[_E] = (0, import_smithy_client.expectString)(output[_E]);
  }
  if (output[_MEV] != null) {
    contents[_MEV] = (0, import_smithy_client.expectString)(output[_MEV]);
  }
  return contents;
}, "de_ServerlessCacheConfiguration");
var de_ServerlessCacheList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_ServerlessCache(entry, context);
  });
}, "de_ServerlessCacheList");
var de_ServerlessCacheNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_ServerlessCacheNotFoundFault");
var de_ServerlessCacheQuotaForCustomerExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_ServerlessCacheQuotaForCustomerExceededFault");
var de_ServerlessCacheSnapshot = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SCSN] != null) {
    contents[_SCSN] = (0, import_smithy_client.expectString)(output[_SCSN]);
  }
  if (output[_ARN] != null) {
    contents[_ARN] = (0, import_smithy_client.expectString)(output[_ARN]);
  }
  if (output[_KKI] != null) {
    contents[_KKI] = (0, import_smithy_client.expectString)(output[_KKI]);
  }
  if (output[_STn] != null) {
    contents[_STn] = (0, import_smithy_client.expectString)(output[_STn]);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  if (output[_CTr] != null) {
    contents[_CTr] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CTr]));
  }
  if (output[_ETx] != null) {
    contents[_ETx] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_ETx]));
  }
  if (output[_BUFC] != null) {
    contents[_BUFC] = (0, import_smithy_client.expectString)(output[_BUFC]);
  }
  if (output[_SCC] != null) {
    contents[_SCC] = de_ServerlessCacheConfiguration(output[_SCC], context);
  }
  return contents;
}, "de_ServerlessCacheSnapshot");
var de_ServerlessCacheSnapshotAlreadyExistsFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_ServerlessCacheSnapshotAlreadyExistsFault");
var de_ServerlessCacheSnapshotList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_ServerlessCacheSnapshot(entry, context);
  });
}, "de_ServerlessCacheSnapshotList");
var de_ServerlessCacheSnapshotNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_ServerlessCacheSnapshotNotFoundFault");
var de_ServerlessCacheSnapshotQuotaExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_ServerlessCacheSnapshotQuotaExceededFault");
var de_ServiceLinkedRoleNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_ServiceLinkedRoleNotFoundFault");
var de_ServiceUpdate = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SUN] != null) {
    contents[_SUN] = (0, import_smithy_client.expectString)(output[_SUN]);
  }
  if (output[_SURD] != null) {
    contents[_SURD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_SURD]));
  }
  if (output[_SUED] != null) {
    contents[_SUED] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_SUED]));
  }
  if (output[_SUSe] != null) {
    contents[_SUSe] = (0, import_smithy_client.expectString)(output[_SUSe]);
  }
  if (output[_SURABD] != null) {
    contents[_SURABD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_SURABD]));
  }
  if (output[_SUS] != null) {
    contents[_SUS] = (0, import_smithy_client.expectString)(output[_SUS]);
  }
  if (output[_SUD] != null) {
    contents[_SUD] = (0, import_smithy_client.expectString)(output[_SUD]);
  }
  if (output[_SUT] != null) {
    contents[_SUT] = (0, import_smithy_client.expectString)(output[_SUT]);
  }
  if (output[_E] != null) {
    contents[_E] = (0, import_smithy_client.expectString)(output[_E]);
  }
  if (output[_EV] != null) {
    contents[_EV] = (0, import_smithy_client.expectString)(output[_EV]);
  }
  if (output[_AUARABD] != null) {
    contents[_AUARABD] = (0, import_smithy_client.parseBoolean)(output[_AUARABD]);
  }
  if (output[_EUT] != null) {
    contents[_EUT] = (0, import_smithy_client.expectString)(output[_EUT]);
  }
  return contents;
}, "de_ServiceUpdate");
var de_ServiceUpdateList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_ServiceUpdate(entry, context);
  });
}, "de_ServiceUpdateList");
var de_ServiceUpdateNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_ServiceUpdateNotFoundFault");
var de_ServiceUpdatesMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.expectString)(output[_Ma]);
  }
  if (String(output.ServiceUpdates).trim() === "") {
    contents[_SU] = [];
  } else if (output[_SU] != null && output[_SU][_SUe] != null) {
    contents[_SU] = de_ServiceUpdateList((0, import_smithy_client.getArrayIfSingleItem)(output[_SU][_SUe]), context);
  }
  return contents;
}, "de_ServiceUpdatesMessage");
var de_SlotMigration = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_PP] != null) {
    contents[_PP] = (0, import_smithy_client.strictParseFloat)(output[_PP]);
  }
  return contents;
}, "de_SlotMigration");
var de_Snapshot = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SN] != null) {
    contents[_SN] = (0, import_smithy_client.expectString)(output[_SN]);
  }
  if (output[_RGIe] != null) {
    contents[_RGIe] = (0, import_smithy_client.expectString)(output[_RGIe]);
  }
  if (output[_RGD] != null) {
    contents[_RGD] = (0, import_smithy_client.expectString)(output[_RGD]);
  }
  if (output[_CCIa] != null) {
    contents[_CCIa] = (0, import_smithy_client.expectString)(output[_CCIa]);
  }
  if (output[_SSn] != null) {
    contents[_SSn] = (0, import_smithy_client.expectString)(output[_SSn]);
  }
  if (output[_SS] != null) {
    contents[_SS] = (0, import_smithy_client.expectString)(output[_SS]);
  }
  if (output[_CNT] != null) {
    contents[_CNT] = (0, import_smithy_client.expectString)(output[_CNT]);
  }
  if (output[_E] != null) {
    contents[_E] = (0, import_smithy_client.expectString)(output[_E]);
  }
  if (output[_EV] != null) {
    contents[_EV] = (0, import_smithy_client.expectString)(output[_EV]);
  }
  if (output[_NCN] != null) {
    contents[_NCN] = (0, import_smithy_client.strictParseInt32)(output[_NCN]);
  }
  if (output[_PAZr] != null) {
    contents[_PAZr] = (0, import_smithy_client.expectString)(output[_PAZr]);
  }
  if (output[_POAr] != null) {
    contents[_POAr] = (0, import_smithy_client.expectString)(output[_POAr]);
  }
  if (output[_CCCT] != null) {
    contents[_CCCT] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CCCT]));
  }
  if (output[_PMW] != null) {
    contents[_PMW] = (0, import_smithy_client.expectString)(output[_PMW]);
  }
  if (output[_TA] != null) {
    contents[_TA] = (0, import_smithy_client.expectString)(output[_TA]);
  }
  if (output[_Po] != null) {
    contents[_Po] = (0, import_smithy_client.strictParseInt32)(output[_Po]);
  }
  if (output[_CPGN] != null) {
    contents[_CPGN] = (0, import_smithy_client.expectString)(output[_CPGN]);
  }
  if (output[_CSGNa] != null) {
    contents[_CSGNa] = (0, import_smithy_client.expectString)(output[_CSGNa]);
  }
  if (output[_VI] != null) {
    contents[_VI] = (0, import_smithy_client.expectString)(output[_VI]);
  }
  if (output[_AMVU] != null) {
    contents[_AMVU] = (0, import_smithy_client.parseBoolean)(output[_AMVU]);
  }
  if (output[_SRL] != null) {
    contents[_SRL] = (0, import_smithy_client.strictParseInt32)(output[_SRL]);
  }
  if (output[_SW] != null) {
    contents[_SW] = (0, import_smithy_client.expectString)(output[_SW]);
  }
  if (output[_NNG] != null) {
    contents[_NNG] = (0, import_smithy_client.strictParseInt32)(output[_NNG]);
  }
  if (output[_AF] != null) {
    contents[_AF] = (0, import_smithy_client.expectString)(output[_AF]);
  }
  if (String(output.NodeSnapshots).trim() === "") {
    contents[_NS] = [];
  } else if (output[_NS] != null && output[_NS][_NSo] != null) {
    contents[_NS] = de_NodeSnapshotList((0, import_smithy_client.getArrayIfSingleItem)(output[_NS][_NSo]), context);
  }
  if (output[_KKI] != null) {
    contents[_KKI] = (0, import_smithy_client.expectString)(output[_KKI]);
  }
  if (output[_ARN] != null) {
    contents[_ARN] = (0, import_smithy_client.expectString)(output[_ARN]);
  }
  if (output[_DTat] != null) {
    contents[_DTat] = (0, import_smithy_client.expectString)(output[_DTat]);
  }
  return contents;
}, "de_Snapshot");
var de_SnapshotAlreadyExistsFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_SnapshotAlreadyExistsFault");
var de_SnapshotFeatureNotSupportedFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_SnapshotFeatureNotSupportedFault");
var de_SnapshotList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_Snapshot(entry, context);
  });
}, "de_SnapshotList");
var de_SnapshotNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_SnapshotNotFoundFault");
var de_SnapshotQuotaExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_SnapshotQuotaExceededFault");
var de_StartMigrationResponse = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RG] != null) {
    contents[_RG] = de_ReplicationGroup(output[_RG], context);
  }
  return contents;
}, "de_StartMigrationResponse");
var de_Subnet = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SIub] != null) {
    contents[_SIub] = (0, import_smithy_client.expectString)(output[_SIub]);
  }
  if (output[_SAZ] != null) {
    contents[_SAZ] = de_AvailabilityZone(output[_SAZ], context);
  }
  if (output[_SO] != null) {
    contents[_SO] = de_SubnetOutpost(output[_SO], context);
  }
  if (String(output.SupportedNetworkTypes).trim() === "") {
    contents[_SNT] = [];
  } else if (output[_SNT] != null && output[_SNT][_m] != null) {
    contents[_SNT] = de_NetworkTypeList((0, import_smithy_client.getArrayIfSingleItem)(output[_SNT][_m]), context);
  }
  return contents;
}, "de_Subnet");
var de_SubnetIdsList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_SubnetIdsList");
var de_SubnetInUse = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_SubnetInUse");
var de_SubnetList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_Subnet(entry, context);
  });
}, "de_SubnetList");
var de_SubnetNotAllowedFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_SubnetNotAllowedFault");
var de_SubnetOutpost = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SOA] != null) {
    contents[_SOA] = (0, import_smithy_client.expectString)(output[_SOA]);
  }
  return contents;
}, "de_SubnetOutpost");
var de_Tag = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_K] != null) {
    contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
  }
  if (output[_Val] != null) {
    contents[_Val] = (0, import_smithy_client.expectString)(output[_Val]);
  }
  return contents;
}, "de_Tag");
var de_TagList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_Tag(entry, context);
  });
}, "de_TagList");
var de_TagListMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (String(output.TagList).trim() === "") {
    contents[_TL] = [];
  } else if (output[_TL] != null && output[_TL][_Ta] != null) {
    contents[_TL] = de_TagList((0, import_smithy_client.getArrayIfSingleItem)(output[_TL][_Ta]), context);
  }
  return contents;
}, "de_TagListMessage");
var de_TagNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_TagNotFoundFault");
var de_TagQuotaPerResourceExceeded = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_TagQuotaPerResourceExceeded");
var de_TestFailoverNotAvailableFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_TestFailoverNotAvailableFault");
var de_TestFailoverResult = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RG] != null) {
    contents[_RG] = de_ReplicationGroup(output[_RG], context);
  }
  return contents;
}, "de_TestFailoverResult");
var de_TestMigrationResponse = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RG] != null) {
    contents[_RG] = de_ReplicationGroup(output[_RG], context);
  }
  return contents;
}, "de_TestMigrationResponse");
var de_UGReplicationGroupIdList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_UGReplicationGroupIdList");
var de_UGServerlessCacheIdList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_UGServerlessCacheIdList");
var de_UnprocessedUpdateAction = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RGIe] != null) {
    contents[_RGIe] = (0, import_smithy_client.expectString)(output[_RGIe]);
  }
  if (output[_CCIa] != null) {
    contents[_CCIa] = (0, import_smithy_client.expectString)(output[_CCIa]);
  }
  if (output[_SUN] != null) {
    contents[_SUN] = (0, import_smithy_client.expectString)(output[_SUN]);
  }
  if (output[_ETr] != null) {
    contents[_ETr] = (0, import_smithy_client.expectString)(output[_ETr]);
  }
  if (output[_EM] != null) {
    contents[_EM] = (0, import_smithy_client.expectString)(output[_EM]);
  }
  return contents;
}, "de_UnprocessedUpdateAction");
var de_UnprocessedUpdateActionList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_UnprocessedUpdateAction(entry, context);
  });
}, "de_UnprocessedUpdateActionList");
var de_UpdateAction = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RGIe] != null) {
    contents[_RGIe] = (0, import_smithy_client.expectString)(output[_RGIe]);
  }
  if (output[_CCIa] != null) {
    contents[_CCIa] = (0, import_smithy_client.expectString)(output[_CCIa]);
  }
  if (output[_SUN] != null) {
    contents[_SUN] = (0, import_smithy_client.expectString)(output[_SUN]);
  }
  if (output[_SURD] != null) {
    contents[_SURD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_SURD]));
  }
  if (output[_SUSe] != null) {
    contents[_SUSe] = (0, import_smithy_client.expectString)(output[_SUSe]);
  }
  if (output[_SUS] != null) {
    contents[_SUS] = (0, import_smithy_client.expectString)(output[_SUS]);
  }
  if (output[_SURABD] != null) {
    contents[_SURABD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_SURABD]));
  }
  if (output[_SUT] != null) {
    contents[_SUT] = (0, import_smithy_client.expectString)(output[_SUT]);
  }
  if (output[_UAAD] != null) {
    contents[_UAAD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_UAAD]));
  }
  if (output[_UAS] != null) {
    contents[_UAS] = (0, import_smithy_client.expectString)(output[_UAS]);
  }
  if (output[_NU] != null) {
    contents[_NU] = (0, import_smithy_client.expectString)(output[_NU]);
  }
  if (output[_UASMD] != null) {
    contents[_UASMD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_UASMD]));
  }
  if (output[_SMla] != null) {
    contents[_SMla] = (0, import_smithy_client.expectString)(output[_SMla]);
  }
  if (String(output.NodeGroupUpdateStatus).trim() === "") {
    contents[_NGUS] = [];
  } else if (output[_NGUS] != null && output[_NGUS][_NGUS] != null) {
    contents[_NGUS] = de_NodeGroupUpdateStatusList((0, import_smithy_client.getArrayIfSingleItem)(output[_NGUS][_NGUS]), context);
  }
  if (String(output.CacheNodeUpdateStatus).trim() === "") {
    contents[_CNUS] = [];
  } else if (output[_CNUS] != null && output[_CNUS][_CNUS] != null) {
    contents[_CNUS] = de_CacheNodeUpdateStatusList((0, import_smithy_client.getArrayIfSingleItem)(output[_CNUS][_CNUS]), context);
  }
  if (output[_EUT] != null) {
    contents[_EUT] = (0, import_smithy_client.expectString)(output[_EUT]);
  }
  if (output[_E] != null) {
    contents[_E] = (0, import_smithy_client.expectString)(output[_E]);
  }
  return contents;
}, "de_UpdateAction");
var de_UpdateActionList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_UpdateAction(entry, context);
  });
}, "de_UpdateActionList");
var de_UpdateActionResultsMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (String(output.ProcessedUpdateActions).trim() === "") {
    contents[_PUA] = [];
  } else if (output[_PUA] != null && output[_PUA][_PUAr] != null) {
    contents[_PUA] = de_ProcessedUpdateActionList((0, import_smithy_client.getArrayIfSingleItem)(output[_PUA][_PUAr]), context);
  }
  if (String(output.UnprocessedUpdateActions).trim() === "") {
    contents[_UUA] = [];
  } else if (output[_UUA] != null && output[_UUA][_UUAn] != null) {
    contents[_UUA] = de_UnprocessedUpdateActionList((0, import_smithy_client.getArrayIfSingleItem)(output[_UUA][_UUAn]), context);
  }
  return contents;
}, "de_UpdateActionResultsMessage");
var de_UpdateActionsMessage = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Ma] != null) {
    contents[_Ma] = (0, import_smithy_client.expectString)(output[_Ma]);
  }
  if (String(output.UpdateActions).trim() === "") {
    contents[_UA] = [];
  } else if (output[_UA] != null && output[_UA][_UAp] != null) {
    contents[_UA] = de_UpdateActionList((0, import_smithy_client.getArrayIfSingleItem)(output[_UA][_UAp]), context);
  }
  return contents;
}, "de_UpdateActionsMessage");
var de_User = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_UIs] != null) {
    contents[_UIs] = (0, import_smithy_client.expectString)(output[_UIs]);
  }
  if (output[_UN] != null) {
    contents[_UN] = (0, import_smithy_client.expectString)(output[_UN]);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  if (output[_E] != null) {
    contents[_E] = (0, import_smithy_client.expectString)(output[_E]);
  }
  if (output[_MEVi] != null) {
    contents[_MEVi] = (0, import_smithy_client.expectString)(output[_MEVi]);
  }
  if (output[_AS] != null) {
    contents[_AS] = (0, import_smithy_client.expectString)(output[_AS]);
  }
  if (String(output.UserGroupIds).trim() === "") {
    contents[_UGI] = [];
  } else if (output[_UGI] != null && output[_UGI][_m] != null) {
    contents[_UGI] = de_UserGroupIdList((0, import_smithy_client.getArrayIfSingleItem)(output[_UGI][_m]), context);
  }
  if (output[_Au] != null) {
    contents[_Au] = de_Authentication(output[_Au], context);
  }
  if (output[_ARN] != null) {
    contents[_ARN] = (0, import_smithy_client.expectString)(output[_ARN]);
  }
  return contents;
}, "de_User");
var de_UserAlreadyExistsFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_UserAlreadyExistsFault");
var de_UserGroup = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_UGIs] != null) {
    contents[_UGIs] = (0, import_smithy_client.expectString)(output[_UGIs]);
  }
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  if (output[_E] != null) {
    contents[_E] = (0, import_smithy_client.expectString)(output[_E]);
  }
  if (String(output.UserIds).trim() === "") {
    contents[_UI] = [];
  } else if (output[_UI] != null && output[_UI][_m] != null) {
    contents[_UI] = de_UserIdList((0, import_smithy_client.getArrayIfSingleItem)(output[_UI][_m]), context);
  }
  if (output[_MEVi] != null) {
    contents[_MEVi] = (0, import_smithy_client.expectString)(output[_MEVi]);
  }
  if (output[_PCe] != null) {
    contents[_PCe] = de_UserGroupPendingChanges(output[_PCe], context);
  }
  if (String(output.ReplicationGroups).trim() === "") {
    contents[_RGe] = [];
  } else if (output[_RGe] != null && output[_RGe][_m] != null) {
    contents[_RGe] = de_UGReplicationGroupIdList((0, import_smithy_client.getArrayIfSingleItem)(output[_RGe][_m]), context);
  }
  if (String(output.ServerlessCaches).trim() === "") {
    contents[_SCer] = [];
  } else if (output[_SCer] != null && output[_SCer][_m] != null) {
    contents[_SCer] = de_UGServerlessCacheIdList((0, import_smithy_client.getArrayIfSingleItem)(output[_SCer][_m]), context);
  }
  if (output[_ARN] != null) {
    contents[_ARN] = (0, import_smithy_client.expectString)(output[_ARN]);
  }
  return contents;
}, "de_UserGroup");
var de_UserGroupAlreadyExistsFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_UserGroupAlreadyExistsFault");
var de_UserGroupIdList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_UserGroupIdList");
var de_UserGroupList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_UserGroup(entry, context);
  });
}, "de_UserGroupList");
var de_UserGroupNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_UserGroupNotFoundFault");
var de_UserGroupPendingChanges = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (String(output.UserIdsToRemove).trim() === "") {
    contents[_UITR] = [];
  } else if (output[_UITR] != null && output[_UITR][_m] != null) {
    contents[_UITR] = de_UserIdList((0, import_smithy_client.getArrayIfSingleItem)(output[_UITR][_m]), context);
  }
  if (String(output.UserIdsToAdd).trim() === "") {
    contents[_UITA] = [];
  } else if (output[_UITA] != null && output[_UITA][_m] != null) {
    contents[_UITA] = de_UserIdList((0, import_smithy_client.getArrayIfSingleItem)(output[_UITA][_m]), context);
  }
  return contents;
}, "de_UserGroupPendingChanges");
var de_UserGroupQuotaExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_UserGroupQuotaExceededFault");
var de_UserGroupsUpdateStatus = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (String(output.UserGroupIdsToAdd).trim() === "") {
    contents[_UGITA] = [];
  } else if (output[_UGITA] != null && output[_UGITA][_m] != null) {
    contents[_UGITA] = de_UserGroupIdList((0, import_smithy_client.getArrayIfSingleItem)(output[_UGITA][_m]), context);
  }
  if (String(output.UserGroupIdsToRemove).trim() === "") {
    contents[_UGITR] = [];
  } else if (output[_UGITR] != null && output[_UGITR][_m] != null) {
    contents[_UGITR] = de_UserGroupIdList((0, import_smithy_client.getArrayIfSingleItem)(output[_UGITR][_m]), context);
  }
  return contents;
}, "de_UserGroupsUpdateStatus");
var de_UserIdList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_UserIdList");
var de_UserList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_User(entry, context);
  });
}, "de_UserList");
var de_UserNotFoundFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_UserNotFoundFault");
var de_UserQuotaExceededFault = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_me] != null) {
    contents[_me] = (0, import_smithy_client.expectString)(output[_me]);
  }
  return contents;
}, "de_UserQuotaExceededFault");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var throwDefaultError = (0, import_smithy_client.withBaseException)(ElastiCacheServiceException);
var buildHttpRpcRequest = /* @__PURE__ */ __name(async (context, headers, path, resolvedHostname, body) => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const contents = {
    protocol,
    hostname,
    port,
    method: "POST",
    path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
    headers
  };
  if (resolvedHostname !== void 0) {
    contents.hostname = resolvedHostname;
  }
  if (body !== void 0) {
    contents.body = body;
  }
  return new import_protocol_http.HttpRequest(contents);
}, "buildHttpRpcRequest");
var SHARED_HEADERS = {
  "content-type": "application/x-www-form-urlencoded"
};
var _ = "2015-02-02";
var _A = "Action";
var _AAS = "AppendAccessString";
var _ACSGI = "AuthorizeCacheSecurityGroupIngress";
var _AF = "AutomaticFailover";
var _AFE = "AutomaticFailoverEnabled";
var _AFS = "AutomaticFailoverStatus";
var _AI = "ApplyImmediately";
var _AM = "AuthenticationMode";
var _AMVU = "AutoMinorVersionUpgrade";
var _AREE = "AtRestEncryptionEnabled";
var _ARN = "ARN";
var _AS = "AccessString";
var _AT = "AuthToken";
var _ATE = "AuthTokenEnabled";
var _ATLMD = "AuthTokenLastModifiedDate";
var _ATS = "AuthTokenStatus";
var _ATTR = "AddTagsToResource";
var _ATUS = "AuthTokenUpdateStrategy";
var _AUARABD = "AutoUpdateAfterRecommendedApplyByDate";
var _AV = "AllowedValues";
var _AZ = "AvailabilityZone";
var _AZM = "AZMode";
var _Ad = "Address";
var _Au = "Authentication";
var _BAUA = "BatchApplyUpdateAction";
var _BSUA = "BatchStopUpdateAction";
var _BUFC = "BytesUsedForCache";
var _CAZ = "CustomerAvailabilityZone";
var _CC = "CacheClusters";
var _CCC = "CreateCacheCluster";
var _CCCT = "CacheClusterCreateTime";
var _CCI = "CacheClusterIds";
var _CCIa = "CacheClusterId";
var _CCPG = "CreateCacheParameterGroup";
var _CCS = "CacheClusterStatus";
var _CCSG = "CreateCacheSecurityGroup";
var _CCSGr = "CreateCacheSubnetGroup";
var _CCa = "CacheCluster";
var _CDLP = "ClientDownloadLandingPage";
var _CE = "ConfigurationEndpoint";
var _CED = "CacheEngineDescription";
var _CEV = "CacheEngineVersions";
var _CEVD = "CacheEngineVersionDescription";
var _CEVa = "CacheEngineVersion";
var _CEl = "ClusterEnabled";
var _CGRG = "CreateGlobalReplicationGroup";
var _CI = "ClusterId";
var _CM = "CompleteMigration";
var _CMl = "ClusterMode";
var _CN = "CacheNodes";
var _CNC = "CacheNodeCount";
var _CNCT = "CacheNodeCreateTime";
var _CNEL = "CustomerNodeEndpointList";
var _CNI = "CacheNodeId";
var _CNITR = "CacheNodeIdsToRemove";
var _CNITRa = "CacheNodeIdsToReboot";
var _CNS = "CacheNodeStatus";
var _CNT = "CacheNodeType";
var _CNTSP = "CacheNodeTypeSpecificParameters";
var _CNTSPa = "CacheNodeTypeSpecificParameter";
var _CNTSV = "CacheNodeTypeSpecificValues";
var _CNTSVa = "CacheNodeTypeSpecificValue";
var _CNUS = "CacheNodeUpdateStatus";
var _CNa = "CacheNode";
var _COA = "CustomerOutpostArn";
var _CPG = "CacheParameterGroup";
var _CPGF = "CacheParameterGroupFamily";
var _CPGN = "CacheParameterGroupName";
var _CPGa = "CacheParameterGroups";
var _CR = "CurrentRole";
var _CRG = "CreateReplicationGroup";
var _CS = "CopySnapshot";
var _CSC = "CreateServerlessCache";
var _CSCS = "CopyServerlessCacheSnapshot";
var _CSCSr = "CreateServerlessCacheSnapshot";
var _CSG = "CacheSecurityGroup";
var _CSGD = "CacheSubnetGroupDescription";
var _CSGN = "CacheSecurityGroupName";
var _CSGNa = "CacheSubnetGroupName";
var _CSGNac = "CacheSecurityGroupNames";
var _CSGa = "CacheSecurityGroups";
var _CSGac = "CacheSubnetGroups";
var _CSGach = "CacheSubnetGroup";
var _CSa = "CacheSize";
var _CSr = "CreateSnapshot";
var _CT = "ChangeType";
var _CTr = "CreateTime";
var _CU = "CreateUser";
var _CUG = "CreateUserGroup";
var _CUL = "CacheUsageLimits";
var _CWLD = "CloudWatchLogsDetails";
var _D = "Description";
var _DCC = "DeleteCacheCluster";
var _DCCe = "DescribeCacheClusters";
var _DCEV = "DescribeCacheEngineVersions";
var _DCP = "DescribeCacheParameters";
var _DCPG = "DeleteCacheParameterGroup";
var _DCPGe = "DescribeCacheParameterGroups";
var _DCSG = "DeleteCacheSecurityGroup";
var _DCSGe = "DeleteCacheSubnetGroup";
var _DCSGes = "DescribeCacheSecurityGroups";
var _DCSGesc = "DescribeCacheSubnetGroups";
var _DD = "DestinationDetails";
var _DE = "DescribeEvents";
var _DEDP = "DescribeEngineDefaultParameters";
var _DGRG = "DeleteGlobalReplicationGroup";
var _DGRGe = "DescribeGlobalReplicationGroups";
var _DGRGi = "DisassociateGlobalReplicationGroup";
var _DNGIGRG = "DecreaseNodeGroupsInGlobalReplicationGroup";
var _DO = "DefaultOnly";
var _DRC = "DecreaseReplicaCount";
var _DRCN = "DescribeReservedCacheNodes";
var _DRCNO = "DescribeReservedCacheNodesOfferings";
var _DRG = "DeleteReplicationGroup";
var _DRGe = "DescribeReplicationGroups";
var _DS = "DeleteSnapshot";
var _DSC = "DeleteServerlessCache";
var _DSCS = "DeleteServerlessCacheSnapshot";
var _DSCSe = "DescribeServerlessCacheSnapshots";
var _DSCe = "DescribeServerlessCaches";
var _DST = "DailySnapshotTime";
var _DSU = "DescribeServiceUpdates";
var _DSa = "DataStorage";
var _DSe = "DescribeSnapshots";
var _DSel = "DeliveryStream";
var _DT = "DestinationType";
var _DTE = "DataTieringEnabled";
var _DTa = "DataType";
var _DTat = "DataTiering";
var _DU = "DeleteUser";
var _DUA = "DescribeUpdateActions";
var _DUG = "DeleteUserGroup";
var _DUGe = "DescribeUserGroups";
var _DUe = "DescribeUsers";
var _Da = "Date";
var _Du = "Duration";
var _E = "Engine";
var _ECPUPS = "ECPUPerSecond";
var _ECSG = "EC2SecurityGroups";
var _ECSGN = "EC2SecurityGroupName";
var _ECSGOI = "EC2SecurityGroupOwnerId";
var _ECSGe = "EC2SecurityGroup";
var _ED = "EngineDefaults";
var _EM = "ErrorMessage";
var _ESCS = "ExportServerlessCacheSnapshot";
var _ET = "EndTime";
var _ETr = "ErrorType";
var _ETx = "ExpiryTime";
var _EUT = "EstimatedUpdateTime";
var _EV = "EngineVersion";
var _En = "Enabled";
var _End = "Endpoint";
var _Ev = "Events";
var _Eve = "Event";
var _F = "Force";
var _FEV = "FullEngineVersion";
var _FGRG = "FailoverGlobalReplicationGroup";
var _FP = "FixedPrice";
var _FSI = "FinalSnapshotIdentifier";
var _FSN = "FinalSnapshotName";
var _Fi = "Filters";
var _GNG = "GlobalNodeGroups";
var _GNGI = "GlobalNodeGroupId";
var _GNGTR = "GlobalNodeGroupsToRemove";
var _GNGTRl = "GlobalNodeGroupsToRetain";
var _GNGl = "GlobalNodeGroup";
var _GRG = "GlobalReplicationGroup";
var _GRGD = "GlobalReplicationGroupDescription";
var _GRGI = "GlobalReplicationGroupId";
var _GRGIS = "GlobalReplicationGroupIdSuffix";
var _GRGIl = "GlobalReplicationGroupInfo";
var _GRGM = "GlobalReplicationGroupMember";
var _GRGMR = "GlobalReplicationGroupMemberRole";
var _GRGl = "GlobalReplicationGroups";
var _ID = "IpDiscovery";
var _IG = "IsGlobal";
var _IM = "IsModifiable";
var _INGIGRG = "IncreaseNodeGroupsInGlobalReplicationGroup";
var _IRC = "IncreaseReplicaCount";
var _K = "Key";
var _KFD = "KinesisFirehoseDetails";
var _KKI = "KmsKeyId";
var _LANTM = "ListAllowedNodeTypeModifications";
var _LDC = "LogDeliveryConfigurations";
var _LDCo = "LogDeliveryConfiguration";
var _LF = "LogFormat";
var _LG = "LogGroup";
var _LT = "LogType";
var _LTFR = "ListTagsForResource";
var _M = "Maximum";
var _MAZ = "MultiAZ";
var _MAZE = "MultiAZEnabled";
var _MC = "MemberClusters";
var _MCC = "ModifyCacheCluster";
var _MCOA = "MemberClustersOutpostArns";
var _MCPG = "ModifyCacheParameterGroup";
var _MCSG = "ModifyCacheSubnetGroup";
var _MEV = "MajorEngineVersion";
var _MEVi = "MinimumEngineVersion";
var _MGRG = "ModifyGlobalReplicationGroup";
var _MR = "MaxRecords";
var _MRG = "ModifyReplicationGroup";
var _MRGSC = "ModifyReplicationGroupShardConfiguration";
var _MRa = "MaxResults";
var _MSC = "ModifyServerlessCache";
var _MU = "ModifyUser";
var _MUG = "ModifyUserGroup";
var _Ma = "Marker";
var _Me = "Message";
var _Mem = "Members";
var _Mi = "Minimum";
var _N = "Name";
var _NAZ = "NewAvailabilityZones";
var _NC = "NotificationConfiguration";
var _NCC = "NumCacheClusters";
var _NCN = "NumCacheNodes";
var _NDD = "NodeDeletionDate";
var _NG = "NodeGroups";
var _NGC = "NodeGroupConfiguration";
var _NGCo = "NodeGroupCount";
var _NGI = "NodeGroupId";
var _NGM = "NodeGroupMembers";
var _NGMUS = "NodeGroupMemberUpdateStatus";
var _NGMo = "NodeGroupMember";
var _NGTR = "NodeGroupsToRemove";
var _NGTRo = "NodeGroupsToRetain";
var _NGUS = "NodeGroupUpdateStatus";
var _NGo = "NodeGroup";
var _NNG = "NumNodeGroups";
var _NPR = "NoPasswordRequired";
var _NRC = "NewReplicaCount";
var _NS = "NodeSnapshots";
var _NSo = "NodeSnapshot";
var _NT = "NetworkType";
var _NTA = "NotificationTopicArn";
var _NTS = "NotificationTopicStatus";
var _NTe = "NextToken";
var _NU = "NodesUpdated";
var _NUED = "NodeUpdateEndDate";
var _NUIB = "NodeUpdateInitiatedBy";
var _NUID = "NodeUpdateInitiatedDate";
var _NUS = "NodeUpdateStatus";
var _NUSD = "NodeUpdateStartDate";
var _NUSMD = "NodeUpdateStatusModifiedDate";
var _OA = "OutpostArn";
var _OI = "OwnerId";
var _OM = "OutpostMode";
var _OT = "OfferingType";
var _P = "Passwords";
var _PAS = "ParameterApplyStatus";
var _PAZ = "PreferredAvailabilityZones";
var _PAZr = "PreferredAvailabilityZone";
var _PAZri = "PrimaryAvailabilityZone";
var _PC = "PasswordCount";
var _PCCAZ = "PreferredCacheClusterAZs";
var _PCI = "PrimaryClusterId";
var _PCe = "PendingChanges";
var _PD = "ProductDescription";
var _PE = "PrimaryEndpoint";
var _PGS = "ParameterGroupStatus";
var _PMV = "PendingModifiedValues";
var _PMW = "PreferredMaintenanceWindow";
var _PN = "ParameterName";
var _PNV = "ParameterNameValues";
var _POA = "PreferredOutpostArns";
var _POAr = "PreferredOutpostArn";
var _POAri = "PrimaryOutpostArn";
var _PP = "ProgressPercentage";
var _PR = "PrimaryRegion";
var _PRCNO = "PurchaseReservedCacheNodesOffering";
var _PRGI = "PrimaryReplicationGroupId";
var _PUA = "ProcessedUpdateActions";
var _PUAr = "ProcessedUpdateAction";
var _PV = "ParameterValue";
var _Pa = "Parameters";
var _Par = "Parameter";
var _Po = "Port";
var _R = "Role";
var _RAP = "ResetAllParameters";
var _RARN = "ReservationARN";
var _RAZ = "ReplicaAvailabilityZones";
var _RC = "ReplicaConfiguration";
var _RCA = "RecurringChargeAmount";
var _RCC = "RebootCacheCluster";
var _RCF = "RecurringChargeFrequency";
var _RCN = "ReservedCacheNode";
var _RCNI = "ReservedCacheNodeId";
var _RCNO = "ReservedCacheNodesOfferings";
var _RCNOI = "ReservedCacheNodesOfferingId";
var _RCNOe = "ReservedCacheNodesOffering";
var _RCNe = "ReservedCacheNodes";
var _RCPG = "ResetCacheParameterGroup";
var _RCSGI = "RevokeCacheSecurityGroupIngress";
var _RCe = "RegionalConfigurations";
var _RCec = "RecurringCharges";
var _RCecu = "RecurringCharge";
var _RCep = "ReplicaCount";
var _RCes = "ReshardingConfiguration";
var _RE = "ReaderEndpoint";
var _REe = "ReadEndpoint";
var _RG = "ReplicationGroup";
var _RGCT = "ReplicationGroupCreateTime";
var _RGD = "ReplicationGroupDescription";
var _RGI = "ReplicationGroupIds";
var _RGIe = "ReplicationGroupId";
var _RGLDE = "ReplicationGroupLogDeliveryEnabled";
var _RGOA = "ReplicationGroupOutpostArn";
var _RGR = "ReplicationGroupRegion";
var _RGe = "ReplicationGroups";
var _RN = "ResourceName";
var _ROA = "ReplicaOutpostArns";
var _RPC = "RetainPrimaryCluster";
var _RPNG = "ReplicasPerNodeGroup";
var _RPRG = "RetainPrimaryReplicationGroup";
var _RSIGRG = "RebalanceSlotsInGlobalReplicationGroup";
var _RTFR = "RemoveTagsFromResource";
var _RTR = "ReplicasToRemove";
var _RUG = "RemoveUserGroups";
var _RUGe = "RemoveUserGroup";
var _Re = "Resharding";
var _S = "Source";
var _SA = "SnapshotArns";
var _SATR = "SnapshotArnsToRestore";
var _SAZ = "SubnetAvailabilityZone";
var _SBN = "S3BucketName";
var _SC = "ScaleConfig";
var _SCC = "ServerlessCacheConfiguration";
var _SCCNIRG = "ShowCacheClustersNotInReplicationGroups";
var _SCI = "SnapshottingClusterId";
var _SCN = "ServerlessCacheName";
var _SCNI = "ShowCacheNodeInfo";
var _SCNIo = "SourceCacheNodeId";
var _SCS = "ServerlessCacheSnapshot";
var _SCSN = "ServerlessCacheSnapshotName";
var _SCSe = "ServerlessCacheSnapshots";
var _SCT = "SnapshotCreateTime";
var _SCe = "ServerlessCache";
var _SCer = "ServerlessCaches";
var _SDM = "ScaleDownModifications";
var _SG = "SecurityGroups";
var _SGI = "SecurityGroupIds";
var _SGIe = "SecurityGroupId";
var _SI = "SubnetIds";
var _SIM = "ScaleIntervalMinutes";
var _SIo = "SourceIdentifier";
var _SIu = "SubnetId";
var _SIub = "SubnetIdentifier";
var _SM = "StartMigration";
var _SMI = "ShowMemberInfo";
var _SMl = "SlotMigration";
var _SMla = "SlaMet";
var _SN = "SnapshotName";
var _SNGC = "ShowNodeGroupConfig";
var _SNLUS = "ShowNodeLevelUpdateStatus";
var _SNT = "SupportedNetworkTypes";
var _SO = "SubnetOutpost";
var _SOA = "SubnetOutpostArn";
var _SP = "ScalePercentage";
var _SRL = "SnapshotRetentionLimit";
var _SS = "SnapshotSource";
var _SSCSN = "SourceServerlessCacheSnapshotName";
var _SSN = "SourceSnapshotName";
var _SSn = "SnapshotStatus";
var _ST = "SourceType";
var _STn = "SnapshotType";
var _STt = "StartTime";
var _SU = "ServiceUpdates";
var _SUD = "ServiceUpdateDescription";
var _SUED = "ServiceUpdateEndDate";
var _SUM = "ScaleUpModifications";
var _SUN = "ServiceUpdateName";
var _SURABD = "ServiceUpdateRecommendedApplyByDate";
var _SURD = "ServiceUpdateReleaseDate";
var _SUS = "ServiceUpdateStatus";
var _SUSe = "ServiceUpdateSeverity";
var _SUT = "ServiceUpdateType";
var _SUTR = "ServiceUpdateTimeRange";
var _SUe = "ServiceUpdate";
var _SW = "SnapshotWindow";
var _Sl = "Slots";
var _Sn = "Snapshot";
var _Sna = "Snapshots";
var _St = "Status";
var _Sta = "State";
var _Su = "Subnets";
var _Sub = "Subnet";
var _T = "Tags";
var _TA = "TopicArn";
var _TB = "TargetBucket";
var _TEE = "TransitEncryptionEnabled";
var _TEM = "TransitEncryptionMode";
var _TF = "TestFailover";
var _TK = "TagKeys";
var _TL = "TagList";
var _TM = "TestMigration";
var _TS = "TopicStatus";
var _TSCSN = "TargetServerlessCacheSnapshotName";
var _TSN = "TargetSnapshotName";
var _Ta = "Tag";
var _Ty = "Type";
var _U = "Unit";
var _UA = "UpdateActions";
var _UAAD = "UpdateActionAvailableDate";
var _UAS = "UpdateActionStatus";
var _UASMD = "UpdateActionStatusModifiedDate";
var _UAp = "UpdateAction";
var _UG = "UserGroups";
var _UGI = "UserGroupIds";
var _UGITA = "UserGroupIdsToAdd";
var _UGITR = "UserGroupIdsToRemove";
var _UGIs = "UserGroupId";
var _UI = "UserIds";
var _UITA = "UserIdsToAdd";
var _UITR = "UserIdsToRemove";
var _UIs = "UserId";
var _UN = "UserName";
var _UP = "UsagePrice";
var _UUA = "UnprocessedUpdateActions";
var _UUAn = "UnprocessedUpdateAction";
var _Us = "Users";
var _V = "Version";
var _VI = "VpcId";
var _Va = "Values";
var _Val = "Value";
var _m = "member";
var _me = "message";
var buildFormUrlencodedString = /* @__PURE__ */ __name((formEntries) => Object.entries(formEntries).map(([key, value]) => (0, import_smithy_client.extendedEncodeURIComponent)(key) + "=" + (0, import_smithy_client.extendedEncodeURIComponent)(value)).join("&"), "buildFormUrlencodedString");
var loadQueryErrorCode = /* @__PURE__ */ __name((output, data) => {
  if (data.Error?.Code !== void 0) {
    return data.Error.Code;
  }
  if (output.statusCode == 404) {
    return "NotFound";
  }
}, "loadQueryErrorCode");

// src/commands/AddTagsToResourceCommand.ts
var AddTagsToResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "AddTagsToResource", {}).n("ElastiCacheClient", "AddTagsToResourceCommand").f(void 0, void 0).ser(se_AddTagsToResourceCommand).de(de_AddTagsToResourceCommand).build() {
  static {
    __name(this, "AddTagsToResourceCommand");
  }
};

// src/commands/AuthorizeCacheSecurityGroupIngressCommand.ts



var AuthorizeCacheSecurityGroupIngressCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "AuthorizeCacheSecurityGroupIngress", {}).n("ElastiCacheClient", "AuthorizeCacheSecurityGroupIngressCommand").f(void 0, void 0).ser(se_AuthorizeCacheSecurityGroupIngressCommand).de(de_AuthorizeCacheSecurityGroupIngressCommand).build() {
  static {
    __name(this, "AuthorizeCacheSecurityGroupIngressCommand");
  }
};

// src/commands/BatchApplyUpdateActionCommand.ts



var BatchApplyUpdateActionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "BatchApplyUpdateAction", {}).n("ElastiCacheClient", "BatchApplyUpdateActionCommand").f(void 0, void 0).ser(se_BatchApplyUpdateActionCommand).de(de_BatchApplyUpdateActionCommand).build() {
  static {
    __name(this, "BatchApplyUpdateActionCommand");
  }
};

// src/commands/BatchStopUpdateActionCommand.ts



var BatchStopUpdateActionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "BatchStopUpdateAction", {}).n("ElastiCacheClient", "BatchStopUpdateActionCommand").f(void 0, void 0).ser(se_BatchStopUpdateActionCommand).de(de_BatchStopUpdateActionCommand).build() {
  static {
    __name(this, "BatchStopUpdateActionCommand");
  }
};

// src/commands/CompleteMigrationCommand.ts



var CompleteMigrationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "CompleteMigration", {}).n("ElastiCacheClient", "CompleteMigrationCommand").f(void 0, void 0).ser(se_CompleteMigrationCommand).de(de_CompleteMigrationCommand).build() {
  static {
    __name(this, "CompleteMigrationCommand");
  }
};

// src/commands/CopyServerlessCacheSnapshotCommand.ts



var CopyServerlessCacheSnapshotCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "CopyServerlessCacheSnapshot", {}).n("ElastiCacheClient", "CopyServerlessCacheSnapshotCommand").f(void 0, void 0).ser(se_CopyServerlessCacheSnapshotCommand).de(de_CopyServerlessCacheSnapshotCommand).build() {
  static {
    __name(this, "CopyServerlessCacheSnapshotCommand");
  }
};

// src/commands/CopySnapshotCommand.ts



var CopySnapshotCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "CopySnapshot", {}).n("ElastiCacheClient", "CopySnapshotCommand").f(void 0, void 0).ser(se_CopySnapshotCommand).de(de_CopySnapshotCommand).build() {
  static {
    __name(this, "CopySnapshotCommand");
  }
};

// src/commands/CreateCacheClusterCommand.ts



var CreateCacheClusterCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "CreateCacheCluster", {}).n("ElastiCacheClient", "CreateCacheClusterCommand").f(void 0, void 0).ser(se_CreateCacheClusterCommand).de(de_CreateCacheClusterCommand).build() {
  static {
    __name(this, "CreateCacheClusterCommand");
  }
};

// src/commands/CreateCacheParameterGroupCommand.ts



var CreateCacheParameterGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "CreateCacheParameterGroup", {}).n("ElastiCacheClient", "CreateCacheParameterGroupCommand").f(void 0, void 0).ser(se_CreateCacheParameterGroupCommand).de(de_CreateCacheParameterGroupCommand).build() {
  static {
    __name(this, "CreateCacheParameterGroupCommand");
  }
};

// src/commands/CreateCacheSecurityGroupCommand.ts



var CreateCacheSecurityGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "CreateCacheSecurityGroup", {}).n("ElastiCacheClient", "CreateCacheSecurityGroupCommand").f(void 0, void 0).ser(se_CreateCacheSecurityGroupCommand).de(de_CreateCacheSecurityGroupCommand).build() {
  static {
    __name(this, "CreateCacheSecurityGroupCommand");
  }
};

// src/commands/CreateCacheSubnetGroupCommand.ts



var CreateCacheSubnetGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "CreateCacheSubnetGroup", {}).n("ElastiCacheClient", "CreateCacheSubnetGroupCommand").f(void 0, void 0).ser(se_CreateCacheSubnetGroupCommand).de(de_CreateCacheSubnetGroupCommand).build() {
  static {
    __name(this, "CreateCacheSubnetGroupCommand");
  }
};

// src/commands/CreateGlobalReplicationGroupCommand.ts



var CreateGlobalReplicationGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "CreateGlobalReplicationGroup", {}).n("ElastiCacheClient", "CreateGlobalReplicationGroupCommand").f(void 0, void 0).ser(se_CreateGlobalReplicationGroupCommand).de(de_CreateGlobalReplicationGroupCommand).build() {
  static {
    __name(this, "CreateGlobalReplicationGroupCommand");
  }
};

// src/commands/CreateReplicationGroupCommand.ts



var CreateReplicationGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "CreateReplicationGroup", {}).n("ElastiCacheClient", "CreateReplicationGroupCommand").f(void 0, void 0).ser(se_CreateReplicationGroupCommand).de(de_CreateReplicationGroupCommand).build() {
  static {
    __name(this, "CreateReplicationGroupCommand");
  }
};

// src/commands/CreateServerlessCacheCommand.ts



var CreateServerlessCacheCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "CreateServerlessCache", {}).n("ElastiCacheClient", "CreateServerlessCacheCommand").f(void 0, void 0).ser(se_CreateServerlessCacheCommand).de(de_CreateServerlessCacheCommand).build() {
  static {
    __name(this, "CreateServerlessCacheCommand");
  }
};

// src/commands/CreateServerlessCacheSnapshotCommand.ts



var CreateServerlessCacheSnapshotCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "CreateServerlessCacheSnapshot", {}).n("ElastiCacheClient", "CreateServerlessCacheSnapshotCommand").f(void 0, void 0).ser(se_CreateServerlessCacheSnapshotCommand).de(de_CreateServerlessCacheSnapshotCommand).build() {
  static {
    __name(this, "CreateServerlessCacheSnapshotCommand");
  }
};

// src/commands/CreateSnapshotCommand.ts



var CreateSnapshotCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "CreateSnapshot", {}).n("ElastiCacheClient", "CreateSnapshotCommand").f(void 0, void 0).ser(se_CreateSnapshotCommand).de(de_CreateSnapshotCommand).build() {
  static {
    __name(this, "CreateSnapshotCommand");
  }
};

// src/commands/CreateUserCommand.ts



var CreateUserCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "CreateUser", {}).n("ElastiCacheClient", "CreateUserCommand").f(void 0, void 0).ser(se_CreateUserCommand).de(de_CreateUserCommand).build() {
  static {
    __name(this, "CreateUserCommand");
  }
};

// src/commands/CreateUserGroupCommand.ts



var CreateUserGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "CreateUserGroup", {}).n("ElastiCacheClient", "CreateUserGroupCommand").f(void 0, void 0).ser(se_CreateUserGroupCommand).de(de_CreateUserGroupCommand).build() {
  static {
    __name(this, "CreateUserGroupCommand");
  }
};

// src/commands/DecreaseNodeGroupsInGlobalReplicationGroupCommand.ts



var DecreaseNodeGroupsInGlobalReplicationGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DecreaseNodeGroupsInGlobalReplicationGroup", {}).n("ElastiCacheClient", "DecreaseNodeGroupsInGlobalReplicationGroupCommand").f(void 0, void 0).ser(se_DecreaseNodeGroupsInGlobalReplicationGroupCommand).de(de_DecreaseNodeGroupsInGlobalReplicationGroupCommand).build() {
  static {
    __name(this, "DecreaseNodeGroupsInGlobalReplicationGroupCommand");
  }
};

// src/commands/DecreaseReplicaCountCommand.ts



var DecreaseReplicaCountCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DecreaseReplicaCount", {}).n("ElastiCacheClient", "DecreaseReplicaCountCommand").f(void 0, void 0).ser(se_DecreaseReplicaCountCommand).de(de_DecreaseReplicaCountCommand).build() {
  static {
    __name(this, "DecreaseReplicaCountCommand");
  }
};

// src/commands/DeleteCacheClusterCommand.ts



var DeleteCacheClusterCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DeleteCacheCluster", {}).n("ElastiCacheClient", "DeleteCacheClusterCommand").f(void 0, void 0).ser(se_DeleteCacheClusterCommand).de(de_DeleteCacheClusterCommand).build() {
  static {
    __name(this, "DeleteCacheClusterCommand");
  }
};

// src/commands/DeleteCacheParameterGroupCommand.ts



var DeleteCacheParameterGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DeleteCacheParameterGroup", {}).n("ElastiCacheClient", "DeleteCacheParameterGroupCommand").f(void 0, void 0).ser(se_DeleteCacheParameterGroupCommand).de(de_DeleteCacheParameterGroupCommand).build() {
  static {
    __name(this, "DeleteCacheParameterGroupCommand");
  }
};

// src/commands/DeleteCacheSecurityGroupCommand.ts



var DeleteCacheSecurityGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DeleteCacheSecurityGroup", {}).n("ElastiCacheClient", "DeleteCacheSecurityGroupCommand").f(void 0, void 0).ser(se_DeleteCacheSecurityGroupCommand).de(de_DeleteCacheSecurityGroupCommand).build() {
  static {
    __name(this, "DeleteCacheSecurityGroupCommand");
  }
};

// src/commands/DeleteCacheSubnetGroupCommand.ts



var DeleteCacheSubnetGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DeleteCacheSubnetGroup", {}).n("ElastiCacheClient", "DeleteCacheSubnetGroupCommand").f(void 0, void 0).ser(se_DeleteCacheSubnetGroupCommand).de(de_DeleteCacheSubnetGroupCommand).build() {
  static {
    __name(this, "DeleteCacheSubnetGroupCommand");
  }
};

// src/commands/DeleteGlobalReplicationGroupCommand.ts



var DeleteGlobalReplicationGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DeleteGlobalReplicationGroup", {}).n("ElastiCacheClient", "DeleteGlobalReplicationGroupCommand").f(void 0, void 0).ser(se_DeleteGlobalReplicationGroupCommand).de(de_DeleteGlobalReplicationGroupCommand).build() {
  static {
    __name(this, "DeleteGlobalReplicationGroupCommand");
  }
};

// src/commands/DeleteReplicationGroupCommand.ts



var DeleteReplicationGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DeleteReplicationGroup", {}).n("ElastiCacheClient", "DeleteReplicationGroupCommand").f(void 0, void 0).ser(se_DeleteReplicationGroupCommand).de(de_DeleteReplicationGroupCommand).build() {
  static {
    __name(this, "DeleteReplicationGroupCommand");
  }
};

// src/commands/DeleteServerlessCacheCommand.ts



var DeleteServerlessCacheCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DeleteServerlessCache", {}).n("ElastiCacheClient", "DeleteServerlessCacheCommand").f(void 0, void 0).ser(se_DeleteServerlessCacheCommand).de(de_DeleteServerlessCacheCommand).build() {
  static {
    __name(this, "DeleteServerlessCacheCommand");
  }
};

// src/commands/DeleteServerlessCacheSnapshotCommand.ts



var DeleteServerlessCacheSnapshotCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DeleteServerlessCacheSnapshot", {}).n("ElastiCacheClient", "DeleteServerlessCacheSnapshotCommand").f(void 0, void 0).ser(se_DeleteServerlessCacheSnapshotCommand).de(de_DeleteServerlessCacheSnapshotCommand).build() {
  static {
    __name(this, "DeleteServerlessCacheSnapshotCommand");
  }
};

// src/commands/DeleteSnapshotCommand.ts



var DeleteSnapshotCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DeleteSnapshot", {}).n("ElastiCacheClient", "DeleteSnapshotCommand").f(void 0, void 0).ser(se_DeleteSnapshotCommand).de(de_DeleteSnapshotCommand).build() {
  static {
    __name(this, "DeleteSnapshotCommand");
  }
};

// src/commands/DeleteUserCommand.ts



var DeleteUserCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DeleteUser", {}).n("ElastiCacheClient", "DeleteUserCommand").f(void 0, void 0).ser(se_DeleteUserCommand).de(de_DeleteUserCommand).build() {
  static {
    __name(this, "DeleteUserCommand");
  }
};

// src/commands/DeleteUserGroupCommand.ts



var DeleteUserGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DeleteUserGroup", {}).n("ElastiCacheClient", "DeleteUserGroupCommand").f(void 0, void 0).ser(se_DeleteUserGroupCommand).de(de_DeleteUserGroupCommand).build() {
  static {
    __name(this, "DeleteUserGroupCommand");
  }
};

// src/commands/DescribeCacheClustersCommand.ts



var DescribeCacheClustersCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DescribeCacheClusters", {}).n("ElastiCacheClient", "DescribeCacheClustersCommand").f(void 0, void 0).ser(se_DescribeCacheClustersCommand).de(de_DescribeCacheClustersCommand).build() {
  static {
    __name(this, "DescribeCacheClustersCommand");
  }
};

// src/commands/DescribeCacheEngineVersionsCommand.ts



var DescribeCacheEngineVersionsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DescribeCacheEngineVersions", {}).n("ElastiCacheClient", "DescribeCacheEngineVersionsCommand").f(void 0, void 0).ser(se_DescribeCacheEngineVersionsCommand).de(de_DescribeCacheEngineVersionsCommand).build() {
  static {
    __name(this, "DescribeCacheEngineVersionsCommand");
  }
};

// src/commands/DescribeCacheParameterGroupsCommand.ts



var DescribeCacheParameterGroupsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DescribeCacheParameterGroups", {}).n("ElastiCacheClient", "DescribeCacheParameterGroupsCommand").f(void 0, void 0).ser(se_DescribeCacheParameterGroupsCommand).de(de_DescribeCacheParameterGroupsCommand).build() {
  static {
    __name(this, "DescribeCacheParameterGroupsCommand");
  }
};

// src/commands/DescribeCacheParametersCommand.ts



var DescribeCacheParametersCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DescribeCacheParameters", {}).n("ElastiCacheClient", "DescribeCacheParametersCommand").f(void 0, void 0).ser(se_DescribeCacheParametersCommand).de(de_DescribeCacheParametersCommand).build() {
  static {
    __name(this, "DescribeCacheParametersCommand");
  }
};

// src/commands/DescribeCacheSecurityGroupsCommand.ts



var DescribeCacheSecurityGroupsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DescribeCacheSecurityGroups", {}).n("ElastiCacheClient", "DescribeCacheSecurityGroupsCommand").f(void 0, void 0).ser(se_DescribeCacheSecurityGroupsCommand).de(de_DescribeCacheSecurityGroupsCommand).build() {
  static {
    __name(this, "DescribeCacheSecurityGroupsCommand");
  }
};

// src/commands/DescribeCacheSubnetGroupsCommand.ts



var DescribeCacheSubnetGroupsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DescribeCacheSubnetGroups", {}).n("ElastiCacheClient", "DescribeCacheSubnetGroupsCommand").f(void 0, void 0).ser(se_DescribeCacheSubnetGroupsCommand).de(de_DescribeCacheSubnetGroupsCommand).build() {
  static {
    __name(this, "DescribeCacheSubnetGroupsCommand");
  }
};

// src/commands/DescribeEngineDefaultParametersCommand.ts



var DescribeEngineDefaultParametersCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DescribeEngineDefaultParameters", {}).n("ElastiCacheClient", "DescribeEngineDefaultParametersCommand").f(void 0, void 0).ser(se_DescribeEngineDefaultParametersCommand).de(de_DescribeEngineDefaultParametersCommand).build() {
  static {
    __name(this, "DescribeEngineDefaultParametersCommand");
  }
};

// src/commands/DescribeEventsCommand.ts



var DescribeEventsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DescribeEvents", {}).n("ElastiCacheClient", "DescribeEventsCommand").f(void 0, void 0).ser(se_DescribeEventsCommand).de(de_DescribeEventsCommand).build() {
  static {
    __name(this, "DescribeEventsCommand");
  }
};

// src/commands/DescribeGlobalReplicationGroupsCommand.ts



var DescribeGlobalReplicationGroupsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DescribeGlobalReplicationGroups", {}).n("ElastiCacheClient", "DescribeGlobalReplicationGroupsCommand").f(void 0, void 0).ser(se_DescribeGlobalReplicationGroupsCommand).de(de_DescribeGlobalReplicationGroupsCommand).build() {
  static {
    __name(this, "DescribeGlobalReplicationGroupsCommand");
  }
};

// src/commands/DescribeReplicationGroupsCommand.ts



var DescribeReplicationGroupsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DescribeReplicationGroups", {}).n("ElastiCacheClient", "DescribeReplicationGroupsCommand").f(void 0, void 0).ser(se_DescribeReplicationGroupsCommand).de(de_DescribeReplicationGroupsCommand).build() {
  static {
    __name(this, "DescribeReplicationGroupsCommand");
  }
};

// src/commands/DescribeReservedCacheNodesCommand.ts



var DescribeReservedCacheNodesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DescribeReservedCacheNodes", {}).n("ElastiCacheClient", "DescribeReservedCacheNodesCommand").f(void 0, void 0).ser(se_DescribeReservedCacheNodesCommand).de(de_DescribeReservedCacheNodesCommand).build() {
  static {
    __name(this, "DescribeReservedCacheNodesCommand");
  }
};

// src/commands/DescribeReservedCacheNodesOfferingsCommand.ts



var DescribeReservedCacheNodesOfferingsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DescribeReservedCacheNodesOfferings", {}).n("ElastiCacheClient", "DescribeReservedCacheNodesOfferingsCommand").f(void 0, void 0).ser(se_DescribeReservedCacheNodesOfferingsCommand).de(de_DescribeReservedCacheNodesOfferingsCommand).build() {
  static {
    __name(this, "DescribeReservedCacheNodesOfferingsCommand");
  }
};

// src/commands/DescribeServerlessCachesCommand.ts



var DescribeServerlessCachesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DescribeServerlessCaches", {}).n("ElastiCacheClient", "DescribeServerlessCachesCommand").f(void 0, void 0).ser(se_DescribeServerlessCachesCommand).de(de_DescribeServerlessCachesCommand).build() {
  static {
    __name(this, "DescribeServerlessCachesCommand");
  }
};

// src/commands/DescribeServerlessCacheSnapshotsCommand.ts



var DescribeServerlessCacheSnapshotsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DescribeServerlessCacheSnapshots", {}).n("ElastiCacheClient", "DescribeServerlessCacheSnapshotsCommand").f(void 0, void 0).ser(se_DescribeServerlessCacheSnapshotsCommand).de(de_DescribeServerlessCacheSnapshotsCommand).build() {
  static {
    __name(this, "DescribeServerlessCacheSnapshotsCommand");
  }
};

// src/commands/DescribeServiceUpdatesCommand.ts



var DescribeServiceUpdatesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DescribeServiceUpdates", {}).n("ElastiCacheClient", "DescribeServiceUpdatesCommand").f(void 0, void 0).ser(se_DescribeServiceUpdatesCommand).de(de_DescribeServiceUpdatesCommand).build() {
  static {
    __name(this, "DescribeServiceUpdatesCommand");
  }
};

// src/commands/DescribeSnapshotsCommand.ts



var DescribeSnapshotsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DescribeSnapshots", {}).n("ElastiCacheClient", "DescribeSnapshotsCommand").f(void 0, void 0).ser(se_DescribeSnapshotsCommand).de(de_DescribeSnapshotsCommand).build() {
  static {
    __name(this, "DescribeSnapshotsCommand");
  }
};

// src/commands/DescribeUpdateActionsCommand.ts



var DescribeUpdateActionsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DescribeUpdateActions", {}).n("ElastiCacheClient", "DescribeUpdateActionsCommand").f(void 0, void 0).ser(se_DescribeUpdateActionsCommand).de(de_DescribeUpdateActionsCommand).build() {
  static {
    __name(this, "DescribeUpdateActionsCommand");
  }
};

// src/commands/DescribeUserGroupsCommand.ts



var DescribeUserGroupsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DescribeUserGroups", {}).n("ElastiCacheClient", "DescribeUserGroupsCommand").f(void 0, void 0).ser(se_DescribeUserGroupsCommand).de(de_DescribeUserGroupsCommand).build() {
  static {
    __name(this, "DescribeUserGroupsCommand");
  }
};

// src/commands/DescribeUsersCommand.ts



var DescribeUsersCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DescribeUsers", {}).n("ElastiCacheClient", "DescribeUsersCommand").f(void 0, void 0).ser(se_DescribeUsersCommand).de(de_DescribeUsersCommand).build() {
  static {
    __name(this, "DescribeUsersCommand");
  }
};

// src/commands/DisassociateGlobalReplicationGroupCommand.ts



var DisassociateGlobalReplicationGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "DisassociateGlobalReplicationGroup", {}).n("ElastiCacheClient", "DisassociateGlobalReplicationGroupCommand").f(void 0, void 0).ser(se_DisassociateGlobalReplicationGroupCommand).de(de_DisassociateGlobalReplicationGroupCommand).build() {
  static {
    __name(this, "DisassociateGlobalReplicationGroupCommand");
  }
};

// src/commands/ExportServerlessCacheSnapshotCommand.ts



var ExportServerlessCacheSnapshotCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "ExportServerlessCacheSnapshot", {}).n("ElastiCacheClient", "ExportServerlessCacheSnapshotCommand").f(void 0, void 0).ser(se_ExportServerlessCacheSnapshotCommand).de(de_ExportServerlessCacheSnapshotCommand).build() {
  static {
    __name(this, "ExportServerlessCacheSnapshotCommand");
  }
};

// src/commands/FailoverGlobalReplicationGroupCommand.ts



var FailoverGlobalReplicationGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "FailoverGlobalReplicationGroup", {}).n("ElastiCacheClient", "FailoverGlobalReplicationGroupCommand").f(void 0, void 0).ser(se_FailoverGlobalReplicationGroupCommand).de(de_FailoverGlobalReplicationGroupCommand).build() {
  static {
    __name(this, "FailoverGlobalReplicationGroupCommand");
  }
};

// src/commands/IncreaseNodeGroupsInGlobalReplicationGroupCommand.ts



var IncreaseNodeGroupsInGlobalReplicationGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "IncreaseNodeGroupsInGlobalReplicationGroup", {}).n("ElastiCacheClient", "IncreaseNodeGroupsInGlobalReplicationGroupCommand").f(void 0, void 0).ser(se_IncreaseNodeGroupsInGlobalReplicationGroupCommand).de(de_IncreaseNodeGroupsInGlobalReplicationGroupCommand).build() {
  static {
    __name(this, "IncreaseNodeGroupsInGlobalReplicationGroupCommand");
  }
};

// src/commands/IncreaseReplicaCountCommand.ts



var IncreaseReplicaCountCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "IncreaseReplicaCount", {}).n("ElastiCacheClient", "IncreaseReplicaCountCommand").f(void 0, void 0).ser(se_IncreaseReplicaCountCommand).de(de_IncreaseReplicaCountCommand).build() {
  static {
    __name(this, "IncreaseReplicaCountCommand");
  }
};

// src/commands/ListAllowedNodeTypeModificationsCommand.ts



var ListAllowedNodeTypeModificationsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "ListAllowedNodeTypeModifications", {}).n("ElastiCacheClient", "ListAllowedNodeTypeModificationsCommand").f(void 0, void 0).ser(se_ListAllowedNodeTypeModificationsCommand).de(de_ListAllowedNodeTypeModificationsCommand).build() {
  static {
    __name(this, "ListAllowedNodeTypeModificationsCommand");
  }
};

// src/commands/ListTagsForResourceCommand.ts



var ListTagsForResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "ListTagsForResource", {}).n("ElastiCacheClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
  static {
    __name(this, "ListTagsForResourceCommand");
  }
};

// src/commands/ModifyCacheClusterCommand.ts



var ModifyCacheClusterCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "ModifyCacheCluster", {}).n("ElastiCacheClient", "ModifyCacheClusterCommand").f(void 0, void 0).ser(se_ModifyCacheClusterCommand).de(de_ModifyCacheClusterCommand).build() {
  static {
    __name(this, "ModifyCacheClusterCommand");
  }
};

// src/commands/ModifyCacheParameterGroupCommand.ts



var ModifyCacheParameterGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "ModifyCacheParameterGroup", {}).n("ElastiCacheClient", "ModifyCacheParameterGroupCommand").f(void 0, void 0).ser(se_ModifyCacheParameterGroupCommand).de(de_ModifyCacheParameterGroupCommand).build() {
  static {
    __name(this, "ModifyCacheParameterGroupCommand");
  }
};

// src/commands/ModifyCacheSubnetGroupCommand.ts



var ModifyCacheSubnetGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "ModifyCacheSubnetGroup", {}).n("ElastiCacheClient", "ModifyCacheSubnetGroupCommand").f(void 0, void 0).ser(se_ModifyCacheSubnetGroupCommand).de(de_ModifyCacheSubnetGroupCommand).build() {
  static {
    __name(this, "ModifyCacheSubnetGroupCommand");
  }
};

// src/commands/ModifyGlobalReplicationGroupCommand.ts



var ModifyGlobalReplicationGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "ModifyGlobalReplicationGroup", {}).n("ElastiCacheClient", "ModifyGlobalReplicationGroupCommand").f(void 0, void 0).ser(se_ModifyGlobalReplicationGroupCommand).de(de_ModifyGlobalReplicationGroupCommand).build() {
  static {
    __name(this, "ModifyGlobalReplicationGroupCommand");
  }
};

// src/commands/ModifyReplicationGroupCommand.ts



var ModifyReplicationGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "ModifyReplicationGroup", {}).n("ElastiCacheClient", "ModifyReplicationGroupCommand").f(void 0, void 0).ser(se_ModifyReplicationGroupCommand).de(de_ModifyReplicationGroupCommand).build() {
  static {
    __name(this, "ModifyReplicationGroupCommand");
  }
};

// src/commands/ModifyReplicationGroupShardConfigurationCommand.ts



var ModifyReplicationGroupShardConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "ModifyReplicationGroupShardConfiguration", {}).n("ElastiCacheClient", "ModifyReplicationGroupShardConfigurationCommand").f(void 0, void 0).ser(se_ModifyReplicationGroupShardConfigurationCommand).de(de_ModifyReplicationGroupShardConfigurationCommand).build() {
  static {
    __name(this, "ModifyReplicationGroupShardConfigurationCommand");
  }
};

// src/commands/ModifyServerlessCacheCommand.ts



var ModifyServerlessCacheCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "ModifyServerlessCache", {}).n("ElastiCacheClient", "ModifyServerlessCacheCommand").f(void 0, void 0).ser(se_ModifyServerlessCacheCommand).de(de_ModifyServerlessCacheCommand).build() {
  static {
    __name(this, "ModifyServerlessCacheCommand");
  }
};

// src/commands/ModifyUserCommand.ts



var ModifyUserCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "ModifyUser", {}).n("ElastiCacheClient", "ModifyUserCommand").f(void 0, void 0).ser(se_ModifyUserCommand).de(de_ModifyUserCommand).build() {
  static {
    __name(this, "ModifyUserCommand");
  }
};

// src/commands/ModifyUserGroupCommand.ts



var ModifyUserGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "ModifyUserGroup", {}).n("ElastiCacheClient", "ModifyUserGroupCommand").f(void 0, void 0).ser(se_ModifyUserGroupCommand).de(de_ModifyUserGroupCommand).build() {
  static {
    __name(this, "ModifyUserGroupCommand");
  }
};

// src/commands/PurchaseReservedCacheNodesOfferingCommand.ts



var PurchaseReservedCacheNodesOfferingCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "PurchaseReservedCacheNodesOffering", {}).n("ElastiCacheClient", "PurchaseReservedCacheNodesOfferingCommand").f(void 0, void 0).ser(se_PurchaseReservedCacheNodesOfferingCommand).de(de_PurchaseReservedCacheNodesOfferingCommand).build() {
  static {
    __name(this, "PurchaseReservedCacheNodesOfferingCommand");
  }
};

// src/commands/RebalanceSlotsInGlobalReplicationGroupCommand.ts



var RebalanceSlotsInGlobalReplicationGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "RebalanceSlotsInGlobalReplicationGroup", {}).n("ElastiCacheClient", "RebalanceSlotsInGlobalReplicationGroupCommand").f(void 0, void 0).ser(se_RebalanceSlotsInGlobalReplicationGroupCommand).de(de_RebalanceSlotsInGlobalReplicationGroupCommand).build() {
  static {
    __name(this, "RebalanceSlotsInGlobalReplicationGroupCommand");
  }
};

// src/commands/RebootCacheClusterCommand.ts



var RebootCacheClusterCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "RebootCacheCluster", {}).n("ElastiCacheClient", "RebootCacheClusterCommand").f(void 0, void 0).ser(se_RebootCacheClusterCommand).de(de_RebootCacheClusterCommand).build() {
  static {
    __name(this, "RebootCacheClusterCommand");
  }
};

// src/commands/RemoveTagsFromResourceCommand.ts



var RemoveTagsFromResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "RemoveTagsFromResource", {}).n("ElastiCacheClient", "RemoveTagsFromResourceCommand").f(void 0, void 0).ser(se_RemoveTagsFromResourceCommand).de(de_RemoveTagsFromResourceCommand).build() {
  static {
    __name(this, "RemoveTagsFromResourceCommand");
  }
};

// src/commands/ResetCacheParameterGroupCommand.ts



var ResetCacheParameterGroupCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "ResetCacheParameterGroup", {}).n("ElastiCacheClient", "ResetCacheParameterGroupCommand").f(void 0, void 0).ser(se_ResetCacheParameterGroupCommand).de(de_ResetCacheParameterGroupCommand).build() {
  static {
    __name(this, "ResetCacheParameterGroupCommand");
  }
};

// src/commands/RevokeCacheSecurityGroupIngressCommand.ts



var RevokeCacheSecurityGroupIngressCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "RevokeCacheSecurityGroupIngress", {}).n("ElastiCacheClient", "RevokeCacheSecurityGroupIngressCommand").f(void 0, void 0).ser(se_RevokeCacheSecurityGroupIngressCommand).de(de_RevokeCacheSecurityGroupIngressCommand).build() {
  static {
    __name(this, "RevokeCacheSecurityGroupIngressCommand");
  }
};

// src/commands/StartMigrationCommand.ts



var StartMigrationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "StartMigration", {}).n("ElastiCacheClient", "StartMigrationCommand").f(void 0, void 0).ser(se_StartMigrationCommand).de(de_StartMigrationCommand).build() {
  static {
    __name(this, "StartMigrationCommand");
  }
};

// src/commands/TestFailoverCommand.ts



var TestFailoverCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "TestFailover", {}).n("ElastiCacheClient", "TestFailoverCommand").f(void 0, void 0).ser(se_TestFailoverCommand).de(de_TestFailoverCommand).build() {
  static {
    __name(this, "TestFailoverCommand");
  }
};

// src/commands/TestMigrationCommand.ts



var TestMigrationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonElastiCacheV9", "TestMigration", {}).n("ElastiCacheClient", "TestMigrationCommand").f(void 0, void 0).ser(se_TestMigrationCommand).de(de_TestMigrationCommand).build() {
  static {
    __name(this, "TestMigrationCommand");
  }
};

// src/ElastiCache.ts
var commands = {
  AddTagsToResourceCommand,
  AuthorizeCacheSecurityGroupIngressCommand,
  BatchApplyUpdateActionCommand,
  BatchStopUpdateActionCommand,
  CompleteMigrationCommand,
  CopyServerlessCacheSnapshotCommand,
  CopySnapshotCommand,
  CreateCacheClusterCommand,
  CreateCacheParameterGroupCommand,
  CreateCacheSecurityGroupCommand,
  CreateCacheSubnetGroupCommand,
  CreateGlobalReplicationGroupCommand,
  CreateReplicationGroupCommand,
  CreateServerlessCacheCommand,
  CreateServerlessCacheSnapshotCommand,
  CreateSnapshotCommand,
  CreateUserCommand,
  CreateUserGroupCommand,
  DecreaseNodeGroupsInGlobalReplicationGroupCommand,
  DecreaseReplicaCountCommand,
  DeleteCacheClusterCommand,
  DeleteCacheParameterGroupCommand,
  DeleteCacheSecurityGroupCommand,
  DeleteCacheSubnetGroupCommand,
  DeleteGlobalReplicationGroupCommand,
  DeleteReplicationGroupCommand,
  DeleteServerlessCacheCommand,
  DeleteServerlessCacheSnapshotCommand,
  DeleteSnapshotCommand,
  DeleteUserCommand,
  DeleteUserGroupCommand,
  DescribeCacheClustersCommand,
  DescribeCacheEngineVersionsCommand,
  DescribeCacheParameterGroupsCommand,
  DescribeCacheParametersCommand,
  DescribeCacheSecurityGroupsCommand,
  DescribeCacheSubnetGroupsCommand,
  DescribeEngineDefaultParametersCommand,
  DescribeEventsCommand,
  DescribeGlobalReplicationGroupsCommand,
  DescribeReplicationGroupsCommand,
  DescribeReservedCacheNodesCommand,
  DescribeReservedCacheNodesOfferingsCommand,
  DescribeServerlessCachesCommand,
  DescribeServerlessCacheSnapshotsCommand,
  DescribeServiceUpdatesCommand,
  DescribeSnapshotsCommand,
  DescribeUpdateActionsCommand,
  DescribeUserGroupsCommand,
  DescribeUsersCommand,
  DisassociateGlobalReplicationGroupCommand,
  ExportServerlessCacheSnapshotCommand,
  FailoverGlobalReplicationGroupCommand,
  IncreaseNodeGroupsInGlobalReplicationGroupCommand,
  IncreaseReplicaCountCommand,
  ListAllowedNodeTypeModificationsCommand,
  ListTagsForResourceCommand,
  ModifyCacheClusterCommand,
  ModifyCacheParameterGroupCommand,
  ModifyCacheSubnetGroupCommand,
  ModifyGlobalReplicationGroupCommand,
  ModifyReplicationGroupCommand,
  ModifyReplicationGroupShardConfigurationCommand,
  ModifyServerlessCacheCommand,
  ModifyUserCommand,
  ModifyUserGroupCommand,
  PurchaseReservedCacheNodesOfferingCommand,
  RebalanceSlotsInGlobalReplicationGroupCommand,
  RebootCacheClusterCommand,
  RemoveTagsFromResourceCommand,
  ResetCacheParameterGroupCommand,
  RevokeCacheSecurityGroupIngressCommand,
  StartMigrationCommand,
  TestFailoverCommand,
  TestMigrationCommand
};
var ElastiCache = class extends ElastiCacheClient {
  static {
    __name(this, "ElastiCache");
  }
};
(0, import_smithy_client.createAggregatedClient)(commands, ElastiCache);

// src/pagination/DescribeCacheClustersPaginator.ts

var paginateDescribeCacheClusters = (0, import_core.createPaginator)(ElastiCacheClient, DescribeCacheClustersCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeCacheEngineVersionsPaginator.ts

var paginateDescribeCacheEngineVersions = (0, import_core.createPaginator)(ElastiCacheClient, DescribeCacheEngineVersionsCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeCacheParameterGroupsPaginator.ts

var paginateDescribeCacheParameterGroups = (0, import_core.createPaginator)(ElastiCacheClient, DescribeCacheParameterGroupsCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeCacheParametersPaginator.ts

var paginateDescribeCacheParameters = (0, import_core.createPaginator)(ElastiCacheClient, DescribeCacheParametersCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeCacheSecurityGroupsPaginator.ts

var paginateDescribeCacheSecurityGroups = (0, import_core.createPaginator)(ElastiCacheClient, DescribeCacheSecurityGroupsCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeCacheSubnetGroupsPaginator.ts

var paginateDescribeCacheSubnetGroups = (0, import_core.createPaginator)(ElastiCacheClient, DescribeCacheSubnetGroupsCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeEngineDefaultParametersPaginator.ts

var paginateDescribeEngineDefaultParameters = (0, import_core.createPaginator)(ElastiCacheClient, DescribeEngineDefaultParametersCommand, "Marker", "EngineDefaults.Marker", "MaxRecords");

// src/pagination/DescribeEventsPaginator.ts

var paginateDescribeEvents = (0, import_core.createPaginator)(ElastiCacheClient, DescribeEventsCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeGlobalReplicationGroupsPaginator.ts

var paginateDescribeGlobalReplicationGroups = (0, import_core.createPaginator)(ElastiCacheClient, DescribeGlobalReplicationGroupsCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeReplicationGroupsPaginator.ts

var paginateDescribeReplicationGroups = (0, import_core.createPaginator)(ElastiCacheClient, DescribeReplicationGroupsCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeReservedCacheNodesOfferingsPaginator.ts

var paginateDescribeReservedCacheNodesOfferings = (0, import_core.createPaginator)(ElastiCacheClient, DescribeReservedCacheNodesOfferingsCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeReservedCacheNodesPaginator.ts

var paginateDescribeReservedCacheNodes = (0, import_core.createPaginator)(ElastiCacheClient, DescribeReservedCacheNodesCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeServerlessCacheSnapshotsPaginator.ts

var paginateDescribeServerlessCacheSnapshots = (0, import_core.createPaginator)(ElastiCacheClient, DescribeServerlessCacheSnapshotsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/DescribeServerlessCachesPaginator.ts

var paginateDescribeServerlessCaches = (0, import_core.createPaginator)(ElastiCacheClient, DescribeServerlessCachesCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/DescribeServiceUpdatesPaginator.ts

var paginateDescribeServiceUpdates = (0, import_core.createPaginator)(ElastiCacheClient, DescribeServiceUpdatesCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeSnapshotsPaginator.ts

var paginateDescribeSnapshots = (0, import_core.createPaginator)(ElastiCacheClient, DescribeSnapshotsCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeUpdateActionsPaginator.ts

var paginateDescribeUpdateActions = (0, import_core.createPaginator)(ElastiCacheClient, DescribeUpdateActionsCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeUserGroupsPaginator.ts

var paginateDescribeUserGroups = (0, import_core.createPaginator)(ElastiCacheClient, DescribeUserGroupsCommand, "Marker", "Marker", "MaxRecords");

// src/pagination/DescribeUsersPaginator.ts

var paginateDescribeUsers = (0, import_core.createPaginator)(ElastiCacheClient, DescribeUsersCommand, "Marker", "Marker", "MaxRecords");

// src/waiters/waitForCacheClusterAvailable.ts
var import_util_waiter = require("@smithy/util-waiter");
var checkState = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeCacheClustersCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.CacheClusters);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.CacheClusterStatus;
        });
        return projection_3;
      }, "returnComparator");
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "available";
      }
      if (allStringEq_5) {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.CacheClusters);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.CacheClusterStatus;
        });
        return projection_3;
      }, "returnComparator");
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "deleted") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.CacheClusters);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.CacheClusterStatus;
        });
        return projection_3;
      }, "returnComparator");
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "deleting") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.CacheClusters);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.CacheClusterStatus;
        });
        return projection_3;
      }, "returnComparator");
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "incompatible-network") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.CacheClusters);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.CacheClusterStatus;
        });
        return projection_3;
      }, "returnComparator");
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "restore-failed") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForCacheClusterAvailable = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
}, "waitForCacheClusterAvailable");
var waitUntilCacheClusterAvailable = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilCacheClusterAvailable");

// src/waiters/waitForCacheClusterDeleted.ts

var checkState2 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeCacheClustersCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.CacheClusters);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.CacheClusterStatus;
        });
        return projection_3;
      }, "returnComparator");
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "deleted";
      }
      if (allStringEq_5) {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.CacheClusters);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.CacheClusterStatus;
        });
        return projection_3;
      }, "returnComparator");
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "available") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.CacheClusters);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.CacheClusterStatus;
        });
        return projection_3;
      }, "returnComparator");
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "creating") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.CacheClusters);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.CacheClusterStatus;
        });
        return projection_3;
      }, "returnComparator");
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "incompatible-network") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.CacheClusters);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.CacheClusterStatus;
        });
        return projection_3;
      }, "returnComparator");
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "modifying") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.CacheClusters);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.CacheClusterStatus;
        });
        return projection_3;
      }, "returnComparator");
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "restore-failed") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.CacheClusters);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.CacheClusterStatus;
        });
        return projection_3;
      }, "returnComparator");
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "snapshotting") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "CacheClusterNotFoundFault") {
      return { state: import_util_waiter.WaiterState.SUCCESS, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForCacheClusterDeleted = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
}, "waitForCacheClusterDeleted");
var waitUntilCacheClusterDeleted = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilCacheClusterDeleted");

// src/waiters/waitForReplicationGroupAvailable.ts

var checkState3 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeReplicationGroupsCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.ReplicationGroups);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.Status;
        });
        return projection_3;
      }, "returnComparator");
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "available";
      }
      if (allStringEq_5) {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.ReplicationGroups);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.Status;
        });
        return projection_3;
      }, "returnComparator");
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "deleted") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForReplicationGroupAvailable = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
}, "waitForReplicationGroupAvailable");
var waitUntilReplicationGroupAvailable = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilReplicationGroupAvailable");

// src/waiters/waitForReplicationGroupDeleted.ts

var checkState4 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeReplicationGroupsCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.ReplicationGroups);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.Status;
        });
        return projection_3;
      }, "returnComparator");
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "deleted";
      }
      if (allStringEq_5) {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.ReplicationGroups);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.Status;
        });
        return projection_3;
      }, "returnComparator");
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "available") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "ReplicationGroupNotFoundFault") {
      return { state: import_util_waiter.WaiterState.SUCCESS, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForReplicationGroupDeleted = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState4);
}, "waitForReplicationGroupDeleted");
var waitUntilReplicationGroupDeleted = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState4);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilReplicationGroupDeleted");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  ElastiCacheServiceException,
  __Client,
  ElastiCacheClient,
  ElastiCache,
  $Command,
  AddTagsToResourceCommand,
  AuthorizeCacheSecurityGroupIngressCommand,
  BatchApplyUpdateActionCommand,
  BatchStopUpdateActionCommand,
  CompleteMigrationCommand,
  CopyServerlessCacheSnapshotCommand,
  CopySnapshotCommand,
  CreateCacheClusterCommand,
  CreateCacheParameterGroupCommand,
  CreateCacheSecurityGroupCommand,
  CreateCacheSubnetGroupCommand,
  CreateGlobalReplicationGroupCommand,
  CreateReplicationGroupCommand,
  CreateServerlessCacheCommand,
  CreateServerlessCacheSnapshotCommand,
  CreateSnapshotCommand,
  CreateUserCommand,
  CreateUserGroupCommand,
  DecreaseNodeGroupsInGlobalReplicationGroupCommand,
  DecreaseReplicaCountCommand,
  DeleteCacheClusterCommand,
  DeleteCacheParameterGroupCommand,
  DeleteCacheSecurityGroupCommand,
  DeleteCacheSubnetGroupCommand,
  DeleteGlobalReplicationGroupCommand,
  DeleteReplicationGroupCommand,
  DeleteServerlessCacheCommand,
  DeleteServerlessCacheSnapshotCommand,
  DeleteSnapshotCommand,
  DeleteUserCommand,
  DeleteUserGroupCommand,
  DescribeCacheClustersCommand,
  DescribeCacheEngineVersionsCommand,
  DescribeCacheParameterGroupsCommand,
  DescribeCacheParametersCommand,
  DescribeCacheSecurityGroupsCommand,
  DescribeCacheSubnetGroupsCommand,
  DescribeEngineDefaultParametersCommand,
  DescribeEventsCommand,
  DescribeGlobalReplicationGroupsCommand,
  DescribeReplicationGroupsCommand,
  DescribeReservedCacheNodesCommand,
  DescribeReservedCacheNodesOfferingsCommand,
  DescribeServerlessCacheSnapshotsCommand,
  DescribeServerlessCachesCommand,
  DescribeServiceUpdatesCommand,
  DescribeSnapshotsCommand,
  DescribeUpdateActionsCommand,
  DescribeUserGroupsCommand,
  DescribeUsersCommand,
  DisassociateGlobalReplicationGroupCommand,
  ExportServerlessCacheSnapshotCommand,
  FailoverGlobalReplicationGroupCommand,
  IncreaseNodeGroupsInGlobalReplicationGroupCommand,
  IncreaseReplicaCountCommand,
  ListAllowedNodeTypeModificationsCommand,
  ListTagsForResourceCommand,
  ModifyCacheClusterCommand,
  ModifyCacheParameterGroupCommand,
  ModifyCacheSubnetGroupCommand,
  ModifyGlobalReplicationGroupCommand,
  ModifyReplicationGroupCommand,
  ModifyReplicationGroupShardConfigurationCommand,
  ModifyServerlessCacheCommand,
  ModifyUserCommand,
  ModifyUserGroupCommand,
  PurchaseReservedCacheNodesOfferingCommand,
  RebalanceSlotsInGlobalReplicationGroupCommand,
  RebootCacheClusterCommand,
  RemoveTagsFromResourceCommand,
  ResetCacheParameterGroupCommand,
  RevokeCacheSecurityGroupIngressCommand,
  StartMigrationCommand,
  TestFailoverCommand,
  TestMigrationCommand,
  paginateDescribeCacheClusters,
  paginateDescribeCacheEngineVersions,
  paginateDescribeCacheParameterGroups,
  paginateDescribeCacheParameters,
  paginateDescribeCacheSecurityGroups,
  paginateDescribeCacheSubnetGroups,
  paginateDescribeEngineDefaultParameters,
  paginateDescribeEvents,
  paginateDescribeGlobalReplicationGroups,
  paginateDescribeReplicationGroups,
  paginateDescribeReservedCacheNodesOfferings,
  paginateDescribeReservedCacheNodes,
  paginateDescribeServerlessCacheSnapshots,
  paginateDescribeServerlessCaches,
  paginateDescribeServiceUpdates,
  paginateDescribeSnapshots,
  paginateDescribeUpdateActions,
  paginateDescribeUserGroups,
  paginateDescribeUsers,
  waitForCacheClusterAvailable,
  waitUntilCacheClusterAvailable,
  waitForCacheClusterDeleted,
  waitUntilCacheClusterDeleted,
  waitForReplicationGroupAvailable,
  waitUntilReplicationGroupAvailable,
  waitForReplicationGroupDeleted,
  waitUntilReplicationGroupDeleted,
  CacheClusterNotFoundFault,
  CacheParameterGroupNotFoundFault,
  CacheSecurityGroupNotFoundFault,
  CacheSubnetGroupNotFoundFault,
  InvalidARNFault,
  InvalidReplicationGroupStateFault,
  InvalidServerlessCacheSnapshotStateFault,
  InvalidServerlessCacheStateFault,
  ReplicationGroupNotFoundFault,
  ReservedCacheNodeNotFoundFault,
  ServerlessCacheNotFoundFault,
  ServerlessCacheSnapshotNotFoundFault,
  SnapshotNotFoundFault,
  TagQuotaPerResourceExceeded,
  UserGroupNotFoundFault,
  UserNotFoundFault,
  AuthorizationAlreadyExistsFault,
  InvalidCacheSecurityGroupStateFault,
  InvalidParameterCombinationException,
  InvalidParameterValueException,
  ServiceUpdateNotFoundFault,
  UpdateActionStatus,
  AutomaticFailoverStatus,
  ClusterMode,
  DataTieringStatus,
  IpDiscovery,
  DestinationType,
  LogFormat,
  LogType,
  LogDeliveryConfigurationStatus,
  MultiAZStatus,
  NetworkType,
  AuthTokenUpdateStatus,
  PendingAutomaticFailoverStatus,
  TransitEncryptionMode,
  ReplicationGroupNotUnderMigrationFault,
  ServerlessCacheSnapshotAlreadyExistsFault,
  ServerlessCacheSnapshotQuotaExceededFault,
  ServiceLinkedRoleNotFoundFault,
  InvalidSnapshotStateFault,
  SnapshotAlreadyExistsFault,
  SnapshotQuotaExceededFault,
  CacheClusterAlreadyExistsFault,
  ClusterQuotaForCustomerExceededFault,
  AZMode,
  OutpostMode,
  InsufficientCacheClusterCapacityFault,
  InvalidVPCNetworkStateFault,
  NodeQuotaForClusterExceededFault,
  NodeQuotaForCustomerExceededFault,
  CacheParameterGroupAlreadyExistsFault,
  CacheParameterGroupQuotaExceededFault,
  InvalidCacheParameterGroupStateFault,
  CacheSecurityGroupAlreadyExistsFault,
  CacheSecurityGroupQuotaExceededFault,
  CacheSubnetGroupAlreadyExistsFault,
  CacheSubnetGroupQuotaExceededFault,
  CacheSubnetQuotaExceededFault,
  InvalidSubnet,
  SubnetNotAllowedFault,
  GlobalReplicationGroupAlreadyExistsFault,
  GlobalReplicationGroupNotFoundFault,
  InvalidCacheClusterStateFault,
  InvalidGlobalReplicationGroupStateFault,
  InvalidUserGroupStateFault,
  NodeGroupsPerReplicationGroupQuotaExceededFault,
  ReplicationGroupAlreadyExistsFault,
  DataStorageUnit,
  InvalidCredentialsException,
  ServerlessCacheAlreadyExistsFault,
  ServerlessCacheQuotaForCustomerExceededFault,
  SnapshotFeatureNotSupportedFault,
  InputAuthenticationType,
  DuplicateUserNameFault,
  AuthenticationType,
  UserAlreadyExistsFault,
  UserQuotaExceededFault,
  DefaultUserRequired,
  UserGroupAlreadyExistsFault,
  UserGroupQuotaExceededFault,
  NoOperationFault,
  CacheSubnetGroupInUse,
  DefaultUserAssociatedToUserGroupFault,
  InvalidUserStateFault,
  ChangeType,
  SourceType,
  ReservedCacheNodesOfferingNotFoundFault,
  ServiceUpdateStatus,
  ServiceUpdateSeverity,
  ServiceUpdateType,
  NodeUpdateInitiatedBy,
  NodeUpdateStatus,
  SlaMet,
  InvalidKMSKeyFault,
  AuthTokenUpdateStrategyType,
  SubnetInUse,
  ReservedCacheNodeAlreadyExistsFault,
  ReservedCacheNodeQuotaExceededFault,
  TagNotFoundFault,
  AuthorizationNotFoundFault,
  ReplicationGroupAlreadyUnderMigrationFault,
  APICallRateForCustomerExceededFault,
  NodeGroupNotFoundFault,
  TestFailoverNotAvailableFault
});


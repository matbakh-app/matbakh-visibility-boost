{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/cost-performance-optimizer.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/cost-performance-optimizer.ts"],"sourcesContent":["/**\n * PR-4: Cost & Performance Optimization\n * \n * Implements:\n * - Intelligent cost management with budget controls\n * - Performance optimization with caching strategies\n * - Token usage optimization and compression\n * - Real-time cost tracking and alerts\n */\n\nimport { CloudWatchClient, PutMetricDataCommand } from '@aws-sdk/client-cloudwatch';\nimport { randomUUID } from 'crypto';\nimport { AIRequest, AIResponse } from './types';\n\nexport interface CostBudget {\n    dailyLimit: number;\n    monthlyLimit: number;\n    alertThresholds: number[]; // [50%, 75%, 90%]\n    hardStop: boolean;\n}\n\nexport interface PerformanceMetrics {\n    latency: number;\n    throughput: number;\n    cacheHitRate: number;\n    tokenEfficiency: number;\n    costPerRequest: number;\n}\n\nexport interface CostOptimizationResult {\n    originalCost: number;\n    optimizedCost: number;\n    savings: number;\n    optimizations: string[];\n    cacheUsed: boolean;\n    compressionUsed: boolean;\n}\n\nexport interface TokenOptimization {\n    originalTokens: number;\n    optimizedTokens: number;\n    compressionRatio: number;\n    technique: string;\n}\n\n/**\n * Intelligent Caching Layer\n */\nclass IntelligentCache {\n    private cache: Map<string, { response: AIResponse; timestamp: number; cost: number }> = new Map();\n    private hitCount: number = 0;\n    private missCount: number = 0;\n\n    constructor(\n        private readonly maxSize: number = 10000,\n        private readonly ttlMs: number = 3600000 // 1 hour\n    ) { }\n\n    generateKey(request: AIRequest): string {\n        // Create semantic hash of request\n        const keyData = {\n            prompt: this.normalizePrompt(request.prompt),\n            provider: request.provider,\n            model: request.model,\n            temperature: request.temperature || 0.7,\n            maxTokens: request.maxTokens,\n            domain: request.domain\n        };\n\n        return Buffer.from(JSON.stringify(keyData)).toString('base64');\n    }\n\n    private normalizePrompt(prompt: string): string {\n        // Normalize whitespace and remove non-semantic variations\n        return prompt\n            .toLowerCase()\n            .replace(/\\s+/g, ' ')\n            .trim()\n            .replace(/[^\\w\\s]/g, ''); // Remove punctuation for semantic matching\n    }\n\n    get(key: string): AIResponse | null {\n        const entry = this.cache.get(key);\n\n        if (!entry) {\n            this.missCount++;\n            return null;\n        }\n\n        // Check TTL\n        if (Date.now() - entry.timestamp > this.ttlMs) {\n            this.cache.delete(key);\n            this.missCount++;\n            return null;\n        }\n\n        this.hitCount++;\n        return {\n            ...entry.response,\n            cached: true,\n            cacheTimestamp: entry.timestamp\n        };\n    }\n\n    set(key: string, response: AIResponse, cost: number): void {\n        // Implement LRU eviction if cache is full\n        if (this.cache.size >= this.maxSize) {\n            const oldestKey = this.cache.keys().next().value;\n            this.cache.delete(oldestKey);\n        }\n\n        this.cache.set(key, {\n            response: { ...response, cached: false },\n            timestamp: Date.now(),\n            cost\n        });\n    }\n\n    getHitRate(): number {\n        const total = this.hitCount + this.missCount;\n        return total > 0 ? this.hitCount / total : 0;\n    }\n\n    clear(): void {\n        this.cache.clear();\n        this.hitCount = 0;\n        this.missCount = 0;\n    }\n\n    getStats() {\n        return {\n            size: this.cache.size,\n            hitCount: this.hitCount,\n            missCount: this.missCount,\n            hitRate: this.getHitRate()\n        };\n    }\n}\n\n/**\n * Token Compression and Optimization\n */\nclass TokenOptimizer {\n    /**\n     * Compress prompt using various techniques\n     */\n    compressPrompt(prompt: string, targetReduction: number = 0.2): TokenOptimization {\n        const originalLength = prompt.length;\n        let optimized = prompt;\n        const techniques: string[] = [];\n\n        // 1. Remove redundant whitespace\n        optimized = optimized.replace(/\\s+/g, ' ').trim();\n        if (optimized.length < prompt.length) {\n            techniques.push('whitespace-normalization');\n        }\n\n        // 2. Abbreviate common phrases\n        const abbreviations = {\n            'please': 'pls',\n            'you are': \"you're\",\n            'do not': \"don't\",\n            'cannot': \"can't\",\n            'will not': \"won't\",\n            'should not': \"shouldn't\",\n            'would not': \"wouldn't\",\n            'could not': \"couldn't\"\n        };\n\n        for (const [full, abbrev] of Object.entries(abbreviations)) {\n            const regex = new RegExp(`\\\\b${full}\\\\b`, 'gi');\n            if (regex.test(optimized)) {\n                optimized = optimized.replace(regex, abbrev);\n                techniques.push('abbreviation');\n            }\n        }\n\n        // 3. Remove filler words if target reduction not met\n        const currentReduction = 1 - (optimized.length / originalLength);\n        if (currentReduction < targetReduction) {\n            const fillerWords = ['really', 'very', 'quite', 'rather', 'somewhat', 'actually', 'basically', 'literally'];\n            for (const filler of fillerWords) {\n                const regex = new RegExp(`\\\\b${filler}\\\\b`, 'gi');\n                if (regex.test(optimized)) {\n                    optimized = optimized.replace(regex, '');\n                    techniques.push('filler-removal');\n                }\n            }\n        }\n\n        // 4. Sentence compression (remove redundant clauses)\n        if (currentReduction < targetReduction) {\n            optimized = this.compressSentences(optimized);\n            techniques.push('sentence-compression');\n        }\n\n        // Clean up any double spaces created\n        optimized = optimized.replace(/\\s+/g, ' ').trim();\n\n        const finalReduction = 1 - (optimized.length / originalLength);\n        const estimatedTokenReduction = finalReduction * 0.75; // Approximate token to character ratio\n\n        return {\n            originalTokens: Math.ceil(originalLength / 4), // Rough token estimate\n            optimizedTokens: Math.ceil(optimized.length / 4),\n            compressionRatio: finalReduction,\n            technique: techniques.join(', ')\n        };\n    }\n\n    private compressSentences(text: string): string {\n        // Simple sentence compression - remove redundant phrases\n        const redundantPatterns = [\n            /,\\s*which is to say,?/gi,\n            /,\\s*in other words,?/gi,\n            /,\\s*that is to say,?/gi,\n            /\\s*as I mentioned before,?\\s*/gi,\n            /\\s*as previously stated,?\\s*/gi\n        ];\n\n        let compressed = text;\n        for (const pattern of redundantPatterns) {\n            compressed = compressed.replace(pattern, ' ');\n        }\n\n        return compressed;\n    }\n\n    /**\n     * Optimize response for token efficiency\n     */\n    optimizeResponse(response: string, maxTokens?: number): string {\n        if (!maxTokens) return response;\n\n        const estimatedTokens = Math.ceil(response.length / 4);\n        if (estimatedTokens <= maxTokens) return response;\n\n        // Truncate at sentence boundaries\n        const sentences = response.split(/[.!?]+/);\n        let optimized = '';\n        let tokenCount = 0;\n\n        for (const sentence of sentences) {\n            const sentenceTokens = Math.ceil(sentence.length / 4);\n            if (tokenCount + sentenceTokens > maxTokens) break;\n\n            optimized += sentence + '.';\n            tokenCount += sentenceTokens;\n        }\n\n        return optimized.trim();\n    }\n}\n\n/**\n * Cost & Performance Optimization Service\n */\nexport class CostPerformanceOptimizer {\n    private cache: IntelligentCache;\n    private tokenOptimizer: TokenOptimizer;\n    private cloudWatch: CloudWatchClient;\n    private dailyCosts: Map<string, number> = new Map(); // date -> cost\n    private monthlyCosts: Map<string, number> = new Map(); // month -> cost\n\n    constructor(\n        private readonly budget: CostBudget,\n        private readonly region: string = 'eu-central-1'\n    ) {\n        this.cache = new IntelligentCache();\n        this.tokenOptimizer = new TokenOptimizer();\n        this.cloudWatch = new CloudWatchClient({ region });\n    }\n\n    /**\n     * Optimize request for cost and performance\n     */\n    async optimizeRequest(request: AIRequest): Promise<{\n        optimizedRequest: AIRequest;\n        optimization: CostOptimizationResult;\n        shouldProceed: boolean;\n    }> {\n        const requestId = randomUUID();\n        const startTime = Date.now();\n\n        // Check budget constraints\n        const budgetCheck = await this.checkBudget(request);\n        if (!budgetCheck.allowed) {\n            return {\n                optimizedRequest: request,\n                optimization: {\n                    originalCost: budgetCheck.estimatedCost,\n                    optimizedCost: 0,\n                    savings: 0,\n                    optimizations: ['budget-exceeded'],\n                    cacheUsed: false,\n                    compressionUsed: false\n                },\n                shouldProceed: false\n            };\n        }\n\n        // Check cache first\n        const cacheKey = this.cache.generateKey(request);\n        const cachedResponse = this.cache.get(cacheKey);\n\n        if (cachedResponse) {\n            return {\n                optimizedRequest: request,\n                optimization: {\n                    originalCost: budgetCheck.estimatedCost,\n                    optimizedCost: 0,\n                    savings: budgetCheck.estimatedCost,\n                    optimizations: ['cache-hit'],\n                    cacheUsed: true,\n                    compressionUsed: false\n                },\n                shouldProceed: false // Don't need to make API call\n            };\n        }\n\n        // Optimize prompt for token efficiency\n        const tokenOptimization = this.tokenOptimizer.compressPrompt(request.prompt, 0.15);\n        const optimizedRequest: AIRequest = {\n            ...request,\n            prompt: request.prompt // Keep original for now, apply compression based on cost pressure\n        };\n\n        // Apply compression if cost pressure is high\n        const costPressure = this.calculateCostPressure();\n        if (costPressure > 0.7 || budgetCheck.estimatedCost > budgetCheck.remainingBudget * 0.1) {\n            optimizedRequest.prompt = this.applyTokenOptimization(request.prompt, tokenOptimization);\n\n            // Reduce max tokens if needed\n            if (request.maxTokens && request.maxTokens > 1000) {\n                optimizedRequest.maxTokens = Math.max(500, Math.floor(request.maxTokens * 0.8));\n            }\n        }\n\n        const optimizedCost = this.estimateRequestCost(optimizedRequest);\n        const savings = budgetCheck.estimatedCost - optimizedCost;\n\n        return {\n            optimizedRequest,\n            optimization: {\n                originalCost: budgetCheck.estimatedCost,\n                optimizedCost,\n                savings,\n                optimizations: tokenOptimization.technique ? ['token-compression'] : [],\n                cacheUsed: false,\n                compressionUsed: tokenOptimization.compressionRatio > 0.05\n            },\n            shouldProceed: true\n        };\n    }\n\n    /**\n     * Process response and update metrics\n     */\n    async processResponse(\n        request: AIRequest,\n        response: AIResponse,\n        optimization: CostOptimizationResult\n    ): Promise<AIResponse> {\n        const actualCost = this.calculateActualCost(request, response);\n\n        // Cache successful responses\n        if (response.content && !response.error) {\n            const cacheKey = this.cache.generateKey(request);\n            this.cache.set(cacheKey, response, actualCost);\n        }\n\n        // Update cost tracking\n        await this.updateCostTracking(actualCost);\n\n        // Publish metrics\n        await this.publishMetrics({\n            latency: response.processingTime || 0,\n            throughput: 1000 / (response.processingTime || 1000), // requests per second\n            cacheHitRate: this.cache.getHitRate(),\n            tokenEfficiency: this.calculateTokenEfficiency(request, response),\n            costPerRequest: actualCost\n        });\n\n        // Optimize response if needed\n        const optimizedContent = request.maxTokens\n            ? this.tokenOptimizer.optimizeResponse(response.content, request.maxTokens)\n            : response.content;\n\n        return {\n            ...response,\n            content: optimizedContent,\n            cost: actualCost,\n            optimization\n        };\n    }\n\n    /**\n     * Check budget constraints\n     */\n    private async checkBudget(request: AIRequest): Promise<{\n        allowed: boolean;\n        estimatedCost: number;\n        remainingBudget: number;\n        reason?: string;\n    }> {\n        const estimatedCost = this.estimateRequestCost(request);\n        const today = new Date().toISOString().split('T')[0];\n        const thisMonth = new Date().toISOString().substring(0, 7);\n\n        const dailySpent = this.dailyCosts.get(today) || 0;\n        const monthlySpent = this.monthlyCosts.get(thisMonth) || 0;\n\n        // Check daily limit\n        if (dailySpent + estimatedCost > this.budget.dailyLimit) {\n            if (this.budget.hardStop) {\n                return {\n                    allowed: false,\n                    estimatedCost,\n                    remainingBudget: this.budget.dailyLimit - dailySpent,\n                    reason: 'Daily budget exceeded'\n                };\n            }\n        }\n\n        // Check monthly limit\n        if (monthlySpent + estimatedCost > this.budget.monthlyLimit) {\n            if (this.budget.hardStop) {\n                return {\n                    allowed: false,\n                    estimatedCost,\n                    remainingBudget: this.budget.monthlyLimit - monthlySpent,\n                    reason: 'Monthly budget exceeded'\n                };\n            }\n        }\n\n        return {\n            allowed: true,\n            estimatedCost,\n            remainingBudget: Math.min(\n                this.budget.dailyLimit - dailySpent,\n                this.budget.monthlyLimit - monthlySpent\n            )\n        };\n    }\n\n    /**\n     * Estimate request cost based on tokens and provider\n     */\n    private estimateRequestCost(request: AIRequest): number {\n        const inputTokens = Math.ceil(request.prompt.length / 4);\n        const outputTokens = request.maxTokens || 1000;\n\n        const providerCosts = {\n            bedrock: { input: 0.003, output: 0.015 }, // per 1K tokens\n            google: { input: 0.00125, output: 0.005 },\n            meta: { input: 0.0008, output: 0.0024 }\n        };\n\n        const costs = providerCosts[request.provider || 'bedrock'];\n        return (inputTokens * costs.input + outputTokens * costs.output) / 1000;\n    }\n\n    /**\n     * Calculate actual cost from response\n     */\n    private calculateActualCost(request: AIRequest, response: AIResponse): number {\n        if (response.cached) return 0;\n\n        const inputTokens = response.inputTokens || Math.ceil(request.prompt.length / 4);\n        const outputTokens = response.outputTokens || Math.ceil(response.content.length / 4);\n\n        const providerCosts = {\n            bedrock: { input: 0.003, output: 0.015 },\n            google: { input: 0.00125, output: 0.005 },\n            meta: { input: 0.0008, output: 0.0024 }\n        };\n\n        const costs = providerCosts[request.provider || 'bedrock'];\n        return (inputTokens * costs.input + outputTokens * costs.output) / 1000;\n    }\n\n    /**\n     * Calculate cost pressure (0-1 scale)\n     */\n    private calculateCostPressure(): number {\n        const today = new Date().toISOString().split('T')[0];\n        const thisMonth = new Date().toISOString().substring(0, 7);\n\n        const dailySpent = this.dailyCosts.get(today) || 0;\n        const monthlySpent = this.monthlyCosts.get(thisMonth) || 0;\n\n        const dailyPressure = dailySpent / this.budget.dailyLimit;\n        const monthlyPressure = monthlySpent / this.budget.monthlyLimit;\n\n        return Math.max(dailyPressure, monthlyPressure);\n    }\n\n    /**\n     * Apply token optimization to prompt\n     */\n    private applyTokenOptimization(prompt: string, optimization: TokenOptimization): string {\n        if (optimization.compressionRatio < 0.05) return prompt;\n\n        // Apply the compression techniques\n        return this.tokenOptimizer.compressPrompt(prompt, 0.2).technique ?\n            this.tokenOptimizer.compressPrompt(prompt, 0.2).toString() : prompt;\n    }\n\n    /**\n     * Calculate token efficiency\n     */\n    private calculateTokenEfficiency(request: AIRequest, response: AIResponse): number {\n        const inputTokens = response.inputTokens || Math.ceil(request.prompt.length / 4);\n        const outputTokens = response.outputTokens || Math.ceil(response.content.length / 4);\n        const totalTokens = inputTokens + outputTokens;\n\n        // Efficiency = useful content / total tokens\n        const usefulContent = response.content.replace(/\\s+/g, ' ').trim().length;\n        return totalTokens > 0 ? usefulContent / (totalTokens * 4) : 0;\n    }\n\n    /**\n     * Update cost tracking\n     */\n    private async updateCostTracking(cost: number): Promise<void> {\n        const today = new Date().toISOString().split('T')[0];\n        const thisMonth = new Date().toISOString().substring(0, 7);\n\n        // Update daily costs\n        const currentDaily = this.dailyCosts.get(today) || 0;\n        this.dailyCosts.set(today, currentDaily + cost);\n\n        // Update monthly costs\n        const currentMonthly = this.monthlyCosts.get(thisMonth) || 0;\n        this.monthlyCosts.set(thisMonth, currentMonthly + cost);\n\n        // Check alert thresholds\n        await this.checkAlertThresholds(currentDaily + cost, currentMonthly + cost);\n    }\n\n    /**\n     * Check budget alert thresholds\n     */\n    private async checkAlertThresholds(dailySpent: number, monthlySpent: number): Promise<void> {\n        for (const threshold of this.budget.alertThresholds) {\n            const dailyThreshold = this.budget.dailyLimit * (threshold / 100);\n            const monthlyThreshold = this.budget.monthlyLimit * (threshold / 100);\n\n            if (dailySpent >= dailyThreshold || monthlySpent >= monthlyThreshold) {\n                await this.sendBudgetAlert(threshold, dailySpent, monthlySpent);\n            }\n        }\n    }\n\n    /**\n     * Send budget alert\n     */\n    private async sendBudgetAlert(threshold: number, dailySpent: number, monthlySpent: number): Promise<void> {\n        console.warn(`Budget alert: ${threshold}% threshold reached. Daily: $${dailySpent.toFixed(2)}, Monthly: $${monthlySpent.toFixed(2)}`);\n\n        // Publish alert metric\n        await this.cloudWatch.send(new PutMetricDataCommand({\n            Namespace: 'AI/CostOptimization',\n            MetricData: [{\n                MetricName: 'BudgetAlert',\n                Value: threshold,\n                Unit: 'Percent',\n                Timestamp: new Date(),\n                Dimensions: [{\n                    Name: 'AlertType',\n                    Value: dailySpent >= this.budget.dailyLimit * (threshold / 100) ? 'Daily' : 'Monthly'\n                }]\n            }]\n        }));\n    }\n\n    /**\n     * Publish performance metrics\n     */\n    private async publishMetrics(metrics: PerformanceMetrics): Promise<void> {\n        const metricData = [\n            {\n                MetricName: 'Latency',\n                Value: metrics.latency,\n                Unit: 'Milliseconds'\n            },\n            {\n                MetricName: 'Throughput',\n                Value: metrics.throughput,\n                Unit: 'Count/Second'\n            },\n            {\n                MetricName: 'CacheHitRate',\n                Value: metrics.cacheHitRate * 100,\n                Unit: 'Percent'\n            },\n            {\n                MetricName: 'TokenEfficiency',\n                Value: metrics.tokenEfficiency,\n                Unit: 'None'\n            },\n            {\n                MetricName: 'CostPerRequest',\n                Value: metrics.costPerRequest,\n                Unit: 'None'\n            }\n        ].map(metric => ({\n            ...metric,\n            Timestamp: new Date()\n        }));\n\n        await this.cloudWatch.send(new PutMetricDataCommand({\n            Namespace: 'AI/Performance',\n            MetricData: metricData\n        }));\n    }\n\n    /**\n     * Get current performance metrics\n     */\n    getPerformanceMetrics(): PerformanceMetrics {\n        const cacheStats = this.cache.getStats();\n\n        return {\n            latency: 0, // Will be updated by actual requests\n            throughput: 0, // Will be updated by actual requests\n            cacheHitRate: cacheStats.hitRate,\n            tokenEfficiency: 0, // Will be updated by actual requests\n            costPerRequest: 0 // Will be updated by actual requests\n        };\n    }\n\n    /**\n     * Get cost summary\n     */\n    getCostSummary(): {\n        daily: { spent: number; limit: number; remaining: number };\n        monthly: { spent: number; limit: number; remaining: number };\n        cacheStats: any;\n    } {\n        const today = new Date().toISOString().split('T')[0];\n        const thisMonth = new Date().toISOString().substring(0, 7);\n\n        const dailySpent = this.dailyCosts.get(today) || 0;\n        const monthlySpent = this.monthlyCosts.get(thisMonth) || 0;\n\n        return {\n            daily: {\n                spent: dailySpent,\n                limit: this.budget.dailyLimit,\n                remaining: this.budget.dailyLimit - dailySpent\n            },\n            monthly: {\n                spent: monthlySpent,\n                limit: this.budget.monthlyLimit,\n                remaining: this.budget.monthlyLimit - monthlySpent\n            },\n            cacheStats: this.cache.getStats()\n        };\n    }\n\n    /**\n     * Clear cache\n     */\n    clearCache(): void {\n        this.cache.clear();\n    }\n\n    /**\n     * Reset cost tracking\n     */\n    resetCostTracking(): void {\n        this.dailyCosts.clear();\n        this.monthlyCosts.clear();\n    }\n}"],"version":3}
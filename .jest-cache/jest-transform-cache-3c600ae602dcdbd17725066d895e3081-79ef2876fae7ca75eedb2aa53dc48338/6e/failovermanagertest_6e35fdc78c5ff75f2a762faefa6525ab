82a6f1883cf6017b5ea05c2ece136b82
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const globals_1 = require("@jest/globals");
const failover_manager_1 = require("../failover-manager");
const mockConfig = {
    primaryRegion: 'eu-central-1',
    secondaryRegion: 'eu-west-1',
    domainName: 'test.matbakh.app',
    hostedZoneId: 'Z123456789',
    distributionId: 'E123456789',
    globalClusterIdentifier: 'test-global-cluster',
    primaryClusterIdentifier: 'test-primary-cluster',
    secondaryClusterIdentifier: 'test-secondary-cluster',
    primaryHealthCheckId: 'hc-primary-123',
    secondaryHealthCheckId: 'hc-secondary-123',
};
const mockPolicy = {
    automaticFailover: false,
    healthCheckFailureThreshold: 2,
    healthCheckInterval: 30,
    rtoTarget: 15,
    rpoTarget: 1,
    notificationEndpoints: ['test@example.com'],
};
(0, globals_1.describe)('FailoverManager', () => {
    let failoverManager;
    let mockOrchestrator;
    let mockHealthChecker;
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
        // Create mock orchestrator
        mockOrchestrator = {
            executeFailover: globals_1.jest.fn(),
            executeFailback: globals_1.jest.fn(),
            testDisasterRecovery: globals_1.jest.fn(),
        };
        // Create mock health checker
        mockHealthChecker = {
            checkAllServices: globals_1.jest.fn(),
            getHealthSummary: globals_1.jest.fn(),
        };
        // Create failover manager with mocked dependencies
        failoverManager = new failover_manager_1.FailoverManager(mockConfig, mockPolicy, mockOrchestrator, mockHealthChecker);
    });
    (0, globals_1.describe)('manual failover', () => {
        (0, globals_1.it)('should execute manual failover successfully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockResult = {
                success: true,
                rtoAchieved: 10,
                rpoAchieved: 0.5,
                steps: [
                    { step: 'Test step', status: 'completed', startTime: new Date(), endTime: new Date() }
                ],
            };
            mockOrchestrator.executeFailover.mockResolvedValue(mockResult);
            const result = yield failoverManager.executeManualFailover('Test reason');
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.rtoAchieved).toBe(10);
            (0, globals_1.expect)(result.rpoAchieved).toBe(0.5);
            (0, globals_1.expect)(mockOrchestrator.executeFailover).toHaveBeenCalledWith('Test reason');
        }));
        (0, globals_1.it)('should prevent concurrent failovers', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockResult = {
                success: true,
                rtoAchieved: 10,
                rpoAchieved: 0.5,
                steps: [],
            };
            // Mock a slow failover
            mockOrchestrator.executeFailover.mockImplementation(() => new Promise(resolve => setTimeout(() => resolve(mockResult), 100)));
            // Start first failover
            const firstFailover = failoverManager.executeManualFailover('First failover');
            // Try to start second failover immediately
            yield (0, globals_1.expect)(failoverManager.executeManualFailover('Second failover'))
                .rejects.toThrow('Failover already in progress');
            // Complete first failover
            yield firstFailover;
        }));
        (0, globals_1.it)('should track failover history', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockResult = {
                success: true,
                rtoAchieved: 12,
                rpoAchieved: 0.8,
                steps: [],
            };
            mockOrchestrator.executeFailover.mockResolvedValue(mockResult);
            yield failoverManager.executeManualFailover('Test failover');
            const history = failoverManager.getFailoverHistory();
            (0, globals_1.expect)(history).toHaveLength(1);
            (0, globals_1.expect)(history[0].type).toBe('failover');
            (0, globals_1.expect)(history[0].trigger).toBe('manual');
            (0, globals_1.expect)(history[0].reason).toBe('Test failover');
            (0, globals_1.expect)(history[0].rtoAchieved).toBe(12);
            (0, globals_1.expect)(history[0].rpoAchieved).toBe(0.8);
        }));
        (0, globals_1.it)('should send notifications on failover events', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockResult = {
                success: true,
                rtoAchieved: 10,
                rpoAchieved: 0.5,
                steps: [],
            };
            mockOrchestrator.executeFailover.mockResolvedValue(mockResult);
            // Mock fetch for webhook notifications
            global.fetch = globals_1.jest.fn().mockResolvedValue({ ok: true });
            const policyWithWebhook = Object.assign(Object.assign({}, mockPolicy), { notificationEndpoints: ['https://webhook.example.com/alerts'] });
            const manager = new failover_manager_1.FailoverManager(mockConfig, policyWithWebhook, mockOrchestrator, mockHealthChecker);
            yield manager.executeManualFailover('Test failover');
            (0, globals_1.expect)(global.fetch).toHaveBeenCalledWith('https://webhook.example.com/alerts', globals_1.expect.objectContaining({
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: globals_1.expect.stringContaining('Failover started'),
            }));
        }));
        (0, globals_1.it)('should handle failover failure and log metrics', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockResult = {
                success: false,
                rtoAchieved: 0,
                rpoAchieved: 0,
                steps: [
                    {
                        step: 'Failed step',
                        status: 'failed',
                        startTime: new Date(),
                        endTime: new Date(),
                        error: 'Test error'
                    }
                ],
            };
            mockOrchestrator.executeFailover.mockResolvedValue(mockResult);
            const result = yield failoverManager.executeManualFailover('Test failover');
            (0, globals_1.expect)(result.success).toBe(false);
            (0, globals_1.expect)(result.steps.some(step => step.status === 'failed')).toBe(true);
            const history = failoverManager.getFailoverHistory();
            (0, globals_1.expect)(history[0].result.success).toBe(false);
        }));
    });
    (0, globals_1.describe)('failback', () => {
        (0, globals_1.it)('should execute failback successfully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // First simulate a failover to set state
            const failoverResult = {
                success: true,
                rtoAchieved: 10,
                rpoAchieved: 0.5,
                steps: [],
            };
            mockOrchestrator.executeFailover.mockResolvedValue(failoverResult);
            yield failoverManager.executeManualFailover('Setup failover');
            // Now test failback
            const failbackResult = {
                success: true,
                rtoAchieved: 8,
                rpoAchieved: 0,
                steps: [],
            };
            mockOrchestrator.executeFailback.mockResolvedValue(failbackResult);
            const result = yield failoverManager.executeFailback('Test failback');
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.rtoAchieved).toBe(8);
            (0, globals_1.expect)(mockOrchestrator.executeFailback).toHaveBeenCalledWith('Test failback');
        }));
        (0, globals_1.it)('should prevent failback when already on primary', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield (0, globals_1.expect)(failoverManager.executeFailback('Test failback'))
                .rejects.toThrow('Already running on primary region');
        }));
        (0, globals_1.it)('should prevent failback during ongoing failover', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockResult = {
                success: true,
                rtoAchieved: 10,
                rpoAchieved: 0.5,
                steps: [],
            };
            // Mock a slow failover
            mockOrchestrator.executeFailover.mockImplementation(() => new Promise(resolve => setTimeout(() => resolve(mockResult), 100)));
            // Start failover
            const failoverPromise = failoverManager.executeManualFailover('Test failover');
            // Try failback during failover
            yield (0, globals_1.expect)(failoverManager.executeFailback('Test failback'))
                .rejects.toThrow('Failover operation already in progress');
            // Complete failover
            yield failoverPromise;
        }));
    });
    (0, globals_1.describe)('disaster recovery testing', () => {
        (0, globals_1.it)('should perform DR test successfully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockTestResult = {
                success: true,
                healthChecks: {
                    secondaryRegionHealth: true,
                    databaseReplication: true,
                    dnsHealthChecks: true,
                    s3Replication: true,
                    secretsReplication: true,
                },
                estimatedRTO: 12,
                estimatedRPO: 0.8,
                recommendations: [],
            };
            mockOrchestrator.testDisasterRecovery.mockResolvedValue(mockTestResult);
            const result = yield failoverManager.testDisasterRecovery();
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.estimatedRTO).toBe(12);
            (0, globals_1.expect)(result.estimatedRPO).toBe(0.8);
            (0, globals_1.expect)(mockOrchestrator.testDisasterRecovery).toHaveBeenCalled();
        }));
        (0, globals_1.it)('should track DR test in history', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockTestResult = {
                success: true,
                healthChecks: {},
                estimatedRTO: 10,
                estimatedRPO: 0.5,
                recommendations: [],
            };
            mockOrchestrator.testDisasterRecovery.mockResolvedValue(mockTestResult);
            yield failoverManager.testDisasterRecovery();
            const history = failoverManager.getFailoverHistory();
            (0, globals_1.expect)(history).toHaveLength(1);
            (0, globals_1.expect)(history[0].type).toBe('test');
            (0, globals_1.expect)(history[0].trigger).toBe('manual');
            (0, globals_1.expect)(history[0].reason).toBe('Disaster recovery test');
        }));
        (0, globals_1.it)('should handle DR test failures', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockTestResult = {
                success: false,
                healthChecks: {
                    secondaryRegionHealth: false,
                    databaseReplication: false,
                },
                estimatedRTO: 20,
                estimatedRPO: 2,
                recommendations: ['Fix secondary region', 'Improve replication'],
            };
            mockOrchestrator.testDisasterRecovery.mockResolvedValue(mockTestResult);
            const result = yield failoverManager.testDisasterRecovery();
            (0, globals_1.expect)(result.success).toBe(false);
            (0, globals_1.expect)(result.recommendations.length).toBeGreaterThan(0);
        }));
    });
    (0, globals_1.describe)('system status', () => {
        (0, globals_1.it)('should return current system status', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockHealthStatus = {
                overall: 'healthy',
                regions: {
                    primary: { status: 'healthy' },
                    secondary: { status: 'healthy' },
                },
                services: [],
                lastUpdated: new Date(),
            };
            mockHealthChecker.checkAllServices.mockResolvedValue(mockHealthStatus);
            const status = yield failoverManager.getSystemStatus();
            (0, globals_1.expect)(status.currentRegion).toBe('primary');
            (0, globals_1.expect)(status.isFailoverInProgress).toBe(false);
            (0, globals_1.expect)(status.healthStatus).toEqual(mockHealthStatus);
            (0, globals_1.expect)(status.rtoCompliance).toBe(true);
            (0, globals_1.expect)(status.rpoCompliance).toBe(true);
        }));
        (0, globals_1.it)('should detect RTO/RPO compliance violations', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // First perform a failover that exceeds targets
            const mockResult = {
                success: true,
                rtoAchieved: 20, // Exceeds 15 minute target
                rpoAchieved: 2, // Exceeds 1 minute target
                steps: [],
            };
            mockOrchestrator.executeFailover.mockResolvedValue(mockResult);
            mockHealthChecker.checkAllServices.mockResolvedValue({
                overall: 'healthy',
                regions: {
                    primary: { status: 'healthy' },
                    secondary: { status: 'healthy' }
                },
                services: [],
                lastUpdated: new Date(),
            });
            yield failoverManager.executeManualFailover('Test failover');
            const status = yield failoverManager.getSystemStatus();
            (0, globals_1.expect)(status.rtoCompliance).toBe(false);
            (0, globals_1.expect)(status.rpoCompliance).toBe(false);
        }));
        (0, globals_1.it)('should handle health check errors gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockHealthChecker.checkAllServices.mockRejectedValue(new Error('Health check failed'));
            const status = yield failoverManager.getSystemStatus();
            (0, globals_1.expect)(status.currentRegion).toBe('primary');
            (0, globals_1.expect)(status.isFailoverInProgress).toBe(false);
            // Should have some default/error state for health status
        }));
    });
    (0, globals_1.describe)('automatic failover', () => {
        (0, globals_1.it)('should trigger automatic failover on health check failures', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const automaticPolicy = Object.assign(Object.assign({}, mockPolicy), { automaticFailover: true, healthCheckFailureThreshold: 2, healthCheckInterval: 0.1 });
            // Mock health check failures
            mockHealthChecker.checkAllServices.mockResolvedValue({
                api: false,
                database: false,
                cache: true,
                storage: true,
                secrets: true,
            });
            mockOrchestrator.executeFailover.mockResolvedValue({
                success: true,
                rtoAchieved: 10,
                rpoAchieved: 0.5,
                steps: [],
            });
            const manager = new failover_manager_1.FailoverManager(mockConfig, automaticPolicy, mockOrchestrator, mockHealthChecker);
            // Wait for automatic failover to trigger
            yield new Promise(resolve => setTimeout(resolve, 200));
            const history = manager.getFailoverHistory();
            (0, globals_1.expect)(history.some(event => event.trigger === 'automatic')).toBe(true);
        }));
        (0, globals_1.it)('should not trigger automatic failover when disabled', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const manualPolicy = Object.assign(Object.assign({}, mockPolicy), { automaticFailover: false });
            // Mock health check failures
            mockHealthChecker.checkAllServices.mockResolvedValue({
                api: false,
                database: false,
                cache: false,
                storage: false,
                secrets: false,
            });
            const manager = new failover_manager_1.FailoverManager(mockConfig, manualPolicy, mockOrchestrator, mockHealthChecker);
            // Wait to ensure no automatic failover
            yield new Promise(resolve => setTimeout(resolve, 100));
            const history = manager.getFailoverHistory();
            (0, globals_1.expect)(history.length).toBe(0);
        }));
        (0, globals_1.it)('should respect failure threshold for automatic failover', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const automaticPolicy = Object.assign(Object.assign({}, mockPolicy), { automaticFailover: true, healthCheckFailureThreshold: 3, healthCheckInterval: 0.1 });
            // Mock only 2 failures (below threshold)
            mockHealthChecker.checkAllServices.mockResolvedValue({
                api: false,
                database: false,
                cache: true,
                storage: true,
                secrets: true,
            });
            const manager = new failover_manager_1.FailoverManager(mockConfig, automaticPolicy, mockOrchestrator, mockHealthChecker);
            // Wait to ensure no automatic failover
            yield new Promise(resolve => setTimeout(resolve, 200));
            const history = manager.getFailoverHistory();
            (0, globals_1.expect)(history.length).toBe(0);
        }));
    });
    (0, globals_1.describe)('policy updates', () => {
        (0, globals_1.it)('should update failover policy', () => {
            const newPolicy = {
                rtoTarget: 10,
                rpoTarget: 0.5,
            };
            (0, globals_1.expect)(() => failoverManager.updatePolicy(newPolicy)).not.toThrow();
        });
        (0, globals_1.it)('should restart health monitoring when automatic failover is enabled', () => {
            const newPolicy = {
                automaticFailover: true,
                healthCheckInterval: 30,
            };
            (0, globals_1.expect)(() => failoverManager.updatePolicy(newPolicy)).not.toThrow();
        });
    });
    (0, globals_1.describe)('failover report generation', () => {
        (0, globals_1.it)('should generate comprehensive failover report', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Perform some failovers to generate history
            const mockResult = {
                success: true,
                rtoAchieved: 12,
                rpoAchieved: 0.8,
                steps: [],
            };
            mockOrchestrator.executeFailover.mockResolvedValue(mockResult);
            yield failoverManager.executeManualFailover('Test failover 1');
            yield failoverManager.executeManualFailover('Test failover 2');
            const report = failoverManager.generateFailoverReport();
            (0, globals_1.expect)(report.summary.totalFailovers).toBe(2);
            (0, globals_1.expect)(report.summary.successfulFailovers).toBe(2);
            (0, globals_1.expect)(report.summary.averageRTO).toBe(12);
            (0, globals_1.expect)(report.summary.averageRPO).toBe(0.8);
            (0, globals_1.expect)(report.summary.rtoCompliance).toBe(100); // Both within 15 minute target
            (0, globals_1.expect)(report.summary.rpoCompliance).toBe(100); // Both within 1 minute target
            (0, globals_1.expect)(report.recentEvents).toHaveLength(2);
            (0, globals_1.expect)(Array.isArray(report.recommendations)).toBe(true);
        }));
        (0, globals_1.it)('should identify performance issues in report', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Perform failover that exceeds targets
            const mockResult = {
                success: true,
                rtoAchieved: 20, // Exceeds target
                rpoAchieved: 2, // Exceeds target
                steps: [],
            };
            mockOrchestrator.executeFailover.mockResolvedValue(mockResult);
            yield failoverManager.executeManualFailover('Slow failover');
            const report = failoverManager.generateFailoverReport();
            (0, globals_1.expect)(report.recommendations.some(rec => rec.includes('Average RTO') && rec.includes('exceeds target'))).toBe(true);
            (0, globals_1.expect)(report.recommendations.some(rec => rec.includes('Average RPO') && rec.includes('exceeds target'))).toBe(true);
        }));
        (0, globals_1.it)('should handle mixed success/failure scenarios', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Successful failover
            mockOrchestrator.executeFailover.mockResolvedValueOnce({
                success: true,
                rtoAchieved: 10,
                rpoAchieved: 0.5,
                steps: [],
            });
            // Failed failover
            mockOrchestrator.executeFailover.mockResolvedValueOnce({
                success: false,
                rtoAchieved: 0,
                rpoAchieved: 0,
                steps: [],
            });
            yield failoverManager.executeManualFailover('Successful failover');
            yield failoverManager.executeManualFailover('Failed failover');
            const report = failoverManager.generateFailoverReport();
            (0, globals_1.expect)(report.summary.totalFailovers).toBe(2);
            (0, globals_1.expect)(report.summary.successfulFailovers).toBe(1);
            (0, globals_1.expect)(report.recommendations.some(rec => rec.includes('failover(s) failed'))).toBe(true);
        }));
    });
    (0, globals_1.describe)('notification system', () => {
        (0, globals_1.it)('should handle notification failures gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockResult = {
                success: true,
                rtoAchieved: 10,
                rpoAchieved: 0.5,
                steps: [],
            };
            mockOrchestrator.executeFailover.mockResolvedValue(mockResult);
            // Mock failed webhook notification
            global.fetch = globals_1.jest.fn().mockRejectedValue(new Error('Network error'));
            const policyWithWebhook = Object.assign(Object.assign({}, mockPolicy), { notificationEndpoints: ['https://webhook.example.com/alerts'] });
            const manager = new failover_manager_1.FailoverManager(mockConfig, policyWithWebhook, mockOrchestrator, mockHealthChecker);
            // Should not throw despite notification failure
            yield (0, globals_1.expect)(manager.executeManualFailover('Test failover')).resolves.toBeDefined();
        }));
        (0, globals_1.it)('should support multiple notification endpoints', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockResult = {
                success: true,
                rtoAchieved: 10,
                rpoAchieved: 0.5,
                steps: [],
            };
            mockOrchestrator.executeFailover.mockResolvedValue(mockResult);
            global.fetch = globals_1.jest.fn().mockResolvedValue({ ok: true });
            const policyWithMultipleEndpoints = Object.assign(Object.assign({}, mockPolicy), { notificationEndpoints: [
                    'https://webhook1.example.com/alerts',
                    'https://webhook2.example.com/alerts',
                    'admin@example.com',
                ] });
            const manager = new failover_manager_1.FailoverManager(mockConfig, policyWithMultipleEndpoints, mockOrchestrator, mockHealthChecker);
            yield manager.executeManualFailover('Test failover');
            // Should call webhooks but not email (email would be logged)
            (0, globals_1.expect)(global.fetch).toHaveBeenCalledTimes(4); // 2 webhooks × 2 notifications (start + success)
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
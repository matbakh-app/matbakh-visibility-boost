{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/multi-region/__tests__/failover-manager.test.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/multi-region/__tests__/failover-manager.test.ts"],"sourcesContent":["import { beforeEach, describe, expect, it, jest } from '@jest/globals';\nimport { FailoverManager, FailoverPolicy } from '../failover-manager';\nimport { HealthChecker } from '../health-checker';\nimport { MultiRegionConfig, MultiRegionOrchestrator } from '../multi-region-orchestrator';\n\nconst mockConfig: MultiRegionConfig = {\n    primaryRegion: 'eu-central-1',\n    secondaryRegion: 'eu-west-1',\n    domainName: 'test.matbakh.app',\n    hostedZoneId: 'Z123456789',\n    distributionId: 'E123456789',\n    globalClusterIdentifier: 'test-global-cluster',\n    primaryClusterIdentifier: 'test-primary-cluster',\n    secondaryClusterIdentifier: 'test-secondary-cluster',\n    primaryHealthCheckId: 'hc-primary-123',\n    secondaryHealthCheckId: 'hc-secondary-123',\n};\n\nconst mockPolicy: FailoverPolicy = {\n    automaticFailover: false,\n    healthCheckFailureThreshold: 2,\n    healthCheckInterval: 30,\n    rtoTarget: 15,\n    rpoTarget: 1,\n    notificationEndpoints: ['test@example.com'],\n};\n\ndescribe('FailoverManager', () => {\n    let failoverManager: FailoverManager;\n    let mockOrchestrator: jest.Mocked<MultiRegionOrchestrator>;\n    let mockHealthChecker: jest.Mocked<HealthChecker>;\n\n    beforeEach(() => {\n        jest.clearAllMocks();\n\n        // Create mock orchestrator\n        mockOrchestrator = {\n            executeFailover: jest.fn(),\n            executeFailback: jest.fn(),\n            testDisasterRecovery: jest.fn(),\n        } as any;\n\n        // Create mock health checker\n        mockHealthChecker = {\n            checkAllServices: jest.fn(),\n            getHealthSummary: jest.fn(),\n        } as any;\n\n        // Create failover manager with mocked dependencies\n        failoverManager = new FailoverManager(\n            mockConfig,\n            mockPolicy,\n            mockOrchestrator,\n            mockHealthChecker\n        );\n    });\n\n    describe('manual failover', () => {\n        it('should execute manual failover successfully', async () => {\n            const mockResult = {\n                success: true,\n                rtoAchieved: 10,\n                rpoAchieved: 0.5,\n                steps: [\n                    { step: 'Test step', status: 'completed' as const, startTime: new Date(), endTime: new Date() }\n                ],\n            };\n\n            mockOrchestrator.executeFailover.mockResolvedValue(mockResult);\n\n            const result = await failoverManager.executeManualFailover('Test reason');\n\n            expect(result.success).toBe(true);\n            expect(result.rtoAchieved).toBe(10);\n            expect(result.rpoAchieved).toBe(0.5);\n            expect(mockOrchestrator.executeFailover).toHaveBeenCalledWith('Test reason');\n        });\n\n        it('should prevent concurrent failovers', async () => {\n            const mockResult = {\n                success: true,\n                rtoAchieved: 10,\n                rpoAchieved: 0.5,\n                steps: [],\n            };\n\n            // Mock a slow failover\n            mockOrchestrator.executeFailover.mockImplementation(() =>\n                new Promise(resolve => setTimeout(() => resolve(mockResult), 100))\n            );\n\n            // Start first failover\n            const firstFailover = failoverManager.executeManualFailover('First failover');\n\n            // Try to start second failover immediately\n            await expect(failoverManager.executeManualFailover('Second failover'))\n                .rejects.toThrow('Failover already in progress');\n\n            // Complete first failover\n            await firstFailover;\n        });\n\n        it('should track failover history', async () => {\n            const mockResult = {\n                success: true,\n                rtoAchieved: 12,\n                rpoAchieved: 0.8,\n                steps: [],\n            };\n\n            mockOrchestrator.executeFailover.mockResolvedValue(mockResult);\n\n            await failoverManager.executeManualFailover('Test failover');\n\n            const history = failoverManager.getFailoverHistory();\n            expect(history).toHaveLength(1);\n            expect(history[0].type).toBe('failover');\n            expect(history[0].trigger).toBe('manual');\n            expect(history[0].reason).toBe('Test failover');\n            expect(history[0].rtoAchieved).toBe(12);\n            expect(history[0].rpoAchieved).toBe(0.8);\n        });\n\n        it('should send notifications on failover events', async () => {\n            const mockResult = {\n                success: true,\n                rtoAchieved: 10,\n                rpoAchieved: 0.5,\n                steps: [],\n            };\n\n            mockOrchestrator.executeFailover.mockResolvedValue(mockResult);\n\n            // Mock fetch for webhook notifications\n            global.fetch = jest.fn().mockResolvedValue({ ok: true });\n\n            const policyWithWebhook = {\n                ...mockPolicy,\n                notificationEndpoints: ['https://webhook.example.com/alerts'],\n            };\n\n            const manager = new FailoverManager(\n                mockConfig,\n                policyWithWebhook,\n                mockOrchestrator,\n                mockHealthChecker\n            );\n            await manager.executeManualFailover('Test failover');\n\n            expect(global.fetch).toHaveBeenCalledWith(\n                'https://webhook.example.com/alerts',\n                expect.objectContaining({\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: expect.stringContaining('Failover started'),\n                })\n            );\n        });\n\n        it('should handle failover failure and log metrics', async () => {\n            const mockResult = {\n                success: false,\n                rtoAchieved: 0,\n                rpoAchieved: 0,\n                steps: [\n                    {\n                        step: 'Failed step',\n                        status: 'failed' as const,\n                        startTime: new Date(),\n                        endTime: new Date(),\n                        error: 'Test error'\n                    }\n                ],\n            };\n\n            mockOrchestrator.executeFailover.mockResolvedValue(mockResult);\n\n            const result = await failoverManager.executeManualFailover('Test failover');\n\n            expect(result.success).toBe(false);\n            expect(result.steps.some(step => step.status === 'failed')).toBe(true);\n\n            const history = failoverManager.getFailoverHistory();\n            expect(history[0].result.success).toBe(false);\n        });\n    });\n\n    describe('failback', () => {\n        it('should execute failback successfully', async () => {\n            // First simulate a failover to set state\n            const failoverResult = {\n                success: true,\n                rtoAchieved: 10,\n                rpoAchieved: 0.5,\n                steps: [],\n            };\n            mockOrchestrator.executeFailover.mockResolvedValue(failoverResult);\n            await failoverManager.executeManualFailover('Setup failover');\n\n            // Now test failback\n            const failbackResult = {\n                success: true,\n                rtoAchieved: 8,\n                rpoAchieved: 0,\n                steps: [],\n            };\n            mockOrchestrator.executeFailback.mockResolvedValue(failbackResult);\n\n            const result = await failoverManager.executeFailback('Test failback');\n\n            expect(result.success).toBe(true);\n            expect(result.rtoAchieved).toBe(8);\n            expect(mockOrchestrator.executeFailback).toHaveBeenCalledWith('Test failback');\n        });\n\n        it('should prevent failback when already on primary', async () => {\n            await expect(failoverManager.executeFailback('Test failback'))\n                .rejects.toThrow('Already running on primary region');\n        });\n\n        it('should prevent failback during ongoing failover', async () => {\n            const mockResult = {\n                success: true,\n                rtoAchieved: 10,\n                rpoAchieved: 0.5,\n                steps: [],\n            };\n\n            // Mock a slow failover\n            mockOrchestrator.executeFailover.mockImplementation(() =>\n                new Promise(resolve => setTimeout(() => resolve(mockResult), 100))\n            );\n\n            // Start failover\n            const failoverPromise = failoverManager.executeManualFailover('Test failover');\n\n            // Try failback during failover\n            await expect(failoverManager.executeFailback('Test failback'))\n                .rejects.toThrow('Failover operation already in progress');\n\n            // Complete failover\n            await failoverPromise;\n        });\n    });\n\n    describe('disaster recovery testing', () => {\n        it('should perform DR test successfully', async () => {\n            const mockTestResult = {\n                success: true,\n                healthChecks: {\n                    secondaryRegionHealth: true,\n                    databaseReplication: true,\n                    dnsHealthChecks: true,\n                    s3Replication: true,\n                    secretsReplication: true,\n                },\n                estimatedRTO: 12,\n                estimatedRPO: 0.8,\n                recommendations: [],\n            };\n\n            mockOrchestrator.testDisasterRecovery.mockResolvedValue(mockTestResult);\n\n            const result = await failoverManager.testDisasterRecovery();\n\n            expect(result.success).toBe(true);\n            expect(result.estimatedRTO).toBe(12);\n            expect(result.estimatedRPO).toBe(0.8);\n            expect(mockOrchestrator.testDisasterRecovery).toHaveBeenCalled();\n        });\n\n        it('should track DR test in history', async () => {\n            const mockTestResult = {\n                success: true,\n                healthChecks: {},\n                estimatedRTO: 10,\n                estimatedRPO: 0.5,\n                recommendations: [],\n            };\n\n            mockOrchestrator.testDisasterRecovery.mockResolvedValue(mockTestResult);\n\n            await failoverManager.testDisasterRecovery();\n\n            const history = failoverManager.getFailoverHistory();\n            expect(history).toHaveLength(1);\n            expect(history[0].type).toBe('test');\n            expect(history[0].trigger).toBe('manual');\n            expect(history[0].reason).toBe('Disaster recovery test');\n        });\n\n        it('should handle DR test failures', async () => {\n            const mockTestResult = {\n                success: false,\n                healthChecks: {\n                    secondaryRegionHealth: false,\n                    databaseReplication: false,\n                },\n                estimatedRTO: 20,\n                estimatedRPO: 2,\n                recommendations: ['Fix secondary region', 'Improve replication'],\n            };\n\n            mockOrchestrator.testDisasterRecovery.mockResolvedValue(mockTestResult);\n\n            const result = await failoverManager.testDisasterRecovery();\n\n            expect(result.success).toBe(false);\n            expect(result.recommendations.length).toBeGreaterThan(0);\n        });\n    });\n\n    describe('system status', () => {\n        it('should return current system status', async () => {\n            const mockHealthStatus = {\n                overall: 'healthy' as const,\n                regions: {\n                    primary: { status: 'healthy' as const },\n                    secondary: { status: 'healthy' as const },\n                },\n                services: [],\n                lastUpdated: new Date(),\n            };\n\n            mockHealthChecker.checkAllServices.mockResolvedValue(mockHealthStatus);\n\n            const status = await failoverManager.getSystemStatus();\n\n            expect(status.currentRegion).toBe('primary');\n            expect(status.isFailoverInProgress).toBe(false);\n            expect(status.healthStatus).toEqual(mockHealthStatus);\n            expect(status.rtoCompliance).toBe(true);\n            expect(status.rpoCompliance).toBe(true);\n        });\n\n        it('should detect RTO/RPO compliance violations', async () => {\n            // First perform a failover that exceeds targets\n            const mockResult = {\n                success: true,\n                rtoAchieved: 20, // Exceeds 15 minute target\n                rpoAchieved: 2,  // Exceeds 1 minute target\n                steps: [],\n            };\n\n            mockOrchestrator.executeFailover.mockResolvedValue(mockResult);\n            mockHealthChecker.checkAllServices.mockResolvedValue({\n                overall: 'healthy' as const,\n                regions: {\n                    primary: { status: 'healthy' as const },\n                    secondary: { status: 'healthy' as const }\n                },\n                services: [],\n                lastUpdated: new Date(),\n            });\n\n            await failoverManager.executeManualFailover('Test failover');\n\n            const status = await failoverManager.getSystemStatus();\n\n            expect(status.rtoCompliance).toBe(false);\n            expect(status.rpoCompliance).toBe(false);\n        });\n\n        it('should handle health check errors gracefully', async () => {\n            mockHealthChecker.checkAllServices.mockRejectedValue(new Error('Health check failed'));\n\n            const status = await failoverManager.getSystemStatus();\n\n            expect(status.currentRegion).toBe('primary');\n            expect(status.isFailoverInProgress).toBe(false);\n            // Should have some default/error state for health status\n        });\n    });\n\n    describe('automatic failover', () => {\n        it('should trigger automatic failover on health check failures', async () => {\n            const automaticPolicy = {\n                ...mockPolicy,\n                automaticFailover: true,\n                healthCheckFailureThreshold: 2,\n                healthCheckInterval: 0.1, // 100ms for testing\n            };\n\n            // Mock health check failures\n            mockHealthChecker.checkAllServices.mockResolvedValue({\n                api: false,\n                database: false,\n                cache: true,\n                storage: true,\n                secrets: true,\n            } as any);\n\n            mockOrchestrator.executeFailover.mockResolvedValue({\n                success: true,\n                rtoAchieved: 10,\n                rpoAchieved: 0.5,\n                steps: [],\n            });\n\n            const manager = new FailoverManager(\n                mockConfig,\n                automaticPolicy,\n                mockOrchestrator,\n                mockHealthChecker\n            );\n\n            // Wait for automatic failover to trigger\n            await new Promise(resolve => setTimeout(resolve, 200));\n\n            const history = manager.getFailoverHistory();\n            expect(history.some(event => event.trigger === 'automatic')).toBe(true);\n        });\n\n        it('should not trigger automatic failover when disabled', async () => {\n            const manualPolicy = {\n                ...mockPolicy,\n                automaticFailover: false,\n            };\n\n            // Mock health check failures\n            mockHealthChecker.checkAllServices.mockResolvedValue({\n                api: false,\n                database: false,\n                cache: false,\n                storage: false,\n                secrets: false,\n            } as any);\n\n            const manager = new FailoverManager(\n                mockConfig,\n                manualPolicy,\n                mockOrchestrator,\n                mockHealthChecker\n            );\n\n            // Wait to ensure no automatic failover\n            await new Promise(resolve => setTimeout(resolve, 100));\n\n            const history = manager.getFailoverHistory();\n            expect(history.length).toBe(0);\n        });\n\n        it('should respect failure threshold for automatic failover', async () => {\n            const automaticPolicy = {\n                ...mockPolicy,\n                automaticFailover: true,\n                healthCheckFailureThreshold: 3, // Require 3 failures\n                healthCheckInterval: 0.1,\n            };\n\n            // Mock only 2 failures (below threshold)\n            mockHealthChecker.checkAllServices.mockResolvedValue({\n                api: false,\n                database: false,\n                cache: true,\n                storage: true,\n                secrets: true,\n            } as any);\n\n            const manager = new FailoverManager(\n                mockConfig,\n                automaticPolicy,\n                mockOrchestrator,\n                mockHealthChecker\n            );\n\n            // Wait to ensure no automatic failover\n            await new Promise(resolve => setTimeout(resolve, 200));\n\n            const history = manager.getFailoverHistory();\n            expect(history.length).toBe(0);\n        });\n    });\n\n    describe('policy updates', () => {\n        it('should update failover policy', () => {\n            const newPolicy = {\n                rtoTarget: 10,\n                rpoTarget: 0.5,\n            };\n\n            expect(() => failoverManager.updatePolicy(newPolicy)).not.toThrow();\n        });\n\n        it('should restart health monitoring when automatic failover is enabled', () => {\n            const newPolicy = {\n                automaticFailover: true,\n                healthCheckInterval: 30,\n            };\n\n            expect(() => failoverManager.updatePolicy(newPolicy)).not.toThrow();\n        });\n    });\n\n    describe('failover report generation', () => {\n        it('should generate comprehensive failover report', async () => {\n            // Perform some failovers to generate history\n            const mockResult = {\n                success: true,\n                rtoAchieved: 12,\n                rpoAchieved: 0.8,\n                steps: [],\n            };\n\n            mockOrchestrator.executeFailover.mockResolvedValue(mockResult);\n\n            await failoverManager.executeManualFailover('Test failover 1');\n            await failoverManager.executeManualFailover('Test failover 2');\n\n            const report = failoverManager.generateFailoverReport();\n\n            expect(report.summary.totalFailovers).toBe(2);\n            expect(report.summary.successfulFailovers).toBe(2);\n            expect(report.summary.averageRTO).toBe(12);\n            expect(report.summary.averageRPO).toBe(0.8);\n            expect(report.summary.rtoCompliance).toBe(100); // Both within 15 minute target\n            expect(report.summary.rpoCompliance).toBe(100); // Both within 1 minute target\n            expect(report.recentEvents).toHaveLength(2);\n            expect(Array.isArray(report.recommendations)).toBe(true);\n        });\n\n        it('should identify performance issues in report', async () => {\n            // Perform failover that exceeds targets\n            const mockResult = {\n                success: true,\n                rtoAchieved: 20, // Exceeds target\n                rpoAchieved: 2,  // Exceeds target\n                steps: [],\n            };\n\n            mockOrchestrator.executeFailover.mockResolvedValue(mockResult);\n\n            await failoverManager.executeManualFailover('Slow failover');\n\n            const report = failoverManager.generateFailoverReport();\n\n            expect(report.recommendations.some(rec =>\n                rec.includes('Average RTO') && rec.includes('exceeds target')\n            )).toBe(true);\n            expect(report.recommendations.some(rec =>\n                rec.includes('Average RPO') && rec.includes('exceeds target')\n            )).toBe(true);\n        });\n\n        it('should handle mixed success/failure scenarios', async () => {\n            // Successful failover\n            mockOrchestrator.executeFailover.mockResolvedValueOnce({\n                success: true,\n                rtoAchieved: 10,\n                rpoAchieved: 0.5,\n                steps: [],\n            });\n\n            // Failed failover\n            mockOrchestrator.executeFailover.mockResolvedValueOnce({\n                success: false,\n                rtoAchieved: 0,\n                rpoAchieved: 0,\n                steps: [],\n            });\n\n            await failoverManager.executeManualFailover('Successful failover');\n            await failoverManager.executeManualFailover('Failed failover');\n\n            const report = failoverManager.generateFailoverReport();\n\n            expect(report.summary.totalFailovers).toBe(2);\n            expect(report.summary.successfulFailovers).toBe(1);\n            expect(report.recommendations.some(rec =>\n                rec.includes('failover(s) failed')\n            )).toBe(true);\n        });\n    });\n\n    describe('notification system', () => {\n        it('should handle notification failures gracefully', async () => {\n            const mockResult = {\n                success: true,\n                rtoAchieved: 10,\n                rpoAchieved: 0.5,\n                steps: [],\n            };\n\n            mockOrchestrator.executeFailover.mockResolvedValue(mockResult);\n\n            // Mock failed webhook notification\n            global.fetch = jest.fn().mockRejectedValue(new Error('Network error'));\n\n            const policyWithWebhook = {\n                ...mockPolicy,\n                notificationEndpoints: ['https://webhook.example.com/alerts'],\n            };\n\n            const manager = new FailoverManager(\n                mockConfig,\n                policyWithWebhook,\n                mockOrchestrator,\n                mockHealthChecker\n            );\n\n            // Should not throw despite notification failure\n            await expect(manager.executeManualFailover('Test failover')).resolves.toBeDefined();\n        });\n\n        it('should support multiple notification endpoints', async () => {\n            const mockResult = {\n                success: true,\n                rtoAchieved: 10,\n                rpoAchieved: 0.5,\n                steps: [],\n            };\n\n            mockOrchestrator.executeFailover.mockResolvedValue(mockResult);\n\n            global.fetch = jest.fn().mockResolvedValue({ ok: true });\n\n            const policyWithMultipleEndpoints = {\n                ...mockPolicy,\n                notificationEndpoints: [\n                    'https://webhook1.example.com/alerts',\n                    'https://webhook2.example.com/alerts',\n                    'admin@example.com',\n                ],\n            };\n\n            const manager = new FailoverManager(\n                mockConfig,\n                policyWithMultipleEndpoints,\n                mockOrchestrator,\n                mockHealthChecker\n            );\n\n            await manager.executeManualFailover('Test failover');\n\n            // Should call webhooks but not email (email would be logged)\n            expect(global.fetch).toHaveBeenCalledTimes(4); // 2 webhooks × 2 notifications (start + success)\n        });\n    });\n});"],"version":3}
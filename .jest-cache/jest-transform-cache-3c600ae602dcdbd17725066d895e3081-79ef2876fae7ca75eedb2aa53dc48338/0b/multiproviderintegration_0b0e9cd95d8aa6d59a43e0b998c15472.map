{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/multi-provider-integration.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/multi-provider-integration.ts"],"sourcesContent":["/**\n * PR-3: Multi-Provider Integration\n *\n * Implements:\n * - Unified provider interface for Bedrock, Google, Meta\n * - Intelligent model routing and selection\n * - Provider-specific optimizations\n * - Fallback and circuit breaker patterns\n */\n\nimport { randomUUID } from \"crypto\";\nimport { BedrockAdapter } from \"./adapters/bedrock-adapter\";\nimport { GoogleAdapter } from \"./adapters/google-adapter\";\nimport { MetaAdapter } from \"./adapters/meta-adapter\";\nimport { GuardrailsService } from \"./safety/guardrails-service\";\nimport { Provider } from \"./types\";\n\ninterface ProviderConfig {\n  region?: string;\n  accessKeyId?: string;\n  secretAccessKey?: string;\n  apiKey?: string;\n  endpoint?: string;\n}\n\ninterface ModelCapabilities {\n  maxTokens: number;\n  supportsStreaming: boolean;\n  supportsToolCalling: boolean;\n  supportsVision: boolean;\n  supportsJSON: boolean;\n  languages: string[];\n  domains: string[];\n}\n\ninterface AiRequest {\n  prompt: string;\n  context: any;\n  provider?: Provider;\n  capabilities?: Partial<ModelCapabilities>;\n  maxLatency?: number;\n  maxCost?: number;\n  domain?: string;\n}\n\ninterface AiResponse {\n  content: string;\n  provider: Provider;\n  requestId: string;\n  processingTime: number;\n  success: boolean;\n  routing?: any;\n}\n\nexport interface ProviderMetrics {\n  latency: number;\n  successRate: number;\n  costPerToken: number;\n  availability: number;\n  lastUpdated: Date;\n}\n\nexport interface RoutingDecision {\n  provider: Provider;\n  model: string;\n  confidence: number;\n  reasoning: string;\n  fallbacks: Array<{ provider: Provider; model: string }>;\n}\n\nexport interface ProviderHealth {\n  provider: Provider;\n  status: \"healthy\" | \"degraded\" | \"unhealthy\";\n  latency: number;\n  errorRate: number;\n  lastCheck: Date;\n}\n\n/**\n * Circuit Breaker for Provider Health Management\n */\nclass CircuitBreaker {\n  private failures: number = 0;\n  private lastFailureTime: Date | null = null;\n  private state: \"closed\" | \"open\" | \"half-open\" = \"closed\";\n\n  constructor(\n    private readonly failureThreshold: number = 5,\n    private readonly recoveryTimeout: number = 60000, // 1 minute\n    private readonly successThreshold: number = 3\n  ) {}\n\n  async execute<T>(operation: () => Promise<T>): Promise<T> {\n    if (this.state === \"open\") {\n      if (this.shouldAttemptReset()) {\n        this.state = \"half-open\";\n      } else {\n        throw new Error(\"Circuit breaker is open\");\n      }\n    }\n\n    try {\n      const result = await operation();\n      this.onSuccess();\n      return result;\n    } catch (error) {\n      this.onFailure();\n      throw error;\n    }\n  }\n\n  private shouldAttemptReset(): boolean {\n    return (\n      this.lastFailureTime !== null &&\n      Date.now() - this.lastFailureTime.getTime() > this.recoveryTimeout\n    );\n  }\n\n  private onSuccess(): void {\n    this.failures = 0;\n    this.state = \"closed\";\n  }\n\n  private onFailure(): void {\n    this.failures++;\n    this.lastFailureTime = new Date();\n\n    if (this.failures >= this.failureThreshold) {\n      this.state = \"open\";\n    }\n  }\n\n  getState(): string {\n    return this.state;\n  }\n\n  getFailures(): number {\n    return this.failures;\n  }\n}\n\n/**\n * Multi-Provider Integration Service\n */\nexport class MultiProviderIntegration {\n  private adapters: Map<Provider, any> = new Map();\n  private circuitBreakers: Map<Provider, CircuitBreaker> = new Map();\n  private providerMetrics: Map<Provider, ProviderMetrics> = new Map();\n  private guardrails: GuardrailsService;\n\n  constructor(\n    private readonly configs: Map<Provider, ProviderConfig>,\n    private readonly region: string = \"eu-central-1\"\n  ) {\n    this.guardrails = new GuardrailsService(region);\n    this.initializeAdapters();\n    this.initializeCircuitBreakers();\n    this.startHealthMonitoring();\n  }\n\n  private initializeAdapters(): void {\n    for (const [provider, config] of this.configs) {\n      switch (provider) {\n        case \"bedrock\":\n          this.adapters.set(provider, new BedrockAdapter(config));\n          break;\n        case \"google\":\n          this.adapters.set(provider, new GoogleAdapter(config));\n          break;\n        case \"meta\":\n          this.adapters.set(provider, new MetaAdapter(config));\n          break;\n        default:\n          throw new Error(`Unsupported provider: ${provider}`);\n      }\n    }\n  }\n\n  private initializeCircuitBreakers(): void {\n    for (const provider of this.configs.keys()) {\n      this.circuitBreakers.set(provider, new CircuitBreaker());\n    }\n  }\n\n  private startHealthMonitoring(): void {\n    // Health check every 30 seconds\n    setInterval(() => {\n      this.performHealthChecks();\n    }, 30000);\n  }\n\n  /**\n   * Route request to optimal provider based on capabilities and health\n   */\n  async routeRequest(request: AiRequest): Promise<AiResponse> {\n    const requestId = randomUUID();\n    const startTime = Date.now();\n\n    try {\n      // Input safety check\n      const inputSafety = await this.guardrails.checkInput(\n        request.prompt,\n        request.provider || \"bedrock\",\n        request.domain,\n        requestId\n      );\n\n      if (!inputSafety.allowed) {\n        throw new Error(\n          `Input blocked by guardrails: ${inputSafety.violations\n            .map((v) => v.details)\n            .join(\", \")}`\n        );\n      }\n\n      // Use modified prompt if PII was redacted\n      const safePrompt = inputSafety.modifiedContent || request.prompt;\n      const safeRequest = { ...request, prompt: safePrompt };\n\n      // Route to best provider\n      const routing = await this.selectProvider(safeRequest);\n      const response = await this.executeWithFallback(safeRequest, routing);\n\n      // Output safety check\n      const outputSafety = await this.guardrails.checkOutput(\n        response.content,\n        routing.provider,\n        request.domain,\n        requestId\n      );\n\n      if (!outputSafety.allowed) {\n        throw new Error(\n          `Output blocked by guardrails: ${outputSafety.violations\n            .map((v) => v.details)\n            .join(\", \")}`\n        );\n      }\n\n      // Use modified content if safety filters applied\n      const safeContent = outputSafety.modifiedContent || response.content;\n\n      // Update metrics\n      this.updateProviderMetrics(\n        routing.provider,\n        Date.now() - startTime,\n        true\n      );\n\n      return {\n        ...response,\n        content: safeContent,\n        provider: routing.provider,\n        requestId,\n        processingTime: Date.now() - startTime,\n        routing: {\n          decision: routing,\n          inputSafety,\n          outputSafety,\n        },\n      };\n    } catch (error) {\n      console.error(\"Multi-provider routing failed:\", error);\n      throw error;\n    } finally {\n      // Clean up PII tokens\n      this.guardrails.clearPIITokens(requestId);\n    }\n  }\n\n  /**\n   * Select optimal provider based on request requirements and provider health\n   */\n  private async selectProvider(request: AiRequest): Promise<RoutingDecision> {\n    const availableProviders = await this.getHealthyProviders();\n\n    if (availableProviders.length === 0) {\n      throw new Error(\"No healthy providers available\");\n    }\n\n    // If specific provider requested and healthy, use it\n    if (\n      request.provider &&\n      availableProviders.some((p) => p.provider === request.provider)\n    ) {\n      return {\n        provider: request.provider,\n        model: this.getDefaultModel(request.provider),\n        confidence: 1.0,\n        reasoning: \"User-specified provider\",\n        fallbacks: this.getFallbacks(request.provider, availableProviders),\n      };\n    }\n\n    // Score providers based on request requirements\n    const scores = availableProviders.map((health) => {\n      const provider = health.provider;\n      const metrics = this.providerMetrics.get(provider);\n      const capabilities = this.getProviderCapabilities(provider);\n\n      let score = 0;\n\n      // Latency preference (lower is better)\n      if (request.maxLatency) {\n        const latencyScore = Math.max(\n          0,\n          1 - health.latency / request.maxLatency\n        );\n        score += latencyScore * 0.3;\n      }\n\n      // Cost preference (lower is better)\n      if (request.maxCost && metrics) {\n        const costScore = Math.max(\n          0,\n          1 - metrics.costPerToken / request.maxCost\n        );\n        score += costScore * 0.2;\n      }\n\n      // Capability matching\n      if (request.capabilities) {\n        const capabilityScore = this.calculateCapabilityMatch(\n          request.capabilities,\n          capabilities\n        );\n        score += capabilityScore * 0.3;\n      }\n\n      // Health and reliability\n      const healthScore =\n        (1 - health.errorRate) * health.status === \"healthy\" ? 1 : 0.5;\n      score += healthScore * 0.2;\n\n      return {\n        provider,\n        score,\n        health,\n        metrics,\n      };\n    });\n\n    // Sort by score (highest first)\n    scores.sort((a, b) => b.score - a.score);\n    const best = scores[0];\n\n    return {\n      provider: best.provider,\n      model: this.getDefaultModel(best.provider),\n      confidence: best.score,\n      reasoning: `Best match based on latency, cost, capabilities, and health (score: ${best.score.toFixed(\n        2\n      )})`,\n      fallbacks: scores.slice(1, 3).map((s) => ({\n        provider: s.provider,\n        model: this.getDefaultModel(s.provider),\n      })),\n    };\n  }\n\n  /**\n   * Execute request with fallback support\n   */\n  private async executeWithFallback(\n    request: AiRequest,\n    routing: RoutingDecision\n  ): Promise<AiResponse> {\n    const providers = [\n      { provider: routing.provider, model: routing.model },\n      ...routing.fallbacks,\n    ];\n\n    let lastError: Error | null = null;\n\n    for (const { provider, model } of providers) {\n      try {\n        const circuitBreaker = this.circuitBreakers.get(provider);\n        if (!circuitBreaker) {\n          throw new Error(`No circuit breaker for provider: ${provider}`);\n        }\n\n        const adapter = this.adapters.get(provider);\n        if (!adapter) {\n          throw new Error(`No adapter for provider: ${provider}`);\n        }\n\n        const response = await circuitBreaker.execute(async () => {\n          return adapter.generateResponse({\n            ...request,\n            model,\n          });\n        });\n\n        return response;\n      } catch (error) {\n        console.warn(`Provider ${provider} failed:`, error);\n        lastError = error as Error;\n\n        // Update metrics for failed attempt\n        this.updateProviderMetrics(provider, 0, false);\n        continue;\n      }\n    }\n\n    throw new Error(`All providers failed. Last error: ${lastError?.message}`);\n  }\n\n  /**\n   * Get healthy providers based on circuit breaker state and recent metrics\n   */\n  private async getHealthyProviders(): Promise<ProviderHealth[]> {\n    const healthChecks: ProviderHealth[] = [];\n\n    for (const [provider, circuitBreaker] of this.circuitBreakers) {\n      const metrics = this.providerMetrics.get(provider);\n      const adapter = this.adapters.get(provider);\n\n      if (!adapter) continue;\n\n      let status: ProviderHealth[\"status\"] = \"healthy\";\n      let latency = 0;\n      let errorRate = 0;\n\n      // Check circuit breaker state\n      if (circuitBreaker.getState() === \"open\") {\n        status = \"unhealthy\";\n      } else if (circuitBreaker.getState() === \"half-open\") {\n        status = \"degraded\";\n      }\n\n      // Use metrics if available\n      if (metrics) {\n        latency = metrics.latency;\n        errorRate = 1 - metrics.successRate;\n\n        // Determine status based on metrics\n        if (errorRate > 0.1 || latency > 5000) {\n          status = \"unhealthy\";\n        } else if (errorRate > 0.05 || latency > 2000) {\n          status = \"degraded\";\n        }\n      }\n\n      healthChecks.push({\n        provider,\n        status,\n        latency,\n        errorRate,\n        lastCheck: new Date(),\n      });\n    }\n\n    // Return only healthy and degraded providers\n    return healthChecks.filter((h) => h.status !== \"unhealthy\");\n  }\n\n  /**\n   * Perform health checks on all providers\n   */\n  private async performHealthChecks(): Promise<void> {\n    for (const [provider, adapter] of this.adapters) {\n      try {\n        const startTime = Date.now();\n\n        // Simple health check request\n        await adapter.healthCheck();\n\n        const latency = Date.now() - startTime;\n        this.updateProviderMetrics(provider, latency, true);\n      } catch (error) {\n        console.warn(`Health check failed for ${provider}:`, error);\n        this.updateProviderMetrics(provider, 0, false);\n      }\n    }\n  }\n\n  /**\n   * Update provider metrics\n   */\n  private updateProviderMetrics(\n    provider: Provider,\n    latency: number,\n    success: boolean\n  ): void {\n    const existing = this.providerMetrics.get(provider);\n\n    if (!existing) {\n      this.providerMetrics.set(provider, {\n        latency,\n        successRate: success ? 1 : 0,\n        costPerToken: this.getProviderCostPerToken(provider),\n        availability: success ? 1 : 0,\n        lastUpdated: new Date(),\n      });\n      return;\n    }\n\n    // Exponential moving average for metrics\n    const alpha = 0.1; // Smoothing factor\n\n    this.providerMetrics.set(provider, {\n      latency: existing.latency * (1 - alpha) + latency * alpha,\n      successRate:\n        existing.successRate * (1 - alpha) + (success ? 1 : 0) * alpha,\n      costPerToken: existing.costPerToken, // Updated separately\n      availability:\n        existing.availability * (1 - alpha) + (success ? 1 : 0) * alpha,\n      lastUpdated: new Date(),\n    });\n  }\n\n  /**\n   * Get provider capabilities\n   */\n  private getProviderCapabilities(provider: Provider): ModelCapabilities {\n    // This would typically come from a configuration or discovery service\n    const capabilities: Record<Provider, ModelCapabilities> = {\n      bedrock: {\n        maxTokens: 200000,\n        supportsStreaming: true,\n        supportsToolCalling: true,\n        supportsVision: true,\n        supportsJSON: true,\n        languages: [\"en\", \"de\", \"fr\", \"es\", \"it\"],\n        domains: [\"general\", \"legal\", \"medical\", \"culinary\"],\n      },\n      google: {\n        maxTokens: 1000000,\n        supportsStreaming: true,\n        supportsToolCalling: true,\n        supportsVision: true,\n        supportsJSON: true,\n        languages: [\"en\", \"de\", \"fr\", \"es\", \"it\", \"ja\", \"ko\"],\n        domains: [\"general\", \"culinary\"],\n      },\n      meta: {\n        maxTokens: 128000,\n        supportsStreaming: true,\n        supportsToolCalling: true,\n        supportsVision: false,\n        supportsJSON: true,\n        languages: [\"en\", \"de\", \"fr\", \"es\"],\n        domains: [\"general\", \"culinary\"],\n      },\n    };\n\n    return capabilities[provider];\n  }\n\n  /**\n   * Calculate capability match score\n   */\n  private calculateCapabilityMatch(\n    required: Partial<ModelCapabilities>,\n    available: ModelCapabilities\n  ): number {\n    let score = 0;\n    let checks = 0;\n\n    if (required.maxTokens !== undefined) {\n      score += available.maxTokens >= required.maxTokens ? 1 : 0;\n      checks++;\n    }\n\n    if (required.supportsStreaming !== undefined) {\n      score +=\n        available.supportsStreaming === required.supportsStreaming ? 1 : 0;\n      checks++;\n    }\n\n    if (required.supportsToolCalling !== undefined) {\n      score +=\n        available.supportsToolCalling === required.supportsToolCalling ? 1 : 0;\n      checks++;\n    }\n\n    if (required.supportsVision !== undefined) {\n      score += available.supportsVision === required.supportsVision ? 1 : 0;\n      checks++;\n    }\n\n    if (required.supportsJSON !== undefined) {\n      score += available.supportsJSON === required.supportsJSON ? 1 : 0;\n      checks++;\n    }\n\n    if (required.languages && required.languages.length > 0) {\n      const supportedLanguages = required.languages.filter((lang) =>\n        available.languages.includes(lang)\n      );\n      score += supportedLanguages.length / required.languages.length;\n      checks++;\n    }\n\n    if (required.domains && required.domains.length > 0) {\n      const supportedDomains = required.domains.filter((domain) =>\n        available.domains.includes(domain)\n      );\n      score += supportedDomains.length / required.domains.length;\n      checks++;\n    }\n\n    return checks > 0 ? score / checks : 0;\n  }\n\n  /**\n   * Get default model for provider\n   */\n  private getDefaultModel(provider: Provider): string {\n    const defaultModels: Record<Provider, string> = {\n      bedrock: \"anthropic.claude-3-5-sonnet-20241022-v2:0\",\n      google: \"gemini-1.5-pro\",\n      meta: \"meta.llama3-2-90b-instruct-v1:0\",\n    };\n\n    return defaultModels[provider];\n  }\n\n  /**\n   * Get fallback providers\n   */\n  private getFallbacks(\n    primary: Provider,\n    available: ProviderHealth[]\n  ): Array<{ provider: Provider; model: string }> {\n    return available\n      .filter((h) => h.provider !== primary)\n      .slice(0, 2)\n      .map((h) => ({\n        provider: h.provider,\n        model: this.getDefaultModel(h.provider),\n      }));\n  }\n\n  /**\n   * Get provider cost per token (placeholder - would come from pricing API)\n   */\n  private getProviderCostPerToken(provider: Provider): number {\n    const costs: Record<Provider, number> = {\n      bedrock: 0.003, // $3 per 1K tokens\n      google: 0.0025, // $2.50 per 1K tokens\n      meta: 0.002, // $2 per 1K tokens\n    };\n\n    return costs[provider];\n  }\n\n  /**\n   * Get current provider metrics\n   */\n  getProviderMetrics(): Map<Provider, ProviderMetrics> {\n    return new Map(this.providerMetrics);\n  }\n\n  /**\n   * Get circuit breaker states\n   */\n  getCircuitBreakerStates(): Map<Provider, string> {\n    const states = new Map<Provider, string>();\n    for (const [provider, breaker] of this.circuitBreakers) {\n      states.set(provider, breaker.getState());\n    }\n    return states;\n  }\n\n  /**\n   * Force circuit breaker reset for a provider\n   */\n  resetCircuitBreaker(provider: Provider): void {\n    const breaker = this.circuitBreakers.get(provider);\n    if (breaker) {\n      // Reset by creating new circuit breaker\n      this.circuitBreakers.set(provider, new CircuitBreaker());\n    }\n  }\n\n  /**\n   * Update provider configuration\n   */\n  updateProviderConfig(provider: Provider, config: ProviderConfig): void {\n    this.configs.set(provider, config);\n    // Reinitialize adapter with new config\n    this.initializeAdapters();\n  }\n}\n"],"version":3}
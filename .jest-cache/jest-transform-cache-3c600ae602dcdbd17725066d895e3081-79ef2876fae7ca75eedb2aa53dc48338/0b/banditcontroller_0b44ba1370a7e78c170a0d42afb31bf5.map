{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/bandit-controller.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/bandit-controller.ts"],"sourcesContent":["import { EvidentlyClient, PutProjectEventsCommand } from '@aws-sdk/client-evidently';\nimport { randomUUID } from 'crypto';\n\nexport interface ArmStats {\n    wins: number;\n    trials: number;\n    costEuro: number;\n    totalLatencyMs: number;\n}\n\nexport type Arm = 'bedrock' | 'google' | 'meta';\n\nexport interface BanditContext {\n    domain?: string;\n    budgetTier?: string;\n    requireTools?: boolean;\n    userId?: string;\n}\n\nexport class ThompsonBandit {\n    private arms: Record<Arm, ArmStats> = {\n        bedrock: { wins: 0, trials: 0, costEuro: 0, totalLatencyMs: 0 },\n        google: { wins: 0, trials: 0, costEuro: 0, totalLatencyMs: 0 },\n        meta: { wins: 0, trials: 0, costEuro: 0, totalLatencyMs: 0 },\n    };\n\n    // Contextual bandit - different arms for different contexts\n    private contextualArms: Map<string, Record<Arm, ArmStats>> = new Map();\n\n    choose(context?: BanditContext): Arm {\n        const contextKey = this.getContextKey(context);\n        const arms = this.getArmsForContext(contextKey);\n\n        const sampleBeta = (alpha: number, beta: number) => {\n            // Simple Beta(α, β) sampler via mean approximation for brevity\n            // In production, use proper Beta distribution sampling\n            if (alpha + beta === 0) return Math.random();\n            return alpha / (alpha + beta) + (Math.random() - 0.5) * 0.1;\n        };\n\n        let best: Arm = 'bedrock';\n        let bestScore = -1;\n\n        (Object.keys(arms) as Arm[]).forEach(arm => {\n            const stats = arms[arm];\n\n            // Thompson Sampling with Beta distribution\n            const alpha = 1 + stats.wins;\n            const beta = 1 + (stats.trials - stats.wins);\n            let score = sampleBeta(alpha, beta);\n\n            // Adjust score based on context preferences\n            score = this.adjustScoreForContext(score, arm, context);\n\n            if (score > bestScore) {\n                bestScore = score;\n                best = arm;\n            }\n        });\n\n        return best;\n    }\n\n    record(arm: Arm, win: boolean, costEuro: number, latencyMs: number, context?: BanditContext) {\n        const contextKey = this.getContextKey(context);\n        const arms = this.getArmsForContext(contextKey);\n\n        const stats = arms[arm];\n        stats.trials += 1;\n        stats.wins += win ? 1 : 0;\n        stats.costEuro += costEuro;\n        stats.totalLatencyMs += latencyMs;\n\n        // Also update global stats\n        const globalStats = this.arms[arm];\n        globalStats.trials += 1;\n        globalStats.wins += win ? 1 : 0;\n        globalStats.costEuro += costEuro;\n        globalStats.totalLatencyMs += latencyMs;\n    }\n\n    getStats(context?: BanditContext): Record<Arm, ArmStats & { winRate: number; avgLatency: number; avgCost: number }> {\n        const contextKey = this.getContextKey(context);\n        const arms = this.getArmsForContext(contextKey);\n\n        const result = {} as any;\n        (Object.keys(arms) as Arm[]).forEach(arm => {\n            const stats = arms[arm];\n            result[arm] = {\n                ...stats,\n                winRate: stats.trials > 0 ? stats.wins / stats.trials : 0,\n                avgLatency: stats.trials > 0 ? stats.totalLatencyMs / stats.trials : 0,\n                avgCost: stats.trials > 0 ? stats.costEuro / stats.trials : 0,\n            };\n        });\n\n        return result;\n    }\n\n    private getContextKey(context?: BanditContext): string {\n        if (!context) return 'global';\n\n        const parts = [\n            context.domain || 'general',\n            context.budgetTier || 'standard',\n            context.requireTools ? 'tools' : 'no-tools'\n        ];\n\n        return parts.join('|');\n    }\n\n    private getArmsForContext(contextKey: string): Record<Arm, ArmStats> {\n        if (!this.contextualArms.has(contextKey)) {\n            this.contextualArms.set(contextKey, {\n                bedrock: { wins: 0, trials: 0, costEuro: 0, totalLatencyMs: 0 },\n                google: { wins: 0, trials: 0, costEuro: 0, totalLatencyMs: 0 },\n                meta: { wins: 0, trials: 0, costEuro: 0, totalLatencyMs: 0 },\n            });\n        }\n        return this.contextualArms.get(contextKey)!;\n    }\n\n    private adjustScoreForContext(score: number, arm: Arm, context?: BanditContext): number {\n        if (!context) return score;\n\n        // Domain-specific adjustments\n        if (context.domain === 'legal' && arm === 'bedrock') {\n            score += 0.1; // Prefer Claude for legal\n        }\n        if (context.domain === 'culinary' && arm === 'google') {\n            score += 0.05; // Slight preference for Gemini in culinary\n        }\n        if (context.domain === 'medical' && arm !== 'bedrock') {\n            score -= 0.2; // Strong preference for Claude in medical\n        }\n\n        // Budget tier adjustments\n        if (context.budgetTier === 'low' && arm === 'meta') {\n            score += 0.1; // Prefer cheaper models for low budget\n        }\n        if (context.budgetTier === 'premium' && arm === 'bedrock') {\n            score += 0.05; // Slight preference for premium models\n        }\n\n        // Tool requirements\n        if (context.requireTools && arm === 'meta') {\n            score -= 0.3; // Meta doesn't support tools well\n        }\n\n        return Math.max(0, Math.min(1, score));\n    }\n\n    // Reset stats for a specific context (useful for A/B test resets)\n    resetContext(context?: BanditContext) {\n        const contextKey = this.getContextKey(context);\n        this.contextualArms.delete(contextKey);\n    }\n\n    // Get the best performing arm for a context\n    getBestArm(context?: BanditContext): { arm: Arm; confidence: number } {\n        const stats = this.getStats(context);\n        let bestArm: Arm = 'bedrock';\n        let bestWinRate = -1;\n\n        (Object.keys(stats) as Arm[]).forEach(arm => {\n            const armStats = stats[arm];\n            if (armStats.trials > 10 && armStats.winRate > bestWinRate) { // Minimum trials for confidence\n                bestWinRate = armStats.winRate;\n                bestArm = arm;\n            }\n        });\n\n        const confidence = stats[bestArm].trials > 50 ?\n            Math.min(0.95, stats[bestArm].winRate + 0.1) :\n            Math.max(0.5, stats[bestArm].winRate);\n\n        return { arm: bestArm, confidence };\n    }\n}\n\nexport interface BanditLoggerOpts {\n    project: string; // Evidently project name\n    client?: EvidentlyClient;\n}\n\nexport class BanditLogger {\n    private client: EvidentlyClient;\n\n    constructor(private readonly opts: BanditLoggerOpts) {\n        this.client = opts.client ?? new EvidentlyClient({});\n    }\n\n    async logOutcome(params: {\n        userId?: string;\n        arm: Arm;\n        success: boolean;\n        latencyMs: number;\n        costEuro: number;\n        domain?: string;\n        budgetTier?: string;\n        requireTools?: boolean;\n        requestId?: string;\n    }) {\n        const {\n            userId,\n            arm,\n            success,\n            latencyMs,\n            costEuro,\n            domain,\n            budgetTier,\n            requireTools,\n            requestId\n        } = params;\n\n        const entityId = userId ?? randomUUID();\n\n        try {\n            await this.client.send(new PutProjectEventsCommand({\n                project: this.opts.project,\n                events: [{\n                    timestamp: new Date(),\n                    type: 'aws.evidently.custom',\n                    data: {\n                        // Core metrics\n                        model_route: arm,\n                        success,\n                        latency_ms: latencyMs,\n                        cost_euro: costEuro,\n\n                        // Context information\n                        domain: domain || 'general',\n                        budget_tier: budgetTier || 'standard',\n                        require_tools: requireTools || false,\n\n                        // Tracking\n                        request_id: requestId || randomUUID(),\n                        timestamp: Date.now(),\n                    },\n                    entityId,\n                }],\n            }));\n        } catch (error) {\n            // Log error but don't throw - logging failures shouldn't break the main flow\n            console.error('Failed to log bandit outcome to Evidently:', error);\n        }\n    }\n\n    async logExperimentEvent(params: {\n        userId?: string;\n        experimentName: string;\n        variation: string;\n        metricName: string;\n        metricValue: number;\n        context?: Record<string, any>;\n    }) {\n        const { userId, experimentName, variation, metricName, metricValue, context } = params;\n        const entityId = userId ?? randomUUID();\n\n        try {\n            await this.client.send(new PutProjectEventsCommand({\n                project: this.opts.project,\n                events: [{\n                    timestamp: new Date(),\n                    type: 'aws.evidently.custom',\n                    data: {\n                        experiment_name: experimentName,\n                        variation,\n                        metric_name: metricName,\n                        metric_value: metricValue,\n                        ...context,\n                    },\n                    entityId,\n                }],\n            }));\n        } catch (error) {\n            console.error('Failed to log experiment event to Evidently:', error);\n        }\n    }\n\n    // Batch logging for better performance\n    async logBatch(events: Array<{\n        userId?: string;\n        arm: Arm;\n        success: boolean;\n        latencyMs: number;\n        costEuro: number;\n        domain?: string;\n        requestId?: string;\n    }>) {\n        if (events.length === 0) return;\n\n        try {\n            const evidentlyEvents = events.map(event => ({\n                timestamp: new Date(),\n                type: 'aws.evidently.custom' as const,\n                data: {\n                    model_route: event.arm,\n                    success: event.success,\n                    latency_ms: event.latencyMs,\n                    cost_euro: event.costEuro,\n                    domain: event.domain || 'general',\n                    request_id: event.requestId || randomUUID(),\n                },\n                entityId: event.userId ?? randomUUID(),\n            }));\n\n            await this.client.send(new PutProjectEventsCommand({\n                project: this.opts.project,\n                events: evidentlyEvents,\n            }));\n        } catch (error) {\n            console.error('Failed to log batch events to Evidently:', error);\n        }\n    }\n}"],"version":3}
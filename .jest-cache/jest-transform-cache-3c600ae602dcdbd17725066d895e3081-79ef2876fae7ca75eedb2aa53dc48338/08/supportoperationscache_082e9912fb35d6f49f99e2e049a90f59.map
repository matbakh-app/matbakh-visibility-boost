{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/support-operations-cache.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/support-operations-cache.ts"],"sourcesContent":["/**\n * Support Operations Caching Layer\n *\n * Specialized caching for Bedrock Support Manager operations with:\n * - Infrastructure audit result caching\n * - Meta-monitoring data caching\n * - Implementation gap analysis caching\n * - Compliance validation caching\n * - Intelligent cache invalidation\n * - Performance optimization for support operations\n */\n\nimport { createHash } from \"crypto\";\nimport {\n  ComplianceValidationResult,\n  CostAnalysis,\n  ExecutionMetadata,\n  ImplementationGap,\n  InfrastructureAuditResult,\n  SecurityAuditResult,\n} from \"./bedrock-support-manager\";\n\nexport interface SupportCacheConfig {\n  enabled: boolean;\n  ttlSeconds: {\n    infrastructureAudit: number;\n    metaMonitoring: number;\n    implementationGaps: number;\n    complianceValidation: number;\n    securityAudit: number;\n    costAnalysis: number;\n  };\n  maxCacheSize: number;\n  compressionEnabled: boolean;\n  invalidationStrategy: \"ttl\" | \"event\" | \"hybrid\";\n}\n\nexport interface SupportCacheStats {\n  hits: number;\n  misses: number;\n  hitRate: number;\n  totalRequests: number;\n  averageLatency: number;\n  cacheSize: number;\n  lastUpdated: Date;\n  operationStats: {\n    infrastructureAudit: OperationCacheStats;\n    metaMonitoring: OperationCacheStats;\n    implementationGaps: OperationCacheStats;\n    complianceValidation: OperationCacheStats;\n    securityAudit: OperationCacheStats;\n    costAnalysis: OperationCacheStats;\n  };\n}\n\nexport interface OperationCacheStats {\n  hits: number;\n  misses: number;\n  hitRate: number;\n  averageLatency: number;\n  lastAccess: Date | null;\n}\n\nexport interface CacheEntry<T> {\n  data: T;\n  timestamp: number;\n  ttl: number;\n  compressed: boolean;\n  accessCount: number;\n  operationType: SupportOperationType;\n  metadata: CacheEntryMetadata;\n}\n\nexport interface CacheEntryMetadata {\n  createdAt: Date;\n  lastAccessed: Date;\n  expiresAt: Date;\n  size: number;\n  compressionRatio?: number;\n}\n\nexport type SupportOperationType =\n  | \"infrastructureAudit\"\n  | \"metaMonitoring\"\n  | \"implementationGaps\"\n  | \"complianceValidation\"\n  | \"securityAudit\"\n  | \"costAnalysis\";\n\n/**\n * Support Operations Caching Layer\n */\nexport class SupportOperationsCache {\n  private config: SupportCacheConfig;\n  private stats: SupportCacheStats;\n  private cache: Map<string, CacheEntry<any>>;\n  private invalidationTimers: Map<string, NodeJS.Timeout>;\n\n  constructor(config?: Partial<SupportCacheConfig>) {\n    this.config = {\n      enabled: true,\n      ttlSeconds: {\n        infrastructureAudit: 300, // 5 minutes - infrastructure changes frequently\n        metaMonitoring: 60, // 1 minute - real-time monitoring\n        implementationGaps: 600, // 10 minutes - gaps change less frequently\n        complianceValidation: 1800, // 30 minutes - compliance is relatively stable\n        securityAudit: 900, // 15 minutes - security needs regular checks\n        costAnalysis: 300, // 5 minutes - cost data updates frequently\n      },\n      maxCacheSize: 1000, // Maximum number of cached entries\n      compressionEnabled: true,\n      invalidationStrategy: \"hybrid\", // Use both TTL and event-based invalidation\n      ...config,\n    };\n\n    this.cache = new Map();\n    this.invalidationTimers = new Map();\n\n    this.stats = {\n      hits: 0,\n      misses: 0,\n      hitRate: 0,\n      totalRequests: 0,\n      averageLatency: 0,\n      cacheSize: 0,\n      lastUpdated: new Date(),\n      operationStats: {\n        infrastructureAudit: this.createOperationStats(),\n        metaMonitoring: this.createOperationStats(),\n        implementationGaps: this.createOperationStats(),\n        complianceValidation: this.createOperationStats(),\n        securityAudit: this.createOperationStats(),\n        costAnalysis: this.createOperationStats(),\n      },\n    };\n  }\n\n  /**\n   * Get cached infrastructure audit result\n   */\n  async getInfrastructureAudit(\n    context?: Record<string, any>\n  ): Promise<InfrastructureAuditResult | null> {\n    return this.get<InfrastructureAuditResult>(\"infrastructureAudit\", context);\n  }\n\n  /**\n   * Cache infrastructure audit result\n   */\n  async setInfrastructureAudit(\n    result: InfrastructureAuditResult,\n    context?: Record<string, any>\n  ): Promise<void> {\n    return this.set(\"infrastructureAudit\", result, context);\n  }\n\n  /**\n   * Get cached meta-monitoring data\n   */\n  async getMetaMonitoring(\n    executionId: string\n  ): Promise<ExecutionMetadata | null> {\n    return this.get<ExecutionMetadata>(\"metaMonitoring\", { executionId });\n  }\n\n  /**\n   * Cache meta-monitoring data\n   */\n  async setMetaMonitoring(\n    data: ExecutionMetadata,\n    executionId: string\n  ): Promise<void> {\n    return this.set(\"metaMonitoring\", data, { executionId });\n  }\n\n  /**\n   * Get cached implementation gaps\n   */\n  async getImplementationGaps(\n    module?: string\n  ): Promise<ImplementationGap[] | null> {\n    return this.get<ImplementationGap[]>(\"implementationGaps\", { module });\n  }\n\n  /**\n   * Cache implementation gaps\n   */\n  async setImplementationGaps(\n    gaps: ImplementationGap[],\n    module?: string\n  ): Promise<void> {\n    return this.set(\"implementationGaps\", gaps, { module });\n  }\n\n  /**\n   * Get cached compliance validation result\n   */\n  async getComplianceValidation(\n    scope?: string\n  ): Promise<ComplianceValidationResult | null> {\n    return this.get<ComplianceValidationResult>(\"complianceValidation\", {\n      scope,\n    });\n  }\n\n  /**\n   * Cache compliance validation result\n   */\n  async setComplianceValidation(\n    result: ComplianceValidationResult,\n    scope?: string\n  ): Promise<void> {\n    return this.set(\"complianceValidation\", result, { scope });\n  }\n\n  /**\n   * Get cached security audit result\n   */\n  async getSecurityAudit(\n    component?: string\n  ): Promise<SecurityAuditResult | null> {\n    return this.get<SecurityAuditResult>(\"securityAudit\", { component });\n  }\n\n  /**\n   * Cache security audit result\n   */\n  async setSecurityAudit(\n    result: SecurityAuditResult,\n    component?: string\n  ): Promise<void> {\n    return this.set(\"securityAudit\", result, { component });\n  }\n\n  /**\n   * Get cached cost analysis\n   */\n  async getCostAnalysis(timeRange?: string): Promise<CostAnalysis | null> {\n    return this.get<CostAnalysis>(\"costAnalysis\", { timeRange });\n  }\n\n  /**\n   * Cache cost analysis\n   */\n  async setCostAnalysis(\n    analysis: CostAnalysis,\n    timeRange?: string\n  ): Promise<void> {\n    return this.set(\"costAnalysis\", analysis, { timeRange });\n  }\n\n  /**\n   * Generic get method for any support operation\n   */\n  private async get<T>(\n    operationType: SupportOperationType,\n    context?: Record<string, any>\n  ): Promise<T | null> {\n    if (!this.config.enabled) {\n      return null;\n    }\n\n    const startTime = Date.now();\n    const cacheKey = this.generateCacheKey(operationType, context);\n\n    try {\n      const entry = this.cache.get(cacheKey);\n\n      if (entry) {\n        // Check if entry has expired\n        if (Date.now() > entry.metadata.expiresAt.getTime()) {\n          this.cache.delete(cacheKey);\n          this.clearInvalidationTimer(cacheKey);\n          this.recordMiss(operationType, Date.now() - startTime);\n          return null;\n        }\n\n        // Update access metadata\n        entry.accessCount++;\n        entry.metadata.lastAccessed = new Date();\n\n        // Decompress if needed\n        let data = entry.data;\n        if (entry.compressed && this.config.compressionEnabled) {\n          data = await this.decompress(data);\n        }\n\n        this.recordHit(operationType, Date.now() - startTime);\n        return data as T;\n      }\n\n      this.recordMiss(operationType, Date.now() - startTime);\n      return null;\n    } catch (error) {\n      console.error(`Support cache get error for ${operationType}:`, error);\n      this.recordMiss(operationType, Date.now() - startTime);\n      return null;\n    }\n  }\n\n  /**\n   * Generic set method for any support operation\n   */\n  private async set<T>(\n    operationType: SupportOperationType,\n    data: T,\n    context?: Record<string, any>\n  ): Promise<void> {\n    if (!this.config.enabled) {\n      return;\n    }\n\n    // Check cache size limit\n    if (this.cache.size >= this.config.maxCacheSize) {\n      await this.evictLeastRecentlyUsed();\n    }\n\n    const cacheKey = this.generateCacheKey(operationType, context);\n    const ttl = this.config.ttlSeconds[operationType];\n\n    try {\n      let dataToCache = data;\n      let compressed = false;\n      let compressionRatio: number | undefined;\n\n      // Compress large data\n      const dataSize = JSON.stringify(data).length;\n      if (dataSize > 1024 && this.config.compressionEnabled) {\n        const originalSize = dataSize;\n        dataToCache = await this.compress(data);\n        const compressedSize = JSON.stringify(dataToCache).length;\n        compressed = true;\n        compressionRatio = compressedSize / originalSize;\n      }\n\n      const now = new Date();\n      const expiresAt = new Date(now.getTime() + ttl * 1000);\n\n      const entry: CacheEntry<T> = {\n        data: dataToCache,\n        timestamp: Date.now(),\n        ttl,\n        compressed,\n        accessCount: 0,\n        operationType,\n        metadata: {\n          createdAt: now,\n          lastAccessed: now,\n          expiresAt,\n          size: dataSize,\n          compressionRatio,\n        },\n      };\n\n      this.cache.set(cacheKey, entry);\n      this.stats.cacheSize = this.cache.size;\n\n      // Set up TTL-based invalidation\n      if (this.config.invalidationStrategy !== \"event\") {\n        this.setupInvalidationTimer(cacheKey, ttl);\n      }\n    } catch (error) {\n      console.error(`Support cache set error for ${operationType}:`, error);\n    }\n  }\n\n  /**\n   * Generate cache key from operation type and context\n   */\n  private generateCacheKey(\n    operationType: SupportOperationType,\n    context?: Record<string, any>\n  ): string {\n    const keyData = {\n      operationType,\n      context: context || {},\n    };\n\n    const hash = createHash(\"sha256\")\n      .update(JSON.stringify(keyData))\n      .digest(\"hex\");\n\n    return `support-cache:${operationType}:${hash}`;\n  }\n\n  /**\n   * Setup automatic cache invalidation timer\n   */\n  private setupInvalidationTimer(cacheKey: string, ttlSeconds: number): void {\n    // Clear existing timer if any\n    this.clearInvalidationTimer(cacheKey);\n\n    // Set new timer\n    const timer = setTimeout(() => {\n      this.cache.delete(cacheKey);\n      this.invalidationTimers.delete(cacheKey);\n      this.stats.cacheSize = this.cache.size;\n    }, ttlSeconds * 1000);\n\n    this.invalidationTimers.set(cacheKey, timer);\n  }\n\n  /**\n   * Clear invalidation timer\n   */\n  private clearInvalidationTimer(cacheKey: string): void {\n    const timer = this.invalidationTimers.get(cacheKey);\n    if (timer) {\n      clearTimeout(timer);\n      this.invalidationTimers.delete(cacheKey);\n    }\n  }\n\n  /**\n   * Invalidate cache for specific operation type\n   */\n  async invalidate(\n    operationType: SupportOperationType,\n    context?: Record<string, any>\n  ): Promise<void> {\n    if (context) {\n      // Invalidate specific entry\n      const cacheKey = this.generateCacheKey(operationType, context);\n      this.cache.delete(cacheKey);\n      this.clearInvalidationTimer(cacheKey);\n    } else {\n      // Invalidate all entries of this operation type\n      const keysToDelete: string[] = [];\n\n      for (const [key, entry] of this.cache.entries()) {\n        if (entry.operationType === operationType) {\n          keysToDelete.push(key);\n        }\n      }\n\n      for (const key of keysToDelete) {\n        this.cache.delete(key);\n        this.clearInvalidationTimer(key);\n      }\n    }\n\n    this.stats.cacheSize = this.cache.size;\n  }\n\n  /**\n   * Invalidate all cache entries\n   */\n  async invalidateAll(): Promise<void> {\n    this.cache.clear();\n\n    // Clear all timers\n    for (const timer of this.invalidationTimers.values()) {\n      clearTimeout(timer);\n    }\n    this.invalidationTimers.clear();\n\n    this.stats.cacheSize = 0;\n  }\n\n  /**\n   * Evict least recently used entry\n   */\n  private async evictLeastRecentlyUsed(): Promise<void> {\n    let oldestKey: string | null = null;\n    let oldestTime = Date.now();\n\n    for (const [key, entry] of this.cache.entries()) {\n      const lastAccessed = entry.metadata.lastAccessed.getTime();\n      if (lastAccessed < oldestTime) {\n        oldestTime = lastAccessed;\n        oldestKey = key;\n      }\n    }\n\n    if (oldestKey) {\n      this.cache.delete(oldestKey);\n      this.clearInvalidationTimer(oldestKey);\n      this.stats.cacheSize = this.cache.size;\n    }\n  }\n\n  /**\n   * Compress data\n   */\n  private async compress<T>(data: T): Promise<T> {\n    // Simple compression simulation - in production use zlib\n    const jsonString = JSON.stringify(data);\n    return JSON.parse(`{\"compressed\":true,\"data\":\"${jsonString}\"}`) as T;\n  }\n\n  /**\n   * Decompress data\n   */\n  private async decompress<T>(data: T): Promise<T> {\n    // Simple decompression simulation\n    const compressed = data as any;\n    if (compressed.compressed && compressed.data) {\n      return JSON.parse(compressed.data) as T;\n    }\n    return data;\n  }\n\n  /**\n   * Record cache hit\n   */\n  private recordHit(\n    operationType: SupportOperationType,\n    latency: number\n  ): void {\n    this.stats.hits++;\n    this.stats.totalRequests++;\n\n    const opStats = this.stats.operationStats[operationType];\n    opStats.hits++;\n    opStats.lastAccess = new Date();\n    this.updateOperationStats(opStats, latency);\n\n    this.updateGlobalStats(latency);\n  }\n\n  /**\n   * Record cache miss\n   */\n  private recordMiss(\n    operationType: SupportOperationType,\n    latency: number\n  ): void {\n    this.stats.misses++;\n    this.stats.totalRequests++;\n\n    const opStats = this.stats.operationStats[operationType];\n    opStats.misses++;\n    opStats.lastAccess = new Date();\n    this.updateOperationStats(opStats, latency);\n\n    this.updateGlobalStats(latency);\n  }\n\n  /**\n   * Update operation-specific statistics\n   */\n  private updateOperationStats(\n    opStats: OperationCacheStats,\n    latency: number\n  ): void {\n    const totalRequests = opStats.hits + opStats.misses;\n    opStats.hitRate = totalRequests > 0 ? opStats.hits / totalRequests : 0;\n    opStats.averageLatency = (opStats.averageLatency + latency) / 2;\n  }\n\n  /**\n   * Update global statistics\n   */\n  private updateGlobalStats(latency: number): void {\n    this.stats.hitRate =\n      this.stats.totalRequests > 0\n        ? this.stats.hits / this.stats.totalRequests\n        : 0;\n\n    this.stats.averageLatency = (this.stats.averageLatency + latency) / 2;\n    this.stats.lastUpdated = new Date();\n  }\n\n  /**\n   * Create initial operation statistics\n   */\n  private createOperationStats(): OperationCacheStats {\n    return {\n      hits: 0,\n      misses: 0,\n      hitRate: 0,\n      averageLatency: 0,\n      lastAccess: null,\n    };\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getStats(): SupportCacheStats {\n    return JSON.parse(JSON.stringify(this.stats));\n  }\n\n  /**\n   * Get statistics for specific operation type\n   */\n  getOperationStats(operationType: SupportOperationType): OperationCacheStats {\n    return JSON.parse(JSON.stringify(this.stats.operationStats[operationType]));\n  }\n\n  /**\n   * Check if cache performance meets targets\n   */\n  isPerformanceTarget(targetHitRate: number = 0.7): boolean {\n    return this.stats.hitRate >= targetHitRate;\n  }\n\n  /**\n   * Get cache configuration\n   */\n  getConfig(): SupportCacheConfig {\n    return JSON.parse(JSON.stringify(this.config));\n  }\n\n  /**\n   * Update cache configuration\n   */\n  updateConfig(newConfig: Partial<SupportCacheConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n\n    // Update TTL for specific operation types if provided\n    if (newConfig.ttlSeconds) {\n      this.config.ttlSeconds = {\n        ...this.config.ttlSeconds,\n        ...newConfig.ttlSeconds,\n      };\n    }\n  }\n\n  /**\n   * Health check for cache system\n   */\n  async healthCheck(): Promise<{\n    healthy: boolean;\n    cacheSize: number;\n    hitRate: number;\n    averageLatency: number;\n    errors: string[];\n  }> {\n    const errors: string[] = [];\n\n    try {\n      // Check cache size\n      if (this.cache.size > this.config.maxCacheSize * 0.9) {\n        errors.push(\n          `Cache size approaching limit: ${this.cache.size}/${this.config.maxCacheSize}`\n        );\n      }\n\n      // Check hit rate\n      if (this.stats.hitRate < 0.5 && this.stats.totalRequests > 10) {\n        errors.push(\n          `Low cache hit rate: ${(this.stats.hitRate * 100).toFixed(1)}%`\n        );\n      }\n\n      // Check average latency\n      if (this.stats.averageLatency > 100) {\n        errors.push(\n          `High cache latency: ${this.stats.averageLatency.toFixed(0)}ms`\n        );\n      }\n    } catch (error) {\n      errors.push(`Health check error: ${error}`);\n    }\n\n    const healthy = errors.length === 0;\n\n    return {\n      healthy,\n      cacheSize: this.cache.size,\n      hitRate: this.stats.hitRate,\n      averageLatency: this.stats.averageLatency,\n      errors,\n    };\n  }\n\n  /**\n   * Warm up cache with common support operations\n   */\n  async warmUp(\n    operations: Array<{\n      type: SupportOperationType;\n      data: any;\n      context?: Record<string, any>;\n    }>\n  ): Promise<void> {\n    console.log(\n      `Warming up support cache with ${operations.length} operations`\n    );\n\n    for (const operation of operations) {\n      await this.set(operation.type, operation.data, operation.context);\n    }\n\n    console.log(\n      `Cache warmed up: ${this.cache.size} entries, hit rate: ${(\n        this.stats.hitRate * 100\n      ).toFixed(1)}%`\n    );\n  }\n\n  /**\n   * Get cache entries for debugging\n   */\n  getCacheEntries(): Array<{\n    key: string;\n    operationType: SupportOperationType;\n    size: number;\n    accessCount: number;\n    expiresAt: Date;\n  }> {\n    const entries: Array<{\n      key: string;\n      operationType: SupportOperationType;\n      size: number;\n      accessCount: number;\n      expiresAt: Date;\n    }> = [];\n\n    for (const [key, entry] of this.cache.entries()) {\n      entries.push({\n        key,\n        operationType: entry.operationType,\n        size: entry.metadata.size,\n        accessCount: entry.accessCount,\n        expiresAt: entry.metadata.expiresAt,\n      });\n    }\n\n    return entries;\n  }\n}\n\n/**\n * Factory function for creating support operations cache\n */\nexport const createSupportOperationsCache = (\n  config?: Partial<SupportCacheConfig>\n): SupportOperationsCache => {\n  return new SupportOperationsCache(config);\n};\n\n/**\n * Default cache configurations for different environments\n */\nexport const SUPPORT_CACHE_CONFIGS = {\n  development: {\n    enabled: true,\n    ttlSeconds: {\n      infrastructureAudit: 60, // 1 minute\n      metaMonitoring: 30, // 30 seconds\n      implementationGaps: 120, // 2 minutes\n      complianceValidation: 300, // 5 minutes\n      securityAudit: 180, // 3 minutes\n      costAnalysis: 60, // 1 minute\n    },\n    maxCacheSize: 100,\n  },\n  staging: {\n    enabled: true,\n    ttlSeconds: {\n      infrastructureAudit: 180, // 3 minutes\n      metaMonitoring: 45, // 45 seconds\n      implementationGaps: 300, // 5 minutes\n      complianceValidation: 900, // 15 minutes\n      securityAudit: 450, // 7.5 minutes\n      costAnalysis: 180, // 3 minutes\n    },\n    maxCacheSize: 500,\n  },\n  production: {\n    enabled: true,\n    ttlSeconds: {\n      infrastructureAudit: 300, // 5 minutes\n      metaMonitoring: 60, // 1 minute\n      implementationGaps: 600, // 10 minutes\n      complianceValidation: 1800, // 30 minutes\n      securityAudit: 900, // 15 minutes\n      costAnalysis: 300, // 5 minutes\n    },\n    maxCacheSize: 1000,\n  },\n} as const;\n"],"version":3}
25b379d6c1f9bdc28e11683dff077fed
"use strict";
/**
 * Support Operations Caching Layer
 *
 * Specialized caching for Bedrock Support Manager operations with:
 * - Infrastructure audit result caching
 * - Meta-monitoring data caching
 * - Implementation gap analysis caching
 * - Compliance validation caching
 * - Intelligent cache invalidation
 * - Performance optimization for support operations
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SUPPORT_CACHE_CONFIGS = exports.createSupportOperationsCache = exports.SupportOperationsCache = void 0;
const crypto_1 = require("crypto");
/**
 * Support Operations Caching Layer
 */
class SupportOperationsCache {
    config;
    stats;
    cache;
    invalidationTimers;
    constructor(config) {
        this.config = {
            enabled: true,
            ttlSeconds: {
                infrastructureAudit: 300, // 5 minutes - infrastructure changes frequently
                metaMonitoring: 60, // 1 minute - real-time monitoring
                implementationGaps: 600, // 10 minutes - gaps change less frequently
                complianceValidation: 1800, // 30 minutes - compliance is relatively stable
                securityAudit: 900, // 15 minutes - security needs regular checks
                costAnalysis: 300, // 5 minutes - cost data updates frequently
            },
            maxCacheSize: 1000, // Maximum number of cached entries
            compressionEnabled: true,
            invalidationStrategy: "hybrid", // Use both TTL and event-based invalidation
            ...config,
        };
        this.cache = new Map();
        this.invalidationTimers = new Map();
        this.stats = {
            hits: 0,
            misses: 0,
            hitRate: 0,
            totalRequests: 0,
            averageLatency: 0,
            cacheSize: 0,
            lastUpdated: new Date(),
            operationStats: {
                infrastructureAudit: this.createOperationStats(),
                metaMonitoring: this.createOperationStats(),
                implementationGaps: this.createOperationStats(),
                complianceValidation: this.createOperationStats(),
                securityAudit: this.createOperationStats(),
                costAnalysis: this.createOperationStats(),
            },
        };
    }
    /**
     * Get cached infrastructure audit result
     */
    async getInfrastructureAudit(context) {
        return this.get("infrastructureAudit", context);
    }
    /**
     * Cache infrastructure audit result
     */
    async setInfrastructureAudit(result, context) {
        return this.set("infrastructureAudit", result, context);
    }
    /**
     * Get cached meta-monitoring data
     */
    async getMetaMonitoring(executionId) {
        return this.get("metaMonitoring", { executionId });
    }
    /**
     * Cache meta-monitoring data
     */
    async setMetaMonitoring(data, executionId) {
        return this.set("metaMonitoring", data, { executionId });
    }
    /**
     * Get cached implementation gaps
     */
    async getImplementationGaps(module) {
        return this.get("implementationGaps", { module });
    }
    /**
     * Cache implementation gaps
     */
    async setImplementationGaps(gaps, module) {
        return this.set("implementationGaps", gaps, { module });
    }
    /**
     * Get cached compliance validation result
     */
    async getComplianceValidation(scope) {
        return this.get("complianceValidation", {
            scope,
        });
    }
    /**
     * Cache compliance validation result
     */
    async setComplianceValidation(result, scope) {
        return this.set("complianceValidation", result, { scope });
    }
    /**
     * Get cached security audit result
     */
    async getSecurityAudit(component) {
        return this.get("securityAudit", { component });
    }
    /**
     * Cache security audit result
     */
    async setSecurityAudit(result, component) {
        return this.set("securityAudit", result, { component });
    }
    /**
     * Get cached cost analysis
     */
    async getCostAnalysis(timeRange) {
        return this.get("costAnalysis", { timeRange });
    }
    /**
     * Cache cost analysis
     */
    async setCostAnalysis(analysis, timeRange) {
        return this.set("costAnalysis", analysis, { timeRange });
    }
    /**
     * Generic get method for any support operation
     */
    async get(operationType, context) {
        if (!this.config.enabled) {
            return null;
        }
        const startTime = Date.now();
        const cacheKey = this.generateCacheKey(operationType, context);
        try {
            const entry = this.cache.get(cacheKey);
            if (entry) {
                // Check if entry has expired
                if (Date.now() > entry.metadata.expiresAt.getTime()) {
                    this.cache.delete(cacheKey);
                    this.clearInvalidationTimer(cacheKey);
                    this.recordMiss(operationType, Date.now() - startTime);
                    return null;
                }
                // Update access metadata
                entry.accessCount++;
                entry.metadata.lastAccessed = new Date();
                // Decompress if needed
                let data = entry.data;
                if (entry.compressed && this.config.compressionEnabled) {
                    data = await this.decompress(data);
                }
                this.recordHit(operationType, Date.now() - startTime);
                return data;
            }
            this.recordMiss(operationType, Date.now() - startTime);
            return null;
        }
        catch (error) {
            console.error(`Support cache get error for ${operationType}:`, error);
            this.recordMiss(operationType, Date.now() - startTime);
            return null;
        }
    }
    /**
     * Generic set method for any support operation
     */
    async set(operationType, data, context) {
        if (!this.config.enabled) {
            return;
        }
        // Check cache size limit
        if (this.cache.size >= this.config.maxCacheSize) {
            await this.evictLeastRecentlyUsed();
        }
        const cacheKey = this.generateCacheKey(operationType, context);
        const ttl = this.config.ttlSeconds[operationType];
        try {
            let dataToCache = data;
            let compressed = false;
            let compressionRatio;
            // Compress large data
            const dataSize = JSON.stringify(data).length;
            if (dataSize > 1024 && this.config.compressionEnabled) {
                const originalSize = dataSize;
                dataToCache = await this.compress(data);
                const compressedSize = JSON.stringify(dataToCache).length;
                compressed = true;
                compressionRatio = compressedSize / originalSize;
            }
            const now = new Date();
            const expiresAt = new Date(now.getTime() + ttl * 1000);
            const entry = {
                data: dataToCache,
                timestamp: Date.now(),
                ttl,
                compressed,
                accessCount: 0,
                operationType,
                metadata: {
                    createdAt: now,
                    lastAccessed: now,
                    expiresAt,
                    size: dataSize,
                    compressionRatio,
                },
            };
            this.cache.set(cacheKey, entry);
            this.stats.cacheSize = this.cache.size;
            // Set up TTL-based invalidation
            if (this.config.invalidationStrategy !== "event") {
                this.setupInvalidationTimer(cacheKey, ttl);
            }
        }
        catch (error) {
            console.error(`Support cache set error for ${operationType}:`, error);
        }
    }
    /**
     * Generate cache key from operation type and context
     */
    generateCacheKey(operationType, context) {
        const keyData = {
            operationType,
            context: context || {},
        };
        const hash = (0, crypto_1.createHash)("sha256")
            .update(JSON.stringify(keyData))
            .digest("hex");
        return `support-cache:${operationType}:${hash}`;
    }
    /**
     * Setup automatic cache invalidation timer
     */
    setupInvalidationTimer(cacheKey, ttlSeconds) {
        // Clear existing timer if any
        this.clearInvalidationTimer(cacheKey);
        // Set new timer
        const timer = setTimeout(() => {
            this.cache.delete(cacheKey);
            this.invalidationTimers.delete(cacheKey);
            this.stats.cacheSize = this.cache.size;
        }, ttlSeconds * 1000);
        this.invalidationTimers.set(cacheKey, timer);
    }
    /**
     * Clear invalidation timer
     */
    clearInvalidationTimer(cacheKey) {
        const timer = this.invalidationTimers.get(cacheKey);
        if (timer) {
            clearTimeout(timer);
            this.invalidationTimers.delete(cacheKey);
        }
    }
    /**
     * Invalidate cache for specific operation type
     */
    async invalidate(operationType, context) {
        if (context) {
            // Invalidate specific entry
            const cacheKey = this.generateCacheKey(operationType, context);
            this.cache.delete(cacheKey);
            this.clearInvalidationTimer(cacheKey);
        }
        else {
            // Invalidate all entries of this operation type
            const keysToDelete = [];
            for (const [key, entry] of this.cache.entries()) {
                if (entry.operationType === operationType) {
                    keysToDelete.push(key);
                }
            }
            for (const key of keysToDelete) {
                this.cache.delete(key);
                this.clearInvalidationTimer(key);
            }
        }
        this.stats.cacheSize = this.cache.size;
    }
    /**
     * Invalidate all cache entries
     */
    async invalidateAll() {
        this.cache.clear();
        // Clear all timers
        for (const timer of this.invalidationTimers.values()) {
            clearTimeout(timer);
        }
        this.invalidationTimers.clear();
        this.stats.cacheSize = 0;
    }
    /**
     * Evict least recently used entry
     */
    async evictLeastRecentlyUsed() {
        let oldestKey = null;
        let oldestTime = Date.now();
        for (const [key, entry] of this.cache.entries()) {
            const lastAccessed = entry.metadata.lastAccessed.getTime();
            if (lastAccessed < oldestTime) {
                oldestTime = lastAccessed;
                oldestKey = key;
            }
        }
        if (oldestKey) {
            this.cache.delete(oldestKey);
            this.clearInvalidationTimer(oldestKey);
            this.stats.cacheSize = this.cache.size;
        }
    }
    /**
     * Compress data
     */
    async compress(data) {
        // Simple compression simulation - in production use zlib
        const jsonString = JSON.stringify(data);
        return JSON.parse(`{"compressed":true,"data":"${jsonString}"}`);
    }
    /**
     * Decompress data
     */
    async decompress(data) {
        // Simple decompression simulation
        const compressed = data;
        if (compressed.compressed && compressed.data) {
            return JSON.parse(compressed.data);
        }
        return data;
    }
    /**
     * Record cache hit
     */
    recordHit(operationType, latency) {
        this.stats.hits++;
        this.stats.totalRequests++;
        const opStats = this.stats.operationStats[operationType];
        opStats.hits++;
        opStats.lastAccess = new Date();
        this.updateOperationStats(opStats, latency);
        this.updateGlobalStats(latency);
    }
    /**
     * Record cache miss
     */
    recordMiss(operationType, latency) {
        this.stats.misses++;
        this.stats.totalRequests++;
        const opStats = this.stats.operationStats[operationType];
        opStats.misses++;
        opStats.lastAccess = new Date();
        this.updateOperationStats(opStats, latency);
        this.updateGlobalStats(latency);
    }
    /**
     * Update operation-specific statistics
     */
    updateOperationStats(opStats, latency) {
        const totalRequests = opStats.hits + opStats.misses;
        opStats.hitRate = totalRequests > 0 ? opStats.hits / totalRequests : 0;
        opStats.averageLatency = (opStats.averageLatency + latency) / 2;
    }
    /**
     * Update global statistics
     */
    updateGlobalStats(latency) {
        this.stats.hitRate =
            this.stats.totalRequests > 0
                ? this.stats.hits / this.stats.totalRequests
                : 0;
        this.stats.averageLatency = (this.stats.averageLatency + latency) / 2;
        this.stats.lastUpdated = new Date();
    }
    /**
     * Create initial operation statistics
     */
    createOperationStats() {
        return {
            hits: 0,
            misses: 0,
            hitRate: 0,
            averageLatency: 0,
            lastAccess: null,
        };
    }
    /**
     * Get cache statistics
     */
    getStats() {
        return JSON.parse(JSON.stringify(this.stats));
    }
    /**
     * Get statistics for specific operation type
     */
    getOperationStats(operationType) {
        return JSON.parse(JSON.stringify(this.stats.operationStats[operationType]));
    }
    /**
     * Check if cache performance meets targets
     */
    isPerformanceTarget(targetHitRate = 0.7) {
        return this.stats.hitRate >= targetHitRate;
    }
    /**
     * Get cache configuration
     */
    getConfig() {
        return JSON.parse(JSON.stringify(this.config));
    }
    /**
     * Update cache configuration
     */
    updateConfig(newConfig) {
        this.config = { ...this.config, ...newConfig };
        // Update TTL for specific operation types if provided
        if (newConfig.ttlSeconds) {
            this.config.ttlSeconds = {
                ...this.config.ttlSeconds,
                ...newConfig.ttlSeconds,
            };
        }
    }
    /**
     * Health check for cache system
     */
    async healthCheck() {
        const errors = [];
        try {
            // Check cache size
            if (this.cache.size > this.config.maxCacheSize * 0.9) {
                errors.push(`Cache size approaching limit: ${this.cache.size}/${this.config.maxCacheSize}`);
            }
            // Check hit rate
            if (this.stats.hitRate < 0.5 && this.stats.totalRequests > 10) {
                errors.push(`Low cache hit rate: ${(this.stats.hitRate * 100).toFixed(1)}%`);
            }
            // Check average latency
            if (this.stats.averageLatency > 100) {
                errors.push(`High cache latency: ${this.stats.averageLatency.toFixed(0)}ms`);
            }
        }
        catch (error) {
            errors.push(`Health check error: ${error}`);
        }
        const healthy = errors.length === 0;
        return {
            healthy,
            cacheSize: this.cache.size,
            hitRate: this.stats.hitRate,
            averageLatency: this.stats.averageLatency,
            errors,
        };
    }
    /**
     * Warm up cache with common support operations
     */
    async warmUp(operations) {
        console.log(`Warming up support cache with ${operations.length} operations`);
        for (const operation of operations) {
            await this.set(operation.type, operation.data, operation.context);
        }
        console.log(`Cache warmed up: ${this.cache.size} entries, hit rate: ${(this.stats.hitRate * 100).toFixed(1)}%`);
    }
    /**
     * Get cache entries for debugging
     */
    getCacheEntries() {
        const entries = [];
        for (const [key, entry] of this.cache.entries()) {
            entries.push({
                key,
                operationType: entry.operationType,
                size: entry.metadata.size,
                accessCount: entry.accessCount,
                expiresAt: entry.metadata.expiresAt,
            });
        }
        return entries;
    }
}
exports.SupportOperationsCache = SupportOperationsCache;
/**
 * Factory function for creating support operations cache
 */
const createSupportOperationsCache = (config) => {
    return new SupportOperationsCache(config);
};
exports.createSupportOperationsCache = createSupportOperationsCache;
/**
 * Default cache configurations for different environments
 */
exports.SUPPORT_CACHE_CONFIGS = {
    development: {
        enabled: true,
        ttlSeconds: {
            infrastructureAudit: 60, // 1 minute
            metaMonitoring: 30, // 30 seconds
            implementationGaps: 120, // 2 minutes
            complianceValidation: 300, // 5 minutes
            securityAudit: 180, // 3 minutes
            costAnalysis: 60, // 1 minute
        },
        maxCacheSize: 100,
    },
    staging: {
        enabled: true,
        ttlSeconds: {
            infrastructureAudit: 180, // 3 minutes
            metaMonitoring: 45, // 45 seconds
            implementationGaps: 300, // 5 minutes
            complianceValidation: 900, // 15 minutes
            securityAudit: 450, // 7.5 minutes
            costAnalysis: 180, // 3 minutes
        },
        maxCacheSize: 500,
    },
    production: {
        enabled: true,
        ttlSeconds: {
            infrastructureAudit: 300, // 5 minutes
            metaMonitoring: 60, // 1 minute
            implementationGaps: 600, // 10 minutes
            complianceValidation: 1800, // 30 minutes
            securityAudit: 900, // 15 minutes
            costAnalysis: 300, // 5 minutes
        },
        maxCacheSize: 1000,
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
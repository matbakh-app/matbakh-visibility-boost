9ff65afc812bfc6acfd93b1b4e4016f8
"use strict";
/**
 * CloudWatch Evidently Experiments Integration for AI Orchestrator
 *
 * Implements:
 * - A/B Testing for AI model routing
 * - Feature flags for gradual AI feature rollouts
 * - Automated experiment lifecycle management
 * - Integration with bandit optimization
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AI_EXPERIMENTS = exports.EvidentlyExperimentManager = void 0;
const client_evidently_1 = require("@aws-sdk/client-evidently");
const crypto_1 = require("crypto");
const bandit_controller_1 = require("./bandit-controller");
class EvidentlyExperimentManager {
    client;
    projectName;
    bandit;
    activeExperiments = new Map();
    experimentResults = new Map();
    constructor(projectName = "matbakh-ai-orchestrator", region = "eu-central-1", bandit) {
        this.client = new client_evidently_1.CloudWatchEvidentlyClient({ region });
        this.projectName = projectName;
        this.bandit = bandit || new bandit_controller_1.ThompsonBandit();
    }
    /**
     * Initialize the Evidently project for AI experiments
     */
    async initializeProject() {
        try {
            await this.client.send(new client_evidently_1.CreateProjectCommand({
                name: this.projectName,
                description: "AI model routing experiments and optimization",
                tags: {
                    Environment: process.env.NODE_ENV || "development",
                    Purpose: "AIOptimization",
                    Team: "AI",
                },
            }));
        }
        catch (error) {
            if (error.name !== "ResourceAlreadyExistsException") {
                throw error;
            }
        }
    }
    /**
     * Create a feature flag for AI model routing
     */
    async createAIFeature(featureName, description, providers) {
        const variations = providers.map((provider) => ({
            name: provider,
            value: { stringValue: provider },
        }));
        await this.client.send(new client_evidently_1.CreateFeatureCommand({
            project: this.projectName,
            name: featureName,
            description,
            variations,
            defaultVariation: providers[0], // Default to first provider
            evaluationStrategy: "ALL_RULES",
            tags: {
                Type: "AIModelRouting",
                CreatedAt: new Date().toISOString(),
            },
        }));
    }
    /**
     * Create an A/B test experiment for AI model comparison
     */
    async createAIExperiment(experiment) {
        // First create the feature if it doesn't exist
        const providers = experiment.treatments.map((t) => t.modelProvider);
        await this.createAIFeature(experiment.feature, `Feature for experiment: ${experiment.name}`, providers);
        // Create treatments for Evidently
        const treatments = experiment.treatments.map((treatment) => ({
            name: treatment.name,
            description: treatment.description,
            feature: experiment.feature,
            variation: treatment.modelProvider,
        }));
        // Create metric goals
        const metricGoals = experiment.metricGoals.map((goal) => ({
            metricName: goal.metricName,
            desiredChange: goal.desiredChange,
            valueKey: goal.metricName,
        }));
        await this.client.send(new client_evidently_1.CreateExperimentCommand({
            project: this.projectName,
            name: experiment.name,
            description: experiment.description,
            treatments,
            metricGoals,
            randomizationSalt: (0, crypto_1.randomUUID)(),
            samplingRate: experiment.trafficAllocation * 1000, // Convert to per-mille
            tags: {
                Type: "AIModelComparison",
                AutoOptimize: experiment.autoOptimize?.toString() || "false",
                Duration: experiment.duration?.toString() || "indefinite",
                CreatedAt: new Date().toISOString(),
            },
        }));
        // Store experiment for tracking
        this.activeExperiments.set(experiment.name, experiment);
    }
    /**
     * Get the optimal model provider using bandit + experiment data
     */
    async getOptimalProvider(context) {
        // Check if there's an active experiment for this context
        if (context.experimentName) {
            const experiment = this.activeExperiments.get(context.experimentName);
            if (experiment) {
                try {
                    // Evaluate the experiment feature
                    const response = await this.client.send(new client_evidently_1.EvaluateFeatureCommand({
                        project: this.projectName,
                        feature: experiment.feature,
                        entityId: context.userId || context.sessionId || (0, crypto_1.randomUUID)(),
                        evaluationContext: JSON.stringify({
                            domain: context.domain,
                            budgetTier: context.budgetTier,
                            requireTools: context.requireTools,
                        }),
                    }));
                    if (response.variation && response.value?.stringValue) {
                        const provider = response.value.stringValue;
                        return {
                            provider,
                            source: "experiment",
                            confidence: 0.8, // High confidence for experiment assignment
                            experimentName: context.experimentName,
                        };
                    }
                }
                catch (error) {
                    console.warn(`Failed to evaluate experiment feature: ${error}`);
                }
            }
        }
        // Fall back to bandit optimization
        const banditChoice = this.bandit.choose(context);
        const banditStats = this.bandit.getStats(context);
        const confidence = banditStats[banditChoice].trials > 10
            ? Math.min(0.95, banditStats[banditChoice].winRate + 0.1)
            : 0.5;
        return {
            provider: banditChoice,
            source: "bandit",
            confidence,
        };
    }
    /**
     * Record experiment outcome and update bandit
     */
    async recordExperimentOutcome(context, provider, metrics) {
        const { success, latencyMs, costEuro, qualityScore, userSatisfaction } = metrics;
        // Record in bandit for continuous learning
        this.bandit.record(provider, success, costEuro, latencyMs, context);
        // Record in Evidently for experiment tracking
        if (context.experimentName) {
            await this.recordExperimentMetrics(context, provider, {
                latency: latencyMs,
                cost: costEuro,
                success: success ? 1 : 0,
                quality: qualityScore || 0,
                satisfaction: userSatisfaction || 0,
            });
        }
    }
    /**
     * Record metrics to Evidently for experiment analysis
     */
    async recordExperimentMetrics(context, provider, metrics) {
        try {
            const events = Object.entries(metrics).map(([metricName, value]) => ({
                timestamp: new Date(),
                type: "aws.evidently.custom",
                data: {
                    details: JSON.stringify({
                        metricName,
                        value,
                        provider,
                        experimentName: context.experimentName,
                        treatmentName: context.treatmentName,
                        domain: context.domain,
                        budgetTier: context.budgetTier,
                        requireTools: context.requireTools,
                        requestId: context.requestId,
                    }),
                },
            }));
            await this.client.send(new client_evidently_1.PutProjectEventsCommand({
                project: this.projectName,
                events,
            }));
        }
        catch (error) {
            console.error("Failed to record experiment metrics:", error);
        }
    }
    /**
     * Start an experiment and begin auto-optimization
     */
    async startExperiment(experimentName) {
        await this.client.send(new client_evidently_1.StartExperimentCommand({
            project: this.projectName,
            experiment: experimentName,
        }));
        const experiment = this.activeExperiments.get(experimentName);
        if (experiment?.autoOptimize) {
            // Start auto-optimization process
            this.startAutoOptimization(experimentName);
        }
    }
    /**
     * Stop an experiment and apply winning treatment
     */
    async stopExperiment(experimentName, reason) {
        await this.client.send(new client_evidently_1.StopExperimentCommand({
            project: this.projectName,
            experiment: experimentName,
            reason,
        }));
        // Analyze results and get recommendation
        const result = await this.analyzeExperimentResults(experimentName);
        if (result?.recommendation) {
            // Apply winning treatment to bandit
            await this.applyWinningTreatment(experimentName, result.recommendation);
        }
        return result;
    }
    /**
     * Analyze experiment results and determine winner
     */
    async analyzeExperimentResults(experimentName) {
        try {
            const response = await this.client.send(new client_evidently_1.GetExperimentCommand({
                project: this.projectName,
                experiment: experimentName,
            }));
            const experiment = response.experiment;
            if (!experiment)
                return null;
            // Get bandit stats for comparison
            const banditStats = this.bandit.getStats();
            // Analyze treatments
            const results = experiment.treatments?.map((treatment) => {
                const provider = treatment.variation;
                const stats = banditStats[provider];
                return {
                    treatment: treatment.name || "",
                    modelProvider: provider,
                    metrics: {
                        winRate: {
                            value: stats.winRate,
                            improvement: 0, // Calculate vs baseline
                            confidence: stats.trials > 50 ? 0.95 : 0.7,
                            statisticalSignificance: stats.trials > 100,
                        },
                        avgLatency: {
                            value: stats.avgLatency,
                            improvement: 0, // Calculate vs baseline
                            confidence: stats.trials > 50 ? 0.95 : 0.7,
                            statisticalSignificance: stats.trials > 100,
                        },
                        avgCost: {
                            value: stats.avgCost,
                            improvement: 0, // Calculate vs baseline
                            confidence: stats.trials > 50 ? 0.95 : 0.7,
                            statisticalSignificance: stats.trials > 100,
                        },
                    },
                };
            }) || [];
            // Determine winner based on composite score
            let winningTreatment = results[0];
            let bestScore = -1;
            results.forEach((result) => {
                // Composite score: win rate (60%) + latency improvement (25%) + cost efficiency (15%)
                const score = result.metrics.winRate.value * 0.6 +
                    (1 / (result.metrics.avgLatency.value + 1)) * 0.25 +
                    (1 / (result.metrics.avgCost.value + 0.01)) * 0.15;
                if (score > bestScore) {
                    bestScore = score;
                    winningTreatment = result;
                }
            });
            const experimentResult = {
                experimentName,
                status: experiment.status,
                startTime: experiment.createdTime,
                endTime: experiment.lastUpdatedTime,
                results,
                recommendation: {
                    winningTreatment: winningTreatment.treatment,
                    confidence: winningTreatment.metrics.winRate.confidence,
                    expectedImprovement: bestScore,
                },
            };
            this.experimentResults.set(experimentName, experimentResult);
            return experimentResult;
        }
        catch (error) {
            console.error(`Failed to analyze experiment results: ${error}`);
            return null;
        }
    }
    /**
     * Apply winning treatment to bandit for future optimization
     */
    async applyWinningTreatment(experimentName, recommendation) {
        if (!recommendation)
            return;
        const experiment = this.activeExperiments.get(experimentName);
        if (!experiment)
            return;
        // Find the winning treatment
        const winningTreatment = experiment.treatments.find((t) => t.name === recommendation.winningTreatment);
        if (winningTreatment) {
            // Boost the winning provider in bandit
            const provider = winningTreatment.modelProvider;
            const boostAmount = Math.floor(recommendation.expectedImprovement * 10);
            // Add synthetic wins to boost the provider
            for (let i = 0; i < boostAmount; i++) {
                this.bandit.record(provider, true, 0.01, 100); // Low cost, fast response
            }
            console.log(`Applied winning treatment: ${winningTreatment.name} (${provider}) ` +
                `with ${boostAmount} synthetic wins`);
        }
    }
    /**
     * Start auto-optimization process for an experiment
     */
    startAutoOptimization(experimentName) {
        const experiment = this.activeExperiments.get(experimentName);
        if (!experiment)
            return;
        // Check experiment performance every hour
        const optimizationInterval = setInterval(async () => {
            try {
                const result = await this.analyzeExperimentResults(experimentName);
                if (result?.recommendation && result.recommendation.confidence > 0.9) {
                    // High confidence winner found, consider early stopping
                    console.log(`High confidence winner found for ${experimentName}: ` +
                        `${result.recommendation.winningTreatment} (${result.recommendation.confidence})`);
                    // Could implement early stopping logic here
                    // await this.stopExperiment(experimentName, 'Auto-optimization: High confidence winner');
                    // clearInterval(optimizationInterval);
                }
            }
            catch (error) {
                console.error(`Auto-optimization error for ${experimentName}:`, error);
            }
        }, 60 * 60 * 1000); // Every hour
        // Stop optimization after experiment duration
        if (experiment.duration) {
            setTimeout(() => {
                clearInterval(optimizationInterval);
            }, experiment.duration * 24 * 60 * 60 * 1000); // Convert days to ms
        }
    }
    /**
     * Get current experiment status and metrics
     */
    async getExperimentStatus(experimentName) {
        return this.experimentResults.get(experimentName) || null;
    }
    /**
     * List all active experiments
     */
    async listActiveExperiments() {
        try {
            const response = await this.client.send(new client_evidently_1.ListExperimentsCommand({
                project: this.projectName,
                status: "RUNNING",
            }));
            return response.experiments?.map((exp) => exp.name || "") || [];
        }
        catch (error) {
            console.error("Failed to list active experiments:", error);
            return [];
        }
    }
    /**
     * Get bandit statistics for monitoring
     */
    getBanditStats(context) {
        return this.bandit.getStats(context);
    }
    /**
     * Health check for the experiment system
     */
    async healthCheck() {
        try {
            const activeExperiments = await this.listActiveExperiments();
            const banditStats = this.getBanditStats();
            return {
                connected: true,
                projectExists: true,
                activeExperiments: activeExperiments.length,
                banditStats,
            };
        }
        catch (error) {
            return {
                connected: false,
                projectExists: false,
                activeExperiments: 0,
                banditStats: this.getBanditStats(),
            };
        }
    }
}
exports.EvidentlyExperimentManager = EvidentlyExperimentManager;
// Predefined AI experiments for common scenarios
exports.AI_EXPERIMENTS = {
    MODEL_ROUTING_OPTIMIZATION: {
        name: "ai-model-routing-optimization",
        description: "Optimize AI model routing based on performance and cost",
        feature: "ai-model-routing",
        treatments: [
            {
                name: "bedrock-focused",
                description: "Prefer Bedrock Claude for most tasks",
                modelProvider: "bedrock",
                weight: 40,
            },
            {
                name: "google-focused",
                description: "Prefer Google Gemini for most tasks",
                modelProvider: "google",
                weight: 40,
            },
            {
                name: "meta-focused",
                description: "Prefer Meta Llama for most tasks",
                modelProvider: "meta",
                weight: 20,
            },
        ],
        metricGoals: [
            {
                metricName: "winRate",
                desiredChange: "INCREASE",
                threshold: 0.8,
                priority: "HIGH",
            },
            {
                metricName: "avgLatency",
                desiredChange: "DECREASE",
                threshold: 1000,
                priority: "HIGH",
            },
            {
                metricName: "avgCost",
                desiredChange: "DECREASE",
                threshold: 0.05,
                priority: "MEDIUM",
            },
        ],
        trafficAllocation: 30, // 30% of traffic
        duration: 14, // 2 weeks
        autoOptimize: true,
    },
    DOMAIN_SPECIFIC_ROUTING: {
        name: "domain-specific-ai-routing",
        description: "Test domain-specific AI model preferences",
        feature: "domain-ai-routing",
        treatments: [
            {
                name: "legal-bedrock",
                description: "Use Bedrock for legal domain",
                modelProvider: "bedrock",
                weight: 50,
            },
            {
                name: "culinary-google",
                description: "Use Google for culinary domain",
                modelProvider: "google",
                weight: 50,
            },
        ],
        metricGoals: [
            {
                metricName: "qualityScore",
                desiredChange: "INCREASE",
                threshold: 0.85,
                priority: "HIGH",
            },
            {
                metricName: "userSatisfaction",
                desiredChange: "INCREASE",
                threshold: 0.8,
                priority: "HIGH",
            },
        ],
        trafficAllocation: 25,
        duration: 21, // 3 weeks
        autoOptimize: true,
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
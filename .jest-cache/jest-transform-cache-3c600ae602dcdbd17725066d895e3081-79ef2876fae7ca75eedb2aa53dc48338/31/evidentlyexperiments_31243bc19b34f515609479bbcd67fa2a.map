{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/evidently-experiments.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/evidently-experiments.ts"],"sourcesContent":["/**\n * CloudWatch Evidently Experiments Integration for AI Orchestrator\n *\n * Implements:\n * - A/B Testing for AI model routing\n * - Feature flags for gradual AI feature rollouts\n * - Automated experiment lifecycle management\n * - Integration with bandit optimization\n */\n\nimport {\n  CloudWatchEvidentlyClient,\n  CreateExperimentCommand,\n  CreateFeatureCommand,\n  CreateProjectCommand,\n  EvaluateFeatureCommand,\n  GetExperimentCommand,\n  ListExperimentsCommand,\n  PutProjectEventsCommand,\n  StartExperimentCommand,\n  StopExperimentCommand,\n} from \"@aws-sdk/client-evidently\";\nimport { randomUUID } from \"crypto\";\nimport { Arm, BanditContext, ThompsonBandit } from \"./bandit-controller\";\n\nexport interface AIExperiment {\n  name: string;\n  description: string;\n  feature: string;\n  treatments: AITreatment[];\n  metricGoals: AIMetricGoal[];\n  trafficAllocation: number; // Percentage of traffic to include\n  duration?: number; // Duration in days\n  autoOptimize?: boolean; // Enable bandit optimization\n}\n\nexport interface AITreatment {\n  name: string;\n  description: string;\n  modelProvider: Arm;\n  weight: number; // Initial traffic percentage\n  configuration?: Record<string, any>;\n}\n\nexport interface AIMetricGoal {\n  metricName: string;\n  desiredChange: \"INCREASE\" | \"DECREASE\";\n  threshold?: number;\n  priority: \"HIGH\" | \"MEDIUM\" | \"LOW\";\n}\n\nexport interface ExperimentContext extends BanditContext {\n  experimentName?: string;\n  treatmentName?: string;\n  sessionId?: string;\n  requestId?: string;\n}\n\nexport interface ExperimentResult {\n  experimentName: string;\n  status: \"CREATED\" | \"UPDATING\" | \"RUNNING\" | \"COMPLETED\" | \"CANCELLED\";\n  startTime?: Date;\n  endTime?: Date;\n  results?: {\n    treatment: string;\n    modelProvider: Arm;\n    metrics: {\n      [metricName: string]: {\n        value: number;\n        improvement: number;\n        confidence: number;\n        statisticalSignificance: boolean;\n      };\n    };\n  }[];\n  recommendation?: {\n    winningTreatment: string;\n    confidence: number;\n    expectedImprovement: number;\n  };\n}\n\nexport class EvidentlyExperimentManager {\n  private client: CloudWatchEvidentlyClient;\n  private projectName: string;\n  private bandit: ThompsonBandit;\n  private activeExperiments: Map<string, AIExperiment> = new Map();\n  private experimentResults: Map<string, ExperimentResult> = new Map();\n\n  constructor(\n    projectName: string = \"matbakh-ai-orchestrator\",\n    region: string = \"eu-central-1\",\n    bandit?: ThompsonBandit\n  ) {\n    this.client = new CloudWatchEvidentlyClient({ region });\n    this.projectName = projectName;\n    this.bandit = bandit || new ThompsonBandit();\n  }\n\n  /**\n   * Initialize the Evidently project for AI experiments\n   */\n  async initializeProject(): Promise<void> {\n    try {\n      await this.client.send(\n        new CreateProjectCommand({\n          name: this.projectName,\n          description: \"AI model routing experiments and optimization\",\n          tags: {\n            Environment: process.env.NODE_ENV || \"development\",\n            Purpose: \"AIOptimization\",\n            Team: \"AI\",\n          },\n        })\n      );\n    } catch (error: any) {\n      if (error.name !== \"ResourceAlreadyExistsException\") {\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * Create a feature flag for AI model routing\n   */\n  async createAIFeature(\n    featureName: string,\n    description: string,\n    providers: Arm[]\n  ): Promise<void> {\n    const variations = providers.map((provider) => ({\n      name: provider,\n      value: { stringValue: provider },\n    }));\n\n    await this.client.send(\n      new CreateFeatureCommand({\n        project: this.projectName,\n        name: featureName,\n        description,\n        variations,\n        defaultVariation: providers[0], // Default to first provider\n        evaluationStrategy: \"ALL_RULES\",\n        tags: {\n          Type: \"AIModelRouting\",\n          CreatedAt: new Date().toISOString(),\n        },\n      })\n    );\n  }\n\n  /**\n   * Create an A/B test experiment for AI model comparison\n   */\n  async createAIExperiment(experiment: AIExperiment): Promise<void> {\n    // First create the feature if it doesn't exist\n    const providers = experiment.treatments.map((t) => t.modelProvider);\n    await this.createAIFeature(\n      experiment.feature,\n      `Feature for experiment: ${experiment.name}`,\n      providers\n    );\n\n    // Create treatments for Evidently\n    const treatments = experiment.treatments.map((treatment) => ({\n      name: treatment.name,\n      description: treatment.description,\n      feature: experiment.feature,\n      variation: treatment.modelProvider,\n    }));\n\n    // Create metric goals\n    const metricGoals = experiment.metricGoals.map((goal) => ({\n      metricName: goal.metricName,\n      desiredChange: goal.desiredChange,\n      valueKey: goal.metricName,\n    }));\n\n    await this.client.send(\n      new CreateExperimentCommand({\n        project: this.projectName,\n        name: experiment.name,\n        description: experiment.description,\n        treatments,\n        metricGoals,\n        randomizationSalt: randomUUID(),\n        samplingRate: experiment.trafficAllocation * 1000, // Convert to per-mille\n        tags: {\n          Type: \"AIModelComparison\",\n          AutoOptimize: experiment.autoOptimize?.toString() || \"false\",\n          Duration: experiment.duration?.toString() || \"indefinite\",\n          CreatedAt: new Date().toISOString(),\n        },\n      })\n    );\n\n    // Store experiment for tracking\n    this.activeExperiments.set(experiment.name, experiment);\n  }\n\n  /**\n   * Get the optimal model provider using bandit + experiment data\n   */\n  async getOptimalProvider(context: ExperimentContext): Promise<{\n    provider: Arm;\n    source: \"bandit\" | \"experiment\" | \"default\";\n    confidence: number;\n    experimentName?: string;\n  }> {\n    // Check if there's an active experiment for this context\n    if (context.experimentName) {\n      const experiment = this.activeExperiments.get(context.experimentName);\n      if (experiment) {\n        try {\n          // Evaluate the experiment feature\n          const response = await this.client.send(\n            new EvaluateFeatureCommand({\n              project: this.projectName,\n              feature: experiment.feature,\n              entityId: context.userId || context.sessionId || randomUUID(),\n              evaluationContext: JSON.stringify({\n                domain: context.domain,\n                budgetTier: context.budgetTier,\n                requireTools: context.requireTools,\n              }),\n            })\n          );\n\n          if (response.variation && response.value?.stringValue) {\n            const provider = response.value.stringValue as Arm;\n            return {\n              provider,\n              source: \"experiment\",\n              confidence: 0.8, // High confidence for experiment assignment\n              experimentName: context.experimentName,\n            };\n          }\n        } catch (error) {\n          console.warn(`Failed to evaluate experiment feature: ${error}`);\n        }\n      }\n    }\n\n    // Fall back to bandit optimization\n    const banditChoice = this.bandit.choose(context);\n    const banditStats = this.bandit.getStats(context);\n    const confidence =\n      banditStats[banditChoice].trials > 10\n        ? Math.min(0.95, banditStats[banditChoice].winRate + 0.1)\n        : 0.5;\n\n    return {\n      provider: banditChoice,\n      source: \"bandit\",\n      confidence,\n    };\n  }\n\n  /**\n   * Record experiment outcome and update bandit\n   */\n  async recordExperimentOutcome(\n    context: ExperimentContext,\n    provider: Arm,\n    metrics: {\n      success: boolean;\n      latencyMs: number;\n      costEuro: number;\n      qualityScore?: number;\n      userSatisfaction?: number;\n    }\n  ): Promise<void> {\n    const { success, latencyMs, costEuro, qualityScore, userSatisfaction } =\n      metrics;\n\n    // Record in bandit for continuous learning\n    this.bandit.record(provider, success, costEuro, latencyMs, context);\n\n    // Record in Evidently for experiment tracking\n    if (context.experimentName) {\n      await this.recordExperimentMetrics(context, provider, {\n        latency: latencyMs,\n        cost: costEuro,\n        success: success ? 1 : 0,\n        quality: qualityScore || 0,\n        satisfaction: userSatisfaction || 0,\n      });\n    }\n  }\n\n  /**\n   * Record metrics to Evidently for experiment analysis\n   */\n  private async recordExperimentMetrics(\n    context: ExperimentContext,\n    provider: Arm,\n    metrics: Record<string, number>\n  ): Promise<void> {\n    try {\n      const events = Object.entries(metrics).map(([metricName, value]) => ({\n        timestamp: new Date(),\n        type: \"aws.evidently.custom\" as const,\n        data: {\n          details: JSON.stringify({\n            metricName,\n            value,\n            provider,\n            experimentName: context.experimentName,\n            treatmentName: context.treatmentName,\n            domain: context.domain,\n            budgetTier: context.budgetTier,\n            requireTools: context.requireTools,\n            requestId: context.requestId,\n          }),\n        },\n      }));\n\n      await this.client.send(\n        new PutProjectEventsCommand({\n          project: this.projectName,\n          events,\n        })\n      );\n    } catch (error) {\n      console.error(\"Failed to record experiment metrics:\", error);\n    }\n  }\n\n  /**\n   * Start an experiment and begin auto-optimization\n   */\n  async startExperiment(experimentName: string): Promise<void> {\n    await this.client.send(\n      new StartExperimentCommand({\n        project: this.projectName,\n        experiment: experimentName,\n      })\n    );\n\n    const experiment = this.activeExperiments.get(experimentName);\n    if (experiment?.autoOptimize) {\n      // Start auto-optimization process\n      this.startAutoOptimization(experimentName);\n    }\n  }\n\n  /**\n   * Stop an experiment and apply winning treatment\n   */\n  async stopExperiment(\n    experimentName: string,\n    reason?: string\n  ): Promise<ExperimentResult | null> {\n    await this.client.send(\n      new StopExperimentCommand({\n        project: this.projectName,\n        experiment: experimentName,\n        reason,\n      })\n    );\n\n    // Analyze results and get recommendation\n    const result = await this.analyzeExperimentResults(experimentName);\n\n    if (result?.recommendation) {\n      // Apply winning treatment to bandit\n      await this.applyWinningTreatment(experimentName, result.recommendation);\n    }\n\n    return result;\n  }\n\n  /**\n   * Analyze experiment results and determine winner\n   */\n  async analyzeExperimentResults(\n    experimentName: string\n  ): Promise<ExperimentResult | null> {\n    try {\n      const response = await this.client.send(\n        new GetExperimentCommand({\n          project: this.projectName,\n          experiment: experimentName,\n        })\n      );\n\n      const experiment = response.experiment;\n      if (!experiment) return null;\n\n      // Get bandit stats for comparison\n      const banditStats = this.bandit.getStats();\n\n      // Analyze treatments\n      const results =\n        experiment.treatments?.map((treatment) => {\n          const provider = treatment.variation as Arm;\n          const stats = banditStats[provider];\n\n          return {\n            treatment: treatment.name || \"\",\n            modelProvider: provider,\n            metrics: {\n              winRate: {\n                value: stats.winRate,\n                improvement: 0, // Calculate vs baseline\n                confidence: stats.trials > 50 ? 0.95 : 0.7,\n                statisticalSignificance: stats.trials > 100,\n              },\n              avgLatency: {\n                value: stats.avgLatency,\n                improvement: 0, // Calculate vs baseline\n                confidence: stats.trials > 50 ? 0.95 : 0.7,\n                statisticalSignificance: stats.trials > 100,\n              },\n              avgCost: {\n                value: stats.avgCost,\n                improvement: 0, // Calculate vs baseline\n                confidence: stats.trials > 50 ? 0.95 : 0.7,\n                statisticalSignificance: stats.trials > 100,\n              },\n            },\n          };\n        }) || [];\n\n      // Determine winner based on composite score\n      let winningTreatment = results[0];\n      let bestScore = -1;\n\n      results.forEach((result) => {\n        // Composite score: win rate (60%) + latency improvement (25%) + cost efficiency (15%)\n        const score =\n          result.metrics.winRate.value * 0.6 +\n          (1 / (result.metrics.avgLatency.value + 1)) * 0.25 +\n          (1 / (result.metrics.avgCost.value + 0.01)) * 0.15;\n\n        if (score > bestScore) {\n          bestScore = score;\n          winningTreatment = result;\n        }\n      });\n\n      const experimentResult: ExperimentResult = {\n        experimentName,\n        status: experiment.status as any,\n        startTime: experiment.createdTime,\n        endTime: experiment.lastUpdatedTime,\n        results,\n        recommendation: {\n          winningTreatment: winningTreatment.treatment,\n          confidence: winningTreatment.metrics.winRate.confidence,\n          expectedImprovement: bestScore,\n        },\n      };\n\n      this.experimentResults.set(experimentName, experimentResult);\n      return experimentResult;\n    } catch (error) {\n      console.error(`Failed to analyze experiment results: ${error}`);\n      return null;\n    }\n  }\n\n  /**\n   * Apply winning treatment to bandit for future optimization\n   */\n  private async applyWinningTreatment(\n    experimentName: string,\n    recommendation: ExperimentResult[\"recommendation\"]\n  ): Promise<void> {\n    if (!recommendation) return;\n\n    const experiment = this.activeExperiments.get(experimentName);\n    if (!experiment) return;\n\n    // Find the winning treatment\n    const winningTreatment = experiment.treatments.find(\n      (t) => t.name === recommendation.winningTreatment\n    );\n\n    if (winningTreatment) {\n      // Boost the winning provider in bandit\n      const provider = winningTreatment.modelProvider;\n      const boostAmount = Math.floor(recommendation.expectedImprovement * 10);\n\n      // Add synthetic wins to boost the provider\n      for (let i = 0; i < boostAmount; i++) {\n        this.bandit.record(provider, true, 0.01, 100); // Low cost, fast response\n      }\n\n      console.log(\n        `Applied winning treatment: ${winningTreatment.name} (${provider}) ` +\n          `with ${boostAmount} synthetic wins`\n      );\n    }\n  }\n\n  /**\n   * Start auto-optimization process for an experiment\n   */\n  private startAutoOptimization(experimentName: string): void {\n    const experiment = this.activeExperiments.get(experimentName);\n    if (!experiment) return;\n\n    // Check experiment performance every hour\n    const optimizationInterval = setInterval(async () => {\n      try {\n        const result = await this.analyzeExperimentResults(experimentName);\n\n        if (result?.recommendation && result.recommendation.confidence > 0.9) {\n          // High confidence winner found, consider early stopping\n          console.log(\n            `High confidence winner found for ${experimentName}: ` +\n              `${result.recommendation.winningTreatment} (${result.recommendation.confidence})`\n          );\n\n          // Could implement early stopping logic here\n          // await this.stopExperiment(experimentName, 'Auto-optimization: High confidence winner');\n          // clearInterval(optimizationInterval);\n        }\n      } catch (error) {\n        console.error(`Auto-optimization error for ${experimentName}:`, error);\n      }\n    }, 60 * 60 * 1000); // Every hour\n\n    // Stop optimization after experiment duration\n    if (experiment.duration) {\n      setTimeout(() => {\n        clearInterval(optimizationInterval);\n      }, experiment.duration * 24 * 60 * 60 * 1000); // Convert days to ms\n    }\n  }\n\n  /**\n   * Get current experiment status and metrics\n   */\n  async getExperimentStatus(\n    experimentName: string\n  ): Promise<ExperimentResult | null> {\n    return this.experimentResults.get(experimentName) || null;\n  }\n\n  /**\n   * List all active experiments\n   */\n  async listActiveExperiments(): Promise<string[]> {\n    try {\n      const response = await this.client.send(\n        new ListExperimentsCommand({\n          project: this.projectName,\n          status: \"RUNNING\",\n        })\n      );\n\n      return response.experiments?.map((exp) => exp.name || \"\") || [];\n    } catch (error) {\n      console.error(\"Failed to list active experiments:\", error);\n      return [];\n    }\n  }\n\n  /**\n   * Get bandit statistics for monitoring\n   */\n  getBanditStats(\n    context?: BanditContext\n  ): ReturnType<ThompsonBandit[\"getStats\"]> {\n    return this.bandit.getStats(context);\n  }\n\n  /**\n   * Health check for the experiment system\n   */\n  async healthCheck(): Promise<{\n    connected: boolean;\n    projectExists: boolean;\n    activeExperiments: number;\n    banditStats: ReturnType<ThompsonBandit[\"getStats\"]>;\n  }> {\n    try {\n      const activeExperiments = await this.listActiveExperiments();\n      const banditStats = this.getBanditStats();\n\n      return {\n        connected: true,\n        projectExists: true,\n        activeExperiments: activeExperiments.length,\n        banditStats,\n      };\n    } catch (error) {\n      return {\n        connected: false,\n        projectExists: false,\n        activeExperiments: 0,\n        banditStats: this.getBanditStats(),\n      };\n    }\n  }\n}\n\n// Predefined AI experiments for common scenarios\nexport const AI_EXPERIMENTS = {\n  MODEL_ROUTING_OPTIMIZATION: {\n    name: \"ai-model-routing-optimization\",\n    description: \"Optimize AI model routing based on performance and cost\",\n    feature: \"ai-model-routing\",\n    treatments: [\n      {\n        name: \"bedrock-focused\",\n        description: \"Prefer Bedrock Claude for most tasks\",\n        modelProvider: \"bedrock\" as Arm,\n        weight: 40,\n      },\n      {\n        name: \"google-focused\",\n        description: \"Prefer Google Gemini for most tasks\",\n        modelProvider: \"google\" as Arm,\n        weight: 40,\n      },\n      {\n        name: \"meta-focused\",\n        description: \"Prefer Meta Llama for most tasks\",\n        modelProvider: \"meta\" as Arm,\n        weight: 20,\n      },\n    ],\n    metricGoals: [\n      {\n        metricName: \"winRate\",\n        desiredChange: \"INCREASE\" as const,\n        threshold: 0.8,\n        priority: \"HIGH\" as const,\n      },\n      {\n        metricName: \"avgLatency\",\n        desiredChange: \"DECREASE\" as const,\n        threshold: 1000,\n        priority: \"HIGH\" as const,\n      },\n      {\n        metricName: \"avgCost\",\n        desiredChange: \"DECREASE\" as const,\n        threshold: 0.05,\n        priority: \"MEDIUM\" as const,\n      },\n    ],\n    trafficAllocation: 30, // 30% of traffic\n    duration: 14, // 2 weeks\n    autoOptimize: true,\n  },\n  DOMAIN_SPECIFIC_ROUTING: {\n    name: \"domain-specific-ai-routing\",\n    description: \"Test domain-specific AI model preferences\",\n    feature: \"domain-ai-routing\",\n    treatments: [\n      {\n        name: \"legal-bedrock\",\n        description: \"Use Bedrock for legal domain\",\n        modelProvider: \"bedrock\" as Arm,\n        weight: 50,\n      },\n      {\n        name: \"culinary-google\",\n        description: \"Use Google for culinary domain\",\n        modelProvider: \"google\" as Arm,\n        weight: 50,\n      },\n    ],\n    metricGoals: [\n      {\n        metricName: \"qualityScore\",\n        desiredChange: \"INCREASE\" as const,\n        threshold: 0.85,\n        priority: \"HIGH\" as const,\n      },\n      {\n        metricName: \"userSatisfaction\",\n        desiredChange: \"INCREASE\" as const,\n        threshold: 0.8,\n        priority: \"HIGH\" as const,\n      },\n    ],\n    trafficAllocation: 25,\n    duration: 21, // 3 weeks\n    autoOptimize: true,\n  },\n} as const;\n"],"version":3}
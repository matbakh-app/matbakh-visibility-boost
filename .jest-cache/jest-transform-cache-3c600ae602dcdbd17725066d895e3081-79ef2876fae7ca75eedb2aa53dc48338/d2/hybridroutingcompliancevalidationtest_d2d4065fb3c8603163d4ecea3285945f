f223e369f89c60baa1dfa1c731125e6a
"use strict";
/**
 * Hybrid Routing Compliance Validation Tests
 *
 * Tests compliance validation for both direct Bedrock and MCP integration routing paths
 * in the Bedrock Support Manager hybrid architecture.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock dependencies
globals_1.jest.mock("../audit-trail-system", () => ({
    AuditTrailSystem: globals_1.jest.fn().mockImplementation(() => ({
        logEvent: globals_1.jest.fn().mockResolvedValue(undefined),
    })),
}));
globals_1.jest.mock("../basic-logger", () => ({
    BasicLogger: globals_1.jest.fn().mockImplementation(() => ({
        info: globals_1.jest.fn(),
        error: globals_1.jest.fn(),
        warn: globals_1.jest.fn(),
    })),
}));
globals_1.jest.mock("../../compliance/gdpr-compliance-validator", () => ({
    GDPRComplianceValidator: globals_1.jest.fn().mockImplementation(() => ({
        validateCompliance: globals_1.jest.fn().mockResolvedValue({
            overallStatus: "compliant",
            complianceScore: 100,
        }),
    })),
}));
const compliance_integration_1 = require("../compliance-integration");
const gdpr_hybrid_compliance_validator_1 = require("../gdpr-hybrid-compliance-validator");
const provider_agreement_compliance_1 = require("../provider-agreement-compliance");
(0, globals_1.describe)("Hybrid Routing Compliance Validation", () => {
    let complianceIntegration;
    let gdprValidator;
    let providerCompliance;
    let mockRequest;
    (0, globals_1.beforeEach)(() => {
        complianceIntegration = new compliance_integration_1.ComplianceIntegration();
        gdprValidator = new gdpr_hybrid_compliance_validator_1.GDPRHybridComplianceValidator();
        providerCompliance = new provider_agreement_compliance_1.ProviderAgreementCompliance();
        mockRequest = {
            prompt: "Test infrastructure audit request",
            context: {
                domain: "infrastructure",
                intent: "audit",
            },
        };
    });
    (0, globals_1.describe)("Direct Bedrock Routing Path Compliance", () => {
        let directBedrockPath;
        (0, globals_1.beforeEach)(() => {
            directBedrockPath = {
                routeType: "direct_bedrock",
                provider: "bedrock",
                operationType: "infrastructure",
                priority: "critical",
            };
        });
        (0, globals_1.it)("should validate GDPR compliance for direct Bedrock operations", async () => {
            const correlationId = "test-direct-bedrock-gdpr";
            const result = await gdprValidator.validateRoutingPathCompliance(directBedrockPath, correlationId);
            (0, globals_1.expect)(result).toBeDefined();
            (0, globals_1.expect)(result.routingPath.routeType).toBe("direct_bedrock");
            (0, globals_1.expect)(result.routingPath.provider).toBe("bedrock");
            (0, globals_1.expect)(result.correlationId).toBe(correlationId);
            (0, globals_1.expect)(typeof result.isCompliant).toBe("boolean");
            (0, globals_1.expect)(typeof result.complianceScore).toBe("number");
            (0, globals_1.expect)(result.complianceScore).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(result.complianceScore).toBeLessThanOrEqual(100);
        });
        (0, globals_1.it)("should validate provider agreement compliance for direct Bedrock", async () => {
            const result = await complianceIntegration.performComplianceCheck(mockRequest, "bedrock", "test-direct-bedrock-provider");
            (0, globals_1.expect)(result.allowed).toBe(true);
            (0, globals_1.expect)(result.provider).toBe("bedrock");
            (0, globals_1.expect)(result.complianceScore).toBeGreaterThan(80);
            (0, globals_1.expect)(result.agreementStatus).toBe("active");
            (0, globals_1.expect)(result.violations).toHaveLength(0);
        });
        (0, globals_1.it)("should validate data processing compliance for direct Bedrock", async () => {
            const correlationId = "test-direct-bedrock-data-processing";
            const result = await gdprValidator.validateRoutingPathCompliance(directBedrockPath, correlationId);
            (0, globals_1.expect)(result.dataProcessingCompliance).toBeDefined();
            (0, globals_1.expect)(typeof result.dataProcessingCompliance.lawfulBasisDocumented).toBe("boolean");
            (0, globals_1.expect)(typeof result.dataProcessingCompliance.purposeLimitationEnforced).toBe("boolean");
            (0, globals_1.expect)(typeof result.dataProcessingCompliance.dataMinimizationImplemented).toBe("boolean");
            (0, globals_1.expect)(typeof result.dataProcessingCompliance.euDataResidencyCompliant).toBe("boolean");
        });
        (0, globals_1.it)("should validate audit trail compliance for direct Bedrock", async () => {
            const correlationId = "test-direct-bedrock-audit-trail";
            const result = await gdprValidator.validateRoutingPathCompliance(directBedrockPath, correlationId);
            (0, globals_1.expect)(result.auditTrailCompliance).toBeDefined();
            (0, globals_1.expect)(typeof result.auditTrailCompliance.auditLoggingEnabled).toBe("boolean");
            (0, globals_1.expect)(typeof result.auditTrailCompliance.correlationIdTracking).toBe("boolean");
            (0, globals_1.expect)(typeof result.auditTrailCompliance.routingPathLogged).toBe("boolean");
            (0, globals_1.expect)(typeof result.auditTrailCompliance.integrityCheckingEnabled).toBe("boolean");
        });
        (0, globals_1.it)("should validate emergency operations compliance for direct Bedrock", async () => {
            const emergencyPath = {
                routeType: "direct_bedrock",
                provider: "bedrock",
                operationType: "emergency",
                priority: "critical",
            };
            const correlationId = "test-direct-bedrock-emergency";
            const result = await gdprValidator.validateRoutingPathCompliance(emergencyPath, correlationId);
            (0, globals_1.expect)(result.routingPath.operationType).toBe("emergency");
            (0, globals_1.expect)(result.routingPath.priority).toBe("critical");
            // Emergency operations should still maintain compliance
            (0, globals_1.expect)(result.dataProcessingCompliance).toBeDefined();
            (0, globals_1.expect)(result.auditTrailCompliance).toBeDefined();
        });
        (0, globals_1.it)("should validate infrastructure audit operations compliance", async () => {
            const infrastructurePath = {
                routeType: "direct_bedrock",
                provider: "bedrock",
                operationType: "infrastructure",
                priority: "critical",
            };
            const correlationId = "test-direct-bedrock-infrastructure";
            const result = await gdprValidator.validateRoutingPathCompliance(infrastructurePath, correlationId);
            (0, globals_1.expect)(result.routingPath.operationType).toBe("infrastructure");
            // Infrastructure operations should have high compliance requirements
            (0, globals_1.expect)(result.dataProcessingCompliance.euDataResidencyCompliant).toBe(true);
        });
        (0, globals_1.it)("should validate meta monitoring operations compliance", async () => {
            const metaMonitorPath = {
                routeType: "direct_bedrock",
                provider: "bedrock",
                operationType: "meta_monitor",
                priority: "high",
            };
            const correlationId = "test-direct-bedrock-meta-monitor";
            const result = await gdprValidator.validateRoutingPathCompliance(metaMonitorPath, correlationId);
            (0, globals_1.expect)(result.routingPath.operationType).toBe("meta_monitor");
            (0, globals_1.expect)(result.routingPath.priority).toBe("high");
        });
    });
    (0, globals_1.describe)("MCP Integration Routing Path Compliance", () => {
        let mcpIntegrationPath;
        (0, globals_1.beforeEach)(() => {
            mcpIntegrationPath = {
                routeType: "mcp_integration",
                provider: "google",
                operationType: "standard_analysis",
                priority: "medium",
            };
        });
        (0, globals_1.it)("should validate GDPR compliance for MCP integration operations", async () => {
            const correlationId = "test-mcp-integration-gdpr";
            const result = await gdprValidator.validateRoutingPathCompliance(mcpIntegrationPath, correlationId);
            (0, globals_1.expect)(result).toBeDefined();
            (0, globals_1.expect)(result.routingPath.routeType).toBe("mcp_integration");
            (0, globals_1.expect)(result.routingPath.provider).toBe("google");
            (0, globals_1.expect)(result.correlationId).toBe(correlationId);
            (0, globals_1.expect)(typeof result.isCompliant).toBe("boolean");
            (0, globals_1.expect)(typeof result.complianceScore).toBe("number");
        });
        (0, globals_1.it)("should validate provider agreement compliance for MCP integration", async () => {
            const result = await complianceIntegration.performComplianceCheck(mockRequest, "google", "test-mcp-integration-provider");
            (0, globals_1.expect)(result.allowed).toBe(true);
            (0, globals_1.expect)(result.provider).toBe("google");
            (0, globals_1.expect)(result.complianceScore).toBeGreaterThan(70);
            (0, globals_1.expect)(result.agreementStatus).toBe("active");
        });
        (0, globals_1.it)("should validate data processing compliance for MCP integration", async () => {
            const correlationId = "test-mcp-integration-data-processing";
            const result = await gdprValidator.validateRoutingPathCompliance(mcpIntegrationPath, correlationId);
            (0, globals_1.expect)(result.dataProcessingCompliance).toBeDefined();
            (0, globals_1.expect)(typeof result.dataProcessingCompliance.lawfulBasisDocumented).toBe("boolean");
            (0, globals_1.expect)(typeof result.dataProcessingCompliance.purposeLimitationEnforced).toBe("boolean");
            (0, globals_1.expect)(typeof result.dataProcessingCompliance.dataMinimizationImplemented).toBe("boolean");
        });
        (0, globals_1.it)("should validate Kiro communication operations compliance", async () => {
            const kiroCommPath = {
                routeType: "mcp_integration",
                provider: "bedrock",
                operationType: "kiro_communication",
                priority: "medium",
            };
            const correlationId = "test-mcp-integration-kiro-comm";
            const result = await gdprValidator.validateRoutingPathCompliance(kiroCommPath, correlationId);
            (0, globals_1.expect)(result.routingPath.operationType).toBe("kiro_communication");
            (0, globals_1.expect)(result.routingPath.routeType).toBe("mcp_integration");
        });
        (0, globals_1.it)("should validate standard analysis operations compliance", async () => {
            const standardAnalysisPath = {
                routeType: "mcp_integration",
                provider: "google",
                operationType: "standard_analysis",
                priority: "medium",
            };
            const correlationId = "test-mcp-integration-standard-analysis";
            const result = await gdprValidator.validateRoutingPathCompliance(standardAnalysisPath, correlationId);
            (0, globals_1.expect)(result.routingPath.operationType).toBe("standard_analysis");
            (0, globals_1.expect)(result.routingPath.provider).toBe("google");
        });
        (0, globals_1.it)("should validate background tasks operations compliance", async () => {
            const backgroundTasksPath = {
                routeType: "mcp_integration",
                provider: "meta",
                operationType: "background_tasks",
                priority: "low",
            };
            const correlationId = "test-mcp-integration-background-tasks";
            const result = await gdprValidator.validateRoutingPathCompliance(backgroundTasksPath, correlationId);
            (0, globals_1.expect)(result.routingPath.operationType).toBe("background_tasks");
            (0, globals_1.expect)(result.routingPath.priority).toBe("low");
        });
    });
    (0, globals_1.describe)("Cross-Path Compliance Validation", () => {
        (0, globals_1.it)("should validate compliance consistency between routing paths", async () => {
            const directBedrockPath = {
                routeType: "direct_bedrock",
                provider: "bedrock",
                operationType: "infrastructure",
                priority: "critical",
            };
            const mcpIntegrationPath = {
                routeType: "mcp_integration",
                provider: "bedrock",
                operationType: "standard_analysis",
                priority: "medium",
            };
            const directResult = await gdprValidator.validateRoutingPathCompliance(directBedrockPath, "test-cross-path-direct");
            const mcpResult = await gdprValidator.validateRoutingPathCompliance(mcpIntegrationPath, "test-cross-path-mcp");
            // Both paths should maintain consistent compliance standards
            (0, globals_1.expect)(directResult.dataProcessingCompliance.euDataResidencyCompliant).toBe(mcpResult.dataProcessingCompliance.euDataResidencyCompliant);
            (0, globals_1.expect)(directResult.auditTrailCompliance.auditLoggingEnabled).toBe(mcpResult.auditTrailCompliance.auditLoggingEnabled);
        });
        (0, globals_1.it)("should generate comprehensive hybrid compliance report", async () => {
            const report = await gdprValidator.generateHybridComplianceReport();
            (0, globals_1.expect)(report).toBeDefined();
            (0, globals_1.expect)(report.timestamp).toBeInstanceOf(Date);
            (0, globals_1.expect)(["compliant", "non_compliant", "partial"]).toContain(report.overallCompliance);
            (0, globals_1.expect)(typeof report.complianceScore).toBe("number");
            // Validate both routing paths are included
            (0, globals_1.expect)(report.routingPathCompliance.directBedrock).toBeDefined();
            (0, globals_1.expect)(report.routingPathCompliance.mcpIntegration).toBeDefined();
            (0, globals_1.expect)(report.routingPathCompliance.directBedrock.routingPath.routeType).toBe("direct_bedrock");
            (0, globals_1.expect)(report.routingPathCompliance.mcpIntegration.routingPath.routeType).toBe("mcp_integration");
            // Validate cross-path compliance
            (0, globals_1.expect)(report.crossPathCompliance).toBeDefined();
            (0, globals_1.expect)(typeof report.crossPathCompliance.dataConsistency).toBe("boolean");
            (0, globals_1.expect)(typeof report.crossPathCompliance.auditTrailContinuity).toBe("boolean");
            (0, globals_1.expect)(typeof report.crossPathCompliance.consentPropagation).toBe("boolean");
            (0, globals_1.expect)(typeof report.crossPathCompliance.piiHandlingConsistency).toBe("boolean");
        });
        (0, globals_1.it)("should validate routing decision compliance", async () => {
            const directBedrockPath = {
                routeType: "direct_bedrock",
                provider: "bedrock",
                operationType: "emergency",
                priority: "critical",
            };
            const mcpIntegrationPath = {
                routeType: "mcp_integration",
                provider: "google",
                operationType: "standard_analysis",
                priority: "medium",
            };
            const directResult = await gdprValidator.validateBeforeRouting(directBedrockPath, "test-routing-decision-direct");
            const mcpResult = await gdprValidator.validateBeforeRouting(mcpIntegrationPath, "test-routing-decision-mcp");
            (0, globals_1.expect)(directResult).toBeDefined();
            (0, globals_1.expect)(typeof directResult.allowed).toBe("boolean");
            (0, globals_1.expect)(typeof directResult.reason).toBe("string");
            (0, globals_1.expect)(mcpResult).toBeDefined();
            (0, globals_1.expect)(typeof mcpResult.allowed).toBe("boolean");
            (0, globals_1.expect)(typeof mcpResult.reason).toBe("string");
        });
    });
    (0, globals_1.describe)("Provider-Specific Compliance Validation", () => {
        (0, globals_1.it)("should validate AWS Bedrock compliance for both routing paths", async () => {
            const directPath = {
                routeType: "direct_bedrock",
                provider: "bedrock",
                operationType: "infrastructure",
                priority: "critical",
            };
            const mcpPath = {
                routeType: "mcp_integration",
                provider: "bedrock",
                operationType: "kiro_communication",
                priority: "medium",
            };
            const directResult = await gdprValidator.validateRoutingPathCompliance(directPath, "test-bedrock-direct");
            const mcpResult = await gdprValidator.validateRoutingPathCompliance(mcpPath, "test-bedrock-mcp");
            (0, globals_1.expect)(directResult.routingPath.provider).toBe("bedrock");
            (0, globals_1.expect)(mcpResult.routingPath.provider).toBe("bedrock");
            // Both should maintain AWS Bedrock compliance standards
            const directProviderResult = await complianceIntegration.performComplianceCheck(mockRequest, "bedrock", "test-bedrock-direct-provider");
            const mcpProviderResult = await complianceIntegration.performComplianceCheck(mockRequest, "bedrock", "test-bedrock-mcp-provider");
            (0, globals_1.expect)(directProviderResult.allowed).toBe(true);
            (0, globals_1.expect)(mcpProviderResult.allowed).toBe(true);
            (0, globals_1.expect)(directProviderResult.complianceScore).toBeGreaterThan(80);
            (0, globals_1.expect)(mcpProviderResult.complianceScore).toBeGreaterThan(80);
        });
        (0, globals_1.it)("should validate Google AI compliance for MCP integration", async () => {
            const googlePath = {
                routeType: "mcp_integration",
                provider: "google",
                operationType: "standard_analysis",
                priority: "medium",
            };
            const result = await gdprValidator.validateRoutingPathCompliance(googlePath, "test-google-mcp");
            (0, globals_1.expect)(result.routingPath.provider).toBe("google");
            const providerResult = await complianceIntegration.performComplianceCheck(mockRequest, "google", "test-google-provider");
            (0, globals_1.expect)(providerResult.allowed).toBe(true);
            (0, globals_1.expect)(providerResult.complianceScore).toBeGreaterThan(70);
        });
        (0, globals_1.it)("should validate Meta AI compliance for MCP integration", async () => {
            const metaPath = {
                routeType: "mcp_integration",
                provider: "meta",
                operationType: "background_tasks",
                priority: "low",
            };
            const result = await gdprValidator.validateRoutingPathCompliance(metaPath, "test-meta-mcp");
            (0, globals_1.expect)(result.routingPath.provider).toBe("meta");
            const providerResult = await complianceIntegration.performComplianceCheck(mockRequest, "meta", "test-meta-provider");
            (0, globals_1.expect)(providerResult.allowed).toBe(true);
            (0, globals_1.expect)(providerResult.complianceScore).toBeGreaterThan(80);
        });
    });
    (0, globals_1.describe)("Operation Type Compliance Validation", () => {
        const operationTypes = [
            {
                type: "emergency",
                preferredRoute: "direct_bedrock",
                priority: "critical",
            },
            {
                type: "infrastructure",
                preferredRoute: "direct_bedrock",
                priority: "critical",
            },
            {
                type: "meta_monitor",
                preferredRoute: "direct_bedrock",
                priority: "high",
            },
            {
                type: "implementation",
                preferredRoute: "direct_bedrock",
                priority: "high",
            },
            {
                type: "kiro_communication",
                preferredRoute: "mcp_integration",
                priority: "medium",
            },
            {
                type: "standard_analysis",
                preferredRoute: "mcp_integration",
                priority: "medium",
            },
            {
                type: "background_tasks",
                preferredRoute: "mcp_integration",
                priority: "low",
            },
        ];
        operationTypes.forEach(({ type, preferredRoute, priority }) => {
            (0, globals_1.it)(`should validate ${type} operations compliance on ${preferredRoute}`, async () => {
                const path = {
                    routeType: preferredRoute,
                    provider: preferredRoute === "direct_bedrock" ? "bedrock" : "google",
                    operationType: type,
                    priority,
                };
                const result = await gdprValidator.validateRoutingPathCompliance(path, `test-${type}-${preferredRoute}`);
                (0, globals_1.expect)(result.routingPath.operationType).toBe(type);
                (0, globals_1.expect)(result.routingPath.routeType).toBe(preferredRoute);
                (0, globals_1.expect)(result.routingPath.priority).toBe(priority);
                // All operations should maintain basic compliance
                (0, globals_1.expect)(result.dataProcessingCompliance).toBeDefined();
                (0, globals_1.expect)(result.auditTrailCompliance).toBeDefined();
            });
        });
    });
    (0, globals_1.describe)("Priority Level Compliance Validation", () => {
        const priorities = [
            "critical",
            "high",
            "medium",
            "low",
        ];
        priorities.forEach((priority) => {
            (0, globals_1.it)(`should validate ${priority} priority operations compliance`, async () => {
                const directPath = {
                    routeType: "direct_bedrock",
                    provider: "bedrock",
                    operationType: "infrastructure",
                    priority,
                };
                const mcpPath = {
                    routeType: "mcp_integration",
                    provider: "google",
                    operationType: "standard_analysis",
                    priority,
                };
                const directResult = await gdprValidator.validateRoutingPathCompliance(directPath, `test-${priority}-direct`);
                const mcpResult = await gdprValidator.validateRoutingPathCompliance(mcpPath, `test-${priority}-mcp`);
                (0, globals_1.expect)(directResult.routingPath.priority).toBe(priority);
                (0, globals_1.expect)(mcpResult.routingPath.priority).toBe(priority);
                // Higher priority operations should maintain stricter compliance
                if (priority === "critical") {
                    (0, globals_1.expect)(directResult.dataProcessingCompliance.euDataResidencyCompliant).toBe(true);
                    (0, globals_1.expect)(directResult.auditTrailCompliance.auditLoggingEnabled).toBe(true);
                }
            });
        });
    });
    (0, globals_1.describe)("Error Handling and Edge Cases", () => {
        (0, globals_1.it)("should handle invalid provider gracefully", async () => {
            const invalidPath = {
                routeType: "direct_bedrock",
                provider: "invalid",
                operationType: "infrastructure",
                priority: "critical",
            };
            const result = await gdprValidator.validateRoutingPathCompliance(invalidPath, "test-invalid-provider");
            (0, globals_1.expect)(result.isCompliant).toBe(false);
            (0, globals_1.expect)(result.complianceScore).toBe(0);
            (0, globals_1.expect)(result.violations.length).toBeGreaterThan(0);
        });
        (0, globals_1.it)("should handle compliance check failures gracefully", async () => {
            const result = await complianceIntegration.performComplianceCheck(mockRequest, "unknown", "test-compliance-failure");
            (0, globals_1.expect)(result.allowed).toBe(false);
            (0, globals_1.expect)(result.violations.length).toBeGreaterThan(0);
            (0, globals_1.expect)(result.complianceScore).toBe(0);
        });
        (0, globals_1.it)("should validate routing decision with compliance failures", async () => {
            const invalidPath = {
                routeType: "direct_bedrock",
                provider: "invalid",
                operationType: "infrastructure",
                priority: "critical",
            };
            const result = await gdprValidator.validateBeforeRouting(invalidPath, "test-routing-failure");
            (0, globals_1.expect)(result.allowed).toBe(false);
            (0, globals_1.expect)(result.reason).toContain("compliance");
        });
    });
    (0, globals_1.describe)("Compliance Enforcement Integration", () => {
        (0, globals_1.it)("should enforce compliance for direct Bedrock operations", async () => {
            await (0, globals_1.expect)(complianceIntegration.enforceCompliance(mockRequest, "bedrock", "test-enforce-direct-bedrock")).resolves.not.toThrow();
        });
        (0, globals_1.it)("should enforce compliance for MCP integration operations", async () => {
            await (0, globals_1.expect)(complianceIntegration.enforceCompliance(mockRequest, "google", "test-enforce-mcp-integration")).resolves.not.toThrow();
        });
        (0, globals_1.it)("should block non-compliant operations", async () => {
            await (0, globals_1.expect)(complianceIntegration.enforceCompliance(mockRequest, "unknown", "test-enforce-non-compliant")).rejects.toThrow("Compliance violation prevents AI request");
        });
    });
    (0, globals_1.describe)("Compliance Summary and Reporting", () => {
        (0, globals_1.it)("should generate compliance summary for both routing paths", async () => {
            const summary = await complianceIntegration.getComplianceSummary();
            (0, globals_1.expect)(summary.overallCompliance).toMatch(/compliant|warning|non_compliant/);
            (0, globals_1.expect)(summary.providers).toHaveLength(3);
            (0, globals_1.expect)(summary.providers.every((p) => p.provider &&
                typeof p.compliant === "boolean" &&
                typeof p.score === "number")).toBe(true);
            (0, globals_1.expect)(typeof summary.recentViolations).toBe("number");
            (0, globals_1.expect)(typeof summary.pendingActions).toBe("number");
        });
        (0, globals_1.it)("should provide actionable recommendations for compliance improvements", async () => {
            const report = await gdprValidator.generateHybridComplianceReport();
            (0, globals_1.expect)(Array.isArray(report.recommendations)).toBe(true);
            (0, globals_1.expect)(Array.isArray(report.criticalIssues)).toBe(true);
            (0, globals_1.expect)(Array.isArray(report.nextActions)).toBe(true);
            report.nextActions.forEach((action) => {
                (0, globals_1.expect)(typeof action.action).toBe("string");
                (0, globals_1.expect)(["low", "medium", "high", "critical"]).toContain(action.priority);
                (0, globals_1.expect)(action.dueDate).toBeInstanceOf(Date);
                (0, globals_1.expect)(["direct_bedrock", "mcp_integration", "both"]).toContain(action.routingPath);
            });
        });
    });
    (0, globals_1.describe)("Requirement Validation", () => {
        (0, globals_1.it)("should meet Requirement 7: Compliance and Security Maintenance", async () => {
            // Test that all existing GDPR compliance measures remain intact
            const directPath = {
                routeType: "direct_bedrock",
                provider: "bedrock",
                operationType: "infrastructure",
                priority: "critical",
            };
            const mcpPath = {
                routeType: "mcp_integration",
                provider: "google",
                operationType: "standard_analysis",
                priority: "medium",
            };
            const directResult = await gdprValidator.validateRoutingPathCompliance(directPath, "test-req7-direct");
            const mcpResult = await gdprValidator.validateRoutingPathCompliance(mcpPath, "test-req7-mcp");
            // GDPR compliance measures should remain intact
            (0, globals_1.expect)(directResult.dataProcessingCompliance.euDataResidencyCompliant).toBe(true);
            (0, globals_1.expect)(mcpResult.dataProcessingCompliance.euDataResidencyCompliant).toBe(true);
            // Audit trails should capture all activities
            (0, globals_1.expect)(directResult.auditTrailCompliance.auditLoggingEnabled).toBe(true);
            (0, globals_1.expect)(mcpResult.auditTrailCompliance.auditLoggingEnabled).toBe(true);
        });
        (0, globals_1.it)("should meet Requirement 5: Controlled Integration with Existing Systems", async () => {
            // Test that compliance integration works with existing systems
            const bedrockResult = await complianceIntegration.performComplianceCheck(mockRequest, "bedrock", "test-req5-bedrock");
            const googleResult = await complianceIntegration.performComplianceCheck(mockRequest, "google", "test-req5-google");
            // Existing compliance systems should continue to function
            (0, globals_1.expect)(bedrockResult.allowed).toBe(true);
            (0, globals_1.expect)(googleResult.allowed).toBe(true);
            (0, globals_1.expect)(bedrockResult.complianceScore).toBeGreaterThan(80);
            (0, globals_1.expect)(googleResult.complianceScore).toBeGreaterThan(70);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
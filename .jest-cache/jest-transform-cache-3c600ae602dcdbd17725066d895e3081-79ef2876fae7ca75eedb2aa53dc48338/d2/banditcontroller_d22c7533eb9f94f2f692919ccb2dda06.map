{"version":3,"names":["cov_2flltggf67","actualCoverage","s","client_evidently_1","require","crypto_1","ThompsonBandit","constructor","f","arms","bedrock","wins","trials","costEuro","totalLatencyMs","google","meta","contextualArms","Map","choose","context","contextKey","getContextKey","getArmsForContext","sampleBeta","alpha","beta","b","Math","random","best","bestScore","Object","keys","forEach","arm","stats","score","adjustScoreForContext","record","win","latencyMs","globalStats","getStats","result","assign","winRate","avgLatency","avgCost","parts","domain","budgetTier","requireTools","join","has","set","get","max","min","resetContext","delete","getBestArm","bestArm","bestWinRate","armStats","confidence","exports","BanditLogger","opts","client","_a","EvidentlyClient","logOutcome","params","userId","success","requestId","entityId","randomUUID","send","PutProjectEventsCommand","project","events","timestamp","Date","type","data","model_route","latency_ms","cost_euro","budget_tier","require_tools","request_id","now","error","console","logExperimentEvent","experimentName","variation","metricName","metricValue","experiment_name","metric_name","metric_value","logBatch","length","evidentlyEvents","map","event"],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/bandit-controller.ts"],"sourcesContent":["import { EvidentlyClient, PutProjectEventsCommand } from '@aws-sdk/client-evidently';\nimport { randomUUID } from 'crypto';\n\nexport interface ArmStats {\n    wins: number;\n    trials: number;\n    costEuro: number;\n    totalLatencyMs: number;\n}\n\nexport type Arm = 'bedrock' | 'google' | 'meta';\n\nexport interface BanditContext {\n    domain?: string;\n    budgetTier?: string;\n    requireTools?: boolean;\n    userId?: string;\n}\n\nexport class ThompsonBandit {\n    private arms: Record<Arm, ArmStats> = {\n        bedrock: { wins: 0, trials: 0, costEuro: 0, totalLatencyMs: 0 },\n        google: { wins: 0, trials: 0, costEuro: 0, totalLatencyMs: 0 },\n        meta: { wins: 0, trials: 0, costEuro: 0, totalLatencyMs: 0 },\n    };\n\n    // Contextual bandit - different arms for different contexts\n    private contextualArms: Map<string, Record<Arm, ArmStats>> = new Map();\n\n    choose(context?: BanditContext): Arm {\n        const contextKey = this.getContextKey(context);\n        const arms = this.getArmsForContext(contextKey);\n\n        const sampleBeta = (alpha: number, beta: number) => {\n            // Simple Beta(α, β) sampler via mean approximation for brevity\n            // In production, use proper Beta distribution sampling\n            if (alpha + beta === 0) return Math.random();\n            return alpha / (alpha + beta) + (Math.random() - 0.5) * 0.1;\n        };\n\n        let best: Arm = 'bedrock';\n        let bestScore = -1;\n\n        (Object.keys(arms) as Arm[]).forEach(arm => {\n            const stats = arms[arm];\n\n            // Thompson Sampling with Beta distribution\n            const alpha = 1 + stats.wins;\n            const beta = 1 + (stats.trials - stats.wins);\n            let score = sampleBeta(alpha, beta);\n\n            // Adjust score based on context preferences\n            score = this.adjustScoreForContext(score, arm, context);\n\n            if (score > bestScore) {\n                bestScore = score;\n                best = arm;\n            }\n        });\n\n        return best;\n    }\n\n    record(arm: Arm, win: boolean, costEuro: number, latencyMs: number, context?: BanditContext) {\n        const contextKey = this.getContextKey(context);\n        const arms = this.getArmsForContext(contextKey);\n\n        const stats = arms[arm];\n        stats.trials += 1;\n        stats.wins += win ? 1 : 0;\n        stats.costEuro += costEuro;\n        stats.totalLatencyMs += latencyMs;\n\n        // Also update global stats\n        const globalStats = this.arms[arm];\n        globalStats.trials += 1;\n        globalStats.wins += win ? 1 : 0;\n        globalStats.costEuro += costEuro;\n        globalStats.totalLatencyMs += latencyMs;\n    }\n\n    getStats(context?: BanditContext): Record<Arm, ArmStats & { winRate: number; avgLatency: number; avgCost: number }> {\n        const contextKey = this.getContextKey(context);\n        const arms = this.getArmsForContext(contextKey);\n\n        const result = {} as any;\n        (Object.keys(arms) as Arm[]).forEach(arm => {\n            const stats = arms[arm];\n            result[arm] = {\n                ...stats,\n                winRate: stats.trials > 0 ? stats.wins / stats.trials : 0,\n                avgLatency: stats.trials > 0 ? stats.totalLatencyMs / stats.trials : 0,\n                avgCost: stats.trials > 0 ? stats.costEuro / stats.trials : 0,\n            };\n        });\n\n        return result;\n    }\n\n    private getContextKey(context?: BanditContext): string {\n        if (!context) return 'global';\n\n        const parts = [\n            context.domain || 'general',\n            context.budgetTier || 'standard',\n            context.requireTools ? 'tools' : 'no-tools'\n        ];\n\n        return parts.join('|');\n    }\n\n    private getArmsForContext(contextKey: string): Record<Arm, ArmStats> {\n        if (!this.contextualArms.has(contextKey)) {\n            this.contextualArms.set(contextKey, {\n                bedrock: { wins: 0, trials: 0, costEuro: 0, totalLatencyMs: 0 },\n                google: { wins: 0, trials: 0, costEuro: 0, totalLatencyMs: 0 },\n                meta: { wins: 0, trials: 0, costEuro: 0, totalLatencyMs: 0 },\n            });\n        }\n        return this.contextualArms.get(contextKey)!;\n    }\n\n    private adjustScoreForContext(score: number, arm: Arm, context?: BanditContext): number {\n        if (!context) return score;\n\n        // Domain-specific adjustments\n        if (context.domain === 'legal' && arm === 'bedrock') {\n            score += 0.1; // Prefer Claude for legal\n        }\n        if (context.domain === 'culinary' && arm === 'google') {\n            score += 0.05; // Slight preference for Gemini in culinary\n        }\n        if (context.domain === 'medical' && arm !== 'bedrock') {\n            score -= 0.2; // Strong preference for Claude in medical\n        }\n\n        // Budget tier adjustments\n        if (context.budgetTier === 'low' && arm === 'meta') {\n            score += 0.1; // Prefer cheaper models for low budget\n        }\n        if (context.budgetTier === 'premium' && arm === 'bedrock') {\n            score += 0.05; // Slight preference for premium models\n        }\n\n        // Tool requirements\n        if (context.requireTools && arm === 'meta') {\n            score -= 0.3; // Meta doesn't support tools well\n        }\n\n        return Math.max(0, Math.min(1, score));\n    }\n\n    // Reset stats for a specific context (useful for A/B test resets)\n    resetContext(context?: BanditContext) {\n        const contextKey = this.getContextKey(context);\n        this.contextualArms.delete(contextKey);\n    }\n\n    // Get the best performing arm for a context\n    getBestArm(context?: BanditContext): { arm: Arm; confidence: number } {\n        const stats = this.getStats(context);\n        let bestArm: Arm = 'bedrock';\n        let bestWinRate = -1;\n\n        (Object.keys(stats) as Arm[]).forEach(arm => {\n            const armStats = stats[arm];\n            if (armStats.trials > 10 && armStats.winRate > bestWinRate) { // Minimum trials for confidence\n                bestWinRate = armStats.winRate;\n                bestArm = arm;\n            }\n        });\n\n        const confidence = stats[bestArm].trials > 50 ?\n            Math.min(0.95, stats[bestArm].winRate + 0.1) :\n            Math.max(0.5, stats[bestArm].winRate);\n\n        return { arm: bestArm, confidence };\n    }\n}\n\nexport interface BanditLoggerOpts {\n    project: string; // Evidently project name\n    client?: EvidentlyClient;\n}\n\nexport class BanditLogger {\n    private client: EvidentlyClient;\n\n    constructor(private readonly opts: BanditLoggerOpts) {\n        this.client = opts.client ?? new EvidentlyClient({});\n    }\n\n    async logOutcome(params: {\n        userId?: string;\n        arm: Arm;\n        success: boolean;\n        latencyMs: number;\n        costEuro: number;\n        domain?: string;\n        budgetTier?: string;\n        requireTools?: boolean;\n        requestId?: string;\n    }) {\n        const {\n            userId,\n            arm,\n            success,\n            latencyMs,\n            costEuro,\n            domain,\n            budgetTier,\n            requireTools,\n            requestId\n        } = params;\n\n        const entityId = userId ?? randomUUID();\n\n        try {\n            await this.client.send(new PutProjectEventsCommand({\n                project: this.opts.project,\n                events: [{\n                    timestamp: new Date(),\n                    type: 'aws.evidently.custom',\n                    data: {\n                        // Core metrics\n                        model_route: arm,\n                        success,\n                        latency_ms: latencyMs,\n                        cost_euro: costEuro,\n\n                        // Context information\n                        domain: domain || 'general',\n                        budget_tier: budgetTier || 'standard',\n                        require_tools: requireTools || false,\n\n                        // Tracking\n                        request_id: requestId || randomUUID(),\n                        timestamp: Date.now(),\n                    },\n                    entityId,\n                }],\n            }));\n        } catch (error) {\n            // Log error but don't throw - logging failures shouldn't break the main flow\n            console.error('Failed to log bandit outcome to Evidently:', error);\n        }\n    }\n\n    async logExperimentEvent(params: {\n        userId?: string;\n        experimentName: string;\n        variation: string;\n        metricName: string;\n        metricValue: number;\n        context?: Record<string, any>;\n    }) {\n        const { userId, experimentName, variation, metricName, metricValue, context } = params;\n        const entityId = userId ?? randomUUID();\n\n        try {\n            await this.client.send(new PutProjectEventsCommand({\n                project: this.opts.project,\n                events: [{\n                    timestamp: new Date(),\n                    type: 'aws.evidently.custom',\n                    data: {\n                        experiment_name: experimentName,\n                        variation,\n                        metric_name: metricName,\n                        metric_value: metricValue,\n                        ...context,\n                    },\n                    entityId,\n                }],\n            }));\n        } catch (error) {\n            console.error('Failed to log experiment event to Evidently:', error);\n        }\n    }\n\n    // Batch logging for better performance\n    async logBatch(events: Array<{\n        userId?: string;\n        arm: Arm;\n        success: boolean;\n        latencyMs: number;\n        costEuro: number;\n        domain?: string;\n        requestId?: string;\n    }>) {\n        if (events.length === 0) return;\n\n        try {\n            const evidentlyEvents = events.map(event => ({\n                timestamp: new Date(),\n                type: 'aws.evidently.custom' as const,\n                data: {\n                    model_route: event.arm,\n                    success: event.success,\n                    latency_ms: event.latencyMs,\n                    cost_euro: event.costEuro,\n                    domain: event.domain || 'general',\n                    request_id: event.requestId || randomUUID(),\n                },\n                entityId: event.userId ?? randomUUID(),\n            }));\n\n            await this.client.send(new PutProjectEventsCommand({\n                project: this.opts.project,\n                events: evidentlyEvents,\n            }));\n        } catch (error) {\n            console.error('Failed to log batch events to Evidently:', error);\n        }\n    }\n}"],"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","ignoreList":[]}
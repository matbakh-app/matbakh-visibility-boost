5f628b0266d7773777e804df4af000f9
"use strict";

/* istanbul ignore next */
function cov_2flltggf67() {
  var path = "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/bandit-controller.ts";
  var hash = "56b116eadb06209976a3e7971a21deab4390aee6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/bandit-controller.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 55
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 27
        },
        end: {
          line: 5,
          column: 63
        }
      },
      "4": {
        start: {
          line: 6,
          column: 17
        },
        end: {
          line: 6,
          column: 34
        }
      },
      "5": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 13,
          column: 10
        }
      },
      "6": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 40
        }
      },
      "7": {
        start: {
          line: 18,
          column: 27
        },
        end: {
          line: 18,
          column: 54
        }
      },
      "8": {
        start: {
          line: 19,
          column: 21
        },
        end: {
          line: 19,
          column: 55
        }
      },
      "9": {
        start: {
          line: 20,
          column: 27
        },
        end: {
          line: 26,
          column: 9
        }
      },
      "10": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 24,
          column: 37
        }
      },
      "11": {
        start: {
          line: 24,
          column: 16
        },
        end: {
          line: 24,
          column: 37
        }
      },
      "12": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 72
        }
      },
      "13": {
        start: {
          line: 27,
          column: 19
        },
        end: {
          line: 27,
          column: 28
        }
      },
      "14": {
        start: {
          line: 28,
          column: 24
        },
        end: {
          line: 28,
          column: 26
        }
      },
      "15": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 41,
          column: 11
        }
      },
      "16": {
        start: {
          line: 30,
          column: 26
        },
        end: {
          line: 30,
          column: 35
        }
      },
      "17": {
        start: {
          line: 32,
          column: 26
        },
        end: {
          line: 32,
          column: 40
        }
      },
      "18": {
        start: {
          line: 33,
          column: 25
        },
        end: {
          line: 33,
          column: 56
        }
      },
      "19": {
        start: {
          line: 34,
          column: 24
        },
        end: {
          line: 34,
          column: 47
        }
      },
      "20": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 68
        }
      },
      "21": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 40,
          column: 13
        }
      },
      "22": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 34
        }
      },
      "23": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 39,
          column: 27
        }
      },
      "24": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 20
        }
      },
      "25": {
        start: {
          line: 45,
          column: 27
        },
        end: {
          line: 45,
          column: 54
        }
      },
      "26": {
        start: {
          line: 46,
          column: 21
        },
        end: {
          line: 46,
          column: 55
        }
      },
      "27": {
        start: {
          line: 47,
          column: 22
        },
        end: {
          line: 47,
          column: 31
        }
      },
      "28": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 26
        }
      },
      "29": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 34
        }
      },
      "30": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 35
        }
      },
      "31": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 42
        }
      },
      "32": {
        start: {
          line: 53,
          column: 28
        },
        end: {
          line: 53,
          column: 42
        }
      },
      "33": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 32
        }
      },
      "34": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 40
        }
      },
      "35": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 41
        }
      },
      "36": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 48
        }
      },
      "37": {
        start: {
          line: 60,
          column: 27
        },
        end: {
          line: 60,
          column: 54
        }
      },
      "38": {
        start: {
          line: 61,
          column: 21
        },
        end: {
          line: 61,
          column: 55
        }
      },
      "39": {
        start: {
          line: 62,
          column: 23
        },
        end: {
          line: 62,
          column: 25
        }
      },
      "40": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 66,
          column: 11
        }
      },
      "41": {
        start: {
          line: 64,
          column: 26
        },
        end: {
          line: 64,
          column: 35
        }
      },
      "42": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 264
        }
      },
      "43": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 22
        }
      },
      "44": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 71,
          column: 28
        }
      },
      "45": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 28
        }
      },
      "46": {
        start: {
          line: 72,
          column: 22
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "47": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 31
        }
      },
      "48": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "49": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 85,
          column: 15
        }
      },
      "50": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 51
        }
      },
      "51": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 91,
          column: 25
        }
      },
      "52": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 25
        }
      },
      "53": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "54": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 25
        }
      },
      "55": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "56": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 26
        }
      },
      "57": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "58": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 25
        }
      },
      "59": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "60": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 25
        }
      },
      "61": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "62": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 26
        }
      },
      "63": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "64": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 25
        }
      },
      "65": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 47
        }
      },
      "66": {
        start: {
          line: 117,
          column: 27
        },
        end: {
          line: 117,
          column: 54
        }
      },
      "67": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 47
        }
      },
      "68": {
        start: {
          line: 122,
          column: 22
        },
        end: {
          line: 122,
          column: 44
        }
      },
      "69": {
        start: {
          line: 123,
          column: 22
        },
        end: {
          line: 123,
          column: 31
        }
      },
      "70": {
        start: {
          line: 124,
          column: 26
        },
        end: {
          line: 124,
          column: 28
        }
      },
      "71": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 131,
          column: 11
        }
      },
      "72": {
        start: {
          line: 126,
          column: 29
        },
        end: {
          line: 126,
          column: 39
        }
      },
      "73": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 130,
          column: 13
        }
      },
      "74": {
        start: {
          line: 128,
          column: 16
        },
        end: {
          line: 128,
          column: 47
        }
      },
      "75": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 129,
          column: 30
        }
      },
      "76": {
        start: {
          line: 132,
          column: 27
        },
        end: {
          line: 134,
          column: 49
        }
      },
      "77": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 44
        }
      },
      "78": {
        start: {
          line: 138,
          column: 0
        },
        end: {
          line: 138,
          column: 40
        }
      },
      "79": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 142,
          column: 25
        }
      },
      "80": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 143,
          column: 117
        }
      },
      "81": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 177,
          column: 11
        }
      },
      "82": {
        start: {
          line: 147,
          column: 111
        },
        end: {
          line: 147,
          column: 117
        }
      },
      "83": {
        start: {
          line: 148,
          column: 29
        },
        end: {
          line: 148,
          column: 103
        }
      },
      "84": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 176,
          column: 13
        }
      },
      "85": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 171,
          column: 20
        }
      },
      "86": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 175,
          column: 83
        }
      },
      "87": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 197,
          column: 11
        }
      },
      "88": {
        start: {
          line: 181,
          column: 92
        },
        end: {
          line: 181,
          column: 98
        }
      },
      "89": {
        start: {
          line: 182,
          column: 29
        },
        end: {
          line: 182,
          column: 103
        }
      },
      "90": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 196,
          column: 13
        }
      },
      "91": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 192,
          column: 20
        }
      },
      "92": {
        start: {
          line: 195,
          column: 16
        },
        end: {
          line: 195,
          column: 85
        }
      },
      "93": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 229,
          column: 11
        }
      },
      "94": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 203,
          column: 23
        }
      },
      "95": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 203,
          column: 23
        }
      },
      "96": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 228,
          column: 13
        }
      },
      "97": {
        start: {
          line: 205,
          column: 40
        },
        end: {
          line: 220,
          column: 18
        }
      },
      "98": {
        start: {
          line: 207,
          column: 20
        },
        end: {
          line: 219,
          column: 23
        }
      },
      "99": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 224,
          column: 20
        }
      },
      "100": {
        start: {
          line: 227,
          column: 16
        },
        end: {
          line: 227,
          column: 81
        }
      },
      "101": {
        start: {
          line: 232,
          column: 0
        },
        end: {
          line: 232,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 18
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 20
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 27
          },
          end: {
            line: 20,
            column: 28
          }
        },
        loc: {
          start: {
            line: 20,
            column: 44
          },
          end: {
            line: 26,
            column: 9
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 29,
            column: 34
          },
          end: {
            line: 29,
            column: 35
          }
        },
        loc: {
          start: {
            line: 29,
            column: 41
          },
          end: {
            line: 41,
            column: 9
          }
        },
        line: 29
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        loc: {
          start: {
            line: 44,
            column: 51
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 44
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        },
        loc: {
          start: {
            line: 59,
            column: 22
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 59
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 63,
            column: 34
          },
          end: {
            line: 63,
            column: 35
          }
        },
        loc: {
          start: {
            line: 63,
            column: 41
          },
          end: {
            line: 66,
            column: 9
          }
        },
        line: 63
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 27
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 69
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 34
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 79
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        },
        loc: {
          start: {
            line: 89,
            column: 47
          },
          end: {
            line: 114,
            column: 5
          }
        },
        line: 89
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        },
        loc: {
          start: {
            line: 116,
            column: 26
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 116
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 121,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        },
        loc: {
          start: {
            line: 121,
            column: 24
          },
          end: {
            line: 136,
            column: 5
          }
        },
        line: 121
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 125,
            column: 35
          },
          end: {
            line: 125,
            column: 36
          }
        },
        loc: {
          start: {
            line: 125,
            column: 42
          },
          end: {
            line: 131,
            column: 9
          }
        },
        line: 125
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 140,
            column: 4
          },
          end: {
            line: 140,
            column: 5
          }
        },
        loc: {
          start: {
            line: 140,
            column: 22
          },
          end: {
            line: 144,
            column: 5
          }
        },
        line: 140
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 145,
            column: 4
          },
          end: {
            line: 145,
            column: 5
          }
        },
        loc: {
          start: {
            line: 145,
            column: 23
          },
          end: {
            line: 178,
            column: 5
          }
        },
        line: 145
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 146,
            column: 55
          },
          end: {
            line: 146,
            column: 56
          }
        },
        loc: {
          start: {
            line: 146,
            column: 68
          },
          end: {
            line: 177,
            column: 9
          }
        },
        line: 146
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 179,
            column: 4
          },
          end: {
            line: 179,
            column: 5
          }
        },
        loc: {
          start: {
            line: 179,
            column: 31
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 179
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 180,
            column: 55
          },
          end: {
            line: 180,
            column: 56
          }
        },
        loc: {
          start: {
            line: 180,
            column: 68
          },
          end: {
            line: 197,
            column: 9
          }
        },
        line: 180
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 200,
            column: 4
          },
          end: {
            line: 200,
            column: 5
          }
        },
        loc: {
          start: {
            line: 200,
            column: 21
          },
          end: {
            line: 230,
            column: 5
          }
        },
        line: 200
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 201,
            column: 55
          },
          end: {
            line: 201,
            column: 56
          }
        },
        loc: {
          start: {
            line: 201,
            column: 68
          },
          end: {
            line: 229,
            column: 9
          }
        },
        line: 201
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 205,
            column: 51
          },
          end: {
            line: 205,
            column: 52
          }
        },
        loc: {
          start: {
            line: 205,
            column: 60
          },
          end: {
            line: 220,
            column: 17
          }
        },
        line: 205
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 24,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 24,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 37,
            column: 12
          },
          end: {
            line: 40,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 12
          },
          end: {
            line: 40,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "2": {
        loc: {
          start: {
            line: 49,
            column: 22
          },
          end: {
            line: 49,
            column: 33
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 49,
            column: 28
          },
          end: {
            line: 49,
            column: 29
          }
        }, {
          start: {
            line: 49,
            column: 32
          },
          end: {
            line: 49,
            column: 33
          }
        }],
        line: 49
      },
      "3": {
        loc: {
          start: {
            line: 55,
            column: 28
          },
          end: {
            line: 55,
            column: 39
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 55,
            column: 34
          },
          end: {
            line: 55,
            column: 35
          }
        }, {
          start: {
            line: 55,
            column: 38
          },
          end: {
            line: 55,
            column: 39
          }
        }],
        line: 55
      },
      "4": {
        loc: {
          start: {
            line: 65,
            column: 77
          },
          end: {
            line: 65,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 65,
            column: 96
          },
          end: {
            line: 65,
            column: 121
          }
        }, {
          start: {
            line: 65,
            column: 124
          },
          end: {
            line: 65,
            column: 125
          }
        }],
        line: 65
      },
      "5": {
        loc: {
          start: {
            line: 65,
            column: 139
          },
          end: {
            line: 65,
            column: 197
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 65,
            column: 158
          },
          end: {
            line: 65,
            column: 193
          }
        }, {
          start: {
            line: 65,
            column: 196
          },
          end: {
            line: 65,
            column: 197
          }
        }],
        line: 65
      },
      "6": {
        loc: {
          start: {
            line: 65,
            column: 208
          },
          end: {
            line: 65,
            column: 260
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 65,
            column: 227
          },
          end: {
            line: 65,
            column: 256
          }
        }, {
          start: {
            line: 65,
            column: 259
          },
          end: {
            line: 65,
            column: 260
          }
        }],
        line: 65
      },
      "7": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 71,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 71,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "8": {
        loc: {
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 73,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 73,
            column: 26
          }
        }, {
          start: {
            line: 73,
            column: 30
          },
          end: {
            line: 73,
            column: 39
          }
        }],
        line: 73
      },
      "9": {
        loc: {
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 74,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 74,
            column: 30
          }
        }, {
          start: {
            line: 74,
            column: 34
          },
          end: {
            line: 74,
            column: 44
          }
        }],
        line: 74
      },
      "10": {
        loc: {
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 75,
            column: 55
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 75,
            column: 35
          },
          end: {
            line: 75,
            column: 42
          }
        }, {
          start: {
            line: 75,
            column: 45
          },
          end: {
            line: 75,
            column: 55
          }
        }],
        line: 75
      },
      "11": {
        loc: {
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "12": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 91,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 91,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "13": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "14": {
        loc: {
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 93,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 93,
            column: 38
          }
        }, {
          start: {
            line: 93,
            column: 42
          },
          end: {
            line: 93,
            column: 59
          }
        }],
        line: 93
      },
      "15": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "16": {
        loc: {
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 96,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 96,
            column: 41
          }
        }, {
          start: {
            line: 96,
            column: 45
          },
          end: {
            line: 96,
            column: 61
          }
        }],
        line: 96
      },
      "17": {
        loc: {
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "18": {
        loc: {
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 99,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 99,
            column: 40
          }
        }, {
          start: {
            line: 99,
            column: 44
          },
          end: {
            line: 99,
            column: 61
          }
        }],
        line: 99
      },
      "19": {
        loc: {
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "20": {
        loc: {
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 103,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 103,
            column: 40
          }
        }, {
          start: {
            line: 103,
            column: 44
          },
          end: {
            line: 103,
            column: 58
          }
        }],
        line: 103
      },
      "21": {
        loc: {
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "22": {
        loc: {
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 106,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 106,
            column: 44
          }
        }, {
          start: {
            line: 106,
            column: 48
          },
          end: {
            line: 106,
            column: 65
          }
        }],
        line: 106
      },
      "23": {
        loc: {
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "24": {
        loc: {
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 110,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 110,
            column: 32
          }
        }, {
          start: {
            line: 110,
            column: 36
          },
          end: {
            line: 110,
            column: 50
          }
        }],
        line: 110
      },
      "25": {
        loc: {
          start: {
            line: 127,
            column: 12
          },
          end: {
            line: 130,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 12
          },
          end: {
            line: 130,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "26": {
        loc: {
          start: {
            line: 127,
            column: 16
          },
          end: {
            line: 127,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 16
          },
          end: {
            line: 127,
            column: 36
          }
        }, {
          start: {
            line: 127,
            column: 40
          },
          end: {
            line: 127,
            column: 70
          }
        }],
        line: 127
      },
      "27": {
        loc: {
          start: {
            line: 132,
            column: 27
          },
          end: {
            line: 134,
            column: 49
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 133,
            column: 56
          }
        }, {
          start: {
            line: 134,
            column: 12
          },
          end: {
            line: 134,
            column: 49
          }
        }],
        line: 132
      },
      "28": {
        loc: {
          start: {
            line: 143,
            column: 22
          },
          end: {
            line: 143,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 143,
            column: 69
          },
          end: {
            line: 143,
            column: 71
          }
        }, {
          start: {
            line: 143,
            column: 74
          },
          end: {
            line: 143,
            column: 116
          }
        }],
        line: 143
      },
      "29": {
        loc: {
          start: {
            line: 143,
            column: 22
          },
          end: {
            line: 143,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 143,
            column: 22
          },
          end: {
            line: 143,
            column: 49
          }
        }, {
          start: {
            line: 143,
            column: 53
          },
          end: {
            line: 143,
            column: 66
          }
        }],
        line: 143
      },
      "30": {
        loc: {
          start: {
            line: 148,
            column: 29
          },
          end: {
            line: 148,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 148,
            column: 68
          },
          end: {
            line: 148,
            column: 74
          }
        }, {
          start: {
            line: 148,
            column: 77
          },
          end: {
            line: 148,
            column: 103
          }
        }],
        line: 148
      },
      "31": {
        loc: {
          start: {
            line: 148,
            column: 29
          },
          end: {
            line: 148,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 148,
            column: 29
          },
          end: {
            line: 148,
            column: 44
          }
        }, {
          start: {
            line: 148,
            column: 48
          },
          end: {
            line: 148,
            column: 65
          }
        }],
        line: 148
      },
      "32": {
        loc: {
          start: {
            line: 162,
            column: 40
          },
          end: {
            line: 162,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 162,
            column: 40
          },
          end: {
            line: 162,
            column: 46
          }
        }, {
          start: {
            line: 162,
            column: 50
          },
          end: {
            line: 162,
            column: 59
          }
        }],
        line: 162
      },
      "33": {
        loc: {
          start: {
            line: 163,
            column: 45
          },
          end: {
            line: 163,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 163,
            column: 45
          },
          end: {
            line: 163,
            column: 55
          }
        }, {
          start: {
            line: 163,
            column: 59
          },
          end: {
            line: 163,
            column: 69
          }
        }],
        line: 163
      },
      "34": {
        loc: {
          start: {
            line: 164,
            column: 47
          },
          end: {
            line: 164,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 164,
            column: 47
          },
          end: {
            line: 164,
            column: 59
          }
        }, {
          start: {
            line: 164,
            column: 63
          },
          end: {
            line: 164,
            column: 68
          }
        }],
        line: 164
      },
      "35": {
        loc: {
          start: {
            line: 166,
            column: 44
          },
          end: {
            line: 166,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 166,
            column: 44
          },
          end: {
            line: 166,
            column: 53
          }
        }, {
          start: {
            line: 166,
            column: 57
          },
          end: {
            line: 166,
            column: 83
          }
        }],
        line: 166
      },
      "36": {
        loc: {
          start: {
            line: 182,
            column: 29
          },
          end: {
            line: 182,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 182,
            column: 68
          },
          end: {
            line: 182,
            column: 74
          }
        }, {
          start: {
            line: 182,
            column: 77
          },
          end: {
            line: 182,
            column: 103
          }
        }],
        line: 182
      },
      "37": {
        loc: {
          start: {
            line: 182,
            column: 29
          },
          end: {
            line: 182,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 182,
            column: 29
          },
          end: {
            line: 182,
            column: 44
          }
        }, {
          start: {
            line: 182,
            column: 48
          },
          end: {
            line: 182,
            column: 65
          }
        }],
        line: 182
      },
      "38": {
        loc: {
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 203,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 203,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "39": {
        loc: {
          start: {
            line: 215,
            column: 36
          },
          end: {
            line: 215,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 215,
            column: 36
          },
          end: {
            line: 215,
            column: 48
          }
        }, {
          start: {
            line: 215,
            column: 52
          },
          end: {
            line: 215,
            column: 61
          }
        }],
        line: 215
      },
      "40": {
        loc: {
          start: {
            line: 216,
            column: 40
          },
          end: {
            line: 216,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 216,
            column: 40
          },
          end: {
            line: 216,
            column: 55
          }
        }, {
          start: {
            line: 216,
            column: 59
          },
          end: {
            line: 216,
            column: 85
          }
        }],
        line: 216
      },
      "41": {
        loc: {
          start: {
            line: 218,
            column: 34
          },
          end: {
            line: 218,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 218,
            column: 82
          },
          end: {
            line: 218,
            column: 84
          }
        }, {
          start: {
            line: 218,
            column: 87
          },
          end: {
            line: 218,
            column: 113
          }
        }],
        line: 218
      },
      "42": {
        loc: {
          start: {
            line: 218,
            column: 34
          },
          end: {
            line: 218,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 218,
            column: 34
          },
          end: {
            line: 218,
            column: 62
          }
        }, {
          start: {
            line: 218,
            column: 66
          },
          end: {
            line: 218,
            column: 79
          }
        }],
        line: 218
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/bandit-controller.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/bandit-controller.ts"],
      sourcesContent: ["import { EvidentlyClient, PutProjectEventsCommand } from '@aws-sdk/client-evidently';\nimport { randomUUID } from 'crypto';\n\nexport interface ArmStats {\n    wins: number;\n    trials: number;\n    costEuro: number;\n    totalLatencyMs: number;\n}\n\nexport type Arm = 'bedrock' | 'google' | 'meta';\n\nexport interface BanditContext {\n    domain?: string;\n    budgetTier?: string;\n    requireTools?: boolean;\n    userId?: string;\n}\n\nexport class ThompsonBandit {\n    private arms: Record<Arm, ArmStats> = {\n        bedrock: { wins: 0, trials: 0, costEuro: 0, totalLatencyMs: 0 },\n        google: { wins: 0, trials: 0, costEuro: 0, totalLatencyMs: 0 },\n        meta: { wins: 0, trials: 0, costEuro: 0, totalLatencyMs: 0 },\n    };\n\n    // Contextual bandit - different arms for different contexts\n    private contextualArms: Map<string, Record<Arm, ArmStats>> = new Map();\n\n    choose(context?: BanditContext): Arm {\n        const contextKey = this.getContextKey(context);\n        const arms = this.getArmsForContext(contextKey);\n\n        const sampleBeta = (alpha: number, beta: number) => {\n            // Simple Beta(\u03B1, \u03B2) sampler via mean approximation for brevity\n            // In production, use proper Beta distribution sampling\n            if (alpha + beta === 0) return Math.random();\n            return alpha / (alpha + beta) + (Math.random() - 0.5) * 0.1;\n        };\n\n        let best: Arm = 'bedrock';\n        let bestScore = -1;\n\n        (Object.keys(arms) as Arm[]).forEach(arm => {\n            const stats = arms[arm];\n\n            // Thompson Sampling with Beta distribution\n            const alpha = 1 + stats.wins;\n            const beta = 1 + (stats.trials - stats.wins);\n            let score = sampleBeta(alpha, beta);\n\n            // Adjust score based on context preferences\n            score = this.adjustScoreForContext(score, arm, context);\n\n            if (score > bestScore) {\n                bestScore = score;\n                best = arm;\n            }\n        });\n\n        return best;\n    }\n\n    record(arm: Arm, win: boolean, costEuro: number, latencyMs: number, context?: BanditContext) {\n        const contextKey = this.getContextKey(context);\n        const arms = this.getArmsForContext(contextKey);\n\n        const stats = arms[arm];\n        stats.trials += 1;\n        stats.wins += win ? 1 : 0;\n        stats.costEuro += costEuro;\n        stats.totalLatencyMs += latencyMs;\n\n        // Also update global stats\n        const globalStats = this.arms[arm];\n        globalStats.trials += 1;\n        globalStats.wins += win ? 1 : 0;\n        globalStats.costEuro += costEuro;\n        globalStats.totalLatencyMs += latencyMs;\n    }\n\n    getStats(context?: BanditContext): Record<Arm, ArmStats & { winRate: number; avgLatency: number; avgCost: number }> {\n        const contextKey = this.getContextKey(context);\n        const arms = this.getArmsForContext(contextKey);\n\n        const result = {} as any;\n        (Object.keys(arms) as Arm[]).forEach(arm => {\n            const stats = arms[arm];\n            result[arm] = {\n                ...stats,\n                winRate: stats.trials > 0 ? stats.wins / stats.trials : 0,\n                avgLatency: stats.trials > 0 ? stats.totalLatencyMs / stats.trials : 0,\n                avgCost: stats.trials > 0 ? stats.costEuro / stats.trials : 0,\n            };\n        });\n\n        return result;\n    }\n\n    private getContextKey(context?: BanditContext): string {\n        if (!context) return 'global';\n\n        const parts = [\n            context.domain || 'general',\n            context.budgetTier || 'standard',\n            context.requireTools ? 'tools' : 'no-tools'\n        ];\n\n        return parts.join('|');\n    }\n\n    private getArmsForContext(contextKey: string): Record<Arm, ArmStats> {\n        if (!this.contextualArms.has(contextKey)) {\n            this.contextualArms.set(contextKey, {\n                bedrock: { wins: 0, trials: 0, costEuro: 0, totalLatencyMs: 0 },\n                google: { wins: 0, trials: 0, costEuro: 0, totalLatencyMs: 0 },\n                meta: { wins: 0, trials: 0, costEuro: 0, totalLatencyMs: 0 },\n            });\n        }\n        return this.contextualArms.get(contextKey)!;\n    }\n\n    private adjustScoreForContext(score: number, arm: Arm, context?: BanditContext): number {\n        if (!context) return score;\n\n        // Domain-specific adjustments\n        if (context.domain === 'legal' && arm === 'bedrock') {\n            score += 0.1; // Prefer Claude for legal\n        }\n        if (context.domain === 'culinary' && arm === 'google') {\n            score += 0.05; // Slight preference for Gemini in culinary\n        }\n        if (context.domain === 'medical' && arm !== 'bedrock') {\n            score -= 0.2; // Strong preference for Claude in medical\n        }\n\n        // Budget tier adjustments\n        if (context.budgetTier === 'low' && arm === 'meta') {\n            score += 0.1; // Prefer cheaper models for low budget\n        }\n        if (context.budgetTier === 'premium' && arm === 'bedrock') {\n            score += 0.05; // Slight preference for premium models\n        }\n\n        // Tool requirements\n        if (context.requireTools && arm === 'meta') {\n            score -= 0.3; // Meta doesn't support tools well\n        }\n\n        return Math.max(0, Math.min(1, score));\n    }\n\n    // Reset stats for a specific context (useful for A/B test resets)\n    resetContext(context?: BanditContext) {\n        const contextKey = this.getContextKey(context);\n        this.contextualArms.delete(contextKey);\n    }\n\n    // Get the best performing arm for a context\n    getBestArm(context?: BanditContext): { arm: Arm; confidence: number } {\n        const stats = this.getStats(context);\n        let bestArm: Arm = 'bedrock';\n        let bestWinRate = -1;\n\n        (Object.keys(stats) as Arm[]).forEach(arm => {\n            const armStats = stats[arm];\n            if (armStats.trials > 10 && armStats.winRate > bestWinRate) { // Minimum trials for confidence\n                bestWinRate = armStats.winRate;\n                bestArm = arm;\n            }\n        });\n\n        const confidence = stats[bestArm].trials > 50 ?\n            Math.min(0.95, stats[bestArm].winRate + 0.1) :\n            Math.max(0.5, stats[bestArm].winRate);\n\n        return { arm: bestArm, confidence };\n    }\n}\n\nexport interface BanditLoggerOpts {\n    project: string; // Evidently project name\n    client?: EvidentlyClient;\n}\n\nexport class BanditLogger {\n    private client: EvidentlyClient;\n\n    constructor(private readonly opts: BanditLoggerOpts) {\n        this.client = opts.client ?? new EvidentlyClient({});\n    }\n\n    async logOutcome(params: {\n        userId?: string;\n        arm: Arm;\n        success: boolean;\n        latencyMs: number;\n        costEuro: number;\n        domain?: string;\n        budgetTier?: string;\n        requireTools?: boolean;\n        requestId?: string;\n    }) {\n        const {\n            userId,\n            arm,\n            success,\n            latencyMs,\n            costEuro,\n            domain,\n            budgetTier,\n            requireTools,\n            requestId\n        } = params;\n\n        const entityId = userId ?? randomUUID();\n\n        try {\n            await this.client.send(new PutProjectEventsCommand({\n                project: this.opts.project,\n                events: [{\n                    timestamp: new Date(),\n                    type: 'aws.evidently.custom',\n                    data: {\n                        // Core metrics\n                        model_route: arm,\n                        success,\n                        latency_ms: latencyMs,\n                        cost_euro: costEuro,\n\n                        // Context information\n                        domain: domain || 'general',\n                        budget_tier: budgetTier || 'standard',\n                        require_tools: requireTools || false,\n\n                        // Tracking\n                        request_id: requestId || randomUUID(),\n                        timestamp: Date.now(),\n                    },\n                    entityId,\n                }],\n            }));\n        } catch (error) {\n            // Log error but don't throw - logging failures shouldn't break the main flow\n            console.error('Failed to log bandit outcome to Evidently:', error);\n        }\n    }\n\n    async logExperimentEvent(params: {\n        userId?: string;\n        experimentName: string;\n        variation: string;\n        metricName: string;\n        metricValue: number;\n        context?: Record<string, any>;\n    }) {\n        const { userId, experimentName, variation, metricName, metricValue, context } = params;\n        const entityId = userId ?? randomUUID();\n\n        try {\n            await this.client.send(new PutProjectEventsCommand({\n                project: this.opts.project,\n                events: [{\n                    timestamp: new Date(),\n                    type: 'aws.evidently.custom',\n                    data: {\n                        experiment_name: experimentName,\n                        variation,\n                        metric_name: metricName,\n                        metric_value: metricValue,\n                        ...context,\n                    },\n                    entityId,\n                }],\n            }));\n        } catch (error) {\n            console.error('Failed to log experiment event to Evidently:', error);\n        }\n    }\n\n    // Batch logging for better performance\n    async logBatch(events: Array<{\n        userId?: string;\n        arm: Arm;\n        success: boolean;\n        latencyMs: number;\n        costEuro: number;\n        domain?: string;\n        requestId?: string;\n    }>) {\n        if (events.length === 0) return;\n\n        try {\n            const evidentlyEvents = events.map(event => ({\n                timestamp: new Date(),\n                type: 'aws.evidently.custom' as const,\n                data: {\n                    model_route: event.arm,\n                    success: event.success,\n                    latency_ms: event.latencyMs,\n                    cost_euro: event.costEuro,\n                    domain: event.domain || 'general',\n                    request_id: event.requestId || randomUUID(),\n                },\n                entityId: event.userId ?? randomUUID(),\n            }));\n\n            await this.client.send(new PutProjectEventsCommand({\n                project: this.opts.project,\n                events: evidentlyEvents,\n            }));\n        } catch (error) {\n            console.error('Failed to log batch events to Evidently:', error);\n        }\n    }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "56b116eadb06209976a3e7971a21deab4390aee6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2flltggf67 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2flltggf67();
cov_2flltggf67().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2flltggf67().s[1]++;
exports.BanditLogger = exports.ThompsonBandit = void 0;
const tslib_1 =
/* istanbul ignore next */
(cov_2flltggf67().s[2]++, require("tslib"));
const client_evidently_1 =
/* istanbul ignore next */
(cov_2flltggf67().s[3]++, require("@aws-sdk/client-evidently"));
const crypto_1 =
/* istanbul ignore next */
(cov_2flltggf67().s[4]++, require("crypto"));
class ThompsonBandit {
  constructor() {
    /* istanbul ignore next */
    cov_2flltggf67().f[0]++;
    cov_2flltggf67().s[5]++;
    this.arms = {
      bedrock: {
        wins: 0,
        trials: 0,
        costEuro: 0,
        totalLatencyMs: 0
      },
      google: {
        wins: 0,
        trials: 0,
        costEuro: 0,
        totalLatencyMs: 0
      },
      meta: {
        wins: 0,
        trials: 0,
        costEuro: 0,
        totalLatencyMs: 0
      }
    };
    // Contextual bandit - different arms for different contexts
    /* istanbul ignore next */
    cov_2flltggf67().s[6]++;
    this.contextualArms = new Map();
  }
  choose(context) {
    /* istanbul ignore next */
    cov_2flltggf67().f[1]++;
    const contextKey =
    /* istanbul ignore next */
    (cov_2flltggf67().s[7]++, this.getContextKey(context));
    const arms =
    /* istanbul ignore next */
    (cov_2flltggf67().s[8]++, this.getArmsForContext(contextKey));
    /* istanbul ignore next */
    cov_2flltggf67().s[9]++;
    const sampleBeta = (alpha, beta) => {
      /* istanbul ignore next */
      cov_2flltggf67().f[2]++;
      cov_2flltggf67().s[10]++;
      // Simple Beta(α, β) sampler via mean approximation for brevity
      // In production, use proper Beta distribution sampling
      if (alpha + beta === 0) {
        /* istanbul ignore next */
        cov_2flltggf67().b[0][0]++;
        cov_2flltggf67().s[11]++;
        return Math.random();
      } else
      /* istanbul ignore next */
      {
        cov_2flltggf67().b[0][1]++;
      }
      cov_2flltggf67().s[12]++;
      return alpha / (alpha + beta) + (Math.random() - 0.5) * 0.1;
    };
    let best =
    /* istanbul ignore next */
    (cov_2flltggf67().s[13]++, 'bedrock');
    let bestScore =
    /* istanbul ignore next */
    (cov_2flltggf67().s[14]++, -1);
    /* istanbul ignore next */
    cov_2flltggf67().s[15]++;
    Object.keys(arms).forEach(arm => {
      /* istanbul ignore next */
      cov_2flltggf67().f[3]++;
      const stats =
      /* istanbul ignore next */
      (cov_2flltggf67().s[16]++, arms[arm]);
      // Thompson Sampling with Beta distribution
      const alpha =
      /* istanbul ignore next */
      (cov_2flltggf67().s[17]++, 1 + stats.wins);
      const beta =
      /* istanbul ignore next */
      (cov_2flltggf67().s[18]++, 1 + (stats.trials - stats.wins));
      let score =
      /* istanbul ignore next */
      (cov_2flltggf67().s[19]++, sampleBeta(alpha, beta));
      // Adjust score based on context preferences
      /* istanbul ignore next */
      cov_2flltggf67().s[20]++;
      score = this.adjustScoreForContext(score, arm, context);
      /* istanbul ignore next */
      cov_2flltggf67().s[21]++;
      if (score > bestScore) {
        /* istanbul ignore next */
        cov_2flltggf67().b[1][0]++;
        cov_2flltggf67().s[22]++;
        bestScore = score;
        /* istanbul ignore next */
        cov_2flltggf67().s[23]++;
        best = arm;
      } else
      /* istanbul ignore next */
      {
        cov_2flltggf67().b[1][1]++;
      }
    });
    /* istanbul ignore next */
    cov_2flltggf67().s[24]++;
    return best;
  }
  record(arm, win, costEuro, latencyMs, context) {
    /* istanbul ignore next */
    cov_2flltggf67().f[4]++;
    const contextKey =
    /* istanbul ignore next */
    (cov_2flltggf67().s[25]++, this.getContextKey(context));
    const arms =
    /* istanbul ignore next */
    (cov_2flltggf67().s[26]++, this.getArmsForContext(contextKey));
    const stats =
    /* istanbul ignore next */
    (cov_2flltggf67().s[27]++, arms[arm]);
    /* istanbul ignore next */
    cov_2flltggf67().s[28]++;
    stats.trials += 1;
    /* istanbul ignore next */
    cov_2flltggf67().s[29]++;
    stats.wins += win ?
    /* istanbul ignore next */
    (cov_2flltggf67().b[2][0]++, 1) :
    /* istanbul ignore next */
    (cov_2flltggf67().b[2][1]++, 0);
    /* istanbul ignore next */
    cov_2flltggf67().s[30]++;
    stats.costEuro += costEuro;
    /* istanbul ignore next */
    cov_2flltggf67().s[31]++;
    stats.totalLatencyMs += latencyMs;
    // Also update global stats
    const globalStats =
    /* istanbul ignore next */
    (cov_2flltggf67().s[32]++, this.arms[arm]);
    /* istanbul ignore next */
    cov_2flltggf67().s[33]++;
    globalStats.trials += 1;
    /* istanbul ignore next */
    cov_2flltggf67().s[34]++;
    globalStats.wins += win ?
    /* istanbul ignore next */
    (cov_2flltggf67().b[3][0]++, 1) :
    /* istanbul ignore next */
    (cov_2flltggf67().b[3][1]++, 0);
    /* istanbul ignore next */
    cov_2flltggf67().s[35]++;
    globalStats.costEuro += costEuro;
    /* istanbul ignore next */
    cov_2flltggf67().s[36]++;
    globalStats.totalLatencyMs += latencyMs;
  }
  getStats(context) {
    /* istanbul ignore next */
    cov_2flltggf67().f[5]++;
    const contextKey =
    /* istanbul ignore next */
    (cov_2flltggf67().s[37]++, this.getContextKey(context));
    const arms =
    /* istanbul ignore next */
    (cov_2flltggf67().s[38]++, this.getArmsForContext(contextKey));
    const result =
    /* istanbul ignore next */
    (cov_2flltggf67().s[39]++, {});
    /* istanbul ignore next */
    cov_2flltggf67().s[40]++;
    Object.keys(arms).forEach(arm => {
      /* istanbul ignore next */
      cov_2flltggf67().f[6]++;
      const stats =
      /* istanbul ignore next */
      (cov_2flltggf67().s[41]++, arms[arm]);
      /* istanbul ignore next */
      cov_2flltggf67().s[42]++;
      result[arm] = Object.assign(Object.assign({}, stats), {
        winRate: stats.trials > 0 ?
        /* istanbul ignore next */
        (cov_2flltggf67().b[4][0]++, stats.wins / stats.trials) :
        /* istanbul ignore next */
        (cov_2flltggf67().b[4][1]++, 0),
        avgLatency: stats.trials > 0 ?
        /* istanbul ignore next */
        (cov_2flltggf67().b[5][0]++, stats.totalLatencyMs / stats.trials) :
        /* istanbul ignore next */
        (cov_2flltggf67().b[5][1]++, 0),
        avgCost: stats.trials > 0 ?
        /* istanbul ignore next */
        (cov_2flltggf67().b[6][0]++, stats.costEuro / stats.trials) :
        /* istanbul ignore next */
        (cov_2flltggf67().b[6][1]++, 0)
      });
    });
    /* istanbul ignore next */
    cov_2flltggf67().s[43]++;
    return result;
  }
  getContextKey(context) {
    /* istanbul ignore next */
    cov_2flltggf67().f[7]++;
    cov_2flltggf67().s[44]++;
    if (!context) {
      /* istanbul ignore next */
      cov_2flltggf67().b[7][0]++;
      cov_2flltggf67().s[45]++;
      return 'global';
    } else
    /* istanbul ignore next */
    {
      cov_2flltggf67().b[7][1]++;
    }
    const parts =
    /* istanbul ignore next */
    (cov_2flltggf67().s[46]++, [
    /* istanbul ignore next */
    (cov_2flltggf67().b[8][0]++, context.domain) ||
    /* istanbul ignore next */
    (cov_2flltggf67().b[8][1]++, 'general'),
    /* istanbul ignore next */
    (cov_2flltggf67().b[9][0]++, context.budgetTier) ||
    /* istanbul ignore next */
    (cov_2flltggf67().b[9][1]++, 'standard'), context.requireTools ?
    /* istanbul ignore next */
    (cov_2flltggf67().b[10][0]++, 'tools') :
    /* istanbul ignore next */
    (cov_2flltggf67().b[10][1]++, 'no-tools')]);
    /* istanbul ignore next */
    cov_2flltggf67().s[47]++;
    return parts.join('|');
  }
  getArmsForContext(contextKey) {
    /* istanbul ignore next */
    cov_2flltggf67().f[8]++;
    cov_2flltggf67().s[48]++;
    if (!this.contextualArms.has(contextKey)) {
      /* istanbul ignore next */
      cov_2flltggf67().b[11][0]++;
      cov_2flltggf67().s[49]++;
      this.contextualArms.set(contextKey, {
        bedrock: {
          wins: 0,
          trials: 0,
          costEuro: 0,
          totalLatencyMs: 0
        },
        google: {
          wins: 0,
          trials: 0,
          costEuro: 0,
          totalLatencyMs: 0
        },
        meta: {
          wins: 0,
          trials: 0,
          costEuro: 0,
          totalLatencyMs: 0
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_2flltggf67().b[11][1]++;
    }
    cov_2flltggf67().s[50]++;
    return this.contextualArms.get(contextKey);
  }
  adjustScoreForContext(score, arm, context) {
    /* istanbul ignore next */
    cov_2flltggf67().f[9]++;
    cov_2flltggf67().s[51]++;
    if (!context) {
      /* istanbul ignore next */
      cov_2flltggf67().b[12][0]++;
      cov_2flltggf67().s[52]++;
      return score;
    } else
    /* istanbul ignore next */
    {
      cov_2flltggf67().b[12][1]++;
    }
    // Domain-specific adjustments
    cov_2flltggf67().s[53]++;
    if (
    /* istanbul ignore next */
    (cov_2flltggf67().b[14][0]++, context.domain === 'legal') &&
    /* istanbul ignore next */
    (cov_2flltggf67().b[14][1]++, arm === 'bedrock')) {
      /* istanbul ignore next */
      cov_2flltggf67().b[13][0]++;
      cov_2flltggf67().s[54]++;
      score += 0.1; // Prefer Claude for legal
    } else
    /* istanbul ignore next */
    {
      cov_2flltggf67().b[13][1]++;
    }
    cov_2flltggf67().s[55]++;
    if (
    /* istanbul ignore next */
    (cov_2flltggf67().b[16][0]++, context.domain === 'culinary') &&
    /* istanbul ignore next */
    (cov_2flltggf67().b[16][1]++, arm === 'google')) {
      /* istanbul ignore next */
      cov_2flltggf67().b[15][0]++;
      cov_2flltggf67().s[56]++;
      score += 0.05; // Slight preference for Gemini in culinary
    } else
    /* istanbul ignore next */
    {
      cov_2flltggf67().b[15][1]++;
    }
    cov_2flltggf67().s[57]++;
    if (
    /* istanbul ignore next */
    (cov_2flltggf67().b[18][0]++, context.domain === 'medical') &&
    /* istanbul ignore next */
    (cov_2flltggf67().b[18][1]++, arm !== 'bedrock')) {
      /* istanbul ignore next */
      cov_2flltggf67().b[17][0]++;
      cov_2flltggf67().s[58]++;
      score -= 0.2; // Strong preference for Claude in medical
    } else
    /* istanbul ignore next */
    {
      cov_2flltggf67().b[17][1]++;
    }
    // Budget tier adjustments
    cov_2flltggf67().s[59]++;
    if (
    /* istanbul ignore next */
    (cov_2flltggf67().b[20][0]++, context.budgetTier === 'low') &&
    /* istanbul ignore next */
    (cov_2flltggf67().b[20][1]++, arm === 'meta')) {
      /* istanbul ignore next */
      cov_2flltggf67().b[19][0]++;
      cov_2flltggf67().s[60]++;
      score += 0.1; // Prefer cheaper models for low budget
    } else
    /* istanbul ignore next */
    {
      cov_2flltggf67().b[19][1]++;
    }
    cov_2flltggf67().s[61]++;
    if (
    /* istanbul ignore next */
    (cov_2flltggf67().b[22][0]++, context.budgetTier === 'premium') &&
    /* istanbul ignore next */
    (cov_2flltggf67().b[22][1]++, arm === 'bedrock')) {
      /* istanbul ignore next */
      cov_2flltggf67().b[21][0]++;
      cov_2flltggf67().s[62]++;
      score += 0.05; // Slight preference for premium models
    } else
    /* istanbul ignore next */
    {
      cov_2flltggf67().b[21][1]++;
    }
    // Tool requirements
    cov_2flltggf67().s[63]++;
    if (
    /* istanbul ignore next */
    (cov_2flltggf67().b[24][0]++, context.requireTools) &&
    /* istanbul ignore next */
    (cov_2flltggf67().b[24][1]++, arm === 'meta')) {
      /* istanbul ignore next */
      cov_2flltggf67().b[23][0]++;
      cov_2flltggf67().s[64]++;
      score -= 0.3; // Meta doesn't support tools well
    } else
    /* istanbul ignore next */
    {
      cov_2flltggf67().b[23][1]++;
    }
    cov_2flltggf67().s[65]++;
    return Math.max(0, Math.min(1, score));
  }
  // Reset stats for a specific context (useful for A/B test resets)
  resetContext(context) {
    /* istanbul ignore next */
    cov_2flltggf67().f[10]++;
    const contextKey =
    /* istanbul ignore next */
    (cov_2flltggf67().s[66]++, this.getContextKey(context));
    /* istanbul ignore next */
    cov_2flltggf67().s[67]++;
    this.contextualArms.delete(contextKey);
  }
  // Get the best performing arm for a context
  getBestArm(context) {
    /* istanbul ignore next */
    cov_2flltggf67().f[11]++;
    const stats =
    /* istanbul ignore next */
    (cov_2flltggf67().s[68]++, this.getStats(context));
    let bestArm =
    /* istanbul ignore next */
    (cov_2flltggf67().s[69]++, 'bedrock');
    let bestWinRate =
    /* istanbul ignore next */
    (cov_2flltggf67().s[70]++, -1);
    /* istanbul ignore next */
    cov_2flltggf67().s[71]++;
    Object.keys(stats).forEach(arm => {
      /* istanbul ignore next */
      cov_2flltggf67().f[12]++;
      const armStats =
      /* istanbul ignore next */
      (cov_2flltggf67().s[72]++, stats[arm]);
      /* istanbul ignore next */
      cov_2flltggf67().s[73]++;
      if (
      /* istanbul ignore next */
      (cov_2flltggf67().b[26][0]++, armStats.trials > 10) &&
      /* istanbul ignore next */
      (cov_2flltggf67().b[26][1]++, armStats.winRate > bestWinRate)) {
        /* istanbul ignore next */
        cov_2flltggf67().b[25][0]++;
        cov_2flltggf67().s[74]++;
        // Minimum trials for confidence
        bestWinRate = armStats.winRate;
        /* istanbul ignore next */
        cov_2flltggf67().s[75]++;
        bestArm = arm;
      } else
      /* istanbul ignore next */
      {
        cov_2flltggf67().b[25][1]++;
      }
    });
    const confidence =
    /* istanbul ignore next */
    (cov_2flltggf67().s[76]++, stats[bestArm].trials > 50 ?
    /* istanbul ignore next */
    (cov_2flltggf67().b[27][0]++, Math.min(0.95, stats[bestArm].winRate + 0.1)) :
    /* istanbul ignore next */
    (cov_2flltggf67().b[27][1]++, Math.max(0.5, stats[bestArm].winRate)));
    /* istanbul ignore next */
    cov_2flltggf67().s[77]++;
    return {
      arm: bestArm,
      confidence
    };
  }
}
/* istanbul ignore next */
cov_2flltggf67().s[78]++;
exports.ThompsonBandit = ThompsonBandit;
class BanditLogger {
  constructor(opts) {
    /* istanbul ignore next */
    cov_2flltggf67().f[13]++;
    var _a;
    /* istanbul ignore next */
    cov_2flltggf67().s[79]++;
    this.opts = opts;
    /* istanbul ignore next */
    cov_2flltggf67().s[80]++;
    this.client =
    /* istanbul ignore next */
    (cov_2flltggf67().b[29][0]++, (_a = opts.client) !== null) &&
    /* istanbul ignore next */
    (cov_2flltggf67().b[29][1]++, _a !== void 0) ?
    /* istanbul ignore next */
    (cov_2flltggf67().b[28][0]++, _a) :
    /* istanbul ignore next */
    (cov_2flltggf67().b[28][1]++, new client_evidently_1.EvidentlyClient({}));
  }
  logOutcome(params) {
    /* istanbul ignore next */
    cov_2flltggf67().f[14]++;
    cov_2flltggf67().s[81]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2flltggf67().f[15]++;
      const {
        userId,
        arm,
        success,
        latencyMs,
        costEuro,
        domain,
        budgetTier,
        requireTools,
        requestId
      } =
      /* istanbul ignore next */
      (cov_2flltggf67().s[82]++, params);
      const entityId =
      /* istanbul ignore next */
      (cov_2flltggf67().s[83]++,
      /* istanbul ignore next */
      (cov_2flltggf67().b[31][0]++, userId !== null) &&
      /* istanbul ignore next */
      (cov_2flltggf67().b[31][1]++, userId !== void 0) ?
      /* istanbul ignore next */
      (cov_2flltggf67().b[30][0]++, userId) :
      /* istanbul ignore next */
      (cov_2flltggf67().b[30][1]++, (0, crypto_1.randomUUID)()));
      /* istanbul ignore next */
      cov_2flltggf67().s[84]++;
      try {
        /* istanbul ignore next */
        cov_2flltggf67().s[85]++;
        yield this.client.send(new client_evidently_1.PutProjectEventsCommand({
          project: this.opts.project,
          events: [{
            timestamp: new Date(),
            type: 'aws.evidently.custom',
            data: {
              // Core metrics
              model_route: arm,
              success,
              latency_ms: latencyMs,
              cost_euro: costEuro,
              // Context information
              domain:
              /* istanbul ignore next */
              (cov_2flltggf67().b[32][0]++, domain) ||
              /* istanbul ignore next */
              (cov_2flltggf67().b[32][1]++, 'general'),
              budget_tier:
              /* istanbul ignore next */
              (cov_2flltggf67().b[33][0]++, budgetTier) ||
              /* istanbul ignore next */
              (cov_2flltggf67().b[33][1]++, 'standard'),
              require_tools:
              /* istanbul ignore next */
              (cov_2flltggf67().b[34][0]++, requireTools) ||
              /* istanbul ignore next */
              (cov_2flltggf67().b[34][1]++, false),
              // Tracking
              request_id:
              /* istanbul ignore next */
              (cov_2flltggf67().b[35][0]++, requestId) ||
              /* istanbul ignore next */
              (cov_2flltggf67().b[35][1]++, (0, crypto_1.randomUUID)()),
              timestamp: Date.now()
            },
            entityId
          }]
        }));
      } catch (error) {
        /* istanbul ignore next */
        cov_2flltggf67().s[86]++;
        // Log error but don't throw - logging failures shouldn't break the main flow
        console.error('Failed to log bandit outcome to Evidently:', error);
      }
    });
  }
  logExperimentEvent(params) {
    /* istanbul ignore next */
    cov_2flltggf67().f[16]++;
    cov_2flltggf67().s[87]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2flltggf67().f[17]++;
      const {
        userId,
        experimentName,
        variation,
        metricName,
        metricValue,
        context
      } =
      /* istanbul ignore next */
      (cov_2flltggf67().s[88]++, params);
      const entityId =
      /* istanbul ignore next */
      (cov_2flltggf67().s[89]++,
      /* istanbul ignore next */
      (cov_2flltggf67().b[37][0]++, userId !== null) &&
      /* istanbul ignore next */
      (cov_2flltggf67().b[37][1]++, userId !== void 0) ?
      /* istanbul ignore next */
      (cov_2flltggf67().b[36][0]++, userId) :
      /* istanbul ignore next */
      (cov_2flltggf67().b[36][1]++, (0, crypto_1.randomUUID)()));
      /* istanbul ignore next */
      cov_2flltggf67().s[90]++;
      try {
        /* istanbul ignore next */
        cov_2flltggf67().s[91]++;
        yield this.client.send(new client_evidently_1.PutProjectEventsCommand({
          project: this.opts.project,
          events: [{
            timestamp: new Date(),
            type: 'aws.evidently.custom',
            data: Object.assign({
              experiment_name: experimentName,
              variation,
              metric_name: metricName,
              metric_value: metricValue
            }, context),
            entityId
          }]
        }));
      } catch (error) {
        /* istanbul ignore next */
        cov_2flltggf67().s[92]++;
        console.error('Failed to log experiment event to Evidently:', error);
      }
    });
  }
  // Batch logging for better performance
  logBatch(events) {
    /* istanbul ignore next */
    cov_2flltggf67().f[18]++;
    cov_2flltggf67().s[93]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2flltggf67().f[19]++;
      cov_2flltggf67().s[94]++;
      if (events.length === 0) {
        /* istanbul ignore next */
        cov_2flltggf67().b[38][0]++;
        cov_2flltggf67().s[95]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2flltggf67().b[38][1]++;
      }
      cov_2flltggf67().s[96]++;
      try {
        const evidentlyEvents =
        /* istanbul ignore next */
        (cov_2flltggf67().s[97]++, events.map(event => {
          /* istanbul ignore next */
          cov_2flltggf67().f[20]++;
          var _a;
          /* istanbul ignore next */
          cov_2flltggf67().s[98]++;
          return {
            timestamp: new Date(),
            type: 'aws.evidently.custom',
            data: {
              model_route: event.arm,
              success: event.success,
              latency_ms: event.latencyMs,
              cost_euro: event.costEuro,
              domain:
              /* istanbul ignore next */
              (cov_2flltggf67().b[39][0]++, event.domain) ||
              /* istanbul ignore next */
              (cov_2flltggf67().b[39][1]++, 'general'),
              request_id:
              /* istanbul ignore next */
              (cov_2flltggf67().b[40][0]++, event.requestId) ||
              /* istanbul ignore next */
              (cov_2flltggf67().b[40][1]++, (0, crypto_1.randomUUID)())
            },
            entityId:
            /* istanbul ignore next */
            (cov_2flltggf67().b[42][0]++, (_a = event.userId) !== null) &&
            /* istanbul ignore next */
            (cov_2flltggf67().b[42][1]++, _a !== void 0) ?
            /* istanbul ignore next */
            (cov_2flltggf67().b[41][0]++, _a) :
            /* istanbul ignore next */
            (cov_2flltggf67().b[41][1]++, (0, crypto_1.randomUUID)())
          };
        }));
        /* istanbul ignore next */
        cov_2flltggf67().s[99]++;
        yield this.client.send(new client_evidently_1.PutProjectEventsCommand({
          project: this.opts.project,
          events: evidentlyEvents
        }));
      } catch (error) {
        /* istanbul ignore next */
        cov_2flltggf67().s[100]++;
        console.error('Failed to log batch events to Evidently:', error);
      }
    });
  }
}
/* istanbul ignore next */
cov_2flltggf67().s[101]++;
exports.BanditLogger = BanditLogger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
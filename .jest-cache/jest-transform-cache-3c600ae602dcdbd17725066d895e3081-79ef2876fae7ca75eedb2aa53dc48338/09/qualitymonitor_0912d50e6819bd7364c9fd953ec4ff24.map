{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/quality-monitor.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/quality-monitor.ts"],"sourcesContent":["/**\n * AI Quality Monitoring Service\n *\n * Provides comprehensive quality monitoring for AI models including:\n * - Real-time quality assessment\n * - Quality trend analysis\n * - Automated quality degradation detection\n * - Integration with drift monitoring\n */\n\nimport {\n  CloudWatchClient,\n  GetMetricStatisticsCommand,\n  PutMetricDataCommand,\n} from \"@aws-sdk/client-cloudwatch\";\nimport { DriftAlert, DriftMonitor } from \"./drift-monitor\";\n\nexport interface QualityAssessment {\n  timestamp: Date;\n  modelId: string;\n  provider: string;\n  requestId: string;\n\n  // Input quality\n  inputQuality: {\n    clarity: number;\n    complexity: number;\n    toxicity: number;\n    piiRisk: number;\n  };\n\n  // Output quality\n  outputQuality: {\n    coherence: number;\n    relevance: number;\n    factuality: number;\n    completeness: number;\n    toxicity: number;\n    bias: number;\n  };\n\n  // Performance metrics\n  performance: {\n    latency: number;\n    tokenCount: number;\n    cost: number;\n  };\n\n  // User feedback (if available)\n  userFeedback?: {\n    rating: number; // 1-5 scale\n    helpful: boolean;\n    accurate: boolean;\n    appropriate: boolean;\n  };\n\n  // Overall quality score\n  overallScore: number;\n}\n\nexport interface QualityTrends {\n  modelId: string;\n  timeRange: {\n    start: Date;\n    end: Date;\n  };\n\n  // Trend metrics\n  trends: {\n    overallQuality: {\n      current: number;\n      previous: number;\n      change: number;\n      trend: \"improving\" | \"stable\" | \"degrading\";\n    };\n    coherence: {\n      current: number;\n      previous: number;\n      change: number;\n      trend: \"improving\" | \"stable\" | \"degrading\";\n    };\n    relevance: {\n      current: number;\n      previous: number;\n      change: number;\n      trend: \"improving\" | \"stable\" | \"degrading\";\n    };\n    factuality: {\n      current: number;\n      previous: number;\n      change: number;\n      trend: \"improving\" | \"stable\" | \"degrading\";\n    };\n    toxicity: {\n      current: number;\n      previous: number;\n      change: number;\n      trend: \"improving\" | \"stable\" | \"degrading\";\n    };\n    userSatisfaction: {\n      current: number;\n      previous: number;\n      change: number;\n      trend: \"improving\" | \"stable\" | \"degrading\";\n    };\n  };\n\n  // Statistical analysis\n  statistics: {\n    totalAssessments: number;\n    averageLatency: number;\n    averageCost: number;\n    errorRate: number;\n    userFeedbackRate: number;\n  };\n}\n\nexport interface QualityAlert extends DriftAlert {\n  qualityAssessment?: QualityAssessment;\n  trends?: QualityTrends;\n}\n\nexport interface QualityThresholds {\n  overallScore: {\n    warning: number;\n    critical: number;\n  };\n  coherence: {\n    warning: number;\n    critical: number;\n  };\n  relevance: {\n    warning: number;\n    critical: number;\n  };\n  factuality: {\n    warning: number;\n    critical: number;\n  };\n  toxicity: {\n    warning: number;\n    critical: number;\n  };\n  bias: {\n    warning: number;\n    critical: number;\n  };\n  userSatisfaction: {\n    warning: number;\n    critical: number;\n  };\n}\n\nexport class QualityMonitor {\n  private cloudWatch: CloudWatchClient;\n  private driftMonitor: DriftMonitor;\n  private thresholds: QualityThresholds;\n  private assessmentHistory: Map<string, QualityAssessment[]> = new Map();\n  private alertCallbacks: Array<(alert: QualityAlert) => Promise<void>> = [];\n\n  constructor(\n    driftMonitor: DriftMonitor,\n    cloudWatch?: CloudWatchClient,\n    thresholds?: Partial<QualityThresholds>\n  ) {\n    this.driftMonitor = driftMonitor;\n    this.cloudWatch =\n      cloudWatch ||\n      new CloudWatchClient({\n        region: process.env.AWS_REGION || \"eu-central-1\",\n      });\n\n    this.thresholds = {\n      overallScore: {\n        warning: 0.7,\n        critical: 0.6,\n      },\n      coherence: {\n        warning: 0.7,\n        critical: 0.6,\n      },\n      relevance: {\n        warning: 0.7,\n        critical: 0.6,\n      },\n      factuality: {\n        warning: 0.7,\n        critical: 0.6,\n      },\n      toxicity: {\n        warning: 0.2,\n        critical: 0.3,\n      },\n      bias: {\n        warning: 0.2,\n        critical: 0.3,\n      },\n      userSatisfaction: {\n        warning: 3.0,\n        critical: 2.5,\n      },\n      ...thresholds,\n    };\n\n    // Register with drift monitor for integrated alerts\n    this.driftMonitor.onAlert(this.handleDriftAlert.bind(this));\n  }\n\n  /**\n   * Assess quality of an AI interaction\n   */\n  async assessQuality(\n    modelId: string,\n    provider: string,\n    requestId: string,\n    input: string,\n    output: string,\n    metadata: {\n      latency: number;\n      tokenCount: number;\n      cost: number;\n      userFeedback?: QualityAssessment[\"userFeedback\"];\n    }\n  ): Promise<QualityAssessment> {\n    const assessment: QualityAssessment = {\n      timestamp: new Date(),\n      modelId,\n      provider,\n      requestId,\n      inputQuality: await this.assessInputQuality(input),\n      outputQuality: await this.assessOutputQuality(output, input),\n      performance: metadata,\n      userFeedback: metadata.userFeedback,\n      overallScore: 0, // Will be calculated\n    };\n\n    // Calculate overall score\n    assessment.overallScore = this.calculateOverallScore(assessment);\n\n    // Store assessment\n    if (!this.assessmentHistory.has(modelId)) {\n      this.assessmentHistory.set(modelId, []);\n    }\n    this.assessmentHistory.get(modelId)!.push(assessment);\n\n    // Keep only last 1000 assessments per model\n    const history = this.assessmentHistory.get(modelId)!;\n    if (history.length > 1000) {\n      history.splice(0, history.length - 1000);\n    }\n\n    // Publish metrics to CloudWatch\n    await this.publishQualityMetrics(assessment);\n\n    // Check for quality alerts\n    const alerts = await this.checkQualityAlerts(assessment);\n    for (const alert of alerts) {\n      await this.sendAlert(alert);\n    }\n\n    return assessment;\n  }\n\n  /**\n   * Analyze quality trends for a model\n   */\n  async analyzeQualityTrends(\n    modelId: string,\n    timeRange: { start: Date; end: Date }\n  ): Promise<QualityTrends> {\n    const history = this.assessmentHistory.get(modelId) || [];\n    const relevantAssessments = history.filter(\n      (assessment) =>\n        assessment.timestamp >= timeRange.start &&\n        assessment.timestamp <= timeRange.end\n    );\n\n    if (relevantAssessments.length === 0) {\n      throw new Error(\n        `No quality assessments found for model ${modelId} in the specified time range`\n      );\n    }\n\n    // Split assessments into current and previous periods\n    const midpoint = new Date(\n      (timeRange.start.getTime() + timeRange.end.getTime()) / 2\n    );\n    const previousAssessments = relevantAssessments.filter(\n      (a) => a.timestamp < midpoint\n    );\n    const currentAssessments = relevantAssessments.filter(\n      (a) => a.timestamp >= midpoint\n    );\n\n    const trends: QualityTrends = {\n      modelId,\n      timeRange,\n      trends: {\n        overallQuality: this.calculateTrend(\n          currentAssessments.map((a) => a.overallScore),\n          previousAssessments.map((a) => a.overallScore)\n        ),\n        coherence: this.calculateTrend(\n          currentAssessments.map((a) => a.outputQuality.coherence),\n          previousAssessments.map((a) => a.outputQuality.coherence)\n        ),\n        relevance: this.calculateTrend(\n          currentAssessments.map((a) => a.outputQuality.relevance),\n          previousAssessments.map((a) => a.outputQuality.relevance)\n        ),\n        factuality: this.calculateTrend(\n          currentAssessments.map((a) => a.outputQuality.factuality),\n          previousAssessments.map((a) => a.outputQuality.factuality)\n        ),\n        toxicity: this.calculateTrend(\n          currentAssessments.map((a) => a.outputQuality.toxicity),\n          previousAssessments.map((a) => a.outputQuality.toxicity),\n          false // Lower is better for toxicity\n        ),\n        userSatisfaction: this.calculateTrend(\n          currentAssessments\n            .filter((a) => a.userFeedback)\n            .map((a) => a.userFeedback!.rating),\n          previousAssessments\n            .filter((a) => a.userFeedback)\n            .map((a) => a.userFeedback!.rating)\n        ),\n      },\n      statistics: {\n        totalAssessments: relevantAssessments.length,\n        averageLatency: this.calculateAverage(\n          relevantAssessments.map((a) => a.performance.latency)\n        ),\n        averageCost: this.calculateAverage(\n          relevantAssessments.map((a) => a.performance.cost)\n        ),\n        errorRate: 0, // Would need error tracking\n        userFeedbackRate:\n          relevantAssessments.filter((a) => a.userFeedback).length /\n          relevantAssessments.length,\n      },\n    };\n\n    return trends;\n  }\n\n  /**\n   * Get quality metrics from CloudWatch\n   */\n  async getQualityMetrics(\n    modelId: string,\n    metricName: string,\n    timeRange: { start: Date; end: Date }\n  ): Promise<Array<{ timestamp: Date; value: number }>> {\n    const response = await this.cloudWatch.send(\n      new GetMetricStatisticsCommand({\n        Namespace: \"AI/Quality\",\n        MetricName: metricName,\n        Dimensions: [\n          {\n            Name: \"ModelId\",\n            Value: modelId,\n          },\n        ],\n        StartTime: timeRange.start,\n        EndTime: timeRange.end,\n        Period: 300, // 5 minutes\n        Statistics: [\"Average\"],\n      })\n    );\n\n    return (response.Datapoints || [])\n      .map((point) => ({\n        timestamp: point.Timestamp!,\n        value: point.Average!,\n      }))\n      .sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n  }\n\n  /**\n   * Register alert callback\n   */\n  onAlert(callback: (alert: QualityAlert) => Promise<void>): void {\n    this.alertCallbacks.push(callback);\n  }\n\n  /**\n   * Assess input quality\n   */\n  private async assessInputQuality(\n    input: string\n  ): Promise<QualityAssessment[\"inputQuality\"]> {\n    // Simplified quality assessment - in production, use ML models\n    const length = input.length;\n    const wordCount = input.split(/\\s+/).length;\n\n    return {\n      clarity: Math.min(\n        1.0,\n        Math.max(0.0, 1.0 - Math.abs(wordCount - 50) / 100)\n      ), // Optimal around 50 words\n      complexity: Math.min(1.0, wordCount / 100), // More words = more complex\n      toxicity: this.assessToxicity(input),\n      piiRisk: this.assessPIIRisk(input),\n    };\n  }\n\n  /**\n   * Assess output quality\n   */\n  private async assessOutputQuality(\n    output: string,\n    input: string\n  ): Promise<QualityAssessment[\"outputQuality\"]> {\n    // Simplified quality assessment - in production, use ML models\n    const outputLength = output.length;\n    const inputLength = input.length;\n\n    return {\n      coherence: this.assessCoherence(output),\n      relevance: this.assessRelevance(output, input),\n      factuality: this.assessFactuality(output),\n      completeness: Math.min(1.0, outputLength / (inputLength * 2)), // Reasonable response length\n      toxicity: this.assessToxicity(output),\n      bias: this.assessBias(output),\n    };\n  }\n\n  /**\n   * Calculate overall quality score\n   */\n  private calculateOverallScore(assessment: QualityAssessment): number {\n    const weights = {\n      coherence: 0.2,\n      relevance: 0.25,\n      factuality: 0.2,\n      completeness: 0.1,\n      toxicity: -0.15, // Negative weight (lower toxicity is better)\n      bias: -0.1, // Negative weight (lower bias is better)\n    };\n\n    return Math.max(\n      0,\n      Math.min(\n        1,\n        assessment.outputQuality.coherence * weights.coherence +\n          assessment.outputQuality.relevance * weights.relevance +\n          assessment.outputQuality.factuality * weights.factuality +\n          assessment.outputQuality.completeness * weights.completeness +\n          (1 - assessment.outputQuality.toxicity) * Math.abs(weights.toxicity) +\n          (1 - assessment.outputQuality.bias) * Math.abs(weights.bias)\n      )\n    );\n  }\n\n  /**\n   * Check for quality alerts\n   */\n  private async checkQualityAlerts(\n    assessment: QualityAssessment\n  ): Promise<QualityAlert[]> {\n    const alerts: QualityAlert[] = [];\n\n    // Check overall score\n    if (assessment.overallScore <= this.thresholds.overallScore.critical) {\n      alerts.push(\n        this.createQualityAlert(\n          \"critical\",\n          \"quality_degradation\",\n          assessment,\n          `Critical quality degradation: overall score ${assessment.overallScore.toFixed(\n            3\n          )}`\n        )\n      );\n    } else if (\n      assessment.overallScore <= this.thresholds.overallScore.warning\n    ) {\n      alerts.push(\n        this.createQualityAlert(\n          \"medium\",\n          \"quality_degradation\",\n          assessment,\n          `Quality warning: overall score ${assessment.overallScore.toFixed(3)}`\n        )\n      );\n    }\n\n    // Check individual metrics\n    const checks = [\n      {\n        value: assessment.outputQuality.coherence,\n        threshold: this.thresholds.coherence,\n        name: \"coherence\",\n      },\n      {\n        value: assessment.outputQuality.relevance,\n        threshold: this.thresholds.relevance,\n        name: \"relevance\",\n      },\n      {\n        value: assessment.outputQuality.factuality,\n        threshold: this.thresholds.factuality,\n        name: \"factuality\",\n      },\n    ];\n\n    for (const check of checks) {\n      if (check.value <= check.threshold.critical) {\n        alerts.push(\n          this.createQualityAlert(\n            \"high\",\n            \"quality_degradation\",\n            assessment,\n            `Critical ${check.name} issue: score ${check.value.toFixed(3)}`\n          )\n        );\n      } else if (check.value <= check.threshold.warning) {\n        alerts.push(\n          this.createQualityAlert(\n            \"medium\",\n            \"quality_degradation\",\n            assessment,\n            `${check.name} warning: score ${check.value.toFixed(3)}`\n          )\n        );\n      }\n    }\n\n    // Check toxicity and bias (higher is worse)\n    if (\n      assessment.outputQuality.toxicity >= this.thresholds.toxicity.critical\n    ) {\n      alerts.push(\n        this.createQualityAlert(\n          \"critical\",\n          \"quality_degradation\",\n          assessment,\n          `Critical toxicity detected: score ${assessment.outputQuality.toxicity.toFixed(\n            3\n          )}`\n        )\n      );\n    }\n\n    if (assessment.outputQuality.bias >= this.thresholds.bias.critical) {\n      alerts.push(\n        this.createQualityAlert(\n          \"critical\",\n          \"quality_degradation\",\n          assessment,\n          `Critical bias detected: score ${assessment.outputQuality.bias.toFixed(\n            3\n          )}`\n        )\n      );\n    }\n\n    return alerts;\n  }\n\n  /**\n   * Create quality alert\n   */\n  private createQualityAlert(\n    severity: QualityAlert[\"severity\"],\n    type: QualityAlert[\"type\"],\n    assessment: QualityAssessment,\n    message: string\n  ): QualityAlert {\n    return {\n      id: `quality-${assessment.modelId}-${Date.now()}`,\n      timestamp: new Date(),\n      severity,\n      type,\n      modelId: assessment.modelId,\n      provider: assessment.provider,\n      message,\n      metrics: {},\n      recommendations: this.getQualityRecommendations(assessment),\n      qualityAssessment: assessment,\n    };\n  }\n\n  /**\n   * Get quality improvement recommendations\n   */\n  private getQualityRecommendations(assessment: QualityAssessment): string[] {\n    const recommendations: string[] = [];\n\n    if (assessment.outputQuality.coherence < 0.7) {\n      recommendations.push(\"Improve prompt clarity and structure\");\n      recommendations.push(\"Consider fine-tuning for better coherence\");\n    }\n\n    if (assessment.outputQuality.relevance < 0.7) {\n      recommendations.push(\"Review prompt engineering for better relevance\");\n      recommendations.push(\"Implement context-aware response generation\");\n    }\n\n    if (assessment.outputQuality.factuality < 0.7) {\n      recommendations.push(\"Implement fact-checking mechanisms\");\n      recommendations.push(\"Use retrieval-augmented generation (RAG)\");\n    }\n\n    if (assessment.outputQuality.toxicity > 0.2) {\n      recommendations.push(\"Implement stronger content filtering\");\n      recommendations.push(\"Review training data for toxic content\");\n    }\n\n    if (assessment.outputQuality.bias > 0.2) {\n      recommendations.push(\"Implement bias detection and mitigation\");\n      recommendations.push(\"Review training data for bias patterns\");\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Calculate trend between current and previous values\n   */\n  private calculateTrend(\n    currentValues: number[],\n    previousValues: number[],\n    higherIsBetter: boolean = true\n  ): QualityTrends[\"trends\"][\"overallQuality\"] {\n    const current = this.calculateAverage(currentValues);\n    const previous = this.calculateAverage(previousValues);\n    const change = current - previous;\n\n    let trend: \"improving\" | \"stable\" | \"degrading\";\n    const threshold = 0.05; // 5% change threshold\n\n    if (Math.abs(change) < threshold) {\n      trend = \"stable\";\n    } else if (higherIsBetter) {\n      trend = change > 0 ? \"improving\" : \"degrading\";\n    } else {\n      trend = change < 0 ? \"improving\" : \"degrading\";\n    }\n\n    return { current, previous, change, trend };\n  }\n\n  /**\n   * Calculate average of values\n   */\n  private calculateAverage(values: number[]): number {\n    if (values.length === 0) return 0;\n    return values.reduce((sum, value) => sum + value, 0) / values.length;\n  }\n\n  /**\n   * Publish quality metrics to CloudWatch\n   */\n  private async publishQualityMetrics(\n    assessment: QualityAssessment\n  ): Promise<void> {\n    const metrics = {\n      OverallScore: assessment.overallScore,\n      Coherence: assessment.outputQuality.coherence,\n      Relevance: assessment.outputQuality.relevance,\n      Factuality: assessment.outputQuality.factuality,\n      Completeness: assessment.outputQuality.completeness,\n      Toxicity: assessment.outputQuality.toxicity,\n      Bias: assessment.outputQuality.bias,\n      Latency: assessment.performance.latency,\n      TokenCount: assessment.performance.tokenCount,\n      Cost: assessment.performance.cost,\n    };\n\n    if (assessment.userFeedback) {\n      metrics[\"UserRating\"] = assessment.userFeedback.rating;\n      metrics[\"UserHelpful\"] = assessment.userFeedback.helpful ? 1 : 0;\n      metrics[\"UserAccurate\"] = assessment.userFeedback.accurate ? 1 : 0;\n      metrics[\"UserAppropriate\"] = assessment.userFeedback.appropriate ? 1 : 0;\n    }\n\n    const metricData = Object.entries(metrics).map(([name, value]) => ({\n      MetricName: name,\n      Value: value,\n      Unit: \"None\",\n      Dimensions: [\n        {\n          Name: \"ModelId\",\n          Value: assessment.modelId,\n        },\n        {\n          Name: \"Provider\",\n          Value: assessment.provider,\n        },\n      ],\n      Timestamp: assessment.timestamp,\n    }));\n\n    await this.cloudWatch.send(\n      new PutMetricDataCommand({\n        Namespace: \"AI/Quality\",\n        MetricData: metricData,\n      })\n    );\n  }\n\n  /**\n   * Send alert through registered callbacks\n   */\n  private async sendAlert(alert: QualityAlert): Promise<void> {\n    for (const callback of this.alertCallbacks) {\n      try {\n        await callback(alert);\n      } catch (error) {\n        console.error(\"Failed to send quality alert:\", error);\n      }\n    }\n  }\n\n  /**\n   * Handle drift alerts from drift monitor\n   */\n  private async handleDriftAlert(driftAlert: DriftAlert): Promise<void> {\n    // Convert drift alert to quality alert for unified handling\n    const qualityAlert: QualityAlert = {\n      ...driftAlert,\n      id: `drift-quality-${driftAlert.id}`,\n    };\n\n    await this.sendAlert(qualityAlert);\n  }\n\n  // Simplified quality assessment methods (in production, use ML models)\n  private assessToxicity(text: string): number {\n    const toxicWords = [\"hate\", \"toxic\", \"harmful\", \"offensive\"];\n    const words = text.toLowerCase().split(/\\s+/);\n    const toxicCount = words.filter((word) =>\n      toxicWords.some((toxic) => word.includes(toxic))\n    ).length;\n    return Math.min(1.0, (toxicCount / words.length) * 10);\n  }\n\n  private assessPIIRisk(text: string): number {\n    const piiPatterns = [\n      /\\b\\d{3}-\\d{2}-\\d{4}\\b/, // SSN\n      /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/, // Email\n      /\\b\\d{3}-\\d{3}-\\d{4}\\b/, // Phone\n    ];\n\n    const matches = piiPatterns.filter((pattern) => pattern.test(text)).length;\n    return Math.min(1.0, matches / 3);\n  }\n\n  private assessCoherence(text: string): number {\n    // Simplified coherence assessment\n    const sentences = text.split(/[.!?]+/).filter((s) => s.trim().length > 0);\n    if (sentences.length === 0) return 0;\n\n    // Check for reasonable sentence length and structure\n    const avgSentenceLength = text.length / sentences.length;\n    const coherenceScore = Math.min(\n      1.0,\n      Math.max(0.0, 1.0 - Math.abs(avgSentenceLength - 100) / 200)\n    );\n\n    return coherenceScore;\n  }\n\n  private assessRelevance(output: string, input: string): number {\n    // Simplified relevance assessment based on keyword overlap\n    const inputWords = new Set(input.toLowerCase().split(/\\s+/));\n    const outputWords = output.toLowerCase().split(/\\s+/);\n\n    const relevantWords = outputWords.filter((word) =>\n      inputWords.has(word)\n    ).length;\n    return Math.min(1.0, relevantWords / Math.max(1, outputWords.length / 2));\n  }\n\n  private assessFactuality(text: string): number {\n    // Simplified factuality assessment\n    const uncertaintyWords = [\"maybe\", \"possibly\", \"might\", \"could\", \"perhaps\"];\n    const factualWords = [\"is\", \"are\", \"was\", \"were\", \"will\", \"has\", \"have\"];\n\n    const words = text.toLowerCase().split(/\\s+/);\n    const uncertainCount = words.filter((word) =>\n      uncertaintyWords.includes(word)\n    ).length;\n    const factualCount = words.filter((word) =>\n      factualWords.includes(word)\n    ).length;\n\n    return Math.min(\n      1.0,\n      Math.max(0.0, ((factualCount - uncertainCount) / words.length) * 10 + 0.5)\n    );\n  }\n\n  private assessBias(text: string): number {\n    // Simplified bias assessment\n    const biasWords = [\"always\", \"never\", \"all\", \"none\", \"everyone\", \"nobody\"];\n    const words = text.toLowerCase().split(/\\s+/);\n    const biasCount = words.filter((word) => biasWords.includes(word)).length;\n\n    return Math.min(1.0, (biasCount / words.length) * 5);\n  }\n}\n\nexport default QualityMonitor;\n"],"version":3}
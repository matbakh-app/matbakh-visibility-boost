7e63a40f142fff437652f2f50a4d8590
"use strict";

/**
 * Test Mocks for Unified AI API
 *
 * Provides complete mock implementations for all dependencies
 */
/* istanbul ignore next */
function cov_2b1vgcyb63() {
  var path = "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/test-mocks.ts";
  var hash = "ead92b3266180707041dca294c92ed6c578296e4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/test-mocks.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 62
        }
      },
      "1": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 291
        }
      },
      "2": {
        start: {
          line: 9,
          column: 16
        },
        end: {
          line: 9,
          column: 32
        }
      },
      "3": {
        start: {
          line: 10,
          column: 18
        },
        end: {
          line: 10,
          column: 42
        }
      },
      "4": {
        start: {
          line: 14,
          column: 26
        },
        end: {
          line: 27,
          column: 2
        }
      },
      "5": {
        start: {
          line: 14,
          column: 33
        },
        end: {
          line: 27,
          column: 1
        }
      },
      "6": {
        start: {
          line: 28,
          column: 0
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "7": {
        start: {
          line: 32,
          column: 24
        },
        end: {
          line: 36,
          column: 2
        }
      },
      "8": {
        start: {
          line: 32,
          column: 31
        },
        end: {
          line: 36,
          column: 1
        }
      },
      "9": {
        start: {
          line: 37,
          column: 0
        },
        end: {
          line: 37,
          column: 42
        }
      },
      "10": {
        start: {
          line: 41,
          column: 33
        },
        end: {
          line: 50,
          column: 2
        }
      },
      "11": {
        start: {
          line: 41,
          column: 40
        },
        end: {
          line: 50,
          column: 1
        }
      },
      "12": {
        start: {
          line: 47,
          column: 67
        },
        end: {
          line: 49,
          column: 6
        }
      },
      "13": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 33
        }
      },
      "14": {
        start: {
          line: 51,
          column: 0
        },
        end: {
          line: 51,
          column: 60
        }
      },
      "15": {
        start: {
          line: 55,
          column: 31
        },
        end: {
          line: 58,
          column: 2
        }
      },
      "16": {
        start: {
          line: 55,
          column: 38
        },
        end: {
          line: 58,
          column: 1
        }
      },
      "17": {
        start: {
          line: 59,
          column: 0
        },
        end: {
          line: 59,
          column: 56
        }
      },
      "18": {
        start: {
          line: 63,
          column: 34
        },
        end: {
          line: 74,
          column: 2
        }
      },
      "19": {
        start: {
          line: 63,
          column: 49
        },
        end: {
          line: 74,
          column: 1
        }
      },
      "20": {
        start: {
          line: 75,
          column: 0
        },
        end: {
          line: 75,
          column: 62
        }
      },
      "21": {
        start: {
          line: 79,
          column: 32
        },
        end: {
          line: 98,
          column: 2
        }
      },
      "22": {
        start: {
          line: 79,
          column: 39
        },
        end: {
          line: 98,
          column: 1
        }
      },
      "23": {
        start: {
          line: 99,
          column: 0
        },
        end: {
          line: 99,
          column: 58
        }
      },
      "24": {
        start: {
          line: 103,
          column: 32
        },
        end: {
          line: 115,
          column: 2
        }
      },
      "25": {
        start: {
          line: 103,
          column: 39
        },
        end: {
          line: 115,
          column: 1
        }
      },
      "26": {
        start: {
          line: 116,
          column: 0
        },
        end: {
          line: 116,
          column: 58
        }
      },
      "27": {
        start: {
          line: 120,
          column: 28
        },
        end: {
          line: 139,
          column: 1
        }
      },
      "28": {
        start: {
          line: 121,
          column: 20
        },
        end: {
          line: 121,
          column: 52
        }
      },
      "29": {
        start: {
          line: 122,
          column: 18
        },
        end: {
          line: 122,
          column: 48
        }
      },
      "30": {
        start: {
          line: 123,
          column: 28
        },
        end: {
          line: 123,
          column: 37
        }
      },
      "31": {
        start: {
          line: 124,
          column: 25
        },
        end: {
          line: 124,
          column: 62
        }
      },
      "32": {
        start: {
          line: 125,
          column: 26
        },
        end: {
          line: 125,
          column: 64
        }
      },
      "33": {
        start: {
          line: 126,
          column: 19
        },
        end: {
          line: 126,
          column: 57
        }
      },
      "34": {
        start: {
          line: 128,
          column: 4
        },
        end: {
          line: 130,
          column: 7
        }
      },
      "35": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 79
        }
      },
      "36": {
        start: {
          line: 131,
          column: 4
        },
        end: {
          line: 138,
          column: 6
        }
      },
      "37": {
        start: {
          line: 140,
          column: 0
        },
        end: {
          line: 140,
          column: 50
        }
      },
      "38": {
        start: {
          line: 144,
          column: 26
        },
        end: {
          line: 150,
          column: 1
        }
      },
      "39": {
        start: {
          line: 145,
          column: 4
        },
        end: {
          line: 149,
          column: 7
        }
      },
      "40": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 148,
          column: 22
        }
      },
      "41": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 70
        }
      },
      "42": {
        start: {
          line: 151,
          column: 0
        },
        end: {
          line: 151,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 26
          },
          end: {
            line: 14,
            column: 27
          }
        },
        loc: {
          start: {
            line: 14,
            column: 33
          },
          end: {
            line: 27,
            column: 1
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 32,
            column: 24
          },
          end: {
            line: 32,
            column: 25
          }
        },
        loc: {
          start: {
            line: 32,
            column: 31
          },
          end: {
            line: 36,
            column: 1
          }
        },
        line: 32
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 41,
            column: 33
          },
          end: {
            line: 41,
            column: 34
          }
        },
        loc: {
          start: {
            line: 41,
            column: 40
          },
          end: {
            line: 50,
            column: 1
          }
        },
        line: 41
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 47,
            column: 52
          },
          end: {
            line: 47,
            column: 53
          }
        },
        loc: {
          start: {
            line: 47,
            column: 67
          },
          end: {
            line: 49,
            column: 6
          }
        },
        line: 47
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 47,
            column: 109
          },
          end: {
            line: 47,
            column: 110
          }
        },
        loc: {
          start: {
            line: 47,
            column: 122
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 47
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 55,
            column: 31
          },
          end: {
            line: 55,
            column: 32
          }
        },
        loc: {
          start: {
            line: 55,
            column: 38
          },
          end: {
            line: 58,
            column: 1
          }
        },
        line: 55
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 63,
            column: 34
          },
          end: {
            line: 63,
            column: 35
          }
        },
        loc: {
          start: {
            line: 63,
            column: 49
          },
          end: {
            line: 74,
            column: 1
          }
        },
        line: 63
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 79,
            column: 32
          },
          end: {
            line: 79,
            column: 33
          }
        },
        loc: {
          start: {
            line: 79,
            column: 39
          },
          end: {
            line: 98,
            column: 1
          }
        },
        line: 79
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 103,
            column: 32
          },
          end: {
            line: 103,
            column: 33
          }
        },
        loc: {
          start: {
            line: 103,
            column: 39
          },
          end: {
            line: 115,
            column: 1
          }
        },
        line: 103
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 120,
            column: 28
          },
          end: {
            line: 120,
            column: 29
          }
        },
        loc: {
          start: {
            line: 120,
            column: 34
          },
          end: {
            line: 139,
            column: 1
          }
        },
        line: 120
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 128,
            column: 42
          },
          end: {
            line: 128,
            column: 43
          }
        },
        loc: {
          start: {
            line: 128,
            column: 56
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 128
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 144,
            column: 26
          },
          end: {
            line: 144,
            column: 27
          }
        },
        loc: {
          start: {
            line: 144,
            column: 41
          },
          end: {
            line: 150,
            column: 1
          }
        },
        line: 144
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 145,
            column: 23
          },
          end: {
            line: 145,
            column: 24
          }
        },
        loc: {
          start: {
            line: 145,
            column: 38
          },
          end: {
            line: 149,
            column: 5
          }
        },
        line: 145
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 146,
            column: 19
          },
          end: {
            line: 146,
            column: 20
          }
        },
        loc: {
          start: {
            line: 146,
            column: 25
          },
          end: {
            line: 148,
            column: 9
          }
        },
        line: 146
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {},
    inputSourceMap: {
      file: "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/test-mocks.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/test-mocks.ts"],
      sourcesContent: ["/**\n * Test Mocks for Unified AI API\n *\n * Provides complete mock implementations for all dependencies\n */\n\nimport { jest } from \"@jest/globals\";\nimport { Provider } from \"./types\";\n\n// Monitor Interface\nexport interface AiMonitor {\n  recordError(err: Error, meta?: any): Promise<void>;\n  recordSuccess(meta?: any): Promise<void>;\n  recordAttempt?(\n    provider: string,\n    latencyMs: number,\n    success: boolean\n  ): Promise<void>;\n  recordCacheHit?(): Promise<void>;\n  recordLatency(latencyMs: number, meta?: any): Promise<void>;\n  recordHealthCheck(\n    provider: string,\n    success: boolean,\n    latency: number\n  ): Promise<void>;\n  getHealth?(): Promise<any>;\n  getProviderMetrics(provider: string): Promise<any>;\n  shutdown(): Promise<void>;\n}\n\n// Cache Interface\nexport interface AiCache<T = any> {\n  get(key: string): Promise<T | undefined>;\n  set(key: string, value: T, ttlSeconds?: number): Promise<void>;\n  clear(): Promise<void>;\n}\n\n// Circuit Breaker Interface\nexport interface CircuitBreaker {\n  getState(): \"closed\" | \"open\" | \"half-open\";\n  isOpen(): boolean;\n  recordSuccess(): void;\n  recordFailure(): void;\n  reset(): void;\n  execute<T>(operation: () => Promise<T>): Promise<T>;\n}\n\n// Feature Flags Interface\nexport interface FeatureFlags {\n  isProviderEnabled(provider: string): Promise<boolean>;\n  setProviderEnabled(provider: string, enabled: boolean): Promise<void>;\n}\n\n// Provider Adapter Interface\nexport interface ProviderAdapter {\n  name: Provider;\n  generateResponse(request: any): Promise<any>;\n  testConnection?(): Promise<{ success: boolean }>;\n  healthCheck?(): Promise<void>;\n}\n\n/**\n * Create monitor mock\n */\nexport const createMonitorMock = (): AiMonitor => ({\n  recordError: jest.fn().mockResolvedValue(void 0),\n  recordSuccess: jest.fn().mockResolvedValue(void 0),\n  recordAttempt: jest.fn().mockResolvedValue(void 0),\n  recordCacheHit: jest.fn().mockResolvedValue(void 0),\n  recordLatency: jest.fn().mockResolvedValue(void 0),\n  recordHealthCheck: jest.fn().mockResolvedValue(void 0),\n  getHealth: jest.fn().mockResolvedValue({ providers: [] }),\n  getProviderMetrics: jest.fn().mockResolvedValue({\n    averageLatency: 500,\n    errorRate: 0.02,\n  }),\n  shutdown: jest.fn().mockResolvedValue(void 0),\n});\n\n/**\n * Create cache mock\n */\nexport const createCacheMock = (): AiCache => ({\n  get: jest.fn().mockResolvedValue(undefined),\n  set: jest.fn().mockResolvedValue(void 0),\n  clear: jest.fn().mockResolvedValue(void 0),\n});\n\n/**\n * Create circuit breaker mock\n */\nexport const createCircuitBreakerMock = (): any => ({\n  getState: jest.fn().mockReturnValue(\"closed\"),\n  isOpen: jest.fn().mockReturnValue(false),\n  recordSuccess: jest.fn(),\n  recordFailure: jest.fn(),\n  reset: jest.fn(),\n  execute: jest.fn().mockImplementation(async (operation) => {\n    return await operation();\n  }),\n});\n\n/**\n * Create feature flags mock\n */\nexport const createFeatureFlagsMock = (): FeatureFlags => ({\n  isProviderEnabled: jest.fn().mockResolvedValue(true),\n  setProviderEnabled: jest.fn().mockResolvedValue(void 0),\n});\n\n/**\n * Create provider adapter mock\n */\nexport const createProviderAdapterMock = (\n  provider: Provider\n): ProviderAdapter => ({\n  name: provider,\n  generateResponse: jest.fn().mockResolvedValue({\n    content: `Mock response from ${provider}`,\n    provider,\n    requestId: \"mock-request-id\",\n    processingTime: 500,\n    success: true,\n  }),\n  testConnection: jest.fn().mockResolvedValue({ success: true }),\n  healthCheck: jest.fn().mockResolvedValue(void 0),\n});\n\n/**\n * Create multi-provider integration mock\n */\nexport const createMultiProviderMock = () => ({\n  routeRequest: jest.fn().mockResolvedValue({\n    content: \"Mock multi-provider response\",\n    provider: \"bedrock\" as Provider,\n    requestId: \"mock-request-id\",\n    processingTime: 500,\n    success: true,\n  }),\n  getProviderHealth: jest.fn().mockResolvedValue([\n    {\n      provider: \"bedrock\" as Provider,\n      status: \"healthy\" as const,\n      latency: 500,\n      errorRate: 0.01,\n      lastCheck: new Date(),\n      circuitBreakerState: \"closed\" as const,\n    },\n  ]),\n  updateProviderConfig: jest.fn(),\n});\n\n/**\n * Create router gateway mock\n */\nexport const createRouterGatewayMock = () => ({\n  execute: jest.fn().mockResolvedValue({\n    provider: \"bedrock\" as Provider,\n    modelId: \"claude-3-5-sonnet\",\n    text: \"Mock router response\",\n    latencyMs: 500,\n    costEuro: 0.01,\n    success: true,\n    requestId: \"mock-request-id\",\n  }),\n  getAvailableModels: jest.fn().mockReturnValue([]),\n  updateModelCapability: jest.fn(),\n});\n\n/**\n * Setup all mocks for unified AI API tests\n */\nexport const setupUnifiedAiMocks = () => {\n  const monitor = createMonitorMock();\n  const cache = createCacheMock();\n  const circuitBreakers = new Map<Provider, CircuitBreaker>();\n  const featureFlags = createFeatureFlagsMock();\n  const multiProvider = createMultiProviderMock();\n  const router = createRouterGatewayMock();\n\n  // Setup circuit breakers for each provider\n  ([\"bedrock\", \"google\", \"meta\"] as Provider[]).forEach((provider) => {\n    circuitBreakers.set(provider, createCircuitBreakerMock());\n  });\n\n  return {\n    monitor,\n    cache,\n    circuitBreakers,\n    featureFlags,\n    multiProvider,\n    router,\n  };\n};\n\n/**\n * Mock timeout promise for testing\n */\nexport const createTimeoutMock = (timeoutMs: number) => {\n  return new Promise((_, reject) => {\n    setTimeout(() => {\n      reject(new Error(`Request timeout after ${timeoutMs}ms`));\n    }, timeoutMs);\n  });\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ead92b3266180707041dca294c92ed6c578296e4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2b1vgcyb63 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2b1vgcyb63();
cov_2b1vgcyb63().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2b1vgcyb63().s[1]++;
exports.createTimeoutMock = exports.setupUnifiedAiMocks = exports.createRouterGatewayMock = exports.createMultiProviderMock = exports.createProviderAdapterMock = exports.createFeatureFlagsMock = exports.createCircuitBreakerMock = exports.createCacheMock = exports.createMonitorMock = void 0;
const tslib_1 =
/* istanbul ignore next */
(cov_2b1vgcyb63().s[2]++, require("tslib"));
const globals_1 =
/* istanbul ignore next */
(cov_2b1vgcyb63().s[3]++, require("@jest/globals"));
/**
 * Create monitor mock
 */
/* istanbul ignore next */
cov_2b1vgcyb63().s[4]++;
const createMonitorMock = () => {
  /* istanbul ignore next */
  cov_2b1vgcyb63().f[0]++;
  cov_2b1vgcyb63().s[5]++;
  return {
    recordError: globals_1.jest.fn().mockResolvedValue(void 0),
    recordSuccess: globals_1.jest.fn().mockResolvedValue(void 0),
    recordAttempt: globals_1.jest.fn().mockResolvedValue(void 0),
    recordCacheHit: globals_1.jest.fn().mockResolvedValue(void 0),
    recordLatency: globals_1.jest.fn().mockResolvedValue(void 0),
    recordHealthCheck: globals_1.jest.fn().mockResolvedValue(void 0),
    getHealth: globals_1.jest.fn().mockResolvedValue({
      providers: []
    }),
    getProviderMetrics: globals_1.jest.fn().mockResolvedValue({
      averageLatency: 500,
      errorRate: 0.02
    }),
    shutdown: globals_1.jest.fn().mockResolvedValue(void 0)
  };
};
/* istanbul ignore next */
cov_2b1vgcyb63().s[6]++;
exports.createMonitorMock = createMonitorMock;
/**
 * Create cache mock
 */
/* istanbul ignore next */
cov_2b1vgcyb63().s[7]++;
const createCacheMock = () => {
  /* istanbul ignore next */
  cov_2b1vgcyb63().f[1]++;
  cov_2b1vgcyb63().s[8]++;
  return {
    get: globals_1.jest.fn().mockResolvedValue(undefined),
    set: globals_1.jest.fn().mockResolvedValue(void 0),
    clear: globals_1.jest.fn().mockResolvedValue(void 0)
  };
};
/* istanbul ignore next */
cov_2b1vgcyb63().s[9]++;
exports.createCacheMock = createCacheMock;
/**
 * Create circuit breaker mock
 */
/* istanbul ignore next */
cov_2b1vgcyb63().s[10]++;
const createCircuitBreakerMock = () => {
  /* istanbul ignore next */
  cov_2b1vgcyb63().f[2]++;
  cov_2b1vgcyb63().s[11]++;
  return {
    getState: globals_1.jest.fn().mockReturnValue("closed"),
    isOpen: globals_1.jest.fn().mockReturnValue(false),
    recordSuccess: globals_1.jest.fn(),
    recordFailure: globals_1.jest.fn(),
    reset: globals_1.jest.fn(),
    execute: globals_1.jest.fn().mockImplementation(operation => {
      /* istanbul ignore next */
      cov_2b1vgcyb63().f[3]++;
      cov_2b1vgcyb63().s[12]++;
      return tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        /* istanbul ignore next */
        cov_2b1vgcyb63().f[4]++;
        cov_2b1vgcyb63().s[13]++;
        return yield operation();
      });
    })
  };
};
/* istanbul ignore next */
cov_2b1vgcyb63().s[14]++;
exports.createCircuitBreakerMock = createCircuitBreakerMock;
/**
 * Create feature flags mock
 */
/* istanbul ignore next */
cov_2b1vgcyb63().s[15]++;
const createFeatureFlagsMock = () => {
  /* istanbul ignore next */
  cov_2b1vgcyb63().f[5]++;
  cov_2b1vgcyb63().s[16]++;
  return {
    isProviderEnabled: globals_1.jest.fn().mockResolvedValue(true),
    setProviderEnabled: globals_1.jest.fn().mockResolvedValue(void 0)
  };
};
/* istanbul ignore next */
cov_2b1vgcyb63().s[17]++;
exports.createFeatureFlagsMock = createFeatureFlagsMock;
/**
 * Create provider adapter mock
 */
/* istanbul ignore next */
cov_2b1vgcyb63().s[18]++;
const createProviderAdapterMock = provider => {
  /* istanbul ignore next */
  cov_2b1vgcyb63().f[6]++;
  cov_2b1vgcyb63().s[19]++;
  return {
    name: provider,
    generateResponse: globals_1.jest.fn().mockResolvedValue({
      content: `Mock response from ${provider}`,
      provider,
      requestId: "mock-request-id",
      processingTime: 500,
      success: true
    }),
    testConnection: globals_1.jest.fn().mockResolvedValue({
      success: true
    }),
    healthCheck: globals_1.jest.fn().mockResolvedValue(void 0)
  };
};
/* istanbul ignore next */
cov_2b1vgcyb63().s[20]++;
exports.createProviderAdapterMock = createProviderAdapterMock;
/**
 * Create multi-provider integration mock
 */
/* istanbul ignore next */
cov_2b1vgcyb63().s[21]++;
const createMultiProviderMock = () => {
  /* istanbul ignore next */
  cov_2b1vgcyb63().f[7]++;
  cov_2b1vgcyb63().s[22]++;
  return {
    routeRequest: globals_1.jest.fn().mockResolvedValue({
      content: "Mock multi-provider response",
      provider: "bedrock",
      requestId: "mock-request-id",
      processingTime: 500,
      success: true
    }),
    getProviderHealth: globals_1.jest.fn().mockResolvedValue([{
      provider: "bedrock",
      status: "healthy",
      latency: 500,
      errorRate: 0.01,
      lastCheck: new Date(),
      circuitBreakerState: "closed"
    }]),
    updateProviderConfig: globals_1.jest.fn()
  };
};
/* istanbul ignore next */
cov_2b1vgcyb63().s[23]++;
exports.createMultiProviderMock = createMultiProviderMock;
/**
 * Create router gateway mock
 */
/* istanbul ignore next */
cov_2b1vgcyb63().s[24]++;
const createRouterGatewayMock = () => {
  /* istanbul ignore next */
  cov_2b1vgcyb63().f[8]++;
  cov_2b1vgcyb63().s[25]++;
  return {
    execute: globals_1.jest.fn().mockResolvedValue({
      provider: "bedrock",
      modelId: "claude-3-5-sonnet",
      text: "Mock router response",
      latencyMs: 500,
      costEuro: 0.01,
      success: true,
      requestId: "mock-request-id"
    }),
    getAvailableModels: globals_1.jest.fn().mockReturnValue([]),
    updateModelCapability: globals_1.jest.fn()
  };
};
/* istanbul ignore next */
cov_2b1vgcyb63().s[26]++;
exports.createRouterGatewayMock = createRouterGatewayMock;
/**
 * Setup all mocks for unified AI API tests
 */
/* istanbul ignore next */
cov_2b1vgcyb63().s[27]++;
const setupUnifiedAiMocks = () => {
  /* istanbul ignore next */
  cov_2b1vgcyb63().f[9]++;
  const monitor =
  /* istanbul ignore next */
  (cov_2b1vgcyb63().s[28]++, (0, exports.createMonitorMock)());
  const cache =
  /* istanbul ignore next */
  (cov_2b1vgcyb63().s[29]++, (0, exports.createCacheMock)());
  const circuitBreakers =
  /* istanbul ignore next */
  (cov_2b1vgcyb63().s[30]++, new Map());
  const featureFlags =
  /* istanbul ignore next */
  (cov_2b1vgcyb63().s[31]++, (0, exports.createFeatureFlagsMock)());
  const multiProvider =
  /* istanbul ignore next */
  (cov_2b1vgcyb63().s[32]++, (0, exports.createMultiProviderMock)());
  const router =
  /* istanbul ignore next */
  (cov_2b1vgcyb63().s[33]++, (0, exports.createRouterGatewayMock)());
  // Setup circuit breakers for each provider
  /* istanbul ignore next */
  cov_2b1vgcyb63().s[34]++;
  ["bedrock", "google", "meta"].forEach(provider => {
    /* istanbul ignore next */
    cov_2b1vgcyb63().f[10]++;
    cov_2b1vgcyb63().s[35]++;
    circuitBreakers.set(provider, (0, exports.createCircuitBreakerMock)());
  });
  /* istanbul ignore next */
  cov_2b1vgcyb63().s[36]++;
  return {
    monitor,
    cache,
    circuitBreakers,
    featureFlags,
    multiProvider,
    router
  };
};
/* istanbul ignore next */
cov_2b1vgcyb63().s[37]++;
exports.setupUnifiedAiMocks = setupUnifiedAiMocks;
/**
 * Mock timeout promise for testing
 */
/* istanbul ignore next */
cov_2b1vgcyb63().s[38]++;
const createTimeoutMock = timeoutMs => {
  /* istanbul ignore next */
  cov_2b1vgcyb63().f[11]++;
  cov_2b1vgcyb63().s[39]++;
  return new Promise((_, reject) => {
    /* istanbul ignore next */
    cov_2b1vgcyb63().f[12]++;
    cov_2b1vgcyb63().s[40]++;
    setTimeout(() => {
      /* istanbul ignore next */
      cov_2b1vgcyb63().f[13]++;
      cov_2b1vgcyb63().s[41]++;
      reject(new Error(`Request timeout after ${timeoutMs}ms`));
    }, timeoutMs);
  });
};
/* istanbul ignore next */
cov_2b1vgcyb63().s[42]++;
exports.createTimeoutMock = createTimeoutMock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
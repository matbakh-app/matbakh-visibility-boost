f5a0c8430cef3292f24de2df0d532bcb
"use strict";

/* istanbul ignore next */
function cov_15wek86zv2() {
  var path = "/Users/matbakh-visibility-boost.20250920/src/lib/multi-region/health-checker.ts";
  var hash = "3c42ce29e0f92e7d87800f7ca2f5e7f67a793f9c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matbakh-visibility-boost.20250920/src/lib/multi-region/health-checker.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 31
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 28
        },
        end: {
          line: 5,
          column: 65
        }
      },
      "4": {
        start: {
          line: 6,
          column: 29
        },
        end: {
          line: 6,
          column: 67
        }
      },
      "5": {
        start: {
          line: 7,
          column: 21
        },
        end: {
          line: 7,
          column: 51
        }
      },
      "6": {
        start: {
          line: 8,
          column: 26
        },
        end: {
          line: 8,
          column: 61
        }
      },
      "7": {
        start: {
          line: 9,
          column: 20
        },
        end: {
          line: 9,
          column: 49
        }
      },
      "8": {
        start: {
          line: 10,
          column: 33
        },
        end: {
          line: 10,
          column: 75
        }
      },
      "9": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 29
        }
      },
      "10": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 196
        }
      },
      "11": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 202
        }
      },
      "12": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 208
        }
      },
      "13": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 222
        }
      },
      "14": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 228
        }
      },
      "15": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 198
        }
      },
      "16": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 204
        }
      },
      "17": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 233
        }
      },
      "18": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 239
        }
      },
      "19": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 216
        }
      },
      "20": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 66,
          column: 11
        }
      },
      "21": {
        start: {
          line: 32,
          column: 30
        },
        end: {
          line: 32,
          column: 40
        }
      },
      "22": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 65,
          column: 13
        }
      },
      "23": {
        start: {
          line: 35,
          column: 38
        },
        end: {
          line: 35,
          column: 77
        }
      },
      "24": {
        start: {
          line: 37,
          column: 40
        },
        end: {
          line: 37,
          column: 81
        }
      },
      "25": {
        start: {
          line: 39,
          column: 36
        },
        end: {
          line: 42,
          column: 17
        }
      },
      "26": {
        start: {
          line: 43,
          column: 32
        },
        end: {
          line: 43,
          column: 72
        }
      },
      "27": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 52,
          column: 18
        }
      },
      "28": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 70
        }
      },
      "29": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 64,
          column: 18
        }
      },
      "30": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 94,
          column: 11
        }
      },
      "31": {
        start: {
          line: 73,
          column: 31
        },
        end: {
          line: 73,
          column: 109
        }
      },
      "32": {
        start: {
          line: 74,
          column: 85
        },
        end: {
          line: 80,
          column: 14
        }
      },
      "33": {
        start: {
          line: 81,
          column: 29
        },
        end: {
          line: 87,
          column: 13
        }
      },
      "34": {
        start: {
          line: 88,
          column: 33
        },
        end: {
          line: 88,
          column: 85
        }
      },
      "35": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 93,
          column: 14
        }
      },
      "36": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 146,
          column: 11
        }
      },
      "37": {
        start: {
          line: 102,
          column: 30
        },
        end: {
          line: 102,
          column: 40
        }
      },
      "38": {
        start: {
          line: 103,
          column: 34
        },
        end: {
          line: 105,
          column: 52
        }
      },
      "39": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 145,
          column: 13
        }
      },
      "40": {
        start: {
          line: 108,
          column: 38
        },
        end: {
          line: 110,
          column: 18
        }
      },
      "41": {
        start: {
          line: 111,
          column: 39
        },
        end: {
          line: 111,
          column: 83
        }
      },
      "42": {
        start: {
          line: 113,
          column: 38
        },
        end: {
          line: 115,
          column: 18
        }
      },
      "43": {
        start: {
          line: 116,
          column: 39
        },
        end: {
          line: 116,
          column: 83
        }
      },
      "44": {
        start: {
          line: 117,
          column: 37
        },
        end: {
          line: 117,
          column: 59
        }
      },
      "45": {
        start: {
          line: 118,
          column: 37
        },
        end: {
          line: 118,
          column: 112
        }
      },
      "46": {
        start: {
          line: 119,
          column: 34
        },
        end: {
          line: 119,
          column: 129
        }
      },
      "47": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 133,
          column: 18
        }
      },
      "48": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 144,
          column: 18
        }
      },
      "49": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 208,
          column: 11
        }
      },
      "50": {
        start: {
          line: 154,
          column: 30
        },
        end: {
          line: 154,
          column: 40
        }
      },
      "51": {
        start: {
          line: 155,
          column: 27
        },
        end: {
          line: 155,
          column: 97
        }
      },
      "52": {
        start: {
          line: 156,
          column: 30
        },
        end: {
          line: 158,
          column: 56
        }
      },
      "53": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 207,
          column: 13
        }
      },
      "54": {
        start: {
          line: 160,
          column: 32
        },
        end: {
          line: 162,
          column: 18
        }
      },
      "55": {
        start: {
          line: 163,
          column: 33
        },
        end: {
          line: 163,
          column: 59
        }
      },
      "56": {
        start: {
          line: 164,
          column: 32
        },
        end: {
          line: 164,
          column: 101
        }
      },
      "57": {
        start: {
          line: 165,
          column: 37
        },
        end: {
          line: 165,
          column: 59
        }
      },
      "58": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 168,
          column: 17
        }
      },
      "59": {
        start: {
          line: 167,
          column: 20
        },
        end: {
          line: 167,
          column: 57
        }
      },
      "60": {
        start: {
          line: 169,
          column: 34
        },
        end: {
          line: 169,
          column: 64
        }
      },
      "61": {
        start: {
          line: 170,
          column: 31
        },
        end: {
          line: 171,
          column: 112
        }
      },
      "62": {
        start: {
          line: 173,
          column: 39
        },
        end: {
          line: 178,
          column: 18
        }
      },
      "63": {
        start: {
          line: 179,
          column: 16
        },
        end: {
          line: 195,
          column: 18
        }
      },
      "64": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 206,
          column: 18
        }
      },
      "65": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 262,
          column: 11
        }
      },
      "66": {
        start: {
          line: 215,
          column: 30
        },
        end: {
          line: 215,
          column: 40
        }
      },
      "67": {
        start: {
          line: 216,
          column: 27
        },
        end: {
          line: 216,
          column: 101
        }
      },
      "68": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 261,
          column: 13
        }
      },
      "69": {
        start: {
          line: 218,
          column: 32
        },
        end: {
          line: 218,
          column: 93
        }
      },
      "70": {
        start: {
          line: 219,
          column: 33
        },
        end: {
          line: 219,
          column: 59
        }
      },
      "71": {
        start: {
          line: 220,
          column: 37
        },
        end: {
          line: 220,
          column: 59
        }
      },
      "72": {
        start: {
          line: 221,
          column: 42
        },
        end: {
          line: 221,
          column: 74
        }
      },
      "73": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 231,
          column: 17
        }
      },
      "74": {
        start: {
          line: 223,
          column: 20
        },
        end: {
          line: 230,
          column: 22
        }
      },
      "75": {
        start: {
          line: 232,
          column: 37
        },
        end: {
          line: 232,
          column: 57
        }
      },
      "76": {
        start: {
          line: 233,
          column: 34
        },
        end: {
          line: 233,
          column: 69
        }
      },
      "77": {
        start: {
          line: 234,
          column: 31
        },
        end: {
          line: 235,
          column: 120
        }
      },
      "78": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 249,
          column: 18
        }
      },
      "79": {
        start: {
          line: 252,
          column: 16
        },
        end: {
          line: 260,
          column: 18
        }
      },
      "80": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 327,
          column: 11
        }
      },
      "81": {
        start: {
          line: 270,
          column: 30
        },
        end: {
          line: 270,
          column: 40
        }
      },
      "82": {
        start: {
          line: 271,
          column: 27
        },
        end: {
          line: 271,
          column: 95
        }
      },
      "83": {
        start: {
          line: 272,
          column: 31
        },
        end: {
          line: 272,
          column: 126
        }
      },
      "84": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 326,
          column: 13
        }
      },
      "85": {
        start: {
          line: 275,
          column: 36
        },
        end: {
          line: 278,
          column: 18
        }
      },
      "86": {
        start: {
          line: 279,
          column: 16
        },
        end: {
          line: 287,
          column: 17
        }
      },
      "87": {
        start: {
          line: 280,
          column: 20
        },
        end: {
          line: 280,
          column: 51
        }
      },
      "88": {
        start: {
          line: 284,
          column: 20
        },
        end: {
          line: 286,
          column: 21
        }
      },
      "89": {
        start: {
          line: 285,
          column: 24
        },
        end: {
          line: 285,
          column: 40
        }
      },
      "90": {
        start: {
          line: 288,
          column: 37
        },
        end: {
          line: 288,
          column: 59
        }
      },
      "91": {
        start: {
          line: 290,
          column: 41
        },
        end: {
          line: 290,
          column: 43
        }
      },
      "92": {
        start: {
          line: 291,
          column: 16
        },
        end: {
          line: 306,
          column: 17
        }
      },
      "93": {
        start: {
          line: 292,
          column: 20
        },
        end: {
          line: 305,
          column: 21
        }
      },
      "94": {
        start: {
          line: 293,
          column: 51
        },
        end: {
          line: 295,
          column: 26
        }
      },
      "95": {
        start: {
          line: 296,
          column: 52
        },
        end: {
          line: 296,
          column: 89
        }
      },
      "96": {
        start: {
          line: 297,
          column: 24
        },
        end: {
          line: 300,
          column: 26
        }
      },
      "97": {
        start: {
          line: 304,
          column: 24
        },
        end: {
          line: 304,
          column: 78
        }
      },
      "98": {
        start: {
          line: 307,
          column: 16
        },
        end: {
          line: 314,
          column: 18
        }
      },
      "99": {
        start: {
          line: 317,
          column: 16
        },
        end: {
          line: 325,
          column: 18
        }
      },
      "100": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 365,
          column: 11
        }
      },
      "101": {
        start: {
          line: 334,
          column: 30
        },
        end: {
          line: 334,
          column: 40
        }
      },
      "102": {
        start: {
          line: 335,
          column: 27
        },
        end: {
          line: 335,
          column: 105
        }
      },
      "103": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 364,
          column: 13
        }
      },
      "104": {
        start: {
          line: 338,
          column: 32
        },
        end: {
          line: 340,
          column: 18
        }
      },
      "105": {
        start: {
          line: 341,
          column: 16
        },
        end: {
          line: 341,
          column: 43
        }
      },
      "106": {
        start: {
          line: 342,
          column: 37
        },
        end: {
          line: 342,
          column: 59
        }
      },
      "107": {
        start: {
          line: 343,
          column: 16
        },
        end: {
          line: 352,
          column: 18
        }
      },
      "108": {
        start: {
          line: 355,
          column: 16
        },
        end: {
          line: 363,
          column: 18
        }
      },
      "109": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 442,
          column: 11
        }
      },
      "110": {
        start: {
          line: 374,
          column: 23
        },
        end: {
          line: 374,
          column: 44
        }
      },
      "111": {
        start: {
          line: 375,
          column: 24
        },
        end: {
          line: 375,
          column: 34
        }
      },
      "112": {
        start: {
          line: 376,
          column: 26
        },
        end: {
          line: 376,
          column: 65
        }
      },
      "113": {
        start: {
          line: 377,
          column: 28
        },
        end: {
          line: 377,
          column: 30
        }
      },
      "114": {
        start: {
          line: 379,
          column: 12
        },
        end: {
          line: 393,
          column: 13
        }
      },
      "115": {
        start: {
          line: 380,
          column: 16
        },
        end: {
          line: 392,
          column: 19
        }
      },
      "116": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 409,
          column: 13
        }
      },
      "117": {
        start: {
          line: 396,
          column: 16
        },
        end: {
          line: 408,
          column: 19
        }
      },
      "118": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 425,
          column: 13
        }
      },
      "119": {
        start: {
          line: 412,
          column: 16
        },
        end: {
          line: 424,
          column: 19
        }
      },
      "120": {
        start: {
          line: 426,
          column: 12
        },
        end: {
          line: 427,
          column: 25
        }
      },
      "121": {
        start: {
          line: 427,
          column: 16
        },
        end: {
          line: 427,
          column: 25
        }
      },
      "122": {
        start: {
          line: 428,
          column: 12
        },
        end: {
          line: 441,
          column: 13
        }
      },
      "123": {
        start: {
          line: 429,
          column: 29
        },
        end: {
          line: 433,
          column: 19
        }
      },
      "124": {
        start: {
          line: 435,
          column: 32
        },
        end: {
          line: 435,
          column: 287
        }
      },
      "125": {
        start: {
          line: 435,
          column: 127
        },
        end: {
          line: 435,
          column: 193
        }
      },
      "126": {
        start: {
          line: 435,
          column: 209
        },
        end: {
          line: 435,
          column: 250
        }
      },
      "127": {
        start: {
          line: 437,
          column: 16
        },
        end: {
          line: 437,
          column: 50
        }
      },
      "128": {
        start: {
          line: 440,
          column: 16
        },
        end: {
          line: 440,
          column: 25
        }
      },
      "129": {
        start: {
          line: 448,
          column: 8
        },
        end: {
          line: 458,
          column: 11
        }
      },
      "130": {
        start: {
          line: 449,
          column: 12
        },
        end: {
          line: 451,
          column: 13
        }
      },
      "131": {
        start: {
          line: 450,
          column: 16
        },
        end: {
          line: 450,
          column: 25
        }
      },
      "132": {
        start: {
          line: 452,
          column: 12
        },
        end: {
          line: 457,
          column: 15
        }
      },
      "133": {
        start: {
          line: 464,
          column: 8
        },
        end: {
          line: 476,
          column: 9
        }
      },
      "134": {
        start: {
          line: 465,
          column: 12
        },
        end: {
          line: 465,
          column: 32
        }
      },
      "135": {
        start: {
          line: 468,
          column: 12
        },
        end: {
          line: 475,
          column: 14
        }
      },
      "136": {
        start: {
          line: 482,
          column: 31
        },
        end: {
          line: 482,
          column: 84
        }
      },
      "137": {
        start: {
          line: 482,
          column: 52
        },
        end: {
          line: 482,
          column: 76
        }
      },
      "138": {
        start: {
          line: 483,
          column: 30
        },
        end: {
          line: 483,
          column: 82
        }
      },
      "139": {
        start: {
          line: 483,
          column: 51
        },
        end: {
          line: 483,
          column: 74
        }
      },
      "140": {
        start: {
          line: 484,
          column: 8
        },
        end: {
          line: 486,
          column: 9
        }
      },
      "141": {
        start: {
          line: 485,
          column: 12
        },
        end: {
          line: 485,
          column: 83
        }
      },
      "142": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 489,
          column: 9
        }
      },
      "143": {
        start: {
          line: 488,
          column: 12
        },
        end: {
          line: 488,
          column: 30
        }
      },
      "144": {
        start: {
          line: 490,
          column: 8
        },
        end: {
          line: 490,
          column: 25
        }
      },
      "145": {
        start: {
          line: 496,
          column: 27
        },
        end: {
          line: 496,
          column: 105
        }
      },
      "146": {
        start: {
          line: 497,
          column: 29
        },
        end: {
          line: 497,
          column: 85
        }
      },
      "147": {
        start: {
          line: 498,
          column: 28
        },
        end: {
          line: 505,
          column: 9
        }
      },
      "148": {
        start: {
          line: 506,
          column: 8
        },
        end: {
          line: 516,
          column: 10
        }
      },
      "149": {
        start: {
          line: 522,
          column: 8
        },
        end: {
          line: 561,
          column: 11
        }
      },
      "150": {
        start: {
          line: 523,
          column: 33
        },
        end: {
          line: 523,
          column: 62
        }
      },
      "151": {
        start: {
          line: 524,
          column: 33
        },
        end: {
          line: 527,
          column: 13
        }
      },
      "152": {
        start: {
          line: 528,
          column: 34
        },
        end: {
          line: 531,
          column: 18
        }
      },
      "153": {
        start: {
          line: 529,
          column: 16
        },
        end: {
          line: 529,
          column: 77
        }
      },
      "154": {
        start: {
          line: 530,
          column: 16
        },
        end: {
          line: 530,
          column: 27
        }
      },
      "155": {
        start: {
          line: 533,
          column: 26
        },
        end: {
          line: 535,
          column: 60
        }
      },
      "156": {
        start: {
          line: 534,
          column: 36
        },
        end: {
          line: 534,
          column: 100
        }
      },
      "157": {
        start: {
          line: 535,
          column: 29
        },
        end: {
          line: 535,
          column: 59
        }
      },
      "158": {
        start: {
          line: 536,
          column: 40
        },
        end: {
          line: 538,
          column: 19
        }
      },
      "159": {
        start: {
          line: 537,
          column: 52
        },
        end: {
          line: 537,
          column: 57
        }
      },
      "160": {
        start: {
          line: 539,
          column: 32
        },
        end: {
          line: 541,
          column: 19
        }
      },
      "161": {
        start: {
          line: 540,
          column: 53
        },
        end: {
          line: 540,
          column: 75
        }
      },
      "162": {
        start: {
          line: 543,
          column: 27
        },
        end: {
          line: 546,
          column: 60
        }
      },
      "163": {
        start: {
          line: 544,
          column: 29
        },
        end: {
          line: 544,
          column: 53
        }
      },
      "164": {
        start: {
          line: 545,
          column: 40
        },
        end: {
          line: 545,
          column: 161
        }
      },
      "165": {
        start: {
          line: 546,
          column: 29
        },
        end: {
          line: 546,
          column: 59
        }
      },
      "166": {
        start: {
          line: 547,
          column: 35
        },
        end: {
          line: 549,
          column: 19
        }
      },
      "167": {
        start: {
          line: 548,
          column: 53
        },
        end: {
          line: 548,
          column: 58
        }
      },
      "168": {
        start: {
          line: 550,
          column: 12
        },
        end: {
          line: 560,
          column: 14
        }
      },
      "169": {
        start: {
          line: 564,
          column: 0
        },
        end: {
          line: 564,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 33
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 23
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 30
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 31,
            column: 55
          },
          end: {
            line: 31,
            column: 56
          }
        },
        loc: {
          start: {
            line: 31,
            column: 68
          },
          end: {
            line: 66,
            column: 9
          }
        },
        line: 31
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        loc: {
          start: {
            line: 71,
            column: 30
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 71
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 72,
            column: 55
          },
          end: {
            line: 72,
            column: 56
          }
        },
        loc: {
          start: {
            line: 72,
            column: 68
          },
          end: {
            line: 94,
            column: 9
          }
        },
        line: 72
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 27
          },
          end: {
            line: 147,
            column: 5
          }
        },
        line: 99
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 100,
            column: 55
          },
          end: {
            line: 100,
            column: 56
          }
        },
        loc: {
          start: {
            line: 100,
            column: 68
          },
          end: {
            line: 146,
            column: 9
          }
        },
        line: 100
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 151,
            column: 4
          },
          end: {
            line: 151,
            column: 5
          }
        },
        loc: {
          start: {
            line: 151,
            column: 32
          },
          end: {
            line: 209,
            column: 5
          }
        },
        line: 151
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 152,
            column: 55
          },
          end: {
            line: 152,
            column: 56
          }
        },
        loc: {
          start: {
            line: 152,
            column: 68
          },
          end: {
            line: 208,
            column: 9
          }
        },
        line: 152
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 213,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        loc: {
          start: {
            line: 213,
            column: 29
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 213
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 214,
            column: 55
          },
          end: {
            line: 214,
            column: 56
          }
        },
        loc: {
          start: {
            line: 214,
            column: 68
          },
          end: {
            line: 262,
            column: 9
          }
        },
        line: 214
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 267,
            column: 4
          },
          end: {
            line: 267,
            column: 5
          }
        },
        loc: {
          start: {
            line: 267,
            column: 31
          },
          end: {
            line: 328,
            column: 5
          }
        },
        line: 267
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 268,
            column: 55
          },
          end: {
            line: 268,
            column: 56
          }
        },
        loc: {
          start: {
            line: 268,
            column: 68
          },
          end: {
            line: 327,
            column: 9
          }
        },
        line: 268
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 332,
            column: 4
          },
          end: {
            line: 332,
            column: 5
          }
        },
        loc: {
          start: {
            line: 332,
            column: 31
          },
          end: {
            line: 366,
            column: 5
          }
        },
        line: 332
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 333,
            column: 55
          },
          end: {
            line: 333,
            column: 56
          }
        },
        loc: {
          start: {
            line: 333,
            column: 68
          },
          end: {
            line: 365,
            column: 9
          }
        },
        line: 333
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 370,
            column: 4
          },
          end: {
            line: 370,
            column: 5
          }
        },
        loc: {
          start: {
            line: 370,
            column: 35
          },
          end: {
            line: 443,
            column: 5
          }
        },
        line: 370
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 371,
            column: 55
          },
          end: {
            line: 371,
            column: 56
          }
        },
        loc: {
          start: {
            line: 371,
            column: 68
          },
          end: {
            line: 442,
            column: 9
          }
        },
        line: 371
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 435,
            column: 112
          },
          end: {
            line: 435,
            column: 113
          }
        },
        loc: {
          start: {
            line: 435,
            column: 117
          },
          end: {
            line: 435,
            column: 195
          }
        },
        line: 435
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 435,
            column: 202
          },
          end: {
            line: 435,
            column: 203
          }
        },
        loc: {
          start: {
            line: 435,
            column: 209
          },
          end: {
            line: 435,
            column: 250
          }
        },
        line: 435
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 447,
            column: 4
          },
          end: {
            line: 447,
            column: 5
          }
        },
        loc: {
          start: {
            line: 447,
            column: 38
          },
          end: {
            line: 459,
            column: 5
          }
        },
        line: 447
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 448,
            column: 55
          },
          end: {
            line: 448,
            column: 56
          }
        },
        loc: {
          start: {
            line: 448,
            column: 68
          },
          end: {
            line: 458,
            column: 9
          }
        },
        line: 448
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 463,
            column: 4
          },
          end: {
            line: 463,
            column: 5
          }
        },
        loc: {
          start: {
            line: 463,
            column: 43
          },
          end: {
            line: 477,
            column: 5
          }
        },
        line: 463
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 481,
            column: 4
          },
          end: {
            line: 481,
            column: 5
          }
        },
        loc: {
          start: {
            line: 481,
            column: 37
          },
          end: {
            line: 491,
            column: 5
          }
        },
        line: 481
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 482,
            column: 47
          },
          end: {
            line: 482,
            column: 48
          }
        },
        loc: {
          start: {
            line: 482,
            column: 52
          },
          end: {
            line: 482,
            column: 76
          }
        },
        line: 482
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 483,
            column: 46
          },
          end: {
            line: 483,
            column: 47
          }
        },
        loc: {
          start: {
            line: 483,
            column: 51
          },
          end: {
            line: 483,
            column: 74
          }
        },
        line: 483
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 495,
            column: 4
          },
          end: {
            line: 495,
            column: 5
          }
        },
        loc: {
          start: {
            line: 495,
            column: 43
          },
          end: {
            line: 517,
            column: 5
          }
        },
        line: 495
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 521,
            column: 4
          },
          end: {
            line: 521,
            column: 5
          }
        },
        loc: {
          start: {
            line: 521,
            column: 23
          },
          end: {
            line: 562,
            column: 5
          }
        },
        line: 521
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 522,
            column: 55
          },
          end: {
            line: 522,
            column: 56
          }
        },
        loc: {
          start: {
            line: 522,
            column: 68
          },
          end: {
            line: 561,
            column: 9
          }
        },
        line: 522
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 528,
            column: 63
          },
          end: {
            line: 528,
            column: 64
          }
        },
        loc: {
          start: {
            line: 528,
            column: 81
          },
          end: {
            line: 531,
            column: 13
          }
        },
        line: 528
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 534,
            column: 21
          },
          end: {
            line: 534,
            column: 22
          }
        },
        loc: {
          start: {
            line: 534,
            column: 26
          },
          end: {
            line: 534,
            column: 102
          }
        },
        line: 534
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 535,
            column: 24
          },
          end: {
            line: 535,
            column: 25
          }
        },
        loc: {
          start: {
            line: 535,
            column: 29
          },
          end: {
            line: 535,
            column: 59
          }
        },
        line: 535
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 537,
            column: 42
          },
          end: {
            line: 537,
            column: 43
          }
        },
        loc: {
          start: {
            line: 537,
            column: 52
          },
          end: {
            line: 537,
            column: 57
          }
        },
        line: 537
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 540,
            column: 48
          },
          end: {
            line: 540,
            column: 49
          }
        },
        loc: {
          start: {
            line: 540,
            column: 53
          },
          end: {
            line: 540,
            column: 75
          }
        },
        line: 540
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 544,
            column: 24
          },
          end: {
            line: 544,
            column: 25
          }
        },
        loc: {
          start: {
            line: 544,
            column: 29
          },
          end: {
            line: 544,
            column: 53
          }
        },
        line: 544
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 545,
            column: 21
          },
          end: {
            line: 545,
            column: 22
          }
        },
        loc: {
          start: {
            line: 545,
            column: 26
          },
          end: {
            line: 545,
            column: 163
          }
        },
        line: 545
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 546,
            column: 24
          },
          end: {
            line: 546,
            column: 25
          }
        },
        loc: {
          start: {
            line: 546,
            column: 29
          },
          end: {
            line: 546,
            column: 59
          }
        },
        line: 546
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 548,
            column: 43
          },
          end: {
            line: 548,
            column: 44
          }
        },
        loc: {
          start: {
            line: 548,
            column: 53
          },
          end: {
            line: 548,
            column: 58
          }
        },
        line: 548
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 29
          },
          end: {
            line: 16,
            column: 195
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 16,
            column: 130
          },
          end: {
            line: 16,
            column: 132
          }
        }, {
          start: {
            line: 16,
            column: 135
          },
          end: {
            line: 16,
            column: 195
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 16,
            column: 29
          },
          end: {
            line: 16,
            column: 127
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 29
          },
          end: {
            line: 16,
            column: 110
          }
        }, {
          start: {
            line: 16,
            column: 114
          },
          end: {
            line: 16,
            column: 127
          }
        }],
        line: 16
      },
      "2": {
        loc: {
          start: {
            line: 16,
            column: 35
          },
          end: {
            line: 16,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 16,
            column: 76
          },
          end: {
            line: 16,
            column: 82
          }
        }, {
          start: {
            line: 16,
            column: 85
          },
          end: {
            line: 16,
            column: 100
          }
        }],
        line: 16
      },
      "3": {
        loc: {
          start: {
            line: 16,
            column: 35
          },
          end: {
            line: 16,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 35
          },
          end: {
            line: 16,
            column: 51
          }
        }, {
          start: {
            line: 16,
            column: 55
          },
          end: {
            line: 16,
            column: 73
          }
        }],
        line: 16
      },
      "4": {
        loc: {
          start: {
            line: 17,
            column: 32
          },
          end: {
            line: 17,
            column: 201
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 17,
            column: 136
          },
          end: {
            line: 17,
            column: 138
          }
        }, {
          start: {
            line: 17,
            column: 141
          },
          end: {
            line: 17,
            column: 201
          }
        }],
        line: 17
      },
      "5": {
        loc: {
          start: {
            line: 17,
            column: 32
          },
          end: {
            line: 17,
            column: 133
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 32
          },
          end: {
            line: 17,
            column: 116
          }
        }, {
          start: {
            line: 17,
            column: 120
          },
          end: {
            line: 17,
            column: 133
          }
        }],
        line: 17
      },
      "6": {
        loc: {
          start: {
            line: 17,
            column: 38
          },
          end: {
            line: 17,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 17,
            column: 79
          },
          end: {
            line: 17,
            column: 85
          }
        }, {
          start: {
            line: 17,
            column: 88
          },
          end: {
            line: 17,
            column: 106
          }
        }],
        line: 17
      },
      "7": {
        loc: {
          start: {
            line: 17,
            column: 38
          },
          end: {
            line: 17,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 38
          },
          end: {
            line: 17,
            column: 54
          }
        }, {
          start: {
            line: 17,
            column: 58
          },
          end: {
            line: 17,
            column: 76
          }
        }],
        line: 17
      },
      "8": {
        loc: {
          start: {
            line: 18,
            column: 34
          },
          end: {
            line: 18,
            column: 207
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 18,
            column: 140
          },
          end: {
            line: 18,
            column: 142
          }
        }, {
          start: {
            line: 18,
            column: 145
          },
          end: {
            line: 18,
            column: 207
          }
        }],
        line: 18
      },
      "9": {
        loc: {
          start: {
            line: 18,
            column: 34
          },
          end: {
            line: 18,
            column: 137
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 34
          },
          end: {
            line: 18,
            column: 120
          }
        }, {
          start: {
            line: 18,
            column: 124
          },
          end: {
            line: 18,
            column: 137
          }
        }],
        line: 18
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 40
          },
          end: {
            line: 18,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 18,
            column: 81
          },
          end: {
            line: 18,
            column: 87
          }
        }, {
          start: {
            line: 18,
            column: 90
          },
          end: {
            line: 18,
            column: 110
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 18,
            column: 40
          },
          end: {
            line: 18,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 40
          },
          end: {
            line: 18,
            column: 56
          }
        }, {
          start: {
            line: 18,
            column: 60
          },
          end: {
            line: 18,
            column: 78
          }
        }],
        line: 18
      },
      "12": {
        loc: {
          start: {
            line: 19,
            column: 34
          },
          end: {
            line: 19,
            column: 221
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 19,
            column: 140
          },
          end: {
            line: 19,
            column: 142
          }
        }, {
          start: {
            line: 19,
            column: 145
          },
          end: {
            line: 19,
            column: 221
          }
        }],
        line: 19
      },
      "13": {
        loc: {
          start: {
            line: 19,
            column: 34
          },
          end: {
            line: 19,
            column: 137
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 19,
            column: 34
          },
          end: {
            line: 19,
            column: 120
          }
        }, {
          start: {
            line: 19,
            column: 124
          },
          end: {
            line: 19,
            column: 137
          }
        }],
        line: 19
      },
      "14": {
        loc: {
          start: {
            line: 19,
            column: 40
          },
          end: {
            line: 19,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 19,
            column: 81
          },
          end: {
            line: 19,
            column: 87
          }
        }, {
          start: {
            line: 19,
            column: 90
          },
          end: {
            line: 19,
            column: 110
          }
        }],
        line: 19
      },
      "15": {
        loc: {
          start: {
            line: 19,
            column: 40
          },
          end: {
            line: 19,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 19,
            column: 40
          },
          end: {
            line: 19,
            column: 56
          }
        }, {
          start: {
            line: 19,
            column: 60
          },
          end: {
            line: 19,
            column: 78
          }
        }],
        line: 19
      },
      "16": {
        loc: {
          start: {
            line: 20,
            column: 36
          },
          end: {
            line: 20,
            column: 227
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 20,
            column: 144
          },
          end: {
            line: 20,
            column: 146
          }
        }, {
          start: {
            line: 20,
            column: 149
          },
          end: {
            line: 20,
            column: 227
          }
        }],
        line: 20
      },
      "17": {
        loc: {
          start: {
            line: 20,
            column: 36
          },
          end: {
            line: 20,
            column: 141
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 36
          },
          end: {
            line: 20,
            column: 124
          }
        }, {
          start: {
            line: 20,
            column: 128
          },
          end: {
            line: 20,
            column: 141
          }
        }],
        line: 20
      },
      "18": {
        loc: {
          start: {
            line: 20,
            column: 42
          },
          end: {
            line: 20,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 20,
            column: 83
          },
          end: {
            line: 20,
            column: 89
          }
        }, {
          start: {
            line: 20,
            column: 92
          },
          end: {
            line: 20,
            column: 114
          }
        }],
        line: 20
      },
      "19": {
        loc: {
          start: {
            line: 20,
            column: 42
          },
          end: {
            line: 20,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 42
          },
          end: {
            line: 20,
            column: 58
          }
        }, {
          start: {
            line: 20,
            column: 62
          },
          end: {
            line: 20,
            column: 80
          }
        }],
        line: 20
      },
      "20": {
        loc: {
          start: {
            line: 21,
            column: 31
          },
          end: {
            line: 21,
            column: 197
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 21,
            column: 134
          },
          end: {
            line: 21,
            column: 136
          }
        }, {
          start: {
            line: 21,
            column: 139
          },
          end: {
            line: 21,
            column: 197
          }
        }],
        line: 21
      },
      "21": {
        loc: {
          start: {
            line: 21,
            column: 31
          },
          end: {
            line: 21,
            column: 131
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 31
          },
          end: {
            line: 21,
            column: 114
          }
        }, {
          start: {
            line: 21,
            column: 118
          },
          end: {
            line: 21,
            column: 131
          }
        }],
        line: 21
      },
      "22": {
        loc: {
          start: {
            line: 21,
            column: 37
          },
          end: {
            line: 21,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 21,
            column: 78
          },
          end: {
            line: 21,
            column: 84
          }
        }, {
          start: {
            line: 21,
            column: 87
          },
          end: {
            line: 21,
            column: 104
          }
        }],
        line: 21
      },
      "23": {
        loc: {
          start: {
            line: 21,
            column: 37
          },
          end: {
            line: 21,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 37
          },
          end: {
            line: 21,
            column: 53
          }
        }, {
          start: {
            line: 21,
            column: 57
          },
          end: {
            line: 21,
            column: 75
          }
        }],
        line: 21
      },
      "24": {
        loc: {
          start: {
            line: 22,
            column: 33
          },
          end: {
            line: 22,
            column: 203
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 22,
            column: 138
          },
          end: {
            line: 22,
            column: 140
          }
        }, {
          start: {
            line: 22,
            column: 143
          },
          end: {
            line: 22,
            column: 203
          }
        }],
        line: 22
      },
      "25": {
        loc: {
          start: {
            line: 22,
            column: 33
          },
          end: {
            line: 22,
            column: 135
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 33
          },
          end: {
            line: 22,
            column: 118
          }
        }, {
          start: {
            line: 22,
            column: 122
          },
          end: {
            line: 22,
            column: 135
          }
        }],
        line: 22
      },
      "26": {
        loc: {
          start: {
            line: 22,
            column: 39
          },
          end: {
            line: 22,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 22,
            column: 80
          },
          end: {
            line: 22,
            column: 86
          }
        }, {
          start: {
            line: 22,
            column: 89
          },
          end: {
            line: 22,
            column: 108
          }
        }],
        line: 22
      },
      "27": {
        loc: {
          start: {
            line: 22,
            column: 39
          },
          end: {
            line: 22,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 39
          },
          end: {
            line: 22,
            column: 55
          }
        }, {
          start: {
            line: 22,
            column: 59
          },
          end: {
            line: 22,
            column: 77
          }
        }],
        line: 22
      },
      "28": {
        loc: {
          start: {
            line: 23,
            column: 36
          },
          end: {
            line: 23,
            column: 232
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 23,
            column: 144
          },
          end: {
            line: 23,
            column: 146
          }
        }, {
          start: {
            line: 23,
            column: 149
          },
          end: {
            line: 23,
            column: 232
          }
        }],
        line: 23
      },
      "29": {
        loc: {
          start: {
            line: 23,
            column: 36
          },
          end: {
            line: 23,
            column: 141
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 36
          },
          end: {
            line: 23,
            column: 124
          }
        }, {
          start: {
            line: 23,
            column: 128
          },
          end: {
            line: 23,
            column: 141
          }
        }],
        line: 23
      },
      "30": {
        loc: {
          start: {
            line: 23,
            column: 42
          },
          end: {
            line: 23,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 23,
            column: 83
          },
          end: {
            line: 23,
            column: 89
          }
        }, {
          start: {
            line: 23,
            column: 92
          },
          end: {
            line: 23,
            column: 114
          }
        }],
        line: 23
      },
      "31": {
        loc: {
          start: {
            line: 23,
            column: 42
          },
          end: {
            line: 23,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 42
          },
          end: {
            line: 23,
            column: 58
          }
        }, {
          start: {
            line: 23,
            column: 62
          },
          end: {
            line: 23,
            column: 80
          }
        }],
        line: 23
      },
      "32": {
        loc: {
          start: {
            line: 24,
            column: 38
          },
          end: {
            line: 24,
            column: 238
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 24,
            column: 148
          },
          end: {
            line: 24,
            column: 150
          }
        }, {
          start: {
            line: 24,
            column: 153
          },
          end: {
            line: 24,
            column: 238
          }
        }],
        line: 24
      },
      "33": {
        loc: {
          start: {
            line: 24,
            column: 38
          },
          end: {
            line: 24,
            column: 145
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 38
          },
          end: {
            line: 24,
            column: 128
          }
        }, {
          start: {
            line: 24,
            column: 132
          },
          end: {
            line: 24,
            column: 145
          }
        }],
        line: 24
      },
      "34": {
        loc: {
          start: {
            line: 24,
            column: 44
          },
          end: {
            line: 24,
            column: 118
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 24,
            column: 85
          },
          end: {
            line: 24,
            column: 91
          }
        }, {
          start: {
            line: 24,
            column: 94
          },
          end: {
            line: 24,
            column: 118
          }
        }],
        line: 24
      },
      "35": {
        loc: {
          start: {
            line: 24,
            column: 44
          },
          end: {
            line: 24,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 44
          },
          end: {
            line: 24,
            column: 60
          }
        }, {
          start: {
            line: 24,
            column: 64
          },
          end: {
            line: 24,
            column: 82
          }
        }],
        line: 24
      },
      "36": {
        loc: {
          start: {
            line: 25,
            column: 32
          },
          end: {
            line: 25,
            column: 215
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 25,
            column: 136
          },
          end: {
            line: 25,
            column: 138
          }
        }, {
          start: {
            line: 25,
            column: 141
          },
          end: {
            line: 25,
            column: 215
          }
        }],
        line: 25
      },
      "37": {
        loc: {
          start: {
            line: 25,
            column: 32
          },
          end: {
            line: 25,
            column: 133
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 32
          },
          end: {
            line: 25,
            column: 116
          }
        }, {
          start: {
            line: 25,
            column: 120
          },
          end: {
            line: 25,
            column: 133
          }
        }],
        line: 25
      },
      "38": {
        loc: {
          start: {
            line: 25,
            column: 38
          },
          end: {
            line: 25,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 25,
            column: 79
          },
          end: {
            line: 25,
            column: 85
          }
        }, {
          start: {
            line: 25,
            column: 88
          },
          end: {
            line: 25,
            column: 106
          }
        }],
        line: 25
      },
      "39": {
        loc: {
          start: {
            line: 25,
            column: 38
          },
          end: {
            line: 25,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 38
          },
          end: {
            line: 25,
            column: 54
          }
        }, {
          start: {
            line: 25,
            column: 58
          },
          end: {
            line: 25,
            column: 76
          }
        }],
        line: 25
      },
      "40": {
        loc: {
          start: {
            line: 73,
            column: 31
          },
          end: {
            line: 73,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 73,
            column: 54
          },
          end: {
            line: 73,
            column: 79
          }
        }, {
          start: {
            line: 73,
            column: 82
          },
          end: {
            line: 73,
            column: 109
          }
        }],
        line: 73
      },
      "41": {
        loc: {
          start: {
            line: 103,
            column: 34
          },
          end: {
            line: 105,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 104,
            column: 18
          },
          end: {
            line: 104,
            column: 50
          }
        }, {
          start: {
            line: 105,
            column: 18
          },
          end: {
            line: 105,
            column: 52
          }
        }],
        line: 103
      },
      "42": {
        loc: {
          start: {
            line: 118,
            column: 37
          },
          end: {
            line: 118,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 118,
            column: 98
          },
          end: {
            line: 118,
            column: 104
          }
        }, {
          start: {
            line: 118,
            column: 107
          },
          end: {
            line: 118,
            column: 112
          }
        }],
        line: 118
      },
      "43": {
        loc: {
          start: {
            line: 118,
            column: 37
          },
          end: {
            line: 118,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 118,
            column: 37
          },
          end: {
            line: 118,
            column: 78
          }
        }, {
          start: {
            line: 118,
            column: 82
          },
          end: {
            line: 118,
            column: 95
          }
        }],
        line: 118
      },
      "44": {
        loc: {
          start: {
            line: 119,
            column: 35
          },
          end: {
            line: 119,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 119,
            column: 86
          },
          end: {
            line: 119,
            column: 92
          }
        }, {
          start: {
            line: 119,
            column: 95
          },
          end: {
            line: 119,
            column: 114
          }
        }],
        line: 119
      },
      "45": {
        loc: {
          start: {
            line: 119,
            column: 35
          },
          end: {
            line: 119,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 119,
            column: 35
          },
          end: {
            line: 119,
            column: 56
          }
        }, {
          start: {
            line: 119,
            column: 60
          },
          end: {
            line: 119,
            column: 83
          }
        }],
        line: 119
      },
      "46": {
        loc: {
          start: {
            line: 122,
            column: 28
          },
          end: {
            line: 122,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 122,
            column: 51
          },
          end: {
            line: 122,
            column: 76
          }
        }, {
          start: {
            line: 122,
            column: 79
          },
          end: {
            line: 122,
            column: 106
          }
        }],
        line: 122
      },
      "47": {
        loc: {
          start: {
            line: 123,
            column: 28
          },
          end: {
            line: 123,
            column: 63
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 123,
            column: 40
          },
          end: {
            line: 123,
            column: 49
          }
        }, {
          start: {
            line: 123,
            column: 52
          },
          end: {
            line: 123,
            column: 63
          }
        }],
        line: 123
      },
      "48": {
        loc: {
          start: {
            line: 128,
            column: 32
          },
          end: {
            line: 128,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 128,
            column: 83
          },
          end: {
            line: 128,
            column: 89
          }
        }, {
          start: {
            line: 128,
            column: 92
          },
          end: {
            line: 128,
            column: 111
          }
        }],
        line: 128
      },
      "49": {
        loc: {
          start: {
            line: 128,
            column: 32
          },
          end: {
            line: 128,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 128,
            column: 32
          },
          end: {
            line: 128,
            column: 53
          }
        }, {
          start: {
            line: 128,
            column: 57
          },
          end: {
            line: 128,
            column: 80
          }
        }],
        line: 128
      },
      "50": {
        loc: {
          start: {
            line: 129,
            column: 37
          },
          end: {
            line: 129,
            column: 121
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 129,
            column: 88
          },
          end: {
            line: 129,
            column: 94
          }
        }, {
          start: {
            line: 129,
            column: 97
          },
          end: {
            line: 129,
            column: 121
          }
        }],
        line: 129
      },
      "51": {
        loc: {
          start: {
            line: 129,
            column: 37
          },
          end: {
            line: 129,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 129,
            column: 37
          },
          end: {
            line: 129,
            column: 58
          }
        }, {
          start: {
            line: 129,
            column: 62
          },
          end: {
            line: 129,
            column: 85
          }
        }],
        line: 129
      },
      "52": {
        loc: {
          start: {
            line: 130,
            column: 33
          },
          end: {
            line: 130,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 130,
            column: 84
          },
          end: {
            line: 130,
            column: 90
          }
        }, {
          start: {
            line: 130,
            column: 93
          },
          end: {
            line: 130,
            column: 113
          }
        }],
        line: 130
      },
      "53": {
        loc: {
          start: {
            line: 130,
            column: 33
          },
          end: {
            line: 130,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 33
          },
          end: {
            line: 130,
            column: 54
          }
        }, {
          start: {
            line: 130,
            column: 58
          },
          end: {
            line: 130,
            column: 81
          }
        }],
        line: 130
      },
      "54": {
        loc: {
          start: {
            line: 131,
            column: 30
          },
          end: {
            line: 131,
            column: 193
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 131,
            column: 157
          },
          end: {
            line: 131,
            column: 163
          }
        }, {
          start: {
            line: 131,
            column: 166
          },
          end: {
            line: 131,
            column: 193
          }
        }],
        line: 131
      },
      "55": {
        loc: {
          start: {
            line: 131,
            column: 30
          },
          end: {
            line: 131,
            column: 154
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 30
          },
          end: {
            line: 131,
            column: 137
          }
        }, {
          start: {
            line: 131,
            column: 141
          },
          end: {
            line: 131,
            column: 154
          }
        }],
        line: 131
      },
      "56": {
        loc: {
          start: {
            line: 131,
            column: 36
          },
          end: {
            line: 131,
            column: 127
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 131,
            column: 98
          },
          end: {
            line: 131,
            column: 104
          }
        }, {
          start: {
            line: 131,
            column: 107
          },
          end: {
            line: 131,
            column: 127
          }
        }],
        line: 131
      },
      "57": {
        loc: {
          start: {
            line: 131,
            column: 36
          },
          end: {
            line: 131,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 36
          },
          end: {
            line: 131,
            column: 78
          }
        }, {
          start: {
            line: 131,
            column: 82
          },
          end: {
            line: 131,
            column: 95
          }
        }],
        line: 131
      },
      "58": {
        loc: {
          start: {
            line: 138,
            column: 28
          },
          end: {
            line: 138,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 138,
            column: 51
          },
          end: {
            line: 138,
            column: 76
          }
        }, {
          start: {
            line: 138,
            column: 79
          },
          end: {
            line: 138,
            column: 106
          }
        }],
        line: 138
      },
      "59": {
        loc: {
          start: {
            line: 143,
            column: 27
          },
          end: {
            line: 143,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 143,
            column: 52
          },
          end: {
            line: 143,
            column: 65
          }
        }, {
          start: {
            line: 143,
            column: 68
          },
          end: {
            line: 143,
            column: 83
          }
        }],
        line: 143
      },
      "60": {
        loc: {
          start: {
            line: 155,
            column: 27
          },
          end: {
            line: 155,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 155,
            column: 50
          },
          end: {
            line: 155,
            column: 71
          }
        }, {
          start: {
            line: 155,
            column: 74
          },
          end: {
            line: 155,
            column: 97
          }
        }],
        line: 155
      },
      "61": {
        loc: {
          start: {
            line: 156,
            column: 30
          },
          end: {
            line: 158,
            column: 56
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 157,
            column: 18
          },
          end: {
            line: 157,
            column: 54
          }
        }, {
          start: {
            line: 158,
            column: 18
          },
          end: {
            line: 158,
            column: 56
          }
        }],
        line: 156
      },
      "62": {
        loc: {
          start: {
            line: 164,
            column: 32
          },
          end: {
            line: 164,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 164,
            column: 87
          },
          end: {
            line: 164,
            column: 93
          }
        }, {
          start: {
            line: 164,
            column: 96
          },
          end: {
            line: 164,
            column: 101
          }
        }],
        line: 164
      },
      "63": {
        loc: {
          start: {
            line: 164,
            column: 32
          },
          end: {
            line: 164,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 164,
            column: 32
          },
          end: {
            line: 164,
            column: 67
          }
        }, {
          start: {
            line: 164,
            column: 71
          },
          end: {
            line: 164,
            column: 84
          }
        }],
        line: 164
      },
      "64": {
        loc: {
          start: {
            line: 166,
            column: 16
          },
          end: {
            line: 168,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 16
          },
          end: {
            line: 168,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "65": {
        loc: {
          start: {
            line: 170,
            column: 31
          },
          end: {
            line: 171,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 170,
            column: 43
          },
          end: {
            line: 170,
            column: 52
          }
        }, {
          start: {
            line: 171,
            column: 20
          },
          end: {
            line: 171,
            column: 112
          }
        }],
        line: 170
      },
      "66": {
        loc: {
          start: {
            line: 171,
            column: 20
          },
          end: {
            line: 171,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 171,
            column: 88
          },
          end: {
            line: 171,
            column: 98
          }
        }, {
          start: {
            line: 171,
            column: 101
          },
          end: {
            line: 171,
            column: 112
          }
        }],
        line: 171
      },
      "67": {
        loc: {
          start: {
            line: 171,
            column: 20
          },
          end: {
            line: 171,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 171,
            column: 20
          },
          end: {
            line: 171,
            column: 51
          }
        }, {
          start: {
            line: 171,
            column: 55
          },
          end: {
            line: 171,
            column: 85
          }
        }],
        line: 171
      },
      "68": {
        loc: {
          start: {
            line: 174,
            column: 28
          },
          end: {
            line: 174,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 174,
            column: 51
          },
          end: {
            line: 174,
            column: 76
          }
        }, {
          start: {
            line: 174,
            column: 79
          },
          end: {
            line: 174,
            column: 106
          }
        }],
        line: 174
      },
      "69": {
        loc: {
          start: {
            line: 181,
            column: 28
          },
          end: {
            line: 181,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 181,
            column: 51
          },
          end: {
            line: 181,
            column: 76
          }
        }, {
          start: {
            line: 181,
            column: 79
          },
          end: {
            line: 181,
            column: 106
          }
        }],
        line: 181
      },
      "70": {
        loc: {
          start: {
            line: 188,
            column: 32
          },
          end: {
            line: 188,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 188,
            column: 32
          },
          end: {
            line: 188,
            column: 46
          }
        }, {
          start: {
            line: 188,
            column: 50
          },
          end: {
            line: 188,
            column: 69
          }
        }],
        line: 188
      },
      "71": {
        loc: {
          start: {
            line: 189,
            column: 39
          },
          end: {
            line: 189,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 189,
            column: 39
          },
          end: {
            line: 189,
            column: 60
          }
        }, {
          start: {
            line: 189,
            column: 64
          },
          end: {
            line: 189,
            column: 73
          }
        }],
        line: 189
      },
      "72": {
        loc: {
          start: {
            line: 192,
            column: 47
          },
          end: {
            line: 192,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 47
          },
          end: {
            line: 192,
            column: 76
          }
        }, {
          start: {
            line: 192,
            column: 80
          },
          end: {
            line: 192,
            column: 81
          }
        }],
        line: 192
      },
      "73": {
        loc: {
          start: {
            line: 193,
            column: 33
          },
          end: {
            line: 193,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 193,
            column: 33
          },
          end: {
            line: 193,
            column: 48
          }
        }, {
          start: {
            line: 193,
            column: 52
          },
          end: {
            line: 193,
            column: 56
          }
        }],
        line: 193
      },
      "74": {
        loc: {
          start: {
            line: 200,
            column: 28
          },
          end: {
            line: 200,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 200,
            column: 51
          },
          end: {
            line: 200,
            column: 76
          }
        }, {
          start: {
            line: 200,
            column: 79
          },
          end: {
            line: 200,
            column: 106
          }
        }],
        line: 200
      },
      "75": {
        loc: {
          start: {
            line: 205,
            column: 27
          },
          end: {
            line: 205,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 205,
            column: 52
          },
          end: {
            line: 205,
            column: 65
          }
        }, {
          start: {
            line: 205,
            column: 68
          },
          end: {
            line: 205,
            column: 83
          }
        }],
        line: 205
      },
      "76": {
        loc: {
          start: {
            line: 216,
            column: 27
          },
          end: {
            line: 216,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 216,
            column: 50
          },
          end: {
            line: 216,
            column: 73
          }
        }, {
          start: {
            line: 216,
            column: 76
          },
          end: {
            line: 216,
            column: 101
          }
        }],
        line: 216
      },
      "77": {
        loc: {
          start: {
            line: 221,
            column: 42
          },
          end: {
            line: 221,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 221,
            column: 42
          },
          end: {
            line: 221,
            column: 68
          }
        }, {
          start: {
            line: 221,
            column: 72
          },
          end: {
            line: 221,
            column: 74
          }
        }],
        line: 221
      },
      "78": {
        loc: {
          start: {
            line: 222,
            column: 16
          },
          end: {
            line: 231,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 16
          },
          end: {
            line: 231,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "79": {
        loc: {
          start: {
            line: 225,
            column: 32
          },
          end: {
            line: 225,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 225,
            column: 55
          },
          end: {
            line: 225,
            column: 80
          }
        }, {
          start: {
            line: 225,
            column: 83
          },
          end: {
            line: 225,
            column: 110
          }
        }],
        line: 225
      },
      "80": {
        loc: {
          start: {
            line: 234,
            column: 31
          },
          end: {
            line: 235,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 234,
            column: 43
          },
          end: {
            line: 234,
            column: 52
          }
        }, {
          start: {
            line: 235,
            column: 20
          },
          end: {
            line: 235,
            column: 120
          }
        }],
        line: 234
      },
      "81": {
        loc: {
          start: {
            line: 235,
            column: 20
          },
          end: {
            line: 235,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 235,
            column: 96
          },
          end: {
            line: 235,
            column: 106
          }
        }, {
          start: {
            line: 235,
            column: 109
          },
          end: {
            line: 235,
            column: 120
          }
        }],
        line: 235
      },
      "82": {
        loc: {
          start: {
            line: 235,
            column: 20
          },
          end: {
            line: 235,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 235,
            column: 20
          },
          end: {
            line: 235,
            column: 54
          }
        }, {
          start: {
            line: 235,
            column: 58
          },
          end: {
            line: 235,
            column: 93
          }
        }],
        line: 235
      },
      "83": {
        loc: {
          start: {
            line: 238,
            column: 28
          },
          end: {
            line: 238,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 238,
            column: 51
          },
          end: {
            line: 238,
            column: 76
          }
        }, {
          start: {
            line: 238,
            column: 79
          },
          end: {
            line: 238,
            column: 106
          }
        }],
        line: 238
      },
      "84": {
        loc: {
          start: {
            line: 254,
            column: 28
          },
          end: {
            line: 254,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 254,
            column: 51
          },
          end: {
            line: 254,
            column: 76
          }
        }, {
          start: {
            line: 254,
            column: 79
          },
          end: {
            line: 254,
            column: 106
          }
        }],
        line: 254
      },
      "85": {
        loc: {
          start: {
            line: 259,
            column: 27
          },
          end: {
            line: 259,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 259,
            column: 52
          },
          end: {
            line: 259,
            column: 65
          }
        }, {
          start: {
            line: 259,
            column: 68
          },
          end: {
            line: 259,
            column: 83
          }
        }],
        line: 259
      },
      "86": {
        loc: {
          start: {
            line: 271,
            column: 27
          },
          end: {
            line: 271,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 271,
            column: 50
          },
          end: {
            line: 271,
            column: 70
          }
        }, {
          start: {
            line: 271,
            column: 73
          },
          end: {
            line: 271,
            column: 95
          }
        }],
        line: 271
      },
      "87": {
        loc: {
          start: {
            line: 272,
            column: 46
          },
          end: {
            line: 272,
            column: 124
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 272,
            column: 69
          },
          end: {
            line: 272,
            column: 94
          }
        }, {
          start: {
            line: 272,
            column: 97
          },
          end: {
            line: 272,
            column: 124
          }
        }],
        line: 272
      },
      "88": {
        loc: {
          start: {
            line: 284,
            column: 20
          },
          end: {
            line: 286,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 20
          },
          end: {
            line: 286,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      },
      "89": {
        loc: {
          start: {
            line: 291,
            column: 16
          },
          end: {
            line: 306,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 291,
            column: 16
          },
          end: {
            line: 306,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 291
      },
      "90": {
        loc: {
          start: {
            line: 298,
            column: 46
          },
          end: {
            line: 298,
            column: 204
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 298,
            column: 47
          },
          end: {
            line: 298,
            column: 198
          }
        }, {
          start: {
            line: 298,
            column: 203
          },
          end: {
            line: 298,
            column: 204
          }
        }],
        line: 298
      },
      "91": {
        loc: {
          start: {
            line: 298,
            column: 47
          },
          end: {
            line: 298,
            column: 198
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 298,
            column: 180
          },
          end: {
            line: 298,
            column: 186
          }
        }, {
          start: {
            line: 298,
            column: 189
          },
          end: {
            line: 298,
            column: 198
          }
        }],
        line: 298
      },
      "92": {
        loc: {
          start: {
            line: 298,
            column: 47
          },
          end: {
            line: 298,
            column: 177
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 298,
            column: 47
          },
          end: {
            line: 298,
            column: 160
          }
        }, {
          start: {
            line: 298,
            column: 164
          },
          end: {
            line: 298,
            column: 177
          }
        }],
        line: 298
      },
      "93": {
        loc: {
          start: {
            line: 298,
            column: 53
          },
          end: {
            line: 298,
            column: 150
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 298,
            column: 133
          },
          end: {
            line: 298,
            column: 139
          }
        }, {
          start: {
            line: 298,
            column: 142
          },
          end: {
            line: 298,
            column: 150
          }
        }],
        line: 298
      },
      "94": {
        loc: {
          start: {
            line: 298,
            column: 53
          },
          end: {
            line: 298,
            column: 130
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 298,
            column: 53
          },
          end: {
            line: 298,
            column: 113
          }
        }, {
          start: {
            line: 298,
            column: 117
          },
          end: {
            line: 298,
            column: 130
          }
        }],
        line: 298
      },
      "95": {
        loc: {
          start: {
            line: 299,
            column: 45
          },
          end: {
            line: 299,
            column: 141
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 299,
            column: 125
          },
          end: {
            line: 299,
            column: 131
          }
        }, {
          start: {
            line: 299,
            column: 134
          },
          end: {
            line: 299,
            column: 141
          }
        }],
        line: 299
      },
      "96": {
        loc: {
          start: {
            line: 299,
            column: 45
          },
          end: {
            line: 299,
            column: 122
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 299,
            column: 45
          },
          end: {
            line: 299,
            column: 105
          }
        }, {
          start: {
            line: 299,
            column: 109
          },
          end: {
            line: 299,
            column: 122
          }
        }],
        line: 299
      },
      "97": {
        loc: {
          start: {
            line: 309,
            column: 28
          },
          end: {
            line: 309,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 309,
            column: 51
          },
          end: {
            line: 309,
            column: 76
          }
        }, {
          start: {
            line: 309,
            column: 79
          },
          end: {
            line: 309,
            column: 106
          }
        }],
        line: 309
      },
      "98": {
        loc: {
          start: {
            line: 319,
            column: 28
          },
          end: {
            line: 319,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 319,
            column: 51
          },
          end: {
            line: 319,
            column: 76
          }
        }, {
          start: {
            line: 319,
            column: 79
          },
          end: {
            line: 319,
            column: 106
          }
        }],
        line: 319
      },
      "99": {
        loc: {
          start: {
            line: 324,
            column: 27
          },
          end: {
            line: 324,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 324,
            column: 52
          },
          end: {
            line: 324,
            column: 65
          }
        }, {
          start: {
            line: 324,
            column: 68
          },
          end: {
            line: 324,
            column: 83
          }
        }],
        line: 324
      },
      "100": {
        loc: {
          start: {
            line: 335,
            column: 27
          },
          end: {
            line: 335,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 335,
            column: 50
          },
          end: {
            line: 335,
            column: 75
          }
        }, {
          start: {
            line: 335,
            column: 78
          },
          end: {
            line: 335,
            column: 105
          }
        }],
        line: 335
      },
      "101": {
        loc: {
          start: {
            line: 345,
            column: 28
          },
          end: {
            line: 345,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 345,
            column: 51
          },
          end: {
            line: 345,
            column: 76
          }
        }, {
          start: {
            line: 345,
            column: 79
          },
          end: {
            line: 345,
            column: 106
          }
        }],
        line: 345
      },
      "102": {
        loc: {
          start: {
            line: 357,
            column: 28
          },
          end: {
            line: 357,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 357,
            column: 51
          },
          end: {
            line: 357,
            column: 76
          }
        }, {
          start: {
            line: 357,
            column: 79
          },
          end: {
            line: 357,
            column: 106
          }
        }],
        line: 357
      },
      "103": {
        loc: {
          start: {
            line: 362,
            column: 27
          },
          end: {
            line: 362,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 362,
            column: 52
          },
          end: {
            line: 362,
            column: 65
          }
        }, {
          start: {
            line: 362,
            column: 68
          },
          end: {
            line: 362,
            column: 83
          }
        }],
        line: 362
      },
      "104": {
        loc: {
          start: {
            line: 379,
            column: 12
          },
          end: {
            line: 393,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 379,
            column: 12
          },
          end: {
            line: 393,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 379
      },
      "105": {
        loc: {
          start: {
            line: 395,
            column: 12
          },
          end: {
            line: 409,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 395,
            column: 12
          },
          end: {
            line: 409,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 395
      },
      "106": {
        loc: {
          start: {
            line: 411,
            column: 12
          },
          end: {
            line: 425,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 411,
            column: 12
          },
          end: {
            line: 425,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 411
      },
      "107": {
        loc: {
          start: {
            line: 426,
            column: 12
          },
          end: {
            line: 427,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 426,
            column: 12
          },
          end: {
            line: 427,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 426
      },
      "108": {
        loc: {
          start: {
            line: 435,
            column: 32
          },
          end: {
            line: 435,
            column: 287
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 435,
            column: 281
          },
          end: {
            line: 435,
            column: 283
          }
        }, {
          start: {
            line: 435,
            column: 286
          },
          end: {
            line: 435,
            column: 287
          }
        }],
        line: 435
      },
      "109": {
        loc: {
          start: {
            line: 435,
            column: 32
          },
          end: {
            line: 435,
            column: 278
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 435,
            column: 32
          },
          end: {
            line: 435,
            column: 261
          }
        }, {
          start: {
            line: 435,
            column: 265
          },
          end: {
            line: 435,
            column: 278
          }
        }],
        line: 435
      },
      "110": {
        loc: {
          start: {
            line: 435,
            column: 38
          },
          end: {
            line: 435,
            column: 251
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 435,
            column: 96
          },
          end: {
            line: 435,
            column: 102
          }
        }, {
          start: {
            line: 435,
            column: 105
          },
          end: {
            line: 435,
            column: 251
          }
        }],
        line: 435
      },
      "111": {
        loc: {
          start: {
            line: 435,
            column: 38
          },
          end: {
            line: 435,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 435,
            column: 38
          },
          end: {
            line: 435,
            column: 76
          }
        }, {
          start: {
            line: 435,
            column: 80
          },
          end: {
            line: 435,
            column: 93
          }
        }],
        line: 435
      },
      "112": {
        loc: {
          start: {
            line: 435,
            column: 134
          },
          end: {
            line: 435,
            column: 192
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 435,
            column: 178
          },
          end: {
            line: 435,
            column: 184
          }
        }, {
          start: {
            line: 435,
            column: 187
          },
          end: {
            line: 435,
            column: 192
          }
        }],
        line: 435
      },
      "113": {
        loc: {
          start: {
            line: 435,
            column: 134
          },
          end: {
            line: 435,
            column: 175
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 435,
            column: 134
          },
          end: {
            line: 435,
            column: 158
          }
        }, {
          start: {
            line: 435,
            column: 162
          },
          end: {
            line: 435,
            column: 175
          }
        }],
        line: 435
      },
      "114": {
        loc: {
          start: {
            line: 435,
            column: 209
          },
          end: {
            line: 435,
            column: 250
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 435,
            column: 209
          },
          end: {
            line: 435,
            column: 230
          }
        }, {
          start: {
            line: 435,
            column: 234
          },
          end: {
            line: 435,
            column: 250
          }
        }],
        line: 435
      },
      "115": {
        loc: {
          start: {
            line: 449,
            column: 12
          },
          end: {
            line: 451,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 449,
            column: 12
          },
          end: {
            line: 451,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 449
      },
      "116": {
        loc: {
          start: {
            line: 464,
            column: 8
          },
          end: {
            line: 476,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 464,
            column: 8
          },
          end: {
            line: 476,
            column: 9
          }
        }, {
          start: {
            line: 467,
            column: 13
          },
          end: {
            line: 476,
            column: 9
          }
        }],
        line: 464
      },
      "117": {
        loc: {
          start: {
            line: 474,
            column: 23
          },
          end: {
            line: 474,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 474,
            column: 56
          },
          end: {
            line: 474,
            column: 77
          }
        }, {
          start: {
            line: 474,
            column: 80
          },
          end: {
            line: 474,
            column: 95
          }
        }],
        line: 474
      },
      "118": {
        loc: {
          start: {
            line: 484,
            column: 8
          },
          end: {
            line: 486,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 484,
            column: 8
          },
          end: {
            line: 486,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 484
      },
      "119": {
        loc: {
          start: {
            line: 485,
            column: 19
          },
          end: {
            line: 485,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 485,
            column: 58
          },
          end: {
            line: 485,
            column: 69
          }
        }, {
          start: {
            line: 485,
            column: 72
          },
          end: {
            line: 485,
            column: 82
          }
        }],
        line: 485
      },
      "120": {
        loc: {
          start: {
            line: 487,
            column: 8
          },
          end: {
            line: 489,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 487,
            column: 8
          },
          end: {
            line: 489,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 487
      },
      "121": {
        loc: {
          start: {
            line: 496,
            column: 27
          },
          end: {
            line: 496,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 496,
            column: 50
          },
          end: {
            line: 496,
            column: 75
          }
        }, {
          start: {
            line: 496,
            column: 78
          },
          end: {
            line: 496,
            column: 105
          }
        }],
        line: 496
      },
      "122": {
        loc: {
          start: {
            line: 497,
            column: 29
          },
          end: {
            line: 497,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 497,
            column: 54
          },
          end: {
            line: 497,
            column: 67
          }
        }, {
          start: {
            line: 497,
            column: 70
          },
          end: {
            line: 497,
            column: 85
          }
        }],
        line: 497
      },
      "123": {
        loc: {
          start: {
            line: 534,
            column: 43
          },
          end: {
            line: 534,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 534,
            column: 93
          },
          end: {
            line: 534,
            column: 95
          }
        }, {
          start: {
            line: 534,
            column: 98
          },
          end: {
            line: 534,
            column: 99
          }
        }],
        line: 534
      },
      "124": {
        loc: {
          start: {
            line: 534,
            column: 43
          },
          end: {
            line: 534,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 534,
            column: 43
          },
          end: {
            line: 534,
            column: 73
          }
        }, {
          start: {
            line: 534,
            column: 77
          },
          end: {
            line: 534,
            column: 90
          }
        }],
        line: 534
      },
      "125": {
        loc: {
          start: {
            line: 535,
            column: 29
          },
          end: {
            line: 535,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 535,
            column: 29
          },
          end: {
            line: 535,
            column: 50
          }
        }, {
          start: {
            line: 535,
            column: 54
          },
          end: {
            line: 535,
            column: 59
          }
        }],
        line: 535
      },
      "126": {
        loc: {
          start: {
            line: 536,
            column: 40
          },
          end: {
            line: 538,
            column: 19
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 537,
            column: 18
          },
          end: {
            line: 537,
            column: 77
          }
        }, {
          start: {
            line: 538,
            column: 18
          },
          end: {
            line: 538,
            column: 19
          }
        }],
        line: 536
      },
      "127": {
        loc: {
          start: {
            line: 539,
            column: 32
          },
          end: {
            line: 541,
            column: 19
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 540,
            column: 18
          },
          end: {
            line: 540,
            column: 121
          }
        }, {
          start: {
            line: 541,
            column: 18
          },
          end: {
            line: 541,
            column: 19
          }
        }],
        line: 539
      },
      "128": {
        loc: {
          start: {
            line: 545,
            column: 47
          },
          end: {
            line: 545,
            column: 160
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 545,
            column: 154
          },
          end: {
            line: 545,
            column: 156
          }
        }, {
          start: {
            line: 545,
            column: 159
          },
          end: {
            line: 545,
            column: 160
          }
        }],
        line: 545
      },
      "129": {
        loc: {
          start: {
            line: 545,
            column: 47
          },
          end: {
            line: 545,
            column: 151
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 545,
            column: 47
          },
          end: {
            line: 545,
            column: 134
          }
        }, {
          start: {
            line: 545,
            column: 138
          },
          end: {
            line: 545,
            column: 151
          }
        }],
        line: 545
      },
      "130": {
        loc: {
          start: {
            line: 545,
            column: 53
          },
          end: {
            line: 545,
            column: 124
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 545,
            column: 98
          },
          end: {
            line: 545,
            column: 104
          }
        }, {
          start: {
            line: 545,
            column: 107
          },
          end: {
            line: 545,
            column: 124
          }
        }],
        line: 545
      },
      "131": {
        loc: {
          start: {
            line: 545,
            column: 53
          },
          end: {
            line: 545,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 545,
            column: 53
          },
          end: {
            line: 545,
            column: 78
          }
        }, {
          start: {
            line: 545,
            column: 82
          },
          end: {
            line: 545,
            column: 95
          }
        }],
        line: 545
      },
      "132": {
        loc: {
          start: {
            line: 546,
            column: 29
          },
          end: {
            line: 546,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 546,
            column: 29
          },
          end: {
            line: 546,
            column: 50
          }
        }, {
          start: {
            line: 546,
            column: 54
          },
          end: {
            line: 546,
            column: 59
          }
        }],
        line: 546
      },
      "133": {
        loc: {
          start: {
            line: 547,
            column: 35
          },
          end: {
            line: 549,
            column: 19
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 548,
            column: 18
          },
          end: {
            line: 548,
            column: 79
          }
        }, {
          start: {
            line: 549,
            column: 18
          },
          end: {
            line: 549,
            column: 19
          }
        }],
        line: 547
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0],
      "90": [0, 0],
      "91": [0, 0],
      "92": [0, 0],
      "93": [0, 0],
      "94": [0, 0],
      "95": [0, 0],
      "96": [0, 0],
      "97": [0, 0],
      "98": [0, 0],
      "99": [0, 0],
      "100": [0, 0],
      "101": [0, 0],
      "102": [0, 0],
      "103": [0, 0],
      "104": [0, 0],
      "105": [0, 0],
      "106": [0, 0],
      "107": [0, 0],
      "108": [0, 0],
      "109": [0, 0],
      "110": [0, 0],
      "111": [0, 0],
      "112": [0, 0],
      "113": [0, 0],
      "114": [0, 0],
      "115": [0, 0],
      "116": [0, 0],
      "117": [0, 0],
      "118": [0, 0],
      "119": [0, 0],
      "120": [0, 0],
      "121": [0, 0],
      "122": [0, 0],
      "123": [0, 0],
      "124": [0, 0],
      "125": [0, 0],
      "126": [0, 0],
      "127": [0, 0],
      "128": [0, 0],
      "129": [0, 0],
      "130": [0, 0],
      "131": [0, 0],
      "132": [0, 0],
      "133": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/matbakh-visibility-boost.20250920/src/lib/multi-region/health-checker.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/matbakh-visibility-boost.20250920/src/lib/multi-region/health-checker.ts"],
      sourcesContent: ["import {\n    CloudWatchClient,\n    GetMetricDataCommand\n} from '@aws-sdk/client-cloudwatch';\nimport {\n    DescribeReplicationGroupsCommand,\n    ElastiCacheClient\n} from '@aws-sdk/client-elasticache';\nimport {\n    DescribeDBClustersCommand,\n    RDSClient\n} from '@aws-sdk/client-rds';\nimport {\n    GetHealthCheckCommand,\n    GetHealthCheckStatusCommand,\n    Route53Client\n} from '@aws-sdk/client-route-53';\nimport {\n    GetBucketReplicationCommand,\n    HeadObjectCommand,\n    S3Client\n} from '@aws-sdk/client-s3';\nimport {\n    GetSecretValueCommand,\n    SecretsManagerClient\n} from '@aws-sdk/client-secrets-manager';\nimport { MultiRegionConfig } from './multi-region-orchestrator';\n\nexport interface HealthCheckResult {\n    service: string;\n    region: string;\n    status: 'healthy' | 'degraded' | 'unhealthy';\n    responseTime?: number;\n    lastChecked: Date;\n    details: Record<string, any>;\n    error?: string;\n}\n\nexport interface SystemHealthStatus {\n    overall: 'healthy' | 'degraded' | 'unhealthy';\n    regions: {\n        primary: RegionHealthStatus;\n        secondary: RegionHealthStatus;\n    };\n    services: HealthCheckResult[];\n    lastUpdated: Date;\n}\n\nexport interface RegionHealthStatus {\n    region: string;\n    status: 'healthy' | 'degraded' | 'unhealthy';\n    services: {\n        api: HealthCheckResult;\n        database: HealthCheckResult;\n        cache: HealthCheckResult;\n        storage: HealthCheckResult;\n        secrets: HealthCheckResult;\n    };\n}\n\nexport interface HealthCheckerClients {\n    route53?: Route53Client;\n    primaryRds?: RDSClient;\n    secondaryRds?: RDSClient;\n    primaryCache?: ElastiCacheClient;\n    secondaryCache?: ElastiCacheClient;\n    primaryS3?: S3Client;\n    secondaryS3?: S3Client;\n    primarySecrets?: SecretsManagerClient;\n    secondarySecrets?: SecretsManagerClient;\n    cloudwatch?: CloudWatchClient;\n}\n\nexport class HealthChecker {\n    private route53Client: Route53Client;\n    private primaryRdsClient: RDSClient;\n    private secondaryRdsClient: RDSClient;\n    private primaryCacheClient: ElastiCacheClient;\n    private secondaryCacheClient: ElastiCacheClient;\n    private primaryS3Client: S3Client;\n    private secondaryS3Client: S3Client;\n    private primarySecretsClient: SecretsManagerClient;\n    private secondarySecretsClient: SecretsManagerClient;\n    private cloudWatchClient: CloudWatchClient;\n\n    constructor(\n        private config: MultiRegionConfig,\n        clients?: HealthCheckerClients\n    ) {\n        // Use injected clients if provided, otherwise create new ones\n        this.route53Client = clients?.route53 ?? new Route53Client({ region: 'us-east-1' });\n        this.primaryRdsClient = clients?.primaryRds ?? new RDSClient({ region: config.primaryRegion });\n        this.secondaryRdsClient = clients?.secondaryRds ?? new RDSClient({ region: config.secondaryRegion });\n        this.primaryCacheClient = clients?.primaryCache ?? new ElastiCacheClient({ region: config.primaryRegion });\n        this.secondaryCacheClient = clients?.secondaryCache ?? new ElastiCacheClient({ region: config.secondaryRegion });\n        this.primaryS3Client = clients?.primaryS3 ?? new S3Client({ region: config.primaryRegion });\n        this.secondaryS3Client = clients?.secondaryS3 ?? new S3Client({ region: config.secondaryRegion });\n        this.primarySecretsClient = clients?.primarySecrets ?? new SecretsManagerClient({ region: config.primaryRegion });\n        this.secondarySecretsClient = clients?.secondarySecrets ?? new SecretsManagerClient({ region: config.secondaryRegion });\n        this.cloudWatchClient = clients?.cloudwatch ?? new CloudWatchClient({ region: config.primaryRegion });\n    }\n\n    /**\n     * Check health of all services across both regions\n     */\n    async checkAllServices(): Promise<SystemHealthStatus> {\n        const startTime = new Date();\n\n        try {\n            // Check primary region services\n            const primaryHealth = await this.checkRegionHealth('primary');\n\n            // Check secondary region services\n            const secondaryHealth = await this.checkRegionHealth('secondary');\n\n            // Determine overall health\n            const allServices = [\n                ...Object.values(primaryHealth.services),\n                ...Object.values(secondaryHealth.services),\n            ];\n\n            const overall = this.determineOverallHealth(allServices);\n\n            return {\n                overall,\n                regions: {\n                    primary: primaryHealth,\n                    secondary: secondaryHealth,\n                },\n                services: allServices,\n                lastUpdated: new Date(),\n            };\n\n        } catch (error) {\n            console.error('Error checking system health:', error);\n\n            return {\n                overall: 'unhealthy',\n                regions: {\n                    primary: this.createErrorRegionStatus('primary', error),\n                    secondary: this.createErrorRegionStatus('secondary', error),\n                },\n                services: [],\n                lastUpdated: new Date(),\n            };\n        }\n    }\n\n    /**\n     * Check health of services in a specific region\n     */\n    private async checkRegionHealth(region: 'primary' | 'secondary'): Promise<RegionHealthStatus> {\n        const regionName = region === 'primary' ? this.config.primaryRegion : this.config.secondaryRegion;\n\n        const [apiHealth, dbHealth, cacheHealth, storageHealth, secretsHealth] = await Promise.allSettled([\n            this.checkApiHealth(region),\n            this.checkDatabaseHealth(region),\n            this.checkCacheHealth(region),\n            this.checkStorageHealth(region),\n            this.checkSecretsHealth(region),\n        ]);\n\n        const services = {\n            api: this.extractResult(apiHealth, 'api', regionName),\n            database: this.extractResult(dbHealth, 'database', regionName),\n            cache: this.extractResult(cacheHealth, 'cache', regionName),\n            storage: this.extractResult(storageHealth, 'storage', regionName),\n            secrets: this.extractResult(secretsHealth, 'secrets', regionName),\n        };\n\n        const regionStatus = this.determineOverallHealth(Object.values(services));\n\n        return {\n            region: regionName,\n            status: regionStatus,\n            services,\n        };\n    }\n\n    /**\n     * Check API health via Route 53 health checks\n     */\n    private async checkApiHealth(region: 'primary' | 'secondary'): Promise<HealthCheckResult> {\n        const startTime = Date.now();\n        const healthCheckId = region === 'primary'\n            ? this.config.primaryHealthCheckId\n            : this.config.secondaryHealthCheckId;\n\n        try {\n            // Get health check configuration\n            const configCommand = new GetHealthCheckCommand({\n                HealthCheckId: healthCheckId,\n            });\n            const configResponse = await this.route53Client.send(configCommand);\n\n            // Get health check status\n            const statusCommand = new GetHealthCheckStatusCommand({\n                HealthCheckId: healthCheckId,\n            });\n            const statusResponse = await this.route53Client.send(statusCommand);\n\n            const responseTime = Date.now() - startTime;\n            const latestStatus = statusResponse.StatusList?.[0];\n            const isHealthy = latestStatus?.Status === 'Success';\n\n            return {\n                service: 'api',\n                region: region === 'primary' ? this.config.primaryRegion : this.config.secondaryRegion,\n                status: isHealthy ? 'healthy' : 'unhealthy',\n                responseTime,\n                lastChecked: new Date(),\n                details: {\n                    healthCheckId,\n                    status: latestStatus?.Status,\n                    checkedTime: latestStatus?.CheckedTime,\n                    latency: latestStatus?.Latency,\n                    fqdn: configResponse.HealthCheck?.HealthCheckConfig?.FullyQualifiedDomainName,\n                },\n            };\n\n        } catch (error) {\n            return {\n                service: 'api',\n                region: region === 'primary' ? this.config.primaryRegion : this.config.secondaryRegion,\n                status: 'unhealthy',\n                responseTime: Date.now() - startTime,\n                lastChecked: new Date(),\n                details: {},\n                error: error instanceof Error ? error.message : 'Unknown error',\n            };\n        }\n    }\n\n    /**\n     * Check database health\n     */\n    private async checkDatabaseHealth(region: 'primary' | 'secondary'): Promise<HealthCheckResult> {\n        const startTime = Date.now();\n        const client = region === 'primary' ? this.primaryRdsClient : this.secondaryRdsClient;\n        const clusterId = region === 'primary'\n            ? this.config.primaryClusterIdentifier\n            : this.config.secondaryClusterIdentifier;\n\n        try {\n            const command = new DescribeDBClustersCommand({\n                DBClusterIdentifier: clusterId,\n            });\n            const response = await client.send(command);\n\n            const cluster = response.DBClusters?.[0];\n            const responseTime = Date.now() - startTime;\n\n            if (!cluster) {\n                throw new Error('Cluster not found');\n            }\n\n            const isHealthy = cluster.Status === 'available';\n            const status = isHealthy ? 'healthy' :\n                cluster.Status === 'backing-up' || cluster.Status === 'modifying' ? 'degraded' : 'unhealthy';\n\n            // Get additional metrics with proper identifiers\n            const replicationLag = await this.getRdsReplicationLagMs({\n                region: region === 'primary' ? this.config.primaryRegion : this.config.secondaryRegion,\n                globalClusterId: this.config.globalClusterIdentifier,\n                clusterId: clusterId,\n                instanceId: `${clusterId}-instance-1`, // Common pattern for Aurora instances\n            });\n\n            return {\n                service: 'database',\n                region: region === 'primary' ? this.config.primaryRegion : this.config.secondaryRegion,\n                status,\n                responseTime,\n                lastChecked: new Date(),\n                details: {\n                    clusterId,\n                    status: cluster.Status,\n                    engine: cluster.Engine || 'aurora-postgresql',\n                    engineVersion: cluster.EngineVersion || 'unknown',\n                    availabilityZones: cluster.AvailabilityZones,\n                    replicationLag, // <- WICHTIG: ms\n                    backupRetentionPeriod: cluster.BackupRetentionPeriod || 0,\n                    multiAZ: cluster.MultiAZ || true,\n                },\n            };\n\n        } catch (error) {\n            return {\n                service: 'database',\n                region: region === 'primary' ? this.config.primaryRegion : this.config.secondaryRegion,\n                status: 'unhealthy',\n                responseTime: Date.now() - startTime,\n                lastChecked: new Date(),\n                details: { clusterId },\n                error: error instanceof Error ? error.message : 'Unknown error',\n            };\n        }\n    }\n\n    /**\n     * Check ElastiCache health\n     */\n    private async checkCacheHealth(region: 'primary' | 'secondary'): Promise<HealthCheckResult> {\n        const startTime = Date.now();\n        const client = region === 'primary' ? this.primaryCacheClient : this.secondaryCacheClient;\n\n        try {\n            const command = new DescribeReplicationGroupsCommand({});\n            const response = await client.send(command);\n\n            const responseTime = Date.now() - startTime;\n            const replicationGroups = response.ReplicationGroups || [];\n\n            if (replicationGroups.length === 0) {\n                return {\n                    service: 'cache',\n                    region: region === 'primary' ? this.config.primaryRegion : this.config.secondaryRegion,\n                    status: 'healthy', // No cache configured is OK\n                    responseTime,\n                    lastChecked: new Date(),\n                    details: { message: 'No replication groups configured' },\n                };\n            }\n\n            const primaryGroup = replicationGroups[0];\n            const isHealthy = primaryGroup.Status === 'available';\n            const status = isHealthy ? 'healthy' :\n                primaryGroup.Status === 'creating' || primaryGroup.Status === 'modifying' ? 'degraded' : 'unhealthy';\n\n            return {\n                service: 'cache',\n                region: region === 'primary' ? this.config.primaryRegion : this.config.secondaryRegion,\n                status,\n                responseTime,\n                lastChecked: new Date(),\n                details: {\n                    replicationGroupId: primaryGroup.ReplicationGroupId,\n                    status: primaryGroup.Status,\n                    numCacheClusters: primaryGroup.NumCacheClusters,\n                    multiAZ: primaryGroup.MultiAZ,\n                    engine: primaryGroup.CacheNodeType,\n                },\n            };\n\n        } catch (error) {\n            return {\n                service: 'cache',\n                region: region === 'primary' ? this.config.primaryRegion : this.config.secondaryRegion,\n                status: 'unhealthy',\n                responseTime: Date.now() - startTime,\n                lastChecked: new Date(),\n                details: {},\n                error: error instanceof Error ? error.message : 'Unknown error',\n            };\n        }\n    }\n\n    /**\n     * Check S3 storage health and replication\n     */\n    private async checkStorageHealth(region: 'primary' | 'secondary'): Promise<HealthCheckResult> {\n        const startTime = Date.now();\n        const client = region === 'primary' ? this.primaryS3Client : this.secondaryS3Client;\n        const bucketName = `matbakh-web-${region === 'primary' ? this.config.primaryRegion : this.config.secondaryRegion}`;\n\n        try {\n            // Test bucket access with a simple head request\n            const headCommand = new HeadObjectCommand({\n                Bucket: bucketName,\n                Key: 'index.html', // Assuming this file exists\n            });\n\n            try {\n                await client.send(headCommand);\n            } catch (headError) {\n                // If index.html doesn't exist, that's OK - bucket is still accessible\n                if ((headError as any).name !== 'NotFound') {\n                    throw headError;\n                }\n            }\n\n            const responseTime = Date.now() - startTime;\n\n            // Check replication status if this is the primary region\n            let replicationDetails = {};\n            if (region === 'primary') {\n                try {\n                    const replicationCommand = new GetBucketReplicationCommand({\n                        Bucket: bucketName,\n                    });\n                    const replicationResponse = await client.send(replicationCommand);\n                    replicationDetails = {\n                        replicationRules: replicationResponse.ReplicationConfiguration?.Rules?.length || 0,\n                        replicationRole: replicationResponse.ReplicationConfiguration?.Role,\n                    };\n                } catch (replicationError) {\n                    // Replication might not be configured, which is OK\n                    replicationDetails = { replicationConfigured: false };\n                }\n            }\n\n            return {\n                service: 'storage',\n                region: region === 'primary' ? this.config.primaryRegion : this.config.secondaryRegion,\n                status: 'healthy',\n                responseTime,\n                lastChecked: new Date(),\n                details: {\n                    bucketName,\n                    ...replicationDetails,\n                },\n            };\n\n        } catch (error) {\n            return {\n                service: 'storage',\n                region: region === 'primary' ? this.config.primaryRegion : this.config.secondaryRegion,\n                status: 'unhealthy',\n                responseTime: Date.now() - startTime,\n                lastChecked: new Date(),\n                details: { bucketName },\n                error: error instanceof Error ? error.message : 'Unknown error',\n            };\n        }\n    }\n\n    /**\n     * Check secrets manager health\n     */\n    private async checkSecretsHealth(region: 'primary' | 'secondary'): Promise<HealthCheckResult> {\n        const startTime = Date.now();\n        const client = region === 'primary' ? this.primarySecretsClient : this.secondarySecretsClient;\n\n        try {\n            // Test access to a known secret\n            const command = new GetSecretValueCommand({\n                SecretId: 'matbakh/database/master',\n            });\n\n            await client.send(command);\n            const responseTime = Date.now() - startTime;\n\n            return {\n                service: 'secrets',\n                region: region === 'primary' ? this.config.primaryRegion : this.config.secondaryRegion,\n                status: 'healthy',\n                responseTime,\n                lastChecked: new Date(),\n                details: {\n                    secretsAccessible: true,\n                },\n            };\n\n        } catch (error) {\n            return {\n                service: 'secrets',\n                region: region === 'primary' ? this.config.primaryRegion : this.config.secondaryRegion,\n                status: 'unhealthy',\n                responseTime: Date.now() - startTime,\n                lastChecked: new Date(),\n                details: {},\n                error: error instanceof Error ? error.message : 'Unknown error',\n            };\n        }\n    }\n\n    /**\n     * Get database replication lag in milliseconds\n     */\n    private async getRdsReplicationLagMs(params: {\n        region: string;\n        globalClusterId?: string;\n        clusterId?: string;\n        instanceId?: string;\n    }): Promise<number> {\n        // WICHTIG: den injizierten Client verwenden \u2013 NICHT new CloudWatchClient(...)\n        const cw = this.cloudWatchClient;\n        const now = new Date();\n        const start = new Date(now.getTime() - 5 * 60 * 1000); // letzte 5 Minuten\n\n        const queries = [];\n\n        // 1) Aurora Global (Sekunden)\n        if (params.globalClusterId) {\n            queries.push({\n                Id: 'gbl',\n                ReturnData: true,\n                MetricStat: {\n                    Metric: {\n                        Namespace: 'AWS/RDS',\n                        MetricName: 'AuroraGlobalDBRPLag', // s\n                        Dimensions: [{ Name: 'GlobalDBClusterIdentifier', Value: params.globalClusterId }],\n                    },\n                    Period: 60,\n                    Stat: 'Average',\n                },\n            });\n        }\n\n        // 2) Aurora Cluster (Sekunden) \u2013 h\xE4ufig in Tests gemockt\n        if (params.clusterId) {\n            queries.push({\n                Id: 'clu',\n                ReturnData: true,\n                MetricStat: {\n                    Metric: {\n                        Namespace: 'AWS/RDS',\n                        MetricName: 'AuroraReplicaLagMaximum', // s\n                        Dimensions: [{ Name: 'DBClusterIdentifier', Value: params.clusterId }],\n                    },\n                    Period: 60,\n                    Stat: 'Average',\n                },\n            });\n        }\n\n        // 3) Instance Fallback (Sekunden)\n        if (params.instanceId) {\n            queries.push({\n                Id: 'ins',\n                ReturnData: true,\n                MetricStat: {\n                    Metric: {\n                        Namespace: 'AWS/RDS',\n                        MetricName: 'ReplicaLag', // s\n                        Dimensions: [{ Name: 'DBInstanceIdentifier', Value: params.instanceId }],\n                    },\n                    Period: 60,\n                    Stat: 'Average',\n                },\n            });\n        }\n\n        if (queries.length === 0) return 0;\n\n        try {\n            const resp = await cw.send(new GetMetricDataCommand({\n                StartTime: start,\n                EndTime: now,\n                MetricDataQueries: queries,\n            }));\n\n            // Erstes valides Ergebnis (Sekunden) nehmen \u2013 viele Tests liefern genau einen Wert\n            const seconds =\n                resp.MetricDataResults?.map(r => r.Values?.[0])\n                    .find((v): v is number => typeof v === 'number' && !Number.isNaN(v)) ?? 0;\n\n            // In Millisekunden wandeln \u2013 Tests erwarten 30000 / 120000 etc.\n            return Math.round(seconds * 1000);\n        } catch {\n            return 0;\n        }\n    }\n\n    /**\n     * Get database replication lag (legacy method for backward compatibility)\n     */\n    private async getDatabaseReplicationLag(region: 'primary' | 'secondary'): Promise<number> {\n        if (region === 'primary') {\n            return 0; // Primary has no replication lag\n        }\n\n        return this.getRdsReplicationLagMs({\n            region: 'secondary',\n            globalClusterId: this.config.globalClusterIdentifier,\n            clusterId: this.config.secondaryClusterIdentifier,\n            instanceId: `${this.config.secondaryClusterIdentifier}-instance-1`,\n        });\n    }\n\n    /**\n     * Extract result from Promise.allSettled\n     */\n    private extractResult(\n        result: PromiseSettledResult<HealthCheckResult>,\n        service: string,\n        region: string\n    ): HealthCheckResult {\n        if (result.status === 'fulfilled') {\n            return result.value;\n        } else {\n            return {\n                service,\n                region,\n                status: 'unhealthy',\n                lastChecked: new Date(),\n                details: {},\n                error: result.reason instanceof Error ? result.reason.message : 'Unknown error',\n            };\n        }\n    }\n\n    /**\n     * Determine overall health from individual service results\n     */\n    private determineOverallHealth(services: HealthCheckResult[]): 'healthy' | 'degraded' | 'unhealthy' {\n        const unhealthyCount = services.filter(s => s.status === 'unhealthy').length;\n        const degradedCount = services.filter(s => s.status === 'degraded').length;\n\n        if (unhealthyCount > 0) {\n            return unhealthyCount > services.length / 2 ? 'unhealthy' : 'degraded';\n        }\n\n        if (degradedCount > 0) {\n            return 'degraded';\n        }\n\n        return 'healthy';\n    }\n\n    /**\n     * Create error region status\n     */\n    private createErrorRegionStatus(region: 'primary' | 'secondary', error: any): RegionHealthStatus {\n        const regionName = region === 'primary' ? this.config.primaryRegion : this.config.secondaryRegion;\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n\n        const errorResult: HealthCheckResult = {\n            service: 'unknown',\n            region: regionName,\n            status: 'unhealthy',\n            lastChecked: new Date(),\n            details: {},\n            error: errorMessage,\n        };\n\n        return {\n            region: regionName,\n            status: 'unhealthy',\n            services: {\n                api: errorResult,\n                database: errorResult,\n                cache: errorResult,\n                storage: errorResult,\n                secrets: errorResult,\n            },\n        };\n    }\n\n    /**\n     * Get health check summary for monitoring\n     */\n    async getHealthSummary(): Promise<{\n        timestamp: Date;\n        overallStatus: 'healthy' | 'degraded' | 'unhealthy';\n        regionStatus: Record<string, 'healthy' | 'degraded' | 'unhealthy'>;\n        serviceStatus: Record<string, 'healthy' | 'degraded' | 'unhealthy'>;\n        metrics: {\n            averageResponseTime: number;\n            successRate: number;\n            replicationLag: number;\n        };\n    }> {\n        const healthStatus = await this.checkAllServices();\n\n        const regionStatus = {\n            [this.config.primaryRegion]: healthStatus.regions.primary.status,\n            [this.config.secondaryRegion]: healthStatus.regions.secondary.status,\n        };\n\n        const serviceStatus = healthStatus.services.reduce((acc, service) => {\n            acc[`${service.service}-${service.region}`] = service.status;\n            return acc;\n        }, {} as Record<string, 'healthy' | 'degraded' | 'unhealthy'>);\n\n        // Calculate average response time from all services\n        const times = healthStatus.services\n            .map(s => s.responseTime ?? 0)\n            .filter(n => typeof n === 'number' && n > 0);\n\n        const averageResponseTime = times.length\n            ? Math.round(times.reduce((a, b) => a + b, 0) / times.length)\n            : 0;\n\n        const successRate = healthStatus.services.length > 0\n            ? (healthStatus.services.filter(s => s.status === 'healthy').length / healthStatus.services.length) * 100\n            : 0;\n\n        // Calculate average replication lag from all database services\n        const dbLags = healthStatus.services\n            .filter(s => s.service === 'database')\n            .map(s => s.details?.replicationLag ?? 0)\n            .filter(n => typeof n === 'number' && n > 0);\n\n        const replicationLag = dbLags.length\n            ? Math.round(dbLags.reduce((a, b) => a + b, 0) / dbLags.length)\n            : 0;\n\n        return {\n            timestamp: new Date(),\n            overallStatus: healthStatus.overall,\n            regionStatus,\n            serviceStatus,\n            metrics: {\n                averageResponseTime,\n                successRate,\n                replicationLag,\n            },\n        };\n    }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3c42ce29e0f92e7d87800f7ca2f5e7f67a793f9c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_15wek86zv2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_15wek86zv2();
cov_15wek86zv2().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_15wek86zv2().s[1]++;
exports.HealthChecker = void 0;
const tslib_1 =
/* istanbul ignore next */
(cov_15wek86zv2().s[2]++, require("tslib"));
const client_cloudwatch_1 =
/* istanbul ignore next */
(cov_15wek86zv2().s[3]++, require("@aws-sdk/client-cloudwatch"));
const client_elasticache_1 =
/* istanbul ignore next */
(cov_15wek86zv2().s[4]++, require("@aws-sdk/client-elasticache"));
const client_rds_1 =
/* istanbul ignore next */
(cov_15wek86zv2().s[5]++, require("@aws-sdk/client-rds"));
const client_route_53_1 =
/* istanbul ignore next */
(cov_15wek86zv2().s[6]++, require("@aws-sdk/client-route-53"));
const client_s3_1 =
/* istanbul ignore next */
(cov_15wek86zv2().s[7]++, require("@aws-sdk/client-s3"));
const client_secrets_manager_1 =
/* istanbul ignore next */
(cov_15wek86zv2().s[8]++, require("@aws-sdk/client-secrets-manager"));
class HealthChecker {
  constructor(config, clients) {
    /* istanbul ignore next */
    cov_15wek86zv2().f[0]++;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    /* istanbul ignore next */
    cov_15wek86zv2().s[9]++;
    this.config = config;
    // Use injected clients if provided, otherwise create new ones
    /* istanbul ignore next */
    cov_15wek86zv2().s[10]++;
    this.route53Client =
    /* istanbul ignore next */
    (cov_15wek86zv2().b[1][0]++, (_a =
    /* istanbul ignore next */
    (cov_15wek86zv2().b[3][0]++, clients === null) ||
    /* istanbul ignore next */
    (cov_15wek86zv2().b[3][1]++, clients === void 0) ?
    /* istanbul ignore next */
    (cov_15wek86zv2().b[2][0]++, void 0) :
    /* istanbul ignore next */
    (cov_15wek86zv2().b[2][1]++, clients.route53)) !== null) &&
    /* istanbul ignore next */
    (cov_15wek86zv2().b[1][1]++, _a !== void 0) ?
    /* istanbul ignore next */
    (cov_15wek86zv2().b[0][0]++, _a) :
    /* istanbul ignore next */
    (cov_15wek86zv2().b[0][1]++, new client_route_53_1.Route53Client({
      region: 'us-east-1'
    }));
    /* istanbul ignore next */
    cov_15wek86zv2().s[11]++;
    this.primaryRdsClient =
    /* istanbul ignore next */
    (cov_15wek86zv2().b[5][0]++, (_b =
    /* istanbul ignore next */
    (cov_15wek86zv2().b[7][0]++, clients === null) ||
    /* istanbul ignore next */
    (cov_15wek86zv2().b[7][1]++, clients === void 0) ?
    /* istanbul ignore next */
    (cov_15wek86zv2().b[6][0]++, void 0) :
    /* istanbul ignore next */
    (cov_15wek86zv2().b[6][1]++, clients.primaryRds)) !== null) &&
    /* istanbul ignore next */
    (cov_15wek86zv2().b[5][1]++, _b !== void 0) ?
    /* istanbul ignore next */
    (cov_15wek86zv2().b[4][0]++, _b) :
    /* istanbul ignore next */
    (cov_15wek86zv2().b[4][1]++, new client_rds_1.RDSClient({
      region: config.primaryRegion
    }));
    /* istanbul ignore next */
    cov_15wek86zv2().s[12]++;
    this.secondaryRdsClient =
    /* istanbul ignore next */
    (cov_15wek86zv2().b[9][0]++, (_c =
    /* istanbul ignore next */
    (cov_15wek86zv2().b[11][0]++, clients === null) ||
    /* istanbul ignore next */
    (cov_15wek86zv2().b[11][1]++, clients === void 0) ?
    /* istanbul ignore next */
    (cov_15wek86zv2().b[10][0]++, void 0) :
    /* istanbul ignore next */
    (cov_15wek86zv2().b[10][1]++, clients.secondaryRds)) !== null) &&
    /* istanbul ignore next */
    (cov_15wek86zv2().b[9][1]++, _c !== void 0) ?
    /* istanbul ignore next */
    (cov_15wek86zv2().b[8][0]++, _c) :
    /* istanbul ignore next */
    (cov_15wek86zv2().b[8][1]++, new client_rds_1.RDSClient({
      region: config.secondaryRegion
    }));
    /* istanbul ignore next */
    cov_15wek86zv2().s[13]++;
    this.primaryCacheClient =
    /* istanbul ignore next */
    (cov_15wek86zv2().b[13][0]++, (_d =
    /* istanbul ignore next */
    (cov_15wek86zv2().b[15][0]++, clients === null) ||
    /* istanbul ignore next */
    (cov_15wek86zv2().b[15][1]++, clients === void 0) ?
    /* istanbul ignore next */
    (cov_15wek86zv2().b[14][0]++, void 0) :
    /* istanbul ignore next */
    (cov_15wek86zv2().b[14][1]++, clients.primaryCache)) !== null) &&
    /* istanbul ignore next */
    (cov_15wek86zv2().b[13][1]++, _d !== void 0) ?
    /* istanbul ignore next */
    (cov_15wek86zv2().b[12][0]++, _d) :
    /* istanbul ignore next */
    (cov_15wek86zv2().b[12][1]++, new client_elasticache_1.ElastiCacheClient({
      region: config.primaryRegion
    }));
    /* istanbul ignore next */
    cov_15wek86zv2().s[14]++;
    this.secondaryCacheClient =
    /* istanbul ignore next */
    (cov_15wek86zv2().b[17][0]++, (_e =
    /* istanbul ignore next */
    (cov_15wek86zv2().b[19][0]++, clients === null) ||
    /* istanbul ignore next */
    (cov_15wek86zv2().b[19][1]++, clients === void 0) ?
    /* istanbul ignore next */
    (cov_15wek86zv2().b[18][0]++, void 0) :
    /* istanbul ignore next */
    (cov_15wek86zv2().b[18][1]++, clients.secondaryCache)) !== null) &&
    /* istanbul ignore next */
    (cov_15wek86zv2().b[17][1]++, _e !== void 0) ?
    /* istanbul ignore next */
    (cov_15wek86zv2().b[16][0]++, _e) :
    /* istanbul ignore next */
    (cov_15wek86zv2().b[16][1]++, new client_elasticache_1.ElastiCacheClient({
      region: config.secondaryRegion
    }));
    /* istanbul ignore next */
    cov_15wek86zv2().s[15]++;
    this.primaryS3Client =
    /* istanbul ignore next */
    (cov_15wek86zv2().b[21][0]++, (_f =
    /* istanbul ignore next */
    (cov_15wek86zv2().b[23][0]++, clients === null) ||
    /* istanbul ignore next */
    (cov_15wek86zv2().b[23][1]++, clients === void 0) ?
    /* istanbul ignore next */
    (cov_15wek86zv2().b[22][0]++, void 0) :
    /* istanbul ignore next */
    (cov_15wek86zv2().b[22][1]++, clients.primaryS3)) !== null) &&
    /* istanbul ignore next */
    (cov_15wek86zv2().b[21][1]++, _f !== void 0) ?
    /* istanbul ignore next */
    (cov_15wek86zv2().b[20][0]++, _f) :
    /* istanbul ignore next */
    (cov_15wek86zv2().b[20][1]++, new client_s3_1.S3Client({
      region: config.primaryRegion
    }));
    /* istanbul ignore next */
    cov_15wek86zv2().s[16]++;
    this.secondaryS3Client =
    /* istanbul ignore next */
    (cov_15wek86zv2().b[25][0]++, (_g =
    /* istanbul ignore next */
    (cov_15wek86zv2().b[27][0]++, clients === null) ||
    /* istanbul ignore next */
    (cov_15wek86zv2().b[27][1]++, clients === void 0) ?
    /* istanbul ignore next */
    (cov_15wek86zv2().b[26][0]++, void 0) :
    /* istanbul ignore next */
    (cov_15wek86zv2().b[26][1]++, clients.secondaryS3)) !== null) &&
    /* istanbul ignore next */
    (cov_15wek86zv2().b[25][1]++, _g !== void 0) ?
    /* istanbul ignore next */
    (cov_15wek86zv2().b[24][0]++, _g) :
    /* istanbul ignore next */
    (cov_15wek86zv2().b[24][1]++, new client_s3_1.S3Client({
      region: config.secondaryRegion
    }));
    /* istanbul ignore next */
    cov_15wek86zv2().s[17]++;
    this.primarySecretsClient =
    /* istanbul ignore next */
    (cov_15wek86zv2().b[29][0]++, (_h =
    /* istanbul ignore next */
    (cov_15wek86zv2().b[31][0]++, clients === null) ||
    /* istanbul ignore next */
    (cov_15wek86zv2().b[31][1]++, clients === void 0) ?
    /* istanbul ignore next */
    (cov_15wek86zv2().b[30][0]++, void 0) :
    /* istanbul ignore next */
    (cov_15wek86zv2().b[30][1]++, clients.primarySecrets)) !== null) &&
    /* istanbul ignore next */
    (cov_15wek86zv2().b[29][1]++, _h !== void 0) ?
    /* istanbul ignore next */
    (cov_15wek86zv2().b[28][0]++, _h) :
    /* istanbul ignore next */
    (cov_15wek86zv2().b[28][1]++, new client_secrets_manager_1.SecretsManagerClient({
      region: config.primaryRegion
    }));
    /* istanbul ignore next */
    cov_15wek86zv2().s[18]++;
    this.secondarySecretsClient =
    /* istanbul ignore next */
    (cov_15wek86zv2().b[33][0]++, (_j =
    /* istanbul ignore next */
    (cov_15wek86zv2().b[35][0]++, clients === null) ||
    /* istanbul ignore next */
    (cov_15wek86zv2().b[35][1]++, clients === void 0) ?
    /* istanbul ignore next */
    (cov_15wek86zv2().b[34][0]++, void 0) :
    /* istanbul ignore next */
    (cov_15wek86zv2().b[34][1]++, clients.secondarySecrets)) !== null) &&
    /* istanbul ignore next */
    (cov_15wek86zv2().b[33][1]++, _j !== void 0) ?
    /* istanbul ignore next */
    (cov_15wek86zv2().b[32][0]++, _j) :
    /* istanbul ignore next */
    (cov_15wek86zv2().b[32][1]++, new client_secrets_manager_1.SecretsManagerClient({
      region: config.secondaryRegion
    }));
    /* istanbul ignore next */
    cov_15wek86zv2().s[19]++;
    this.cloudWatchClient =
    /* istanbul ignore next */
    (cov_15wek86zv2().b[37][0]++, (_k =
    /* istanbul ignore next */
    (cov_15wek86zv2().b[39][0]++, clients === null) ||
    /* istanbul ignore next */
    (cov_15wek86zv2().b[39][1]++, clients === void 0) ?
    /* istanbul ignore next */
    (cov_15wek86zv2().b[38][0]++, void 0) :
    /* istanbul ignore next */
    (cov_15wek86zv2().b[38][1]++, clients.cloudwatch)) !== null) &&
    /* istanbul ignore next */
    (cov_15wek86zv2().b[37][1]++, _k !== void 0) ?
    /* istanbul ignore next */
    (cov_15wek86zv2().b[36][0]++, _k) :
    /* istanbul ignore next */
    (cov_15wek86zv2().b[36][1]++, new client_cloudwatch_1.CloudWatchClient({
      region: config.primaryRegion
    }));
  }
  /**
   * Check health of all services across both regions
   */
  checkAllServices() {
    /* istanbul ignore next */
    cov_15wek86zv2().f[1]++;
    cov_15wek86zv2().s[20]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_15wek86zv2().f[2]++;
      const startTime =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[21]++, new Date());
      /* istanbul ignore next */
      cov_15wek86zv2().s[22]++;
      try {
        // Check primary region services
        const primaryHealth =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[23]++, yield this.checkRegionHealth('primary'));
        // Check secondary region services
        const secondaryHealth =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[24]++, yield this.checkRegionHealth('secondary'));
        // Determine overall health
        const allServices =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[25]++, [...Object.values(primaryHealth.services), ...Object.values(secondaryHealth.services)]);
        const overall =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[26]++, this.determineOverallHealth(allServices));
        /* istanbul ignore next */
        cov_15wek86zv2().s[27]++;
        return {
          overall,
          regions: {
            primary: primaryHealth,
            secondary: secondaryHealth
          },
          services: allServices,
          lastUpdated: new Date()
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_15wek86zv2().s[28]++;
        console.error('Error checking system health:', error);
        /* istanbul ignore next */
        cov_15wek86zv2().s[29]++;
        return {
          overall: 'unhealthy',
          regions: {
            primary: this.createErrorRegionStatus('primary', error),
            secondary: this.createErrorRegionStatus('secondary', error)
          },
          services: [],
          lastUpdated: new Date()
        };
      }
    });
  }
  /**
   * Check health of services in a specific region
   */
  checkRegionHealth(region) {
    /* istanbul ignore next */
    cov_15wek86zv2().f[3]++;
    cov_15wek86zv2().s[30]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_15wek86zv2().f[4]++;
      const regionName =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[31]++, region === 'primary' ?
      /* istanbul ignore next */
      (cov_15wek86zv2().b[40][0]++, this.config.primaryRegion) :
      /* istanbul ignore next */
      (cov_15wek86zv2().b[40][1]++, this.config.secondaryRegion));
      const [apiHealth, dbHealth, cacheHealth, storageHealth, secretsHealth] =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[32]++, yield Promise.allSettled([this.checkApiHealth(region), this.checkDatabaseHealth(region), this.checkCacheHealth(region), this.checkStorageHealth(region), this.checkSecretsHealth(region)]));
      const services =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[33]++, {
        api: this.extractResult(apiHealth, 'api', regionName),
        database: this.extractResult(dbHealth, 'database', regionName),
        cache: this.extractResult(cacheHealth, 'cache', regionName),
        storage: this.extractResult(storageHealth, 'storage', regionName),
        secrets: this.extractResult(secretsHealth, 'secrets', regionName)
      });
      const regionStatus =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[34]++, this.determineOverallHealth(Object.values(services)));
      /* istanbul ignore next */
      cov_15wek86zv2().s[35]++;
      return {
        region: regionName,
        status: regionStatus,
        services
      };
    });
  }
  /**
   * Check API health via Route 53 health checks
   */
  checkApiHealth(region) {
    /* istanbul ignore next */
    cov_15wek86zv2().f[5]++;
    cov_15wek86zv2().s[36]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_15wek86zv2().f[6]++;
      var _a, _b, _c;
      const startTime =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[37]++, Date.now());
      const healthCheckId =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[38]++, region === 'primary' ?
      /* istanbul ignore next */
      (cov_15wek86zv2().b[41][0]++, this.config.primaryHealthCheckId) :
      /* istanbul ignore next */
      (cov_15wek86zv2().b[41][1]++, this.config.secondaryHealthCheckId));
      /* istanbul ignore next */
      cov_15wek86zv2().s[39]++;
      try {
        // Get health check configuration
        const configCommand =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[40]++, new client_route_53_1.GetHealthCheckCommand({
          HealthCheckId: healthCheckId
        }));
        const configResponse =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[41]++, yield this.route53Client.send(configCommand));
        // Get health check status
        const statusCommand =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[42]++, new client_route_53_1.GetHealthCheckStatusCommand({
          HealthCheckId: healthCheckId
        }));
        const statusResponse =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[43]++, yield this.route53Client.send(statusCommand));
        const responseTime =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[44]++, Date.now() - startTime);
        const latestStatus =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[45]++,
        /* istanbul ignore next */
        (cov_15wek86zv2().b[43][0]++, (_a = statusResponse.StatusList) === null) ||
        /* istanbul ignore next */
        (cov_15wek86zv2().b[43][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_15wek86zv2().b[42][0]++, void 0) :
        /* istanbul ignore next */
        (cov_15wek86zv2().b[42][1]++, _a[0]));
        const isHealthy =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[46]++, (
        /* istanbul ignore next */
        (cov_15wek86zv2().b[45][0]++, latestStatus === null) ||
        /* istanbul ignore next */
        (cov_15wek86zv2().b[45][1]++, latestStatus === void 0) ?
        /* istanbul ignore next */
        (cov_15wek86zv2().b[44][0]++, void 0) :
        /* istanbul ignore next */
        (cov_15wek86zv2().b[44][1]++, latestStatus.Status)) === 'Success');
        /* istanbul ignore next */
        cov_15wek86zv2().s[47]++;
        return {
          service: 'api',
          region: region === 'primary' ?
          /* istanbul ignore next */
          (cov_15wek86zv2().b[46][0]++, this.config.primaryRegion) :
          /* istanbul ignore next */
          (cov_15wek86zv2().b[46][1]++, this.config.secondaryRegion),
          status: isHealthy ?
          /* istanbul ignore next */
          (cov_15wek86zv2().b[47][0]++, 'healthy') :
          /* istanbul ignore next */
          (cov_15wek86zv2().b[47][1]++, 'unhealthy'),
          responseTime,
          lastChecked: new Date(),
          details: {
            healthCheckId,
            status:
            /* istanbul ignore next */
            (cov_15wek86zv2().b[49][0]++, latestStatus === null) ||
            /* istanbul ignore next */
            (cov_15wek86zv2().b[49][1]++, latestStatus === void 0) ?
            /* istanbul ignore next */
            (cov_15wek86zv2().b[48][0]++, void 0) :
            /* istanbul ignore next */
            (cov_15wek86zv2().b[48][1]++, latestStatus.Status),
            checkedTime:
            /* istanbul ignore next */
            (cov_15wek86zv2().b[51][0]++, latestStatus === null) ||
            /* istanbul ignore next */
            (cov_15wek86zv2().b[51][1]++, latestStatus === void 0) ?
            /* istanbul ignore next */
            (cov_15wek86zv2().b[50][0]++, void 0) :
            /* istanbul ignore next */
            (cov_15wek86zv2().b[50][1]++, latestStatus.CheckedTime),
            latency:
            /* istanbul ignore next */
            (cov_15wek86zv2().b[53][0]++, latestStatus === null) ||
            /* istanbul ignore next */
            (cov_15wek86zv2().b[53][1]++, latestStatus === void 0) ?
            /* istanbul ignore next */
            (cov_15wek86zv2().b[52][0]++, void 0) :
            /* istanbul ignore next */
            (cov_15wek86zv2().b[52][1]++, latestStatus.Latency),
            fqdn:
            /* istanbul ignore next */
            (cov_15wek86zv2().b[55][0]++, (_c =
            /* istanbul ignore next */
            (cov_15wek86zv2().b[57][0]++, (_b = configResponse.HealthCheck) === null) ||
            /* istanbul ignore next */
            (cov_15wek86zv2().b[57][1]++, _b === void 0) ?
            /* istanbul ignore next */
            (cov_15wek86zv2().b[56][0]++, void 0) :
            /* istanbul ignore next */
            (cov_15wek86zv2().b[56][1]++, _b.HealthCheckConfig)) === null) ||
            /* istanbul ignore next */
            (cov_15wek86zv2().b[55][1]++, _c === void 0) ?
            /* istanbul ignore next */
            (cov_15wek86zv2().b[54][0]++, void 0) :
            /* istanbul ignore next */
            (cov_15wek86zv2().b[54][1]++, _c.FullyQualifiedDomainName)
          }
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_15wek86zv2().s[48]++;
        return {
          service: 'api',
          region: region === 'primary' ?
          /* istanbul ignore next */
          (cov_15wek86zv2().b[58][0]++, this.config.primaryRegion) :
          /* istanbul ignore next */
          (cov_15wek86zv2().b[58][1]++, this.config.secondaryRegion),
          status: 'unhealthy',
          responseTime: Date.now() - startTime,
          lastChecked: new Date(),
          details: {},
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_15wek86zv2().b[59][0]++, error.message) :
          /* istanbul ignore next */
          (cov_15wek86zv2().b[59][1]++, 'Unknown error')
        };
      }
    });
  }
  /**
   * Check database health
   */
  checkDatabaseHealth(region) {
    /* istanbul ignore next */
    cov_15wek86zv2().f[7]++;
    cov_15wek86zv2().s[49]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_15wek86zv2().f[8]++;
      var _a;
      const startTime =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[50]++, Date.now());
      const client =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[51]++, region === 'primary' ?
      /* istanbul ignore next */
      (cov_15wek86zv2().b[60][0]++, this.primaryRdsClient) :
      /* istanbul ignore next */
      (cov_15wek86zv2().b[60][1]++, this.secondaryRdsClient));
      const clusterId =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[52]++, region === 'primary' ?
      /* istanbul ignore next */
      (cov_15wek86zv2().b[61][0]++, this.config.primaryClusterIdentifier) :
      /* istanbul ignore next */
      (cov_15wek86zv2().b[61][1]++, this.config.secondaryClusterIdentifier));
      /* istanbul ignore next */
      cov_15wek86zv2().s[53]++;
      try {
        const command =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[54]++, new client_rds_1.DescribeDBClustersCommand({
          DBClusterIdentifier: clusterId
        }));
        const response =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[55]++, yield client.send(command));
        const cluster =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[56]++,
        /* istanbul ignore next */
        (cov_15wek86zv2().b[63][0]++, (_a = response.DBClusters) === null) ||
        /* istanbul ignore next */
        (cov_15wek86zv2().b[63][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_15wek86zv2().b[62][0]++, void 0) :
        /* istanbul ignore next */
        (cov_15wek86zv2().b[62][1]++, _a[0]));
        const responseTime =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[57]++, Date.now() - startTime);
        /* istanbul ignore next */
        cov_15wek86zv2().s[58]++;
        if (!cluster) {
          /* istanbul ignore next */
          cov_15wek86zv2().b[64][0]++;
          cov_15wek86zv2().s[59]++;
          throw new Error('Cluster not found');
        } else
        /* istanbul ignore next */
        {
          cov_15wek86zv2().b[64][1]++;
        }
        const isHealthy =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[60]++, cluster.Status === 'available');
        const status =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[61]++, isHealthy ?
        /* istanbul ignore next */
        (cov_15wek86zv2().b[65][0]++, 'healthy') :
        /* istanbul ignore next */
        (cov_15wek86zv2().b[65][1]++,
        /* istanbul ignore next */
        (cov_15wek86zv2().b[67][0]++, cluster.Status === 'backing-up') ||
        /* istanbul ignore next */
        (cov_15wek86zv2().b[67][1]++, cluster.Status === 'modifying') ?
        /* istanbul ignore next */
        (cov_15wek86zv2().b[66][0]++, 'degraded') :
        /* istanbul ignore next */
        (cov_15wek86zv2().b[66][1]++, 'unhealthy')));
        // Get additional metrics with proper identifiers
        const replicationLag =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[62]++, yield this.getRdsReplicationLagMs({
          region: region === 'primary' ?
          /* istanbul ignore next */
          (cov_15wek86zv2().b[68][0]++, this.config.primaryRegion) :
          /* istanbul ignore next */
          (cov_15wek86zv2().b[68][1]++, this.config.secondaryRegion),
          globalClusterId: this.config.globalClusterIdentifier,
          clusterId: clusterId,
          instanceId: `${clusterId}-instance-1` // Common pattern for Aurora instances
        }));
        /* istanbul ignore next */
        cov_15wek86zv2().s[63]++;
        return {
          service: 'database',
          region: region === 'primary' ?
          /* istanbul ignore next */
          (cov_15wek86zv2().b[69][0]++, this.config.primaryRegion) :
          /* istanbul ignore next */
          (cov_15wek86zv2().b[69][1]++, this.config.secondaryRegion),
          status,
          responseTime,
          lastChecked: new Date(),
          details: {
            clusterId,
            status: cluster.Status,
            engine:
            /* istanbul ignore next */
            (cov_15wek86zv2().b[70][0]++, cluster.Engine) ||
            /* istanbul ignore next */
            (cov_15wek86zv2().b[70][1]++, 'aurora-postgresql'),
            engineVersion:
            /* istanbul ignore next */
            (cov_15wek86zv2().b[71][0]++, cluster.EngineVersion) ||
            /* istanbul ignore next */
            (cov_15wek86zv2().b[71][1]++, 'unknown'),
            availabilityZones: cluster.AvailabilityZones,
            replicationLag,
            // <- WICHTIG: ms
            backupRetentionPeriod:
            /* istanbul ignore next */
            (cov_15wek86zv2().b[72][0]++, cluster.BackupRetentionPeriod) ||
            /* istanbul ignore next */
            (cov_15wek86zv2().b[72][1]++, 0),
            multiAZ:
            /* istanbul ignore next */
            (cov_15wek86zv2().b[73][0]++, cluster.MultiAZ) ||
            /* istanbul ignore next */
            (cov_15wek86zv2().b[73][1]++, true)
          }
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_15wek86zv2().s[64]++;
        return {
          service: 'database',
          region: region === 'primary' ?
          /* istanbul ignore next */
          (cov_15wek86zv2().b[74][0]++, this.config.primaryRegion) :
          /* istanbul ignore next */
          (cov_15wek86zv2().b[74][1]++, this.config.secondaryRegion),
          status: 'unhealthy',
          responseTime: Date.now() - startTime,
          lastChecked: new Date(),
          details: {
            clusterId
          },
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_15wek86zv2().b[75][0]++, error.message) :
          /* istanbul ignore next */
          (cov_15wek86zv2().b[75][1]++, 'Unknown error')
        };
      }
    });
  }
  /**
   * Check ElastiCache health
   */
  checkCacheHealth(region) {
    /* istanbul ignore next */
    cov_15wek86zv2().f[9]++;
    cov_15wek86zv2().s[65]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_15wek86zv2().f[10]++;
      const startTime =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[66]++, Date.now());
      const client =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[67]++, region === 'primary' ?
      /* istanbul ignore next */
      (cov_15wek86zv2().b[76][0]++, this.primaryCacheClient) :
      /* istanbul ignore next */
      (cov_15wek86zv2().b[76][1]++, this.secondaryCacheClient));
      /* istanbul ignore next */
      cov_15wek86zv2().s[68]++;
      try {
        const command =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[69]++, new client_elasticache_1.DescribeReplicationGroupsCommand({}));
        const response =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[70]++, yield client.send(command));
        const responseTime =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[71]++, Date.now() - startTime);
        const replicationGroups =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[72]++,
        /* istanbul ignore next */
        (cov_15wek86zv2().b[77][0]++, response.ReplicationGroups) ||
        /* istanbul ignore next */
        (cov_15wek86zv2().b[77][1]++, []));
        /* istanbul ignore next */
        cov_15wek86zv2().s[73]++;
        if (replicationGroups.length === 0) {
          /* istanbul ignore next */
          cov_15wek86zv2().b[78][0]++;
          cov_15wek86zv2().s[74]++;
          return {
            service: 'cache',
            region: region === 'primary' ?
            /* istanbul ignore next */
            (cov_15wek86zv2().b[79][0]++, this.config.primaryRegion) :
            /* istanbul ignore next */
            (cov_15wek86zv2().b[79][1]++, this.config.secondaryRegion),
            status: 'healthy',
            // No cache configured is OK
            responseTime,
            lastChecked: new Date(),
            details: {
              message: 'No replication groups configured'
            }
          };
        } else
        /* istanbul ignore next */
        {
          cov_15wek86zv2().b[78][1]++;
        }
        const primaryGroup =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[75]++, replicationGroups[0]);
        const isHealthy =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[76]++, primaryGroup.Status === 'available');
        const status =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[77]++, isHealthy ?
        /* istanbul ignore next */
        (cov_15wek86zv2().b[80][0]++, 'healthy') :
        /* istanbul ignore next */
        (cov_15wek86zv2().b[80][1]++,
        /* istanbul ignore next */
        (cov_15wek86zv2().b[82][0]++, primaryGroup.Status === 'creating') ||
        /* istanbul ignore next */
        (cov_15wek86zv2().b[82][1]++, primaryGroup.Status === 'modifying') ?
        /* istanbul ignore next */
        (cov_15wek86zv2().b[81][0]++, 'degraded') :
        /* istanbul ignore next */
        (cov_15wek86zv2().b[81][1]++, 'unhealthy')));
        /* istanbul ignore next */
        cov_15wek86zv2().s[78]++;
        return {
          service: 'cache',
          region: region === 'primary' ?
          /* istanbul ignore next */
          (cov_15wek86zv2().b[83][0]++, this.config.primaryRegion) :
          /* istanbul ignore next */
          (cov_15wek86zv2().b[83][1]++, this.config.secondaryRegion),
          status,
          responseTime,
          lastChecked: new Date(),
          details: {
            replicationGroupId: primaryGroup.ReplicationGroupId,
            status: primaryGroup.Status,
            numCacheClusters: primaryGroup.NumCacheClusters,
            multiAZ: primaryGroup.MultiAZ,
            engine: primaryGroup.CacheNodeType
          }
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_15wek86zv2().s[79]++;
        return {
          service: 'cache',
          region: region === 'primary' ?
          /* istanbul ignore next */
          (cov_15wek86zv2().b[84][0]++, this.config.primaryRegion) :
          /* istanbul ignore next */
          (cov_15wek86zv2().b[84][1]++, this.config.secondaryRegion),
          status: 'unhealthy',
          responseTime: Date.now() - startTime,
          lastChecked: new Date(),
          details: {},
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_15wek86zv2().b[85][0]++, error.message) :
          /* istanbul ignore next */
          (cov_15wek86zv2().b[85][1]++, 'Unknown error')
        };
      }
    });
  }
  /**
   * Check S3 storage health and replication
   */
  checkStorageHealth(region) {
    /* istanbul ignore next */
    cov_15wek86zv2().f[11]++;
    cov_15wek86zv2().s[80]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_15wek86zv2().f[12]++;
      var _a, _b, _c;
      const startTime =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[81]++, Date.now());
      const client =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[82]++, region === 'primary' ?
      /* istanbul ignore next */
      (cov_15wek86zv2().b[86][0]++, this.primaryS3Client) :
      /* istanbul ignore next */
      (cov_15wek86zv2().b[86][1]++, this.secondaryS3Client));
      const bucketName =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[83]++, `matbakh-web-${region === 'primary' ?
      /* istanbul ignore next */
      (cov_15wek86zv2().b[87][0]++, this.config.primaryRegion) :
      /* istanbul ignore next */
      (cov_15wek86zv2().b[87][1]++, this.config.secondaryRegion)}`);
      /* istanbul ignore next */
      cov_15wek86zv2().s[84]++;
      try {
        // Test bucket access with a simple head request
        const headCommand =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[85]++, new client_s3_1.HeadObjectCommand({
          Bucket: bucketName,
          Key: 'index.html' // Assuming this file exists
        }));
        /* istanbul ignore next */
        cov_15wek86zv2().s[86]++;
        try {
          /* istanbul ignore next */
          cov_15wek86zv2().s[87]++;
          yield client.send(headCommand);
        } catch (headError) {
          /* istanbul ignore next */
          cov_15wek86zv2().s[88]++;
          // If index.html doesn't exist, that's OK - bucket is still accessible
          if (headError.name !== 'NotFound') {
            /* istanbul ignore next */
            cov_15wek86zv2().b[88][0]++;
            cov_15wek86zv2().s[89]++;
            throw headError;
          } else
          /* istanbul ignore next */
          {
            cov_15wek86zv2().b[88][1]++;
          }
        }
        const responseTime =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[90]++, Date.now() - startTime);
        // Check replication status if this is the primary region
        let replicationDetails =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[91]++, {});
        /* istanbul ignore next */
        cov_15wek86zv2().s[92]++;
        if (region === 'primary') {
          /* istanbul ignore next */
          cov_15wek86zv2().b[89][0]++;
          cov_15wek86zv2().s[93]++;
          try {
            const replicationCommand =
            /* istanbul ignore next */
            (cov_15wek86zv2().s[94]++, new client_s3_1.GetBucketReplicationCommand({
              Bucket: bucketName
            }));
            const replicationResponse =
            /* istanbul ignore next */
            (cov_15wek86zv2().s[95]++, yield client.send(replicationCommand));
            /* istanbul ignore next */
            cov_15wek86zv2().s[96]++;
            replicationDetails = {
              replicationRules:
              /* istanbul ignore next */
              (cov_15wek86zv2().b[90][0]++,
              /* istanbul ignore next */
              (cov_15wek86zv2().b[92][0]++, (_b =
              /* istanbul ignore next */
              (cov_15wek86zv2().b[94][0]++, (_a = replicationResponse.ReplicationConfiguration) === null) ||
              /* istanbul ignore next */
              (cov_15wek86zv2().b[94][1]++, _a === void 0) ?
              /* istanbul ignore next */
              (cov_15wek86zv2().b[93][0]++, void 0) :
              /* istanbul ignore next */
              (cov_15wek86zv2().b[93][1]++, _a.Rules)) === null) ||
              /* istanbul ignore next */
              (cov_15wek86zv2().b[92][1]++, _b === void 0) ?
              /* istanbul ignore next */
              (cov_15wek86zv2().b[91][0]++, void 0) :
              /* istanbul ignore next */
              (cov_15wek86zv2().b[91][1]++, _b.length)) ||
              /* istanbul ignore next */
              (cov_15wek86zv2().b[90][1]++, 0),
              replicationRole:
              /* istanbul ignore next */
              (cov_15wek86zv2().b[96][0]++, (_c = replicationResponse.ReplicationConfiguration) === null) ||
              /* istanbul ignore next */
              (cov_15wek86zv2().b[96][1]++, _c === void 0) ?
              /* istanbul ignore next */
              (cov_15wek86zv2().b[95][0]++, void 0) :
              /* istanbul ignore next */
              (cov_15wek86zv2().b[95][1]++, _c.Role)
            };
          } catch (replicationError) {
            /* istanbul ignore next */
            cov_15wek86zv2().s[97]++;
            // Replication might not be configured, which is OK
            replicationDetails = {
              replicationConfigured: false
            };
          }
        } else
        /* istanbul ignore next */
        {
          cov_15wek86zv2().b[89][1]++;
        }
        cov_15wek86zv2().s[98]++;
        return {
          service: 'storage',
          region: region === 'primary' ?
          /* istanbul ignore next */
          (cov_15wek86zv2().b[97][0]++, this.config.primaryRegion) :
          /* istanbul ignore next */
          (cov_15wek86zv2().b[97][1]++, this.config.secondaryRegion),
          status: 'healthy',
          responseTime,
          lastChecked: new Date(),
          details: Object.assign({
            bucketName
          }, replicationDetails)
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_15wek86zv2().s[99]++;
        return {
          service: 'storage',
          region: region === 'primary' ?
          /* istanbul ignore next */
          (cov_15wek86zv2().b[98][0]++, this.config.primaryRegion) :
          /* istanbul ignore next */
          (cov_15wek86zv2().b[98][1]++, this.config.secondaryRegion),
          status: 'unhealthy',
          responseTime: Date.now() - startTime,
          lastChecked: new Date(),
          details: {
            bucketName
          },
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_15wek86zv2().b[99][0]++, error.message) :
          /* istanbul ignore next */
          (cov_15wek86zv2().b[99][1]++, 'Unknown error')
        };
      }
    });
  }
  /**
   * Check secrets manager health
   */
  checkSecretsHealth(region) {
    /* istanbul ignore next */
    cov_15wek86zv2().f[13]++;
    cov_15wek86zv2().s[100]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_15wek86zv2().f[14]++;
      const startTime =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[101]++, Date.now());
      const client =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[102]++, region === 'primary' ?
      /* istanbul ignore next */
      (cov_15wek86zv2().b[100][0]++, this.primarySecretsClient) :
      /* istanbul ignore next */
      (cov_15wek86zv2().b[100][1]++, this.secondarySecretsClient));
      /* istanbul ignore next */
      cov_15wek86zv2().s[103]++;
      try {
        // Test access to a known secret
        const command =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[104]++, new client_secrets_manager_1.GetSecretValueCommand({
          SecretId: 'matbakh/database/master'
        }));
        /* istanbul ignore next */
        cov_15wek86zv2().s[105]++;
        yield client.send(command);
        const responseTime =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[106]++, Date.now() - startTime);
        /* istanbul ignore next */
        cov_15wek86zv2().s[107]++;
        return {
          service: 'secrets',
          region: region === 'primary' ?
          /* istanbul ignore next */
          (cov_15wek86zv2().b[101][0]++, this.config.primaryRegion) :
          /* istanbul ignore next */
          (cov_15wek86zv2().b[101][1]++, this.config.secondaryRegion),
          status: 'healthy',
          responseTime,
          lastChecked: new Date(),
          details: {
            secretsAccessible: true
          }
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_15wek86zv2().s[108]++;
        return {
          service: 'secrets',
          region: region === 'primary' ?
          /* istanbul ignore next */
          (cov_15wek86zv2().b[102][0]++, this.config.primaryRegion) :
          /* istanbul ignore next */
          (cov_15wek86zv2().b[102][1]++, this.config.secondaryRegion),
          status: 'unhealthy',
          responseTime: Date.now() - startTime,
          lastChecked: new Date(),
          details: {},
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_15wek86zv2().b[103][0]++, error.message) :
          /* istanbul ignore next */
          (cov_15wek86zv2().b[103][1]++, 'Unknown error')
        };
      }
    });
  }
  /**
   * Get database replication lag in milliseconds
   */
  getRdsReplicationLagMs(params) {
    /* istanbul ignore next */
    cov_15wek86zv2().f[15]++;
    cov_15wek86zv2().s[109]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_15wek86zv2().f[16]++;
      var _a, _b;
      // WICHTIG: den injizierten Client verwenden – NICHT new CloudWatchClient(...)
      const cw =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[110]++, this.cloudWatchClient);
      const now =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[111]++, new Date());
      const start =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[112]++, new Date(now.getTime() - 5 * 60 * 1000)); // letzte 5 Minuten
      const queries =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[113]++, []);
      // 1) Aurora Global (Sekunden)
      /* istanbul ignore next */
      cov_15wek86zv2().s[114]++;
      if (params.globalClusterId) {
        /* istanbul ignore next */
        cov_15wek86zv2().b[104][0]++;
        cov_15wek86zv2().s[115]++;
        queries.push({
          Id: 'gbl',
          ReturnData: true,
          MetricStat: {
            Metric: {
              Namespace: 'AWS/RDS',
              MetricName: 'AuroraGlobalDBRPLag',
              // s
              Dimensions: [{
                Name: 'GlobalDBClusterIdentifier',
                Value: params.globalClusterId
              }]
            },
            Period: 60,
            Stat: 'Average'
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_15wek86zv2().b[104][1]++;
      }
      // 2) Aurora Cluster (Sekunden) – häufig in Tests gemockt
      cov_15wek86zv2().s[116]++;
      if (params.clusterId) {
        /* istanbul ignore next */
        cov_15wek86zv2().b[105][0]++;
        cov_15wek86zv2().s[117]++;
        queries.push({
          Id: 'clu',
          ReturnData: true,
          MetricStat: {
            Metric: {
              Namespace: 'AWS/RDS',
              MetricName: 'AuroraReplicaLagMaximum',
              // s
              Dimensions: [{
                Name: 'DBClusterIdentifier',
                Value: params.clusterId
              }]
            },
            Period: 60,
            Stat: 'Average'
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_15wek86zv2().b[105][1]++;
      }
      // 3) Instance Fallback (Sekunden)
      cov_15wek86zv2().s[118]++;
      if (params.instanceId) {
        /* istanbul ignore next */
        cov_15wek86zv2().b[106][0]++;
        cov_15wek86zv2().s[119]++;
        queries.push({
          Id: 'ins',
          ReturnData: true,
          MetricStat: {
            Metric: {
              Namespace: 'AWS/RDS',
              MetricName: 'ReplicaLag',
              // s
              Dimensions: [{
                Name: 'DBInstanceIdentifier',
                Value: params.instanceId
              }]
            },
            Period: 60,
            Stat: 'Average'
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_15wek86zv2().b[106][1]++;
      }
      cov_15wek86zv2().s[120]++;
      if (queries.length === 0) {
        /* istanbul ignore next */
        cov_15wek86zv2().b[107][0]++;
        cov_15wek86zv2().s[121]++;
        return 0;
      } else
      /* istanbul ignore next */
      {
        cov_15wek86zv2().b[107][1]++;
      }
      cov_15wek86zv2().s[122]++;
      try {
        const resp =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[123]++, yield cw.send(new client_cloudwatch_1.GetMetricDataCommand({
          StartTime: start,
          EndTime: now,
          MetricDataQueries: queries
        })));
        // Erstes valides Ergebnis (Sekunden) nehmen – viele Tests liefern genau einen Wert
        const seconds =
        /* istanbul ignore next */
        (cov_15wek86zv2().s[124]++,
        /* istanbul ignore next */
        (cov_15wek86zv2().b[109][0]++, (_b =
        /* istanbul ignore next */
        (cov_15wek86zv2().b[111][0]++, (_a = resp.MetricDataResults) === null) ||
        /* istanbul ignore next */
        (cov_15wek86zv2().b[111][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_15wek86zv2().b[110][0]++, void 0) :
        /* istanbul ignore next */
        (cov_15wek86zv2().b[110][1]++, _a.map(r => {
          /* istanbul ignore next */
          cov_15wek86zv2().f[17]++;
          var _a;
          /* istanbul ignore next */
          cov_15wek86zv2().s[125]++;
          return /* istanbul ignore next */(cov_15wek86zv2().b[113][0]++, (_a = r.Values) === null) ||
          /* istanbul ignore next */
          (cov_15wek86zv2().b[113][1]++, _a === void 0) ?
          /* istanbul ignore next */
          (cov_15wek86zv2().b[112][0]++, void 0) :
          /* istanbul ignore next */
          (cov_15wek86zv2().b[112][1]++, _a[0]);
        }).find(v => {
          /* istanbul ignore next */
          cov_15wek86zv2().f[18]++;
          cov_15wek86zv2().s[126]++;
          return /* istanbul ignore next */(cov_15wek86zv2().b[114][0]++, typeof v === 'number') &&
          /* istanbul ignore next */
          (cov_15wek86zv2().b[114][1]++, !Number.isNaN(v));
        }))) !== null) &&
        /* istanbul ignore next */
        (cov_15wek86zv2().b[109][1]++, _b !== void 0) ?
        /* istanbul ignore next */
        (cov_15wek86zv2().b[108][0]++, _b) :
        /* istanbul ignore next */
        (cov_15wek86zv2().b[108][1]++, 0));
        // In Millisekunden wandeln – Tests erwarten 30000 / 120000 etc.
        /* istanbul ignore next */
        cov_15wek86zv2().s[127]++;
        return Math.round(seconds * 1000);
      } catch (_c) {
        /* istanbul ignore next */
        cov_15wek86zv2().s[128]++;
        return 0;
      }
    });
  }
  /**
   * Get database replication lag (legacy method for backward compatibility)
   */
  getDatabaseReplicationLag(region) {
    /* istanbul ignore next */
    cov_15wek86zv2().f[19]++;
    cov_15wek86zv2().s[129]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_15wek86zv2().f[20]++;
      cov_15wek86zv2().s[130]++;
      if (region === 'primary') {
        /* istanbul ignore next */
        cov_15wek86zv2().b[115][0]++;
        cov_15wek86zv2().s[131]++;
        return 0; // Primary has no replication lag
      } else
      /* istanbul ignore next */
      {
        cov_15wek86zv2().b[115][1]++;
      }
      cov_15wek86zv2().s[132]++;
      return this.getRdsReplicationLagMs({
        region: 'secondary',
        globalClusterId: this.config.globalClusterIdentifier,
        clusterId: this.config.secondaryClusterIdentifier,
        instanceId: `${this.config.secondaryClusterIdentifier}-instance-1`
      });
    });
  }
  /**
   * Extract result from Promise.allSettled
   */
  extractResult(result, service, region) {
    /* istanbul ignore next */
    cov_15wek86zv2().f[21]++;
    cov_15wek86zv2().s[133]++;
    if (result.status === 'fulfilled') {
      /* istanbul ignore next */
      cov_15wek86zv2().b[116][0]++;
      cov_15wek86zv2().s[134]++;
      return result.value;
    } else {
      /* istanbul ignore next */
      cov_15wek86zv2().b[116][1]++;
      cov_15wek86zv2().s[135]++;
      return {
        service,
        region,
        status: 'unhealthy',
        lastChecked: new Date(),
        details: {},
        error: result.reason instanceof Error ?
        /* istanbul ignore next */
        (cov_15wek86zv2().b[117][0]++, result.reason.message) :
        /* istanbul ignore next */
        (cov_15wek86zv2().b[117][1]++, 'Unknown error')
      };
    }
  }
  /**
   * Determine overall health from individual service results
   */
  determineOverallHealth(services) {
    /* istanbul ignore next */
    cov_15wek86zv2().f[22]++;
    const unhealthyCount =
    /* istanbul ignore next */
    (cov_15wek86zv2().s[136]++, services.filter(s => {
      /* istanbul ignore next */
      cov_15wek86zv2().f[23]++;
      cov_15wek86zv2().s[137]++;
      return s.status === 'unhealthy';
    }).length);
    const degradedCount =
    /* istanbul ignore next */
    (cov_15wek86zv2().s[138]++, services.filter(s => {
      /* istanbul ignore next */
      cov_15wek86zv2().f[24]++;
      cov_15wek86zv2().s[139]++;
      return s.status === 'degraded';
    }).length);
    /* istanbul ignore next */
    cov_15wek86zv2().s[140]++;
    if (unhealthyCount > 0) {
      /* istanbul ignore next */
      cov_15wek86zv2().b[118][0]++;
      cov_15wek86zv2().s[141]++;
      return unhealthyCount > services.length / 2 ?
      /* istanbul ignore next */
      (cov_15wek86zv2().b[119][0]++, 'unhealthy') :
      /* istanbul ignore next */
      (cov_15wek86zv2().b[119][1]++, 'degraded');
    } else
    /* istanbul ignore next */
    {
      cov_15wek86zv2().b[118][1]++;
    }
    cov_15wek86zv2().s[142]++;
    if (degradedCount > 0) {
      /* istanbul ignore next */
      cov_15wek86zv2().b[120][0]++;
      cov_15wek86zv2().s[143]++;
      return 'degraded';
    } else
    /* istanbul ignore next */
    {
      cov_15wek86zv2().b[120][1]++;
    }
    cov_15wek86zv2().s[144]++;
    return 'healthy';
  }
  /**
   * Create error region status
   */
  createErrorRegionStatus(region, error) {
    /* istanbul ignore next */
    cov_15wek86zv2().f[25]++;
    const regionName =
    /* istanbul ignore next */
    (cov_15wek86zv2().s[145]++, region === 'primary' ?
    /* istanbul ignore next */
    (cov_15wek86zv2().b[121][0]++, this.config.primaryRegion) :
    /* istanbul ignore next */
    (cov_15wek86zv2().b[121][1]++, this.config.secondaryRegion));
    const errorMessage =
    /* istanbul ignore next */
    (cov_15wek86zv2().s[146]++, error instanceof Error ?
    /* istanbul ignore next */
    (cov_15wek86zv2().b[122][0]++, error.message) :
    /* istanbul ignore next */
    (cov_15wek86zv2().b[122][1]++, 'Unknown error'));
    const errorResult =
    /* istanbul ignore next */
    (cov_15wek86zv2().s[147]++, {
      service: 'unknown',
      region: regionName,
      status: 'unhealthy',
      lastChecked: new Date(),
      details: {},
      error: errorMessage
    });
    /* istanbul ignore next */
    cov_15wek86zv2().s[148]++;
    return {
      region: regionName,
      status: 'unhealthy',
      services: {
        api: errorResult,
        database: errorResult,
        cache: errorResult,
        storage: errorResult,
        secrets: errorResult
      }
    };
  }
  /**
   * Get health check summary for monitoring
   */
  getHealthSummary() {
    /* istanbul ignore next */
    cov_15wek86zv2().f[26]++;
    cov_15wek86zv2().s[149]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_15wek86zv2().f[27]++;
      const healthStatus =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[150]++, yield this.checkAllServices());
      const regionStatus =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[151]++, {
        [this.config.primaryRegion]: healthStatus.regions.primary.status,
        [this.config.secondaryRegion]: healthStatus.regions.secondary.status
      });
      const serviceStatus =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[152]++, healthStatus.services.reduce((acc, service) => {
        /* istanbul ignore next */
        cov_15wek86zv2().f[28]++;
        cov_15wek86zv2().s[153]++;
        acc[`${service.service}-${service.region}`] = service.status;
        /* istanbul ignore next */
        cov_15wek86zv2().s[154]++;
        return acc;
      }, {}));
      // Calculate average response time from all services
      const times =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[155]++, healthStatus.services.map(s => {
        /* istanbul ignore next */
        cov_15wek86zv2().f[29]++;
        var _a;
        /* istanbul ignore next */
        cov_15wek86zv2().s[156]++;
        return /* istanbul ignore next */(cov_15wek86zv2().b[124][0]++, (_a = s.responseTime) !== null) &&
        /* istanbul ignore next */
        (cov_15wek86zv2().b[124][1]++, _a !== void 0) ?
        /* istanbul ignore next */
        (cov_15wek86zv2().b[123][0]++, _a) :
        /* istanbul ignore next */
        (cov_15wek86zv2().b[123][1]++, 0);
      }).filter(n => {
        /* istanbul ignore next */
        cov_15wek86zv2().f[30]++;
        cov_15wek86zv2().s[157]++;
        return /* istanbul ignore next */(cov_15wek86zv2().b[125][0]++, typeof n === 'number') &&
        /* istanbul ignore next */
        (cov_15wek86zv2().b[125][1]++, n > 0);
      }));
      const averageResponseTime =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[158]++, times.length ?
      /* istanbul ignore next */
      (cov_15wek86zv2().b[126][0]++, Math.round(times.reduce((a, b) => {
        /* istanbul ignore next */
        cov_15wek86zv2().f[31]++;
        cov_15wek86zv2().s[159]++;
        return a + b;
      }, 0) / times.length)) :
      /* istanbul ignore next */
      (cov_15wek86zv2().b[126][1]++, 0));
      const successRate =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[160]++, healthStatus.services.length > 0 ?
      /* istanbul ignore next */
      (cov_15wek86zv2().b[127][0]++, healthStatus.services.filter(s => {
        /* istanbul ignore next */
        cov_15wek86zv2().f[32]++;
        cov_15wek86zv2().s[161]++;
        return s.status === 'healthy';
      }).length / healthStatus.services.length * 100) :
      /* istanbul ignore next */
      (cov_15wek86zv2().b[127][1]++, 0));
      // Calculate average replication lag from all database services
      const dbLags =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[162]++, healthStatus.services.filter(s => {
        /* istanbul ignore next */
        cov_15wek86zv2().f[33]++;
        cov_15wek86zv2().s[163]++;
        return s.service === 'database';
      }).map(s => {
        /* istanbul ignore next */
        cov_15wek86zv2().f[34]++;
        var _a, _b;
        /* istanbul ignore next */
        cov_15wek86zv2().s[164]++;
        return /* istanbul ignore next */(cov_15wek86zv2().b[129][0]++, (_b =
        /* istanbul ignore next */
        (cov_15wek86zv2().b[131][0]++, (_a = s.details) === null) ||
        /* istanbul ignore next */
        (cov_15wek86zv2().b[131][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_15wek86zv2().b[130][0]++, void 0) :
        /* istanbul ignore next */
        (cov_15wek86zv2().b[130][1]++, _a.replicationLag)) !== null) &&
        /* istanbul ignore next */
        (cov_15wek86zv2().b[129][1]++, _b !== void 0) ?
        /* istanbul ignore next */
        (cov_15wek86zv2().b[128][0]++, _b) :
        /* istanbul ignore next */
        (cov_15wek86zv2().b[128][1]++, 0);
      }).filter(n => {
        /* istanbul ignore next */
        cov_15wek86zv2().f[35]++;
        cov_15wek86zv2().s[165]++;
        return /* istanbul ignore next */(cov_15wek86zv2().b[132][0]++, typeof n === 'number') &&
        /* istanbul ignore next */
        (cov_15wek86zv2().b[132][1]++, n > 0);
      }));
      const replicationLag =
      /* istanbul ignore next */
      (cov_15wek86zv2().s[166]++, dbLags.length ?
      /* istanbul ignore next */
      (cov_15wek86zv2().b[133][0]++, Math.round(dbLags.reduce((a, b) => {
        /* istanbul ignore next */
        cov_15wek86zv2().f[36]++;
        cov_15wek86zv2().s[167]++;
        return a + b;
      }, 0) / dbLags.length)) :
      /* istanbul ignore next */
      (cov_15wek86zv2().b[133][1]++, 0));
      /* istanbul ignore next */
      cov_15wek86zv2().s[168]++;
      return {
        timestamp: new Date(),
        overallStatus: healthStatus.overall,
        regionStatus,
        serviceStatus,
        metrics: {
          averageResponseTime,
          successRate,
          replicationLag
        }
      };
    });
  }
}
/* istanbul ignore next */
cov_15wek86zv2().s[169]++;
exports.HealthChecker = HealthChecker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
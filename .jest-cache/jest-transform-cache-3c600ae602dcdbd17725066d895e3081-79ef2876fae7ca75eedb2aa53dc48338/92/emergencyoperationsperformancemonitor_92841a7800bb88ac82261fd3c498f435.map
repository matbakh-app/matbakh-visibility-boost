{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/emergency-operations-performance-monitor.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/emergency-operations-performance-monitor.ts"],"sourcesContent":["/**\n * Emergency Operations Performance Monitor\n *\n * Tracks and validates that emergency operations complete within 5 seconds\n * with a success rate > 95% as required by the Bedrock Activation specification.\n *\n * Key Requirements:\n * - Emergency operations must complete within 5 seconds\n * - Success rate must be > 95% over a rolling window\n * - Real-time monitoring and alerting\n * - Integration with existing monitoring systems\n */\n\nimport { AuditTrailSystem } from \"./audit-trail-system\";\nimport { CircuitBreaker } from \"./circuit-breaker\";\n\n// Performance Metrics for Emergency and Critical Operations\nexport interface EmergencyOperationMetrics {\n  operationId: string;\n  timestamp: Date;\n  latencyMs: number;\n  success: boolean;\n  withinSLA: boolean; // < 5000ms for emergency, < 10000ms for critical\n  operationType: string;\n  priority: \"emergency\" | \"critical\"; // Track operation priority\n  correlationId?: string;\n  error?: string;\n}\n\n// Performance Statistics\nexport interface EmergencyPerformanceStats {\n  totalOperations: number;\n  successfulOperations: number;\n  operationsWithinSLA: number;\n  successRate: number; // percentage\n  slaComplianceRate: number; // percentage\n  averageLatencyMs: number;\n  p95LatencyMs: number;\n  p99LatencyMs: number;\n  lastUpdated: Date;\n  windowStartTime: Date;\n  windowEndTime: Date;\n  // Separate stats for emergency vs critical operations\n  emergencyOperations: {\n    total: number;\n    successful: number;\n    withinSLA: number;\n    averageLatencyMs: number;\n  };\n  criticalOperations: {\n    total: number;\n    successful: number;\n    withinSLA: number;\n    averageLatencyMs: number;\n  };\n}\n\n// Alert Configuration\nexport interface EmergencyPerformanceAlert {\n  type:\n    | \"SLA_BREACH\"\n    | \"SUCCESS_RATE_LOW\"\n    | \"LATENCY_HIGH\"\n    | \"CIRCUIT_BREAKER_OPEN\";\n  severity: \"WARNING\" | \"CRITICAL\";\n  message: string;\n  timestamp: Date;\n  metrics: EmergencyPerformanceStats;\n  threshold: number;\n  actualValue: number;\n}\n\n// Configuration for Performance Monitor\nexport interface EmergencyPerformanceConfig {\n  emergencySlaThresholdMs: number; // 5000ms for emergency operations\n  criticalSlaThresholdMs: number; // 10000ms for critical operations\n  successRateThreshold: number; // 95% minimum success rate\n  rollingWindowMinutes: number; // Time window for calculations\n  alertingEnabled: boolean;\n  circuitBreakerEnabled: boolean;\n  maxMetricsRetention: number; // Maximum metrics to keep in memory\n}\n\n/**\n * Emergency Operations Performance Monitor\n *\n * Provides real-time monitoring and validation of emergency operation performance\n * with automatic alerting when SLA thresholds are breached.\n */\nexport class EmergencyOperationsPerformanceMonitor {\n  private metrics: EmergencyOperationMetrics[] = [];\n  private alerts: EmergencyPerformanceAlert[] = [];\n  private auditTrail: AuditTrailSystem;\n  private circuitBreaker?: CircuitBreaker;\n  private config: EmergencyPerformanceConfig;\n\n  constructor(\n    config: Partial<EmergencyPerformanceConfig> = {},\n    auditTrail?: AuditTrailSystem,\n    circuitBreaker?: CircuitBreaker\n  ) {\n    this.config = {\n      emergencySlaThresholdMs: 5000, // 5 seconds for emergency operations\n      criticalSlaThresholdMs: 10000, // 10 seconds for critical operations\n      successRateThreshold: 95, // 95% minimum success rate\n      rollingWindowMinutes: 60, // 1 hour rolling window\n      alertingEnabled: true,\n      circuitBreakerEnabled: true,\n      maxMetricsRetention: 1000, // Keep last 1000 metrics\n      ...config,\n    };\n\n    this.auditTrail = auditTrail || new AuditTrailSystem();\n    this.circuitBreaker = circuitBreaker;\n  }\n\n  /**\n   * Record an emergency operation performance metric\n   */\n  async recordEmergencyOperation(\n    operationId: string,\n    latencyMs: number,\n    success: boolean,\n    operationType: string = \"emergency\",\n    correlationId?: string,\n    error?: string,\n    priority: \"emergency\" | \"critical\" = \"emergency\"\n  ): Promise<void> {\n    // Determine SLA threshold based on priority\n    const slaThreshold =\n      priority === \"emergency\"\n        ? this.config.emergencySlaThresholdMs\n        : this.config.criticalSlaThresholdMs;\n\n    const metric: EmergencyOperationMetrics = {\n      operationId,\n      timestamp: new Date(),\n      latencyMs,\n      success,\n      withinSLA: latencyMs < slaThreshold,\n      operationType,\n      priority,\n      correlationId,\n      error,\n    };\n\n    // Add to metrics collection\n    this.metrics.push(metric);\n\n    // Maintain metrics retention limit\n    if (this.metrics.length > this.config.maxMetricsRetention) {\n      this.metrics = this.metrics.slice(-this.config.maxMetricsRetention);\n    }\n\n    // Log to audit trail\n    await this.auditTrail.logEvent({\n      eventType: \"emergency_operation_performance\",\n      userId: \"system\",\n      action: \"record_metric\",\n      resource: `emergency_operation:${operationId}`,\n      metadata: {\n        latencyMs,\n        success,\n        withinSLA: metric.withinSLA,\n        operationType,\n        correlationId,\n      },\n      timestamp: new Date(),\n      ipAddress: \"127.0.0.1\",\n      userAgent: \"EmergencyOperationsPerformanceMonitor\",\n    });\n\n    // Check for SLA breaches and trigger alerts\n    await this.checkPerformanceThresholds();\n  }\n\n  /**\n   * Get current performance statistics for the rolling window\n   */\n  getCurrentPerformanceStats(): EmergencyPerformanceStats {\n    const windowStart = new Date(\n      Date.now() - this.config.rollingWindowMinutes * 60 * 1000\n    );\n    const windowMetrics = this.metrics.filter(\n      (m) => m.timestamp >= windowStart\n    );\n\n    if (windowMetrics.length === 0) {\n      return {\n        totalOperations: 0,\n        successfulOperations: 0,\n        operationsWithinSLA: 0,\n        successRate: 100,\n        slaComplianceRate: 100,\n        averageLatencyMs: 0,\n        p95LatencyMs: 0,\n        p99LatencyMs: 0,\n        lastUpdated: new Date(),\n        windowStartTime: windowStart,\n        windowEndTime: new Date(),\n      };\n    }\n\n    const successfulOps = windowMetrics.filter((m) => m.success).length;\n    const slaCompliantOps = windowMetrics.filter((m) => m.withinSLA).length;\n    const latencies = windowMetrics\n      .map((m) => m.latencyMs)\n      .sort((a, b) => a - b);\n\n    // Separate emergency and critical operations\n    const emergencyOps = windowMetrics.filter(\n      (m) => m.priority === \"emergency\"\n    );\n    const criticalOps = windowMetrics.filter((m) => m.priority === \"critical\");\n\n    const stats: EmergencyPerformanceStats = {\n      totalOperations: windowMetrics.length,\n      successfulOperations: successfulOps,\n      operationsWithinSLA: slaCompliantOps,\n      successRate: (successfulOps / windowMetrics.length) * 100,\n      slaComplianceRate: (slaCompliantOps / windowMetrics.length) * 100,\n      averageLatencyMs:\n        latencies.reduce((sum, lat) => sum + lat, 0) / latencies.length,\n      p95LatencyMs: this.calculatePercentile(latencies, 95),\n      p99LatencyMs: this.calculatePercentile(latencies, 99),\n      lastUpdated: new Date(),\n      emergencyOperations: {\n        total: emergencyOps.length,\n        successful: emergencyOps.filter((m) => m.success).length,\n        withinSLA: emergencyOps.filter((m) => m.withinSLA).length,\n        averageLatencyMs:\n          emergencyOps.length > 0\n            ? emergencyOps.reduce((sum, m) => sum + m.latencyMs, 0) /\n              emergencyOps.length\n            : 0,\n      },\n      criticalOperations: {\n        total: criticalOps.length,\n        successful: criticalOps.filter((m) => m.success).length,\n        withinSLA: criticalOps.filter((m) => m.withinSLA).length,\n        averageLatencyMs:\n          criticalOps.length > 0\n            ? criticalOps.reduce((sum, m) => sum + m.latencyMs, 0) /\n              criticalOps.length\n            : 0,\n      },\n      windowStartTime: windowStart,\n      windowEndTime: new Date(),\n    };\n\n    return stats;\n  }\n\n  /**\n   * Check if current performance meets SLA requirements\n   */\n  isPerformanceWithinSLA(): boolean {\n    const stats = this.getCurrentPerformanceStats();\n\n    // Must have at least some operations to validate\n    if (stats.totalOperations === 0) {\n      return true; // No operations = no violations\n    }\n\n    // Check both success rate and SLA compliance rate\n    return (\n      stats.successRate >= this.config.successRateThreshold &&\n      stats.slaComplianceRate >= this.config.successRateThreshold\n    );\n  }\n\n  /**\n   * Check if critical operations specifically meet SLA requirements (>95% within 10s)\n   */\n  isCriticalOperationsPerformanceWithinSLA(): boolean {\n    const stats = this.getCurrentPerformanceStats();\n\n    // Must have at least some critical operations to validate\n    if (stats.criticalOperations.total === 0) {\n      return true; // No critical operations = no violations\n    }\n\n    const criticalSuccessRate =\n      (stats.criticalOperations.successful / stats.criticalOperations.total) *\n      100;\n    const criticalSlaComplianceRate =\n      (stats.criticalOperations.withinSLA / stats.criticalOperations.total) *\n      100;\n\n    // Check both success rate and SLA compliance rate for critical operations\n    return (\n      criticalSuccessRate >= this.config.successRateThreshold &&\n      criticalSlaComplianceRate >= this.config.successRateThreshold\n    );\n  }\n\n  /**\n   * Check if emergency operations specifically meet SLA requirements (>95% within 5s)\n   */\n  isEmergencyOperationsPerformanceWithinSLA(): boolean {\n    const stats = this.getCurrentPerformanceStats();\n\n    // Must have at least some emergency operations to validate\n    if (stats.emergencyOperations.total === 0) {\n      return true; // No emergency operations = no violations\n    }\n\n    const emergencySuccessRate =\n      (stats.emergencyOperations.successful / stats.emergencyOperations.total) *\n      100;\n    const emergencySlaComplianceRate =\n      (stats.emergencyOperations.withinSLA / stats.emergencyOperations.total) *\n      100;\n\n    // Check both success rate and SLA compliance rate for emergency operations\n    return (\n      emergencySuccessRate >= this.config.successRateThreshold &&\n      emergencySlaComplianceRate >= this.config.successRateThreshold\n    );\n  }\n\n  /**\n   * Get recent alerts\n   */\n  getRecentAlerts(limitHours: number = 24): EmergencyPerformanceAlert[] {\n    const cutoff = new Date(Date.now() - limitHours * 60 * 60 * 1000);\n    return this.alerts.filter((alert) => alert.timestamp >= cutoff);\n  }\n\n  /**\n   * Get detailed performance report\n   */\n  getPerformanceReport(): {\n    stats: EmergencyPerformanceStats;\n    isWithinSLA: boolean;\n    recentAlerts: EmergencyPerformanceAlert[];\n    recommendations: string[];\n  } {\n    const stats = this.getCurrentPerformanceStats();\n    const isWithinSLA = this.isPerformanceWithinSLA();\n    const recentAlerts = this.getRecentAlerts();\n\n    const recommendations: string[] = [];\n\n    if (stats.slaComplianceRate < this.config.successRateThreshold) {\n      recommendations.push(\n        `SLA compliance rate (${stats.slaComplianceRate.toFixed(\n          1\n        )}%) is below threshold (${\n          this.config.successRateThreshold\n        }%). Consider optimizing emergency operation processing.`\n      );\n    }\n\n    if (stats.successRate < this.config.successRateThreshold) {\n      recommendations.push(\n        `Success rate (${stats.successRate.toFixed(1)}%) is below threshold (${\n          this.config.successRateThreshold\n        }%). Investigate error patterns and improve error handling.`\n      );\n    }\n\n    if (stats.p95LatencyMs > this.config.slaThresholdMs * 0.8) {\n      recommendations.push(\n        `P95 latency (${stats.p95LatencyMs}ms) is approaching SLA threshold (${this.config.slaThresholdMs}ms). Consider performance optimizations.`\n      );\n    }\n\n    if (stats.totalOperations < 10) {\n      recommendations.push(\n        \"Low operation volume may not provide statistically significant performance metrics. Consider longer monitoring periods.\"\n      );\n    }\n\n    return {\n      stats,\n      isWithinSLA,\n      recentAlerts,\n      recommendations,\n    };\n  }\n\n  /**\n   * Reset performance metrics (for testing or maintenance)\n   */\n  resetMetrics(): void {\n    this.metrics = [];\n    this.alerts = [];\n  }\n\n  /**\n   * Export performance data for external monitoring systems\n   */\n  exportMetrics(): {\n    metrics: EmergencyOperationMetrics[];\n    stats: EmergencyPerformanceStats;\n    config: EmergencyPerformanceConfig;\n  } {\n    return {\n      metrics: [...this.metrics],\n      stats: this.getCurrentPerformanceStats(),\n      config: { ...this.config },\n    };\n  }\n\n  /**\n   * Check performance thresholds and trigger alerts if necessary\n   */\n  private async checkPerformanceThresholds(): Promise<void> {\n    if (!this.config.alertingEnabled) {\n      return;\n    }\n\n    const stats = this.getCurrentPerformanceStats();\n\n    // Check SLA compliance rate\n    if (stats.slaComplianceRate < this.config.successRateThreshold) {\n      await this.triggerAlert({\n        type: \"SLA_BREACH\",\n        severity: \"CRITICAL\",\n        message: `Emergency operations SLA compliance rate (${stats.slaComplianceRate.toFixed(\n          1\n        )}%) is below threshold (${this.config.successRateThreshold}%)`,\n        timestamp: new Date(),\n        metrics: stats,\n        threshold: this.config.successRateThreshold,\n        actualValue: stats.slaComplianceRate,\n      });\n    }\n\n    // Check success rate\n    if (stats.successRate < this.config.successRateThreshold) {\n      await this.triggerAlert({\n        type: \"SUCCESS_RATE_LOW\",\n        severity: \"CRITICAL\",\n        message: `Emergency operations success rate (${stats.successRate.toFixed(\n          1\n        )}%) is below threshold (${this.config.successRateThreshold}%)`,\n        timestamp: new Date(),\n        metrics: stats,\n        threshold: this.config.successRateThreshold,\n        actualValue: stats.successRate,\n      });\n    }\n\n    // Check P95 latency\n    if (stats.p95LatencyMs > this.config.slaThresholdMs) {\n      await this.triggerAlert({\n        type: \"LATENCY_HIGH\",\n        severity: \"WARNING\",\n        message: `Emergency operations P95 latency (${stats.p95LatencyMs}ms) exceeds SLA threshold (${this.config.slaThresholdMs}ms)`,\n        timestamp: new Date(),\n        metrics: stats,\n        threshold: this.config.slaThresholdMs,\n        actualValue: stats.p95LatencyMs,\n      });\n    }\n\n    // Check circuit breaker state\n    if (this.circuitBreaker && this.config.circuitBreakerEnabled) {\n      const cbState = this.circuitBreaker.getState();\n      if (cbState === \"open\") {\n        await this.triggerAlert({\n          type: \"CIRCUIT_BREAKER_OPEN\",\n          severity: \"CRITICAL\",\n          message:\n            \"Emergency operations circuit breaker is open - operations are being blocked\",\n          timestamp: new Date(),\n          metrics: stats,\n          threshold: 0,\n          actualValue: 1,\n        });\n      }\n    }\n  }\n\n  /**\n   * Trigger a performance alert\n   */\n  private async triggerAlert(alert: EmergencyPerformanceAlert): Promise<void> {\n    // Add to alerts collection\n    this.alerts.push(alert);\n\n    // Keep only recent alerts (last 24 hours)\n    const cutoff = new Date(Date.now() - 24 * 60 * 60 * 1000);\n    this.alerts = this.alerts.filter((a) => a.timestamp >= cutoff);\n\n    // Log alert to audit trail\n    await this.auditTrail.logEvent({\n      eventType: \"emergency_performance_alert\",\n      userId: \"system\",\n      action: \"trigger_alert\",\n      resource: `alert:${alert.type}`,\n      metadata: {\n        alertType: alert.type,\n        severity: alert.severity,\n        message: alert.message,\n        threshold: alert.threshold,\n        actualValue: alert.actualValue,\n        stats: alert.metrics,\n      },\n      timestamp: new Date(),\n      ipAddress: \"127.0.0.1\",\n      userAgent: \"EmergencyOperationsPerformanceMonitor\",\n    });\n\n    // Log to console for immediate visibility\n    console.warn(\n      `🚨 Emergency Operations Performance Alert [${alert.severity}]: ${alert.message}`\n    );\n  }\n\n  /**\n   * Calculate percentile from sorted array\n   */\n  private calculatePercentile(\n    sortedArray: number[],\n    percentile: number\n  ): number {\n    if (sortedArray.length === 0) return 0;\n\n    const index = (percentile / 100) * (sortedArray.length - 1);\n    const lower = Math.floor(index);\n    const upper = Math.ceil(index);\n\n    if (lower === upper) {\n      return sortedArray[lower];\n    }\n\n    const weight = index - lower;\n    return sortedArray[lower] * (1 - weight) + sortedArray[upper] * weight;\n  }\n}\n\n/**\n * Singleton instance for global emergency operations monitoring\n */\nexport const emergencyOperationsMonitor =\n  new EmergencyOperationsPerformanceMonitor();\n"],"version":3}
3cfa94425513fd8ac7dc7cf1784dffdb
"use strict";
/**
 * Tests for Hybrid Assistant Orchestrator
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// Mock the AiFeatureFlags to avoid dependency issues
jest.mock("../ai-feature-flags", () => ({
    AiFeatureFlags: jest.fn().mockImplementation(() => ({
        isHybridAssistantModeEnabled: () => true,
        isBedrockAdvisoryModeEnabled: () => true,
        isKiroPrimaryControlEnabled: () => true,
    })),
}));
// Use require for Jest compatibility with CommonJS
const { HybridAssistantOrchestrator, } = require("../hybrid-assistant-orchestrator");
describe("HybridAssistantOrchestrator", () => {
    let orchestrator;
    beforeEach(() => {
        orchestrator = new HybridAssistantOrchestrator();
    });
    describe("Hybrid Assistant Mode Status", () => {
        it("should report hybrid mode as active", () => {
            const status = orchestrator.getHybridAssistantStatus();
            expect(status.hybridModeActive).toBe(true);
            expect(status.bedrockAdvisoryActive).toBe(true);
            expect(status.kiroPrimaryControl).toBe(true);
            expect(status.capabilities).toContain("üéØ User beh√§lt volle Kontrolle");
        });
    });
    describe("Task Processing Workflow", () => {
        it("should process a simple task request", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                id: "test-task-1",
                description: "Implement TypeScript exactOptionalPropertyTypes compliance",
                priority: "medium",
                requester: "user",
            };
            const result = yield orchestrator.processTaskRequest(request);
            expect(result.taskId).toBe("test-task-1");
            expect(result.status).toBe("completed");
            expect(result.bedrockAdvice).toBeDefined();
            expect(result.kiroImplementation).toBeDefined();
            expect(result.finalResult).toBeDefined();
            expect(result.qualityScore).toBeGreaterThan(0);
        }));
        it("should require user approval for critical tasks", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const criticalRequest = {
                id: "critical-task-1",
                description: "Delete production database",
                priority: "critical",
                requester: "user",
            };
            const result = yield orchestrator.processTaskRequest(criticalRequest);
            expect(result.status).toBe("reviewing");
            expect(result.userApprovalRequired).toBe(true);
        }));
        it("should require user approval for dangerous operations", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const dangerousRequest = {
                id: "dangerous-task-1",
                description: "Remove all user data",
                priority: "medium",
                requester: "user",
            };
            const result = yield orchestrator.processTaskRequest(dangerousRequest);
            expect(result.status).toBe("reviewing");
            expect(result.userApprovalRequired).toBe(true);
        }));
    });
    describe("User Approval Process", () => {
        it("should handle user approval correctly", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                id: "approval-test",
                description: "Delete old files",
                priority: "high",
                requester: "user",
            };
            // Erstelle Workflow der Approval ben√∂tigt
            const initialResult = yield orchestrator.processTaskRequest(request);
            expect(initialResult.userApprovalRequired).toBe(true);
            // Simuliere User Approval
            const workflowId = `workflow-${request.id}-${Date.now()}`;
            // Note: In real implementation, we'd get the actual workflow ID
            // F√ºr den Test nehmen wir an, dass der Workflow existiert
            // In der echten Implementierung w√ºrde der Workflow ID zur√ºckgegeben
        }));
        it("should handle user rejection correctly", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Test f√ºr User Rejection w√ºrde hier implementiert
            // F√ºr jetzt als Platzhalter
            expect(true).toBe(true);
        }));
    });
    describe("Bedrock Advisory Integration", () => {
        it("should provide bedrock advice for tasks", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                id: "advice-test",
                description: "Optimize database queries",
                priority: "medium",
                requester: "user",
            };
            const result = yield orchestrator.processTaskRequest(request);
            expect(result.bedrockAdvice).toBeDefined();
            expect(result.bedrockAdvice.analysis).toContain("Machbar mit moderatem Aufwand");
            expect(result.bedrockAdvice.recommendations).toHaveLength(3);
            expect(result.bedrockAdvice.risks).toHaveLength(2);
            expect(result.bedrockAdvice.qualityChecks).toHaveLength(4);
        }));
    });
    describe("Kiro Implementation Planning", () => {
        it("should create implementation plan", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                id: "implementation-test",
                description: "Add new feature",
                priority: "low",
                requester: "user",
            };
            const result = yield orchestrator.processTaskRequest(request);
            expect(result.kiroImplementation).toBeDefined();
            expect(result.kiroImplementation.steps.length).toBeGreaterThan(5);
            expect(result.kiroImplementation.testingStrategy).toContain("Unit Tests");
            expect(result.kiroImplementation.rollbackPlan).toContain("Git revert");
        }));
    });
    describe("Quality Assurance", () => {
        it("should perform quality checks", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                id: "quality-test",
                description: "Refactor legacy code",
                priority: "medium",
                requester: "user",
            };
            const result = yield orchestrator.processTaskRequest(request);
            expect(result.qualityScore).toBeDefined();
            expect(result.qualityScore).toBeGreaterThanOrEqual(0);
            expect(result.qualityScore).toBeLessThanOrEqual(100);
        }));
    });
    describe("Workflow Management", () => {
        it("should track active workflows", () => {
            const initialStatus = orchestrator.getHybridAssistantStatus();
            expect(initialStatus.activeWorkflows).toBe(0);
            // Nach dem Ausf√ºhren von Tasks w√ºrde sich die Anzahl √§ndern
            // F√ºr jetzt als Platzhalter
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
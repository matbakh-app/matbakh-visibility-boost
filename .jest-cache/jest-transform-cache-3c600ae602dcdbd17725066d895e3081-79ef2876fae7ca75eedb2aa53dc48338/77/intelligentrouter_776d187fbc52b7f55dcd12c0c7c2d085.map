{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/intelligent-router.ts","mappings":";AAAA;;;;;;GAMG;;;AAEH,yDAAoD;AACpD,6DAAwD;AACxD,uDAAmD;AAQnD,yFAG4C;AAC5C,uFAAiF;AA+CjF,wCAAwC;AACxC,2CAAyC;AAAhC,uGAAA,SAAS,OAAA;AAElB;;GAEG;AACH,MAAa,iBAAiB;IACpB,mBAAmB,CAAsB;IACzC,SAAS,GAAqB,IAAI,CAAC;IACnC,YAAY,CAAiB;IAC7B,cAAc,CAAiB;IAC/B,mBAAmB,CAAgC;IACnD,UAAU,CAAmB;IAC7B,iBAAiB,GAAwC,IAAI,CAAC;IAC9D,aAAa,GAA2C,IAAI,CAAC;IAErE,wBAAwB;IAChB,YAAY,CAAgB;IAC5B,iBAAiB,CAA8B;IAC/C,cAAc,CAAoB;IAClC,mBAAmB,CAAkB;IAE7C,kCAAkC;IACjB,mBAAmB,GAAkB;QACpD;YACE,aAAa,EAAE,WAAW;YAC1B,QAAQ,EAAE,UAAU;YACpB,kBAAkB,EAAE,IAAI,EAAE,OAAO;YACjC,YAAY,EAAE,QAAQ;YACtB,aAAa,EAAE,IAAI,EAAE,4BAA4B;YACjD,mBAAmB,EAAE,IAAI;SAC1B;QACD;YACE,aAAa,EAAE,gBAAgB;YAC/B,QAAQ,EAAE,UAAU;YACpB,kBAAkB,EAAE,KAAK,EAAE,QAAQ;YACnC,YAAY,EAAE,QAAQ;YACtB,aAAa,EAAE,KAAK;YACpB,mBAAmB,EAAE,IAAI;SAC1B;QACD;YACE,aAAa,EAAE,cAAc;YAC7B,QAAQ,EAAE,MAAM;YAChB,kBAAkB,EAAE,KAAK,EAAE,QAAQ;YACnC,YAAY,EAAE,QAAQ;YACtB,aAAa,EAAE,KAAK;YACpB,mBAAmB,EAAE,IAAI;SAC1B;QACD;YACE,aAAa,EAAE,gBAAgB;YAC/B,QAAQ,EAAE,MAAM;YAChB,kBAAkB,EAAE,KAAK,EAAE,QAAQ;YACnC,YAAY,EAAE,QAAQ;YACtB,aAAa,EAAE,KAAK;YACpB,mBAAmB,EAAE,IAAI;SAC1B;QACD;YACE,aAAa,EAAE,UAAU;YACzB,QAAQ,EAAE,QAAQ;YAClB,kBAAkB,EAAE,KAAK,EAAE,QAAQ;YACnC,YAAY,EAAE,KAAK;YACnB,aAAa,EAAE,QAAQ;YACvB,mBAAmB,EAAE,KAAK;SAC3B;KACF,CAAC;IAEF,YAAY,mBAAwC,EAAE,SAAqB;QACzE,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;QAC/C,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,IAAI,CAAC;QACnC,IAAI,CAAC,YAAY,GAAG,IAAI,iCAAc,EAAE,CAAC;QACzC,IAAI,CAAC,cAAc,GAAG,IAAI,gCAAc,CAAC;YACvC,gBAAgB,EAAE,CAAC;YACnB,eAAe,EAAE,KAAK;YACtB,gBAAgB,EAAE,CAAC;SACpB,CAAC,CAAC;QACH,IAAI,CAAC,mBAAmB,GAAG,IAAI,gEAA6B,EAAE,CAAC;QAE/D,gCAAgC;QAChC,IAAI,CAAC,UAAU,GAAG,IAAI,qCAAgB,CAAC;YACrC,cAAc,EAAE,QAAQ;YACxB,uBAAuB,EAAE,IAAI;YAC7B,aAAa,EAAE,IAAI,EAAE,8BAA8B;SACpD,CAAC,CAAC;QAEH,mCAAmC;QACnC,IAAI,CAAC,YAAY,GAAG,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAClD,IAAI,CAAC,iBAAiB,GAAG,IAAI,GAAG,EAAE,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAE/C,wEAAwE;QACxE,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACnB,IAAI,CAAC;gBACH,IAAI,CAAC,iBAAiB,GAAG,IAAI,8DAA4B,CACvD,IAAI,CAAC,SAAS,CACf,CAAC;YACJ,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,kDAAkD;gBAClD,OAAO,CAAC,IAAI,CAAC,2CAA2C,EAAE,KAAK,CAAC,CAAC;gBACjE,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;YAChC,CAAC;QACH,CAAC;QAED,+BAA+B;QAC/B,IAAI,CAAC,0BAA0B,EAAE,CAAC;QAClC,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC/B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,uBAAuB,CAC3B,OAAgC;QAEhC,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC7B,MAAM,aAAa,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAEnD,IAAI,CAAC;YACH,kEAAkE;YAClE,IAAI,QAAoD,CAAC;YAEzD,IACE,IAAI,CAAC,aAAa;gBAClB,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,uCAAuC,CAAC,EACpE,CAAC;gBACD,QAAQ,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,4BAA4B,CAC9D,OAAO,CACR,CAAC;gBACF,OAAO,CAAC,GAAG,CACT,2CACE,QAAQ,CAAC,aACX,eACE,QACD,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAC5B,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACN,QAAQ,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;YACpE,CAAC;YAED,sCAAsC;YACtC,MAAM,IAAI,CAAC,UAAU,CAAC,wBAAwB,CAC5C,aAAa,EACb,QAAQ,EACR,OAAO,CAAC,SAAS,EACjB,OAAO,CAAC,QAAQ,CACjB,CAAC;YAEF,yCAAyC;YACzC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YAE3C,sCAAsC;YACtC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,CACxC,QAAQ,CAAC,aAAa,EACtB,OAAO,CACR,CAAC;YAEF,4BAA4B;YAC5B,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,EAAE,IAAI,CAAC,CAAC;YAErE,sCAAsC;YACtC,MAAM,gBAAgB,GAAG;gBACvB,GAAG,QAAQ;gBACX,WAAW,EAAE,GAAG,QAAQ,CAAC,WAAW,IAAI,QAAQ,CAAC,aAAa,EAAE;aACjE,CAAC;YAEF,oCAAoC;YACpC,IAAI,aAAa,IAAI,QAAQ,EAAE,CAAC;gBAC7B,gBAAwB,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;gBAC5D,gBAAwB,CAAC,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC;YACnE,CAAC;YAED,OAAO,gBAAgB,CAAC;QAC1B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;YAEzC,4BAA4B;YAC5B,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,WAAW,CAC7C,OAAO,EACP,KAAc,EACd,aAAa,CACd,CAAC;YACF,IAAI,gBAAgB,EAAE,CAAC;gBACrB,yCAAyC;gBACzC,MAAM,IAAI,CAAC,UAAU,CAAC,6BAA6B,CACjD,aAAa,EACb,QAAQ,EAAE,8BAA8B;gBACxC,KAAK,EAAE,kBAAkB;gBACzB,sBAAsB,EACtB,OAAO,CAAC,SAAS,EACjB,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CACzD,CAAC;gBAEF,IAAI,CAAC,aAAa,CAChB;oBACE,aAAa,EAAE,KAAK;oBACpB,MAAM,EAAE,UAAU;oBAClB,iBAAiB,EAAE,IAAI;oBACvB,gBAAgB,EAAE,SAAS;oBAC3B,aAAa;oBACb,SAAS,EAAE,IAAI,IAAI,EAAE;iBACtB,EACD,gBAAgB,EAChB,SAAS,EACT,IAAI,CACL,CAAC;gBACF,OAAO,gBAAgB,CAAC;YAC1B,CAAC;YAED,4BAA4B;YAC5B,IAAI,CAAC,aAAa,CAChB;gBACE,aAAa,EAAE,QAAQ;gBACvB,MAAM,EAAE,OAAO;gBACf,iBAAiB,EAAE,KAAK;gBACxB,gBAAgB,EAAE,SAAS;gBAC3B,aAAa;gBACb,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,EACD,IAAI,EACJ,SAAS,EACT,KAAK,CACN,CAAC;YAEF,wBAAwB;YACxB,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,SAAS;gBACT,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,uBAAuB;gBACvE,WAAW,EAAE,GAAG,aAAa,QAAQ;gBACrC,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,mBAAmB,CACvB,OAAgC,EAChC,aAAqB;QAErB,6BAA6B;QAC7B,MAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAC5C,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,MAAM,IAAI,KAAK,CACb,wCAAwC,OAAO,CAAC,SAAS,EAAE,CAC5D,CAAC;QACJ,CAAC;QAED,yDAAyD;QACzD,MAAM,IAAI,CAAC,gCAAgC,CAAC,OAAO,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;QAE1E,0CAA0C;QAC1C,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,4BAA4B,CAAC,EAAE,CAAC;YAC/D,OAAO;gBACL,aAAa,EAAE,KAAK,EAAE,mDAAmD;gBACzE,MAAM,EAAE,yCAAyC;gBACjD,iBAAiB,EAAE,KAAK;gBACxB,gBAAgB,EAAE,KAAK;gBACvB,aAAa;gBACb,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC;QACJ,CAAC;QAED,6BAA6B;QAC7B,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAE1E,sCAAsC;QACtC,IAAI,kBAAkB,CAAC,SAAS,EAAE,CAAC;YACjC,OAAO;gBACL,aAAa,EAAE,IAAI,CAAC,YAAY;gBAChC,MAAM,EAAE,kBAAkB,IAAI,CAAC,YAAY,cAAc;gBACzD,iBAAiB,EAAE,IAAI,CAAC,aAAa,KAAK,IAAI;gBAC9C,gBAAgB,EAAE,kBAAkB,CAAC,SAAS;gBAC9C,aAAa;gBACb,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC;QACJ,CAAC;QAED,wCAAwC;QACxC,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,gBAAgB,CACrD,IAAI,CAAC,aAAa,CACnB,CAAC;YAEF,IAAI,mBAAmB,CAAC,SAAS,EAAE,CAAC;gBAClC,OAAO;oBACL,aAAa,EAAE,IAAI,CAAC,aAAa;oBACjC,MAAM,EAAE,4CAA4C,IAAI,CAAC,aAAa,GAAG;oBACzE,iBAAiB,EAAE,KAAK,EAAE,yBAAyB;oBACnD,gBAAgB,EAAE,mBAAmB,CAAC,SAAS;oBAC/C,aAAa;oBACb,SAAS,EAAE,IAAI,IAAI,EAAE;iBACtB,CAAC;YACJ,CAAC;QACH,CAAC;QAED,iDAAiD;QACjD,IAAI,OAAO,CAAC,SAAS,KAAK,WAAW,EAAE,CAAC;YACtC,iEAAiE;YACjE,OAAO;gBACL,aAAa,EAAE,QAAQ;gBACvB,MAAM,EACJ,kEAAkE;gBACpE,iBAAiB,EAAE,KAAK;gBACxB,gBAAgB,EAAE,IAAI;gBACtB,aAAa;gBACb,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC;QACJ,CAAC;QAED,mEAAmE;QACnE,OAAO;YACL,aAAa,EAAE,IAAI,CAAC,YAAY;YAChC,MAAM,EACJ,2EAA2E;YAC7E,iBAAiB,EAAE,IAAI,CAAC,aAAa,KAAK,IAAI;YAC9C,gBAAgB,EAAE,IAAI,CAAC,kBAAkB;YACzC,aAAa;YACb,SAAS,EAAE,IAAI,IAAI,EAAE;SACtB,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,cAAc,CAC1B,KAAgB,EAChB,OAAgC;QAEhC,QAAQ,KAAK,EAAE,CAAC;YACd,KAAK,QAAQ;gBACX,OAAO,MAAM,IAAI,CAAC,mBAAmB,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;YAEzE,KAAK,KAAK;gBACR,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;oBACpB,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;gBAC9C,CAAC;gBACD,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;YAE/D;gBACE,MAAM,IAAI,KAAK,CAAC,uBAAuB,KAAK,EAAE,CAAC,CAAC;QACpD,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,WAAW,CACvB,OAAgC,EAChC,YAAmB,EACnB,aAAqB;QAErB,MAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAC5C,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;YACjC,OAAO,IAAI,CAAC,CAAC,wBAAwB;QACvC,CAAC;QAED,IAAI,CAAC;YACH,OAAO,CAAC,GAAG,CACT,yBAAyB,YAAY,CAAC,OAAO,uBAAuB,IAAI,CAAC,aAAa,EAAE,CACzF,CAAC;YAEF,uEAAuE;YACvE,IAAI,IAAI,CAAC,aAAa,KAAK,KAAK,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBAC3D,MAAM,cAAc,GAClB,MAAM,IAAI,CAAC,iBAAiB,CAAC,wBAAwB,CACnD,OAAO,EACP,aAAa,EACb,YAAY,CAAC,OAAO,CACrB,CAAC;gBAEJ,IAAI,cAAc,CAAC,OAAO,IAAI,cAAc,CAAC,QAAQ,EAAE,CAAC;oBACtD,uCAAuC;oBACvC,OAAO;wBACL,GAAG,cAAc,CAAC,QAAQ;wBAC1B,WAAW,EAAE,GAAG,cAAc,CAAC,QAAQ,CAAC,WAAW,oBAAoB;qBACxE,CAAC;gBACJ,CAAC;qBAAM,CAAC;oBACN,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,KAAK,IAAI,qBAAqB,CAAC,CAAC;gBACjE,CAAC;YACH,CAAC;iBAAM,CAAC;gBACN,kCAAkC;gBAClC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;gBAExE,uCAAuC;gBACvC,OAAO;oBACL,GAAG,QAAQ;oBACX,WAAW,EAAE,GAAG,QAAQ,CAAC,WAAW,WAAW;iBAChD,CAAC;YACJ,CAAC;QACH,CAAC;QAAC,OAAO,aAAa,EAAE,CAAC;YACvB,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,aAAa,CAAC,CAAC;YAC5D,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACK,gBAAgB,CACtB,OAAgC;QAEhC,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CACvC,CAAC,IAAI,EAAE,EAAE,CACP,IAAI,CAAC,aAAa,KAAK,OAAO,CAAC,SAAS;YACxC,IAAI,CAAC,QAAQ,KAAK,OAAO,CAAC,QAAQ,CACrC,CAAC;QAEF,IAAI,UAAU;YAAE,OAAO,UAAU,CAAC;QAElC,MAAM,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAC3C,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,aAAa,KAAK,OAAO,CAAC,SAAS,CACnD,CAAC;QAEF,IAAI,cAAc;YAAE,OAAO,cAAc,CAAC;QAE1C,8CAA8C;QAC9C,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE,CAAC;YAC3C,OAAO,CAAC,IAAI,CACV,wCAAwC,OAAO,CAAC,SAAS,8BAA8B,CACxF,CAAC;YAEF,iDAAiD;YACjD,MAAM,aAAa,GACjB,OAAO,CAAC,SAAS,KAAK,WAAW;gBACjC,OAAO,CAAC,SAAS,KAAK,gBAAgB;gBACtC,OAAO,CAAC,SAAS,KAAK,cAAc;gBACpC,OAAO,CAAC,SAAS,KAAK,gBAAgB;gBACpC,CAAC,CAAC,QAAQ;gBACV,CAAC,CAAC,KAAK,CAAC;YAEZ,OAAO;gBACL,aAAa,EAAE,OAAO,CAAC,SAAS;gBAChC,QAAQ,EAAE,OAAO,CAAC,QAAQ,IAAI,QAAQ;gBACtC,kBAAkB,EAAE,KAAK;gBACzB,YAAY,EAAE,aAAa;gBAC3B,aAAa,EAAE,aAAa,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ;gBAC5D,mBAAmB,EAAE,IAAI;aAC1B,CAAC;QACJ,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,gBAAgB,CAAC,KAAgB;QACrC,MAAM,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAEjD,yCAAyC;QACzC,IAAI,MAAM,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,KAAK,EAAE,CAAC;YAC9D,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,6BAA6B;QAC7B,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAE7B,IAAI,CAAC;YACH,IAAI,SAAS,GAAG,KAAK,CAAC;YACtB,IAAI,SAAS,GAAG,CAAC,CAAC;YAElB,QAAQ,KAAK,EAAE,CAAC;gBACd,KAAK,QAAQ;oBACX,MAAM,YAAY,GAChB,MAAM,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,EAAE,CAAC;oBACtD,SAAS,GAAG,YAAY,CAAC,SAAS,CAAC;oBACnC,SAAS,GAAG,YAAY,CAAC,SAAS,CAAC;oBACnC,MAAM;gBAER,KAAK,KAAK;oBACR,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;wBACnB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,CAAC;wBACzD,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC;wBAChC,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC;oBAClC,CAAC;yBAAM,CAAC;wBACN,SAAS,GAAG,KAAK,CAAC;wBAClB,SAAS,GAAG,CAAC,CAAC;oBAChB,CAAC;oBACD,MAAM;YACV,CAAC;YAED,MAAM,MAAM,GAAgB;gBAC1B,KAAK;gBACL,SAAS;gBACT,SAAS;gBACT,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG;gBAClC,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,mBAAmB,EAAE,SAAS;oBAC5B,CAAC,CAAC,CAAC;oBACH,CAAC,CAAC,CAAC,MAAM,EAAE,mBAAmB,IAAI,CAAC,CAAC,GAAG,CAAC;aAC3C,CAAC;YAEF,kCAAkC;YAClC,MAAM,IAAI,CAAC,UAAU,CAAC,mBAAmB,CACvC,KAAK,EACL,SAAS,EACT,SAAS,EACT,MAAM,CAAC,WAAW,EAClB,MAAM,CAAC,mBAAmB,EAC1B,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,4BAA4B,CAC7D,CAAC;YAEF,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YAC1C,OAAO,MAAM,CAAC;QAChB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,MAAM,GAAgB;gBAC1B,KAAK;gBACL,SAAS,EAAE,KAAK;gBAChB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS;gBACjC,WAAW,EAAE,GAAG;gBAChB,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,mBAAmB,EAAE,CAAC,MAAM,EAAE,mBAAmB,IAAI,CAAC,CAAC,GAAG,CAAC;aAC5D,CAAC;YAEF,0CAA0C;YAC1C,MAAM,IAAI,CAAC,UAAU,CAAC,mBAAmB,CACvC,KAAK,EACL,KAAK,EACL,MAAM,CAAC,SAAS,EAChB,MAAM,CAAC,WAAW,EAClB,MAAM,CAAC,mBAAmB,EAC1B,KAAK,YAAY,KAAK;gBACpB,CAAC,CAAC,KAAK,CAAC,OAAO;gBACf,CAAC,CAAC,GAAG,KAAK,4BAA4B,CACzC,CAAC;YAEF,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YAC1C,OAAO,MAAM,CAAC;QAChB,CAAC;IACH,CAAC;IAED;;OAEG;IACH,oBAAoB;QAClB,OAAO,EAAE,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;IACpC,CAAC;IAED;;OAEG;IACH,oBAAoB;QAClB,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IACzC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,eAAe;QACnB,MAAM,eAAe,GAAa,EAAE,CAAC;QACrC,MAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC;QAEvC,2BAA2B;QAC3B,IAAI,UAAU,CAAC,aAAa,GAAG,GAAG,EAAE,CAAC;YACnC,yCAAyC;YACzC,MAAM,kBAAkB,GACtB,CAAC,UAAU,CAAC,gBAAgB,GAAG,UAAU,CAAC,aAAa,CAAC,GAAG,GAAG,CAAC;YACjE,IAAI,kBAAkB,GAAG,EAAE,IAAI,UAAU,CAAC,cAAc,GAAG,KAAK,EAAE,CAAC;gBACjE,eAAe,CAAC,IAAI,CAClB,uEAAuE,CACxE,CAAC;YACJ,CAAC;YAED,mCAAmC;YACnC,MAAM,eAAe,GACnB,CAAC,UAAU,CAAC,aAAa,GAAG,UAAU,CAAC,aAAa,CAAC,GAAG,GAAG,CAAC;YAC9D,IAAI,eAAe,GAAG,EAAE,IAAI,UAAU,CAAC,WAAW,GAAG,IAAI,EAAE,CAAC;gBAC1D,eAAe,CAAC,IAAI,CAClB,sEAAsE,CACvE,CAAC;YACJ,CAAC;YAED,uBAAuB;YACvB,MAAM,eAAe,GACnB,CAAC,UAAU,CAAC,aAAa,GAAG,UAAU,CAAC,aAAa,CAAC,GAAG,GAAG,CAAC;YAC9D,IAAI,eAAe,GAAG,EAAE,EAAE,CAAC;gBACzB,eAAe,CAAC,IAAI,CAClB,wEAAwE,CACzE,CAAC;YACJ,CAAC;YAED,wBAAwB;YACxB,IAAI,UAAU,CAAC,cAAc,GAAG,GAAG,EAAE,CAAC;gBACpC,eAAe,CAAC,IAAI,CAClB,sEAAsE,CACvE,CAAC;YACJ,CAAC;QACH,CAAC;QAED,OAAO,eAAe,CAAC;IACzB,CAAC;IAED;;OAEG;IACH,kBAAkB,CAAC,QAAuB;QACxC,IAAI,CAAC,YAAY,GAAG,CAAC,GAAG,QAAQ,CAAC,CAAC;QAClC,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IAClE,CAAC;IAED;;OAEG;IACH,YAAY,CAAC,SAAoB;QAC/B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAE3B,6CAA6C;QAC7C,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC5B,IAAI,CAAC;gBACH,IAAI,CAAC,iBAAiB,GAAG,IAAI,8DAA4B,CAAC,SAAS,CAAC,CAAC;YACvE,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,kDAAkD;gBAClD,OAAO,CAAC,IAAI,CAAC,2CAA2C,EAAE,KAAK,CAAC,CAAC;gBACjE,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;YAChC,CAAC;QACH,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,wDAAwD,CAAC,CAAC;IACxE,CAAC;IAED;;OAEG;IACH,gBAAgB,CAAC,aAA8C;QAC7D,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,OAAO,CAAC,GAAG,CAAC,mDAAmD,CAAC,CAAC;IACnE,CAAC;IAED;;OAEG;IACH,qBAAqB;QACnB,OAAO,IAAI,CAAC,iBAAiB,EAAE,kBAAkB,EAAE,IAAI,IAAI,CAAC;IAC9D,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,8BAA8B;QAMlC,OAAO,IAAI,CAAC,iBAAiB,EAAE,0BAA0B,EAAE,IAAI,IAAI,CAAC;IACtE,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,wBAAwB;QAI5B,OAAO,IAAI,CAAC,iBAAiB,EAAE,2BAA2B,EAAE,IAAI,IAAI,CAAC;IACvE,CAAC;IAED;;OAEG;IACH,0BAA0B;QACxB,OAAO,IAAI,CAAC,aAAa,EAAE,0BAA0B,EAAE,IAAI,IAAI,CAAC;IAClE,CAAC;IAED;;OAEG;IACH,yBAAyB;QACvB,OAAO,IAAI,CAAC,aAAa,EAAE,yBAAyB,EAAE,IAAI,IAAI,CAAC;IACjE,CAAC;IAED;;OAEG;IACH,wBAAwB;QACtB,OAAO,IAAI,CAAC,aAAa,EAAE,wBAAwB,EAAE,IAAI,KAAK,CAAC;IACjE,CAAC;IAED;;OAEG;IACH,eAAe;QACb,OAAO,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,OAAO;QACL,IAAI,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC7B,aAAa,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC1C,CAAC;QAED,8BAA8B;QAC9B,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC3B,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC;QACnC,CAAC;QAED,yBAAyB;QACzB,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;QAC/B,CAAC;IACH,CAAC;IAED,yBAAyB;IAEjB,iBAAiB;QACvB,OAAO;YACL,aAAa,EAAE,CAAC;YAChB,gBAAgB,EAAE,CAAC;YACnB,aAAa,EAAE,CAAC;YAChB,aAAa,EAAE,CAAC;YAChB,cAAc,EAAE,CAAC;YACjB,WAAW,EAAE,GAAG;YAChB,cAAc,EAAE,GAAG;YACnB,2BAA2B,EAAE,EAAE;SAChC,CAAC;IACJ,CAAC;IAEO,0BAA0B;QAChC,2CAA2C;QAC3C,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,QAAQ,EAAE;YACnC,KAAK,EAAE,QAAQ;YACf,SAAS,EAAE,IAAI;YACf,SAAS,EAAE,CAAC;YACZ,WAAW,EAAE,GAAG;YAChB,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,mBAAmB,EAAE,CAAC;SACvB,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,KAAK,EAAE;YAChC,KAAK,EAAE,KAAK;YACZ,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,WAAW,EAAE,IAAI,KAAK;YACjD,SAAS,EAAE,CAAC;YACZ,WAAW,EAAE,GAAG;YAChB,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,mBAAmB,EAAE,CAAC;SACvB,CAAC,CAAC;IACL,CAAC;IAEO,qBAAqB;QAC3B,IAAI,CAAC,mBAAmB,GAAG,WAAW,CAAC,KAAK,IAAI,EAAE;YAChD,IAAI,CAAC;gBACH,0CAA0C;gBAC1C,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;gBAC3D,MAAM,IAAI,CAAC,UAAU,CAAC,mBAAmB,CACvC,QAAQ,EACR,YAAY,CAAC,SAAS,EACtB,YAAY,CAAC,SAAS,EACtB,YAAY,CAAC,WAAW,EACxB,YAAY,CAAC,mBAAmB,EAChC,YAAY,CAAC,SAAS;oBACpB,CAAC,CAAC,SAAS;oBACX,CAAC,CAAC,kCAAkC,CACvC,CAAC;gBAEF,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;oBACnB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;oBACrD,MAAM,IAAI,CAAC,UAAU,CAAC,mBAAmB,CACvC,KAAK,EACL,SAAS,CAAC,SAAS,EACnB,SAAS,CAAC,SAAS,EACnB,SAAS,CAAC,WAAW,EACrB,SAAS,CAAC,mBAAmB,EAC7B,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,+BAA+B,CAClE,CAAC;gBACJ,CAAC;gBAED,4BAA4B;gBAC5B,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;gBACrD,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBAC/B,IAAI,CAAC,cAAc,CAAC,2BAA2B,GAAG,eAAe,CAAC;oBAElE,0CAA0C;oBAC1C,MAAM,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,eAAe,EAAE;wBAC5D,aAAa,EAAE,IAAI,CAAC,cAAc,CAAC,aAAa;wBAChD,gBAAgB,EAAE,IAAI,CAAC,cAAc,CAAC,gBAAgB;wBACtD,aAAa,EAAE,IAAI,CAAC,cAAc,CAAC,aAAa;wBAChD,aAAa,EAAE,IAAI,CAAC,cAAc,CAAC,aAAa;wBAChD,cAAc,EAAE,IAAI,CAAC,cAAc,CAAC,cAAc;wBAClD,WAAW,EAAE,IAAI,CAAC,cAAc,CAAC,WAAW;qBAC7C,CAAC,CAAC;oBAEH,OAAO,CAAC,GAAG,CAAC,uCAAuC,EAAE,eAAe,CAAC,CAAC;gBACxE,CAAC;YACH,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;YACnD,CAAC;QACH,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,qBAAqB;IAClC,CAAC;IAEO,aAAa,CACnB,QAAyB,EACzB,QAAyC,EACzC,SAAiB,EACjB,OAAgB;QAEhB,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC;QAEpC,qBAAqB;QACrB,IAAI,QAAQ,CAAC,aAAa,KAAK,QAAQ,EAAE,CAAC;YACxC,IAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE,CAAC;QACzC,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC;QACtC,CAAC;QAED,wBAAwB;QACxB,IAAI,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;YACzC,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC;QACtC,CAAC;QAED,2CAA2C;QAC3C,MAAM,YAAY,GAChB,IAAI,CAAC,cAAc,CAAC,cAAc;YAChC,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,GAAG,CAAC,CAAC;YACzC,SAAS,CAAC;QACZ,IAAI,CAAC,cAAc,CAAC,cAAc;YAChC,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC;QAEnD,wCAAwC;QACxC,MAAM,YAAY,GAChB,IAAI,CAAC,cAAc,CAAC,WAAW;YAC7B,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,GAAG,CAAC,CAAC;YACzC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACpB,IAAI,CAAC,cAAc,CAAC,WAAW;YAC7B,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC;QAEnD,kDAAkD;QAClD,MAAM,gBAAgB,GAAG,GAAG,CAAC,CAAC,4BAA4B;QAC1D,MAAM,aAAa,GAAG,GAAG,CAAC,CAAC,iBAAiB;QAC5C,MAAM,UAAU,GACd,QAAQ,CAAC,aAAa,KAAK,QAAQ,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,aAAa,CAAC;QACzE,MAAM,SAAS,GACb,IAAI,CAAC,cAAc,CAAC,cAAc;YAChC,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,GAAG,CAAC,CAAC;YACzC,UAAU,CAAC;QACb,IAAI,CAAC,cAAc,CAAC,cAAc;YAChC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC;IAClD,CAAC;IAEO,kBAAkB,CACxB,QAAyB,EACzB,OAAgC;QAEhC,OAAO,CAAC,GAAG,CACT,uBAAuB,QAAQ,CAAC,aAAa,KAAK,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,QAAQ,OAAO,QAAQ,CAAC,aAAa,KAAK,QAAQ,CAAC,MAAM,GAAG,CAC5I,CAAC;IACJ,CAAC;IAEO,qBAAqB;QAC3B,OAAO,UAAU,IAAI,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;IAC3E,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,gCAAgC,CAC5C,OAAgC,EAChC,IAAiB,EACjB,aAAqB;QAErB,IAAI,CAAC;YACH,2DAA2D;YAC3D,MAAM,aAAa,GAAG,IAAI,CAAC,4BAA4B,CACrD,OAAO,CAAC,SAAS,CAClB,CAAC;YAEF,wCAAwC;YACxC,MAAM,kBAAkB,GAAsB;gBAC5C,SAAS,EACP,IAAI,CAAC,YAAY,KAAK,QAAQ,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,iBAAiB;gBACvE,QAAQ,EAAE,SAAS,EAAE,4CAA4C;gBACjE,aAAa;gBACb,QAAQ,EAAE,IAAI,CAAC,QAAQ;aACxB,CAAC;YAEF,6CAA6C;YAC7C,MAAM,iBAAiB,GACrB,MAAM,IAAI,CAAC,mBAAmB,CAAC,qBAAqB,CAClD,kBAAkB,EAClB,GAAG,aAAa,UAAU,CAC3B,CAAC;YAEJ,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC;gBAC/B,yDAAyD;gBACzD,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;oBACvB,MAAM,mBAAmB,GAAsB;wBAC7C,SAAS,EACP,IAAI,CAAC,aAAa,KAAK,QAAQ;4BAC7B,CAAC,CAAC,gBAAgB;4BAClB,CAAC,CAAC,iBAAiB;wBACvB,QAAQ,EAAE,SAAS;wBACnB,aAAa;wBACb,QAAQ,EAAE,IAAI,CAAC,QAAQ;qBACxB,CAAC;oBAEF,MAAM,kBAAkB,GACtB,MAAM,IAAI,CAAC,mBAAmB,CAAC,qBAAqB,CAClD,mBAAmB,EACnB,GAAG,aAAa,WAAW,CAC5B,CAAC;oBAEJ,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC;wBAChC,MAAM,IAAI,KAAK,CACb,mEAAmE,iBAAiB,CAAC,MAAM,eAAe,kBAAkB,CAAC,MAAM,EAAE,CACtI,CAAC;oBACJ,CAAC;gBACH,CAAC;qBAAM,CAAC;oBACN,MAAM,IAAI,KAAK,CACb,kEAAkE,iBAAiB,CAAC,MAAM,EAAE,CAC7F,CAAC;gBACJ,CAAC;YACH,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,YAAY,GAChB,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACzD,MAAM,IAAI,KAAK,CACb,kDAAkD,YAAY,EAAE,CACjE,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACK,4BAA4B,CAClC,SAAwB;QAExB,QAAQ,SAAS,EAAE,CAAC;YAClB,KAAK,WAAW;gBACd,OAAO,WAAW,CAAC;YACrB,KAAK,gBAAgB;gBACnB,OAAO,gBAAgB,CAAC;YAC1B,KAAK,cAAc;gBACjB,OAAO,cAAc,CAAC;YACxB,KAAK,gBAAgB;gBACnB,OAAO,gBAAgB,CAAC;YAC1B,KAAK,UAAU;gBACb,OAAO,mBAAmB,CAAC;YAC7B;gBACE,OAAO,kBAAkB,CAAC;QAC9B,CAAC;IACH,CAAC;CACF;AA16BD,8CA06BC;AAED,iDAAiD","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/intelligent-router.ts"],"sourcesContent":["/**\n * Intelligent Router - Hybrid Routing for Bedrock Support Operations\n *\n * This module implements intelligent routing decisions between direct Bedrock access\n * and MCP integration based on operation type, priority, latency requirements,\n * and system health status.\n */\n\nimport { AiFeatureFlags } from \"./ai-feature-flags\";\nimport { AuditTrailSystem } from \"./audit-trail-system\";\nimport { CircuitBreaker } from \"./circuit-breaker\";\nimport {\n  DirectBedrockClient,\n  OperationPriority,\n  OperationType,\n  SupportOperationRequest,\n  SupportOperationResponse,\n} from \"./direct-bedrock-client\";\nimport {\n  GDPRHybridComplianceValidator,\n  HybridRoutingPath,\n} from \"./gdpr-hybrid-compliance-validator\";\nimport { MCPFallbackReliabilitySystem } from \"./mcp-fallback-reliability-system\";\nimport { MCPRouter } from \"./mcp-router\";\n\n// Routing Decision Matrix Configuration\nexport interface RoutingRule {\n  operationType: OperationType;\n  priority: OperationPriority;\n  latencyRequirement: number; // milliseconds\n  primaryRoute: RouteType;\n  fallbackRoute: RouteType | null;\n  healthCheckRequired: boolean;\n}\n\nexport type RouteType = \"direct\" | \"mcp\";\n\n// Routing Decision Result\nexport interface RoutingDecision {\n  selectedRoute: RouteType;\n  reason: string;\n  fallbackAvailable: boolean;\n  estimatedLatency: number;\n  correlationId: string;\n  timestamp: Date;\n}\n\n// Route Health Status\nexport interface RouteHealth {\n  route: RouteType;\n  isHealthy: boolean;\n  latencyMs: number;\n  successRate: number;\n  lastCheck: Date;\n  consecutiveFailures: number;\n}\n\n// Routing Efficiency Metrics\nexport interface RoutingEfficiency {\n  totalRequests: number;\n  directRouteUsage: number;\n  mcpRouteUsage: number;\n  fallbackUsage: number;\n  averageLatency: number;\n  successRate: number;\n  costEfficiency: number;\n  optimizationRecommendations: string[];\n}\n\n// Import MCP Router from implementation\nexport { MCPRouter } from \"./mcp-router\";\n\n/**\n * Intelligent Router for Hybrid Bedrock/MCP Operations\n */\nexport class IntelligentRouter {\n  private directBedrockClient: DirectBedrockClient;\n  private mcpRouter: MCPRouter | null = null;\n  private featureFlags: AiFeatureFlags;\n  private circuitBreaker: CircuitBreaker;\n  private gdprHybridValidator: GDPRHybridComplianceValidator;\n  private auditTrail: AuditTrailSystem;\n  private mcpFallbackSystem: MCPFallbackReliabilitySystem | null = null;\n  private costOptimizer: IntelligentRoutingCostOptimizer | null = null;\n\n  // Routing configuration\n  private routingRules: RoutingRule[];\n  private routeHealthStatus: Map<RouteType, RouteHealth>;\n  private routingMetrics: RoutingEfficiency;\n  private healthCheckInterval?: NodeJS.Timeout;\n\n  // Default routing decision matrix\n  private readonly defaultRoutingRules: RoutingRule[] = [\n    {\n      operationType: \"emergency\",\n      priority: \"critical\",\n      latencyRequirement: 5000, // < 5s\n      primaryRoute: \"direct\",\n      fallbackRoute: null, // No fallback for emergency\n      healthCheckRequired: true,\n    },\n    {\n      operationType: \"infrastructure\",\n      priority: \"critical\",\n      latencyRequirement: 10000, // < 10s\n      primaryRoute: \"direct\",\n      fallbackRoute: \"mcp\",\n      healthCheckRequired: true,\n    },\n    {\n      operationType: \"meta_monitor\",\n      priority: \"high\",\n      latencyRequirement: 15000, // < 15s\n      primaryRoute: \"direct\",\n      fallbackRoute: \"mcp\",\n      healthCheckRequired: true,\n    },\n    {\n      operationType: \"implementation\",\n      priority: \"high\",\n      latencyRequirement: 15000, // < 15s\n      primaryRoute: \"direct\",\n      fallbackRoute: \"mcp\",\n      healthCheckRequired: true,\n    },\n    {\n      operationType: \"standard\",\n      priority: \"medium\",\n      latencyRequirement: 30000, // < 30s\n      primaryRoute: \"mcp\",\n      fallbackRoute: \"direct\",\n      healthCheckRequired: false,\n    },\n  ];\n\n  constructor(directBedrockClient: DirectBedrockClient, mcpRouter?: MCPRouter) {\n    this.directBedrockClient = directBedrockClient;\n    this.mcpRouter = mcpRouter || null;\n    this.featureFlags = new AiFeatureFlags();\n    this.circuitBreaker = new CircuitBreaker({\n      failureThreshold: 3,\n      recoveryTimeout: 30000,\n      halfOpenMaxCalls: 2,\n    });\n    this.gdprHybridValidator = new GDPRHybridComplianceValidator();\n\n    // Initialize audit trail system\n    this.auditTrail = new AuditTrailSystem({\n      complianceMode: \"strict\",\n      enableIntegrityChecking: true,\n      retentionDays: 2555, // 7 years for GDPR compliance\n    });\n\n    // Initialize routing configuration\n    this.routingRules = [...this.defaultRoutingRules];\n    this.routeHealthStatus = new Map();\n    this.routingMetrics = this.initializeMetrics();\n\n    // Initialize MCP fallback reliability system if MCP router is available\n    if (this.mcpRouter) {\n      try {\n        this.mcpFallbackSystem = new MCPFallbackReliabilitySystem(\n          this.mcpRouter\n        );\n      } catch (error) {\n        // In test environments, the class might be mocked\n        console.warn(\"Failed to initialize MCP fallback system:\", error);\n        this.mcpFallbackSystem = null;\n      }\n    }\n\n    // Initialize health monitoring\n    this.initializeHealthMonitoring();\n    this.startHealthMonitoring();\n  }\n\n  /**\n   * Execute support operation with intelligent routing\n   */\n  async executeSupportOperation(\n    request: SupportOperationRequest\n  ): Promise<SupportOperationResponse> {\n    const startTime = Date.now();\n    const correlationId = this.generateCorrelationId();\n\n    try {\n      // Make cost-aware routing decision if cost optimizer is available\n      let decision: RoutingDecision | CostAwareRoutingDecision;\n\n      if (\n        this.costOptimizer &&\n        this.featureFlags.isEnabled(\"intelligent_routing_cost_optimization\")\n      ) {\n        decision = await this.costOptimizer.makeCostAwareRoutingDecision(\n          request\n        );\n        console.log(\n          `[IntelligentRouter] Cost-aware routing: ${\n            decision.selectedRoute\n          } (savings: $${(\n            decision as CostAwareRoutingDecision\n          ).costSavings.toFixed(4)})`\n        );\n      } else {\n        decision = await this.makeRoutingDecision(request, correlationId);\n      }\n\n      // Log routing decision to audit trail\n      await this.auditTrail.logHybridRoutingDecision(\n        correlationId,\n        decision,\n        request.operation,\n        request.priority\n      );\n\n      // Log routing decision (console logging)\n      this.logRoutingDecision(decision, request);\n\n      // Execute operation on selected route\n      const response = await this.executeOnRoute(\n        decision.selectedRoute,\n        request\n      );\n\n      // Update metrics on success\n      this.updateMetrics(decision, response, Date.now() - startTime, true);\n\n      // Add routing information to response\n      const enhancedResponse = {\n        ...response,\n        operationId: `${response.operationId}-${decision.selectedRoute}`,\n      };\n\n      // Add cost information if available\n      if (\"costSavings\" in decision) {\n        (enhancedResponse as any).costSavings = decision.costSavings;\n        (enhancedResponse as any).estimatedCost = decision.estimatedCost;\n      }\n\n      return enhancedResponse;\n    } catch (error) {\n      const latencyMs = Date.now() - startTime;\n\n      // Try fallback if available\n      const fallbackResponse = await this.tryFallback(\n        request,\n        error as Error,\n        correlationId\n      );\n      if (fallbackResponse) {\n        // Log successful fallback to audit trail\n        await this.auditTrail.logIntelligentRoutingFallback(\n          correlationId,\n          \"direct\", // Assuming primary was direct\n          \"mcp\", // Fallback to MCP\n          \"Primary route failed\",\n          request.operation,\n          error instanceof Error ? error.message : \"Unknown error\"\n        );\n\n        this.updateMetrics(\n          {\n            selectedRoute: \"mcp\",\n            reason: \"fallback\",\n            fallbackAvailable: true,\n            estimatedLatency: latencyMs,\n            correlationId,\n            timestamp: new Date(),\n          },\n          fallbackResponse,\n          latencyMs,\n          true\n        );\n        return fallbackResponse;\n      }\n\n      // Update metrics on failure\n      this.updateMetrics(\n        {\n          selectedRoute: \"direct\",\n          reason: \"error\",\n          fallbackAvailable: false,\n          estimatedLatency: latencyMs,\n          correlationId,\n          timestamp: new Date(),\n        },\n        null,\n        latencyMs,\n        false\n      );\n\n      // Return error response\n      return {\n        success: false,\n        latencyMs,\n        error: error instanceof Error ? error.message : \"Unknown routing error\",\n        operationId: `${correlationId}-error`,\n        timestamp: new Date(),\n      };\n    }\n  }\n\n  /**\n   * Make intelligent routing decision based on rules and health\n   */\n  async makeRoutingDecision(\n    request: SupportOperationRequest,\n    correlationId: string\n  ): Promise<RoutingDecision> {\n    // Find matching routing rule\n    const rule = this.findMatchingRule(request);\n    if (!rule) {\n      throw new Error(\n        `No routing rule found for operation: ${request.operation}`\n      );\n    }\n\n    // Validate GDPR compliance for the intended routing path\n    await this.validateGDPRComplianceForRouting(request, rule, correlationId);\n\n    // Check if intelligent routing is enabled\n    if (!this.featureFlags.isEnabled(\"ENABLE_INTELLIGENT_ROUTING\")) {\n      return {\n        selectedRoute: \"mcp\", // Default to MCP when intelligent routing disabled\n        reason: \"Intelligent routing disabled, using MCP\",\n        fallbackAvailable: false,\n        estimatedLatency: 30000,\n        correlationId,\n        timestamp: new Date(),\n      };\n    }\n\n    // Check primary route health\n    const primaryRouteHealth = await this.checkRouteHealth(rule.primaryRoute);\n\n    // If primary route is healthy, use it\n    if (primaryRouteHealth.isHealthy) {\n      return {\n        selectedRoute: rule.primaryRoute,\n        reason: `Primary route (${rule.primaryRoute}) is healthy`,\n        fallbackAvailable: rule.fallbackRoute !== null,\n        estimatedLatency: primaryRouteHealth.latencyMs,\n        correlationId,\n        timestamp: new Date(),\n      };\n    }\n\n    // Primary route unhealthy, try fallback\n    if (rule.fallbackRoute) {\n      const fallbackRouteHealth = await this.checkRouteHealth(\n        rule.fallbackRoute\n      );\n\n      if (fallbackRouteHealth.isHealthy) {\n        return {\n          selectedRoute: rule.fallbackRoute,\n          reason: `Primary route unhealthy, using fallback (${rule.fallbackRoute})`,\n          fallbackAvailable: false, // Already using fallback\n          estimatedLatency: fallbackRouteHealth.latencyMs,\n          correlationId,\n          timestamp: new Date(),\n        };\n      }\n    }\n\n    // Both routes unhealthy or no fallback available\n    if (request.operation === \"emergency\") {\n      // For emergency operations, force direct route even if unhealthy\n      return {\n        selectedRoute: \"direct\",\n        reason:\n          \"Emergency operation - forcing direct route despite health issues\",\n        fallbackAvailable: false,\n        estimatedLatency: 5000,\n        correlationId,\n        timestamp: new Date(),\n      };\n    }\n\n    // Default to primary route and let circuit breaker handle failures\n    return {\n      selectedRoute: rule.primaryRoute,\n      reason:\n        \"All routes unhealthy, using primary route with circuit breaker protection\",\n      fallbackAvailable: rule.fallbackRoute !== null,\n      estimatedLatency: rule.latencyRequirement,\n      correlationId,\n      timestamp: new Date(),\n    };\n  }\n\n  /**\n   * Execute operation on selected route\n   */\n  private async executeOnRoute(\n    route: RouteType,\n    request: SupportOperationRequest\n  ): Promise<SupportOperationResponse> {\n    switch (route) {\n      case \"direct\":\n        return await this.directBedrockClient.executeSupportOperation(request);\n\n      case \"mcp\":\n        if (!this.mcpRouter) {\n          throw new Error(\"MCP router not available\");\n        }\n        return await this.mcpRouter.executeSupportOperation(request);\n\n      default:\n        throw new Error(`Unknown route type: ${route}`);\n    }\n  }\n\n  /**\n   * Try fallback route on primary route failure with reliability system\n   */\n  private async tryFallback(\n    request: SupportOperationRequest,\n    primaryError: Error,\n    correlationId: string\n  ): Promise<SupportOperationResponse | null> {\n    const rule = this.findMatchingRule(request);\n    if (!rule || !rule.fallbackRoute) {\n      return null; // No fallback available\n    }\n\n    try {\n      console.log(\n        `Primary route failed (${primaryError.message}), trying fallback: ${rule.fallbackRoute}`\n      );\n\n      // Use MCP fallback reliability system if available and fallback is MCP\n      if (rule.fallbackRoute === \"mcp\" && this.mcpFallbackSystem) {\n        const fallbackResult =\n          await this.mcpFallbackSystem.executeFallbackOperation(\n            request,\n            correlationId,\n            primaryError.message\n          );\n\n        if (fallbackResult.success && fallbackResult.response) {\n          // Add fallback information to response\n          return {\n            ...fallbackResult.response,\n            operationId: `${fallbackResult.response.operationId}-fallback-reliable`,\n          };\n        } else {\n          throw new Error(fallbackResult.error || \"MCP fallback failed\");\n        }\n      } else {\n        // Use standard fallback execution\n        const response = await this.executeOnRoute(rule.fallbackRoute, request);\n\n        // Add fallback information to response\n        return {\n          ...response,\n          operationId: `${response.operationId}-fallback`,\n        };\n      }\n    } catch (fallbackError) {\n      console.error(`Fallback route also failed:`, fallbackError);\n      return null;\n    }\n  }\n\n  /**\n   * Find matching routing rule for request\n   */\n  private findMatchingRule(\n    request: SupportOperationRequest\n  ): RoutingRule | null {\n    const exactMatch = this.routingRules.find(\n      (rule) =>\n        rule.operationType === request.operation &&\n        rule.priority === request.priority\n    );\n\n    if (exactMatch) return exactMatch;\n\n    const operationMatch = this.routingRules.find(\n      (rule) => rule.operationType === request.operation\n    );\n\n    if (operationMatch) return operationMatch;\n\n    // Development fallback for unknown operations\n    if (process.env.NODE_ENV === \"development\") {\n      console.warn(\n        `No routing rule found for operation: ${request.operation}, using development fallback`\n      );\n\n      // Create a fallback rule based on operation type\n      const fallbackRoute: RouteType =\n        request.operation === \"emergency\" ||\n        request.operation === \"infrastructure\" ||\n        request.operation === \"meta_monitor\" ||\n        request.operation === \"implementation\"\n          ? \"direct\"\n          : \"mcp\";\n\n      return {\n        operationType: request.operation,\n        priority: request.priority || \"medium\",\n        latencyRequirement: 30000,\n        primaryRoute: fallbackRoute,\n        fallbackRoute: fallbackRoute === \"direct\" ? \"mcp\" : \"direct\",\n        healthCheckRequired: true,\n      };\n    }\n\n    return null;\n  }\n\n  /**\n   * Check route health status\n   */\n  async checkRouteHealth(route: RouteType): Promise<RouteHealth> {\n    const cached = this.routeHealthStatus.get(route);\n\n    // Return cached status if recent (< 30s)\n    if (cached && Date.now() - cached.lastCheck.getTime() < 30000) {\n      return cached;\n    }\n\n    // Perform fresh health check\n    const startTime = Date.now();\n\n    try {\n      let isHealthy = false;\n      let latencyMs = 0;\n\n      switch (route) {\n        case \"direct\":\n          const directHealth =\n            await this.directBedrockClient.performHealthCheck();\n          isHealthy = directHealth.isHealthy;\n          latencyMs = directHealth.latencyMs;\n          break;\n\n        case \"mcp\":\n          if (this.mcpRouter) {\n            const mcpHealth = await this.mcpRouter.getHealthStatus();\n            isHealthy = mcpHealth.isHealthy;\n            latencyMs = mcpHealth.latencyMs;\n          } else {\n            isHealthy = false;\n            latencyMs = 0;\n          }\n          break;\n      }\n\n      const health: RouteHealth = {\n        route,\n        isHealthy,\n        latencyMs,\n        successRate: isHealthy ? 1.0 : 0.0,\n        lastCheck: new Date(),\n        consecutiveFailures: isHealthy\n          ? 0\n          : (cached?.consecutiveFailures || 0) + 1,\n      };\n\n      // Log health check to audit trail\n      await this.auditTrail.logRouteHealthCheck(\n        route,\n        isHealthy,\n        latencyMs,\n        health.successRate,\n        health.consecutiveFailures,\n        isHealthy ? undefined : `${route} route health check failed`\n      );\n\n      this.routeHealthStatus.set(route, health);\n      return health;\n    } catch (error) {\n      const health: RouteHealth = {\n        route,\n        isHealthy: false,\n        latencyMs: Date.now() - startTime,\n        successRate: 0.0,\n        lastCheck: new Date(),\n        consecutiveFailures: (cached?.consecutiveFailures || 0) + 1,\n      };\n\n      // Log health check failure to audit trail\n      await this.auditTrail.logRouteHealthCheck(\n        route,\n        false,\n        health.latencyMs,\n        health.successRate,\n        health.consecutiveFailures,\n        error instanceof Error\n          ? error.message\n          : `${route} route health check failed`\n      );\n\n      this.routeHealthStatus.set(route, health);\n      return health;\n    }\n  }\n\n  /**\n   * Get routing efficiency metrics\n   */\n  getRoutingEfficiency(): RoutingEfficiency {\n    return { ...this.routingMetrics };\n  }\n\n  /**\n   * Get current route health status\n   */\n  getRouteHealthStatus(): Map<RouteType, RouteHealth> {\n    return new Map(this.routeHealthStatus);\n  }\n\n  /**\n   * Optimize routing configuration based on metrics\n   */\n  async optimizeRouting(): Promise<string[]> {\n    const recommendations: string[] = [];\n    const efficiency = this.routingMetrics;\n\n    // Analyze routing patterns\n    if (efficiency.totalRequests > 100) {\n      // Check if direct route is underutilized\n      const directUsagePercent =\n        (efficiency.directRouteUsage / efficiency.totalRequests) * 100;\n      if (directUsagePercent < 30 && efficiency.averageLatency > 15000) {\n        recommendations.push(\n          \"Consider routing more operations to direct Bedrock for better latency\"\n        );\n      }\n\n      // Check if MCP route is overloaded\n      const mcpUsagePercent =\n        (efficiency.mcpRouteUsage / efficiency.totalRequests) * 100;\n      if (mcpUsagePercent > 80 && efficiency.successRate < 0.95) {\n        recommendations.push(\n          \"Consider load balancing by routing more operations to direct Bedrock\"\n        );\n      }\n\n      // Check fallback usage\n      const fallbackPercent =\n        (efficiency.fallbackUsage / efficiency.totalRequests) * 100;\n      if (fallbackPercent > 20) {\n        recommendations.push(\n          \"High fallback usage detected - investigate primary route health issues\"\n        );\n      }\n\n      // Check cost efficiency\n      if (efficiency.costEfficiency < 0.7) {\n        recommendations.push(\n          \"Route more standard operations to MCP to reduce direct Bedrock costs\"\n        );\n      }\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Update routing rules (for dynamic configuration)\n   */\n  updateRoutingRules(newRules: RoutingRule[]): void {\n    this.routingRules = [...newRules];\n    console.log(\"Routing rules updated:\", this.routingRules.length);\n  }\n\n  /**\n   * Set MCP router (for late initialization)\n   */\n  setMCPRouter(mcpRouter: MCPRouter): void {\n    this.mcpRouter = mcpRouter;\n\n    // Initialize MCP fallback reliability system\n    if (!this.mcpFallbackSystem) {\n      try {\n        this.mcpFallbackSystem = new MCPFallbackReliabilitySystem(mcpRouter);\n      } catch (error) {\n        // In test environments, the class might be mocked\n        console.warn(\"Failed to initialize MCP fallback system:\", error);\n        this.mcpFallbackSystem = null;\n      }\n    }\n\n    console.log(\"MCP router configured with fallback reliability system\");\n  }\n\n  /**\n   * Set cost optimizer (for cost-aware routing)\n   */\n  setCostOptimizer(costOptimizer: IntelligentRoutingCostOptimizer): void {\n    this.costOptimizer = costOptimizer;\n    console.log(\"Cost optimizer configured for intelligent routing\");\n  }\n\n  /**\n   * Get MCP fallback metrics\n   */\n  getMCPFallbackMetrics(): MCPFallbackMetrics | null {\n    return this.mcpFallbackSystem?.getFallbackMetrics() || null;\n  }\n\n  /**\n   * Validate MCP fallback reliability targets\n   */\n  async validateMCPFallbackReliability(): Promise<{\n    meetsTarget: boolean;\n    currentSuccessRate: number;\n    targetSuccessRate: number;\n    recommendations: string[];\n  } | null> {\n    return this.mcpFallbackSystem?.validateReliabilityTargets() || null;\n  }\n\n  /**\n   * Force MCP fallback health check and recovery\n   */\n  async forceMCPFallbackRecovery(): Promise<{\n    healthImproved: boolean;\n    actions: string[];\n  } | null> {\n    return this.mcpFallbackSystem?.forceHealthCheckAndRecovery() || null;\n  }\n\n  /**\n   * Get cost optimization metrics\n   */\n  getCostOptimizationMetrics(): any | null {\n    return this.costOptimizer?.getCostOptimizationMetrics() || null;\n  }\n\n  /**\n   * Get cost optimization status\n   */\n  getCostOptimizationStatus(): any | null {\n    return this.costOptimizer?.getCostOptimizationStatus() || null;\n  }\n\n  /**\n   * Check if cost reduction target is met\n   */\n  isCostReductionTargetMet(): boolean {\n    return this.costOptimizer?.isCostReductionTargetMet() || false;\n  }\n\n  /**\n   * Get current routing rules\n   */\n  getRoutingRules(): RoutingRule[] {\n    return [...this.routingRules];\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n    }\n\n    // Cleanup MCP fallback system\n    if (this.mcpFallbackSystem) {\n      this.mcpFallbackSystem.destroy();\n    }\n\n    // Cleanup cost optimizer\n    if (this.costOptimizer) {\n      this.costOptimizer.destroy();\n    }\n  }\n\n  // Private helper methods\n\n  private initializeMetrics(): RoutingEfficiency {\n    return {\n      totalRequests: 0,\n      directRouteUsage: 0,\n      mcpRouteUsage: 0,\n      fallbackUsage: 0,\n      averageLatency: 0,\n      successRate: 1.0,\n      costEfficiency: 1.0,\n      optimizationRecommendations: [],\n    };\n  }\n\n  private initializeHealthMonitoring(): void {\n    // Initialize health status for both routes\n    this.routeHealthStatus.set(\"direct\", {\n      route: \"direct\",\n      isHealthy: true,\n      latencyMs: 0,\n      successRate: 1.0,\n      lastCheck: new Date(),\n      consecutiveFailures: 0,\n    });\n\n    this.routeHealthStatus.set(\"mcp\", {\n      route: \"mcp\",\n      isHealthy: this.mcpRouter?.isAvailable() || false,\n      latencyMs: 0,\n      successRate: 1.0,\n      lastCheck: new Date(),\n      consecutiveFailures: 0,\n    });\n  }\n\n  private startHealthMonitoring(): void {\n    this.healthCheckInterval = setInterval(async () => {\n      try {\n        // Check both routes and log health status\n        const directHealth = await this.checkRouteHealth(\"direct\");\n        await this.auditTrail.logRouteHealthCheck(\n          \"direct\",\n          directHealth.isHealthy,\n          directHealth.latencyMs,\n          directHealth.successRate,\n          directHealth.consecutiveFailures,\n          directHealth.isHealthy\n            ? undefined\n            : \"Direct route health check failed\"\n        );\n\n        if (this.mcpRouter) {\n          const mcpHealth = await this.checkRouteHealth(\"mcp\");\n          await this.auditTrail.logRouteHealthCheck(\n            \"mcp\",\n            mcpHealth.isHealthy,\n            mcpHealth.latencyMs,\n            mcpHealth.successRate,\n            mcpHealth.consecutiveFailures,\n            mcpHealth.isHealthy ? undefined : \"MCP route health check failed\"\n          );\n        }\n\n        // Run optimization analysis\n        const recommendations = await this.optimizeRouting();\n        if (recommendations.length > 0) {\n          this.routingMetrics.optimizationRecommendations = recommendations;\n\n          // Log routing optimization to audit trail\n          await this.auditTrail.logRoutingOptimization(recommendations, {\n            totalRequests: this.routingMetrics.totalRequests,\n            directRouteUsage: this.routingMetrics.directRouteUsage,\n            mcpRouteUsage: this.routingMetrics.mcpRouteUsage,\n            fallbackUsage: this.routingMetrics.fallbackUsage,\n            averageLatency: this.routingMetrics.averageLatency,\n            successRate: this.routingMetrics.successRate,\n          });\n\n          console.log(\"Routing optimization recommendations:\", recommendations);\n        }\n      } catch (error) {\n        console.error(\"Health monitoring error:\", error);\n      }\n    }, 60000); // Check every minute\n  }\n\n  private updateMetrics(\n    decision: RoutingDecision,\n    response: SupportOperationResponse | null,\n    latencyMs: number,\n    success: boolean\n  ): void {\n    this.routingMetrics.totalRequests++;\n\n    // Update route usage\n    if (decision.selectedRoute === \"direct\") {\n      this.routingMetrics.directRouteUsage++;\n    } else {\n      this.routingMetrics.mcpRouteUsage++;\n    }\n\n    // Update fallback usage\n    if (decision.reason.includes(\"fallback\")) {\n      this.routingMetrics.fallbackUsage++;\n    }\n\n    // Update average latency (rolling average)\n    const totalLatency =\n      this.routingMetrics.averageLatency *\n        (this.routingMetrics.totalRequests - 1) +\n      latencyMs;\n    this.routingMetrics.averageLatency =\n      totalLatency / this.routingMetrics.totalRequests;\n\n    // Update success rate (rolling average)\n    const totalSuccess =\n      this.routingMetrics.successRate *\n        (this.routingMetrics.totalRequests - 1) +\n      (success ? 1 : 0);\n    this.routingMetrics.successRate =\n      totalSuccess / this.routingMetrics.totalRequests;\n\n    // Update cost efficiency (simplified calculation)\n    const directCostWeight = 1.0; // Direct Bedrock costs more\n    const mcpCostWeight = 0.3; // MCP is cheaper\n    const costWeight =\n      decision.selectedRoute === \"direct\" ? directCostWeight : mcpCostWeight;\n    const totalCost =\n      this.routingMetrics.costEfficiency *\n        (this.routingMetrics.totalRequests - 1) +\n      costWeight;\n    this.routingMetrics.costEfficiency =\n      totalCost / this.routingMetrics.totalRequests;\n  }\n\n  private logRoutingDecision(\n    decision: RoutingDecision,\n    request: SupportOperationRequest\n  ): void {\n    console.log(\n      `[IntelligentRouter] ${decision.correlationId}: ${request.operation}/${request.priority} -> ${decision.selectedRoute} (${decision.reason})`\n    );\n  }\n\n  private generateCorrelationId(): string {\n    return `router-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Validate GDPR compliance for routing decision\n   */\n  private async validateGDPRComplianceForRouting(\n    request: SupportOperationRequest,\n    rule: RoutingRule,\n    correlationId: string\n  ): Promise<void> {\n    try {\n      // Map operation type to hybrid routing path operation type\n      const operationType = this.mapOperationTypeToHybridPath(\n        request.operation\n      );\n\n      // Create routing path for primary route\n      const primaryRoutingPath: HybridRoutingPath = {\n        routeType:\n          rule.primaryRoute === \"direct\" ? \"direct_bedrock\" : \"mcp_integration\",\n        provider: \"bedrock\", // Default to bedrock for support operations\n        operationType,\n        priority: rule.priority,\n      };\n\n      // Validate GDPR compliance for primary route\n      const primaryValidation =\n        await this.gdprHybridValidator.validateBeforeRouting(\n          primaryRoutingPath,\n          `${correlationId}-primary`\n        );\n\n      if (!primaryValidation.allowed) {\n        // If primary route fails GDPR validation, check fallback\n        if (rule.fallbackRoute) {\n          const fallbackRoutingPath: HybridRoutingPath = {\n            routeType:\n              rule.fallbackRoute === \"direct\"\n                ? \"direct_bedrock\"\n                : \"mcp_integration\",\n            provider: \"bedrock\",\n            operationType,\n            priority: rule.priority,\n          };\n\n          const fallbackValidation =\n            await this.gdprHybridValidator.validateBeforeRouting(\n              fallbackRoutingPath,\n              `${correlationId}-fallback`\n            );\n\n          if (!fallbackValidation.allowed) {\n            throw new Error(\n              `Both primary and fallback routes fail GDPR compliance: Primary: ${primaryValidation.reason}, Fallback: ${fallbackValidation.reason}`\n            );\n          }\n        } else {\n          throw new Error(\n            `Primary route fails GDPR compliance and no fallback available: ${primaryValidation.reason}`\n          );\n        }\n      }\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n      throw new Error(\n        `GDPR compliance validation failed for routing: ${errorMessage}`\n      );\n    }\n  }\n\n  /**\n   * Map operation type to hybrid routing path operation type\n   */\n  private mapOperationTypeToHybridPath(\n    operation: OperationType\n  ): HybridRoutingPath[\"operationType\"] {\n    switch (operation) {\n      case \"emergency\":\n        return \"emergency\";\n      case \"infrastructure\":\n        return \"infrastructure\";\n      case \"meta_monitor\":\n        return \"meta_monitor\";\n      case \"implementation\":\n        return \"implementation\";\n      case \"standard\":\n        return \"standard_analysis\";\n      default:\n        return \"background_tasks\";\n    }\n  }\n}\n\n// Types are already exported as interfaces above\n"],"version":3}
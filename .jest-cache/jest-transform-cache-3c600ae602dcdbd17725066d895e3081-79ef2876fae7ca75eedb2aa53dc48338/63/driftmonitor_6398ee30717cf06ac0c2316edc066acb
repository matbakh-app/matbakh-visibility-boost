722205b443da6a1c47f5d3400ab496dc
"use strict";

/**
 * AI Drift Detection and Quality Monitoring System
 *
 * Implements comprehensive drift detection and quality monitoring for AI models:
 * - SageMaker Model Monitor integration for data drift
 * - Prompt drift detection (score distribution changes)
 * - Performance regression detection
 * - Automated alerting for quality degradation
 */
/* istanbul ignore next */
function cov_bxagruzm8() {
  var path = "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/drift-monitor.ts";
  var hash = "1cbe8a2b039391d22898f29637d2e92dc765cdff";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/drift-monitor.ts",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 62
        }
      },
      "1": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 30
        }
      },
      "2": {
        start: {
          line: 13,
          column: 16
        },
        end: {
          line: 13,
          column: 32
        }
      },
      "3": {
        start: {
          line: 14,
          column: 28
        },
        end: {
          line: 14,
          column: 65
        }
      },
      "4": {
        start: {
          line: 15,
          column: 27
        },
        end: {
          line: 15,
          column: 63
        }
      },
      "5": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 41
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 33
        }
      },
      "7": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 19
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 27,
          column: 109
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 56,
          column: 29
        }
      },
      "10": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 72,
          column: 11
        }
      },
      "11": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 55
        }
      },
      "12": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 71,
          column: 15
        }
      },
      "13": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 107,
          column: 11
        }
      },
      "14": {
        start: {
          line: 79,
          column: 27
        },
        end: {
          line: 79,
          column: 29
        }
      },
      "15": {
        start: {
          line: 80,
          column: 29
        },
        end: {
          line: 80,
          column: 77
        }
      },
      "16": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 83,
          column: 13
        }
      },
      "17": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 89
        }
      },
      "18": {
        start: {
          line: 85,
          column: 35
        },
        end: {
          line: 85,
          column: 80
        }
      },
      "19": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 87,
          column: 44
        }
      },
      "20": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 44
        }
      },
      "21": {
        start: {
          line: 89,
          column: 37
        },
        end: {
          line: 89,
          column: 84
        }
      },
      "22": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 91,
          column: 46
        }
      },
      "23": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 91,
          column: 46
        }
      },
      "24": {
        start: {
          line: 93,
          column: 37
        },
        end: {
          line: 93,
          column: 94
        }
      },
      "25": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 95,
          column: 46
        }
      },
      "26": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 95,
          column: 46
        }
      },
      "27": {
        start: {
          line: 97,
          column: 33
        },
        end: {
          line: 97,
          column: 87
        }
      },
      "28": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 99,
          column: 42
        }
      },
      "29": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 99,
          column: 42
        }
      },
      "30": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 61
        }
      },
      "31": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 105,
          column: 13
        }
      },
      "32": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 104,
          column: 44
        }
      },
      "33": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 26
        }
      },
      "34": {
        start: {
          line: 113,
          column: 27
        },
        end: {
          line: 113,
          column: 50
        }
      },
      "35": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 131,
          column: 9
        }
      },
      "36": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 130,
          column: 14
        }
      },
      "37": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "38": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 147,
          column: 14
        }
      },
      "39": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 149,
          column: 20
        }
      },
      "40": {
        start: {
          line: 155,
          column: 27
        },
        end: {
          line: 155,
          column: 57
        }
      },
      "41": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "42": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 172,
          column: 14
        }
      },
      "43": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "44": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 189,
          column: 14
        }
      },
      "45": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 20
        }
      },
      "46": {
        start: {
          line: 197,
          column: 34
        },
        end: {
          line: 197,
          column: 87
        }
      },
      "47": {
        start: {
          line: 198,
          column: 35
        },
        end: {
          line: 198,
          column: 89
        }
      },
      "48": {
        start: {
          line: 199,
          column: 36
        },
        end: {
          line: 199,
          column: 91
        }
      },
      "49": {
        start: {
          line: 200,
          column: 36
        },
        end: {
          line: 200,
          column: 38
        }
      },
      "50": {
        start: {
          line: 201,
          column: 35
        },
        end: {
          line: 201,
          column: 37
        }
      },
      "51": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 209,
          column: 9
        }
      },
      "52": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 102
        }
      },
      "53": {
        start: {
          line: 207,
          column: 13
        },
        end: {
          line: 209,
          column: 9
        }
      },
      "54": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 101
        }
      },
      "55": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 218,
          column: 9
        }
      },
      "56": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 213,
          column: 104
        }
      },
      "57": {
        start: {
          line: 215,
          column: 13
        },
        end: {
          line: 218,
          column: 9
        }
      },
      "58": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 103
        }
      },
      "59": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 227,
          column: 9
        }
      },
      "60": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 107
        }
      },
      "61": {
        start: {
          line: 224,
          column: 13
        },
        end: {
          line: 227,
          column: 9
        }
      },
      "62": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 106
        }
      },
      "63": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 245,
          column: 9
        }
      },
      "64": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 244,
          column: 14
        }
      },
      "65": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 262,
          column: 9
        }
      },
      "66": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 261,
          column: 14
        }
      },
      "67": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 263,
          column: 20
        }
      },
      "68": {
        start: {
          line: 269,
          column: 29
        },
        end: {
          line: 269,
          column: 64
        }
      },
      "69": {
        start: {
          line: 270,
          column: 30
        },
        end: {
          line: 270,
          column: 66
        }
      },
      "70": {
        start: {
          line: 271,
          column: 23
        },
        end: {
          line: 271,
          column: 25
        }
      },
      "71": {
        start: {
          line: 272,
          column: 23
        },
        end: {
          line: 272,
          column: 28
        }
      },
      "72": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 281,
          column: 9
        }
      },
      "73": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 101
        }
      },
      "74": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 276,
          column: 34
        }
      },
      "75": {
        start: {
          line: 278,
          column: 13
        },
        end: {
          line: 281,
          column: 9
        }
      },
      "76": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 279,
          column: 100
        }
      },
      "77": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 280,
          column: 32
        }
      },
      "78": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 291,
          column: 9
        }
      },
      "79": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 284,
          column: 95
        }
      },
      "80": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 34
        }
      },
      "81": {
        start: {
          line: 287,
          column: 13
        },
        end: {
          line: 291,
          column: 9
        }
      },
      "82": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 288,
          column: 94
        }
      },
      "83": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 290,
          column: 36
        }
      },
      "84": {
        start: {
          line: 290,
          column: 16
        },
        end: {
          line: 290,
          column: 36
        }
      },
      "85": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 309,
          column: 9
        }
      },
      "86": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 308,
          column: 14
        }
      },
      "87": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 310,
          column: 20
        }
      },
      "88": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 329,
          column: 11
        }
      },
      "89": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 328,
          column: 15
        }
      },
      "90": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 352,
          column: 11
        }
      },
      "91": {
        start: {
          line: 336,
          column: 31
        },
        end: {
          line: 347,
          column: 15
        }
      },
      "92": {
        start: {
          line: 336,
          column: 79
        },
        end: {
          line: 347,
          column: 13
        }
      },
      "93": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 351,
          column: 16
        }
      },
      "94": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 367,
          column: 11
        }
      },
      "95": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 366,
          column: 13
        }
      },
      "96": {
        start: {
          line: 360,
          column: 16
        },
        end: {
          line: 365,
          column: 17
        }
      },
      "97": {
        start: {
          line: 361,
          column: 20
        },
        end: {
          line: 361,
          column: 42
        }
      },
      "98": {
        start: {
          line: 364,
          column: 20
        },
        end: {
          line: 364,
          column: 72
        }
      },
      "99": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 373,
          column: 43
        }
      },
      "100": {
        start: {
          line: 380,
          column: 26
        },
        end: {
          line: 380,
          column: 80
        }
      },
      "101": {
        start: {
          line: 381,
          column: 25
        },
        end: {
          line: 381,
          column: 76
        }
      },
      "102": {
        start: {
          line: 382,
          column: 25
        },
        end: {
          line: 382,
          column: 76
        }
      },
      "103": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 384,
          column: 65
        }
      },
      "104": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 391,
          column: 21
        }
      },
      "105": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 391,
          column: 21
        }
      },
      "106": {
        start: {
          line: 392,
          column: 23
        },
        end: {
          line: 392,
          column: 54
        }
      },
      "107": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 393,
          column: 75
        }
      },
      "108": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 441,
          column: 11
        }
      },
      "109": {
        start: {
          line: 400,
          column: 38
        },
        end: {
          line: 400,
          column: 68
        }
      },
      "110": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 440,
          column: 13
        }
      },
      "111": {
        start: {
          line: 403,
          column: 16
        },
        end: {
          line: 405,
          column: 20
        }
      },
      "112": {
        start: {
          line: 406,
          column: 16
        },
        end: {
          line: 406,
          column: 41
        }
      },
      "113": {
        start: {
          line: 410,
          column: 16
        },
        end: {
          line: 438,
          column: 20
        }
      },
      "114": {
        start: {
          line: 439,
          column: 16
        },
        end: {
          line: 439,
          column: 41
        }
      },
      "115": {
        start: {
          line: 444,
          column: 0
        },
        end: {
          line: 444,
          column: 36
        }
      },
      "116": {
        start: {
          line: 445,
          column: 0
        },
        end: {
          line: 445,
          column: 31
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 51
          },
          end: {
            line: 57,
            column: 5
          }
        },
        line: 17
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        },
        loc: {
          start: {
            line: 61,
            column: 34
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 61
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 62,
            column: 55
          },
          end: {
            line: 62,
            column: 56
          }
        },
        loc: {
          start: {
            line: 62,
            column: 68
          },
          end: {
            line: 72,
            column: 9
          }
        },
        line: 62
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        loc: {
          start: {
            line: 77,
            column: 33
          },
          end: {
            line: 108,
            column: 5
          }
        },
        line: 77
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 78,
            column: 55
          },
          end: {
            line: 78,
            column: 56
          }
        },
        loc: {
          start: {
            line: 78,
            column: 68
          },
          end: {
            line: 107,
            column: 9
          }
        },
        line: 78
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 112,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        },
        loc: {
          start: {
            line: 112,
            column: 38
          },
          end: {
            line: 150,
            column: 5
          }
        },
        line: 112
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 154,
            column: 4
          },
          end: {
            line: 154,
            column: 5
          }
        },
        loc: {
          start: {
            line: 154,
            column: 40
          },
          end: {
            line: 192,
            column: 5
          }
        },
        line: 154
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 196,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        },
        loc: {
          start: {
            line: 196,
            column: 50
          },
          end: {
            line: 264,
            column: 5
          }
        },
        line: 196
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 268,
            column: 4
          },
          end: {
            line: 268,
            column: 5
          }
        },
        loc: {
          start: {
            line: 268,
            column: 47
          },
          end: {
            line: 311,
            column: 5
          }
        },
        line: 268
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 315,
            column: 4
          },
          end: {
            line: 315,
            column: 5
          }
        },
        loc: {
          start: {
            line: 315,
            column: 35
          },
          end: {
            line: 330,
            column: 5
          }
        },
        line: 315
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 316,
            column: 55
          },
          end: {
            line: 316,
            column: 56
          }
        },
        loc: {
          start: {
            line: 316,
            column: 68
          },
          end: {
            line: 329,
            column: 9
          }
        },
        line: 316
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 334,
            column: 4
          },
          end: {
            line: 334,
            column: 5
          }
        },
        loc: {
          start: {
            line: 334,
            column: 48
          },
          end: {
            line: 353,
            column: 5
          }
        },
        line: 334
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 335,
            column: 55
          },
          end: {
            line: 335,
            column: 56
          }
        },
        loc: {
          start: {
            line: 335,
            column: 68
          },
          end: {
            line: 352,
            column: 9
          }
        },
        line: 335
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 336,
            column: 59
          },
          end: {
            line: 336,
            column: 60
          }
        },
        loc: {
          start: {
            line: 336,
            column: 79
          },
          end: {
            line: 347,
            column: 13
          }
        },
        line: 336
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 357,
            column: 4
          },
          end: {
            line: 357,
            column: 5
          }
        },
        loc: {
          start: {
            line: 357,
            column: 21
          },
          end: {
            line: 368,
            column: 5
          }
        },
        line: 357
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 358,
            column: 55
          },
          end: {
            line: 358,
            column: 56
          }
        },
        loc: {
          start: {
            line: 358,
            column: 68
          },
          end: {
            line: 367,
            column: 9
          }
        },
        line: 358
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 372,
            column: 4
          },
          end: {
            line: 372,
            column: 5
          }
        },
        loc: {
          start: {
            line: 372,
            column: 22
          },
          end: {
            line: 374,
            column: 5
          }
        },
        line: 372
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 378,
            column: 4
          },
          end: {
            line: 378,
            column: 5
          }
        },
        loc: {
          start: {
            line: 378,
            column: 56
          },
          end: {
            line: 385,
            column: 5
          }
        },
        line: 378
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 389,
            column: 4
          },
          end: {
            line: 389,
            column: 5
          }
        },
        loc: {
          start: {
            line: 389,
            column: 78
          },
          end: {
            line: 394,
            column: 5
          }
        },
        line: 389
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 398,
            column: 4
          },
          end: {
            line: 398,
            column: 5
          }
        },
        loc: {
          start: {
            line: 398,
            column: 68
          },
          end: {
            line: 442,
            column: 5
          }
        },
        line: 398
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 399,
            column: 55
          },
          end: {
            line: 399,
            column: 56
          }
        },
        loc: {
          start: {
            line: 399,
            column: 68
          },
          end: {
            line: 441,
            column: 9
          }
        },
        line: 399
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 24,
            column: 18
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 21,
            column: 22
          }
        }, {
          start: {
            line: 22,
            column: 16
          },
          end: {
            line: 24,
            column: 18
          }
        }],
        line: 21
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 28
          },
          end: {
            line: 23,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 28
          },
          end: {
            line: 23,
            column: 50
          }
        }, {
          start: {
            line: 23,
            column: 54
          },
          end: {
            line: 23,
            column: 68
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 26,
            column: 12
          },
          end: {
            line: 27,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 12
          },
          end: {
            line: 26,
            column: 21
          }
        }, {
          start: {
            line: 27,
            column: 16
          },
          end: {
            line: 27,
            column: 108
          }
        }],
        line: 26
      },
      "3": {
        loc: {
          start: {
            line: 27,
            column: 65
          },
          end: {
            line: 27,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 65
          },
          end: {
            line: 27,
            column: 87
          }
        }, {
          start: {
            line: 27,
            column: 91
          },
          end: {
            line: 27,
            column: 105
          }
        }],
        line: 27
      },
      "4": {
        loc: {
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 83,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 83,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "5": {
        loc: {
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 87,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 87,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "6": {
        loc: {
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 91,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 91,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "7": {
        loc: {
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 95,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 95,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "8": {
        loc: {
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 99,
            column: 42
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 99,
            column: 42
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "9": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 131,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 131,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "10": {
        loc: {
          start: {
            line: 132,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      },
      "11": {
        loc: {
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "12": {
        loc: {
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "13": {
        loc: {
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 209,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 209,
            column: 9
          }
        }, {
          start: {
            line: 207,
            column: 13
          },
          end: {
            line: 209,
            column: 9
          }
        }],
        line: 203
      },
      "14": {
        loc: {
          start: {
            line: 207,
            column: 13
          },
          end: {
            line: 209,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 13
          },
          end: {
            line: 209,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "15": {
        loc: {
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 218,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 218,
            column: 9
          }
        }, {
          start: {
            line: 215,
            column: 13
          },
          end: {
            line: 218,
            column: 9
          }
        }],
        line: 211
      },
      "16": {
        loc: {
          start: {
            line: 215,
            column: 13
          },
          end: {
            line: 218,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 13
          },
          end: {
            line: 218,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "17": {
        loc: {
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 227,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 227,
            column: 9
          }
        }, {
          start: {
            line: 224,
            column: 13
          },
          end: {
            line: 227,
            column: 9
          }
        }],
        line: 220
      },
      "18": {
        loc: {
          start: {
            line: 224,
            column: 13
          },
          end: {
            line: 227,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 13
          },
          end: {
            line: 227,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "19": {
        loc: {
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "20": {
        loc: {
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 262,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 262,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "21": {
        loc: {
          start: {
            line: 274,
            column: 8
          },
          end: {
            line: 281,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 274,
            column: 8
          },
          end: {
            line: 281,
            column: 9
          }
        }, {
          start: {
            line: 278,
            column: 13
          },
          end: {
            line: 281,
            column: 9
          }
        }],
        line: 274
      },
      "22": {
        loc: {
          start: {
            line: 278,
            column: 13
          },
          end: {
            line: 281,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 13
          },
          end: {
            line: 281,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "23": {
        loc: {
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        }, {
          start: {
            line: 287,
            column: 13
          },
          end: {
            line: 291,
            column: 9
          }
        }],
        line: 283
      },
      "24": {
        loc: {
          start: {
            line: 287,
            column: 13
          },
          end: {
            line: 291,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 287,
            column: 13
          },
          end: {
            line: 291,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 287
      },
      "25": {
        loc: {
          start: {
            line: 289,
            column: 12
          },
          end: {
            line: 290,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 289,
            column: 12
          },
          end: {
            line: 290,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 289
      },
      "26": {
        loc: {
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 309,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 309,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "27": {
        loc: {
          start: {
            line: 389,
            column: 55
          },
          end: {
            line: 389,
            column: 76
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 389,
            column: 72
          },
          end: {
            line: 389,
            column: 76
          }
        }],
        line: 389
      },
      "28": {
        loc: {
          start: {
            line: 390,
            column: 8
          },
          end: {
            line: 391,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 390,
            column: 8
          },
          end: {
            line: 391,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 390
      },
      "29": {
        loc: {
          start: {
            line: 393,
            column: 15
          },
          end: {
            line: 393,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 393,
            column: 32
          },
          end: {
            line: 393,
            column: 52
          }
        }, {
          start: {
            line: 393,
            column: 55
          },
          end: {
            line: 393,
            column: 74
          }
        }],
        line: 393
      },
      "30": {
        loc: {
          start: {
            line: 437,
            column: 29
          },
          end: {
            line: 437,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 437,
            column: 29
          },
          end: {
            line: 437,
            column: 69
          }
        }, {
          start: {
            line: 437,
            column: 73
          },
          end: {
            line: 437,
            column: 75
          }
        }],
        line: 437
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/drift-monitor.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/drift-monitor.ts"],
      sourcesContent: ["/**\n * AI Drift Detection and Quality Monitoring System\n *\n * Implements comprehensive drift detection and quality monitoring for AI models:\n * - SageMaker Model Monitor integration for data drift\n * - Prompt drift detection (score distribution changes)\n * - Performance regression detection\n * - Automated alerting for quality degradation\n */\n\nimport {\n  CloudWatchClient,\n  MetricDatum,\n  PutMetricDataCommand,\n} from \"@aws-sdk/client-cloudwatch\";\nimport {\n  CreateModelQualityJobDefinitionCommand,\n  DescribeModelQualityJobDefinitionCommand,\n  SageMakerClient,\n} from \"@aws-sdk/client-sagemaker\";\n\nexport interface DriftMetrics {\n  timestamp: Date;\n  modelId: string;\n  provider: string;\n\n  // Data Drift Metrics\n  dataDrift: {\n    score: number;\n    threshold: number;\n    features: Array<{\n      name: string;\n      driftScore: number;\n      baseline: number;\n      current: number;\n    }>;\n  };\n\n  // Prompt Drift Metrics\n  promptDrift: {\n    scoreDistribution: {\n      mean: number;\n      std: number;\n      p50: number;\n      p95: number;\n      p99: number;\n    };\n    baseline: {\n      mean: number;\n      std: number;\n      p50: number;\n      p95: number;\n      p99: number;\n    };\n    driftScore: number;\n  };\n\n  // Performance Regression\n  performanceRegression: {\n    latency: {\n      current: number;\n      baseline: number;\n      regressionScore: number;\n    };\n    accuracy: {\n      current: number;\n      baseline: number;\n      regressionScore: number;\n    };\n    errorRate: {\n      current: number;\n      baseline: number;\n      regressionScore: number;\n    };\n  };\n\n  // Quality Metrics\n  qualityMetrics: {\n    overallScore: number;\n    toxicityScore: number;\n    coherenceScore: number;\n    relevanceScore: number;\n    factualityScore: number;\n  };\n}\n\nexport interface DriftAlert {\n  id: string;\n  timestamp: Date;\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n  type:\n    | \"data_drift\"\n    | \"prompt_drift\"\n    | \"performance_regression\"\n    | \"quality_degradation\";\n  modelId: string;\n  provider: string;\n  message: string;\n  metrics: Partial<DriftMetrics>;\n  recommendations: string[];\n}\n\nexport interface DriftThresholds {\n  dataDrift: {\n    warning: number;\n    critical: number;\n  };\n  promptDrift: {\n    warning: number;\n    critical: number;\n  };\n  performanceRegression: {\n    latency: {\n      warning: number;\n      critical: number;\n    };\n    accuracy: {\n      warning: number;\n      critical: number;\n    };\n    errorRate: {\n      warning: number;\n      critical: number;\n    };\n  };\n  qualityDegradation: {\n    overall: {\n      warning: number;\n      critical: number;\n    };\n    toxicity: {\n      warning: number;\n      critical: number;\n    };\n  };\n}\n\nexport class DriftMonitor {\n  private cloudWatch: CloudWatchClient;\n  private sageMaker: SageMakerClient;\n  private thresholds: DriftThresholds;\n  private baselineMetrics: Map<string, DriftMetrics> = new Map();\n  private alertCallbacks: Array<(alert: DriftAlert) => Promise<void>> = [];\n\n  constructor(\n    cloudWatch?: CloudWatchClient,\n    sageMaker?: SageMakerClient,\n    thresholds?: Partial<DriftThresholds>\n  ) {\n    this.cloudWatch =\n      cloudWatch ||\n      new CloudWatchClient({\n        region: process.env.AWS_REGION || \"eu-central-1\",\n      });\n    this.sageMaker =\n      sageMaker ||\n      new SageMakerClient({ region: process.env.AWS_REGION || \"eu-central-1\" });\n\n    this.thresholds = {\n      dataDrift: {\n        warning: 0.3,\n        critical: 0.5,\n      },\n      promptDrift: {\n        warning: 0.2,\n        critical: 0.4,\n      },\n      performanceRegression: {\n        latency: {\n          warning: 0.2, // 20% increase\n          critical: 0.5, // 50% increase\n        },\n        accuracy: {\n          warning: 0.1, // 10% decrease\n          critical: 0.2, // 20% decrease\n        },\n        errorRate: {\n          warning: 0.1, // 10% increase\n          critical: 0.2, // 20% increase\n        },\n      },\n      qualityDegradation: {\n        overall: {\n          warning: 0.8,\n          critical: 0.7,\n        },\n        toxicity: {\n          warning: 0.1,\n          critical: 0.2,\n        },\n      },\n      ...thresholds,\n    };\n  }\n\n  /**\n   * Set baseline metrics for a model\n   */\n  async setBaseline(modelId: string, metrics: DriftMetrics): Promise<void> {\n    this.baselineMetrics.set(modelId, metrics);\n\n    // Store baseline in CloudWatch for persistence\n    await this.publishMetrics(\"AI/Drift/Baseline\", modelId, {\n      DataDriftBaseline: metrics.dataDrift.score,\n      PromptDriftBaseline: metrics.promptDrift.driftScore,\n      LatencyBaseline: metrics.performanceRegression.latency.baseline,\n      AccuracyBaseline: metrics.performanceRegression.accuracy.baseline,\n      QualityBaseline: metrics.qualityMetrics.overallScore,\n    });\n  }\n\n  /**\n   * Monitor drift for current metrics against baseline\n   */\n  async monitorDrift(currentMetrics: DriftMetrics): Promise<DriftAlert[]> {\n    const alerts: DriftAlert[] = [];\n    const baseline = this.baselineMetrics.get(currentMetrics.modelId);\n\n    if (!baseline) {\n      throw new Error(`No baseline found for model ${currentMetrics.modelId}`);\n    }\n\n    // Check data drift\n    const dataDriftAlert = this.checkDataDrift(currentMetrics, baseline);\n    if (dataDriftAlert) alerts.push(dataDriftAlert);\n\n    // Check prompt drift\n    const promptDriftAlert = this.checkPromptDrift(currentMetrics, baseline);\n    if (promptDriftAlert) alerts.push(promptDriftAlert);\n\n    // Check performance regression\n    const performanceAlert = this.checkPerformanceRegression(\n      currentMetrics,\n      baseline\n    );\n    if (performanceAlert) alerts.push(performanceAlert);\n\n    // Check quality degradation\n    const qualityAlert = this.checkQualityDegradation(currentMetrics, baseline);\n    if (qualityAlert) alerts.push(qualityAlert);\n\n    // Publish current metrics to CloudWatch\n    await this.publishCurrentMetrics(currentMetrics);\n\n    // Send alerts\n    for (const alert of alerts) {\n      await this.sendAlert(alert);\n    }\n\n    return alerts;\n  }\n\n  /**\n   * Check for data drift\n   */\n  private checkDataDrift(\n    current: DriftMetrics,\n    baseline: DriftMetrics\n  ): DriftAlert | null {\n    const driftScore = current.dataDrift.score;\n\n    if (driftScore >= this.thresholds.dataDrift.critical) {\n      return {\n        id: `data-drift-${current.modelId}-${Date.now()}`,\n        timestamp: new Date(),\n        severity: \"critical\",\n        type: \"data_drift\",\n        modelId: current.modelId,\n        provider: current.provider,\n        message: `Critical data drift detected: score ${driftScore.toFixed(\n          3\n        )} exceeds threshold ${this.thresholds.dataDrift.critical}`,\n        metrics: { dataDrift: current.dataDrift },\n        recommendations: [\n          \"Review input data distribution changes\",\n          \"Consider retraining the model with recent data\",\n          \"Implement data preprocessing adjustments\",\n          \"Monitor feature importance changes\",\n        ],\n      };\n    }\n\n    if (driftScore >= this.thresholds.dataDrift.warning) {\n      return {\n        id: `data-drift-${current.modelId}-${Date.now()}`,\n        timestamp: new Date(),\n        severity: \"medium\",\n        type: \"data_drift\",\n        modelId: current.modelId,\n        provider: current.provider,\n        message: `Data drift warning: score ${driftScore.toFixed(\n          3\n        )} exceeds threshold ${this.thresholds.dataDrift.warning}`,\n        metrics: { dataDrift: current.dataDrift },\n        recommendations: [\n          \"Monitor data distribution trends\",\n          \"Prepare for potential model retraining\",\n          \"Review data quality checks\",\n        ],\n      };\n    }\n\n    return null;\n  }\n\n  /**\n   * Check for prompt drift (score distribution changes)\n   */\n  private checkPromptDrift(\n    current: DriftMetrics,\n    baseline: DriftMetrics\n  ): DriftAlert | null {\n    const driftScore = current.promptDrift.driftScore;\n\n    if (driftScore >= this.thresholds.promptDrift.critical) {\n      return {\n        id: `prompt-drift-${current.modelId}-${Date.now()}`,\n        timestamp: new Date(),\n        severity: \"critical\",\n        type: \"prompt_drift\",\n        modelId: current.modelId,\n        provider: current.provider,\n        message: `Critical prompt drift detected: score ${driftScore.toFixed(\n          3\n        )} exceeds threshold ${this.thresholds.promptDrift.critical}`,\n        metrics: { promptDrift: current.promptDrift },\n        recommendations: [\n          \"Review prompt template changes\",\n          \"Analyze user query pattern shifts\",\n          \"Update prompt engineering strategies\",\n          \"Consider A/B testing new prompt variants\",\n        ],\n      };\n    }\n\n    if (driftScore >= this.thresholds.promptDrift.warning) {\n      return {\n        id: `prompt-drift-${current.modelId}-${Date.now()}`,\n        timestamp: new Date(),\n        severity: \"medium\",\n        type: \"prompt_drift\",\n        modelId: current.modelId,\n        provider: current.provider,\n        message: `Prompt drift warning: score ${driftScore.toFixed(\n          3\n        )} exceeds threshold ${this.thresholds.promptDrift.warning}`,\n        metrics: { promptDrift: current.promptDrift },\n        recommendations: [\n          \"Monitor prompt performance trends\",\n          \"Review recent prompt modifications\",\n          \"Prepare prompt optimization strategies\",\n        ],\n      };\n    }\n\n    return null;\n  }\n\n  /**\n   * Check for performance regression\n   */\n  private checkPerformanceRegression(\n    current: DriftMetrics,\n    baseline: DriftMetrics\n  ): DriftAlert | null {\n    const latencyRegression =\n      current.performanceRegression.latency.regressionScore;\n    const accuracyRegression =\n      current.performanceRegression.accuracy.regressionScore;\n    const errorRateRegression =\n      current.performanceRegression.errorRate.regressionScore;\n\n    const criticalRegressions = [];\n    const warningRegressions = [];\n\n    // Check latency regression\n    if (\n      latencyRegression >=\n      this.thresholds.performanceRegression.latency.critical\n    ) {\n      criticalRegressions.push(\n        `latency increased by ${(latencyRegression * 100).toFixed(1)}%`\n      );\n    } else if (\n      latencyRegression >= this.thresholds.performanceRegression.latency.warning\n    ) {\n      warningRegressions.push(\n        `latency increased by ${(latencyRegression * 100).toFixed(1)}%`\n      );\n    }\n\n    // Check accuracy regression\n    if (\n      accuracyRegression >=\n      this.thresholds.performanceRegression.accuracy.critical\n    ) {\n      criticalRegressions.push(\n        `accuracy decreased by ${(accuracyRegression * 100).toFixed(1)}%`\n      );\n    } else if (\n      accuracyRegression >=\n      this.thresholds.performanceRegression.accuracy.warning\n    ) {\n      warningRegressions.push(\n        `accuracy decreased by ${(accuracyRegression * 100).toFixed(1)}%`\n      );\n    }\n\n    // Check error rate regression\n    if (\n      errorRateRegression >=\n      this.thresholds.performanceRegression.errorRate.critical\n    ) {\n      criticalRegressions.push(\n        `error rate increased by ${(errorRateRegression * 100).toFixed(1)}%`\n      );\n    } else if (\n      errorRateRegression >=\n      this.thresholds.performanceRegression.errorRate.warning\n    ) {\n      warningRegressions.push(\n        `error rate increased by ${(errorRateRegression * 100).toFixed(1)}%`\n      );\n    }\n\n    if (criticalRegressions.length > 0) {\n      return {\n        id: `performance-regression-${current.modelId}-${Date.now()}`,\n        timestamp: new Date(),\n        severity: \"critical\",\n        type: \"performance_regression\",\n        modelId: current.modelId,\n        provider: current.provider,\n        message: `Critical performance regression: ${criticalRegressions.join(\n          \", \"\n        )}`,\n        metrics: { performanceRegression: current.performanceRegression },\n        recommendations: [\n          \"Investigate recent model or infrastructure changes\",\n          \"Consider rolling back to previous model version\",\n          \"Review system resource allocation\",\n          \"Implement performance optimization strategies\",\n        ],\n      };\n    }\n\n    if (warningRegressions.length > 0) {\n      return {\n        id: `performance-regression-${current.modelId}-${Date.now()}`,\n        timestamp: new Date(),\n        severity: \"medium\",\n        type: \"performance_regression\",\n        modelId: current.modelId,\n        provider: current.provider,\n        message: `Performance regression warning: ${warningRegressions.join(\n          \", \"\n        )}`,\n        metrics: { performanceRegression: current.performanceRegression },\n        recommendations: [\n          \"Monitor performance trends closely\",\n          \"Review recent changes for impact\",\n          \"Prepare performance optimization plans\",\n        ],\n      };\n    }\n\n    return null;\n  }\n\n  /**\n   * Check for quality degradation\n   */\n  private checkQualityDegradation(\n    current: DriftMetrics,\n    baseline: DriftMetrics\n  ): DriftAlert | null {\n    const overallScore = current.qualityMetrics.overallScore;\n    const toxicityScore = current.qualityMetrics.toxicityScore;\n\n    const issues = [];\n    let severity: \"low\" | \"medium\" | \"high\" | \"critical\" = \"low\";\n\n    // Check overall quality\n    if (overallScore <= this.thresholds.qualityDegradation.overall.critical) {\n      issues.push(\n        `overall quality score ${overallScore.toFixed(\n          3\n        )} below critical threshold`\n      );\n      severity = \"critical\";\n    } else if (\n      overallScore <= this.thresholds.qualityDegradation.overall.warning\n    ) {\n      issues.push(\n        `overall quality score ${overallScore.toFixed(\n          3\n        )} below warning threshold`\n      );\n      severity = \"medium\";\n    }\n\n    // Check toxicity\n    if (toxicityScore >= this.thresholds.qualityDegradation.toxicity.critical) {\n      issues.push(\n        `toxicity score ${toxicityScore.toFixed(3)} above critical threshold`\n      );\n      severity = \"critical\";\n    } else if (\n      toxicityScore >= this.thresholds.qualityDegradation.toxicity.warning\n    ) {\n      issues.push(\n        `toxicity score ${toxicityScore.toFixed(3)} above warning threshold`\n      );\n      if (severity === \"low\") severity = \"medium\";\n    }\n\n    if (issues.length > 0) {\n      return {\n        id: `quality-degradation-${current.modelId}-${Date.now()}`,\n        timestamp: new Date(),\n        severity,\n        type: \"quality_degradation\",\n        modelId: current.modelId,\n        provider: current.provider,\n        message: `Quality degradation detected: ${issues.join(\", \")}`,\n        metrics: { qualityMetrics: current.qualityMetrics },\n        recommendations: [\n          \"Review model output quality samples\",\n          \"Implement additional content filtering\",\n          \"Consider fine-tuning or prompt adjustments\",\n          \"Monitor user feedback and satisfaction\",\n        ],\n      };\n    }\n\n    return null;\n  }\n\n  /**\n   * Publish current metrics to CloudWatch\n   */\n  private async publishCurrentMetrics(metrics: DriftMetrics): Promise<void> {\n    await this.publishMetrics(\"AI/Drift/Current\", metrics.modelId, {\n      DataDriftScore: metrics.dataDrift.score,\n      PromptDriftScore: metrics.promptDrift.driftScore,\n      LatencyRegression: metrics.performanceRegression.latency.regressionScore,\n      AccuracyRegression:\n        metrics.performanceRegression.accuracy.regressionScore,\n      ErrorRateRegression:\n        metrics.performanceRegression.errorRate.regressionScore,\n      OverallQuality: metrics.qualityMetrics.overallScore,\n      ToxicityScore: metrics.qualityMetrics.toxicityScore,\n      CoherenceScore: metrics.qualityMetrics.coherenceScore,\n      RelevanceScore: metrics.qualityMetrics.relevanceScore,\n      FactualityScore: metrics.qualityMetrics.factualityScore,\n    });\n  }\n\n  /**\n   * Publish metrics to CloudWatch\n   */\n  private async publishMetrics(\n    namespace: string,\n    modelId: string,\n    metrics: Record<string, number>\n  ): Promise<void> {\n    const metricData: MetricDatum[] = Object.entries(metrics).map(\n      ([name, value]) => ({\n        MetricName: name,\n        Value: value,\n        Unit: \"None\",\n        Dimensions: [\n          {\n            Name: \"ModelId\",\n            Value: modelId,\n          },\n        ],\n        Timestamp: new Date(),\n      })\n    );\n\n    await this.cloudWatch.send(\n      new PutMetricDataCommand({\n        Namespace: namespace,\n        MetricData: metricData,\n      })\n    );\n  }\n\n  /**\n   * Send alert through registered callbacks\n   */\n  private async sendAlert(alert: DriftAlert): Promise<void> {\n    for (const callback of this.alertCallbacks) {\n      try {\n        await callback(alert);\n      } catch (error) {\n        console.error(\"Failed to send drift alert:\", error);\n      }\n    }\n  }\n\n  /**\n   * Register alert callback\n   */\n  onAlert(callback: (alert: DriftAlert) => Promise<void>): void {\n    this.alertCallbacks.push(callback);\n  }\n\n  /**\n   * Calculate prompt drift score based on distribution changes\n   */\n  static calculatePromptDriftScore(\n    current: DriftMetrics[\"promptDrift\"][\"scoreDistribution\"],\n    baseline: DriftMetrics[\"promptDrift\"][\"baseline\"]\n  ): number {\n    // Calculate KL divergence approximation for distribution drift\n    const meanDrift = Math.abs(current.mean - baseline.mean) / baseline.mean;\n    const stdDrift = Math.abs(current.std - baseline.std) / baseline.std;\n    const p95Drift = Math.abs(current.p95 - baseline.p95) / baseline.p95;\n\n    // Weighted combination of distribution changes\n    return meanDrift * 0.4 + stdDrift * 0.3 + p95Drift * 0.3;\n  }\n\n  /**\n   * Calculate performance regression score\n   */\n  static calculateRegressionScore(\n    current: number,\n    baseline: number,\n    higherIsBetter: boolean = true\n  ): number {\n    if (baseline === 0) return 0;\n\n    const change = (current - baseline) / baseline;\n    return higherIsBetter ? Math.max(0, -change) : Math.max(0, change);\n  }\n\n  /**\n   * Setup SageMaker Model Monitor for data drift detection\n   */\n  async setupSageMakerMonitor(\n    modelName: string,\n    endpointName: string,\n    baselineDataUri: string\n  ): Promise<string> {\n    const jobDefinitionName = `${modelName}-quality-monitor`;\n\n    try {\n      // Check if job definition already exists\n      await this.sageMaker.send(\n        new DescribeModelQualityJobDefinitionCommand({\n          JobDefinitionName: jobDefinitionName,\n        })\n      );\n\n      return jobDefinitionName;\n    } catch (error) {\n      // Job definition doesn't exist, create it\n      await this.sageMaker.send(\n        new CreateModelQualityJobDefinitionCommand({\n          JobDefinitionName: jobDefinitionName,\n          ModelQualityAppSpecification: {\n            ImageUri:\n              \"156813124566.dkr.ecr.eu-central-1.amazonaws.com/sagemaker-model-monitor-analyzer\",\n          },\n          ModelQualityJobInput: {\n            EndpointInput: {\n              EndpointName: endpointName,\n              LocalPath: \"/opt/ml/processing/input/endpoint\",\n            },\n            GroundTruthS3Input: {\n              S3Uri: baselineDataUri,\n            },\n          },\n          ModelQualityJobOutputConfig: {\n            S3Output: {\n              S3Uri: `s3://matbakh-ai-monitoring/${modelName}/quality-reports/`,\n              LocalPath: \"/opt/ml/processing/output\",\n            },\n          },\n          JobResources: {\n            ClusterConfig: {\n              InstanceCount: 1,\n              InstanceType: \"ml.m5.xlarge\",\n              VolumeSizeInGB: 20,\n            },\n          },\n          RoleArn: process.env.SAGEMAKER_EXECUTION_ROLE_ARN || \"\",\n        })\n      );\n\n      return jobDefinitionName;\n    }\n  }\n}\n\nexport default DriftMonitor;\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1cbe8a2b039391d22898f29637d2e92dc765cdff"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_bxagruzm8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_bxagruzm8();
cov_bxagruzm8().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_bxagruzm8().s[1]++;
exports.DriftMonitor = void 0;
const tslib_1 =
/* istanbul ignore next */
(cov_bxagruzm8().s[2]++, require("tslib"));
const client_cloudwatch_1 =
/* istanbul ignore next */
(cov_bxagruzm8().s[3]++, require("@aws-sdk/client-cloudwatch"));
const client_sagemaker_1 =
/* istanbul ignore next */
(cov_bxagruzm8().s[4]++, require("@aws-sdk/client-sagemaker"));
class DriftMonitor {
  constructor(cloudWatch, sageMaker, thresholds) {
    /* istanbul ignore next */
    cov_bxagruzm8().f[0]++;
    cov_bxagruzm8().s[5]++;
    this.baselineMetrics = new Map();
    /* istanbul ignore next */
    cov_bxagruzm8().s[6]++;
    this.alertCallbacks = [];
    /* istanbul ignore next */
    cov_bxagruzm8().s[7]++;
    this.cloudWatch =
    /* istanbul ignore next */
    (cov_bxagruzm8().b[0][0]++, cloudWatch) ||
    /* istanbul ignore next */
    (cov_bxagruzm8().b[0][1]++, new client_cloudwatch_1.CloudWatchClient({
      region:
      /* istanbul ignore next */
      (cov_bxagruzm8().b[1][0]++, process.env.AWS_REGION) ||
      /* istanbul ignore next */
      (cov_bxagruzm8().b[1][1]++, "eu-central-1")
    }));
    /* istanbul ignore next */
    cov_bxagruzm8().s[8]++;
    this.sageMaker =
    /* istanbul ignore next */
    (cov_bxagruzm8().b[2][0]++, sageMaker) ||
    /* istanbul ignore next */
    (cov_bxagruzm8().b[2][1]++, new client_sagemaker_1.SageMakerClient({
      region:
      /* istanbul ignore next */
      (cov_bxagruzm8().b[3][0]++, process.env.AWS_REGION) ||
      /* istanbul ignore next */
      (cov_bxagruzm8().b[3][1]++, "eu-central-1")
    }));
    /* istanbul ignore next */
    cov_bxagruzm8().s[9]++;
    this.thresholds = Object.assign({
      dataDrift: {
        warning: 0.3,
        critical: 0.5
      },
      promptDrift: {
        warning: 0.2,
        critical: 0.4
      },
      performanceRegression: {
        latency: {
          warning: 0.2,
          // 20% increase
          critical: 0.5 // 50% increase
        },
        accuracy: {
          warning: 0.1,
          // 10% decrease
          critical: 0.2 // 20% decrease
        },
        errorRate: {
          warning: 0.1,
          // 10% increase
          critical: 0.2 // 20% increase
        }
      },
      qualityDegradation: {
        overall: {
          warning: 0.8,
          critical: 0.7
        },
        toxicity: {
          warning: 0.1,
          critical: 0.2
        }
      }
    }, thresholds);
  }
  /**
   * Set baseline metrics for a model
   */
  setBaseline(modelId, metrics) {
    /* istanbul ignore next */
    cov_bxagruzm8().f[1]++;
    cov_bxagruzm8().s[10]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_bxagruzm8().f[2]++;
      cov_bxagruzm8().s[11]++;
      this.baselineMetrics.set(modelId, metrics);
      // Store baseline in CloudWatch for persistence
      /* istanbul ignore next */
      cov_bxagruzm8().s[12]++;
      yield this.publishMetrics("AI/Drift/Baseline", modelId, {
        DataDriftBaseline: metrics.dataDrift.score,
        PromptDriftBaseline: metrics.promptDrift.driftScore,
        LatencyBaseline: metrics.performanceRegression.latency.baseline,
        AccuracyBaseline: metrics.performanceRegression.accuracy.baseline,
        QualityBaseline: metrics.qualityMetrics.overallScore
      });
    });
  }
  /**
   * Monitor drift for current metrics against baseline
   */
  monitorDrift(currentMetrics) {
    /* istanbul ignore next */
    cov_bxagruzm8().f[3]++;
    cov_bxagruzm8().s[13]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_bxagruzm8().f[4]++;
      const alerts =
      /* istanbul ignore next */
      (cov_bxagruzm8().s[14]++, []);
      const baseline =
      /* istanbul ignore next */
      (cov_bxagruzm8().s[15]++, this.baselineMetrics.get(currentMetrics.modelId));
      /* istanbul ignore next */
      cov_bxagruzm8().s[16]++;
      if (!baseline) {
        /* istanbul ignore next */
        cov_bxagruzm8().b[4][0]++;
        cov_bxagruzm8().s[17]++;
        throw new Error(`No baseline found for model ${currentMetrics.modelId}`);
      } else
      /* istanbul ignore next */
      {
        cov_bxagruzm8().b[4][1]++;
      }
      // Check data drift
      const dataDriftAlert =
      /* istanbul ignore next */
      (cov_bxagruzm8().s[18]++, this.checkDataDrift(currentMetrics, baseline));
      /* istanbul ignore next */
      cov_bxagruzm8().s[19]++;
      if (dataDriftAlert) {
        /* istanbul ignore next */
        cov_bxagruzm8().b[5][0]++;
        cov_bxagruzm8().s[20]++;
        alerts.push(dataDriftAlert);
      } else
      /* istanbul ignore next */
      {
        cov_bxagruzm8().b[5][1]++;
      }
      // Check prompt drift
      const promptDriftAlert =
      /* istanbul ignore next */
      (cov_bxagruzm8().s[21]++, this.checkPromptDrift(currentMetrics, baseline));
      /* istanbul ignore next */
      cov_bxagruzm8().s[22]++;
      if (promptDriftAlert) {
        /* istanbul ignore next */
        cov_bxagruzm8().b[6][0]++;
        cov_bxagruzm8().s[23]++;
        alerts.push(promptDriftAlert);
      } else
      /* istanbul ignore next */
      {
        cov_bxagruzm8().b[6][1]++;
      }
      // Check performance regression
      const performanceAlert =
      /* istanbul ignore next */
      (cov_bxagruzm8().s[24]++, this.checkPerformanceRegression(currentMetrics, baseline));
      /* istanbul ignore next */
      cov_bxagruzm8().s[25]++;
      if (performanceAlert) {
        /* istanbul ignore next */
        cov_bxagruzm8().b[7][0]++;
        cov_bxagruzm8().s[26]++;
        alerts.push(performanceAlert);
      } else
      /* istanbul ignore next */
      {
        cov_bxagruzm8().b[7][1]++;
      }
      // Check quality degradation
      const qualityAlert =
      /* istanbul ignore next */
      (cov_bxagruzm8().s[27]++, this.checkQualityDegradation(currentMetrics, baseline));
      /* istanbul ignore next */
      cov_bxagruzm8().s[28]++;
      if (qualityAlert) {
        /* istanbul ignore next */
        cov_bxagruzm8().b[8][0]++;
        cov_bxagruzm8().s[29]++;
        alerts.push(qualityAlert);
      } else
      /* istanbul ignore next */
      {
        cov_bxagruzm8().b[8][1]++;
      }
      // Publish current metrics to CloudWatch
      cov_bxagruzm8().s[30]++;
      yield this.publishCurrentMetrics(currentMetrics);
      // Send alerts
      /* istanbul ignore next */
      cov_bxagruzm8().s[31]++;
      for (const alert of alerts) {
        /* istanbul ignore next */
        cov_bxagruzm8().s[32]++;
        yield this.sendAlert(alert);
      }
      /* istanbul ignore next */
      cov_bxagruzm8().s[33]++;
      return alerts;
    });
  }
  /**
   * Check for data drift
   */
  checkDataDrift(current, baseline) {
    /* istanbul ignore next */
    cov_bxagruzm8().f[5]++;
    const driftScore =
    /* istanbul ignore next */
    (cov_bxagruzm8().s[34]++, current.dataDrift.score);
    /* istanbul ignore next */
    cov_bxagruzm8().s[35]++;
    if (driftScore >= this.thresholds.dataDrift.critical) {
      /* istanbul ignore next */
      cov_bxagruzm8().b[9][0]++;
      cov_bxagruzm8().s[36]++;
      return {
        id: `data-drift-${current.modelId}-${Date.now()}`,
        timestamp: new Date(),
        severity: "critical",
        type: "data_drift",
        modelId: current.modelId,
        provider: current.provider,
        message: `Critical data drift detected: score ${driftScore.toFixed(3)} exceeds threshold ${this.thresholds.dataDrift.critical}`,
        metrics: {
          dataDrift: current.dataDrift
        },
        recommendations: ["Review input data distribution changes", "Consider retraining the model with recent data", "Implement data preprocessing adjustments", "Monitor feature importance changes"]
      };
    } else
    /* istanbul ignore next */
    {
      cov_bxagruzm8().b[9][1]++;
    }
    cov_bxagruzm8().s[37]++;
    if (driftScore >= this.thresholds.dataDrift.warning) {
      /* istanbul ignore next */
      cov_bxagruzm8().b[10][0]++;
      cov_bxagruzm8().s[38]++;
      return {
        id: `data-drift-${current.modelId}-${Date.now()}`,
        timestamp: new Date(),
        severity: "medium",
        type: "data_drift",
        modelId: current.modelId,
        provider: current.provider,
        message: `Data drift warning: score ${driftScore.toFixed(3)} exceeds threshold ${this.thresholds.dataDrift.warning}`,
        metrics: {
          dataDrift: current.dataDrift
        },
        recommendations: ["Monitor data distribution trends", "Prepare for potential model retraining", "Review data quality checks"]
      };
    } else
    /* istanbul ignore next */
    {
      cov_bxagruzm8().b[10][1]++;
    }
    cov_bxagruzm8().s[39]++;
    return null;
  }
  /**
   * Check for prompt drift (score distribution changes)
   */
  checkPromptDrift(current, baseline) {
    /* istanbul ignore next */
    cov_bxagruzm8().f[6]++;
    const driftScore =
    /* istanbul ignore next */
    (cov_bxagruzm8().s[40]++, current.promptDrift.driftScore);
    /* istanbul ignore next */
    cov_bxagruzm8().s[41]++;
    if (driftScore >= this.thresholds.promptDrift.critical) {
      /* istanbul ignore next */
      cov_bxagruzm8().b[11][0]++;
      cov_bxagruzm8().s[42]++;
      return {
        id: `prompt-drift-${current.modelId}-${Date.now()}`,
        timestamp: new Date(),
        severity: "critical",
        type: "prompt_drift",
        modelId: current.modelId,
        provider: current.provider,
        message: `Critical prompt drift detected: score ${driftScore.toFixed(3)} exceeds threshold ${this.thresholds.promptDrift.critical}`,
        metrics: {
          promptDrift: current.promptDrift
        },
        recommendations: ["Review prompt template changes", "Analyze user query pattern shifts", "Update prompt engineering strategies", "Consider A/B testing new prompt variants"]
      };
    } else
    /* istanbul ignore next */
    {
      cov_bxagruzm8().b[11][1]++;
    }
    cov_bxagruzm8().s[43]++;
    if (driftScore >= this.thresholds.promptDrift.warning) {
      /* istanbul ignore next */
      cov_bxagruzm8().b[12][0]++;
      cov_bxagruzm8().s[44]++;
      return {
        id: `prompt-drift-${current.modelId}-${Date.now()}`,
        timestamp: new Date(),
        severity: "medium",
        type: "prompt_drift",
        modelId: current.modelId,
        provider: current.provider,
        message: `Prompt drift warning: score ${driftScore.toFixed(3)} exceeds threshold ${this.thresholds.promptDrift.warning}`,
        metrics: {
          promptDrift: current.promptDrift
        },
        recommendations: ["Monitor prompt performance trends", "Review recent prompt modifications", "Prepare prompt optimization strategies"]
      };
    } else
    /* istanbul ignore next */
    {
      cov_bxagruzm8().b[12][1]++;
    }
    cov_bxagruzm8().s[45]++;
    return null;
  }
  /**
   * Check for performance regression
   */
  checkPerformanceRegression(current, baseline) {
    /* istanbul ignore next */
    cov_bxagruzm8().f[7]++;
    const latencyRegression =
    /* istanbul ignore next */
    (cov_bxagruzm8().s[46]++, current.performanceRegression.latency.regressionScore);
    const accuracyRegression =
    /* istanbul ignore next */
    (cov_bxagruzm8().s[47]++, current.performanceRegression.accuracy.regressionScore);
    const errorRateRegression =
    /* istanbul ignore next */
    (cov_bxagruzm8().s[48]++, current.performanceRegression.errorRate.regressionScore);
    const criticalRegressions =
    /* istanbul ignore next */
    (cov_bxagruzm8().s[49]++, []);
    const warningRegressions =
    /* istanbul ignore next */
    (cov_bxagruzm8().s[50]++, []);
    // Check latency regression
    /* istanbul ignore next */
    cov_bxagruzm8().s[51]++;
    if (latencyRegression >= this.thresholds.performanceRegression.latency.critical) {
      /* istanbul ignore next */
      cov_bxagruzm8().b[13][0]++;
      cov_bxagruzm8().s[52]++;
      criticalRegressions.push(`latency increased by ${(latencyRegression * 100).toFixed(1)}%`);
    } else {
      /* istanbul ignore next */
      cov_bxagruzm8().b[13][1]++;
      cov_bxagruzm8().s[53]++;
      if (latencyRegression >= this.thresholds.performanceRegression.latency.warning) {
        /* istanbul ignore next */
        cov_bxagruzm8().b[14][0]++;
        cov_bxagruzm8().s[54]++;
        warningRegressions.push(`latency increased by ${(latencyRegression * 100).toFixed(1)}%`);
      } else
      /* istanbul ignore next */
      {
        cov_bxagruzm8().b[14][1]++;
      }
    }
    // Check accuracy regression
    /* istanbul ignore next */
    cov_bxagruzm8().s[55]++;
    if (accuracyRegression >= this.thresholds.performanceRegression.accuracy.critical) {
      /* istanbul ignore next */
      cov_bxagruzm8().b[15][0]++;
      cov_bxagruzm8().s[56]++;
      criticalRegressions.push(`accuracy decreased by ${(accuracyRegression * 100).toFixed(1)}%`);
    } else {
      /* istanbul ignore next */
      cov_bxagruzm8().b[15][1]++;
      cov_bxagruzm8().s[57]++;
      if (accuracyRegression >= this.thresholds.performanceRegression.accuracy.warning) {
        /* istanbul ignore next */
        cov_bxagruzm8().b[16][0]++;
        cov_bxagruzm8().s[58]++;
        warningRegressions.push(`accuracy decreased by ${(accuracyRegression * 100).toFixed(1)}%`);
      } else
      /* istanbul ignore next */
      {
        cov_bxagruzm8().b[16][1]++;
      }
    }
    // Check error rate regression
    /* istanbul ignore next */
    cov_bxagruzm8().s[59]++;
    if (errorRateRegression >= this.thresholds.performanceRegression.errorRate.critical) {
      /* istanbul ignore next */
      cov_bxagruzm8().b[17][0]++;
      cov_bxagruzm8().s[60]++;
      criticalRegressions.push(`error rate increased by ${(errorRateRegression * 100).toFixed(1)}%`);
    } else {
      /* istanbul ignore next */
      cov_bxagruzm8().b[17][1]++;
      cov_bxagruzm8().s[61]++;
      if (errorRateRegression >= this.thresholds.performanceRegression.errorRate.warning) {
        /* istanbul ignore next */
        cov_bxagruzm8().b[18][0]++;
        cov_bxagruzm8().s[62]++;
        warningRegressions.push(`error rate increased by ${(errorRateRegression * 100).toFixed(1)}%`);
      } else
      /* istanbul ignore next */
      {
        cov_bxagruzm8().b[18][1]++;
      }
    }
    /* istanbul ignore next */
    cov_bxagruzm8().s[63]++;
    if (criticalRegressions.length > 0) {
      /* istanbul ignore next */
      cov_bxagruzm8().b[19][0]++;
      cov_bxagruzm8().s[64]++;
      return {
        id: `performance-regression-${current.modelId}-${Date.now()}`,
        timestamp: new Date(),
        severity: "critical",
        type: "performance_regression",
        modelId: current.modelId,
        provider: current.provider,
        message: `Critical performance regression: ${criticalRegressions.join(", ")}`,
        metrics: {
          performanceRegression: current.performanceRegression
        },
        recommendations: ["Investigate recent model or infrastructure changes", "Consider rolling back to previous model version", "Review system resource allocation", "Implement performance optimization strategies"]
      };
    } else
    /* istanbul ignore next */
    {
      cov_bxagruzm8().b[19][1]++;
    }
    cov_bxagruzm8().s[65]++;
    if (warningRegressions.length > 0) {
      /* istanbul ignore next */
      cov_bxagruzm8().b[20][0]++;
      cov_bxagruzm8().s[66]++;
      return {
        id: `performance-regression-${current.modelId}-${Date.now()}`,
        timestamp: new Date(),
        severity: "medium",
        type: "performance_regression",
        modelId: current.modelId,
        provider: current.provider,
        message: `Performance regression warning: ${warningRegressions.join(", ")}`,
        metrics: {
          performanceRegression: current.performanceRegression
        },
        recommendations: ["Monitor performance trends closely", "Review recent changes for impact", "Prepare performance optimization plans"]
      };
    } else
    /* istanbul ignore next */
    {
      cov_bxagruzm8().b[20][1]++;
    }
    cov_bxagruzm8().s[67]++;
    return null;
  }
  /**
   * Check for quality degradation
   */
  checkQualityDegradation(current, baseline) {
    /* istanbul ignore next */
    cov_bxagruzm8().f[8]++;
    const overallScore =
    /* istanbul ignore next */
    (cov_bxagruzm8().s[68]++, current.qualityMetrics.overallScore);
    const toxicityScore =
    /* istanbul ignore next */
    (cov_bxagruzm8().s[69]++, current.qualityMetrics.toxicityScore);
    const issues =
    /* istanbul ignore next */
    (cov_bxagruzm8().s[70]++, []);
    let severity =
    /* istanbul ignore next */
    (cov_bxagruzm8().s[71]++, "low");
    // Check overall quality
    /* istanbul ignore next */
    cov_bxagruzm8().s[72]++;
    if (overallScore <= this.thresholds.qualityDegradation.overall.critical) {
      /* istanbul ignore next */
      cov_bxagruzm8().b[21][0]++;
      cov_bxagruzm8().s[73]++;
      issues.push(`overall quality score ${overallScore.toFixed(3)} below critical threshold`);
      /* istanbul ignore next */
      cov_bxagruzm8().s[74]++;
      severity = "critical";
    } else {
      /* istanbul ignore next */
      cov_bxagruzm8().b[21][1]++;
      cov_bxagruzm8().s[75]++;
      if (overallScore <= this.thresholds.qualityDegradation.overall.warning) {
        /* istanbul ignore next */
        cov_bxagruzm8().b[22][0]++;
        cov_bxagruzm8().s[76]++;
        issues.push(`overall quality score ${overallScore.toFixed(3)} below warning threshold`);
        /* istanbul ignore next */
        cov_bxagruzm8().s[77]++;
        severity = "medium";
      } else
      /* istanbul ignore next */
      {
        cov_bxagruzm8().b[22][1]++;
      }
    }
    // Check toxicity
    /* istanbul ignore next */
    cov_bxagruzm8().s[78]++;
    if (toxicityScore >= this.thresholds.qualityDegradation.toxicity.critical) {
      /* istanbul ignore next */
      cov_bxagruzm8().b[23][0]++;
      cov_bxagruzm8().s[79]++;
      issues.push(`toxicity score ${toxicityScore.toFixed(3)} above critical threshold`);
      /* istanbul ignore next */
      cov_bxagruzm8().s[80]++;
      severity = "critical";
    } else {
      /* istanbul ignore next */
      cov_bxagruzm8().b[23][1]++;
      cov_bxagruzm8().s[81]++;
      if (toxicityScore >= this.thresholds.qualityDegradation.toxicity.warning) {
        /* istanbul ignore next */
        cov_bxagruzm8().b[24][0]++;
        cov_bxagruzm8().s[82]++;
        issues.push(`toxicity score ${toxicityScore.toFixed(3)} above warning threshold`);
        /* istanbul ignore next */
        cov_bxagruzm8().s[83]++;
        if (severity === "low") {
          /* istanbul ignore next */
          cov_bxagruzm8().b[25][0]++;
          cov_bxagruzm8().s[84]++;
          severity = "medium";
        } else
        /* istanbul ignore next */
        {
          cov_bxagruzm8().b[25][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_bxagruzm8().b[24][1]++;
      }
    }
    /* istanbul ignore next */
    cov_bxagruzm8().s[85]++;
    if (issues.length > 0) {
      /* istanbul ignore next */
      cov_bxagruzm8().b[26][0]++;
      cov_bxagruzm8().s[86]++;
      return {
        id: `quality-degradation-${current.modelId}-${Date.now()}`,
        timestamp: new Date(),
        severity,
        type: "quality_degradation",
        modelId: current.modelId,
        provider: current.provider,
        message: `Quality degradation detected: ${issues.join(", ")}`,
        metrics: {
          qualityMetrics: current.qualityMetrics
        },
        recommendations: ["Review model output quality samples", "Implement additional content filtering", "Consider fine-tuning or prompt adjustments", "Monitor user feedback and satisfaction"]
      };
    } else
    /* istanbul ignore next */
    {
      cov_bxagruzm8().b[26][1]++;
    }
    cov_bxagruzm8().s[87]++;
    return null;
  }
  /**
   * Publish current metrics to CloudWatch
   */
  publishCurrentMetrics(metrics) {
    /* istanbul ignore next */
    cov_bxagruzm8().f[9]++;
    cov_bxagruzm8().s[88]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_bxagruzm8().f[10]++;
      cov_bxagruzm8().s[89]++;
      yield this.publishMetrics("AI/Drift/Current", metrics.modelId, {
        DataDriftScore: metrics.dataDrift.score,
        PromptDriftScore: metrics.promptDrift.driftScore,
        LatencyRegression: metrics.performanceRegression.latency.regressionScore,
        AccuracyRegression: metrics.performanceRegression.accuracy.regressionScore,
        ErrorRateRegression: metrics.performanceRegression.errorRate.regressionScore,
        OverallQuality: metrics.qualityMetrics.overallScore,
        ToxicityScore: metrics.qualityMetrics.toxicityScore,
        CoherenceScore: metrics.qualityMetrics.coherenceScore,
        RelevanceScore: metrics.qualityMetrics.relevanceScore,
        FactualityScore: metrics.qualityMetrics.factualityScore
      });
    });
  }
  /**
   * Publish metrics to CloudWatch
   */
  publishMetrics(namespace, modelId, metrics) {
    /* istanbul ignore next */
    cov_bxagruzm8().f[11]++;
    cov_bxagruzm8().s[90]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_bxagruzm8().f[12]++;
      const metricData =
      /* istanbul ignore next */
      (cov_bxagruzm8().s[91]++, Object.entries(metrics).map(([name, value]) => {
        /* istanbul ignore next */
        cov_bxagruzm8().f[13]++;
        cov_bxagruzm8().s[92]++;
        return {
          MetricName: name,
          Value: value,
          Unit: "None",
          Dimensions: [{
            Name: "ModelId",
            Value: modelId
          }],
          Timestamp: new Date()
        };
      }));
      /* istanbul ignore next */
      cov_bxagruzm8().s[93]++;
      yield this.cloudWatch.send(new client_cloudwatch_1.PutMetricDataCommand({
        Namespace: namespace,
        MetricData: metricData
      }));
    });
  }
  /**
   * Send alert through registered callbacks
   */
  sendAlert(alert) {
    /* istanbul ignore next */
    cov_bxagruzm8().f[14]++;
    cov_bxagruzm8().s[94]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_bxagruzm8().f[15]++;
      cov_bxagruzm8().s[95]++;
      for (const callback of this.alertCallbacks) {
        /* istanbul ignore next */
        cov_bxagruzm8().s[96]++;
        try {
          /* istanbul ignore next */
          cov_bxagruzm8().s[97]++;
          yield callback(alert);
        } catch (error) {
          /* istanbul ignore next */
          cov_bxagruzm8().s[98]++;
          console.error("Failed to send drift alert:", error);
        }
      }
    });
  }
  /**
   * Register alert callback
   */
  onAlert(callback) {
    /* istanbul ignore next */
    cov_bxagruzm8().f[16]++;
    cov_bxagruzm8().s[99]++;
    this.alertCallbacks.push(callback);
  }
  /**
   * Calculate prompt drift score based on distribution changes
   */
  static calculatePromptDriftScore(current, baseline) {
    /* istanbul ignore next */
    cov_bxagruzm8().f[17]++;
    // Calculate KL divergence approximation for distribution drift
    const meanDrift =
    /* istanbul ignore next */
    (cov_bxagruzm8().s[100]++, Math.abs(current.mean - baseline.mean) / baseline.mean);
    const stdDrift =
    /* istanbul ignore next */
    (cov_bxagruzm8().s[101]++, Math.abs(current.std - baseline.std) / baseline.std);
    const p95Drift =
    /* istanbul ignore next */
    (cov_bxagruzm8().s[102]++, Math.abs(current.p95 - baseline.p95) / baseline.p95);
    // Weighted combination of distribution changes
    /* istanbul ignore next */
    cov_bxagruzm8().s[103]++;
    return meanDrift * 0.4 + stdDrift * 0.3 + p95Drift * 0.3;
  }
  /**
   * Calculate performance regression score
   */
  static calculateRegressionScore(current, baseline, higherIsBetter =
  /* istanbul ignore next */
  (cov_bxagruzm8().b[27][0]++, true)) {
    /* istanbul ignore next */
    cov_bxagruzm8().f[18]++;
    cov_bxagruzm8().s[104]++;
    if (baseline === 0) {
      /* istanbul ignore next */
      cov_bxagruzm8().b[28][0]++;
      cov_bxagruzm8().s[105]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_bxagruzm8().b[28][1]++;
    }
    const change =
    /* istanbul ignore next */
    (cov_bxagruzm8().s[106]++, (current - baseline) / baseline);
    /* istanbul ignore next */
    cov_bxagruzm8().s[107]++;
    return higherIsBetter ?
    /* istanbul ignore next */
    (cov_bxagruzm8().b[29][0]++, Math.max(0, -change)) :
    /* istanbul ignore next */
    (cov_bxagruzm8().b[29][1]++, Math.max(0, change));
  }
  /**
   * Setup SageMaker Model Monitor for data drift detection
   */
  setupSageMakerMonitor(modelName, endpointName, baselineDataUri) {
    /* istanbul ignore next */
    cov_bxagruzm8().f[19]++;
    cov_bxagruzm8().s[108]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_bxagruzm8().f[20]++;
      const jobDefinitionName =
      /* istanbul ignore next */
      (cov_bxagruzm8().s[109]++, `${modelName}-quality-monitor`);
      /* istanbul ignore next */
      cov_bxagruzm8().s[110]++;
      try {
        /* istanbul ignore next */
        cov_bxagruzm8().s[111]++;
        // Check if job definition already exists
        yield this.sageMaker.send(new client_sagemaker_1.DescribeModelQualityJobDefinitionCommand({
          JobDefinitionName: jobDefinitionName
        }));
        /* istanbul ignore next */
        cov_bxagruzm8().s[112]++;
        return jobDefinitionName;
      } catch (error) {
        /* istanbul ignore next */
        cov_bxagruzm8().s[113]++;
        // Job definition doesn't exist, create it
        yield this.sageMaker.send(new client_sagemaker_1.CreateModelQualityJobDefinitionCommand({
          JobDefinitionName: jobDefinitionName,
          ModelQualityAppSpecification: {
            ImageUri: "156813124566.dkr.ecr.eu-central-1.amazonaws.com/sagemaker-model-monitor-analyzer"
          },
          ModelQualityJobInput: {
            EndpointInput: {
              EndpointName: endpointName,
              LocalPath: "/opt/ml/processing/input/endpoint"
            },
            GroundTruthS3Input: {
              S3Uri: baselineDataUri
            }
          },
          ModelQualityJobOutputConfig: {
            S3Output: {
              S3Uri: `s3://matbakh-ai-monitoring/${modelName}/quality-reports/`,
              LocalPath: "/opt/ml/processing/output"
            }
          },
          JobResources: {
            ClusterConfig: {
              InstanceCount: 1,
              InstanceType: "ml.m5.xlarge",
              VolumeSizeInGB: 20
            }
          },
          RoleArn:
          /* istanbul ignore next */
          (cov_bxagruzm8().b[30][0]++, process.env.SAGEMAKER_EXECUTION_ROLE_ARN) ||
          /* istanbul ignore next */
          (cov_bxagruzm8().b[30][1]++, "")
        }));
        /* istanbul ignore next */
        cov_bxagruzm8().s[114]++;
        return jobDefinitionName;
      }
    });
  }
}
/* istanbul ignore next */
cov_bxagruzm8().s[115]++;
exports.DriftMonitor = DriftMonitor;
/* istanbul ignore next */
cov_bxagruzm8().s[116]++;
exports.default = DriftMonitor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"version":3,"names":["cov_20gqkz626j","actualCoverage","s","client_cloudfront_1","require","client_cloudwatch_1","client_rds_1","client_route_53_1","client_ssm_1","MultiRegionOrchestrator","constructor","config","clients","f","validateConfig","primaryRdsClient","b","RDSClient","region","primaryRegion","secondaryRdsClient","secondaryRegion","route53Client","Route53Client","cloudFrontClient","CloudFrontClient","primarySsmClient","SSMClient","secondarySsmClient","cloudWatchClient","CloudWatchClient","Error","domainName","hostedZoneId","executeFailover","reason","startTime","Date","steps","healthStep","createStep","push","isSecondaryHealthy","validateSecondaryHealth","completeStep","dbPromoteStep","promoteSecondaryDatabase","dnsStep","updateDnsFailover","cdnStep","updateCloudFrontOrigin","configStep","updateFailoverConfiguration","validationStep","validateFailoverSuccess","endTime","rtoAchieved","getTime","rpoAchieved","calculateRPO","logFailoverMetrics","success","rollbackPlan","generateRollbackPlan","error","failedStep","find","status","message","rtoAttempted","executeFailback","isPrimaryHealthy","validatePrimaryHealth","replicationStep","reestablishReplication","syncStep","synchronizeDataToPrimary","switchDnsToPrimary","updateCloudFrontToPrimary","resetConfigurationToPrimary","logFailbackMetrics","testDisasterRecovery","healthChecks","recommendations","secondaryRegionHealth","replicationLag","getReplicationLag","databaseReplication","dnsHealthChecks","validateDnsHealthChecks","s3Replication","validateS3Replication","secretsReplication","validateSecretsReplication","estimatedRTO","estimateRTO","estimatedRPO","Object","values","every","check","description","step","duration","command","GetHealthCheckCommand","HealthCheckId","secondaryHealthCheckId","response","send","_a","StatusList","some","Status","console","primaryHealthCheckId","ModifyDBClusterCommand","DBClusterIdentifier","secondaryClusterIdentifier","GlobalClusterIdentifier","globalClusterIdentifier","PromoteGlobalWriterDB","waitForClusterPromotion","maxAttempts","attempts","DescribeDBClustersCommand","cluster","DBClusters","GlobalWriteForwardingStatus","Promise","resolve","setTimeout","ChangeResourceRecordSetsCommand","HostedZoneId","ChangeBatch","Changes","Action","ResourceRecordSet","Name","Type","SetIdentifier","Failover","TTL","ResourceRecords","Value","getCommand","GetDistributionCommand","Id","distributionId","Distribution","DistributionConfig","invalidationCommand","CreateInvalidationCommand","DistributionId","InvalidationBatch","Paths","Quantity","Items","CallerReference","now","PutParameterCommand","Overwrite","Description","regionCommand","healthEndpoint","fetch","ok","GlobalWriteForwardingRequestedRegion","primaryCheck","secondaryCheck","HealthCheck","baseRTO","Math","min","estimatedDuration","riskLevel","rto","rpo","PutMetricDataCommand","Namespace","MetricData","MetricName","Unit","Dimensions","toString","exports"],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/multi-region/multi-region-orchestrator.ts"],"sourcesContent":["import {\n    CloudFrontClient,\n    CreateInvalidationCommand,\n    GetDistributionCommand\n} from '@aws-sdk/client-cloudfront';\nimport {\n    CloudWatchClient,\n    PutMetricDataCommand\n} from '@aws-sdk/client-cloudwatch';\nimport {\n    DescribeDBClustersCommand,\n    ModifyDBClusterCommand,\n    RDSClient\n} from '@aws-sdk/client-rds';\nimport {\n    ChangeResourceRecordSetsCommand,\n    GetHealthCheckCommand,\n    Route53Client\n} from '@aws-sdk/client-route-53';\nimport {\n    PutParameterCommand,\n    SSMClient\n} from '@aws-sdk/client-ssm';\n\nexport interface MultiRegionConfig {\n    primaryRegion: string;\n    secondaryRegion: string;\n    domainName: string;\n    hostedZoneId: string;\n    distributionId: string;\n    globalClusterIdentifier: string;\n    primaryClusterIdentifier: string;\n    secondaryClusterIdentifier: string;\n    primaryHealthCheckId: string;\n    secondaryHealthCheckId: string;\n}\n\nexport interface FailoverResult {\n    success: boolean;\n    rtoAchieved: number; // minutes\n    rpoAchieved: number; // minutes\n    steps: FailoverStep[];\n    rollbackPlan?: RollbackPlan;\n}\n\nexport interface FailoverStep {\n    step: string;\n    status: 'pending' | 'in_progress' | 'completed' | 'failed';\n    startTime: Date;\n    endTime?: Date;\n    duration?: number;\n    error?: string;\n}\n\nexport interface RollbackPlan {\n    steps: string[];\n    estimatedDuration: number;\n    riskLevel: 'low' | 'medium' | 'high';\n}\n\nexport interface MultiRegionClients {\n    primaryRdsClient?: RDSClient;\n    secondaryRdsClient?: RDSClient;\n    route53Client?: Route53Client;\n    cloudFrontClient?: CloudFrontClient;\n    primarySsmClient?: SSMClient;\n    secondarySsmClient?: SSMClient;\n    cloudWatchClient?: CloudWatchClient;\n}\n\nexport class MultiRegionOrchestrator {\n    private primaryRdsClient: RDSClient;\n    private secondaryRdsClient: RDSClient;\n    private route53Client: Route53Client;\n    private cloudFrontClient: CloudFrontClient;\n    private primarySsmClient: SSMClient;\n    private secondarySsmClient: SSMClient;\n    private cloudWatchClient: CloudWatchClient;\n\n    constructor(private config: MultiRegionConfig, clients?: MultiRegionClients) {\n        // Validate configuration\n        this.validateConfig(config);\n\n        // Allow client injection for testing\n        this.primaryRdsClient = clients?.primaryRdsClient || new RDSClient({ region: config.primaryRegion });\n        this.secondaryRdsClient = clients?.secondaryRdsClient || new RDSClient({ region: config.secondaryRegion });\n        this.route53Client = clients?.route53Client || new Route53Client({ region: 'us-east-1' });\n        this.cloudFrontClient = clients?.cloudFrontClient || new CloudFrontClient({ region: 'us-east-1' });\n        this.primarySsmClient = clients?.primarySsmClient || new SSMClient({ region: config.primaryRegion });\n        this.secondarySsmClient = clients?.secondarySsmClient || new SSMClient({ region: config.secondaryRegion });\n        this.cloudWatchClient = clients?.cloudWatchClient || new CloudWatchClient({ region: config.primaryRegion });\n    }\n\n    private validateConfig(config: MultiRegionConfig): void {\n        if (!config.primaryRegion || !config.secondaryRegion) {\n            throw new Error('Primary and secondary regions are required');\n        }\n\n        if (config.primaryRegion === config.secondaryRegion) {\n            throw new Error('Primary and secondary regions must be different');\n        }\n\n        if (!config.domainName || !config.hostedZoneId) {\n            throw new Error('Domain name and hosted zone ID are required');\n        }\n    }\n\n    /**\n     * Execute disaster recovery failover to secondary region\n     */\n    async executeFailover(reason: string = 'Manual failover'): Promise<FailoverResult> {\n        const startTime = new Date();\n        const steps: FailoverStep[] = [];\n\n        try {\n            // Step 1: Validate secondary region health\n            const healthStep = this.createStep('Validate secondary region health');\n            steps.push(healthStep);\n\n            const isSecondaryHealthy = await this.validateSecondaryHealth();\n            if (!isSecondaryHealthy) {\n                throw new Error('Secondary region is not healthy');\n            }\n            this.completeStep(healthStep);\n\n            // Step 2: Promote secondary database cluster\n            const dbPromoteStep = this.createStep('Promote secondary database cluster');\n            steps.push(dbPromoteStep);\n\n            await this.promoteSecondaryDatabase();\n            this.completeStep(dbPromoteStep);\n\n            // Step 3: Update Route 53 DNS records\n            const dnsStep = this.createStep('Update DNS failover records');\n            steps.push(dnsStep);\n\n            await this.updateDnsFailover();\n            this.completeStep(dnsStep);\n\n            // Step 4: Update CloudFront origin\n            const cdnStep = this.createStep('Update CloudFront origin configuration');\n            steps.push(cdnStep);\n\n            await this.updateCloudFrontOrigin();\n            this.completeStep(cdnStep);\n\n            // Step 5: Update feature flags and configuration\n            const configStep = this.createStep('Update configuration parameters');\n            steps.push(configStep);\n\n            await this.updateFailoverConfiguration();\n            this.completeStep(configStep);\n\n            // Step 6: Validate failover success\n            const validationStep = this.createStep('Validate failover success');\n            steps.push(validationStep);\n\n            await this.validateFailoverSuccess();\n            this.completeStep(validationStep);\n\n            // Calculate RTO/RPO\n            const endTime = new Date();\n            const rtoAchieved = (endTime.getTime() - startTime.getTime()) / (1000 * 60); // minutes\n            const rpoAchieved = await this.calculateRPO();\n\n            // Log metrics\n            await this.logFailoverMetrics(rtoAchieved, rpoAchieved, true, reason);\n\n            return {\n                success: true,\n                rtoAchieved,\n                rpoAchieved,\n                steps,\n                rollbackPlan: this.generateRollbackPlan(),\n            };\n\n        } catch (error) {\n            const failedStep = steps.find(s => s.status === 'in_progress');\n            if (failedStep) {\n                failedStep.status = 'failed';\n                failedStep.error = error instanceof Error ? error.message : 'Unknown error';\n                failedStep.endTime = new Date();\n            }\n\n            // Log failure metrics\n            const endTime = new Date();\n            const rtoAttempted = (endTime.getTime() - startTime.getTime()) / (1000 * 60);\n            await this.logFailoverMetrics(rtoAttempted, 0, false, reason);\n\n            return {\n                success: false,\n                rtoAchieved: 0,\n                rpoAchieved: 0,\n                steps,\n            };\n        }\n    }\n\n    /**\n     * Execute failback to primary region\n     */\n    async executeFailback(reason: string = 'Manual failback'): Promise<FailoverResult> {\n        const startTime = new Date();\n        const steps: FailoverStep[] = [];\n\n        try {\n            // Step 1: Validate primary region recovery\n            const healthStep = this.createStep('Validate primary region health');\n            steps.push(healthStep);\n\n            const isPrimaryHealthy = await this.validatePrimaryHealth();\n            if (!isPrimaryHealthy) {\n                throw new Error('Primary region is not ready for failback');\n            }\n            this.completeStep(healthStep);\n\n            // Step 2: Re-establish replication\n            const replicationStep = this.createStep('Re-establish database replication');\n            steps.push(replicationStep);\n\n            await this.reestablishReplication();\n            this.completeStep(replicationStep);\n\n            // Step 3: Sync data from secondary to primary\n            const syncStep = this.createStep('Synchronize data to primary region');\n            steps.push(syncStep);\n\n            await this.synchronizeDataToPrimary();\n            this.completeStep(syncStep);\n\n            // Step 4: Switch DNS back to primary\n            const dnsStep = this.createStep('Switch DNS back to primary region');\n            steps.push(dnsStep);\n\n            await this.switchDnsToPrimary();\n            this.completeStep(dnsStep);\n\n            // Step 5: Update CloudFront origin back to primary\n            const cdnStep = this.createStep('Update CloudFront to primary origin');\n            steps.push(cdnStep);\n\n            await this.updateCloudFrontToPrimary();\n            this.completeStep(cdnStep);\n\n            // Step 6: Reset configuration\n            const configStep = this.createStep('Reset configuration to primary');\n            steps.push(configStep);\n\n            await this.resetConfigurationToPrimary();\n            this.completeStep(configStep);\n\n            const endTime = new Date();\n            const rtoAchieved = (endTime.getTime() - startTime.getTime()) / (1000 * 60);\n\n            await this.logFailbackMetrics(rtoAchieved, true);\n\n            return {\n                success: true,\n                rtoAchieved,\n                rpoAchieved: 0, // Failback doesn't have RPO\n                steps,\n            };\n\n        } catch (error) {\n            const failedStep = steps.find(s => s.status === 'in_progress');\n            if (failedStep) {\n                failedStep.status = 'failed';\n                failedStep.error = error instanceof Error ? error.message : 'Unknown error';\n                failedStep.endTime = new Date();\n            }\n\n            return {\n                success: false,\n                rtoAchieved: 0,\n                rpoAchieved: 0,\n                steps,\n            };\n        }\n    }\n\n    /**\n     * Test disaster recovery without affecting production\n     */\n    async testDisasterRecovery(): Promise<{\n        success: boolean;\n        healthChecks: Record<string, boolean>;\n        estimatedRTO: number;\n        estimatedRPO: number;\n        recommendations: string[];\n    }> {\n        const healthChecks: Record<string, boolean> = {};\n        const recommendations: string[] = [];\n\n        // Test secondary region health\n        healthChecks.secondaryRegionHealth = await this.validateSecondaryHealth();\n        if (!healthChecks.secondaryRegionHealth) {\n            recommendations.push('Secondary region health checks are failing');\n        }\n\n        // Test database replication lag\n        const replicationLag = await this.getReplicationLag();\n        healthChecks.databaseReplication = replicationLag < 60000; // < 1 minute\n        if (replicationLag > 60000) {\n            recommendations.push(`Database replication lag is ${replicationLag / 1000}s, exceeds 1 minute target`);\n        }\n\n        // Test DNS health checks\n        healthChecks.dnsHealthChecks = await this.validateDnsHealthChecks();\n        if (!healthChecks.dnsHealthChecks) {\n            recommendations.push('DNS health checks are not properly configured');\n        }\n\n        // Test S3 replication\n        healthChecks.s3Replication = await this.validateS3Replication();\n        if (!healthChecks.s3Replication) {\n            recommendations.push('S3 cross-region replication is behind');\n        }\n\n        // Test secrets replication\n        healthChecks.secretsReplication = await this.validateSecretsReplication();\n        if (!healthChecks.secretsReplication) {\n            recommendations.push('Secrets are not properly replicated to secondary region');\n        }\n\n        // Estimate RTO/RPO based on current conditions\n        const estimatedRTO = this.estimateRTO(healthChecks);\n        const estimatedRPO = replicationLag / (1000 * 60); // Convert to minutes\n\n        const success = Object.values(healthChecks).every(check => check);\n\n        return {\n            success,\n            healthChecks,\n            estimatedRTO,\n            estimatedRPO,\n            recommendations,\n        };\n    }\n\n    private createStep(description: string): FailoverStep {\n        return {\n            step: description,\n            status: 'in_progress',\n            startTime: new Date(),\n        };\n    }\n\n    private completeStep(step: FailoverStep): void {\n        step.status = 'completed';\n        step.endTime = new Date();\n        step.duration = step.endTime.getTime() - step.startTime.getTime();\n    }\n\n    private async validateSecondaryHealth(): Promise<boolean> {\n        try {\n            const command = new GetHealthCheckCommand({\n                HealthCheckId: this.config.secondaryHealthCheckId,\n            });\n            const response = await this.route53Client.send(command);\n            return response.StatusList?.some(status => status.Status === 'Success') || false;\n        } catch (error) {\n            console.error('Error validating secondary health:', error);\n            return false;\n        }\n    }\n\n    private async validatePrimaryHealth(): Promise<boolean> {\n        try {\n            const command = new GetHealthCheckCommand({\n                HealthCheckId: this.config.primaryHealthCheckId,\n            });\n            const response = await this.route53Client.send(command);\n            return response.StatusList?.some(status => status.Status === 'Success') || false;\n        } catch (error) {\n            console.error('Error validating primary health:', error);\n            return false;\n        }\n    }\n\n    private async promoteSecondaryDatabase(): Promise<void> {\n        // For Aurora Global Database, we need to promote the secondary cluster\n        const command = new ModifyDBClusterCommand({\n            DBClusterIdentifier: this.config.secondaryClusterIdentifier,\n            GlobalClusterIdentifier: this.config.globalClusterIdentifier,\n            PromoteGlobalWriterDB: true,\n        });\n\n        await this.secondaryRdsClient.send(command);\n\n        // Wait for promotion to complete\n        await this.waitForClusterPromotion();\n    }\n\n    private async waitForClusterPromotion(): Promise<void> {\n        const maxAttempts = 30; // 15 minutes max\n        let attempts = 0;\n\n        while (attempts < maxAttempts) {\n            const command = new DescribeDBClustersCommand({\n                DBClusterIdentifier: this.config.secondaryClusterIdentifier,\n            });\n\n            const response = await this.secondaryRdsClient.send(command);\n            const cluster = response.DBClusters?.[0];\n\n            if (cluster?.Status === 'available' && cluster.GlobalWriteForwardingStatus !== 'enabled') {\n                return; // Promotion complete\n            }\n\n            await new Promise(resolve => setTimeout(resolve, 30000)); // Wait 30 seconds\n            attempts++;\n        }\n\n        throw new Error('Database promotion timed out');\n    }\n\n    private async updateDnsFailover(): Promise<void> {\n        // Switch primary and secondary records\n        const command = new ChangeResourceRecordSetsCommand({\n            HostedZoneId: this.config.hostedZoneId,\n            ChangeBatch: {\n                Changes: [\n                    {\n                        Action: 'UPSERT',\n                        ResourceRecordSet: {\n                            Name: `api.${this.config.domainName}`,\n                            Type: 'A',\n                            SetIdentifier: 'primary',\n                            Failover: 'SECONDARY', // Switch roles\n                            TTL: 30,\n                            ResourceRecords: [\n                                { Value: `api-${this.config.secondaryRegion}.${this.config.domainName}` }\n                            ],\n                            HealthCheckId: this.config.secondaryHealthCheckId,\n                        },\n                    },\n                    {\n                        Action: 'UPSERT',\n                        ResourceRecordSet: {\n                            Name: `api.${this.config.domainName}`,\n                            Type: 'A',\n                            SetIdentifier: 'secondary',\n                            Failover: 'PRIMARY', // Switch roles\n                            TTL: 30,\n                            ResourceRecords: [\n                                { Value: `api-${this.config.primaryRegion}.${this.config.domainName}` }\n                            ],\n                            HealthCheckId: this.config.primaryHealthCheckId,\n                        },\n                    },\n                ],\n            },\n        });\n\n        await this.route53Client.send(command);\n    }\n\n    private async updateCloudFrontOrigin(): Promise<void> {\n        // Get current distribution config\n        const getCommand = new GetDistributionCommand({\n            Id: this.config.distributionId,\n        });\n        const response = await this.cloudFrontClient.send(getCommand);\n\n        if (!response.Distribution?.DistributionConfig) {\n            throw new Error('Could not retrieve distribution configuration');\n        }\n\n        // Update origin to point to secondary region\n        const config = response.Distribution.DistributionConfig;\n        // Implementation would update the origin configuration here\n\n        // Create invalidation for immediate effect\n        const invalidationCommand = new CreateInvalidationCommand({\n            DistributionId: this.config.distributionId,\n            InvalidationBatch: {\n                Paths: {\n                    Quantity: 2,\n                    Items: ['/index.html', '/*'],\n                },\n                CallerReference: `failover-${Date.now()}`,\n            },\n        });\n\n        await this.cloudFrontClient.send(invalidationCommand);\n    }\n\n    private async updateFailoverConfiguration(): Promise<void> {\n        // Update feature flags to indicate failover state\n        const command = new PutParameterCommand({\n            Name: '/matbakh/failover/active',\n            Value: 'true',\n            Type: 'String',\n            Overwrite: true,\n            Description: 'Indicates if system is in failover mode',\n        });\n\n        await this.secondarySsmClient.send(command);\n\n        // Update current region parameter\n        const regionCommand = new PutParameterCommand({\n            Name: '/matbakh/config/current-region',\n            Value: this.config.secondaryRegion,\n            Type: 'String',\n            Overwrite: true,\n            Description: 'Currently active region',\n        });\n\n        await this.secondarySsmClient.send(regionCommand);\n    }\n\n    private async validateFailoverSuccess(): Promise<void> {\n        // Perform smoke tests against secondary region\n        const healthEndpoint = `https://api-${this.config.secondaryRegion}.${this.config.domainName}/health`;\n\n        try {\n            const response = await fetch(healthEndpoint);\n            if (!response.ok) {\n                throw new Error(`Health check failed: ${response.status}`);\n            }\n        } catch (error) {\n            throw new Error(`Failover validation failed: ${error}`);\n        }\n    }\n\n    private async calculateRPO(): Promise<number> {\n        // Get the last successful replication timestamp\n        try {\n            const command = new DescribeDBClustersCommand({\n                DBClusterIdentifier: this.config.secondaryClusterIdentifier,\n            });\n\n            const response = await this.secondaryRdsClient.send(command);\n            const cluster = response.DBClusters?.[0];\n\n            if (cluster?.GlobalWriteForwardingRequestedRegion) {\n                // Calculate based on last replication lag\n                return 1; // Assume 1 minute RPO for Aurora Global Database\n            }\n\n            return 0;\n        } catch (error) {\n            console.error('Error calculating RPO:', error);\n            return 0;\n        }\n    }\n\n    private async getReplicationLag(): Promise<number> {\n        try {\n            const command = new DescribeDBClustersCommand({\n                DBClusterIdentifier: this.config.secondaryClusterIdentifier,\n            });\n\n            const response = await this.secondaryRdsClient.send(command);\n            // This would need to be implemented based on actual Aurora Global Database metrics\n            return 30000; // Placeholder: 30 seconds\n        } catch (error) {\n            console.error('Error getting replication lag:', error);\n            return 60000; // Default to 1 minute if unable to determine\n        }\n    }\n\n    private async validateDnsHealthChecks(): Promise<boolean> {\n        try {\n            const primaryCheck = await this.route53Client.send(\n                new GetHealthCheckCommand({ HealthCheckId: this.config.primaryHealthCheckId })\n            );\n            const secondaryCheck = await this.route53Client.send(\n                new GetHealthCheckCommand({ HealthCheckId: this.config.secondaryHealthCheckId })\n            );\n\n            return !!(primaryCheck.HealthCheck && secondaryCheck.HealthCheck);\n        } catch (error) {\n            return false;\n        }\n    }\n\n    private async validateS3Replication(): Promise<boolean> {\n        // This would check S3 replication metrics\n        return true; // Placeholder\n    }\n\n    private async validateSecretsReplication(): Promise<boolean> {\n        // This would validate that secrets are accessible in secondary region\n        return true; // Placeholder\n    }\n\n    private estimateRTO(healthChecks: Record<string, boolean>): number {\n        let baseRTO = 5; // Base 5 minutes for healthy system\n\n        if (!healthChecks.secondaryRegionHealth) baseRTO += 5;\n        if (!healthChecks.databaseReplication) baseRTO += 3;\n        if (!healthChecks.dnsHealthChecks) baseRTO += 2;\n        if (!healthChecks.s3Replication) baseRTO += 1;\n        if (!healthChecks.secretsReplication) baseRTO += 2;\n\n        return Math.min(baseRTO, 15); // Cap at 15 minutes\n    }\n\n    private generateRollbackPlan(): RollbackPlan {\n        return {\n            steps: [\n                'Validate primary region health',\n                'Re-establish database replication',\n                'Switch DNS back to primary',\n                'Update CloudFront origin',\n                'Reset configuration parameters',\n                'Validate rollback success',\n            ],\n            estimatedDuration: 10, // minutes\n            riskLevel: 'medium',\n        };\n    }\n\n    private async logFailoverMetrics(\n        rto: number,\n        rpo: number,\n        success: boolean,\n        reason: string\n    ): Promise<void> {\n        const command = new PutMetricDataCommand({\n            Namespace: 'Matbakh/MultiRegion',\n            MetricData: [\n                {\n                    MetricName: 'FailoverRTO',\n                    Value: rto,\n                    Unit: 'Count',\n                    Dimensions: [\n                        { Name: 'Success', Value: success.toString() },\n                        { Name: 'Reason', Value: reason },\n                    ],\n                },\n                {\n                    MetricName: 'FailoverRPO',\n                    Value: rpo,\n                    Unit: 'Count',\n                    Dimensions: [\n                        { Name: 'Success', Value: success.toString() },\n                    ],\n                },\n                {\n                    MetricName: 'FailoverAttempts',\n                    Value: 1,\n                    Unit: 'Count',\n                    Dimensions: [\n                        { Name: 'Success', Value: success.toString() },\n                        { Name: 'Reason', Value: reason },\n                    ],\n                },\n            ],\n        });\n\n        await this.cloudWatchClient.send(command);\n    }\n\n    private async logFailbackMetrics(rto: number, success: boolean): Promise<void> {\n        const command = new PutMetricDataCommand({\n            Namespace: 'Matbakh/MultiRegion',\n            MetricData: [\n                {\n                    MetricName: 'FailbackRTO',\n                    Value: rto,\n                    Unit: 'Count',\n                    Dimensions: [\n                        { Name: 'Success', Value: success.toString() },\n                    ],\n                },\n                {\n                    MetricName: 'FailbackAttempts',\n                    Value: 1,\n                    Unit: 'Count',\n                    Dimensions: [\n                        { Name: 'Success', Value: success.toString() },\n                    ],\n                },\n            ],\n        });\n\n        await this.cloudWatchClient.send(command);\n    }\n\n    // Placeholder methods for failback operations\n    private async reestablishReplication(): Promise<void> {\n        // Implementation for re-establishing replication\n    }\n\n    private async synchronizeDataToPrimary(): Promise<void> {\n        // Implementation for data synchronization\n    }\n\n    private async switchDnsToPrimary(): Promise<void> {\n        // Implementation for DNS switch back\n    }\n\n    private async updateCloudFrontToPrimary(): Promise<void> {\n        // Implementation for CloudFront update\n    }\n\n    private async resetConfigurationToPrimary(): Promise<void> {\n        // Implementation for configuration reset\n    }\n}"],"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","ignoreList":[]}
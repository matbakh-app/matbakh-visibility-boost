813bf0f9073654aeab32f86c2ed787bd
"use strict";

/* istanbul ignore next */
function cov_20gqkz626j() {
  var path = "/Users/matbakh-visibility-boost.20250920/src/lib/multi-region/multi-region-orchestrator.ts";
  var hash = "851bee7e6e8115d347e2febd1ac5d6365a4c6058";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matbakh-visibility-boost.20250920/src/lib/multi-region/multi-region-orchestrator.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 41
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 28
        },
        end: {
          line: 5,
          column: 65
        }
      },
      "4": {
        start: {
          line: 6,
          column: 28
        },
        end: {
          line: 6,
          column: 65
        }
      },
      "5": {
        start: {
          line: 7,
          column: 21
        },
        end: {
          line: 7,
          column: 51
        }
      },
      "6": {
        start: {
          line: 8,
          column: 26
        },
        end: {
          line: 8,
          column: 61
        }
      },
      "7": {
        start: {
          line: 9,
          column: 21
        },
        end: {
          line: 9,
          column: 51
        }
      },
      "8": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 29
        }
      },
      "9": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 36
        }
      },
      "10": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 173
        }
      },
      "11": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 179
        }
      },
      "12": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 167
        }
      },
      "13": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 178
        }
      },
      "14": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 173
        }
      },
      "15": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 179
        }
      },
      "16": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 187
        }
      },
      "17": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 27,
          column: 9
        }
      },
      "18": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 74
        }
      },
      "19": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "20": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 79
        }
      },
      "21": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "22": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 75
        }
      },
      "23": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 108,
          column: 11
        }
      },
      "24": {
        start: {
          line: 40,
          column: 30
        },
        end: {
          line: 40,
          column: 40
        }
      },
      "25": {
        start: {
          line: 41,
          column: 26
        },
        end: {
          line: 41,
          column: 28
        }
      },
      "26": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 107,
          column: 13
        }
      },
      "27": {
        start: {
          line: 44,
          column: 35
        },
        end: {
          line: 44,
          column: 86
        }
      },
      "28": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 45,
          column: 39
        }
      },
      "29": {
        start: {
          line: 46,
          column: 43
        },
        end: {
          line: 46,
          column: 79
        }
      },
      "30": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 49,
          column: 17
        }
      },
      "31": {
        start: {
          line: 48,
          column: 20
        },
        end: {
          line: 48,
          column: 71
        }
      },
      "32": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 50,
          column: 46
        }
      },
      "33": {
        start: {
          line: 52,
          column: 38
        },
        end: {
          line: 52,
          column: 91
        }
      },
      "34": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 53,
          column: 42
        }
      },
      "35": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 54
        }
      },
      "36": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 49
        }
      },
      "37": {
        start: {
          line: 57,
          column: 32
        },
        end: {
          line: 57,
          column: 78
        }
      },
      "38": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 36
        }
      },
      "39": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 59,
          column: 47
        }
      },
      "40": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 43
        }
      },
      "41": {
        start: {
          line: 62,
          column: 32
        },
        end: {
          line: 62,
          column: 89
        }
      },
      "42": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 36
        }
      },
      "43": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 52
        }
      },
      "44": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 65,
          column: 43
        }
      },
      "45": {
        start: {
          line: 67,
          column: 35
        },
        end: {
          line: 67,
          column: 85
        }
      },
      "46": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 68,
          column: 39
        }
      },
      "47": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 69,
          column: 57
        }
      },
      "48": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 70,
          column: 46
        }
      },
      "49": {
        start: {
          line: 72,
          column: 39
        },
        end: {
          line: 72,
          column: 83
        }
      },
      "50": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 73,
          column: 43
        }
      },
      "51": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 74,
          column: 53
        }
      },
      "52": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 75,
          column: 50
        }
      },
      "53": {
        start: {
          line: 77,
          column: 32
        },
        end: {
          line: 77,
          column: 42
        }
      },
      "54": {
        start: {
          line: 78,
          column: 36
        },
        end: {
          line: 78,
          column: 91
        }
      },
      "55": {
        start: {
          line: 79,
          column: 36
        },
        end: {
          line: 79,
          column: 61
        }
      },
      "56": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 81,
          column: 86
        }
      },
      "57": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 88,
          column: 18
        }
      },
      "58": {
        start: {
          line: 91,
          column: 35
        },
        end: {
          line: 91,
          column: 78
        }
      },
      "59": {
        start: {
          line: 91,
          column: 51
        },
        end: {
          line: 91,
          column: 77
        }
      },
      "60": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 96,
          column: 17
        }
      },
      "61": {
        start: {
          line: 93,
          column: 20
        },
        end: {
          line: 93,
          column: 49
        }
      },
      "62": {
        start: {
          line: 94,
          column: 20
        },
        end: {
          line: 94,
          column: 96
        }
      },
      "63": {
        start: {
          line: 95,
          column: 20
        },
        end: {
          line: 95,
          column: 52
        }
      },
      "64": {
        start: {
          line: 98,
          column: 32
        },
        end: {
          line: 98,
          column: 42
        }
      },
      "65": {
        start: {
          line: 99,
          column: 37
        },
        end: {
          line: 99,
          column: 92
        }
      },
      "66": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 100,
          column: 78
        }
      },
      "67": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 106,
          column: 18
        }
      },
      "68": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 175,
          column: 11
        }
      },
      "69": {
        start: {
          line: 115,
          column: 30
        },
        end: {
          line: 115,
          column: 40
        }
      },
      "70": {
        start: {
          line: 116,
          column: 26
        },
        end: {
          line: 116,
          column: 28
        }
      },
      "71": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 174,
          column: 13
        }
      },
      "72": {
        start: {
          line: 119,
          column: 35
        },
        end: {
          line: 119,
          column: 84
        }
      },
      "73": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 120,
          column: 39
        }
      },
      "74": {
        start: {
          line: 121,
          column: 41
        },
        end: {
          line: 121,
          column: 75
        }
      },
      "75": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 124,
          column: 17
        }
      },
      "76": {
        start: {
          line: 123,
          column: 20
        },
        end: {
          line: 123,
          column: 80
        }
      },
      "77": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 46
        }
      },
      "78": {
        start: {
          line: 127,
          column: 40
        },
        end: {
          line: 127,
          column: 92
        }
      },
      "79": {
        start: {
          line: 128,
          column: 16
        },
        end: {
          line: 128,
          column: 44
        }
      },
      "80": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 129,
          column: 52
        }
      },
      "81": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 130,
          column: 51
        }
      },
      "82": {
        start: {
          line: 132,
          column: 33
        },
        end: {
          line: 132,
          column: 86
        }
      },
      "83": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 133,
          column: 37
        }
      },
      "84": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 134,
          column: 54
        }
      },
      "85": {
        start: {
          line: 135,
          column: 16
        },
        end: {
          line: 135,
          column: 44
        }
      },
      "86": {
        start: {
          line: 137,
          column: 32
        },
        end: {
          line: 137,
          column: 84
        }
      },
      "87": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 36
        }
      },
      "88": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 48
        }
      },
      "89": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 140,
          column: 43
        }
      },
      "90": {
        start: {
          line: 142,
          column: 32
        },
        end: {
          line: 142,
          column: 86
        }
      },
      "91": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 143,
          column: 36
        }
      },
      "92": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 144,
          column: 55
        }
      },
      "93": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 145,
          column: 43
        }
      },
      "94": {
        start: {
          line: 147,
          column: 35
        },
        end: {
          line: 147,
          column: 84
        }
      },
      "95": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 39
        }
      },
      "96": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 57
        }
      },
      "97": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 46
        }
      },
      "98": {
        start: {
          line: 151,
          column: 32
        },
        end: {
          line: 151,
          column: 42
        }
      },
      "99": {
        start: {
          line: 152,
          column: 36
        },
        end: {
          line: 152,
          column: 91
        }
      },
      "100": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 153,
          column: 65
        }
      },
      "101": {
        start: {
          line: 154,
          column: 16
        },
        end: {
          line: 159,
          column: 18
        }
      },
      "102": {
        start: {
          line: 162,
          column: 35
        },
        end: {
          line: 162,
          column: 78
        }
      },
      "103": {
        start: {
          line: 162,
          column: 51
        },
        end: {
          line: 162,
          column: 77
        }
      },
      "104": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 167,
          column: 17
        }
      },
      "105": {
        start: {
          line: 164,
          column: 20
        },
        end: {
          line: 164,
          column: 49
        }
      },
      "106": {
        start: {
          line: 165,
          column: 20
        },
        end: {
          line: 165,
          column: 96
        }
      },
      "107": {
        start: {
          line: 166,
          column: 20
        },
        end: {
          line: 166,
          column: 52
        }
      },
      "108": {
        start: {
          line: 168,
          column: 16
        },
        end: {
          line: 173,
          column: 18
        }
      },
      "109": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 221,
          column: 11
        }
      },
      "110": {
        start: {
          line: 182,
          column: 33
        },
        end: {
          line: 182,
          column: 35
        }
      },
      "111": {
        start: {
          line: 183,
          column: 36
        },
        end: {
          line: 183,
          column: 38
        }
      },
      "112": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 86
        }
      },
      "113": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 188,
          column: 13
        }
      },
      "114": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 187,
          column: 83
        }
      },
      "115": {
        start: {
          line: 190,
          column: 35
        },
        end: {
          line: 190,
          column: 65
        }
      },
      "116": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 70
        }
      },
      "117": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 194,
          column: 13
        }
      },
      "118": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 193,
          column: 119
        }
      },
      "119": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 80
        }
      },
      "120": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 199,
          column: 13
        }
      },
      "121": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 198,
          column: 86
        }
      },
      "122": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 76
        }
      },
      "123": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 204,
          column: 13
        }
      },
      "124": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 203,
          column: 78
        }
      },
      "125": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 86
        }
      },
      "126": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 209,
          column: 13
        }
      },
      "127": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 208,
          column: 96
        }
      },
      "128": {
        start: {
          line: 211,
          column: 33
        },
        end: {
          line: 211,
          column: 63
        }
      },
      "129": {
        start: {
          line: 212,
          column: 33
        },
        end: {
          line: 212,
          column: 61
        }
      },
      "130": {
        start: {
          line: 213,
          column: 28
        },
        end: {
          line: 213,
          column: 77
        }
      },
      "131": {
        start: {
          line: 213,
          column: 71
        },
        end: {
          line: 213,
          column: 76
        }
      },
      "132": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 220,
          column: 14
        }
      },
      "133": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 228,
          column: 10
        }
      },
      "134": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 231,
          column: 34
        }
      },
      "135": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 232,
          column: 34
        }
      },
      "136": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 233,
          column: 74
        }
      },
      "137": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 249,
          column: 11
        }
      },
      "138": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 248,
          column: 13
        }
      },
      "139": {
        start: {
          line: 239,
          column: 32
        },
        end: {
          line: 241,
          column: 18
        }
      },
      "140": {
        start: {
          line: 242,
          column: 33
        },
        end: {
          line: 242,
          column: 71
        }
      },
      "141": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 243,
          column: 145
        }
      },
      "142": {
        start: {
          line: 243,
          column: 106
        },
        end: {
          line: 243,
          column: 133
        }
      },
      "143": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 246,
          column: 75
        }
      },
      "144": {
        start: {
          line: 247,
          column: 16
        },
        end: {
          line: 247,
          column: 29
        }
      },
      "145": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 265,
          column: 11
        }
      },
      "146": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 264,
          column: 13
        }
      },
      "147": {
        start: {
          line: 255,
          column: 32
        },
        end: {
          line: 257,
          column: 18
        }
      },
      "148": {
        start: {
          line: 258,
          column: 33
        },
        end: {
          line: 258,
          column: 71
        }
      },
      "149": {
        start: {
          line: 259,
          column: 16
        },
        end: {
          line: 259,
          column: 145
        }
      },
      "150": {
        start: {
          line: 259,
          column: 106
        },
        end: {
          line: 259,
          column: 133
        }
      },
      "151": {
        start: {
          line: 262,
          column: 16
        },
        end: {
          line: 262,
          column: 73
        }
      },
      "152": {
        start: {
          line: 263,
          column: 16
        },
        end: {
          line: 263,
          column: 29
        }
      },
      "153": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 278,
          column: 11
        }
      },
      "154": {
        start: {
          line: 270,
          column: 28
        },
        end: {
          line: 274,
          column: 14
        }
      },
      "155": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 56
        }
      },
      "156": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 277,
          column: 49
        }
      },
      "157": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 298,
          column: 11
        }
      },
      "158": {
        start: {
          line: 283,
          column: 32
        },
        end: {
          line: 283,
          column: 34
        }
      },
      "159": {
        start: {
          line: 284,
          column: 27
        },
        end: {
          line: 284,
          column: 28
        }
      },
      "160": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 296,
          column: 13
        }
      },
      "161": {
        start: {
          line: 286,
          column: 32
        },
        end: {
          line: 288,
          column: 18
        }
      },
      "162": {
        start: {
          line: 289,
          column: 33
        },
        end: {
          line: 289,
          column: 76
        }
      },
      "163": {
        start: {
          line: 290,
          column: 32
        },
        end: {
          line: 290,
          column: 101
        }
      },
      "164": {
        start: {
          line: 291,
          column: 16
        },
        end: {
          line: 293,
          column: 17
        }
      },
      "165": {
        start: {
          line: 292,
          column: 20
        },
        end: {
          line: 292,
          column: 27
        }
      },
      "166": {
        start: {
          line: 294,
          column: 16
        },
        end: {
          line: 294,
          column: 73
        }
      },
      "167": {
        start: {
          line: 294,
          column: 45
        },
        end: {
          line: 294,
          column: 71
        }
      },
      "168": {
        start: {
          line: 295,
          column: 16
        },
        end: {
          line: 295,
          column: 27
        }
      },
      "169": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 297,
          column: 60
        }
      },
      "170": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 339,
          column: 11
        }
      },
      "171": {
        start: {
          line: 303,
          column: 28
        },
        end: {
          line: 337,
          column: 14
        }
      },
      "172": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 338,
          column: 51
        }
      },
      "173": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 367,
          column: 11
        }
      },
      "174": {
        start: {
          line: 345,
          column: 31
        },
        end: {
          line: 347,
          column: 14
        }
      },
      "175": {
        start: {
          line: 348,
          column: 29
        },
        end: {
          line: 348,
          column: 73
        }
      },
      "176": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 351,
          column: 13
        }
      },
      "177": {
        start: {
          line: 350,
          column: 16
        },
        end: {
          line: 350,
          column: 81
        }
      },
      "178": {
        start: {
          line: 353,
          column: 27
        },
        end: {
          line: 353,
          column: 67
        }
      },
      "179": {
        start: {
          line: 356,
          column: 40
        },
        end: {
          line: 365,
          column: 14
        }
      },
      "180": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 366,
          column: 66
        }
      },
      "181": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 389,
          column: 11
        }
      },
      "182": {
        start: {
          line: 372,
          column: 28
        },
        end: {
          line: 378,
          column: 14
        }
      },
      "183": {
        start: {
          line: 379,
          column: 12
        },
        end: {
          line: 379,
          column: 56
        }
      },
      "184": {
        start: {
          line: 381,
          column: 34
        },
        end: {
          line: 387,
          column: 14
        }
      },
      "185": {
        start: {
          line: 388,
          column: 12
        },
        end: {
          line: 388,
          column: 62
        }
      },
      "186": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 404,
          column: 11
        }
      },
      "187": {
        start: {
          line: 394,
          column: 35
        },
        end: {
          line: 394,
          column: 112
        }
      },
      "188": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 403,
          column: 13
        }
      },
      "189": {
        start: {
          line: 396,
          column: 33
        },
        end: {
          line: 396,
          column: 60
        }
      },
      "190": {
        start: {
          line: 397,
          column: 16
        },
        end: {
          line: 399,
          column: 17
        }
      },
      "191": {
        start: {
          line: 398,
          column: 20
        },
        end: {
          line: 398,
          column: 79
        }
      },
      "192": {
        start: {
          line: 402,
          column: 16
        },
        end: {
          line: 402,
          column: 72
        }
      },
      "193": {
        start: {
          line: 407,
          column: 8
        },
        end: {
          line: 426,
          column: 11
        }
      },
      "194": {
        start: {
          line: 410,
          column: 12
        },
        end: {
          line: 425,
          column: 13
        }
      },
      "195": {
        start: {
          line: 411,
          column: 32
        },
        end: {
          line: 413,
          column: 18
        }
      },
      "196": {
        start: {
          line: 414,
          column: 33
        },
        end: {
          line: 414,
          column: 76
        }
      },
      "197": {
        start: {
          line: 415,
          column: 32
        },
        end: {
          line: 415,
          column: 101
        }
      },
      "198": {
        start: {
          line: 416,
          column: 16
        },
        end: {
          line: 419,
          column: 17
        }
      },
      "199": {
        start: {
          line: 418,
          column: 20
        },
        end: {
          line: 418,
          column: 29
        }
      },
      "200": {
        start: {
          line: 420,
          column: 16
        },
        end: {
          line: 420,
          column: 25
        }
      },
      "201": {
        start: {
          line: 423,
          column: 16
        },
        end: {
          line: 423,
          column: 63
        }
      },
      "202": {
        start: {
          line: 424,
          column: 16
        },
        end: {
          line: 424,
          column: 25
        }
      },
      "203": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 442,
          column: 11
        }
      },
      "204": {
        start: {
          line: 430,
          column: 12
        },
        end: {
          line: 441,
          column: 13
        }
      },
      "205": {
        start: {
          line: 431,
          column: 32
        },
        end: {
          line: 433,
          column: 18
        }
      },
      "206": {
        start: {
          line: 434,
          column: 33
        },
        end: {
          line: 434,
          column: 76
        }
      },
      "207": {
        start: {
          line: 436,
          column: 16
        },
        end: {
          line: 436,
          column: 29
        }
      },
      "208": {
        start: {
          line: 439,
          column: 16
        },
        end: {
          line: 439,
          column: 71
        }
      },
      "209": {
        start: {
          line: 440,
          column: 16
        },
        end: {
          line: 440,
          column: 29
        }
      },
      "210": {
        start: {
          line: 445,
          column: 8
        },
        end: {
          line: 454,
          column: 11
        }
      },
      "211": {
        start: {
          line: 446,
          column: 12
        },
        end: {
          line: 453,
          column: 13
        }
      },
      "212": {
        start: {
          line: 447,
          column: 37
        },
        end: {
          line: 447,
          column: 164
        }
      },
      "213": {
        start: {
          line: 448,
          column: 39
        },
        end: {
          line: 448,
          column: 168
        }
      },
      "214": {
        start: {
          line: 449,
          column: 16
        },
        end: {
          line: 449,
          column: 82
        }
      },
      "215": {
        start: {
          line: 452,
          column: 16
        },
        end: {
          line: 452,
          column: 29
        }
      },
      "216": {
        start: {
          line: 457,
          column: 8
        },
        end: {
          line: 460,
          column: 11
        }
      },
      "217": {
        start: {
          line: 459,
          column: 12
        },
        end: {
          line: 459,
          column: 24
        }
      },
      "218": {
        start: {
          line: 463,
          column: 8
        },
        end: {
          line: 466,
          column: 11
        }
      },
      "219": {
        start: {
          line: 465,
          column: 12
        },
        end: {
          line: 465,
          column: 24
        }
      },
      "220": {
        start: {
          line: 469,
          column: 22
        },
        end: {
          line: 469,
          column: 23
        }
      },
      "221": {
        start: {
          line: 470,
          column: 8
        },
        end: {
          line: 471,
          column: 25
        }
      },
      "222": {
        start: {
          line: 471,
          column: 12
        },
        end: {
          line: 471,
          column: 25
        }
      },
      "223": {
        start: {
          line: 472,
          column: 8
        },
        end: {
          line: 473,
          column: 25
        }
      },
      "224": {
        start: {
          line: 473,
          column: 12
        },
        end: {
          line: 473,
          column: 25
        }
      },
      "225": {
        start: {
          line: 474,
          column: 8
        },
        end: {
          line: 475,
          column: 25
        }
      },
      "226": {
        start: {
          line: 475,
          column: 12
        },
        end: {
          line: 475,
          column: 25
        }
      },
      "227": {
        start: {
          line: 476,
          column: 8
        },
        end: {
          line: 477,
          column: 25
        }
      },
      "228": {
        start: {
          line: 477,
          column: 12
        },
        end: {
          line: 477,
          column: 25
        }
      },
      "229": {
        start: {
          line: 478,
          column: 8
        },
        end: {
          line: 479,
          column: 25
        }
      },
      "230": {
        start: {
          line: 479,
          column: 12
        },
        end: {
          line: 479,
          column: 25
        }
      },
      "231": {
        start: {
          line: 480,
          column: 8
        },
        end: {
          line: 480,
          column: 37
        }
      },
      "232": {
        start: {
          line: 483,
          column: 8
        },
        end: {
          line: 494,
          column: 10
        }
      },
      "233": {
        start: {
          line: 497,
          column: 8
        },
        end: {
          line: 530,
          column: 11
        }
      },
      "234": {
        start: {
          line: 498,
          column: 28
        },
        end: {
          line: 528,
          column: 14
        }
      },
      "235": {
        start: {
          line: 529,
          column: 12
        },
        end: {
          line: 529,
          column: 54
        }
      },
      "236": {
        start: {
          line: 533,
          column: 8
        },
        end: {
          line: 556,
          column: 11
        }
      },
      "237": {
        start: {
          line: 534,
          column: 28
        },
        end: {
          line: 554,
          column: 14
        }
      },
      "238": {
        start: {
          line: 555,
          column: 12
        },
        end: {
          line: 555,
          column: 54
        }
      },
      "239": {
        start: {
          line: 560,
          column: 8
        },
        end: {
          line: 562,
          column: 11
        }
      },
      "240": {
        start: {
          line: 565,
          column: 8
        },
        end: {
          line: 567,
          column: 11
        }
      },
      "241": {
        start: {
          line: 570,
          column: 8
        },
        end: {
          line: 572,
          column: 11
        }
      },
      "242": {
        start: {
          line: 575,
          column: 8
        },
        end: {
          line: 577,
          column: 11
        }
      },
      "243": {
        start: {
          line: 580,
          column: 8
        },
        end: {
          line: 582,
          column: 11
        }
      },
      "244": {
        start: {
          line: 585,
          column: 0
        },
        end: {
          line: 585,
          column: 58
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 33
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 27
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 24
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        loc: {
          start: {
            line: 38,
            column: 22
          },
          end: {
            line: 109,
            column: 5
          }
        },
        line: 38
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 39,
            column: 58
          },
          end: {
            line: 39,
            column: 59
          }
        },
        loc: {
          start: {
            line: 39,
            column: 97
          },
          end: {
            line: 108,
            column: 9
          }
        },
        line: 39
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 91,
            column: 46
          },
          end: {
            line: 91,
            column: 47
          }
        },
        loc: {
          start: {
            line: 91,
            column: 51
          },
          end: {
            line: 91,
            column: 77
          }
        },
        line: 91
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 113,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        loc: {
          start: {
            line: 113,
            column: 22
          },
          end: {
            line: 176,
            column: 5
          }
        },
        line: 113
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 114,
            column: 58
          },
          end: {
            line: 114,
            column: 59
          }
        },
        loc: {
          start: {
            line: 114,
            column: 97
          },
          end: {
            line: 175,
            column: 9
          }
        },
        line: 114
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 162,
            column: 46
          },
          end: {
            line: 162,
            column: 47
          }
        },
        loc: {
          start: {
            line: 162,
            column: 51
          },
          end: {
            line: 162,
            column: 77
          }
        },
        line: 162
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 180,
            column: 4
          },
          end: {
            line: 180,
            column: 5
          }
        },
        loc: {
          start: {
            line: 180,
            column: 27
          },
          end: {
            line: 222,
            column: 5
          }
        },
        line: 180
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 181,
            column: 55
          },
          end: {
            line: 181,
            column: 56
          }
        },
        loc: {
          start: {
            line: 181,
            column: 68
          },
          end: {
            line: 221,
            column: 9
          }
        },
        line: 181
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 213,
            column: 62
          },
          end: {
            line: 213,
            column: 63
          }
        },
        loc: {
          start: {
            line: 213,
            column: 71
          },
          end: {
            line: 213,
            column: 76
          }
        },
        line: 213
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 223,
            column: 4
          },
          end: {
            line: 223,
            column: 5
          }
        },
        loc: {
          start: {
            line: 223,
            column: 28
          },
          end: {
            line: 229,
            column: 5
          }
        },
        line: 223
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 230,
            column: 4
          },
          end: {
            line: 230,
            column: 5
          }
        },
        loc: {
          start: {
            line: 230,
            column: 23
          },
          end: {
            line: 234,
            column: 5
          }
        },
        line: 230
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 235,
            column: 4
          },
          end: {
            line: 235,
            column: 5
          }
        },
        loc: {
          start: {
            line: 235,
            column: 30
          },
          end: {
            line: 250,
            column: 5
          }
        },
        line: 235
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 236,
            column: 55
          },
          end: {
            line: 236,
            column: 56
          }
        },
        loc: {
          start: {
            line: 236,
            column: 68
          },
          end: {
            line: 249,
            column: 9
          }
        },
        line: 236
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 243,
            column: 96
          },
          end: {
            line: 243,
            column: 97
          }
        },
        loc: {
          start: {
            line: 243,
            column: 106
          },
          end: {
            line: 243,
            column: 133
          }
        },
        line: 243
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 251,
            column: 4
          },
          end: {
            line: 251,
            column: 5
          }
        },
        loc: {
          start: {
            line: 251,
            column: 28
          },
          end: {
            line: 266,
            column: 5
          }
        },
        line: 251
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 252,
            column: 55
          },
          end: {
            line: 252,
            column: 56
          }
        },
        loc: {
          start: {
            line: 252,
            column: 68
          },
          end: {
            line: 265,
            column: 9
          }
        },
        line: 252
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 259,
            column: 96
          },
          end: {
            line: 259,
            column: 97
          }
        },
        loc: {
          start: {
            line: 259,
            column: 106
          },
          end: {
            line: 259,
            column: 133
          }
        },
        line: 259
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 267,
            column: 4
          },
          end: {
            line: 267,
            column: 5
          }
        },
        loc: {
          start: {
            line: 267,
            column: 31
          },
          end: {
            line: 279,
            column: 5
          }
        },
        line: 267
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 268,
            column: 55
          },
          end: {
            line: 268,
            column: 56
          }
        },
        loc: {
          start: {
            line: 268,
            column: 68
          },
          end: {
            line: 278,
            column: 9
          }
        },
        line: 268
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 280,
            column: 4
          },
          end: {
            line: 280,
            column: 5
          }
        },
        loc: {
          start: {
            line: 280,
            column: 30
          },
          end: {
            line: 299,
            column: 5
          }
        },
        line: 280
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 281,
            column: 55
          },
          end: {
            line: 281,
            column: 56
          }
        },
        loc: {
          start: {
            line: 281,
            column: 68
          },
          end: {
            line: 298,
            column: 9
          }
        },
        line: 281
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 294,
            column: 34
          },
          end: {
            line: 294,
            column: 35
          }
        },
        loc: {
          start: {
            line: 294,
            column: 45
          },
          end: {
            line: 294,
            column: 71
          }
        },
        line: 294
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 300,
            column: 4
          },
          end: {
            line: 300,
            column: 5
          }
        },
        loc: {
          start: {
            line: 300,
            column: 24
          },
          end: {
            line: 340,
            column: 5
          }
        },
        line: 300
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 301,
            column: 55
          },
          end: {
            line: 301,
            column: 56
          }
        },
        loc: {
          start: {
            line: 301,
            column: 68
          },
          end: {
            line: 339,
            column: 9
          }
        },
        line: 301
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 341,
            column: 4
          },
          end: {
            line: 341,
            column: 5
          }
        },
        loc: {
          start: {
            line: 341,
            column: 29
          },
          end: {
            line: 368,
            column: 5
          }
        },
        line: 341
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 342,
            column: 55
          },
          end: {
            line: 342,
            column: 56
          }
        },
        loc: {
          start: {
            line: 342,
            column: 68
          },
          end: {
            line: 367,
            column: 9
          }
        },
        line: 342
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 369,
            column: 4
          },
          end: {
            line: 369,
            column: 5
          }
        },
        loc: {
          start: {
            line: 369,
            column: 34
          },
          end: {
            line: 390,
            column: 5
          }
        },
        line: 369
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 370,
            column: 55
          },
          end: {
            line: 370,
            column: 56
          }
        },
        loc: {
          start: {
            line: 370,
            column: 68
          },
          end: {
            line: 389,
            column: 9
          }
        },
        line: 370
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 391,
            column: 4
          },
          end: {
            line: 391,
            column: 5
          }
        },
        loc: {
          start: {
            line: 391,
            column: 30
          },
          end: {
            line: 405,
            column: 5
          }
        },
        line: 391
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 392,
            column: 55
          },
          end: {
            line: 392,
            column: 56
          }
        },
        loc: {
          start: {
            line: 392,
            column: 68
          },
          end: {
            line: 404,
            column: 9
          }
        },
        line: 392
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 406,
            column: 4
          },
          end: {
            line: 406,
            column: 5
          }
        },
        loc: {
          start: {
            line: 406,
            column: 19
          },
          end: {
            line: 427,
            column: 5
          }
        },
        line: 406
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 407,
            column: 55
          },
          end: {
            line: 407,
            column: 56
          }
        },
        loc: {
          start: {
            line: 407,
            column: 68
          },
          end: {
            line: 426,
            column: 9
          }
        },
        line: 407
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 428,
            column: 4
          },
          end: {
            line: 428,
            column: 5
          }
        },
        loc: {
          start: {
            line: 428,
            column: 24
          },
          end: {
            line: 443,
            column: 5
          }
        },
        line: 428
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 429,
            column: 55
          },
          end: {
            line: 429,
            column: 56
          }
        },
        loc: {
          start: {
            line: 429,
            column: 68
          },
          end: {
            line: 442,
            column: 9
          }
        },
        line: 429
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 444,
            column: 4
          },
          end: {
            line: 444,
            column: 5
          }
        },
        loc: {
          start: {
            line: 444,
            column: 30
          },
          end: {
            line: 455,
            column: 5
          }
        },
        line: 444
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 445,
            column: 55
          },
          end: {
            line: 445,
            column: 56
          }
        },
        loc: {
          start: {
            line: 445,
            column: 68
          },
          end: {
            line: 454,
            column: 9
          }
        },
        line: 445
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 456,
            column: 4
          },
          end: {
            line: 456,
            column: 5
          }
        },
        loc: {
          start: {
            line: 456,
            column: 28
          },
          end: {
            line: 461,
            column: 5
          }
        },
        line: 456
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 457,
            column: 55
          },
          end: {
            line: 457,
            column: 56
          }
        },
        loc: {
          start: {
            line: 457,
            column: 68
          },
          end: {
            line: 460,
            column: 9
          }
        },
        line: 457
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 462,
            column: 4
          },
          end: {
            line: 462,
            column: 5
          }
        },
        loc: {
          start: {
            line: 462,
            column: 33
          },
          end: {
            line: 467,
            column: 5
          }
        },
        line: 462
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 463,
            column: 55
          },
          end: {
            line: 463,
            column: 56
          }
        },
        loc: {
          start: {
            line: 463,
            column: 68
          },
          end: {
            line: 466,
            column: 9
          }
        },
        line: 463
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 468,
            column: 4
          },
          end: {
            line: 468,
            column: 5
          }
        },
        loc: {
          start: {
            line: 468,
            column: 30
          },
          end: {
            line: 481,
            column: 5
          }
        },
        line: 468
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 482,
            column: 4
          },
          end: {
            line: 482,
            column: 5
          }
        },
        loc: {
          start: {
            line: 482,
            column: 27
          },
          end: {
            line: 495,
            column: 5
          }
        },
        line: 482
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 496,
            column: 4
          },
          end: {
            line: 496,
            column: 5
          }
        },
        loc: {
          start: {
            line: 496,
            column: 50
          },
          end: {
            line: 531,
            column: 5
          }
        },
        line: 496
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 497,
            column: 55
          },
          end: {
            line: 497,
            column: 56
          }
        },
        loc: {
          start: {
            line: 497,
            column: 68
          },
          end: {
            line: 530,
            column: 9
          }
        },
        line: 497
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 532,
            column: 4
          },
          end: {
            line: 532,
            column: 5
          }
        },
        loc: {
          start: {
            line: 532,
            column: 37
          },
          end: {
            line: 557,
            column: 5
          }
        },
        line: 532
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 533,
            column: 55
          },
          end: {
            line: 533,
            column: 56
          }
        },
        loc: {
          start: {
            line: 533,
            column: 68
          },
          end: {
            line: 556,
            column: 9
          }
        },
        line: 533
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 559,
            column: 4
          },
          end: {
            line: 559,
            column: 5
          }
        },
        loc: {
          start: {
            line: 559,
            column: 29
          },
          end: {
            line: 563,
            column: 5
          }
        },
        line: 559
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 560,
            column: 55
          },
          end: {
            line: 560,
            column: 56
          }
        },
        loc: {
          start: {
            line: 560,
            column: 68
          },
          end: {
            line: 562,
            column: 9
          }
        },
        line: 560
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 564,
            column: 4
          },
          end: {
            line: 564,
            column: 5
          }
        },
        loc: {
          start: {
            line: 564,
            column: 31
          },
          end: {
            line: 568,
            column: 5
          }
        },
        line: 564
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 565,
            column: 55
          },
          end: {
            line: 565,
            column: 56
          }
        },
        loc: {
          start: {
            line: 565,
            column: 68
          },
          end: {
            line: 567,
            column: 9
          }
        },
        line: 565
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 569,
            column: 4
          },
          end: {
            line: 569,
            column: 5
          }
        },
        loc: {
          start: {
            line: 569,
            column: 25
          },
          end: {
            line: 573,
            column: 5
          }
        },
        line: 569
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 570,
            column: 55
          },
          end: {
            line: 570,
            column: 56
          }
        },
        loc: {
          start: {
            line: 570,
            column: 68
          },
          end: {
            line: 572,
            column: 9
          }
        },
        line: 570
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 574,
            column: 4
          },
          end: {
            line: 574,
            column: 5
          }
        },
        loc: {
          start: {
            line: 574,
            column: 32
          },
          end: {
            line: 578,
            column: 5
          }
        },
        line: 574
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 575,
            column: 55
          },
          end: {
            line: 575,
            column: 56
          }
        },
        loc: {
          start: {
            line: 575,
            column: 68
          },
          end: {
            line: 577,
            column: 9
          }
        },
        line: 575
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 579,
            column: 4
          },
          end: {
            line: 579,
            column: 5
          }
        },
        loc: {
          start: {
            line: 579,
            column: 34
          },
          end: {
            line: 583,
            column: 5
          }
        },
        line: 579
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 580,
            column: 55
          },
          end: {
            line: 580,
            column: 56
          }
        },
        loc: {
          start: {
            line: 580,
            column: 68
          },
          end: {
            line: 582,
            column: 9
          }
        },
        line: 580
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 32
          },
          end: {
            line: 16,
            column: 172
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 33
          },
          end: {
            line: 16,
            column: 107
          }
        }, {
          start: {
            line: 16,
            column: 112
          },
          end: {
            line: 16,
            column: 172
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 16,
            column: 33
          },
          end: {
            line: 16,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 16,
            column: 74
          },
          end: {
            line: 16,
            column: 80
          }
        }, {
          start: {
            line: 16,
            column: 83
          },
          end: {
            line: 16,
            column: 107
          }
        }],
        line: 16
      },
      "2": {
        loc: {
          start: {
            line: 16,
            column: 33
          },
          end: {
            line: 16,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 33
          },
          end: {
            line: 16,
            column: 49
          }
        }, {
          start: {
            line: 16,
            column: 53
          },
          end: {
            line: 16,
            column: 71
          }
        }],
        line: 16
      },
      "3": {
        loc: {
          start: {
            line: 17,
            column: 34
          },
          end: {
            line: 17,
            column: 178
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 35
          },
          end: {
            line: 17,
            column: 111
          }
        }, {
          start: {
            line: 17,
            column: 116
          },
          end: {
            line: 17,
            column: 178
          }
        }],
        line: 17
      },
      "4": {
        loc: {
          start: {
            line: 17,
            column: 35
          },
          end: {
            line: 17,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 17,
            column: 76
          },
          end: {
            line: 17,
            column: 82
          }
        }, {
          start: {
            line: 17,
            column: 85
          },
          end: {
            line: 17,
            column: 111
          }
        }],
        line: 17
      },
      "5": {
        loc: {
          start: {
            line: 17,
            column: 35
          },
          end: {
            line: 17,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 35
          },
          end: {
            line: 17,
            column: 51
          }
        }, {
          start: {
            line: 17,
            column: 55
          },
          end: {
            line: 17,
            column: 73
          }
        }],
        line: 17
      },
      "6": {
        loc: {
          start: {
            line: 18,
            column: 29
          },
          end: {
            line: 18,
            column: 166
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 30
          },
          end: {
            line: 18,
            column: 101
          }
        }, {
          start: {
            line: 18,
            column: 106
          },
          end: {
            line: 18,
            column: 166
          }
        }],
        line: 18
      },
      "7": {
        loc: {
          start: {
            line: 18,
            column: 30
          },
          end: {
            line: 18,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 18,
            column: 71
          },
          end: {
            line: 18,
            column: 77
          }
        }, {
          start: {
            line: 18,
            column: 80
          },
          end: {
            line: 18,
            column: 101
          }
        }],
        line: 18
      },
      "8": {
        loc: {
          start: {
            line: 18,
            column: 30
          },
          end: {
            line: 18,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 30
          },
          end: {
            line: 18,
            column: 46
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 18,
            column: 68
          }
        }],
        line: 18
      },
      "9": {
        loc: {
          start: {
            line: 19,
            column: 32
          },
          end: {
            line: 19,
            column: 177
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 19,
            column: 33
          },
          end: {
            line: 19,
            column: 107
          }
        }, {
          start: {
            line: 19,
            column: 112
          },
          end: {
            line: 19,
            column: 177
          }
        }],
        line: 19
      },
      "10": {
        loc: {
          start: {
            line: 19,
            column: 33
          },
          end: {
            line: 19,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 19,
            column: 74
          },
          end: {
            line: 19,
            column: 80
          }
        }, {
          start: {
            line: 19,
            column: 83
          },
          end: {
            line: 19,
            column: 107
          }
        }],
        line: 19
      },
      "11": {
        loc: {
          start: {
            line: 19,
            column: 33
          },
          end: {
            line: 19,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 19,
            column: 33
          },
          end: {
            line: 19,
            column: 49
          }
        }, {
          start: {
            line: 19,
            column: 53
          },
          end: {
            line: 19,
            column: 71
          }
        }],
        line: 19
      },
      "12": {
        loc: {
          start: {
            line: 20,
            column: 32
          },
          end: {
            line: 20,
            column: 172
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 33
          },
          end: {
            line: 20,
            column: 107
          }
        }, {
          start: {
            line: 20,
            column: 112
          },
          end: {
            line: 20,
            column: 172
          }
        }],
        line: 20
      },
      "13": {
        loc: {
          start: {
            line: 20,
            column: 33
          },
          end: {
            line: 20,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 20,
            column: 74
          },
          end: {
            line: 20,
            column: 80
          }
        }, {
          start: {
            line: 20,
            column: 83
          },
          end: {
            line: 20,
            column: 107
          }
        }],
        line: 20
      },
      "14": {
        loc: {
          start: {
            line: 20,
            column: 33
          },
          end: {
            line: 20,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 33
          },
          end: {
            line: 20,
            column: 49
          }
        }, {
          start: {
            line: 20,
            column: 53
          },
          end: {
            line: 20,
            column: 71
          }
        }],
        line: 20
      },
      "15": {
        loc: {
          start: {
            line: 21,
            column: 34
          },
          end: {
            line: 21,
            column: 178
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 35
          },
          end: {
            line: 21,
            column: 111
          }
        }, {
          start: {
            line: 21,
            column: 116
          },
          end: {
            line: 21,
            column: 178
          }
        }],
        line: 21
      },
      "16": {
        loc: {
          start: {
            line: 21,
            column: 35
          },
          end: {
            line: 21,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 21,
            column: 76
          },
          end: {
            line: 21,
            column: 82
          }
        }, {
          start: {
            line: 21,
            column: 85
          },
          end: {
            line: 21,
            column: 111
          }
        }],
        line: 21
      },
      "17": {
        loc: {
          start: {
            line: 21,
            column: 35
          },
          end: {
            line: 21,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 35
          },
          end: {
            line: 21,
            column: 51
          }
        }, {
          start: {
            line: 21,
            column: 55
          },
          end: {
            line: 21,
            column: 73
          }
        }],
        line: 21
      },
      "18": {
        loc: {
          start: {
            line: 22,
            column: 32
          },
          end: {
            line: 22,
            column: 186
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 33
          },
          end: {
            line: 22,
            column: 107
          }
        }, {
          start: {
            line: 22,
            column: 112
          },
          end: {
            line: 22,
            column: 186
          }
        }],
        line: 22
      },
      "19": {
        loc: {
          start: {
            line: 22,
            column: 33
          },
          end: {
            line: 22,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 22,
            column: 74
          },
          end: {
            line: 22,
            column: 80
          }
        }, {
          start: {
            line: 22,
            column: 83
          },
          end: {
            line: 22,
            column: 107
          }
        }],
        line: 22
      },
      "20": {
        loc: {
          start: {
            line: 22,
            column: 33
          },
          end: {
            line: 22,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 33
          },
          end: {
            line: 22,
            column: 49
          }
        }, {
          start: {
            line: 22,
            column: 53
          },
          end: {
            line: 22,
            column: 71
          }
        }],
        line: 22
      },
      "21": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "22": {
        loc: {
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 25,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 25,
            column: 33
          }
        }, {
          start: {
            line: 25,
            column: 37
          },
          end: {
            line: 25,
            column: 60
          }
        }],
        line: 25
      },
      "23": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "24": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "25": {
        loc: {
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 31,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 31,
            column: 30
          }
        }, {
          start: {
            line: 31,
            column: 34
          },
          end: {
            line: 31,
            column: 54
          }
        }],
        line: 31
      },
      "26": {
        loc: {
          start: {
            line: 39,
            column: 69
          },
          end: {
            line: 39,
            column: 95
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 39,
            column: 78
          },
          end: {
            line: 39,
            column: 95
          }
        }],
        line: 39
      },
      "27": {
        loc: {
          start: {
            line: 47,
            column: 16
          },
          end: {
            line: 49,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 16
          },
          end: {
            line: 49,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "28": {
        loc: {
          start: {
            line: 92,
            column: 16
          },
          end: {
            line: 96,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 16
          },
          end: {
            line: 96,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "29": {
        loc: {
          start: {
            line: 94,
            column: 39
          },
          end: {
            line: 94,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 94,
            column: 64
          },
          end: {
            line: 94,
            column: 77
          }
        }, {
          start: {
            line: 94,
            column: 80
          },
          end: {
            line: 94,
            column: 95
          }
        }],
        line: 94
      },
      "30": {
        loc: {
          start: {
            line: 114,
            column: 69
          },
          end: {
            line: 114,
            column: 95
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 114,
            column: 78
          },
          end: {
            line: 114,
            column: 95
          }
        }],
        line: 114
      },
      "31": {
        loc: {
          start: {
            line: 122,
            column: 16
          },
          end: {
            line: 124,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 16
          },
          end: {
            line: 124,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "32": {
        loc: {
          start: {
            line: 163,
            column: 16
          },
          end: {
            line: 167,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 16
          },
          end: {
            line: 167,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "33": {
        loc: {
          start: {
            line: 165,
            column: 39
          },
          end: {
            line: 165,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 165,
            column: 64
          },
          end: {
            line: 165,
            column: 77
          }
        }, {
          start: {
            line: 165,
            column: 80
          },
          end: {
            line: 165,
            column: 95
          }
        }],
        line: 165
      },
      "34": {
        loc: {
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 188,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 188,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 186
      },
      "35": {
        loc: {
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 194,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 194,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      },
      "36": {
        loc: {
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 199,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 199,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "37": {
        loc: {
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "38": {
        loc: {
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 209,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 209,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "39": {
        loc: {
          start: {
            line: 243,
            column: 23
          },
          end: {
            line: 243,
            column: 144
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 243,
            column: 24
          },
          end: {
            line: 243,
            column: 134
          }
        }, {
          start: {
            line: 243,
            column: 139
          },
          end: {
            line: 243,
            column: 144
          }
        }],
        line: 243
      },
      "40": {
        loc: {
          start: {
            line: 243,
            column: 24
          },
          end: {
            line: 243,
            column: 134
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 243,
            column: 79
          },
          end: {
            line: 243,
            column: 85
          }
        }, {
          start: {
            line: 243,
            column: 88
          },
          end: {
            line: 243,
            column: 134
          }
        }],
        line: 243
      },
      "41": {
        loc: {
          start: {
            line: 243,
            column: 24
          },
          end: {
            line: 243,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 243,
            column: 24
          },
          end: {
            line: 243,
            column: 59
          }
        }, {
          start: {
            line: 243,
            column: 63
          },
          end: {
            line: 243,
            column: 76
          }
        }],
        line: 243
      },
      "42": {
        loc: {
          start: {
            line: 259,
            column: 23
          },
          end: {
            line: 259,
            column: 144
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 259,
            column: 24
          },
          end: {
            line: 259,
            column: 134
          }
        }, {
          start: {
            line: 259,
            column: 139
          },
          end: {
            line: 259,
            column: 144
          }
        }],
        line: 259
      },
      "43": {
        loc: {
          start: {
            line: 259,
            column: 24
          },
          end: {
            line: 259,
            column: 134
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 259,
            column: 79
          },
          end: {
            line: 259,
            column: 85
          }
        }, {
          start: {
            line: 259,
            column: 88
          },
          end: {
            line: 259,
            column: 134
          }
        }],
        line: 259
      },
      "44": {
        loc: {
          start: {
            line: 259,
            column: 24
          },
          end: {
            line: 259,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 259,
            column: 24
          },
          end: {
            line: 259,
            column: 59
          }
        }, {
          start: {
            line: 259,
            column: 63
          },
          end: {
            line: 259,
            column: 76
          }
        }],
        line: 259
      },
      "45": {
        loc: {
          start: {
            line: 290,
            column: 32
          },
          end: {
            line: 290,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 290,
            column: 87
          },
          end: {
            line: 290,
            column: 93
          }
        }, {
          start: {
            line: 290,
            column: 96
          },
          end: {
            line: 290,
            column: 101
          }
        }],
        line: 290
      },
      "46": {
        loc: {
          start: {
            line: 290,
            column: 32
          },
          end: {
            line: 290,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 290,
            column: 32
          },
          end: {
            line: 290,
            column: 67
          }
        }, {
          start: {
            line: 290,
            column: 71
          },
          end: {
            line: 290,
            column: 84
          }
        }],
        line: 290
      },
      "47": {
        loc: {
          start: {
            line: 291,
            column: 16
          },
          end: {
            line: 293,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 291,
            column: 16
          },
          end: {
            line: 293,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 291
      },
      "48": {
        loc: {
          start: {
            line: 291,
            column: 20
          },
          end: {
            line: 291,
            column: 155
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 291,
            column: 20
          },
          end: {
            line: 291,
            column: 102
          }
        }, {
          start: {
            line: 291,
            column: 106
          },
          end: {
            line: 291,
            column: 155
          }
        }],
        line: 291
      },
      "49": {
        loc: {
          start: {
            line: 291,
            column: 21
          },
          end: {
            line: 291,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 291,
            column: 62
          },
          end: {
            line: 291,
            column: 68
          }
        }, {
          start: {
            line: 291,
            column: 71
          },
          end: {
            line: 291,
            column: 85
          }
        }],
        line: 291
      },
      "50": {
        loc: {
          start: {
            line: 291,
            column: 21
          },
          end: {
            line: 291,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 291,
            column: 21
          },
          end: {
            line: 291,
            column: 37
          }
        }, {
          start: {
            line: 291,
            column: 41
          },
          end: {
            line: 291,
            column: 59
          }
        }],
        line: 291
      },
      "51": {
        loc: {
          start: {
            line: 349,
            column: 12
          },
          end: {
            line: 351,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 349,
            column: 12
          },
          end: {
            line: 351,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 349
      },
      "52": {
        loc: {
          start: {
            line: 349,
            column: 18
          },
          end: {
            line: 349,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 349,
            column: 75
          },
          end: {
            line: 349,
            column: 81
          }
        }, {
          start: {
            line: 349,
            column: 84
          },
          end: {
            line: 349,
            column: 105
          }
        }],
        line: 349
      },
      "53": {
        loc: {
          start: {
            line: 349,
            column: 18
          },
          end: {
            line: 349,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 349,
            column: 18
          },
          end: {
            line: 349,
            column: 55
          }
        }, {
          start: {
            line: 349,
            column: 59
          },
          end: {
            line: 349,
            column: 72
          }
        }],
        line: 349
      },
      "54": {
        loc: {
          start: {
            line: 397,
            column: 16
          },
          end: {
            line: 399,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 397,
            column: 16
          },
          end: {
            line: 399,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 397
      },
      "55": {
        loc: {
          start: {
            line: 415,
            column: 32
          },
          end: {
            line: 415,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 415,
            column: 87
          },
          end: {
            line: 415,
            column: 93
          }
        }, {
          start: {
            line: 415,
            column: 96
          },
          end: {
            line: 415,
            column: 101
          }
        }],
        line: 415
      },
      "56": {
        loc: {
          start: {
            line: 415,
            column: 32
          },
          end: {
            line: 415,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 415,
            column: 32
          },
          end: {
            line: 415,
            column: 67
          }
        }, {
          start: {
            line: 415,
            column: 71
          },
          end: {
            line: 415,
            column: 84
          }
        }],
        line: 415
      },
      "57": {
        loc: {
          start: {
            line: 416,
            column: 16
          },
          end: {
            line: 419,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 416,
            column: 16
          },
          end: {
            line: 419,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 416
      },
      "58": {
        loc: {
          start: {
            line: 416,
            column: 20
          },
          end: {
            line: 416,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 416,
            column: 61
          },
          end: {
            line: 416,
            column: 67
          }
        }, {
          start: {
            line: 416,
            column: 70
          },
          end: {
            line: 416,
            column: 114
          }
        }],
        line: 416
      },
      "59": {
        loc: {
          start: {
            line: 416,
            column: 20
          },
          end: {
            line: 416,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 416,
            column: 20
          },
          end: {
            line: 416,
            column: 36
          }
        }, {
          start: {
            line: 416,
            column: 40
          },
          end: {
            line: 416,
            column: 58
          }
        }],
        line: 416
      },
      "60": {
        loc: {
          start: {
            line: 449,
            column: 26
          },
          end: {
            line: 449,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 449,
            column: 26
          },
          end: {
            line: 449,
            column: 50
          }
        }, {
          start: {
            line: 449,
            column: 54
          },
          end: {
            line: 449,
            column: 80
          }
        }],
        line: 449
      },
      "61": {
        loc: {
          start: {
            line: 470,
            column: 8
          },
          end: {
            line: 471,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 470,
            column: 8
          },
          end: {
            line: 471,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 470
      },
      "62": {
        loc: {
          start: {
            line: 472,
            column: 8
          },
          end: {
            line: 473,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 472,
            column: 8
          },
          end: {
            line: 473,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 472
      },
      "63": {
        loc: {
          start: {
            line: 474,
            column: 8
          },
          end: {
            line: 475,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 474,
            column: 8
          },
          end: {
            line: 475,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 474
      },
      "64": {
        loc: {
          start: {
            line: 476,
            column: 8
          },
          end: {
            line: 477,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 476,
            column: 8
          },
          end: {
            line: 477,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 476
      },
      "65": {
        loc: {
          start: {
            line: 478,
            column: 8
          },
          end: {
            line: 479,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 478,
            column: 8
          },
          end: {
            line: 479,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 478
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/matbakh-visibility-boost.20250920/src/lib/multi-region/multi-region-orchestrator.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/matbakh-visibility-boost.20250920/src/lib/multi-region/multi-region-orchestrator.ts"],
      sourcesContent: ["import {\n    CloudFrontClient,\n    CreateInvalidationCommand,\n    GetDistributionCommand\n} from '@aws-sdk/client-cloudfront';\nimport {\n    CloudWatchClient,\n    PutMetricDataCommand\n} from '@aws-sdk/client-cloudwatch';\nimport {\n    DescribeDBClustersCommand,\n    ModifyDBClusterCommand,\n    RDSClient\n} from '@aws-sdk/client-rds';\nimport {\n    ChangeResourceRecordSetsCommand,\n    GetHealthCheckCommand,\n    Route53Client\n} from '@aws-sdk/client-route-53';\nimport {\n    PutParameterCommand,\n    SSMClient\n} from '@aws-sdk/client-ssm';\n\nexport interface MultiRegionConfig {\n    primaryRegion: string;\n    secondaryRegion: string;\n    domainName: string;\n    hostedZoneId: string;\n    distributionId: string;\n    globalClusterIdentifier: string;\n    primaryClusterIdentifier: string;\n    secondaryClusterIdentifier: string;\n    primaryHealthCheckId: string;\n    secondaryHealthCheckId: string;\n}\n\nexport interface FailoverResult {\n    success: boolean;\n    rtoAchieved: number; // minutes\n    rpoAchieved: number; // minutes\n    steps: FailoverStep[];\n    rollbackPlan?: RollbackPlan;\n}\n\nexport interface FailoverStep {\n    step: string;\n    status: 'pending' | 'in_progress' | 'completed' | 'failed';\n    startTime: Date;\n    endTime?: Date;\n    duration?: number;\n    error?: string;\n}\n\nexport interface RollbackPlan {\n    steps: string[];\n    estimatedDuration: number;\n    riskLevel: 'low' | 'medium' | 'high';\n}\n\nexport interface MultiRegionClients {\n    primaryRdsClient?: RDSClient;\n    secondaryRdsClient?: RDSClient;\n    route53Client?: Route53Client;\n    cloudFrontClient?: CloudFrontClient;\n    primarySsmClient?: SSMClient;\n    secondarySsmClient?: SSMClient;\n    cloudWatchClient?: CloudWatchClient;\n}\n\nexport class MultiRegionOrchestrator {\n    private primaryRdsClient: RDSClient;\n    private secondaryRdsClient: RDSClient;\n    private route53Client: Route53Client;\n    private cloudFrontClient: CloudFrontClient;\n    private primarySsmClient: SSMClient;\n    private secondarySsmClient: SSMClient;\n    private cloudWatchClient: CloudWatchClient;\n\n    constructor(private config: MultiRegionConfig, clients?: MultiRegionClients) {\n        // Validate configuration\n        this.validateConfig(config);\n\n        // Allow client injection for testing\n        this.primaryRdsClient = clients?.primaryRdsClient || new RDSClient({ region: config.primaryRegion });\n        this.secondaryRdsClient = clients?.secondaryRdsClient || new RDSClient({ region: config.secondaryRegion });\n        this.route53Client = clients?.route53Client || new Route53Client({ region: 'us-east-1' });\n        this.cloudFrontClient = clients?.cloudFrontClient || new CloudFrontClient({ region: 'us-east-1' });\n        this.primarySsmClient = clients?.primarySsmClient || new SSMClient({ region: config.primaryRegion });\n        this.secondarySsmClient = clients?.secondarySsmClient || new SSMClient({ region: config.secondaryRegion });\n        this.cloudWatchClient = clients?.cloudWatchClient || new CloudWatchClient({ region: config.primaryRegion });\n    }\n\n    private validateConfig(config: MultiRegionConfig): void {\n        if (!config.primaryRegion || !config.secondaryRegion) {\n            throw new Error('Primary and secondary regions are required');\n        }\n\n        if (config.primaryRegion === config.secondaryRegion) {\n            throw new Error('Primary and secondary regions must be different');\n        }\n\n        if (!config.domainName || !config.hostedZoneId) {\n            throw new Error('Domain name and hosted zone ID are required');\n        }\n    }\n\n    /**\n     * Execute disaster recovery failover to secondary region\n     */\n    async executeFailover(reason: string = 'Manual failover'): Promise<FailoverResult> {\n        const startTime = new Date();\n        const steps: FailoverStep[] = [];\n\n        try {\n            // Step 1: Validate secondary region health\n            const healthStep = this.createStep('Validate secondary region health');\n            steps.push(healthStep);\n\n            const isSecondaryHealthy = await this.validateSecondaryHealth();\n            if (!isSecondaryHealthy) {\n                throw new Error('Secondary region is not healthy');\n            }\n            this.completeStep(healthStep);\n\n            // Step 2: Promote secondary database cluster\n            const dbPromoteStep = this.createStep('Promote secondary database cluster');\n            steps.push(dbPromoteStep);\n\n            await this.promoteSecondaryDatabase();\n            this.completeStep(dbPromoteStep);\n\n            // Step 3: Update Route 53 DNS records\n            const dnsStep = this.createStep('Update DNS failover records');\n            steps.push(dnsStep);\n\n            await this.updateDnsFailover();\n            this.completeStep(dnsStep);\n\n            // Step 4: Update CloudFront origin\n            const cdnStep = this.createStep('Update CloudFront origin configuration');\n            steps.push(cdnStep);\n\n            await this.updateCloudFrontOrigin();\n            this.completeStep(cdnStep);\n\n            // Step 5: Update feature flags and configuration\n            const configStep = this.createStep('Update configuration parameters');\n            steps.push(configStep);\n\n            await this.updateFailoverConfiguration();\n            this.completeStep(configStep);\n\n            // Step 6: Validate failover success\n            const validationStep = this.createStep('Validate failover success');\n            steps.push(validationStep);\n\n            await this.validateFailoverSuccess();\n            this.completeStep(validationStep);\n\n            // Calculate RTO/RPO\n            const endTime = new Date();\n            const rtoAchieved = (endTime.getTime() - startTime.getTime()) / (1000 * 60); // minutes\n            const rpoAchieved = await this.calculateRPO();\n\n            // Log metrics\n            await this.logFailoverMetrics(rtoAchieved, rpoAchieved, true, reason);\n\n            return {\n                success: true,\n                rtoAchieved,\n                rpoAchieved,\n                steps,\n                rollbackPlan: this.generateRollbackPlan(),\n            };\n\n        } catch (error) {\n            const failedStep = steps.find(s => s.status === 'in_progress');\n            if (failedStep) {\n                failedStep.status = 'failed';\n                failedStep.error = error instanceof Error ? error.message : 'Unknown error';\n                failedStep.endTime = new Date();\n            }\n\n            // Log failure metrics\n            const endTime = new Date();\n            const rtoAttempted = (endTime.getTime() - startTime.getTime()) / (1000 * 60);\n            await this.logFailoverMetrics(rtoAttempted, 0, false, reason);\n\n            return {\n                success: false,\n                rtoAchieved: 0,\n                rpoAchieved: 0,\n                steps,\n            };\n        }\n    }\n\n    /**\n     * Execute failback to primary region\n     */\n    async executeFailback(reason: string = 'Manual failback'): Promise<FailoverResult> {\n        const startTime = new Date();\n        const steps: FailoverStep[] = [];\n\n        try {\n            // Step 1: Validate primary region recovery\n            const healthStep = this.createStep('Validate primary region health');\n            steps.push(healthStep);\n\n            const isPrimaryHealthy = await this.validatePrimaryHealth();\n            if (!isPrimaryHealthy) {\n                throw new Error('Primary region is not ready for failback');\n            }\n            this.completeStep(healthStep);\n\n            // Step 2: Re-establish replication\n            const replicationStep = this.createStep('Re-establish database replication');\n            steps.push(replicationStep);\n\n            await this.reestablishReplication();\n            this.completeStep(replicationStep);\n\n            // Step 3: Sync data from secondary to primary\n            const syncStep = this.createStep('Synchronize data to primary region');\n            steps.push(syncStep);\n\n            await this.synchronizeDataToPrimary();\n            this.completeStep(syncStep);\n\n            // Step 4: Switch DNS back to primary\n            const dnsStep = this.createStep('Switch DNS back to primary region');\n            steps.push(dnsStep);\n\n            await this.switchDnsToPrimary();\n            this.completeStep(dnsStep);\n\n            // Step 5: Update CloudFront origin back to primary\n            const cdnStep = this.createStep('Update CloudFront to primary origin');\n            steps.push(cdnStep);\n\n            await this.updateCloudFrontToPrimary();\n            this.completeStep(cdnStep);\n\n            // Step 6: Reset configuration\n            const configStep = this.createStep('Reset configuration to primary');\n            steps.push(configStep);\n\n            await this.resetConfigurationToPrimary();\n            this.completeStep(configStep);\n\n            const endTime = new Date();\n            const rtoAchieved = (endTime.getTime() - startTime.getTime()) / (1000 * 60);\n\n            await this.logFailbackMetrics(rtoAchieved, true);\n\n            return {\n                success: true,\n                rtoAchieved,\n                rpoAchieved: 0, // Failback doesn't have RPO\n                steps,\n            };\n\n        } catch (error) {\n            const failedStep = steps.find(s => s.status === 'in_progress');\n            if (failedStep) {\n                failedStep.status = 'failed';\n                failedStep.error = error instanceof Error ? error.message : 'Unknown error';\n                failedStep.endTime = new Date();\n            }\n\n            return {\n                success: false,\n                rtoAchieved: 0,\n                rpoAchieved: 0,\n                steps,\n            };\n        }\n    }\n\n    /**\n     * Test disaster recovery without affecting production\n     */\n    async testDisasterRecovery(): Promise<{\n        success: boolean;\n        healthChecks: Record<string, boolean>;\n        estimatedRTO: number;\n        estimatedRPO: number;\n        recommendations: string[];\n    }> {\n        const healthChecks: Record<string, boolean> = {};\n        const recommendations: string[] = [];\n\n        // Test secondary region health\n        healthChecks.secondaryRegionHealth = await this.validateSecondaryHealth();\n        if (!healthChecks.secondaryRegionHealth) {\n            recommendations.push('Secondary region health checks are failing');\n        }\n\n        // Test database replication lag\n        const replicationLag = await this.getReplicationLag();\n        healthChecks.databaseReplication = replicationLag < 60000; // < 1 minute\n        if (replicationLag > 60000) {\n            recommendations.push(`Database replication lag is ${replicationLag / 1000}s, exceeds 1 minute target`);\n        }\n\n        // Test DNS health checks\n        healthChecks.dnsHealthChecks = await this.validateDnsHealthChecks();\n        if (!healthChecks.dnsHealthChecks) {\n            recommendations.push('DNS health checks are not properly configured');\n        }\n\n        // Test S3 replication\n        healthChecks.s3Replication = await this.validateS3Replication();\n        if (!healthChecks.s3Replication) {\n            recommendations.push('S3 cross-region replication is behind');\n        }\n\n        // Test secrets replication\n        healthChecks.secretsReplication = await this.validateSecretsReplication();\n        if (!healthChecks.secretsReplication) {\n            recommendations.push('Secrets are not properly replicated to secondary region');\n        }\n\n        // Estimate RTO/RPO based on current conditions\n        const estimatedRTO = this.estimateRTO(healthChecks);\n        const estimatedRPO = replicationLag / (1000 * 60); // Convert to minutes\n\n        const success = Object.values(healthChecks).every(check => check);\n\n        return {\n            success,\n            healthChecks,\n            estimatedRTO,\n            estimatedRPO,\n            recommendations,\n        };\n    }\n\n    private createStep(description: string): FailoverStep {\n        return {\n            step: description,\n            status: 'in_progress',\n            startTime: new Date(),\n        };\n    }\n\n    private completeStep(step: FailoverStep): void {\n        step.status = 'completed';\n        step.endTime = new Date();\n        step.duration = step.endTime.getTime() - step.startTime.getTime();\n    }\n\n    private async validateSecondaryHealth(): Promise<boolean> {\n        try {\n            const command = new GetHealthCheckCommand({\n                HealthCheckId: this.config.secondaryHealthCheckId,\n            });\n            const response = await this.route53Client.send(command);\n            return response.StatusList?.some(status => status.Status === 'Success') || false;\n        } catch (error) {\n            console.error('Error validating secondary health:', error);\n            return false;\n        }\n    }\n\n    private async validatePrimaryHealth(): Promise<boolean> {\n        try {\n            const command = new GetHealthCheckCommand({\n                HealthCheckId: this.config.primaryHealthCheckId,\n            });\n            const response = await this.route53Client.send(command);\n            return response.StatusList?.some(status => status.Status === 'Success') || false;\n        } catch (error) {\n            console.error('Error validating primary health:', error);\n            return false;\n        }\n    }\n\n    private async promoteSecondaryDatabase(): Promise<void> {\n        // For Aurora Global Database, we need to promote the secondary cluster\n        const command = new ModifyDBClusterCommand({\n            DBClusterIdentifier: this.config.secondaryClusterIdentifier,\n            GlobalClusterIdentifier: this.config.globalClusterIdentifier,\n            PromoteGlobalWriterDB: true,\n        });\n\n        await this.secondaryRdsClient.send(command);\n\n        // Wait for promotion to complete\n        await this.waitForClusterPromotion();\n    }\n\n    private async waitForClusterPromotion(): Promise<void> {\n        const maxAttempts = 30; // 15 minutes max\n        let attempts = 0;\n\n        while (attempts < maxAttempts) {\n            const command = new DescribeDBClustersCommand({\n                DBClusterIdentifier: this.config.secondaryClusterIdentifier,\n            });\n\n            const response = await this.secondaryRdsClient.send(command);\n            const cluster = response.DBClusters?.[0];\n\n            if (cluster?.Status === 'available' && cluster.GlobalWriteForwardingStatus !== 'enabled') {\n                return; // Promotion complete\n            }\n\n            await new Promise(resolve => setTimeout(resolve, 30000)); // Wait 30 seconds\n            attempts++;\n        }\n\n        throw new Error('Database promotion timed out');\n    }\n\n    private async updateDnsFailover(): Promise<void> {\n        // Switch primary and secondary records\n        const command = new ChangeResourceRecordSetsCommand({\n            HostedZoneId: this.config.hostedZoneId,\n            ChangeBatch: {\n                Changes: [\n                    {\n                        Action: 'UPSERT',\n                        ResourceRecordSet: {\n                            Name: `api.${this.config.domainName}`,\n                            Type: 'A',\n                            SetIdentifier: 'primary',\n                            Failover: 'SECONDARY', // Switch roles\n                            TTL: 30,\n                            ResourceRecords: [\n                                { Value: `api-${this.config.secondaryRegion}.${this.config.domainName}` }\n                            ],\n                            HealthCheckId: this.config.secondaryHealthCheckId,\n                        },\n                    },\n                    {\n                        Action: 'UPSERT',\n                        ResourceRecordSet: {\n                            Name: `api.${this.config.domainName}`,\n                            Type: 'A',\n                            SetIdentifier: 'secondary',\n                            Failover: 'PRIMARY', // Switch roles\n                            TTL: 30,\n                            ResourceRecords: [\n                                { Value: `api-${this.config.primaryRegion}.${this.config.domainName}` }\n                            ],\n                            HealthCheckId: this.config.primaryHealthCheckId,\n                        },\n                    },\n                ],\n            },\n        });\n\n        await this.route53Client.send(command);\n    }\n\n    private async updateCloudFrontOrigin(): Promise<void> {\n        // Get current distribution config\n        const getCommand = new GetDistributionCommand({\n            Id: this.config.distributionId,\n        });\n        const response = await this.cloudFrontClient.send(getCommand);\n\n        if (!response.Distribution?.DistributionConfig) {\n            throw new Error('Could not retrieve distribution configuration');\n        }\n\n        // Update origin to point to secondary region\n        const config = response.Distribution.DistributionConfig;\n        // Implementation would update the origin configuration here\n\n        // Create invalidation for immediate effect\n        const invalidationCommand = new CreateInvalidationCommand({\n            DistributionId: this.config.distributionId,\n            InvalidationBatch: {\n                Paths: {\n                    Quantity: 2,\n                    Items: ['/index.html', '/*'],\n                },\n                CallerReference: `failover-${Date.now()}`,\n            },\n        });\n\n        await this.cloudFrontClient.send(invalidationCommand);\n    }\n\n    private async updateFailoverConfiguration(): Promise<void> {\n        // Update feature flags to indicate failover state\n        const command = new PutParameterCommand({\n            Name: '/matbakh/failover/active',\n            Value: 'true',\n            Type: 'String',\n            Overwrite: true,\n            Description: 'Indicates if system is in failover mode',\n        });\n\n        await this.secondarySsmClient.send(command);\n\n        // Update current region parameter\n        const regionCommand = new PutParameterCommand({\n            Name: '/matbakh/config/current-region',\n            Value: this.config.secondaryRegion,\n            Type: 'String',\n            Overwrite: true,\n            Description: 'Currently active region',\n        });\n\n        await this.secondarySsmClient.send(regionCommand);\n    }\n\n    private async validateFailoverSuccess(): Promise<void> {\n        // Perform smoke tests against secondary region\n        const healthEndpoint = `https://api-${this.config.secondaryRegion}.${this.config.domainName}/health`;\n\n        try {\n            const response = await fetch(healthEndpoint);\n            if (!response.ok) {\n                throw new Error(`Health check failed: ${response.status}`);\n            }\n        } catch (error) {\n            throw new Error(`Failover validation failed: ${error}`);\n        }\n    }\n\n    private async calculateRPO(): Promise<number> {\n        // Get the last successful replication timestamp\n        try {\n            const command = new DescribeDBClustersCommand({\n                DBClusterIdentifier: this.config.secondaryClusterIdentifier,\n            });\n\n            const response = await this.secondaryRdsClient.send(command);\n            const cluster = response.DBClusters?.[0];\n\n            if (cluster?.GlobalWriteForwardingRequestedRegion) {\n                // Calculate based on last replication lag\n                return 1; // Assume 1 minute RPO for Aurora Global Database\n            }\n\n            return 0;\n        } catch (error) {\n            console.error('Error calculating RPO:', error);\n            return 0;\n        }\n    }\n\n    private async getReplicationLag(): Promise<number> {\n        try {\n            const command = new DescribeDBClustersCommand({\n                DBClusterIdentifier: this.config.secondaryClusterIdentifier,\n            });\n\n            const response = await this.secondaryRdsClient.send(command);\n            // This would need to be implemented based on actual Aurora Global Database metrics\n            return 30000; // Placeholder: 30 seconds\n        } catch (error) {\n            console.error('Error getting replication lag:', error);\n            return 60000; // Default to 1 minute if unable to determine\n        }\n    }\n\n    private async validateDnsHealthChecks(): Promise<boolean> {\n        try {\n            const primaryCheck = await this.route53Client.send(\n                new GetHealthCheckCommand({ HealthCheckId: this.config.primaryHealthCheckId })\n            );\n            const secondaryCheck = await this.route53Client.send(\n                new GetHealthCheckCommand({ HealthCheckId: this.config.secondaryHealthCheckId })\n            );\n\n            return !!(primaryCheck.HealthCheck && secondaryCheck.HealthCheck);\n        } catch (error) {\n            return false;\n        }\n    }\n\n    private async validateS3Replication(): Promise<boolean> {\n        // This would check S3 replication metrics\n        return true; // Placeholder\n    }\n\n    private async validateSecretsReplication(): Promise<boolean> {\n        // This would validate that secrets are accessible in secondary region\n        return true; // Placeholder\n    }\n\n    private estimateRTO(healthChecks: Record<string, boolean>): number {\n        let baseRTO = 5; // Base 5 minutes for healthy system\n\n        if (!healthChecks.secondaryRegionHealth) baseRTO += 5;\n        if (!healthChecks.databaseReplication) baseRTO += 3;\n        if (!healthChecks.dnsHealthChecks) baseRTO += 2;\n        if (!healthChecks.s3Replication) baseRTO += 1;\n        if (!healthChecks.secretsReplication) baseRTO += 2;\n\n        return Math.min(baseRTO, 15); // Cap at 15 minutes\n    }\n\n    private generateRollbackPlan(): RollbackPlan {\n        return {\n            steps: [\n                'Validate primary region health',\n                'Re-establish database replication',\n                'Switch DNS back to primary',\n                'Update CloudFront origin',\n                'Reset configuration parameters',\n                'Validate rollback success',\n            ],\n            estimatedDuration: 10, // minutes\n            riskLevel: 'medium',\n        };\n    }\n\n    private async logFailoverMetrics(\n        rto: number,\n        rpo: number,\n        success: boolean,\n        reason: string\n    ): Promise<void> {\n        const command = new PutMetricDataCommand({\n            Namespace: 'Matbakh/MultiRegion',\n            MetricData: [\n                {\n                    MetricName: 'FailoverRTO',\n                    Value: rto,\n                    Unit: 'Count',\n                    Dimensions: [\n                        { Name: 'Success', Value: success.toString() },\n                        { Name: 'Reason', Value: reason },\n                    ],\n                },\n                {\n                    MetricName: 'FailoverRPO',\n                    Value: rpo,\n                    Unit: 'Count',\n                    Dimensions: [\n                        { Name: 'Success', Value: success.toString() },\n                    ],\n                },\n                {\n                    MetricName: 'FailoverAttempts',\n                    Value: 1,\n                    Unit: 'Count',\n                    Dimensions: [\n                        { Name: 'Success', Value: success.toString() },\n                        { Name: 'Reason', Value: reason },\n                    ],\n                },\n            ],\n        });\n\n        await this.cloudWatchClient.send(command);\n    }\n\n    private async logFailbackMetrics(rto: number, success: boolean): Promise<void> {\n        const command = new PutMetricDataCommand({\n            Namespace: 'Matbakh/MultiRegion',\n            MetricData: [\n                {\n                    MetricName: 'FailbackRTO',\n                    Value: rto,\n                    Unit: 'Count',\n                    Dimensions: [\n                        { Name: 'Success', Value: success.toString() },\n                    ],\n                },\n                {\n                    MetricName: 'FailbackAttempts',\n                    Value: 1,\n                    Unit: 'Count',\n                    Dimensions: [\n                        { Name: 'Success', Value: success.toString() },\n                    ],\n                },\n            ],\n        });\n\n        await this.cloudWatchClient.send(command);\n    }\n\n    // Placeholder methods for failback operations\n    private async reestablishReplication(): Promise<void> {\n        // Implementation for re-establishing replication\n    }\n\n    private async synchronizeDataToPrimary(): Promise<void> {\n        // Implementation for data synchronization\n    }\n\n    private async switchDnsToPrimary(): Promise<void> {\n        // Implementation for DNS switch back\n    }\n\n    private async updateCloudFrontToPrimary(): Promise<void> {\n        // Implementation for CloudFront update\n    }\n\n    private async resetConfigurationToPrimary(): Promise<void> {\n        // Implementation for configuration reset\n    }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "851bee7e6e8115d347e2febd1ac5d6365a4c6058"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_20gqkz626j = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_20gqkz626j();
cov_20gqkz626j().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_20gqkz626j().s[1]++;
exports.MultiRegionOrchestrator = void 0;
const tslib_1 =
/* istanbul ignore next */
(cov_20gqkz626j().s[2]++, require("tslib"));
const client_cloudfront_1 =
/* istanbul ignore next */
(cov_20gqkz626j().s[3]++, require("@aws-sdk/client-cloudfront"));
const client_cloudwatch_1 =
/* istanbul ignore next */
(cov_20gqkz626j().s[4]++, require("@aws-sdk/client-cloudwatch"));
const client_rds_1 =
/* istanbul ignore next */
(cov_20gqkz626j().s[5]++, require("@aws-sdk/client-rds"));
const client_route_53_1 =
/* istanbul ignore next */
(cov_20gqkz626j().s[6]++, require("@aws-sdk/client-route-53"));
const client_ssm_1 =
/* istanbul ignore next */
(cov_20gqkz626j().s[7]++, require("@aws-sdk/client-ssm"));
class MultiRegionOrchestrator {
  constructor(config, clients) {
    /* istanbul ignore next */
    cov_20gqkz626j().f[0]++;
    cov_20gqkz626j().s[8]++;
    this.config = config;
    // Validate configuration
    /* istanbul ignore next */
    cov_20gqkz626j().s[9]++;
    this.validateConfig(config);
    // Allow client injection for testing
    /* istanbul ignore next */
    cov_20gqkz626j().s[10]++;
    this.primaryRdsClient =
    /* istanbul ignore next */
    (cov_20gqkz626j().b[0][0]++,
    /* istanbul ignore next */
    (cov_20gqkz626j().b[2][0]++, clients === null) ||
    /* istanbul ignore next */
    (cov_20gqkz626j().b[2][1]++, clients === void 0) ?
    /* istanbul ignore next */
    (cov_20gqkz626j().b[1][0]++, void 0) :
    /* istanbul ignore next */
    (cov_20gqkz626j().b[1][1]++, clients.primaryRdsClient)) ||
    /* istanbul ignore next */
    (cov_20gqkz626j().b[0][1]++, new client_rds_1.RDSClient({
      region: config.primaryRegion
    }));
    /* istanbul ignore next */
    cov_20gqkz626j().s[11]++;
    this.secondaryRdsClient =
    /* istanbul ignore next */
    (cov_20gqkz626j().b[3][0]++,
    /* istanbul ignore next */
    (cov_20gqkz626j().b[5][0]++, clients === null) ||
    /* istanbul ignore next */
    (cov_20gqkz626j().b[5][1]++, clients === void 0) ?
    /* istanbul ignore next */
    (cov_20gqkz626j().b[4][0]++, void 0) :
    /* istanbul ignore next */
    (cov_20gqkz626j().b[4][1]++, clients.secondaryRdsClient)) ||
    /* istanbul ignore next */
    (cov_20gqkz626j().b[3][1]++, new client_rds_1.RDSClient({
      region: config.secondaryRegion
    }));
    /* istanbul ignore next */
    cov_20gqkz626j().s[12]++;
    this.route53Client =
    /* istanbul ignore next */
    (cov_20gqkz626j().b[6][0]++,
    /* istanbul ignore next */
    (cov_20gqkz626j().b[8][0]++, clients === null) ||
    /* istanbul ignore next */
    (cov_20gqkz626j().b[8][1]++, clients === void 0) ?
    /* istanbul ignore next */
    (cov_20gqkz626j().b[7][0]++, void 0) :
    /* istanbul ignore next */
    (cov_20gqkz626j().b[7][1]++, clients.route53Client)) ||
    /* istanbul ignore next */
    (cov_20gqkz626j().b[6][1]++, new client_route_53_1.Route53Client({
      region: 'us-east-1'
    }));
    /* istanbul ignore next */
    cov_20gqkz626j().s[13]++;
    this.cloudFrontClient =
    /* istanbul ignore next */
    (cov_20gqkz626j().b[9][0]++,
    /* istanbul ignore next */
    (cov_20gqkz626j().b[11][0]++, clients === null) ||
    /* istanbul ignore next */
    (cov_20gqkz626j().b[11][1]++, clients === void 0) ?
    /* istanbul ignore next */
    (cov_20gqkz626j().b[10][0]++, void 0) :
    /* istanbul ignore next */
    (cov_20gqkz626j().b[10][1]++, clients.cloudFrontClient)) ||
    /* istanbul ignore next */
    (cov_20gqkz626j().b[9][1]++, new client_cloudfront_1.CloudFrontClient({
      region: 'us-east-1'
    }));
    /* istanbul ignore next */
    cov_20gqkz626j().s[14]++;
    this.primarySsmClient =
    /* istanbul ignore next */
    (cov_20gqkz626j().b[12][0]++,
    /* istanbul ignore next */
    (cov_20gqkz626j().b[14][0]++, clients === null) ||
    /* istanbul ignore next */
    (cov_20gqkz626j().b[14][1]++, clients === void 0) ?
    /* istanbul ignore next */
    (cov_20gqkz626j().b[13][0]++, void 0) :
    /* istanbul ignore next */
    (cov_20gqkz626j().b[13][1]++, clients.primarySsmClient)) ||
    /* istanbul ignore next */
    (cov_20gqkz626j().b[12][1]++, new client_ssm_1.SSMClient({
      region: config.primaryRegion
    }));
    /* istanbul ignore next */
    cov_20gqkz626j().s[15]++;
    this.secondarySsmClient =
    /* istanbul ignore next */
    (cov_20gqkz626j().b[15][0]++,
    /* istanbul ignore next */
    (cov_20gqkz626j().b[17][0]++, clients === null) ||
    /* istanbul ignore next */
    (cov_20gqkz626j().b[17][1]++, clients === void 0) ?
    /* istanbul ignore next */
    (cov_20gqkz626j().b[16][0]++, void 0) :
    /* istanbul ignore next */
    (cov_20gqkz626j().b[16][1]++, clients.secondarySsmClient)) ||
    /* istanbul ignore next */
    (cov_20gqkz626j().b[15][1]++, new client_ssm_1.SSMClient({
      region: config.secondaryRegion
    }));
    /* istanbul ignore next */
    cov_20gqkz626j().s[16]++;
    this.cloudWatchClient =
    /* istanbul ignore next */
    (cov_20gqkz626j().b[18][0]++,
    /* istanbul ignore next */
    (cov_20gqkz626j().b[20][0]++, clients === null) ||
    /* istanbul ignore next */
    (cov_20gqkz626j().b[20][1]++, clients === void 0) ?
    /* istanbul ignore next */
    (cov_20gqkz626j().b[19][0]++, void 0) :
    /* istanbul ignore next */
    (cov_20gqkz626j().b[19][1]++, clients.cloudWatchClient)) ||
    /* istanbul ignore next */
    (cov_20gqkz626j().b[18][1]++, new client_cloudwatch_1.CloudWatchClient({
      region: config.primaryRegion
    }));
  }
  validateConfig(config) {
    /* istanbul ignore next */
    cov_20gqkz626j().f[1]++;
    cov_20gqkz626j().s[17]++;
    if (
    /* istanbul ignore next */
    (cov_20gqkz626j().b[22][0]++, !config.primaryRegion) ||
    /* istanbul ignore next */
    (cov_20gqkz626j().b[22][1]++, !config.secondaryRegion)) {
      /* istanbul ignore next */
      cov_20gqkz626j().b[21][0]++;
      cov_20gqkz626j().s[18]++;
      throw new Error('Primary and secondary regions are required');
    } else
    /* istanbul ignore next */
    {
      cov_20gqkz626j().b[21][1]++;
    }
    cov_20gqkz626j().s[19]++;
    if (config.primaryRegion === config.secondaryRegion) {
      /* istanbul ignore next */
      cov_20gqkz626j().b[23][0]++;
      cov_20gqkz626j().s[20]++;
      throw new Error('Primary and secondary regions must be different');
    } else
    /* istanbul ignore next */
    {
      cov_20gqkz626j().b[23][1]++;
    }
    cov_20gqkz626j().s[21]++;
    if (
    /* istanbul ignore next */
    (cov_20gqkz626j().b[25][0]++, !config.domainName) ||
    /* istanbul ignore next */
    (cov_20gqkz626j().b[25][1]++, !config.hostedZoneId)) {
      /* istanbul ignore next */
      cov_20gqkz626j().b[24][0]++;
      cov_20gqkz626j().s[22]++;
      throw new Error('Domain name and hosted zone ID are required');
    } else
    /* istanbul ignore next */
    {
      cov_20gqkz626j().b[24][1]++;
    }
  }
  /**
   * Execute disaster recovery failover to secondary region
   */
  executeFailover() {
    /* istanbul ignore next */
    cov_20gqkz626j().f[2]++;
    cov_20gqkz626j().s[23]++;
    return tslib_1.__awaiter(this, arguments, void 0, function* (reason =
    /* istanbul ignore next */
    (cov_20gqkz626j().b[26][0]++, 'Manual failover')) {
      /* istanbul ignore next */
      cov_20gqkz626j().f[3]++;
      const startTime =
      /* istanbul ignore next */
      (cov_20gqkz626j().s[24]++, new Date());
      const steps =
      /* istanbul ignore next */
      (cov_20gqkz626j().s[25]++, []);
      /* istanbul ignore next */
      cov_20gqkz626j().s[26]++;
      try {
        // Step 1: Validate secondary region health
        const healthStep =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[27]++, this.createStep('Validate secondary region health'));
        /* istanbul ignore next */
        cov_20gqkz626j().s[28]++;
        steps.push(healthStep);
        const isSecondaryHealthy =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[29]++, yield this.validateSecondaryHealth());
        /* istanbul ignore next */
        cov_20gqkz626j().s[30]++;
        if (!isSecondaryHealthy) {
          /* istanbul ignore next */
          cov_20gqkz626j().b[27][0]++;
          cov_20gqkz626j().s[31]++;
          throw new Error('Secondary region is not healthy');
        } else
        /* istanbul ignore next */
        {
          cov_20gqkz626j().b[27][1]++;
        }
        cov_20gqkz626j().s[32]++;
        this.completeStep(healthStep);
        // Step 2: Promote secondary database cluster
        const dbPromoteStep =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[33]++, this.createStep('Promote secondary database cluster'));
        /* istanbul ignore next */
        cov_20gqkz626j().s[34]++;
        steps.push(dbPromoteStep);
        /* istanbul ignore next */
        cov_20gqkz626j().s[35]++;
        yield this.promoteSecondaryDatabase();
        /* istanbul ignore next */
        cov_20gqkz626j().s[36]++;
        this.completeStep(dbPromoteStep);
        // Step 3: Update Route 53 DNS records
        const dnsStep =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[37]++, this.createStep('Update DNS failover records'));
        /* istanbul ignore next */
        cov_20gqkz626j().s[38]++;
        steps.push(dnsStep);
        /* istanbul ignore next */
        cov_20gqkz626j().s[39]++;
        yield this.updateDnsFailover();
        /* istanbul ignore next */
        cov_20gqkz626j().s[40]++;
        this.completeStep(dnsStep);
        // Step 4: Update CloudFront origin
        const cdnStep =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[41]++, this.createStep('Update CloudFront origin configuration'));
        /* istanbul ignore next */
        cov_20gqkz626j().s[42]++;
        steps.push(cdnStep);
        /* istanbul ignore next */
        cov_20gqkz626j().s[43]++;
        yield this.updateCloudFrontOrigin();
        /* istanbul ignore next */
        cov_20gqkz626j().s[44]++;
        this.completeStep(cdnStep);
        // Step 5: Update feature flags and configuration
        const configStep =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[45]++, this.createStep('Update configuration parameters'));
        /* istanbul ignore next */
        cov_20gqkz626j().s[46]++;
        steps.push(configStep);
        /* istanbul ignore next */
        cov_20gqkz626j().s[47]++;
        yield this.updateFailoverConfiguration();
        /* istanbul ignore next */
        cov_20gqkz626j().s[48]++;
        this.completeStep(configStep);
        // Step 6: Validate failover success
        const validationStep =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[49]++, this.createStep('Validate failover success'));
        /* istanbul ignore next */
        cov_20gqkz626j().s[50]++;
        steps.push(validationStep);
        /* istanbul ignore next */
        cov_20gqkz626j().s[51]++;
        yield this.validateFailoverSuccess();
        /* istanbul ignore next */
        cov_20gqkz626j().s[52]++;
        this.completeStep(validationStep);
        // Calculate RTO/RPO
        const endTime =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[53]++, new Date());
        const rtoAchieved =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[54]++, (endTime.getTime() - startTime.getTime()) / (1000 * 60)); // minutes
        const rpoAchieved =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[55]++, yield this.calculateRPO());
        // Log metrics
        /* istanbul ignore next */
        cov_20gqkz626j().s[56]++;
        yield this.logFailoverMetrics(rtoAchieved, rpoAchieved, true, reason);
        /* istanbul ignore next */
        cov_20gqkz626j().s[57]++;
        return {
          success: true,
          rtoAchieved,
          rpoAchieved,
          steps,
          rollbackPlan: this.generateRollbackPlan()
        };
      } catch (error) {
        const failedStep =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[58]++, steps.find(s => {
          /* istanbul ignore next */
          cov_20gqkz626j().f[4]++;
          cov_20gqkz626j().s[59]++;
          return s.status === 'in_progress';
        }));
        /* istanbul ignore next */
        cov_20gqkz626j().s[60]++;
        if (failedStep) {
          /* istanbul ignore next */
          cov_20gqkz626j().b[28][0]++;
          cov_20gqkz626j().s[61]++;
          failedStep.status = 'failed';
          /* istanbul ignore next */
          cov_20gqkz626j().s[62]++;
          failedStep.error = error instanceof Error ?
          /* istanbul ignore next */
          (cov_20gqkz626j().b[29][0]++, error.message) :
          /* istanbul ignore next */
          (cov_20gqkz626j().b[29][1]++, 'Unknown error');
          /* istanbul ignore next */
          cov_20gqkz626j().s[63]++;
          failedStep.endTime = new Date();
        } else
        /* istanbul ignore next */
        {
          cov_20gqkz626j().b[28][1]++;
        }
        // Log failure metrics
        const endTime =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[64]++, new Date());
        const rtoAttempted =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[65]++, (endTime.getTime() - startTime.getTime()) / (1000 * 60));
        /* istanbul ignore next */
        cov_20gqkz626j().s[66]++;
        yield this.logFailoverMetrics(rtoAttempted, 0, false, reason);
        /* istanbul ignore next */
        cov_20gqkz626j().s[67]++;
        return {
          success: false,
          rtoAchieved: 0,
          rpoAchieved: 0,
          steps
        };
      }
    });
  }
  /**
   * Execute failback to primary region
   */
  executeFailback() {
    /* istanbul ignore next */
    cov_20gqkz626j().f[5]++;
    cov_20gqkz626j().s[68]++;
    return tslib_1.__awaiter(this, arguments, void 0, function* (reason =
    /* istanbul ignore next */
    (cov_20gqkz626j().b[30][0]++, 'Manual failback')) {
      /* istanbul ignore next */
      cov_20gqkz626j().f[6]++;
      const startTime =
      /* istanbul ignore next */
      (cov_20gqkz626j().s[69]++, new Date());
      const steps =
      /* istanbul ignore next */
      (cov_20gqkz626j().s[70]++, []);
      /* istanbul ignore next */
      cov_20gqkz626j().s[71]++;
      try {
        // Step 1: Validate primary region recovery
        const healthStep =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[72]++, this.createStep('Validate primary region health'));
        /* istanbul ignore next */
        cov_20gqkz626j().s[73]++;
        steps.push(healthStep);
        const isPrimaryHealthy =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[74]++, yield this.validatePrimaryHealth());
        /* istanbul ignore next */
        cov_20gqkz626j().s[75]++;
        if (!isPrimaryHealthy) {
          /* istanbul ignore next */
          cov_20gqkz626j().b[31][0]++;
          cov_20gqkz626j().s[76]++;
          throw new Error('Primary region is not ready for failback');
        } else
        /* istanbul ignore next */
        {
          cov_20gqkz626j().b[31][1]++;
        }
        cov_20gqkz626j().s[77]++;
        this.completeStep(healthStep);
        // Step 2: Re-establish replication
        const replicationStep =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[78]++, this.createStep('Re-establish database replication'));
        /* istanbul ignore next */
        cov_20gqkz626j().s[79]++;
        steps.push(replicationStep);
        /* istanbul ignore next */
        cov_20gqkz626j().s[80]++;
        yield this.reestablishReplication();
        /* istanbul ignore next */
        cov_20gqkz626j().s[81]++;
        this.completeStep(replicationStep);
        // Step 3: Sync data from secondary to primary
        const syncStep =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[82]++, this.createStep('Synchronize data to primary region'));
        /* istanbul ignore next */
        cov_20gqkz626j().s[83]++;
        steps.push(syncStep);
        /* istanbul ignore next */
        cov_20gqkz626j().s[84]++;
        yield this.synchronizeDataToPrimary();
        /* istanbul ignore next */
        cov_20gqkz626j().s[85]++;
        this.completeStep(syncStep);
        // Step 4: Switch DNS back to primary
        const dnsStep =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[86]++, this.createStep('Switch DNS back to primary region'));
        /* istanbul ignore next */
        cov_20gqkz626j().s[87]++;
        steps.push(dnsStep);
        /* istanbul ignore next */
        cov_20gqkz626j().s[88]++;
        yield this.switchDnsToPrimary();
        /* istanbul ignore next */
        cov_20gqkz626j().s[89]++;
        this.completeStep(dnsStep);
        // Step 5: Update CloudFront origin back to primary
        const cdnStep =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[90]++, this.createStep('Update CloudFront to primary origin'));
        /* istanbul ignore next */
        cov_20gqkz626j().s[91]++;
        steps.push(cdnStep);
        /* istanbul ignore next */
        cov_20gqkz626j().s[92]++;
        yield this.updateCloudFrontToPrimary();
        /* istanbul ignore next */
        cov_20gqkz626j().s[93]++;
        this.completeStep(cdnStep);
        // Step 6: Reset configuration
        const configStep =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[94]++, this.createStep('Reset configuration to primary'));
        /* istanbul ignore next */
        cov_20gqkz626j().s[95]++;
        steps.push(configStep);
        /* istanbul ignore next */
        cov_20gqkz626j().s[96]++;
        yield this.resetConfigurationToPrimary();
        /* istanbul ignore next */
        cov_20gqkz626j().s[97]++;
        this.completeStep(configStep);
        const endTime =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[98]++, new Date());
        const rtoAchieved =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[99]++, (endTime.getTime() - startTime.getTime()) / (1000 * 60));
        /* istanbul ignore next */
        cov_20gqkz626j().s[100]++;
        yield this.logFailbackMetrics(rtoAchieved, true);
        /* istanbul ignore next */
        cov_20gqkz626j().s[101]++;
        return {
          success: true,
          rtoAchieved,
          rpoAchieved: 0,
          // Failback doesn't have RPO
          steps
        };
      } catch (error) {
        const failedStep =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[102]++, steps.find(s => {
          /* istanbul ignore next */
          cov_20gqkz626j().f[7]++;
          cov_20gqkz626j().s[103]++;
          return s.status === 'in_progress';
        }));
        /* istanbul ignore next */
        cov_20gqkz626j().s[104]++;
        if (failedStep) {
          /* istanbul ignore next */
          cov_20gqkz626j().b[32][0]++;
          cov_20gqkz626j().s[105]++;
          failedStep.status = 'failed';
          /* istanbul ignore next */
          cov_20gqkz626j().s[106]++;
          failedStep.error = error instanceof Error ?
          /* istanbul ignore next */
          (cov_20gqkz626j().b[33][0]++, error.message) :
          /* istanbul ignore next */
          (cov_20gqkz626j().b[33][1]++, 'Unknown error');
          /* istanbul ignore next */
          cov_20gqkz626j().s[107]++;
          failedStep.endTime = new Date();
        } else
        /* istanbul ignore next */
        {
          cov_20gqkz626j().b[32][1]++;
        }
        cov_20gqkz626j().s[108]++;
        return {
          success: false,
          rtoAchieved: 0,
          rpoAchieved: 0,
          steps
        };
      }
    });
  }
  /**
   * Test disaster recovery without affecting production
   */
  testDisasterRecovery() {
    /* istanbul ignore next */
    cov_20gqkz626j().f[8]++;
    cov_20gqkz626j().s[109]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_20gqkz626j().f[9]++;
      const healthChecks =
      /* istanbul ignore next */
      (cov_20gqkz626j().s[110]++, {});
      const recommendations =
      /* istanbul ignore next */
      (cov_20gqkz626j().s[111]++, []);
      // Test secondary region health
      /* istanbul ignore next */
      cov_20gqkz626j().s[112]++;
      healthChecks.secondaryRegionHealth = yield this.validateSecondaryHealth();
      /* istanbul ignore next */
      cov_20gqkz626j().s[113]++;
      if (!healthChecks.secondaryRegionHealth) {
        /* istanbul ignore next */
        cov_20gqkz626j().b[34][0]++;
        cov_20gqkz626j().s[114]++;
        recommendations.push('Secondary region health checks are failing');
      } else
      /* istanbul ignore next */
      {
        cov_20gqkz626j().b[34][1]++;
      }
      // Test database replication lag
      const replicationLag =
      /* istanbul ignore next */
      (cov_20gqkz626j().s[115]++, yield this.getReplicationLag());
      /* istanbul ignore next */
      cov_20gqkz626j().s[116]++;
      healthChecks.databaseReplication = replicationLag < 60000; // < 1 minute
      /* istanbul ignore next */
      cov_20gqkz626j().s[117]++;
      if (replicationLag > 60000) {
        /* istanbul ignore next */
        cov_20gqkz626j().b[35][0]++;
        cov_20gqkz626j().s[118]++;
        recommendations.push(`Database replication lag is ${replicationLag / 1000}s, exceeds 1 minute target`);
      } else
      /* istanbul ignore next */
      {
        cov_20gqkz626j().b[35][1]++;
      }
      // Test DNS health checks
      cov_20gqkz626j().s[119]++;
      healthChecks.dnsHealthChecks = yield this.validateDnsHealthChecks();
      /* istanbul ignore next */
      cov_20gqkz626j().s[120]++;
      if (!healthChecks.dnsHealthChecks) {
        /* istanbul ignore next */
        cov_20gqkz626j().b[36][0]++;
        cov_20gqkz626j().s[121]++;
        recommendations.push('DNS health checks are not properly configured');
      } else
      /* istanbul ignore next */
      {
        cov_20gqkz626j().b[36][1]++;
      }
      // Test S3 replication
      cov_20gqkz626j().s[122]++;
      healthChecks.s3Replication = yield this.validateS3Replication();
      /* istanbul ignore next */
      cov_20gqkz626j().s[123]++;
      if (!healthChecks.s3Replication) {
        /* istanbul ignore next */
        cov_20gqkz626j().b[37][0]++;
        cov_20gqkz626j().s[124]++;
        recommendations.push('S3 cross-region replication is behind');
      } else
      /* istanbul ignore next */
      {
        cov_20gqkz626j().b[37][1]++;
      }
      // Test secrets replication
      cov_20gqkz626j().s[125]++;
      healthChecks.secretsReplication = yield this.validateSecretsReplication();
      /* istanbul ignore next */
      cov_20gqkz626j().s[126]++;
      if (!healthChecks.secretsReplication) {
        /* istanbul ignore next */
        cov_20gqkz626j().b[38][0]++;
        cov_20gqkz626j().s[127]++;
        recommendations.push('Secrets are not properly replicated to secondary region');
      } else
      /* istanbul ignore next */
      {
        cov_20gqkz626j().b[38][1]++;
      }
      // Estimate RTO/RPO based on current conditions
      const estimatedRTO =
      /* istanbul ignore next */
      (cov_20gqkz626j().s[128]++, this.estimateRTO(healthChecks));
      const estimatedRPO =
      /* istanbul ignore next */
      (cov_20gqkz626j().s[129]++, replicationLag / (1000 * 60)); // Convert to minutes
      const success =
      /* istanbul ignore next */
      (cov_20gqkz626j().s[130]++, Object.values(healthChecks).every(check => {
        /* istanbul ignore next */
        cov_20gqkz626j().f[10]++;
        cov_20gqkz626j().s[131]++;
        return check;
      }));
      /* istanbul ignore next */
      cov_20gqkz626j().s[132]++;
      return {
        success,
        healthChecks,
        estimatedRTO,
        estimatedRPO,
        recommendations
      };
    });
  }
  createStep(description) {
    /* istanbul ignore next */
    cov_20gqkz626j().f[11]++;
    cov_20gqkz626j().s[133]++;
    return {
      step: description,
      status: 'in_progress',
      startTime: new Date()
    };
  }
  completeStep(step) {
    /* istanbul ignore next */
    cov_20gqkz626j().f[12]++;
    cov_20gqkz626j().s[134]++;
    step.status = 'completed';
    /* istanbul ignore next */
    cov_20gqkz626j().s[135]++;
    step.endTime = new Date();
    /* istanbul ignore next */
    cov_20gqkz626j().s[136]++;
    step.duration = step.endTime.getTime() - step.startTime.getTime();
  }
  validateSecondaryHealth() {
    /* istanbul ignore next */
    cov_20gqkz626j().f[13]++;
    cov_20gqkz626j().s[137]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_20gqkz626j().f[14]++;
      var _a;
      /* istanbul ignore next */
      cov_20gqkz626j().s[138]++;
      try {
        const command =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[139]++, new client_route_53_1.GetHealthCheckCommand({
          HealthCheckId: this.config.secondaryHealthCheckId
        }));
        const response =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[140]++, yield this.route53Client.send(command));
        /* istanbul ignore next */
        cov_20gqkz626j().s[141]++;
        return /* istanbul ignore next */(cov_20gqkz626j().b[39][0]++,
        /* istanbul ignore next */
        (cov_20gqkz626j().b[41][0]++, (_a = response.StatusList) === null) ||
        /* istanbul ignore next */
        (cov_20gqkz626j().b[41][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_20gqkz626j().b[40][0]++, void 0) :
        /* istanbul ignore next */
        (cov_20gqkz626j().b[40][1]++, _a.some(status => {
          /* istanbul ignore next */
          cov_20gqkz626j().f[15]++;
          cov_20gqkz626j().s[142]++;
          return status.Status === 'Success';
        }))) ||
        /* istanbul ignore next */
        (cov_20gqkz626j().b[39][1]++, false);
      } catch (error) {
        /* istanbul ignore next */
        cov_20gqkz626j().s[143]++;
        console.error('Error validating secondary health:', error);
        /* istanbul ignore next */
        cov_20gqkz626j().s[144]++;
        return false;
      }
    });
  }
  validatePrimaryHealth() {
    /* istanbul ignore next */
    cov_20gqkz626j().f[16]++;
    cov_20gqkz626j().s[145]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_20gqkz626j().f[17]++;
      var _a;
      /* istanbul ignore next */
      cov_20gqkz626j().s[146]++;
      try {
        const command =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[147]++, new client_route_53_1.GetHealthCheckCommand({
          HealthCheckId: this.config.primaryHealthCheckId
        }));
        const response =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[148]++, yield this.route53Client.send(command));
        /* istanbul ignore next */
        cov_20gqkz626j().s[149]++;
        return /* istanbul ignore next */(cov_20gqkz626j().b[42][0]++,
        /* istanbul ignore next */
        (cov_20gqkz626j().b[44][0]++, (_a = response.StatusList) === null) ||
        /* istanbul ignore next */
        (cov_20gqkz626j().b[44][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_20gqkz626j().b[43][0]++, void 0) :
        /* istanbul ignore next */
        (cov_20gqkz626j().b[43][1]++, _a.some(status => {
          /* istanbul ignore next */
          cov_20gqkz626j().f[18]++;
          cov_20gqkz626j().s[150]++;
          return status.Status === 'Success';
        }))) ||
        /* istanbul ignore next */
        (cov_20gqkz626j().b[42][1]++, false);
      } catch (error) {
        /* istanbul ignore next */
        cov_20gqkz626j().s[151]++;
        console.error('Error validating primary health:', error);
        /* istanbul ignore next */
        cov_20gqkz626j().s[152]++;
        return false;
      }
    });
  }
  promoteSecondaryDatabase() {
    /* istanbul ignore next */
    cov_20gqkz626j().f[19]++;
    cov_20gqkz626j().s[153]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_20gqkz626j().f[20]++;
      // For Aurora Global Database, we need to promote the secondary cluster
      const command =
      /* istanbul ignore next */
      (cov_20gqkz626j().s[154]++, new client_rds_1.ModifyDBClusterCommand({
        DBClusterIdentifier: this.config.secondaryClusterIdentifier,
        GlobalClusterIdentifier: this.config.globalClusterIdentifier,
        PromoteGlobalWriterDB: true
      }));
      /* istanbul ignore next */
      cov_20gqkz626j().s[155]++;
      yield this.secondaryRdsClient.send(command);
      // Wait for promotion to complete
      /* istanbul ignore next */
      cov_20gqkz626j().s[156]++;
      yield this.waitForClusterPromotion();
    });
  }
  waitForClusterPromotion() {
    /* istanbul ignore next */
    cov_20gqkz626j().f[21]++;
    cov_20gqkz626j().s[157]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_20gqkz626j().f[22]++;
      var _a;
      const maxAttempts =
      /* istanbul ignore next */
      (cov_20gqkz626j().s[158]++, 30); // 15 minutes max
      let attempts =
      /* istanbul ignore next */
      (cov_20gqkz626j().s[159]++, 0);
      /* istanbul ignore next */
      cov_20gqkz626j().s[160]++;
      while (attempts < maxAttempts) {
        const command =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[161]++, new client_rds_1.DescribeDBClustersCommand({
          DBClusterIdentifier: this.config.secondaryClusterIdentifier
        }));
        const response =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[162]++, yield this.secondaryRdsClient.send(command));
        const cluster =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[163]++,
        /* istanbul ignore next */
        (cov_20gqkz626j().b[46][0]++, (_a = response.DBClusters) === null) ||
        /* istanbul ignore next */
        (cov_20gqkz626j().b[46][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_20gqkz626j().b[45][0]++, void 0) :
        /* istanbul ignore next */
        (cov_20gqkz626j().b[45][1]++, _a[0]));
        /* istanbul ignore next */
        cov_20gqkz626j().s[164]++;
        if (
        /* istanbul ignore next */
        (cov_20gqkz626j().b[48][0]++, (
        /* istanbul ignore next */
        (cov_20gqkz626j().b[50][0]++, cluster === null) ||
        /* istanbul ignore next */
        (cov_20gqkz626j().b[50][1]++, cluster === void 0) ?
        /* istanbul ignore next */
        (cov_20gqkz626j().b[49][0]++, void 0) :
        /* istanbul ignore next */
        (cov_20gqkz626j().b[49][1]++, cluster.Status)) === 'available') &&
        /* istanbul ignore next */
        (cov_20gqkz626j().b[48][1]++, cluster.GlobalWriteForwardingStatus !== 'enabled')) {
          /* istanbul ignore next */
          cov_20gqkz626j().b[47][0]++;
          cov_20gqkz626j().s[165]++;
          return; // Promotion complete
        } else
        /* istanbul ignore next */
        {
          cov_20gqkz626j().b[47][1]++;
        }
        cov_20gqkz626j().s[166]++;
        yield new Promise(resolve => {
          /* istanbul ignore next */
          cov_20gqkz626j().f[23]++;
          cov_20gqkz626j().s[167]++;
          return setTimeout(resolve, 30000);
        }); // Wait 30 seconds
        /* istanbul ignore next */
        cov_20gqkz626j().s[168]++;
        attempts++;
      }
      /* istanbul ignore next */
      cov_20gqkz626j().s[169]++;
      throw new Error('Database promotion timed out');
    });
  }
  updateDnsFailover() {
    /* istanbul ignore next */
    cov_20gqkz626j().f[24]++;
    cov_20gqkz626j().s[170]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_20gqkz626j().f[25]++;
      // Switch primary and secondary records
      const command =
      /* istanbul ignore next */
      (cov_20gqkz626j().s[171]++, new client_route_53_1.ChangeResourceRecordSetsCommand({
        HostedZoneId: this.config.hostedZoneId,
        ChangeBatch: {
          Changes: [{
            Action: 'UPSERT',
            ResourceRecordSet: {
              Name: `api.${this.config.domainName}`,
              Type: 'A',
              SetIdentifier: 'primary',
              Failover: 'SECONDARY',
              // Switch roles
              TTL: 30,
              ResourceRecords: [{
                Value: `api-${this.config.secondaryRegion}.${this.config.domainName}`
              }],
              HealthCheckId: this.config.secondaryHealthCheckId
            }
          }, {
            Action: 'UPSERT',
            ResourceRecordSet: {
              Name: `api.${this.config.domainName}`,
              Type: 'A',
              SetIdentifier: 'secondary',
              Failover: 'PRIMARY',
              // Switch roles
              TTL: 30,
              ResourceRecords: [{
                Value: `api-${this.config.primaryRegion}.${this.config.domainName}`
              }],
              HealthCheckId: this.config.primaryHealthCheckId
            }
          }]
        }
      }));
      /* istanbul ignore next */
      cov_20gqkz626j().s[172]++;
      yield this.route53Client.send(command);
    });
  }
  updateCloudFrontOrigin() {
    /* istanbul ignore next */
    cov_20gqkz626j().f[26]++;
    cov_20gqkz626j().s[173]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_20gqkz626j().f[27]++;
      var _a;
      // Get current distribution config
      const getCommand =
      /* istanbul ignore next */
      (cov_20gqkz626j().s[174]++, new client_cloudfront_1.GetDistributionCommand({
        Id: this.config.distributionId
      }));
      const response =
      /* istanbul ignore next */
      (cov_20gqkz626j().s[175]++, yield this.cloudFrontClient.send(getCommand));
      /* istanbul ignore next */
      cov_20gqkz626j().s[176]++;
      if (!(
      /* istanbul ignore next */
      (cov_20gqkz626j().b[53][0]++, (_a = response.Distribution) === null) ||
      /* istanbul ignore next */
      (cov_20gqkz626j().b[53][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_20gqkz626j().b[52][0]++, void 0) :
      /* istanbul ignore next */
      (cov_20gqkz626j().b[52][1]++, _a.DistributionConfig))) {
        /* istanbul ignore next */
        cov_20gqkz626j().b[51][0]++;
        cov_20gqkz626j().s[177]++;
        throw new Error('Could not retrieve distribution configuration');
      } else
      /* istanbul ignore next */
      {
        cov_20gqkz626j().b[51][1]++;
      }
      // Update origin to point to secondary region
      const config =
      /* istanbul ignore next */
      (cov_20gqkz626j().s[178]++, response.Distribution.DistributionConfig);
      // Implementation would update the origin configuration here
      // Create invalidation for immediate effect
      const invalidationCommand =
      /* istanbul ignore next */
      (cov_20gqkz626j().s[179]++, new client_cloudfront_1.CreateInvalidationCommand({
        DistributionId: this.config.distributionId,
        InvalidationBatch: {
          Paths: {
            Quantity: 2,
            Items: ['/index.html', '/*']
          },
          CallerReference: `failover-${Date.now()}`
        }
      }));
      /* istanbul ignore next */
      cov_20gqkz626j().s[180]++;
      yield this.cloudFrontClient.send(invalidationCommand);
    });
  }
  updateFailoverConfiguration() {
    /* istanbul ignore next */
    cov_20gqkz626j().f[28]++;
    cov_20gqkz626j().s[181]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_20gqkz626j().f[29]++;
      // Update feature flags to indicate failover state
      const command =
      /* istanbul ignore next */
      (cov_20gqkz626j().s[182]++, new client_ssm_1.PutParameterCommand({
        Name: '/matbakh/failover/active',
        Value: 'true',
        Type: 'String',
        Overwrite: true,
        Description: 'Indicates if system is in failover mode'
      }));
      /* istanbul ignore next */
      cov_20gqkz626j().s[183]++;
      yield this.secondarySsmClient.send(command);
      // Update current region parameter
      const regionCommand =
      /* istanbul ignore next */
      (cov_20gqkz626j().s[184]++, new client_ssm_1.PutParameterCommand({
        Name: '/matbakh/config/current-region',
        Value: this.config.secondaryRegion,
        Type: 'String',
        Overwrite: true,
        Description: 'Currently active region'
      }));
      /* istanbul ignore next */
      cov_20gqkz626j().s[185]++;
      yield this.secondarySsmClient.send(regionCommand);
    });
  }
  validateFailoverSuccess() {
    /* istanbul ignore next */
    cov_20gqkz626j().f[30]++;
    cov_20gqkz626j().s[186]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_20gqkz626j().f[31]++;
      // Perform smoke tests against secondary region
      const healthEndpoint =
      /* istanbul ignore next */
      (cov_20gqkz626j().s[187]++, `https://api-${this.config.secondaryRegion}.${this.config.domainName}/health`);
      /* istanbul ignore next */
      cov_20gqkz626j().s[188]++;
      try {
        const response =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[189]++, yield fetch(healthEndpoint));
        /* istanbul ignore next */
        cov_20gqkz626j().s[190]++;
        if (!response.ok) {
          /* istanbul ignore next */
          cov_20gqkz626j().b[54][0]++;
          cov_20gqkz626j().s[191]++;
          throw new Error(`Health check failed: ${response.status}`);
        } else
        /* istanbul ignore next */
        {
          cov_20gqkz626j().b[54][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_20gqkz626j().s[192]++;
        throw new Error(`Failover validation failed: ${error}`);
      }
    });
  }
  calculateRPO() {
    /* istanbul ignore next */
    cov_20gqkz626j().f[32]++;
    cov_20gqkz626j().s[193]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_20gqkz626j().f[33]++;
      var _a;
      // Get the last successful replication timestamp
      /* istanbul ignore next */
      cov_20gqkz626j().s[194]++;
      try {
        const command =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[195]++, new client_rds_1.DescribeDBClustersCommand({
          DBClusterIdentifier: this.config.secondaryClusterIdentifier
        }));
        const response =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[196]++, yield this.secondaryRdsClient.send(command));
        const cluster =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[197]++,
        /* istanbul ignore next */
        (cov_20gqkz626j().b[56][0]++, (_a = response.DBClusters) === null) ||
        /* istanbul ignore next */
        (cov_20gqkz626j().b[56][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_20gqkz626j().b[55][0]++, void 0) :
        /* istanbul ignore next */
        (cov_20gqkz626j().b[55][1]++, _a[0]));
        /* istanbul ignore next */
        cov_20gqkz626j().s[198]++;
        if (
        /* istanbul ignore next */
        (cov_20gqkz626j().b[59][0]++, cluster === null) ||
        /* istanbul ignore next */
        (cov_20gqkz626j().b[59][1]++, cluster === void 0) ?
        /* istanbul ignore next */
        (cov_20gqkz626j().b[58][0]++, void 0) :
        /* istanbul ignore next */
        (cov_20gqkz626j().b[58][1]++, cluster.GlobalWriteForwardingRequestedRegion)) {
          /* istanbul ignore next */
          cov_20gqkz626j().b[57][0]++;
          cov_20gqkz626j().s[199]++;
          // Calculate based on last replication lag
          return 1; // Assume 1 minute RPO for Aurora Global Database
        } else
        /* istanbul ignore next */
        {
          cov_20gqkz626j().b[57][1]++;
        }
        cov_20gqkz626j().s[200]++;
        return 0;
      } catch (error) {
        /* istanbul ignore next */
        cov_20gqkz626j().s[201]++;
        console.error('Error calculating RPO:', error);
        /* istanbul ignore next */
        cov_20gqkz626j().s[202]++;
        return 0;
      }
    });
  }
  getReplicationLag() {
    /* istanbul ignore next */
    cov_20gqkz626j().f[34]++;
    cov_20gqkz626j().s[203]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_20gqkz626j().f[35]++;
      cov_20gqkz626j().s[204]++;
      try {
        const command =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[205]++, new client_rds_1.DescribeDBClustersCommand({
          DBClusterIdentifier: this.config.secondaryClusterIdentifier
        }));
        const response =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[206]++, yield this.secondaryRdsClient.send(command));
        // This would need to be implemented based on actual Aurora Global Database metrics
        /* istanbul ignore next */
        cov_20gqkz626j().s[207]++;
        return 30000; // Placeholder: 30 seconds
      } catch (error) {
        /* istanbul ignore next */
        cov_20gqkz626j().s[208]++;
        console.error('Error getting replication lag:', error);
        /* istanbul ignore next */
        cov_20gqkz626j().s[209]++;
        return 60000; // Default to 1 minute if unable to determine
      }
    });
  }
  validateDnsHealthChecks() {
    /* istanbul ignore next */
    cov_20gqkz626j().f[36]++;
    cov_20gqkz626j().s[210]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_20gqkz626j().f[37]++;
      cov_20gqkz626j().s[211]++;
      try {
        const primaryCheck =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[212]++, yield this.route53Client.send(new client_route_53_1.GetHealthCheckCommand({
          HealthCheckId: this.config.primaryHealthCheckId
        })));
        const secondaryCheck =
        /* istanbul ignore next */
        (cov_20gqkz626j().s[213]++, yield this.route53Client.send(new client_route_53_1.GetHealthCheckCommand({
          HealthCheckId: this.config.secondaryHealthCheckId
        })));
        /* istanbul ignore next */
        cov_20gqkz626j().s[214]++;
        return !!(
        /* istanbul ignore next */
        (cov_20gqkz626j().b[60][0]++, primaryCheck.HealthCheck) &&
        /* istanbul ignore next */
        (cov_20gqkz626j().b[60][1]++, secondaryCheck.HealthCheck));
      } catch (error) {
        /* istanbul ignore next */
        cov_20gqkz626j().s[215]++;
        return false;
      }
    });
  }
  validateS3Replication() {
    /* istanbul ignore next */
    cov_20gqkz626j().f[38]++;
    cov_20gqkz626j().s[216]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_20gqkz626j().f[39]++;
      cov_20gqkz626j().s[217]++;
      // This would check S3 replication metrics
      return true; // Placeholder
    });
  }
  validateSecretsReplication() {
    /* istanbul ignore next */
    cov_20gqkz626j().f[40]++;
    cov_20gqkz626j().s[218]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_20gqkz626j().f[41]++;
      cov_20gqkz626j().s[219]++;
      // This would validate that secrets are accessible in secondary region
      return true; // Placeholder
    });
  }
  estimateRTO(healthChecks) {
    /* istanbul ignore next */
    cov_20gqkz626j().f[42]++;
    let baseRTO =
    /* istanbul ignore next */
    (cov_20gqkz626j().s[220]++, 5); // Base 5 minutes for healthy system
    /* istanbul ignore next */
    cov_20gqkz626j().s[221]++;
    if (!healthChecks.secondaryRegionHealth) {
      /* istanbul ignore next */
      cov_20gqkz626j().b[61][0]++;
      cov_20gqkz626j().s[222]++;
      baseRTO += 5;
    } else
    /* istanbul ignore next */
    {
      cov_20gqkz626j().b[61][1]++;
    }
    cov_20gqkz626j().s[223]++;
    if (!healthChecks.databaseReplication) {
      /* istanbul ignore next */
      cov_20gqkz626j().b[62][0]++;
      cov_20gqkz626j().s[224]++;
      baseRTO += 3;
    } else
    /* istanbul ignore next */
    {
      cov_20gqkz626j().b[62][1]++;
    }
    cov_20gqkz626j().s[225]++;
    if (!healthChecks.dnsHealthChecks) {
      /* istanbul ignore next */
      cov_20gqkz626j().b[63][0]++;
      cov_20gqkz626j().s[226]++;
      baseRTO += 2;
    } else
    /* istanbul ignore next */
    {
      cov_20gqkz626j().b[63][1]++;
    }
    cov_20gqkz626j().s[227]++;
    if (!healthChecks.s3Replication) {
      /* istanbul ignore next */
      cov_20gqkz626j().b[64][0]++;
      cov_20gqkz626j().s[228]++;
      baseRTO += 1;
    } else
    /* istanbul ignore next */
    {
      cov_20gqkz626j().b[64][1]++;
    }
    cov_20gqkz626j().s[229]++;
    if (!healthChecks.secretsReplication) {
      /* istanbul ignore next */
      cov_20gqkz626j().b[65][0]++;
      cov_20gqkz626j().s[230]++;
      baseRTO += 2;
    } else
    /* istanbul ignore next */
    {
      cov_20gqkz626j().b[65][1]++;
    }
    cov_20gqkz626j().s[231]++;
    return Math.min(baseRTO, 15); // Cap at 15 minutes
  }
  generateRollbackPlan() {
    /* istanbul ignore next */
    cov_20gqkz626j().f[43]++;
    cov_20gqkz626j().s[232]++;
    return {
      steps: ['Validate primary region health', 'Re-establish database replication', 'Switch DNS back to primary', 'Update CloudFront origin', 'Reset configuration parameters', 'Validate rollback success'],
      estimatedDuration: 10,
      // minutes
      riskLevel: 'medium'
    };
  }
  logFailoverMetrics(rto, rpo, success, reason) {
    /* istanbul ignore next */
    cov_20gqkz626j().f[44]++;
    cov_20gqkz626j().s[233]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_20gqkz626j().f[45]++;
      const command =
      /* istanbul ignore next */
      (cov_20gqkz626j().s[234]++, new client_cloudwatch_1.PutMetricDataCommand({
        Namespace: 'Matbakh/MultiRegion',
        MetricData: [{
          MetricName: 'FailoverRTO',
          Value: rto,
          Unit: 'Count',
          Dimensions: [{
            Name: 'Success',
            Value: success.toString()
          }, {
            Name: 'Reason',
            Value: reason
          }]
        }, {
          MetricName: 'FailoverRPO',
          Value: rpo,
          Unit: 'Count',
          Dimensions: [{
            Name: 'Success',
            Value: success.toString()
          }]
        }, {
          MetricName: 'FailoverAttempts',
          Value: 1,
          Unit: 'Count',
          Dimensions: [{
            Name: 'Success',
            Value: success.toString()
          }, {
            Name: 'Reason',
            Value: reason
          }]
        }]
      }));
      /* istanbul ignore next */
      cov_20gqkz626j().s[235]++;
      yield this.cloudWatchClient.send(command);
    });
  }
  logFailbackMetrics(rto, success) {
    /* istanbul ignore next */
    cov_20gqkz626j().f[46]++;
    cov_20gqkz626j().s[236]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_20gqkz626j().f[47]++;
      const command =
      /* istanbul ignore next */
      (cov_20gqkz626j().s[237]++, new client_cloudwatch_1.PutMetricDataCommand({
        Namespace: 'Matbakh/MultiRegion',
        MetricData: [{
          MetricName: 'FailbackRTO',
          Value: rto,
          Unit: 'Count',
          Dimensions: [{
            Name: 'Success',
            Value: success.toString()
          }]
        }, {
          MetricName: 'FailbackAttempts',
          Value: 1,
          Unit: 'Count',
          Dimensions: [{
            Name: 'Success',
            Value: success.toString()
          }]
        }]
      }));
      /* istanbul ignore next */
      cov_20gqkz626j().s[238]++;
      yield this.cloudWatchClient.send(command);
    });
  }
  // Placeholder methods for failback operations
  reestablishReplication() {
    /* istanbul ignore next */
    cov_20gqkz626j().f[48]++;
    cov_20gqkz626j().s[239]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_20gqkz626j().f[49]++;
    } // Implementation for re-establishing replication
    );
  }
  synchronizeDataToPrimary() {
    /* istanbul ignore next */
    cov_20gqkz626j().f[50]++;
    cov_20gqkz626j().s[240]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_20gqkz626j().f[51]++;
    } // Implementation for data synchronization
    );
  }
  switchDnsToPrimary() {
    /* istanbul ignore next */
    cov_20gqkz626j().f[52]++;
    cov_20gqkz626j().s[241]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_20gqkz626j().f[53]++;
    } // Implementation for DNS switch back
    );
  }
  updateCloudFrontToPrimary() {
    /* istanbul ignore next */
    cov_20gqkz626j().f[54]++;
    cov_20gqkz626j().s[242]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_20gqkz626j().f[55]++;
    } // Implementation for CloudFront update
    );
  }
  resetConfigurationToPrimary() {
    /* istanbul ignore next */
    cov_20gqkz626j().f[56]++;
    cov_20gqkz626j().s[243]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_20gqkz626j().f[57]++;
    } // Implementation for configuration reset
    );
  }
}
/* istanbul ignore next */
cov_20gqkz626j().s[244]++;
exports.MultiRegionOrchestrator = MultiRegionOrchestrator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
12c0fdc70069d8210519c72025b55191
"use strict";
/**
 * Bedrock Support Mode Configuration Loader
 *
 * Loads environment-specific configuration for Bedrock support mode
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BedrockConfigLoader = void 0;
exports.getBedrockConfig = getBedrockConfig;
exports.validateBedrockConfig = validateBedrockConfig;
/**
 * Configuration loader for Bedrock support mode
 */
class BedrockConfigLoader {
    static instance;
    config = null;
    constructor() { }
    /**
     * Get singleton instance
     */
    static getInstance() {
        if (!BedrockConfigLoader.instance) {
            BedrockConfigLoader.instance = new BedrockConfigLoader();
        }
        return BedrockConfigLoader.instance;
    }
    /**
     * Load configuration for the specified environment
     */
    loadConfig(environment) {
        if (this.config) {
            return this.config;
        }
        // Load from environment variables with fallbacks
        this.config = {
            // Feature Flags
            supportModeEnabled: this.getBooleanEnv("VITE_ENABLE_BEDROCK_SUPPORT_MODE", false),
            intelligentRoutingEnabled: this.getBooleanEnv("VITE_ENABLE_INTELLIGENT_ROUTING", true),
            directBedrockFallbackEnabled: this.getBooleanEnv("VITE_ENABLE_DIRECT_BEDROCK_FALLBACK", environment !== "development"),
            // Support Mode Configuration
            auditInterval: this.getNumberEnv("VITE_BEDROCK_AUDIT_INTERVAL", this.getDefaultAuditInterval(environment)),
            monitoringLevel: this.getStringEnv("VITE_BEDROCK_MONITORING_LEVEL", this.getDefaultMonitoringLevel(environment)),
            autoResolutionEnabled: this.getBooleanEnv("VITE_BEDROCK_AUTO_RESOLUTION_ENABLED", environment !== "production"),
            // Environment-specific settings
            debugMode: this.getBooleanEnv("VITE_BEDROCK_DEBUG_MODE", environment === "development"),
            verboseLogging: this.getBooleanEnv("VITE_BEDROCK_VERBOSE_LOGGING", environment === "development"),
            mockInfrastructureAudit: this.getBooleanEnv("VITE_BEDROCK_MOCK_INFRASTRUCTURE_AUDIT", environment === "development"),
            // AWS Configuration
            awsRegion: this.getStringEnv("VITE_AWS_REGION", "eu-central-1"),
            bedrockModelId: this.getStringEnv("VITE_BEDROCK_MODEL_ID", "anthropic.claude-3-5-sonnet-20241022-v2:0"),
            // Safety Settings
            rateLimitEnabled: this.getBooleanEnv("VITE_BEDROCK_RATE_LIMIT_ENABLED", true),
            costLimitEnabled: this.getBooleanEnv("VITE_BEDROCK_COST_LIMIT_ENABLED", true),
            maxRequestsPerMinute: this.getNumberEnv("VITE_BEDROCK_MAX_REQUESTS_PER_MINUTE", this.getDefaultRateLimit(environment)),
            // Notification Settings
            notificationChannels: this.getArrayEnv("VITE_BEDROCK_NOTIFICATION_CHANNELS", this.getDefaultNotificationChannels(environment)),
            slackWebhookUrl: this.getStringEnv("VITE_BEDROCK_SLACK_WEBHOOK_URL"),
            pagerdutyIntegrationKey: this.getStringEnv("VITE_BEDROCK_PAGERDUTY_INTEGRATION_KEY"),
            webhookUrl: this.getStringEnv("VITE_BEDROCK_WEBHOOK_URL"),
            // Production-specific settings
            circuitBreakerEnabled: this.getBooleanEnv("VITE_BEDROCK_CIRCUIT_BREAKER_ENABLED", environment === "production"),
            circuitBreakerThreshold: this.getNumberEnv("VITE_BEDROCK_CIRCUIT_BREAKER_THRESHOLD", 5),
            circuitBreakerTimeout: this.getNumberEnv("VITE_BEDROCK_CIRCUIT_BREAKER_TIMEOUT", 60000),
            auditTrailEnabled: this.getBooleanEnv("VITE_BEDROCK_AUDIT_TRAIL_ENABLED", environment === "production"),
            gdprComplianceEnabled: this.getBooleanEnv("VITE_BEDROCK_GDPR_COMPLIANCE_ENABLED", environment === "production"),
            piiDetectionEnabled: this.getBooleanEnv("VITE_BEDROCK_PII_DETECTION_ENABLED", environment === "production"),
            // Testing Configuration
            enableCanaryTesting: this.getBooleanEnv("VITE_BEDROCK_ENABLE_CANARY_TESTING", environment === "staging"),
            canaryPercentage: this.getNumberEnv("VITE_BEDROCK_CANARY_PERCENTAGE", 10),
        };
        return this.config;
    }
    /**
     * Get current configuration (must be loaded first)
     */
    getConfig() {
        if (!this.config) {
            throw new Error("Configuration not loaded. Call loadConfig() first.");
        }
        return this.config;
    }
    /**
     * Reload configuration (clears cache)
     */
    reloadConfig(environment) {
        this.config = null;
        return this.loadConfig(environment);
    }
    /**
     * Validate configuration
     */
    validateConfig(config) {
        const errors = [];
        const warnings = [];
        // Validate audit interval
        if (config.auditInterval < 60000) {
            // Less than 1 minute
            errors.push("Audit interval must be at least 60 seconds");
        }
        // Validate rate limits
        if (config.maxRequestsPerMinute < 1) {
            errors.push("Max requests per minute must be at least 1");
        }
        // Validate notification channels
        if (config.notificationChannels.length === 0) {
            warnings.push("No notification channels configured");
        }
        // Validate Slack configuration
        if (config.notificationChannels.includes("slack") &&
            !config.slackWebhookUrl) {
            warnings.push("Slack notification channel enabled but no webhook URL configured");
        }
        // Validate PagerDuty configuration
        if (config.notificationChannels.includes("pagerduty") &&
            !config.pagerdutyIntegrationKey) {
            warnings.push("PagerDuty notification channel enabled but no integration key configured");
        }
        // Validate circuit breaker settings
        if (config.circuitBreakerEnabled) {
            if (!config.circuitBreakerThreshold ||
                config.circuitBreakerThreshold < 1) {
                errors.push("Circuit breaker threshold must be at least 1");
            }
            if (!config.circuitBreakerTimeout ||
                config.circuitBreakerTimeout < 1000) {
                errors.push("Circuit breaker timeout must be at least 1000ms");
            }
        }
        return {
            isValid: errors.length === 0,
            errors,
            warnings,
        };
    }
    // Helper methods for environment variable parsing
    getBooleanEnv(key, defaultValue = false) {
        const value = this.getEnvValue(key);
        if (value === undefined)
            return defaultValue;
        return value.toLowerCase() === "true";
    }
    getNumberEnv(key, defaultValue = 0) {
        const value = this.getEnvValue(key);
        if (value === undefined)
            return defaultValue;
        const parsed = parseInt(value, 10);
        return isNaN(parsed) ? defaultValue : parsed;
    }
    getStringEnv(key, defaultValue) {
        return this.getEnvValue(key) || defaultValue;
    }
    getArrayEnv(key, defaultValue = []) {
        const value = this.getEnvValue(key);
        if (value === undefined)
            return defaultValue;
        return value
            .split(",")
            .map((item) => item.trim())
            .filter((item) => item.length > 0);
    }
    getEnvValue(key) {
        // In browser/Vite environment, check import.meta.env
        // Use dynamic evaluation to avoid Jest parsing issues
        const importMeta = this.getImportMeta();
        if (importMeta && importMeta.env) {
            return importMeta.env[key];
        }
        // Fallback to process.env for Node.js environments
        if (typeof process !== "undefined" && process.env) {
            return process.env[key];
        }
        return undefined;
    }
    getImportMeta() {
        try {
            // Safe access to import.meta without eval
            if (typeof window !== "undefined" && "import" in globalThis) {
                return globalThis.import?.meta;
            }
            return undefined;
        }
        catch (error) {
            return undefined;
        }
    }
    // Default value helpers
    getDefaultAuditInterval(environment) {
        switch (environment) {
            case "development":
                return 300000; // 5 minutes
            case "staging":
                return 600000; // 10 minutes
            case "production":
                return 1800000; // 30 minutes
            default:
                return 600000;
        }
    }
    getDefaultMonitoringLevel(environment) {
        switch (environment) {
            case "development":
                return "comprehensive";
            case "staging":
                return "detailed";
            case "production":
                return "basic";
            default:
                return "basic";
        }
    }
    getDefaultRateLimit(environment) {
        switch (environment) {
            case "development":
                return 10;
            case "staging":
                return 30;
            case "production":
                return 100;
            default:
                return 30;
        }
    }
    getDefaultNotificationChannels(environment) {
        switch (environment) {
            case "development":
                return ["console", "webhook"];
            case "staging":
                return ["slack", "webhook"];
            case "production":
                return ["slack", "pagerduty", "webhook"];
            default:
                return ["console"];
        }
    }
}
exports.BedrockConfigLoader = BedrockConfigLoader;
/**
 * Convenience function to get configuration for current environment
 */
function getBedrockConfig() {
    const loader = BedrockConfigLoader.getInstance();
    // Determine current environment
    let environment = "development";
    if (typeof process !== "undefined" && process.env) {
        const env = process.env.NODE_ENV || process.env.ENVIRONMENT;
        if (env === "production" || env === "staging") {
            environment = env;
        }
    }
    return loader.loadConfig(environment);
}
/**
 * Convenience function to validate current configuration
 */
function validateBedrockConfig() {
    const config = getBedrockConfig();
    const loader = BedrockConfigLoader.getInstance();
    return loader.validateConfig(config);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/meta-monitor.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/meta-monitor.ts"],"sourcesContent":["/**\n * Meta Monitor - Kiro Execution Analysis using Direct Bedrock\n *\n * This module implements meta-level monitoring of Kiro execution patterns,\n * failure detection, and feedback generation using direct Bedrock access\n * for time-critical analysis (< 15s latency requirement).\n */\n\nimport { AiFeatureFlags } from \"./ai-feature-flags\";\nimport {\n  DirectBedrockClient,\n  SupportOperationRequest,\n} from \"./direct-bedrock-client\";\nimport { IntelligentRouter } from \"./intelligent-router\";\n\n// Kiro Execution Data Types\nexport interface KiroExecutionData {\n  executionId: string;\n  timestamp: Date;\n  operation: string;\n  status: \"success\" | \"failure\" | \"timeout\" | \"error\";\n  latencyMs: number;\n  context: {\n    userId?: string;\n    taskType?: string;\n    complexity?: \"simple\" | \"medium\" | \"complex\";\n    metadata?: Record<string, any>;\n  };\n  error?: {\n    type: string;\n    message: string;\n    stack?: string;\n    code?: string;\n  };\n  performance: {\n    memoryUsage?: number;\n    cpuUsage?: number;\n    networkLatency?: number;\n  };\n  correlationId: string;\n}\n\n// Failure Pattern Detection\nexport interface FailurePattern {\n  patternId: string;\n  type:\n    | \"recurring_error\"\n    | \"performance_degradation\"\n    | \"timeout_cluster\"\n    | \"resource_exhaustion\";\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n  frequency: number;\n  firstOccurrence: Date;\n  lastOccurrence: Date;\n  affectedOperations: string[];\n  commonFactors: Record<string, any>;\n  suggestedActions: string[];\n  confidence: number; // 0-1 confidence score\n}\n\n// Execution Feedback\nexport interface ExecutionFeedback {\n  feedbackId: string;\n  executionId: string;\n  timestamp: Date;\n  type:\n    | \"optimization\"\n    | \"warning\"\n    | \"error_prevention\"\n    | \"performance_improvement\";\n  priority: \"low\" | \"medium\" | \"high\" | \"urgent\";\n  message: string;\n  actionable: boolean;\n  suggestedFix?: {\n    description: string;\n    code?: string;\n    configuration?: Record<string, any>;\n    estimatedImpact: string;\n  };\n  correlationId: string;\n}\n\n// Meta Monitor Configuration\nexport interface MetaMonitorConfig {\n  analysisInterval: number; // How often to analyze execution patterns\n  failureThreshold: number; // Number of failures before pattern detection\n  performanceThreshold: number; // Latency threshold for performance issues\n  retentionPeriod: number; // How long to keep execution data\n  enableRealTimeAnalysis: boolean;\n  enablePredictiveAnalysis: boolean;\n  maxAnalysisLatency: number; // 15s max for direct Bedrock analysis\n}\n\n// Analysis Results\nexport interface ExecutionAnalysisResult {\n  analysisId: string;\n  timestamp: Date;\n  executionCount: number;\n  successRate: number;\n  averageLatency: number;\n  detectedPatterns: FailurePattern[];\n  generatedFeedback: ExecutionFeedback[];\n  recommendations: {\n    immediate: string[];\n    shortTerm: string[];\n    longTerm: string[];\n  };\n  healthScore: number; // 0-100 overall health score\n  analysisLatencyMs: number;\n}\n\n/**\n * Meta Monitor for Kiro Execution Analysis\n */\nexport class MetaMonitor {\n  private config: MetaMonitorConfig;\n  private featureFlags: AiFeatureFlags;\n  private directBedrockClient: DirectBedrockClient;\n  private intelligentRouter: IntelligentRouter;\n\n  // Data storage and analysis\n  private executionHistory: Map<string, KiroExecutionData> = new Map();\n  private detectedPatterns: Map<string, FailurePattern> = new Map();\n  private analysisCache: Map<string, ExecutionAnalysisResult> = new Map();\n\n  // Monitoring and intervals\n  private analysisInterval?: NodeJS.Timeout;\n  private cleanupInterval?: NodeJS.Timeout;\n  private activeTimeouts: Set<NodeJS.Timeout> = new Set();\n\n  // Metrics\n  private metrics: {\n    totalAnalyses: number;\n    patternsDetected: number;\n    feedbackGenerated: number;\n    averageAnalysisTime: number;\n    successfulAnalyses: number;\n    failedAnalyses: number;\n  };\n\n  constructor(\n    directBedrockClient: DirectBedrockClient,\n    intelligentRouter: IntelligentRouter,\n    config?: Partial<MetaMonitorConfig>\n  ) {\n    this.directBedrockClient = directBedrockClient;\n    this.intelligentRouter = intelligentRouter;\n    this.featureFlags = new AiFeatureFlags();\n\n    this.config = {\n      analysisInterval: 300000, // 5 minutes\n      failureThreshold: 3, // 3 failures to detect pattern\n      performanceThreshold: 5000, // 5s latency threshold\n      retentionPeriod: 86400000, // 24 hours\n      enableRealTimeAnalysis: true,\n      enablePredictiveAnalysis: true,\n      maxAnalysisLatency: 15000, // 15s max analysis time\n      ...config,\n    };\n\n    this.metrics = this.initializeMetrics();\n\n    // Start monitoring if enabled\n    if (this.featureFlags.isEnabled(\"ENABLE_META_MONITOR\")) {\n      this.startMonitoring();\n    }\n  }\n\n  /**\n   * Analyze Kiro execution using direct Bedrock\n   */\n  async analyzeKiroExecution(\n    executionData: KiroExecutionData\n  ): Promise<ExecutionFeedback[]> {\n    const startTime = Date.now();\n    const correlationId = this.generateCorrelationId();\n\n    try {\n      // Check if meta monitor is enabled\n      if (!this.featureFlags.isEnabled(\"ENABLE_META_MONITOR\")) {\n        throw new Error(\"Meta monitor is disabled\");\n      }\n\n      // Store execution data\n      this.storeExecutionData(executionData);\n\n      // Perform real-time analysis if enabled\n      if (this.config.enableRealTimeAnalysis) {\n        const feedback = await this.performRealTimeAnalysis(\n          executionData,\n          correlationId\n        );\n\n        // Update metrics\n        this.updateMetrics(true, Date.now() - startTime);\n\n        return feedback;\n      }\n\n      return [];\n    } catch (error) {\n      console.error(\"Meta monitor analysis failed:\", error);\n      this.updateMetrics(false, Date.now() - startTime);\n      return [];\n    }\n  }\n\n  /**\n   * Detect failure patterns in execution history\n   */\n  async detectFailurePatterns(): Promise<FailurePattern[]> {\n    const startTime = Date.now();\n\n    try {\n      // Get recent execution data\n      const recentExecutions = this.getRecentExecutions();\n      const failures = recentExecutions.filter(\n        (exec) => exec.status === \"failure\" || exec.status === \"error\"\n      );\n\n      if (failures.length < this.config.failureThreshold) {\n        return [];\n      }\n\n      // Use direct Bedrock for pattern analysis\n      const analysisRequest: SupportOperationRequest = {\n        operation: \"meta_monitor\",\n        priority: \"high\",\n        prompt: this.buildPatternAnalysisPrompt(failures),\n        context: {\n          correlationId: this.generateCorrelationId(),\n          metadata: {\n            failureCount: failures.length,\n            analysisType: \"pattern_detection\",\n          },\n        },\n        maxTokens: 2048,\n        temperature: 0.2,\n      };\n\n      // Route through intelligent router for optimal performance\n      const response = await this.intelligentRouter.executeSupportOperation(\n        analysisRequest\n      );\n\n      if (response.success && response.text) {\n        const patterns = this.parsePatternAnalysisResponse(response.text);\n\n        // Store detected patterns\n        patterns.forEach((pattern) => {\n          this.detectedPatterns.set(pattern.patternId, pattern);\n        });\n\n        // Update metrics\n        this.metrics.patternsDetected += patterns.length;\n\n        return patterns;\n      }\n\n      return [];\n    } catch (error) {\n      console.error(\"Pattern detection failed:\", error);\n      return [];\n    }\n  }\n\n  /**\n   * Generate execution feedback using direct Bedrock\n   */\n  async generateExecutionFeedback(\n    executionData: KiroExecutionData,\n    patterns: FailurePattern[]\n  ): Promise<ExecutionFeedback[]> {\n    try {\n      const feedbackRequest: SupportOperationRequest = {\n        operation: \"meta_monitor\",\n        priority: \"high\",\n        prompt: this.buildFeedbackGenerationPrompt(executionData, patterns),\n        context: {\n          correlationId: executionData.correlationId,\n          metadata: {\n            executionId: executionData.executionId,\n            analysisType: \"feedback_generation\",\n          },\n        },\n        maxTokens: 1536,\n        temperature: 0.3,\n      };\n\n      // Route through intelligent router\n      const response = await this.intelligentRouter.executeSupportOperation(\n        feedbackRequest\n      );\n\n      if (response.success && response.text) {\n        const feedback = this.parseFeedbackResponse(\n          response.text,\n          executionData\n        );\n\n        // Update metrics\n        this.metrics.feedbackGenerated += feedback.length;\n\n        return feedback;\n      }\n\n      return [];\n    } catch (error) {\n      console.error(\"Feedback generation failed:\", error);\n      return [];\n    }\n  }\n\n  /**\n   * Perform comprehensive execution analysis\n   */\n  async performComprehensiveAnalysis(): Promise<ExecutionAnalysisResult> {\n    const startTime = Date.now();\n    const analysisId = this.generateAnalysisId();\n\n    try {\n      // Get execution statistics\n      const recentExecutions = this.getRecentExecutions();\n      const successRate = this.calculateSuccessRate(recentExecutions);\n      const averageLatency = this.calculateAverageLatency(recentExecutions);\n\n      // Detect patterns\n      const patterns = await this.detectFailurePatterns();\n\n      // Generate comprehensive feedback\n      const allFeedback: ExecutionFeedback[] = [];\n      for (const execution of recentExecutions.slice(-10)) {\n        const feedback = await this.generateExecutionFeedback(\n          execution,\n          patterns\n        );\n        allFeedback.push(...feedback);\n      }\n\n      // Generate recommendations using direct Bedrock\n      const recommendations = await this.generateRecommendations(\n        recentExecutions,\n        patterns,\n        allFeedback\n      );\n\n      // Calculate health score\n      const healthScore = this.calculateHealthScore(\n        successRate,\n        averageLatency,\n        patterns\n      );\n\n      const result: ExecutionAnalysisResult = {\n        analysisId,\n        timestamp: new Date(),\n        executionCount: recentExecutions.length,\n        successRate,\n        averageLatency,\n        detectedPatterns: patterns,\n        generatedFeedback: allFeedback,\n        recommendations,\n        healthScore,\n        analysisLatencyMs: Date.now() - startTime,\n      };\n\n      // Cache the result\n      this.analysisCache.set(analysisId, result);\n\n      // Update metrics\n      this.updateMetrics(true, Date.now() - startTime);\n\n      return result;\n    } catch (error) {\n      console.error(\"Comprehensive analysis failed:\", error);\n      this.updateMetrics(false, Date.now() - startTime);\n\n      // Return minimal result on error\n      return {\n        analysisId,\n        timestamp: new Date(),\n        executionCount: 0,\n        successRate: 0,\n        averageLatency: 0,\n        detectedPatterns: [],\n        generatedFeedback: [],\n        recommendations: { immediate: [], shortTerm: [], longTerm: [] },\n        healthScore: 0,\n        analysisLatencyMs: Date.now() - startTime,\n      };\n    }\n  }\n\n  /**\n   * Get meta monitor health status\n   */\n  getHealthStatus() {\n    const recentExecutions = this.getRecentExecutions();\n    const successRate = this.calculateSuccessRate(recentExecutions);\n\n    return {\n      isHealthy: successRate > 0.8 && this.metrics.successfulAnalyses > 0,\n      executionCount: recentExecutions.length,\n      successRate,\n      patternsDetected: this.detectedPatterns.size,\n      lastAnalysis: this.getLastAnalysisTime(),\n      metrics: this.metrics,\n    };\n  }\n\n  /**\n   * Get meta monitor metrics\n   */\n  getMetrics() {\n    return {\n      ...this.metrics,\n      executionHistorySize: this.executionHistory.size,\n      detectedPatternsCount: this.detectedPatterns.size,\n      analysisCacheSize: this.analysisCache.size,\n    };\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    // Clear intervals\n    if (this.analysisInterval) {\n      clearInterval(this.analysisInterval);\n      this.analysisInterval = undefined;\n    }\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n      this.cleanupInterval = undefined;\n    }\n\n    // Clear timeouts\n    this.activeTimeouts.forEach((timeout) => {\n      clearTimeout(timeout);\n    });\n    this.activeTimeouts.clear();\n\n    // Clear data\n    this.executionHistory.clear();\n    this.detectedPatterns.clear();\n    this.analysisCache.clear();\n  }\n\n  // Private implementation methods\n\n  private initializeMetrics() {\n    return {\n      totalAnalyses: 0,\n      patternsDetected: 0,\n      feedbackGenerated: 0,\n      averageAnalysisTime: 0,\n      successfulAnalyses: 0,\n      failedAnalyses: 0,\n    };\n  }\n\n  private startMonitoring(): void {\n    // Start periodic analysis\n    this.analysisInterval = setInterval(async () => {\n      try {\n        await this.performComprehensiveAnalysis();\n      } catch (error) {\n        console.error(\"Periodic analysis failed:\", error);\n      }\n    }, this.config.analysisInterval);\n\n    // Start cleanup interval\n    this.cleanupInterval = setInterval(() => {\n      this.cleanupOldData();\n    }, this.config.retentionPeriod / 4); // Cleanup every 6 hours if retention is 24h\n  }\n\n  private storeExecutionData(executionData: KiroExecutionData): void {\n    this.executionHistory.set(executionData.executionId, executionData);\n  }\n\n  private async performRealTimeAnalysis(\n    executionData: KiroExecutionData,\n    correlationId: string\n  ): Promise<ExecutionFeedback[]> {\n    // Check if this execution indicates a problem\n    if (\n      executionData.status === \"failure\" ||\n      executionData.status === \"error\" ||\n      executionData.latencyMs > this.config.performanceThreshold\n    ) {\n      // Generate immediate feedback\n      return await this.generateExecutionFeedback(executionData, []);\n    }\n\n    return [];\n  }\n\n  private getRecentExecutions(): KiroExecutionData[] {\n    const cutoffTime = Date.now() - this.config.retentionPeriod;\n    return Array.from(this.executionHistory.values()).filter(\n      (exec) => exec.timestamp.getTime() > cutoffTime\n    );\n  }\n\n  private calculateSuccessRate(executions: KiroExecutionData[]): number {\n    if (executions.length === 0) return 1.0;\n\n    const successCount = executions.filter(\n      (exec) => exec.status === \"success\"\n    ).length;\n    return successCount / executions.length;\n  }\n\n  private calculateAverageLatency(executions: KiroExecutionData[]): number {\n    if (executions.length === 0) return 0;\n\n    const totalLatency = executions.reduce(\n      (sum, exec) => sum + exec.latencyMs,\n      0\n    );\n    return totalLatency / executions.length;\n  }\n\n  private calculateHealthScore(\n    successRate: number,\n    averageLatency: number,\n    patterns: FailurePattern[]\n  ): number {\n    let score = 100;\n\n    // Deduct for low success rate\n    score -= (1 - successRate) * 50;\n\n    // Deduct for high latency\n    if (averageLatency > this.config.performanceThreshold) {\n      score -= Math.min(\n        30,\n        (averageLatency / this.config.performanceThreshold - 1) * 20\n      );\n    }\n\n    // Deduct for critical patterns\n    const criticalPatterns = patterns.filter((p) => p.severity === \"critical\");\n    score -= criticalPatterns.length * 15;\n\n    // Deduct for high severity patterns\n    const highPatterns = patterns.filter((p) => p.severity === \"high\");\n    score -= highPatterns.length * 10;\n\n    return Math.max(0, Math.round(score));\n  }\n\n  private buildPatternAnalysisPrompt(failures: KiroExecutionData[]): string {\n    return `Analyze the following Kiro execution failures to detect patterns:\n\n${failures\n  .map(\n    (f, i) => `\nFailure ${i + 1}:\n- Operation: ${f.operation}\n- Error: ${f.error?.type} - ${f.error?.message}\n- Latency: ${f.latencyMs}ms\n- Context: ${JSON.stringify(f.context)}\n- Timestamp: ${f.timestamp.toISOString()}\n`\n  )\n  .join(\"\\n\")}\n\nPlease identify:\n1. Recurring error patterns\n2. Performance degradation patterns\n3. Resource exhaustion patterns\n4. Common factors across failures\n5. Suggested remediation actions\n\nFormat your response as JSON with the following structure:\n{\n  \"patterns\": [\n    {\n      \"type\": \"recurring_error|performance_degradation|timeout_cluster|resource_exhaustion\",\n      \"severity\": \"low|medium|high|critical\",\n      \"description\": \"Pattern description\",\n      \"affectedOperations\": [\"operation1\", \"operation2\"],\n      \"commonFactors\": {\"factor\": \"value\"},\n      \"suggestedActions\": [\"action1\", \"action2\"],\n      \"confidence\": 0.85\n    }\n  ]\n}`;\n  }\n\n  private buildFeedbackGenerationPrompt(\n    executionData: KiroExecutionData,\n    patterns: FailurePattern[]\n  ): string {\n    return `Generate actionable feedback for this Kiro execution:\n\nExecution Details:\n- Operation: ${executionData.operation}\n- Status: ${executionData.status}\n- Latency: ${executionData.latencyMs}ms\n- Error: ${executionData.error?.message || \"None\"}\n- Context: ${JSON.stringify(executionData.context)}\n\nRelated Patterns:\n${patterns.map((p) => `- ${p.type}: ${p.severity} severity`).join(\"\\n\")}\n\nPlease provide:\n1. Immediate optimization suggestions\n2. Warning about potential issues\n3. Error prevention recommendations\n4. Performance improvement suggestions\n\nFormat as JSON:\n{\n  \"feedback\": [\n    {\n      \"type\": \"optimization|warning|error_prevention|performance_improvement\",\n      \"priority\": \"low|medium|high|urgent\",\n      \"message\": \"Feedback message\",\n      \"actionable\": true,\n      \"suggestedFix\": {\n        \"description\": \"Fix description\",\n        \"estimatedImpact\": \"Impact description\"\n      }\n    }\n  ]\n}`;\n  }\n\n  private async generateRecommendations(\n    executions: KiroExecutionData[],\n    patterns: FailurePattern[],\n    feedback: ExecutionFeedback[]\n  ): Promise<{ immediate: string[]; shortTerm: string[]; longTerm: string[] }> {\n    try {\n      const recommendationRequest: SupportOperationRequest = {\n        operation: \"meta_monitor\",\n        priority: \"medium\",\n        prompt: `Based on the execution analysis, generate strategic recommendations:\n\nExecution Summary:\n- Total executions: ${executions.length}\n- Success rate: ${this.calculateSuccessRate(executions)}\n- Average latency: ${this.calculateAverageLatency(executions)}ms\n\nDetected Patterns: ${patterns.length}\nGenerated Feedback: ${feedback.length}\n\nProvide recommendations in three categories:\n1. Immediate actions (can be done now)\n2. Short-term improvements (1-2 weeks)\n3. Long-term strategic changes (1+ months)\n\nFormat as JSON:\n{\n  \"immediate\": [\"action1\", \"action2\"],\n  \"shortTerm\": [\"improvement1\", \"improvement2\"],\n  \"longTerm\": [\"strategy1\", \"strategy2\"]\n}`,\n        context: {\n          correlationId: this.generateCorrelationId(),\n          metadata: { analysisType: \"recommendations\" },\n        },\n        maxTokens: 1024,\n        temperature: 0.4,\n      };\n\n      const response = await this.intelligentRouter.executeSupportOperation(\n        recommendationRequest\n      );\n\n      if (response.success && response.text) {\n        try {\n          const parsed = JSON.parse(response.text);\n          return {\n            immediate: parsed.immediate || [],\n            shortTerm: parsed.shortTerm || [],\n            longTerm: parsed.longTerm || [],\n          };\n        } catch (parseError) {\n          console.error(\"Failed to parse recommendations:\", parseError);\n        }\n      }\n    } catch (error) {\n      console.error(\"Recommendation generation failed:\", error);\n    }\n\n    // Return default recommendations on error\n    return {\n      immediate: [\"Monitor system health\", \"Check error logs\"],\n      shortTerm: [\"Optimize performance bottlenecks\", \"Improve error handling\"],\n      longTerm: [\n        \"Implement predictive monitoring\",\n        \"Enhance system architecture\",\n      ],\n    };\n  }\n\n  private parsePatternAnalysisResponse(response: string): FailurePattern[] {\n    try {\n      const parsed = JSON.parse(response);\n      return (parsed.patterns || []).map((p: any) => ({\n        patternId: this.generatePatternId(),\n        type: p.type,\n        severity: p.severity,\n        frequency: 1, // Will be updated as pattern is observed\n        firstOccurrence: new Date(),\n        lastOccurrence: new Date(),\n        affectedOperations: p.affectedOperations || [],\n        commonFactors: p.commonFactors || {},\n        suggestedActions: p.suggestedActions || [],\n        confidence: p.confidence || 0.5,\n      }));\n    } catch (error) {\n      console.error(\"Failed to parse pattern analysis response:\", error);\n      return [];\n    }\n  }\n\n  private parseFeedbackResponse(\n    response: string,\n    executionData: KiroExecutionData\n  ): ExecutionFeedback[] {\n    try {\n      const parsed = JSON.parse(response);\n      return (parsed.feedback || []).map((f: any) => ({\n        feedbackId: this.generateFeedbackId(),\n        executionId: executionData.executionId,\n        timestamp: new Date(),\n        type: f.type,\n        priority: f.priority,\n        message: f.message,\n        actionable: f.actionable || false,\n        suggestedFix: f.suggestedFix,\n        correlationId: executionData.correlationId,\n      }));\n    } catch (error) {\n      console.error(\"Failed to parse feedback response:\", error);\n      return [];\n    }\n  }\n\n  private cleanupOldData(): void {\n    const cutoffTime = Date.now() - this.config.retentionPeriod;\n\n    // Clean execution history\n    for (const [id, execution] of this.executionHistory.entries()) {\n      if (execution.timestamp.getTime() < cutoffTime) {\n        this.executionHistory.delete(id);\n      }\n    }\n\n    // Clean analysis cache\n    for (const [id, analysis] of this.analysisCache.entries()) {\n      if (analysis.timestamp.getTime() < cutoffTime) {\n        this.analysisCache.delete(id);\n      }\n    }\n  }\n\n  private getLastAnalysisTime(): Date | null {\n    const analyses = Array.from(this.analysisCache.values());\n    if (analyses.length === 0) return null;\n\n    return analyses.reduce(\n      (latest, analysis) =>\n        analysis.timestamp > latest ? analysis.timestamp : latest,\n      analyses[0].timestamp\n    );\n  }\n\n  private updateMetrics(success: boolean, latencyMs: number): void {\n    this.metrics.totalAnalyses++;\n\n    if (success) {\n      this.metrics.successfulAnalyses++;\n    } else {\n      this.metrics.failedAnalyses++;\n    }\n\n    // Update average analysis time\n    const totalTime =\n      this.metrics.averageAnalysisTime * (this.metrics.totalAnalyses - 1) +\n      latencyMs;\n    this.metrics.averageAnalysisTime = totalTime / this.metrics.totalAnalyses;\n  }\n\n  private generateCorrelationId(): string {\n    return `meta-${Date.now()}-${Math.random().toString(36).substring(2, 11)}`;\n  }\n\n  private generateAnalysisId(): string {\n    return `analysis-${Date.now()}-${Math.random()\n      .toString(36)\n      .substring(2, 11)}`;\n  }\n\n  private generatePatternId(): string {\n    return `pattern-${Date.now()}-${Math.random()\n      .toString(36)\n      .substring(2, 11)}`;\n  }\n\n  private generateFeedbackId(): string {\n    return `feedback-${Date.now()}-${Math.random()\n      .toString(36)\n      .substring(2, 11)}`;\n  }\n}\n\n// Export types for external use\nexport {\n  type ExecutionAnalysisResult,\n  type ExecutionFeedback,\n  type FailurePattern,\n  type KiroExecutionData,\n  type MetaMonitorConfig,\n};\n"],"version":3}
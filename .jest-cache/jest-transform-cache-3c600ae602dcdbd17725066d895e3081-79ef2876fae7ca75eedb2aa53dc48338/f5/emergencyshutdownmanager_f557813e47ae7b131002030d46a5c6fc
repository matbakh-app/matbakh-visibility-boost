c03cb57b65d0bc2fc7a317c4ac8aae45
"use strict";
/**
 * Emergency Shutdown Manager for Hybrid Routing
 *
 * Provides emergency shutdown capabilities for the Bedrock Support Mode
 * hybrid routing system. Enables rapid response to security incidents,
 * system failures, or compliance violations.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmergencyShutdownManager = void 0;
const ai_feature_flags_1 = require("./ai-feature-flags");
const audit_trail_system_1 = require("./audit-trail-system");
const circuit_breaker_1 = require("./circuit-breaker");
/**
 * Emergency Shutdown Manager
 *
 * Manages emergency shutdown procedures for the hybrid routing system.
 * Provides rapid response capabilities for critical incidents.
 */
class EmergencyShutdownManager {
    config;
    status;
    featureFlags;
    auditTrail;
    circuitBreaker;
    shutdownHistory = [];
    recoveryInterval;
    // Monitoring metrics
    metrics = {
        errorRate: 0,
        latencyMs: 0,
        costEuroPerHour: 0,
        consecutiveFailures: 0,
        lastHealthCheck: new Date(),
    };
    constructor(config = {}, auditTrail) {
        this.config = {
            enableAutoShutdown: true,
            shutdownThresholds: {
                errorRate: 0.1, // 10% error rate
                latencyMs: 5000, // 5 seconds
                costEuroPerHour: 100, // â‚¬100 per hour
                consecutiveFailures: 5, // 5 consecutive failures
            },
            notificationChannels: {},
            recoveryConfig: {
                autoRecoveryEnabled: true,
                recoveryDelayMs: 300000, // 5 minutes
                healthCheckIntervalMs: 30000, // 30 seconds
                maxRecoveryAttempts: 3,
            },
            ...config,
        };
        this.status = {
            isShutdown: false,
            scope: null,
            reason: null,
            timestamp: null,
            triggeredBy: null,
            affectedComponents: [],
            recoveryStatus: {
                inProgress: false,
                attempts: 0,
                lastAttempt: null,
                nextAttempt: null,
            },
        };
        this.featureFlags = new ai_feature_flags_1.AiFeatureFlags();
        this.auditTrail =
            auditTrail ||
                new audit_trail_system_1.AuditTrailSystem({
                    complianceMode: "strict",
                    enableIntegrityChecking: true,
                    retentionDays: 2555,
                });
        this.circuitBreaker = new circuit_breaker_1.CircuitBreaker({
            failureThreshold: 5,
            recoveryTimeout: 60000,
            halfOpenMaxCalls: 2,
        });
    }
    /**
     * Trigger emergency shutdown
     */
    async triggerShutdown(scope, reason, triggeredBy = "manual", metadata) {
        const eventId = this.generateEventId();
        // Create shutdown event
        const event = {
            eventId,
            scope,
            reason,
            triggeredBy,
            timestamp: new Date(),
            metadata: {
                errorRate: this.metrics.errorRate,
                latencyMs: this.metrics.latencyMs,
                costEuro: this.metrics.costEuroPerHour,
                consecutiveFailures: this.metrics.consecutiveFailures,
                additionalInfo: metadata,
            },
            affectedComponents: this.getAffectedComponents(scope),
            notificationsSent: false,
        };
        // Update status
        this.status = {
            isShutdown: true,
            scope,
            reason,
            timestamp: new Date(),
            triggeredBy,
            affectedComponents: event.affectedComponents,
            recoveryStatus: {
                inProgress: false,
                attempts: 0,
                lastAttempt: null,
                nextAttempt: this.config.recoveryConfig.autoRecoveryEnabled
                    ? new Date(Date.now() + this.config.recoveryConfig.recoveryDelayMs)
                    : null,
            },
        };
        // Execute shutdown procedures
        await this.executeShutdownProcedures(scope);
        // Send notifications
        await this.sendNotifications(event);
        event.notificationsSent = true;
        // Log to audit trail
        await this.auditTrail.logEvent({
            eventType: "emergency_shutdown",
            requestId: eventId,
            provider: "bedrock",
            complianceStatus: "compliant",
            metadata: {
                scope,
                reason,
                triggeredBy,
                affectedComponents: event.affectedComponents,
            },
        });
        // Add to history
        this.shutdownHistory.push(event);
        // Start recovery process if enabled
        if (this.config.recoveryConfig.autoRecoveryEnabled) {
            this.startRecoveryProcess();
        }
        return event;
    }
    /**
     * Execute shutdown procedures for specified scope
     */
    async executeShutdownProcedures(scope) {
        switch (scope) {
            case "all":
                await this.shutdownAll();
                break;
            case "direct_bedrock":
                await this.shutdownDirectBedrock();
                break;
            case "mcp":
                await this.shutdownMCP();
                break;
            case "intelligent_router":
                await this.shutdownIntelligentRouter();
                break;
            case "support_mode":
                await this.shutdownSupportMode();
                break;
        }
    }
    /**
     * Shutdown all hybrid routing components
     */
    async shutdownAll() {
        // Disable all feature flags
        await this.disableFeatureFlag("ENABLE_BEDROCK_SUPPORT_MODE");
        await this.disableFeatureFlag("ENABLE_INTELLIGENT_ROUTING");
        await this.disableFeatureFlag("ENABLE_DIRECT_BEDROCK_FALLBACK");
        // Open circuit breakers
        this.circuitBreaker.forceOpen("bedrock");
        this.circuitBreaker.forceOpen("mcp");
    }
    /**
     * Shutdown direct Bedrock path only
     */
    async shutdownDirectBedrock() {
        await this.disableFeatureFlag("ENABLE_DIRECT_BEDROCK_FALLBACK");
        this.circuitBreaker.forceOpen("bedrock");
    }
    /**
     * Shutdown MCP path only
     */
    async shutdownMCP() {
        this.circuitBreaker.forceOpen("mcp");
    }
    /**
     * Shutdown intelligent routing (fallback to MCP only)
     */
    async shutdownIntelligentRouter() {
        await this.disableFeatureFlag("ENABLE_INTELLIGENT_ROUTING");
    }
    /**
     * Shutdown entire support mode
     */
    async shutdownSupportMode() {
        await this.disableFeatureFlag("ENABLE_BEDROCK_SUPPORT_MODE");
        this.circuitBreaker.forceOpen("bedrock");
    }
    /**
     * Disable feature flag
     */
    async disableFeatureFlag(flag) {
        // In production, this would update the feature flag service
        // For now, we just log the action
        await this.auditTrail.logEvent({
            eventType: "feature_flag_disabled",
            requestId: this.generateEventId(),
            provider: "bedrock",
            complianceStatus: "compliant",
            metadata: {
                flag,
                reason: "emergency_shutdown",
            },
        });
    }
    /**
     * Send notifications about emergency shutdown
     */
    async sendNotifications(event) {
        const message = this.formatNotificationMessage(event);
        // Send to configured channels
        if (this.config.notificationChannels.slack) {
            await this.sendSlackNotification(this.config.notificationChannels.slack, message);
        }
        if (this.config.notificationChannels.email) {
            await this.sendEmailNotification(this.config.notificationChannels.email, message);
        }
        if (this.config.notificationChannels.pagerduty) {
            await this.sendPagerDutyNotification(this.config.notificationChannels.pagerduty, message);
        }
    }
    /**
     * Format notification message
     */
    formatNotificationMessage(event) {
        return `
ðŸš¨ EMERGENCY SHUTDOWN TRIGGERED ðŸš¨

Event ID: ${event.eventId}
Scope: ${event.scope}
Reason: ${event.reason}
Triggered By: ${event.triggeredBy}
Timestamp: ${event.timestamp.toISOString()}

Affected Components:
${event.affectedComponents.map((c) => `- ${c}`).join("\n")}

Metrics:
- Error Rate: ${(event.metadata.errorRate || 0) * 100}%
- Latency: ${event.metadata.latencyMs || 0}ms
- Cost: â‚¬${event.metadata.costEuro || 0}/hour
- Consecutive Failures: ${event.metadata.consecutiveFailures || 0}

Recovery Status:
${this.config.recoveryConfig.autoRecoveryEnabled
            ? `Auto-recovery enabled. Next attempt: ${this.status.recoveryStatus.nextAttempt?.toISOString() || "N/A"}`
            : "Auto-recovery disabled. Manual intervention required."}

Action Required:
${this.getActionRequiredMessage(event)}
    `.trim();
    }
    /**
     * Get action required message based on event
     */
    getActionRequiredMessage(event) {
        switch (event.reason) {
            case "security_incident":
                return "Immediate security review required. Do not restart until incident is resolved.";
            case "compliance_violation":
                return "Compliance review required. Verify GDPR and data residency requirements.";
            case "system_failure":
                return "System diagnostics required. Check logs and health status.";
            case "performance_degradation":
                return "Performance analysis required. Review metrics and optimize if needed.";
            case "cost_overrun":
                return "Cost analysis required. Review usage patterns and adjust budgets.";
            case "manual_intervention":
                return "Manual shutdown triggered. Review reason and restart when ready.";
            case "circuit_breaker_triggered":
                return "Circuit breaker triggered. System will attempt auto-recovery.";
            case "health_check_failure":
                return "Health check failed. Verify system components and dependencies.";
            default:
                return "Review system status and restart when safe.";
        }
    }
    /**
     * Send Slack notification
     */
    async sendSlackNotification(webhookUrl, message) {
        // In production, this would send to Slack
        console.log(`[Slack Notification] ${message}`);
    }
    /**
     * Send email notification
     */
    async sendEmailNotification(emails, message) {
        // In production, this would send emails
        console.log(`[Email Notification to ${emails.join(", ")}] ${message}`);
    }
    /**
     * Send PagerDuty notification
     */
    async sendPagerDutyNotification(integrationKey, message) {
        // In production, this would send to PagerDuty
        console.log(`[PagerDuty Notification] ${message}`);
    }
    /**
     * Start recovery process
     */
    startRecoveryProcess() {
        if (this.recoveryInterval) {
            clearInterval(this.recoveryInterval);
        }
        // Schedule first recovery attempt
        setTimeout(() => {
            this.attemptRecovery();
            // Start periodic health checks
            this.recoveryInterval = setInterval(() => {
                if (this.status.recoveryStatus.inProgress) {
                    this.performRecoveryHealthCheck();
                }
            }, this.config.recoveryConfig.healthCheckIntervalMs);
        }, this.config.recoveryConfig.recoveryDelayMs);
    }
    /**
     * Attempt recovery from shutdown
     */
    async attemptRecovery() {
        if (this.status.recoveryStatus.attempts >=
            this.config.recoveryConfig.maxRecoveryAttempts) {
            console.log("Max recovery attempts reached. Manual intervention required.");
            return;
        }
        this.status.recoveryStatus.inProgress = true;
        this.status.recoveryStatus.attempts++;
        this.status.recoveryStatus.lastAttempt = new Date();
        // Perform health checks
        const isHealthy = await this.performRecoveryHealthCheck();
        if (isHealthy) {
            await this.executeRecovery();
        }
        else {
            // Schedule next attempt
            this.status.recoveryStatus.nextAttempt = new Date(Date.now() + this.config.recoveryConfig.recoveryDelayMs);
            setTimeout(() => this.attemptRecovery(), this.config.recoveryConfig.recoveryDelayMs);
        }
    }
    /**
     * Perform health check during recovery
     */
    async performRecoveryHealthCheck() {
        // Check if conditions that triggered shutdown have been resolved
        const metricsHealthy = this.metrics.errorRate < this.config.shutdownThresholds.errorRate &&
            this.metrics.latencyMs < this.config.shutdownThresholds.latencyMs &&
            this.metrics.costEuroPerHour <
                this.config.shutdownThresholds.costEuroPerHour &&
            this.metrics.consecutiveFailures <
                this.config.shutdownThresholds.consecutiveFailures;
        return metricsHealthy;
    }
    /**
     * Execute recovery procedures
     */
    async executeRecovery() {
        // Re-enable feature flags based on shutdown scope
        if (this.status.scope) {
            await this.enableComponentsForScope(this.status.scope);
        }
        // Reset circuit breakers
        this.circuitBreaker.reset("bedrock");
        this.circuitBreaker.reset("mcp");
        // Update status
        this.status.isShutdown = false;
        this.status.recoveryStatus.inProgress = false;
        // Log recovery
        await this.auditTrail.logEvent({
            eventType: "emergency_recovery",
            requestId: this.generateEventId(),
            provider: "bedrock",
            complianceStatus: "compliant",
            metadata: {
                scope: this.status.scope,
                attempts: this.status.recoveryStatus.attempts,
            },
        });
        // Clear recovery interval
        if (this.recoveryInterval) {
            clearInterval(this.recoveryInterval);
            this.recoveryInterval = undefined;
        }
    }
    /**
     * Enable components for recovery scope
     */
    async enableComponentsForScope(scope) {
        switch (scope) {
            case "all":
            case "support_mode":
                await this.enableFeatureFlag("ENABLE_BEDROCK_SUPPORT_MODE");
                await this.enableFeatureFlag("ENABLE_INTELLIGENT_ROUTING");
                await this.enableFeatureFlag("ENABLE_DIRECT_BEDROCK_FALLBACK");
                break;
            case "direct_bedrock":
                await this.enableFeatureFlag("ENABLE_DIRECT_BEDROCK_FALLBACK");
                break;
            case "intelligent_router":
                await this.enableFeatureFlag("ENABLE_INTELLIGENT_ROUTING");
                break;
            case "mcp":
                // MCP recovery handled by circuit breaker reset
                break;
        }
    }
    /**
     * Enable feature flag
     */
    async enableFeatureFlag(flag) {
        await this.auditTrail.logEvent({
            eventType: "feature_flag_enabled",
            requestId: this.generateEventId(),
            provider: "bedrock",
            complianceStatus: "compliant",
            metadata: {
                flag,
                reason: "emergency_recovery",
            },
        });
    }
    /**
     * Update metrics for automatic shutdown monitoring
     */
    updateMetrics(metrics) {
        this.metrics = { ...this.metrics, ...metrics };
        // Check if automatic shutdown should be triggered
        if (this.config.enableAutoShutdown && !this.status.isShutdown) {
            this.checkAutomaticShutdownConditions();
        }
    }
    /**
     * Check if automatic shutdown conditions are met
     */
    checkAutomaticShutdownConditions() {
        const thresholds = this.config.shutdownThresholds;
        if (this.metrics.errorRate >= thresholds.errorRate) {
            this.triggerShutdown("all", "performance_degradation", "automatic", {
                trigger: "error_rate_threshold",
                value: this.metrics.errorRate,
                threshold: thresholds.errorRate,
            });
        }
        else if (this.metrics.latencyMs >= thresholds.latencyMs) {
            this.triggerShutdown("all", "performance_degradation", "automatic", {
                trigger: "latency_threshold",
                value: this.metrics.latencyMs,
                threshold: thresholds.latencyMs,
            });
        }
        else if (this.metrics.costEuroPerHour >= thresholds.costEuroPerHour) {
            this.triggerShutdown("all", "cost_overrun", "automatic", {
                trigger: "cost_threshold",
                value: this.metrics.costEuroPerHour,
                threshold: thresholds.costEuroPerHour,
            });
        }
        else if (this.metrics.consecutiveFailures >= thresholds.consecutiveFailures) {
            this.triggerShutdown("all", "system_failure", "automatic", {
                trigger: "consecutive_failures",
                value: this.metrics.consecutiveFailures,
                threshold: thresholds.consecutiveFailures,
            });
        }
    }
    /**
     * Get current shutdown status
     */
    getStatus() {
        return { ...this.status };
    }
    /**
     * Get shutdown history
     */
    getHistory() {
        return [...this.shutdownHistory];
    }
    /**
     * Get affected components for scope
     */
    getAffectedComponents(scope) {
        const components = {
            all: [
                "Direct Bedrock Client",
                "MCP Router",
                "Intelligent Router",
                "Support Mode",
            ],
            direct_bedrock: ["Direct Bedrock Client"],
            mcp: ["MCP Router"],
            intelligent_router: ["Intelligent Router"],
            support_mode: [
                "Direct Bedrock Client",
                "MCP Router",
                "Intelligent Router",
                "Support Mode",
            ],
        };
        return components[scope] || [];
    }
    /**
     * Generate unique event ID
     */
    generateEventId() {
        return `emergency-${Date.now()}-${Math.random()
            .toString(36)
            .substring(2, 11)}`;
    }
    /**
     * Cleanup resources
     */
    cleanup() {
        if (this.recoveryInterval) {
            clearInterval(this.recoveryInterval);
            this.recoveryInterval = undefined;
        }
    }
}
exports.EmergencyShutdownManager = EmergencyShutdownManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/emergency-shutdown-manager.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/emergency-shutdown-manager.ts"],"sourcesContent":["/**\n * Emergency Shutdown Manager for Hybrid Routing\n *\n * Provides emergency shutdown capabilities for the Bedrock Support Mode\n * hybrid routing system. Enables rapid response to security incidents,\n * system failures, or compliance violations.\n */\n\nimport { AiFeatureFlags } from \"./ai-feature-flags\";\nimport { AuditTrailSystem } from \"./audit-trail-system\";\nimport { CircuitBreaker } from \"./circuit-breaker\";\n\n// Emergency Shutdown Reasons\nexport type EmergencyShutdownReason =\n  | \"security_incident\"\n  | \"compliance_violation\"\n  | \"system_failure\"\n  | \"performance_degradation\"\n  | \"cost_overrun\"\n  | \"manual_intervention\"\n  | \"circuit_breaker_triggered\"\n  | \"health_check_failure\";\n\n// Emergency Shutdown Scope\nexport type EmergencyShutdownScope =\n  | \"all\" // Shutdown entire hybrid routing system\n  | \"direct_bedrock\" // Shutdown only direct Bedrock path\n  | \"mcp\" // Shutdown only MCP path\n  | \"intelligent_router\" // Shutdown intelligent routing (fallback to MCP only)\n  | \"support_mode\"; // Shutdown entire support mode\n\n// Emergency Shutdown Configuration\nexport interface EmergencyShutdownConfig {\n  enableAutoShutdown: boolean; // Enable automatic shutdown on critical events\n  shutdownThresholds: {\n    errorRate: number; // Error rate threshold (e.g., 0.1 = 10%)\n    latencyMs: number; // Latency threshold in milliseconds\n    costEuroPerHour: number; // Cost threshold per hour\n    consecutiveFailures: number; // Consecutive failures before shutdown\n  };\n  notificationChannels: {\n    slack?: string; // Slack webhook URL\n    email?: string[]; // Email addresses\n    pagerduty?: string; // PagerDuty integration key\n  };\n  recoveryConfig: {\n    autoRecoveryEnabled: boolean; // Enable automatic recovery\n    recoveryDelayMs: number; // Delay before attempting recovery\n    healthCheckIntervalMs: number; // Health check interval during recovery\n    maxRecoveryAttempts: number; // Maximum recovery attempts\n  };\n}\n\n// Emergency Shutdown Status\nexport interface EmergencyShutdownStatus {\n  isShutdown: boolean;\n  scope: EmergencyShutdownScope | null;\n  reason: EmergencyShutdownReason | null;\n  timestamp: Date | null;\n  triggeredBy: \"automatic\" | \"manual\" | null;\n  affectedComponents: string[];\n  recoveryStatus: {\n    inProgress: boolean;\n    attempts: number;\n    lastAttempt: Date | null;\n    nextAttempt: Date | null;\n  };\n}\n\n// Emergency Shutdown Event\nexport interface EmergencyShutdownEvent {\n  eventId: string;\n  scope: EmergencyShutdownScope;\n  reason: EmergencyShutdownReason;\n  triggeredBy: \"automatic\" | \"manual\";\n  timestamp: Date;\n  metadata: {\n    errorRate?: number;\n    latencyMs?: number;\n    costEuro?: number;\n    consecutiveFailures?: number;\n    additionalInfo?: Record<string, any>;\n  };\n  affectedComponents: string[];\n  notificationsSent: boolean;\n}\n\n/**\n * Emergency Shutdown Manager\n *\n * Manages emergency shutdown procedures for the hybrid routing system.\n * Provides rapid response capabilities for critical incidents.\n */\nexport class EmergencyShutdownManager {\n  private config: EmergencyShutdownConfig;\n  private status: EmergencyShutdownStatus;\n  private featureFlags: AiFeatureFlags;\n  private auditTrail: AuditTrailSystem;\n  private circuitBreaker: CircuitBreaker;\n  private shutdownHistory: EmergencyShutdownEvent[] = [];\n  private recoveryInterval?: NodeJS.Timeout;\n\n  // Monitoring metrics\n  private metrics = {\n    errorRate: 0,\n    latencyMs: 0,\n    costEuroPerHour: 0,\n    consecutiveFailures: 0,\n    lastHealthCheck: new Date(),\n  };\n\n  constructor(\n    config: Partial<EmergencyShutdownConfig> = {},\n    auditTrail?: AuditTrailSystem\n  ) {\n    this.config = {\n      enableAutoShutdown: true,\n      shutdownThresholds: {\n        errorRate: 0.1, // 10% error rate\n        latencyMs: 5000, // 5 seconds\n        costEuroPerHour: 100, // €100 per hour\n        consecutiveFailures: 5, // 5 consecutive failures\n      },\n      notificationChannels: {},\n      recoveryConfig: {\n        autoRecoveryEnabled: true,\n        recoveryDelayMs: 300000, // 5 minutes\n        healthCheckIntervalMs: 30000, // 30 seconds\n        maxRecoveryAttempts: 3,\n      },\n      ...config,\n    };\n\n    this.status = {\n      isShutdown: false,\n      scope: null,\n      reason: null,\n      timestamp: null,\n      triggeredBy: null,\n      affectedComponents: [],\n      recoveryStatus: {\n        inProgress: false,\n        attempts: 0,\n        lastAttempt: null,\n        nextAttempt: null,\n      },\n    };\n\n    this.featureFlags = new AiFeatureFlags();\n    this.auditTrail =\n      auditTrail ||\n      new AuditTrailSystem({\n        complianceMode: \"strict\",\n        enableIntegrityChecking: true,\n        retentionDays: 2555,\n      });\n    this.circuitBreaker = new CircuitBreaker({\n      failureThreshold: 5,\n      recoveryTimeout: 60000,\n      halfOpenMaxCalls: 2,\n    });\n  }\n\n  /**\n   * Trigger emergency shutdown\n   */\n  async triggerShutdown(\n    scope: EmergencyShutdownScope,\n    reason: EmergencyShutdownReason,\n    triggeredBy: \"automatic\" | \"manual\" = \"manual\",\n    metadata?: Record<string, any>\n  ): Promise<EmergencyShutdownEvent> {\n    const eventId = this.generateEventId();\n\n    // Create shutdown event\n    const event: EmergencyShutdownEvent = {\n      eventId,\n      scope,\n      reason,\n      triggeredBy,\n      timestamp: new Date(),\n      metadata: {\n        errorRate: this.metrics.errorRate,\n        latencyMs: this.metrics.latencyMs,\n        costEuro: this.metrics.costEuroPerHour,\n        consecutiveFailures: this.metrics.consecutiveFailures,\n        additionalInfo: metadata,\n      },\n      affectedComponents: this.getAffectedComponents(scope),\n      notificationsSent: false,\n    };\n\n    // Update status\n    this.status = {\n      isShutdown: true,\n      scope,\n      reason,\n      timestamp: new Date(),\n      triggeredBy,\n      affectedComponents: event.affectedComponents,\n      recoveryStatus: {\n        inProgress: false,\n        attempts: 0,\n        lastAttempt: null,\n        nextAttempt: this.config.recoveryConfig.autoRecoveryEnabled\n          ? new Date(Date.now() + this.config.recoveryConfig.recoveryDelayMs)\n          : null,\n      },\n    };\n\n    // Execute shutdown procedures\n    await this.executeShutdownProcedures(scope);\n\n    // Send notifications\n    await this.sendNotifications(event);\n    event.notificationsSent = true;\n\n    // Log to audit trail\n    await this.auditTrail.logEvent({\n      eventType: \"emergency_shutdown\",\n      requestId: eventId,\n      provider: \"bedrock\",\n      complianceStatus: \"compliant\",\n      metadata: {\n        scope,\n        reason,\n        triggeredBy,\n        affectedComponents: event.affectedComponents,\n      },\n    });\n\n    // Add to history\n    this.shutdownHistory.push(event);\n\n    // Start recovery process if enabled\n    if (this.config.recoveryConfig.autoRecoveryEnabled) {\n      this.startRecoveryProcess();\n    }\n\n    return event;\n  }\n\n  /**\n   * Execute shutdown procedures for specified scope\n   */\n  private async executeShutdownProcedures(\n    scope: EmergencyShutdownScope\n  ): Promise<void> {\n    switch (scope) {\n      case \"all\":\n        await this.shutdownAll();\n        break;\n      case \"direct_bedrock\":\n        await this.shutdownDirectBedrock();\n        break;\n      case \"mcp\":\n        await this.shutdownMCP();\n        break;\n      case \"intelligent_router\":\n        await this.shutdownIntelligentRouter();\n        break;\n      case \"support_mode\":\n        await this.shutdownSupportMode();\n        break;\n    }\n  }\n\n  /**\n   * Shutdown all hybrid routing components\n   */\n  private async shutdownAll(): Promise<void> {\n    // Disable all feature flags\n    await this.disableFeatureFlag(\"ENABLE_BEDROCK_SUPPORT_MODE\");\n    await this.disableFeatureFlag(\"ENABLE_INTELLIGENT_ROUTING\");\n    await this.disableFeatureFlag(\"ENABLE_DIRECT_BEDROCK_FALLBACK\");\n\n    // Open circuit breakers\n    this.circuitBreaker.forceOpen(\"bedrock\");\n    this.circuitBreaker.forceOpen(\"mcp\");\n  }\n\n  /**\n   * Shutdown direct Bedrock path only\n   */\n  private async shutdownDirectBedrock(): Promise<void> {\n    await this.disableFeatureFlag(\"ENABLE_DIRECT_BEDROCK_FALLBACK\");\n    this.circuitBreaker.forceOpen(\"bedrock\");\n  }\n\n  /**\n   * Shutdown MCP path only\n   */\n  private async shutdownMCP(): Promise<void> {\n    this.circuitBreaker.forceOpen(\"mcp\");\n  }\n\n  /**\n   * Shutdown intelligent routing (fallback to MCP only)\n   */\n  private async shutdownIntelligentRouter(): Promise<void> {\n    await this.disableFeatureFlag(\"ENABLE_INTELLIGENT_ROUTING\");\n  }\n\n  /**\n   * Shutdown entire support mode\n   */\n  private async shutdownSupportMode(): Promise<void> {\n    await this.disableFeatureFlag(\"ENABLE_BEDROCK_SUPPORT_MODE\");\n    this.circuitBreaker.forceOpen(\"bedrock\");\n  }\n\n  /**\n   * Disable feature flag\n   */\n  private async disableFeatureFlag(flag: string): Promise<void> {\n    // In production, this would update the feature flag service\n    // For now, we just log the action\n    await this.auditTrail.logEvent({\n      eventType: \"feature_flag_disabled\",\n      requestId: this.generateEventId(),\n      provider: \"bedrock\",\n      complianceStatus: \"compliant\",\n      metadata: {\n        flag,\n        reason: \"emergency_shutdown\",\n      },\n    });\n  }\n\n  /**\n   * Send notifications about emergency shutdown\n   */\n  private async sendNotifications(\n    event: EmergencyShutdownEvent\n  ): Promise<void> {\n    const message = this.formatNotificationMessage(event);\n\n    // Send to configured channels\n    if (this.config.notificationChannels.slack) {\n      await this.sendSlackNotification(\n        this.config.notificationChannels.slack,\n        message\n      );\n    }\n\n    if (this.config.notificationChannels.email) {\n      await this.sendEmailNotification(\n        this.config.notificationChannels.email,\n        message\n      );\n    }\n\n    if (this.config.notificationChannels.pagerduty) {\n      await this.sendPagerDutyNotification(\n        this.config.notificationChannels.pagerduty,\n        message\n      );\n    }\n  }\n\n  /**\n   * Format notification message\n   */\n  private formatNotificationMessage(event: EmergencyShutdownEvent): string {\n    return `\n🚨 EMERGENCY SHUTDOWN TRIGGERED 🚨\n\nEvent ID: ${event.eventId}\nScope: ${event.scope}\nReason: ${event.reason}\nTriggered By: ${event.triggeredBy}\nTimestamp: ${event.timestamp.toISOString()}\n\nAffected Components:\n${event.affectedComponents.map((c) => `- ${c}`).join(\"\\n\")}\n\nMetrics:\n- Error Rate: ${(event.metadata.errorRate || 0) * 100}%\n- Latency: ${event.metadata.latencyMs || 0}ms\n- Cost: €${event.metadata.costEuro || 0}/hour\n- Consecutive Failures: ${event.metadata.consecutiveFailures || 0}\n\nRecovery Status:\n${\n  this.config.recoveryConfig.autoRecoveryEnabled\n    ? `Auto-recovery enabled. Next attempt: ${\n        this.status.recoveryStatus.nextAttempt?.toISOString() || \"N/A\"\n      }`\n    : \"Auto-recovery disabled. Manual intervention required.\"\n}\n\nAction Required:\n${this.getActionRequiredMessage(event)}\n    `.trim();\n  }\n\n  /**\n   * Get action required message based on event\n   */\n  private getActionRequiredMessage(event: EmergencyShutdownEvent): string {\n    switch (event.reason) {\n      case \"security_incident\":\n        return \"Immediate security review required. Do not restart until incident is resolved.\";\n      case \"compliance_violation\":\n        return \"Compliance review required. Verify GDPR and data residency requirements.\";\n      case \"system_failure\":\n        return \"System diagnostics required. Check logs and health status.\";\n      case \"performance_degradation\":\n        return \"Performance analysis required. Review metrics and optimize if needed.\";\n      case \"cost_overrun\":\n        return \"Cost analysis required. Review usage patterns and adjust budgets.\";\n      case \"manual_intervention\":\n        return \"Manual shutdown triggered. Review reason and restart when ready.\";\n      case \"circuit_breaker_triggered\":\n        return \"Circuit breaker triggered. System will attempt auto-recovery.\";\n      case \"health_check_failure\":\n        return \"Health check failed. Verify system components and dependencies.\";\n      default:\n        return \"Review system status and restart when safe.\";\n    }\n  }\n\n  /**\n   * Send Slack notification\n   */\n  private async sendSlackNotification(\n    webhookUrl: string,\n    message: string\n  ): Promise<void> {\n    // In production, this would send to Slack\n    console.log(`[Slack Notification] ${message}`);\n  }\n\n  /**\n   * Send email notification\n   */\n  private async sendEmailNotification(\n    emails: string[],\n    message: string\n  ): Promise<void> {\n    // In production, this would send emails\n    console.log(`[Email Notification to ${emails.join(\", \")}] ${message}`);\n  }\n\n  /**\n   * Send PagerDuty notification\n   */\n  private async sendPagerDutyNotification(\n    integrationKey: string,\n    message: string\n  ): Promise<void> {\n    // In production, this would send to PagerDuty\n    console.log(`[PagerDuty Notification] ${message}`);\n  }\n\n  /**\n   * Start recovery process\n   */\n  private startRecoveryProcess(): void {\n    if (this.recoveryInterval) {\n      clearInterval(this.recoveryInterval);\n    }\n\n    // Schedule first recovery attempt\n    setTimeout(() => {\n      this.attemptRecovery();\n\n      // Start periodic health checks\n      this.recoveryInterval = setInterval(() => {\n        if (this.status.recoveryStatus.inProgress) {\n          this.performRecoveryHealthCheck();\n        }\n      }, this.config.recoveryConfig.healthCheckIntervalMs);\n    }, this.config.recoveryConfig.recoveryDelayMs);\n  }\n\n  /**\n   * Attempt recovery from shutdown\n   */\n  private async attemptRecovery(): Promise<void> {\n    if (\n      this.status.recoveryStatus.attempts >=\n      this.config.recoveryConfig.maxRecoveryAttempts\n    ) {\n      console.log(\n        \"Max recovery attempts reached. Manual intervention required.\"\n      );\n      return;\n    }\n\n    this.status.recoveryStatus.inProgress = true;\n    this.status.recoveryStatus.attempts++;\n    this.status.recoveryStatus.lastAttempt = new Date();\n\n    // Perform health checks\n    const isHealthy = await this.performRecoveryHealthCheck();\n\n    if (isHealthy) {\n      await this.executeRecovery();\n    } else {\n      // Schedule next attempt\n      this.status.recoveryStatus.nextAttempt = new Date(\n        Date.now() + this.config.recoveryConfig.recoveryDelayMs\n      );\n      setTimeout(\n        () => this.attemptRecovery(),\n        this.config.recoveryConfig.recoveryDelayMs\n      );\n    }\n  }\n\n  /**\n   * Perform health check during recovery\n   */\n  private async performRecoveryHealthCheck(): Promise<boolean> {\n    // Check if conditions that triggered shutdown have been resolved\n    const metricsHealthy =\n      this.metrics.errorRate < this.config.shutdownThresholds.errorRate &&\n      this.metrics.latencyMs < this.config.shutdownThresholds.latencyMs &&\n      this.metrics.costEuroPerHour <\n        this.config.shutdownThresholds.costEuroPerHour &&\n      this.metrics.consecutiveFailures <\n        this.config.shutdownThresholds.consecutiveFailures;\n\n    return metricsHealthy;\n  }\n\n  /**\n   * Execute recovery procedures\n   */\n  private async executeRecovery(): Promise<void> {\n    // Re-enable feature flags based on shutdown scope\n    if (this.status.scope) {\n      await this.enableComponentsForScope(this.status.scope);\n    }\n\n    // Reset circuit breakers\n    this.circuitBreaker.reset(\"bedrock\");\n    this.circuitBreaker.reset(\"mcp\");\n\n    // Update status\n    this.status.isShutdown = false;\n    this.status.recoveryStatus.inProgress = false;\n\n    // Log recovery\n    await this.auditTrail.logEvent({\n      eventType: \"emergency_recovery\",\n      requestId: this.generateEventId(),\n      provider: \"bedrock\",\n      complianceStatus: \"compliant\",\n      metadata: {\n        scope: this.status.scope,\n        attempts: this.status.recoveryStatus.attempts,\n      },\n    });\n\n    // Clear recovery interval\n    if (this.recoveryInterval) {\n      clearInterval(this.recoveryInterval);\n      this.recoveryInterval = undefined;\n    }\n  }\n\n  /**\n   * Enable components for recovery scope\n   */\n  private async enableComponentsForScope(\n    scope: EmergencyShutdownScope\n  ): Promise<void> {\n    switch (scope) {\n      case \"all\":\n      case \"support_mode\":\n        await this.enableFeatureFlag(\"ENABLE_BEDROCK_SUPPORT_MODE\");\n        await this.enableFeatureFlag(\"ENABLE_INTELLIGENT_ROUTING\");\n        await this.enableFeatureFlag(\"ENABLE_DIRECT_BEDROCK_FALLBACK\");\n        break;\n      case \"direct_bedrock\":\n        await this.enableFeatureFlag(\"ENABLE_DIRECT_BEDROCK_FALLBACK\");\n        break;\n      case \"intelligent_router\":\n        await this.enableFeatureFlag(\"ENABLE_INTELLIGENT_ROUTING\");\n        break;\n      case \"mcp\":\n        // MCP recovery handled by circuit breaker reset\n        break;\n    }\n  }\n\n  /**\n   * Enable feature flag\n   */\n  private async enableFeatureFlag(flag: string): Promise<void> {\n    await this.auditTrail.logEvent({\n      eventType: \"feature_flag_enabled\",\n      requestId: this.generateEventId(),\n      provider: \"bedrock\",\n      complianceStatus: \"compliant\",\n      metadata: {\n        flag,\n        reason: \"emergency_recovery\",\n      },\n    });\n  }\n\n  /**\n   * Update metrics for automatic shutdown monitoring\n   */\n  updateMetrics(metrics: Partial<typeof this.metrics>): void {\n    this.metrics = { ...this.metrics, ...metrics };\n\n    // Check if automatic shutdown should be triggered\n    if (this.config.enableAutoShutdown && !this.status.isShutdown) {\n      this.checkAutomaticShutdownConditions();\n    }\n  }\n\n  /**\n   * Check if automatic shutdown conditions are met\n   */\n  private checkAutomaticShutdownConditions(): void {\n    const thresholds = this.config.shutdownThresholds;\n\n    if (this.metrics.errorRate >= thresholds.errorRate) {\n      this.triggerShutdown(\"all\", \"performance_degradation\", \"automatic\", {\n        trigger: \"error_rate_threshold\",\n        value: this.metrics.errorRate,\n        threshold: thresholds.errorRate,\n      });\n    } else if (this.metrics.latencyMs >= thresholds.latencyMs) {\n      this.triggerShutdown(\"all\", \"performance_degradation\", \"automatic\", {\n        trigger: \"latency_threshold\",\n        value: this.metrics.latencyMs,\n        threshold: thresholds.latencyMs,\n      });\n    } else if (this.metrics.costEuroPerHour >= thresholds.costEuroPerHour) {\n      this.triggerShutdown(\"all\", \"cost_overrun\", \"automatic\", {\n        trigger: \"cost_threshold\",\n        value: this.metrics.costEuroPerHour,\n        threshold: thresholds.costEuroPerHour,\n      });\n    } else if (\n      this.metrics.consecutiveFailures >= thresholds.consecutiveFailures\n    ) {\n      this.triggerShutdown(\"all\", \"system_failure\", \"automatic\", {\n        trigger: \"consecutive_failures\",\n        value: this.metrics.consecutiveFailures,\n        threshold: thresholds.consecutiveFailures,\n      });\n    }\n  }\n\n  /**\n   * Get current shutdown status\n   */\n  getStatus(): EmergencyShutdownStatus {\n    return { ...this.status };\n  }\n\n  /**\n   * Get shutdown history\n   */\n  getHistory(): EmergencyShutdownEvent[] {\n    return [...this.shutdownHistory];\n  }\n\n  /**\n   * Get affected components for scope\n   */\n  private getAffectedComponents(scope: EmergencyShutdownScope): string[] {\n    const components: Record<EmergencyShutdownScope, string[]> = {\n      all: [\n        \"Direct Bedrock Client\",\n        \"MCP Router\",\n        \"Intelligent Router\",\n        \"Support Mode\",\n      ],\n      direct_bedrock: [\"Direct Bedrock Client\"],\n      mcp: [\"MCP Router\"],\n      intelligent_router: [\"Intelligent Router\"],\n      support_mode: [\n        \"Direct Bedrock Client\",\n        \"MCP Router\",\n        \"Intelligent Router\",\n        \"Support Mode\",\n      ],\n    };\n\n    return components[scope] || [];\n  }\n\n  /**\n   * Generate unique event ID\n   */\n  private generateEventId(): string {\n    return `emergency-${Date.now()}-${Math.random()\n      .toString(36)\n      .substring(2, 11)}`;\n  }\n\n  /**\n   * Cleanup resources\n   */\n  cleanup(): void {\n    if (this.recoveryInterval) {\n      clearInterval(this.recoveryInterval);\n      this.recoveryInterval = undefined;\n    }\n  }\n}\n"],"version":3}
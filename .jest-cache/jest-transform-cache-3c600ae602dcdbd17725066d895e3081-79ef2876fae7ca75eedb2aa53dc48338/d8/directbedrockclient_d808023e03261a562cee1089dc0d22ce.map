{"version":3,"names":["cov_2ng8e89pfv","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","client_bedrock_runtime_1","require","ai_feature_flags_1","audit_trail_system_1","circuit_breaker_1","emergency_operations_performance_monitor_1","gdpr_hybrid_compliance_validator_1","kms_encryption_service_1","pii_toxicity_detector_1","ssrf_protection_validator_1","DirectBedrockClient","constructor","config","modelConfigs","emergency","modelId","temperature","maxTokens","infrastructure","meta_monitor","implementation","standard","Object","assign","region","process","env","AWS_REGION","maxRetries","timeout","emergencyTimeout","criticalTimeout","enableCircuitBreaker","enableHealthMonitoring","enableComplianceChecks","client","BedrockRuntimeClient","maxAttempts","requestHandler","requestTimeout","circuitBreaker","CircuitBreaker","failureThreshold","recoveryTimeout","halfOpenMaxCalls","featureFlags","AiFeatureFlags","piiDetectionService","PIIToxicityDetectionService","enablePII","enableToxicity","enablePromptInjection","strictMode","redactionMode","confidenceThreshold","gdprValidator","GDPRHybridComplianceValidator","auditTrail","AuditTrailSystem","complianceMode","enableIntegrityChecking","retentionDays","kmsEncryption","KMSEncryptionService","keyAlias","KMS_KEY_ALIAS","enableKeyRotation","ssrfValidator","SSRFProtectionValidator","performanceMonitor","EmergencyOperationsPerformanceMonitor","emergencySlaThresholdMs","criticalSlaThresholdMs","successRateThreshold","rollingWindowMinutes","alertingEnabled","circuitBreakerEnabled","healthStatus","isHealthy","latencyMs","lastCheck","Date","consecutiveFailures","circuitBreakerState","startHealthMonitoring","executeSupportOperation","request","startTime","now","operationId","generateOperationId","piiDetectionResult","complianceValidation","isEnabled","Error","isOpen","validateOperationTimeout","operation","performPIIDetectionAndRedaction","performEnhancedComplianceChecks","response","execute","tslib_1","__awaiter","executeBedrockRequest","recordEmergencyOperation","_a","context","correlationId","priority","_b","updateHealthStatus","logEvent","eventType","requestId","provider","complianceStatus","metadata","tokensUsed","piiDetected","violations","length","piiRedacted","modifiedContent","gdprCompliant","success","text","toolCalls","costEuro","calculateCost","timestamp","redactionApplied","error","_c","message","_d","executeEmergencyOperation","prompt","executeCriticalOperation","tools","getHealthStatus","getEmergencyPerformanceStats","getCurrentPerformanceStats","isEmergencyPerformanceWithinSLA","isPerformanceWithinSLA","getEmergencyPerformanceReport","getPerformanceReport","getEmergencyPerformanceAlerts","limitHours","getRecentAlerts","isCriticalOperationsPerformanceWithinSLA","isEmergencyOperationsPerformanceWithinSLA","performHealthCheck","BEDROCK_ENDPOINT","NODE_ENV","details","isDev","updatePIIDetectionConfig","updateConfig","testPIIDetection","piiTokens","toxicityViolations","testToxicityDetection","promptInjectionViolations","testPromptInjectionDetection","piiFound","toxicityScore","promptInjectionDetected","detectPii","options","hasPii","piiTypes","detectedPii","processingRegion","trim","isEuRegion","startsWith","piiPatterns","pattern","confidence","match","regex","RegExp","source","flags","exec","push","value","startIndex","index","endIndex","Set","map","pii","result","consentId","dataSubject","processingPurpose","consentTracking","redactPii","detection","redactedText","redactionMap","sortedPii","sort","a","redactedValue","getRedactionPlaceholder","substring","unshift","original","redacted","restorePii","restoredText","redaction","reverse","replace","piiType","placeholders","EMAIL","PHONE","CREDIT_CARD","SSN","IBAN","NAME","ADDRESS","IP","API_KEY","TOKEN","getPIIDetectionStats","totalChecks","redactionsApplied","averageProcessingTime","encryptSensitiveData","data","encrypted","encrypt","plaintext","encryptionContext","dataType","userId","ciphertext","String","decryptSensitiveData","encryptedData","decrypted","decrypt","encryptPIIForStorage","piiData","encryptPII","decryptPIIFromStorage","encryptedPII","decryptPII","encryptOperationContextForAudit","encryptOperationContext","decryptOperationContextFromAudit","encryptedContext","decryptOperationContext","getKMSEncryptionService","validateUrlForSSRF","url","validateUrl","getSSRFProtectionValidator","updateSSRFProtectionConfig","addAllowedDomain","domain","removeAllowedDomain","getAllowedDomains","destroy","healthCheckInterval","clearInterval","modelConfig","getTimeoutForOperation","payload","anthropic_version","max_tokens","messages","role","content","mapToolsToBedrockFormat","system","getSystemMessageForOperation","command","streaming","InvokeModelWithResponseStreamCommand","contentType","accept","body","JSON","stringify","InvokeModelCommand","timeoutPromise","Promise","_","reject","setTimeout","race","send","parseBedrockResponse","tool","description","input_schema","properties","parameters","required","keys","systemMessages","input","output","parse","TextDecoder","decode","c","join","filter","tc","arguments","usage","input_tokens","_e","output_tokens","maxAllowed","safetyResult","performSafetyCheck","allowed","piiViolations","v","processingTimeMs","contentModified","originalLength","redactedLength","violationsRedacted","some","emergencyRedaction","redactPIIForEmergency","emergencyRedactionApplied","piiTokensRedacted","severity","errorMessage","routingPath","routeType","operationType","gdprValidation","validateBeforeRouting","reason","performLegacyComplianceChecks","auditLogged","emergencyRedactionPatterns","replacement","forEach","consentValid","validateGDPRConsent","tenant","isEUTenant","performOperationSpecificCompliance","logComplianceCheck","consentRecord","getConsentRecord","consentAge","getTime","maxConsentAge","aiProcessingConsent","console","dataRetentionConsent","tenantId","euTenantPatterns","test","containsCustomerData","containsPersonalData","containsProductionData","customerDataPatterns","personalDataPatterns","productionDataPatterns","auditEntry","toISOString","complianceChecks","piiDetection","containsPII","gdprConsent","dataResidency","operationSpecific","log","warn","validateGDPRConsentEnhanced","validationType","inputCostPer1k","outputCostPer1k","inputCost","outputCost","setInterval","Math","random","toString","totalDetections","totalRedactions","detectionsByType","averageConfidence","lastDetection","cleanup","exports"],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/direct-bedrock-client.ts"],"sourcesContent":["/**\n * Direct Bedrock Client - Bypasses MCP for Critical Support Operations\n *\n * This module provides direct AWS Bedrock SDK integration for time-critical\n * support operations that require < 5s (emergency) or < 10s (critical) latency.\n * It integrates with existing security, compliance, and circuit breaker systems.\n */\n\nimport {\n  BedrockRuntimeClient,\n  InvokeModelCommand,\n  InvokeModelWithResponseStreamCommand,\n} from \"@aws-sdk/client-bedrock-runtime\";\nimport { AiFeatureFlags } from \"./ai-feature-flags\";\nimport { AuditTrailSystem } from \"./audit-trail-system\";\nimport { CircuitBreaker } from \"./circuit-breaker\";\nimport { EmergencyOperationsPerformanceMonitor } from \"./emergency-operations-performance-monitor\";\nimport {\n  GDPRHybridComplianceValidator,\n  HybridRoutingPath,\n} from \"./gdpr-hybrid-compliance-validator\";\nimport { KMSEncryptionService } from \"./kms-encryption-service\";\nimport {\n  PIIToxicityDetectionService,\n  SafetyCheckResult,\n} from \"./safety/pii-toxicity-detector\";\nimport { SSRFProtectionValidator } from \"./ssrf-protection-validator\";\nimport { ToolSpec } from \"./types\";\n\n// Direct Bedrock Client Configuration\nexport interface DirectBedrockConfig {\n  region: string;\n  maxRetries: number;\n  timeout: number;\n  emergencyTimeout: number; // < 5s for emergency operations\n  criticalTimeout: number; // < 10s for critical operations\n  enableCircuitBreaker: boolean;\n  enableHealthMonitoring: boolean;\n  enableComplianceChecks: boolean;\n}\n\n// Operation Types for Routing Decisions\nexport type OperationType =\n  | \"emergency\"\n  | \"infrastructure\"\n  | \"meta_monitor\"\n  | \"implementation\"\n  | \"standard\";\n\nexport type OperationPriority = \"critical\" | \"high\" | \"medium\" | \"low\";\n\n// Support Operation Request\nexport interface SupportOperationRequest {\n  operation: OperationType;\n  priority: OperationPriority;\n  prompt: string;\n  context?: {\n    userId?: string;\n    tenant?: string;\n    correlationId?: string;\n    metadata?: Record<string, any>;\n  };\n  tools?: ToolSpec[];\n  streaming?: boolean;\n  maxTokens?: number;\n  temperature?: number;\n}\n\n// Support Operation Response\nexport interface SupportOperationResponse {\n  success: boolean;\n  text?: string;\n  toolCalls?: Array<{ name: string; arguments: any }>;\n  latencyMs: number;\n  tokensUsed?: { input: number; output: number };\n  costEuro?: number;\n  error?: string;\n  operationId: string;\n  timestamp: Date;\n  piiDetectionResult?: SafetyCheckResult;\n  piiDetected?: boolean;\n  redactionApplied?: boolean;\n  response?: string;\n  complianceValidation?: {\n    gdprCompliant: boolean;\n    piiRedacted: boolean;\n    auditLogged: boolean;\n  };\n}\n\n// Health Check Result\nexport interface DirectBedrockHealthCheck {\n  isHealthy: boolean;\n  latencyMs: number;\n  lastCheck: Date;\n  consecutiveFailures: number;\n  circuitBreakerState: \"closed\" | \"open\" | \"half-open\";\n  error?: string;\n}\n\n/**\n * Direct Bedrock Client for Critical Support Operations\n */\nexport class DirectBedrockClient {\n  private client: BedrockRuntimeClient;\n  private config: DirectBedrockConfig;\n  private circuitBreaker: CircuitBreaker;\n  private featureFlags: AiFeatureFlags;\n  private healthStatus: DirectBedrockHealthCheck;\n  private healthCheckInterval?: NodeJS.Timeout;\n  private piiDetectionService: PIIToxicityDetectionService;\n  private gdprValidator: GDPRHybridComplianceValidator;\n  private auditTrail: AuditTrailSystem;\n  private kmsEncryption: KMSEncryptionService;\n  private ssrfValidator: SSRFProtectionValidator;\n  private performanceMonitor: EmergencyOperationsPerformanceMonitor;\n\n  // Default model configurations for different operation types\n  private readonly modelConfigs = {\n    emergency: {\n      modelId: \"anthropic.claude-3-5-sonnet-20241022-v2:0\",\n      temperature: 0.1, // Low temperature for consistent emergency responses\n      maxTokens: 1024, // Smaller token limit for speed\n    },\n    infrastructure: {\n      modelId: \"anthropic.claude-3-5-sonnet-20241022-v2:0\",\n      temperature: 0.2,\n      maxTokens: 2048,\n    },\n    meta_monitor: {\n      modelId: \"anthropic.claude-3-5-sonnet-20241022-v2:0\",\n      temperature: 0.3,\n      maxTokens: 2048,\n    },\n    implementation: {\n      modelId: \"anthropic.claude-3-5-sonnet-20241022-v2:0\",\n      temperature: 0.4,\n      maxTokens: 4096,\n    },\n    standard: {\n      modelId: \"anthropic.claude-3-5-sonnet-20241022-v2:0\",\n      temperature: 0.7,\n      maxTokens: 4096,\n    },\n  };\n\n  constructor(config: Partial<DirectBedrockConfig> = {}) {\n    this.config = {\n      region: process.env.AWS_REGION || \"eu-central-1\",\n      maxRetries: 3,\n      timeout: 30000, // 30s default timeout\n      emergencyTimeout: 5000, // 5s for emergency operations\n      criticalTimeout: 10000, // 10s for critical operations\n      enableCircuitBreaker: true,\n      enableHealthMonitoring: true,\n      enableComplianceChecks: true,\n      ...config,\n    };\n\n    // Initialize AWS Bedrock Runtime Client\n    this.client = new BedrockRuntimeClient({\n      region: this.config.region,\n      maxAttempts: this.config.maxRetries,\n      requestHandler: {\n        requestTimeout: this.config.timeout,\n      },\n    });\n\n    // Initialize circuit breaker\n    this.circuitBreaker = new CircuitBreaker({\n      failureThreshold: 3, // Open after 3 failures\n      recoveryTimeout: 30000, // 30s recovery timeout\n      halfOpenMaxCalls: 2, // Max 2 calls in half-open state\n    });\n\n    // Initialize feature flags\n    this.featureFlags = new AiFeatureFlags();\n\n    // Initialize PII detection service with strict configuration for direct Bedrock\n    this.piiDetectionService = new PIIToxicityDetectionService({\n      enablePII: true,\n      enableToxicity: true,\n      enablePromptInjection: true,\n      strictMode: true, // Strict mode for direct Bedrock operations\n      redactionMode: \"MASK\", // Mask PII by default\n      confidenceThreshold: 0.7, // Lower threshold for better detection\n    });\n\n    // Initialize GDPR compliance validator\n    this.gdprValidator = new GDPRHybridComplianceValidator();\n\n    // Initialize audit trail system\n    this.auditTrail = new AuditTrailSystem({\n      complianceMode: \"strict\",\n      enableIntegrityChecking: true,\n      retentionDays: 2555, // 7 years for GDPR compliance\n    });\n\n    // Initialize KMS encryption service\n    this.kmsEncryption = new KMSEncryptionService(\n      {\n        region: this.config.region,\n        keyAlias: process.env.KMS_KEY_ALIAS || \"alias/matbakh-ai\",\n        enableKeyRotation: true,\n      },\n      this.auditTrail\n    );\n\n    // Initialize SSRF protection validator\n    this.ssrfValidator = new SSRFProtectionValidator({\n      auditTrail: this.auditTrail,\n    });\n\n    // Initialize emergency operations performance monitor\n    this.performanceMonitor = new EmergencyOperationsPerformanceMonitor(\n      {\n        emergencySlaThresholdMs: this.config.emergencyTimeout, // 5 seconds for emergency\n        criticalSlaThresholdMs: this.config.criticalTimeout, // 10 seconds for critical\n        successRateThreshold: 95, // 95% success rate requirement\n        rollingWindowMinutes: 60, // 1 hour rolling window\n        alertingEnabled: true,\n        circuitBreakerEnabled: this.config.enableCircuitBreaker,\n      },\n      this.auditTrail,\n      this.circuitBreaker\n    );\n\n    // Initialize health status\n    this.healthStatus = {\n      isHealthy: true,\n      latencyMs: 0,\n      lastCheck: new Date(),\n      consecutiveFailures: 0,\n      circuitBreakerState: \"closed\",\n    };\n\n    // Start health monitoring if enabled\n    if (this.config.enableHealthMonitoring) {\n      this.startHealthMonitoring();\n    }\n  }\n\n  /**\n   * Execute support operation with direct Bedrock access\n   */\n  async executeSupportOperation(\n    request: SupportOperationRequest\n  ): Promise<SupportOperationResponse> {\n    const startTime = Date.now();\n    const operationId = this.generateOperationId();\n    let piiDetectionResult: SafetyCheckResult | undefined;\n    let complianceValidation: SupportOperationResponse[\"complianceValidation\"];\n\n    try {\n      // Check if direct Bedrock is enabled\n      if (!this.featureFlags.isEnabled(\"ENABLE_DIRECT_BEDROCK_FALLBACK\")) {\n        throw new Error(\"Direct Bedrock access is disabled\");\n      }\n\n      // Check circuit breaker\n      if (\n        this.config.enableCircuitBreaker &&\n        this.circuitBreaker.isOpen(\"bedrock\")\n      ) {\n        throw new Error(\"Circuit breaker is open for Bedrock\");\n      }\n\n      // Validate operation timeout requirements\n      this.validateOperationTimeout(request.operation);\n\n      // Perform enhanced PII detection and redaction\n      piiDetectionResult = await this.performPIIDetectionAndRedaction(\n        request,\n        operationId\n      );\n\n      // Perform comprehensive compliance checks if enabled\n      if (this.config.enableComplianceChecks) {\n        complianceValidation = await this.performEnhancedComplianceChecks(\n          request,\n          operationId\n        );\n      }\n\n      // Execute the operation with circuit breaker protection\n      const response = await this.circuitBreaker.execute(\n        \"bedrock\",\n        async () => {\n          return await this.executeBedrockRequest(request, operationId);\n        }\n      );\n\n      const latencyMs = Date.now() - startTime;\n\n      // Track operation performance based on priority\n      if (request.operation === \"emergency\") {\n        await this.performanceMonitor.recordEmergencyOperation(\n          operationId,\n          latencyMs,\n          true, // success\n          request.operation,\n          request.context?.correlationId,\n          undefined, // no error\n          \"emergency\" // priority\n        );\n      } else if (request.priority === \"critical\") {\n        await this.performanceMonitor.recordEmergencyOperation(\n          operationId,\n          latencyMs,\n          true, // success\n          request.operation,\n          request.context?.correlationId,\n          undefined, // no error\n          \"critical\" // priority\n        );\n      }\n\n      // Update health status on success\n      this.updateHealthStatus(true, latencyMs);\n\n      // Log successful operation to audit trail\n      await this.auditTrail.logEvent({\n        eventType: \"direct_bedrock_operation\",\n        requestId: operationId,\n        provider: \"bedrock\",\n        complianceStatus: \"compliant\",\n        metadata: {\n          operation: request.operation,\n          priority: request.priority,\n          latencyMs,\n          tokensUsed: response.tokensUsed,\n          piiDetected: piiDetectionResult?.violations.length || 0,\n          piiRedacted: !!piiDetectionResult?.modifiedContent,\n          gdprCompliant: complianceValidation?.gdprCompliant || false,\n        },\n      });\n\n      return {\n        success: true,\n        text: response.text,\n        toolCalls: response.toolCalls,\n        latencyMs,\n        tokensUsed: response.tokensUsed,\n        costEuro: this.calculateCost(response.tokensUsed),\n        operationId,\n        timestamp: new Date(),\n        piiDetectionResult,\n        piiDetected: (piiDetectionResult?.violations.length || 0) > 0,\n        redactionApplied: !!piiDetectionResult?.modifiedContent,\n        response: response.text,\n        complianceValidation,\n      };\n    } catch (error) {\n      const latencyMs = Date.now() - startTime;\n\n      // Track operation performance based on priority\n      if (request.operation === \"emergency\") {\n        await this.performanceMonitor.recordEmergencyOperation(\n          operationId,\n          latencyMs,\n          false, // failure\n          request.operation,\n          request.context?.correlationId,\n          error instanceof Error ? error.message : \"Unknown error\",\n          \"emergency\" // priority\n        );\n      } else if (request.priority === \"critical\") {\n        await this.performanceMonitor.recordEmergencyOperation(\n          operationId,\n          latencyMs,\n          false, // failure\n          request.operation,\n          request.context?.correlationId,\n          error instanceof Error ? error.message : \"Unknown error\",\n          \"critical\" // priority\n        );\n      }\n\n      // Update health status on failure\n      this.updateHealthStatus(false, latencyMs, error as Error);\n\n      // Log failed operation to audit trail\n      await this.auditTrail.logEvent({\n        eventType: \"direct_bedrock_operation\",\n        requestId: operationId,\n        provider: \"bedrock\",\n        complianceStatus: \"violation\",\n        error: {\n          type: \"operation_error\",\n          message: error instanceof Error ? error.message : \"Unknown error\",\n        },\n        metadata: {\n          operation: request.operation,\n          priority: request.priority,\n          latencyMs,\n          piiDetected: piiDetectionResult?.violations.length || 0,\n        },\n      });\n\n      return {\n        success: false,\n        latencyMs,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        operationId,\n        timestamp: new Date(),\n        piiDetectionResult,\n        complianceValidation,\n      };\n    }\n  }\n\n  /**\n   * Execute emergency operation (< 5s latency requirement)\n   */\n  async executeEmergencyOperation(\n    prompt: string,\n    context?: SupportOperationRequest[\"context\"]\n  ): Promise<SupportOperationResponse> {\n    return this.executeSupportOperation({\n      operation: \"emergency\",\n      priority: \"critical\",\n      prompt,\n      context,\n      maxTokens: 1024, // Limit tokens for speed\n      temperature: 0.1, // Low temperature for consistency\n    });\n  }\n\n  /**\n   * Execute critical support operation (< 10s latency requirement)\n   */\n  async executeCriticalOperation(\n    prompt: string,\n    context?: SupportOperationRequest[\"context\"],\n    tools?: ToolSpec[]\n  ): Promise<SupportOperationResponse> {\n    return this.executeSupportOperation({\n      operation: \"infrastructure\",\n      priority: \"critical\",\n      prompt,\n      context,\n      tools,\n      maxTokens: 2048,\n      temperature: 0.2,\n    });\n  }\n\n  /**\n   * Get current health status\n   */\n  getHealthStatus(): DirectBedrockHealthCheck {\n    return { ...this.healthStatus };\n  }\n\n  /**\n   * Get emergency operations performance statistics\n   */\n  getEmergencyPerformanceStats() {\n    return this.performanceMonitor.getCurrentPerformanceStats();\n  }\n\n  /**\n   * Check if emergency operations are meeting SLA requirements (>95% within 5s)\n   */\n  isEmergencyPerformanceWithinSLA(): boolean {\n    return this.performanceMonitor.isPerformanceWithinSLA();\n  }\n\n  /**\n   * Get detailed emergency operations performance report\n   */\n  getEmergencyPerformanceReport() {\n    return this.performanceMonitor.getPerformanceReport();\n  }\n\n  /**\n   * Get recent emergency operations performance alerts\n   */\n  getEmergencyPerformanceAlerts(limitHours: number = 24) {\n    return this.performanceMonitor.getRecentAlerts(limitHours);\n  }\n\n  /**\n   * Check if critical operations are meeting SLA requirements (>95% within 10s)\n   */\n  isCriticalOperationsPerformanceWithinSLA(): boolean {\n    return this.performanceMonitor.isCriticalOperationsPerformanceWithinSLA();\n  }\n\n  /**\n   * Check if emergency operations specifically are meeting SLA requirements (>95% within 5s)\n   */\n  isEmergencyOperationsPerformanceWithinSLA(): boolean {\n    return this.performanceMonitor.isEmergencyOperationsPerformanceWithinSLA();\n  }\n\n  /**\n   * Perform health check\n   */\n  async performHealthCheck(): Promise<DirectBedrockHealthCheck> {\n    const startTime = Date.now();\n\n    try {\n      // Development environment safety check\n      if (\n        !process.env.BEDROCK_ENDPOINT &&\n        process.env.NODE_ENV === \"development\"\n      ) {\n        const latencyMs = Date.now() - startTime;\n        this.updateHealthStatus(true, latencyMs);\n\n        return {\n          ...this.healthStatus,\n          lastCheck: new Date(),\n          details: \"Development mode - Bedrock endpoint skipped\",\n        };\n      }\n\n      // Simple health check with minimal prompt\n      const response = await this.executeBedrockRequest(\n        {\n          operation: \"standard\",\n          priority: \"low\",\n          prompt: \"Health check: respond with 'OK'\",\n          maxTokens: 10,\n          temperature: 0,\n        },\n        \"health-check\"\n      );\n\n      const latencyMs = Date.now() - startTime;\n\n      this.updateHealthStatus(true, latencyMs);\n\n      return this.healthStatus;\n    } catch (error) {\n      const latencyMs = Date.now() - startTime;\n\n      // In development, don't fail hard on connection issues\n      const isDev = process.env.NODE_ENV === \"development\";\n\n      this.updateHealthStatus(!isDev, latencyMs, error as Error);\n\n      return this.healthStatus;\n    }\n  }\n\n  /**\n   * Update PII detection configuration\n   */\n  updatePIIDetectionConfig(config: {\n    enablePII?: boolean;\n    enableToxicity?: boolean;\n    enablePromptInjection?: boolean;\n    strictMode?: boolean;\n    redactionMode?: \"MASK\" | \"REMOVE\" | \"REPLACE\";\n    confidenceThreshold?: number;\n  }): void {\n    this.piiDetectionService.updateConfig(config);\n  }\n\n  /**\n   * Test PII detection without processing\n   */\n  async testPIIDetection(text: string): Promise<{\n    piiFound: boolean;\n    piiTokens: any[];\n    toxicityScore: number;\n    promptInjectionDetected: boolean;\n  }> {\n    const piiTokens = this.piiDetectionService.testPIIDetection(text);\n    const toxicityViolations =\n      this.piiDetectionService.testToxicityDetection(text);\n    const promptInjectionViolations =\n      this.piiDetectionService.testPromptInjectionDetection(text);\n\n    return {\n      piiFound: piiTokens.length > 0,\n      piiTokens,\n      toxicityScore: toxicityViolations.length > 0 ? 0.8 : 0.0, // Simplified scoring\n      promptInjectionDetected: promptInjectionViolations.length > 0,\n    };\n  }\n\n  /**\n   * Detect PII in text with comprehensive analysis\n   */\n  async detectPii(\n    text: string,\n    options?: {\n      consentId?: string;\n      dataSubject?: string;\n      processingPurpose?: string;\n    }\n  ): Promise<{\n    hasPii: boolean;\n    piiTypes: string[];\n    detectedPii: Array<{\n      type: string;\n      value: string;\n      confidence: number;\n      startIndex: number;\n      endIndex: number;\n    }>;\n    processingRegion?: string;\n    gdprCompliant?: boolean;\n    consentTracking?: {\n      consentId: string;\n      dataSubject: string;\n      processingPurpose: string;\n      timestamp: Date;\n    };\n  }> {\n    // Check if PII detection is enabled\n    if (!this.featureFlags.isEnabled(\"pii_detection_enabled\", true)) {\n      return {\n        hasPii: false,\n        piiTypes: [],\n        detectedPii: [],\n        processingRegion: this.config.region,\n        gdprCompliant: true,\n      };\n    }\n\n    // Validate input\n    if (!text || typeof text !== \"string\" || text.trim().length === 0) {\n      return {\n        hasPii: false,\n        piiTypes: [],\n        detectedPii: [],\n        processingRegion: this.config.region,\n        gdprCompliant: true,\n      };\n    }\n\n    // Check GDPR compliance for EU regions\n    const isEuRegion = this.config.region.startsWith(\"eu-\");\n    if (\n      this.featureFlags.isEnabled(\"gdpr_compliance_enabled\", true) &&\n      !isEuRegion\n    ) {\n      throw new Error(\n        \"GDPR compliance violation: PII processing must occur in EU region\"\n      );\n    }\n\n    const detectedPii: Array<{\n      type: string;\n      value: string;\n      confidence: number;\n      startIndex: number;\n      endIndex: number;\n    }> = [];\n\n    // Define PII detection patterns\n    const piiPatterns = [\n      {\n        type: \"EMAIL\",\n        pattern: /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g,\n        confidence: 0.95,\n      },\n      {\n        type: \"PHONE\",\n        pattern:\n          /\\b\\+?1?[-.\\s]?\\(?[0-9]{3}\\)?[-.\\s]?[0-9]{3}[-.\\s]?[0-9]{4}\\b/g,\n        confidence: 0.85,\n      },\n      {\n        type: \"PHONE\",\n        pattern: /\\b\\+?[1-9]\\d{1,14}\\b/g,\n        confidence: 0.75,\n      },\n      {\n        type: \"CREDIT_CARD\",\n        pattern: /\\b\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}\\b/g,\n        confidence: 0.9,\n      },\n      {\n        type: \"SSN\",\n        pattern: /\\b\\d{3}-\\d{2}-\\d{4}\\b/g,\n        confidence: 0.95,\n      },\n      {\n        type: \"SSN\",\n        pattern: /\\b\\d{9}\\b/g,\n        confidence: 0.7,\n      },\n      {\n        type: \"IBAN\",\n        pattern: /\\b[A-Z]{2}\\d{2}[A-Z0-9]{4}\\d{7}([A-Z0-9]?){0,16}\\b/g,\n        confidence: 0.9,\n      },\n    ];\n\n    // Detect PII using patterns\n    for (const { type, pattern, confidence } of piiPatterns) {\n      let match;\n      const regex = new RegExp(pattern.source, pattern.flags);\n\n      while ((match = regex.exec(text)) !== null) {\n        detectedPii.push({\n          type,\n          value: match[0],\n          confidence,\n          startIndex: match.index,\n          endIndex: match.index + match[0].length,\n        });\n      }\n    }\n\n    // Get unique PII types\n    const piiTypes = [...new Set(detectedPii.map((pii) => pii.type))];\n\n    // Build result\n    const result = {\n      hasPii: detectedPii.length > 0,\n      piiTypes,\n      detectedPii,\n      processingRegion: this.config.region,\n      gdprCompliant: isEuRegion,\n    };\n\n    // Add consent tracking if provided\n    if (\n      options?.consentId &&\n      options?.dataSubject &&\n      options?.processingPurpose\n    ) {\n      (result as any).consentTracking = {\n        consentId: options.consentId,\n        dataSubject: options.dataSubject,\n        processingPurpose: options.processingPurpose,\n        timestamp: new Date(),\n      };\n    }\n\n    return result;\n  }\n\n  /**\n   * Redact PII from text\n   */\n  async redactPii(text: string): Promise<{\n    redactedText: string;\n    redactionMap: Array<{\n      original: string;\n      redacted: string;\n      type: string;\n      startIndex: number;\n      endIndex: number;\n    }>;\n  }> {\n    // Detect PII first\n    const detection = await this.detectPii(text);\n\n    if (!detection.hasPii) {\n      return {\n        redactedText: text,\n        redactionMap: [],\n      };\n    }\n\n    let redactedText = text;\n    const redactionMap: Array<{\n      original: string;\n      redacted: string;\n      type: string;\n      startIndex: number;\n      endIndex: number;\n    }> = [];\n\n    // Sort detected PII by start index in descending order to avoid index shifting\n    const sortedPii = detection.detectedPii.sort(\n      (a, b) => b.startIndex - a.startIndex\n    );\n\n    // Apply redactions\n    for (const pii of sortedPii) {\n      const redactedValue = this.getRedactionPlaceholder(pii.type);\n\n      redactedText =\n        redactedText.substring(0, pii.startIndex) +\n        redactedValue +\n        redactedText.substring(pii.endIndex);\n\n      redactionMap.unshift({\n        original: pii.value,\n        redacted: redactedValue,\n        type: pii.type,\n        startIndex: pii.startIndex,\n        endIndex: pii.startIndex + redactedValue.length,\n      });\n    }\n\n    return {\n      redactedText,\n      redactionMap,\n    };\n  }\n\n  /**\n   * Restore PII from redacted text using redaction map\n   */\n  async restorePii(\n    redactedText: string,\n    redactionMap: Array<{\n      original: string;\n      redacted: string;\n      type: string;\n      startIndex?: number;\n      endIndex?: number;\n    }>\n  ): Promise<string> {\n    let restoredText = redactedText;\n\n    // Apply restorations in reverse order to maintain text structure\n    for (const redaction of redactionMap.reverse()) {\n      restoredText = restoredText.replace(\n        redaction.redacted,\n        redaction.original\n      );\n    }\n\n    return restoredText;\n  }\n\n  /**\n   * Get redaction placeholder for PII type\n   */\n  private getRedactionPlaceholder(piiType: string): string {\n    const placeholders: Record<string, string> = {\n      EMAIL: \"[EMAIL_REDACTED]\",\n      PHONE: \"[PHONE_REDACTED]\",\n      CREDIT_CARD: \"[CREDIT_CARD_REDACTED]\",\n      SSN: \"[SSN_REDACTED]\",\n      IBAN: \"[IBAN_REDACTED]\",\n      NAME: \"[NAME_REDACTED]\",\n      ADDRESS: \"[ADDRESS_REDACTED]\",\n      IP: \"[IP_REDACTED]\",\n      API_KEY: \"[API_KEY_REDACTED]\",\n      TOKEN: \"[TOKEN_REDACTED]\",\n    };\n\n    return placeholders[piiType] || \"[PII_REDACTED]\";\n  }\n\n  /**\n   * Get PII detection statistics for monitoring\n   */\n  async getPIIDetectionStats(): Promise<{\n    totalChecks: number;\n    piiDetected: number;\n    redactionsApplied: number;\n    averageProcessingTime: number;\n  }> {\n    // This would typically be stored in a metrics service\n    // For now, return placeholder data\n    return {\n      totalChecks: 0,\n      piiDetected: 0,\n      redactionsApplied: 0,\n      averageProcessingTime: 0,\n    };\n  }\n\n  /**\n   * Encrypt sensitive operation data using KMS\n   */\n  async encryptSensitiveData(\n    data: string,\n    context: {\n      operationId: string;\n      dataType: \"pii\" | \"credentials\" | \"context\";\n      userId?: string;\n    }\n  ): Promise<string> {\n    try {\n      const encrypted = await this.kmsEncryption.encrypt(\n        {\n          plaintext: data,\n          encryptionContext: {\n            operationId: context.operationId,\n            dataType: context.dataType,\n            ...(context.userId && { userId: context.userId }),\n          },\n        },\n        context.dataType\n      );\n\n      return encrypted.ciphertext;\n    } catch (error) {\n      throw new Error(\n        `Failed to encrypt sensitive data: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Decrypt sensitive operation data using KMS\n   */\n  async decryptSensitiveData(\n    encryptedData: string,\n    context: {\n      operationId: string;\n      dataType: \"pii\" | \"credentials\" | \"context\";\n      userId?: string;\n    }\n  ): Promise<string> {\n    try {\n      const decrypted = await this.kmsEncryption.decrypt(\n        {\n          ciphertext: encryptedData,\n          encryptionContext: {\n            operationId: context.operationId,\n            dataType: context.dataType,\n            ...(context.userId && { userId: context.userId }),\n          },\n        },\n        context.dataType\n      );\n\n      return decrypted.plaintext;\n    } catch (error) {\n      throw new Error(\n        `Failed to decrypt sensitive data: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Encrypt PII data before storage\n   */\n  async encryptPIIForStorage(\n    piiData: string,\n    piiType: string,\n    operationId: string\n  ): Promise<string> {\n    try {\n      const encrypted = await this.kmsEncryption.encryptPII(piiData, {\n        piiType,\n        operationId,\n      });\n\n      return encrypted.ciphertext;\n    } catch (error) {\n      throw new Error(\n        `Failed to encrypt PII for storage: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Decrypt PII data from storage\n   */\n  async decryptPIIFromStorage(\n    encryptedPII: string,\n    piiType: string,\n    operationId: string\n  ): Promise<string> {\n    try {\n      const decrypted = await this.kmsEncryption.decryptPII(encryptedPII, {\n        piiType,\n        operationId,\n      });\n\n      return decrypted.plaintext;\n    } catch (error) {\n      throw new Error(\n        `Failed to decrypt PII from storage: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Encrypt operation context for secure audit trail\n   */\n  async encryptOperationContextForAudit(\n    context: Record<string, any>,\n    operationId: string\n  ): Promise<string> {\n    try {\n      const encrypted = await this.kmsEncryption.encryptOperationContext(\n        context,\n        operationId\n      );\n\n      return encrypted.ciphertext;\n    } catch (error) {\n      throw new Error(\n        `Failed to encrypt operation context: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Decrypt operation context from audit trail\n   */\n  async decryptOperationContextFromAudit(\n    encryptedContext: string,\n    operationId: string\n  ): Promise<Record<string, any>> {\n    try {\n      return await this.kmsEncryption.decryptOperationContext(\n        encryptedContext,\n        operationId\n      );\n    } catch (error) {\n      throw new Error(\n        `Failed to decrypt operation context: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Get KMS encryption service for advanced operations\n   */\n  getKMSEncryptionService(): KMSEncryptionService {\n    return this.kmsEncryption;\n  }\n\n  /**\n   * Validate URL against SSRF protection rules\n   */\n  async validateUrlForSSRF(\n    url: string,\n    operationId?: string\n  ): Promise<SSRFValidationResult> {\n    return await this.ssrfValidator.validateUrl(url, operationId);\n  }\n\n  /**\n   * Get SSRF protection validator for advanced operations\n   */\n  getSSRFProtectionValidator(): SSRFProtectionValidator {\n    return this.ssrfValidator;\n  }\n\n  /**\n   * Update SSRF protection configuration\n   */\n  updateSSRFProtectionConfig(config: {\n    allowedDomains?: string[];\n    allowedProtocols?: string[];\n    blockMetadataEndpoints?: boolean;\n    blockPrivateIPs?: boolean;\n    blockLocalhost?: boolean;\n    blockIPv6Private?: boolean;\n    blockDangerousProtocols?: boolean;\n    enableDNSRebindingProtection?: boolean;\n    enableRedirectionProtection?: boolean;\n    maxRedirects?: number;\n  }): void {\n    this.ssrfValidator.updateConfig(config);\n  }\n\n  /**\n   * Add allowed domain for SSRF protection\n   */\n  addAllowedDomain(domain: string): void {\n    this.ssrfValidator.addAllowedDomain(domain);\n  }\n\n  /**\n   * Remove allowed domain from SSRF protection\n   */\n  removeAllowedDomain(domain: string): void {\n    this.ssrfValidator.removeAllowedDomain(domain);\n  }\n\n  /**\n   * Get all allowed domains for SSRF protection\n   */\n  getAllowedDomains(): string[] {\n    return this.ssrfValidator.getAllowedDomains();\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n    }\n    this.kmsEncryption.destroy();\n  }\n\n  // Private Methods\n\n  /**\n   * Execute actual Bedrock request\n   */\n  private async executeBedrockRequest(\n    request: SupportOperationRequest,\n    operationId: string\n  ): Promise<{\n    text?: string;\n    toolCalls?: any[];\n    tokensUsed?: { input: number; output: number };\n  }> {\n    const modelConfig = this.modelConfigs[request.operation];\n    const timeout = this.getTimeoutForOperation(request.operation);\n\n    // Build request payload\n    const payload = {\n      anthropic_version: \"bedrock-2023-05-31\",\n      max_tokens: request.maxTokens || modelConfig.maxTokens,\n      temperature: request.temperature ?? modelConfig.temperature,\n      messages: [\n        {\n          role: \"user\",\n          content: [{ type: \"text\", text: request.prompt }],\n        },\n      ],\n      ...(request.tools && {\n        tools: this.mapToolsToBedrockFormat(request.tools),\n      }),\n    };\n\n    // Add system message for support operations\n    if (request.operation !== \"standard\") {\n      (payload as any).system = this.getSystemMessageForOperation(\n        request.operation\n      );\n    }\n\n    const command = request.streaming\n      ? new InvokeModelWithResponseStreamCommand({\n          modelId: modelConfig.modelId,\n          contentType: \"application/json\",\n          accept: \"application/vnd.amazon.eventstream\",\n          body: JSON.stringify(payload),\n        })\n      : new InvokeModelCommand({\n          modelId: modelConfig.modelId,\n          contentType: \"application/json\",\n          accept: \"application/json\",\n          body: JSON.stringify(payload),\n        });\n\n    // Set timeout for the operation\n    const timeoutPromise = new Promise((_, reject) => {\n      setTimeout(\n        () => reject(new Error(`Operation timeout after ${timeout}ms`)),\n        timeout\n      );\n    });\n\n    const response = await Promise.race([\n      this.client.send(command as any),\n      timeoutPromise,\n    ]);\n\n    // Parse response\n    return this.parseBedrockResponse(response, request.streaming);\n  }\n\n  /**\n   * Map tools to Bedrock format\n   */\n  private mapToolsToBedrockFormat(tools: ToolSpec[]): any[] {\n    return tools.map((tool) => ({\n      name: tool.name,\n      description: tool.description || \"\",\n      input_schema: {\n        type: \"object\",\n        properties: tool.parameters || {},\n        required: Object.keys(tool.parameters || {}),\n      },\n    }));\n  }\n\n  /**\n   * Get system message for operation type\n   */\n  private getSystemMessageForOperation(operation: OperationType): string {\n    const systemMessages = {\n      emergency:\n        \"You are an emergency support assistant. Provide immediate, actionable responses. Be concise and direct.\",\n      infrastructure:\n        \"You are an infrastructure support specialist. Analyze system issues and provide technical solutions.\",\n      meta_monitor:\n        \"You are a meta-monitoring assistant. Analyze execution patterns and provide diagnostic insights.\",\n      implementation:\n        \"You are an implementation support assistant. Help resolve incomplete modules and provide remediation steps.\",\n      standard: \"You are a helpful AI assistant.\",\n    };\n\n    return systemMessages[operation];\n  }\n\n  /**\n   * Parse Bedrock response\n   */\n  private parseBedrockResponse(\n    response: any,\n    streaming?: boolean\n  ): {\n    text?: string;\n    toolCalls?: any[];\n    tokensUsed?: { input: number; output: number };\n  } {\n    if (streaming) {\n      // Handle streaming response (simplified for now)\n      return {\n        text: \"Streaming response\",\n        tokensUsed: { input: 0, output: 0 },\n      };\n    }\n\n    const body = JSON.parse(new TextDecoder().decode(response.body));\n\n    const text = body.content?.map((c: any) => c.text).join(\"\\n\") || \"\";\n    const toolCalls =\n      body.content\n        ?.filter((c: any) => c.type === \"tool_use\")\n        ?.map((tc: any) => ({\n          name: tc.name,\n          arguments: tc.input,\n        })) || [];\n\n    const tokensUsed = {\n      input: body.usage?.input_tokens || 0,\n      output: body.usage?.output_tokens || 0,\n    };\n\n    return { text, toolCalls, tokensUsed };\n  }\n\n  /**\n   * Validate operation timeout requirements\n   */\n  private validateOperationTimeout(operation: OperationType): void {\n    const timeout = this.getTimeoutForOperation(operation);\n    const maxAllowed =\n      operation === \"emergency\"\n        ? 5000\n        : operation === \"infrastructure\"\n        ? 10000\n        : 30000;\n\n    if (timeout > maxAllowed) {\n      throw new Error(\n        `Operation ${operation} timeout ${timeout}ms exceeds maximum ${maxAllowed}ms`\n      );\n    }\n  }\n\n  /**\n   * Get timeout for operation type\n   */\n  private getTimeoutForOperation(operation: OperationType): number {\n    switch (operation) {\n      case \"emergency\":\n        return this.config.emergencyTimeout;\n      case \"infrastructure\":\n      case \"meta_monitor\":\n      case \"implementation\":\n        return this.config.criticalTimeout;\n      default:\n        return this.config.timeout;\n    }\n  }\n\n  /**\n   * Perform enhanced PII detection and redaction for direct Bedrock operations\n   */\n  private async performPIIDetectionAndRedaction(\n    request: SupportOperationRequest,\n    operationId: string\n  ): Promise<SafetyCheckResult> {\n    const startTime = Date.now();\n\n    try {\n      // Perform comprehensive PII and safety check\n      const safetyResult = await this.piiDetectionService.performSafetyCheck(\n        request.prompt,\n        operationId\n      );\n\n      // Log PII detection results\n      await this.auditTrail.logEvent({\n        eventType: \"pii_detection\",\n        requestId: operationId,\n        provider: \"bedrock\",\n        complianceStatus: safetyResult.allowed ? \"compliant\" : \"violation\",\n        metadata: {\n          operation: request.operation,\n          priority: request.priority,\n          piiViolations: safetyResult.violations.filter((v) => v.type === \"PII\")\n            .length,\n          toxicityViolations: safetyResult.violations.filter(\n            (v) => v.type === \"TOXICITY\"\n          ).length,\n          promptInjectionViolations: safetyResult.violations.filter(\n            (v) => v.type === \"CUSTOM\"\n          ).length,\n          confidence: safetyResult.confidence,\n          processingTimeMs: safetyResult.processingTimeMs,\n          contentModified: !!safetyResult.modifiedContent,\n        },\n      });\n\n      // If content was modified (PII redacted), update the request\n      if (safetyResult.modifiedContent) {\n        request.prompt = safetyResult.modifiedContent;\n\n        // Log the redaction action\n        await this.auditTrail.logEvent({\n          eventType: \"pii_redaction\",\n          requestId: operationId,\n          provider: \"bedrock\",\n          complianceStatus: \"compliant\",\n          metadata: {\n            operation: request.operation,\n            redactionApplied: true,\n            originalLength: request.prompt.length,\n            redactedLength: safetyResult.modifiedContent.length,\n            violationsRedacted: safetyResult.violations.length,\n          },\n        });\n      }\n\n      // For emergency operations, allow with redaction even if violations exist\n      if (request.operation === \"emergency\" && !safetyResult.allowed) {\n        // Force redaction for emergency operations\n        if (safetyResult.violations.some((v) => v.type === \"PII\")) {\n          const emergencyRedaction = this.piiDetectionService.testPIIDetection(\n            request.prompt\n          );\n          if (emergencyRedaction.length > 0) {\n            // Apply emergency redaction\n            request.prompt = this.redactPIIForEmergency(request.prompt);\n\n            await this.auditTrail.logEvent({\n              eventType: \"emergency_pii_redaction\",\n              requestId: operationId,\n              provider: \"bedrock\",\n              complianceStatus: \"compliant\",\n              metadata: {\n                operation: request.operation,\n                emergencyRedactionApplied: true,\n                piiTokensRedacted: emergencyRedaction.length,\n              },\n            });\n\n            // Return modified safety result for emergency\n            return {\n              ...safetyResult,\n              allowed: true,\n              modifiedContent: request.prompt,\n            };\n          }\n        }\n      }\n\n      // For non-emergency operations with critical violations, block the request\n      if (\n        !safetyResult.allowed &&\n        safetyResult.violations.some((v) => v.severity === \"CRITICAL\")\n      ) {\n        throw new Error(\n          `Critical safety violations detected: ${safetyResult.violations\n            .filter((v) => v.severity === \"CRITICAL\")\n            .map((v) => v.details)\n            .join(\", \")}`\n        );\n      }\n\n      return safetyResult;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      // Log PII detection error\n      await this.auditTrail.logEvent({\n        eventType: \"pii_detection\",\n        requestId: operationId,\n        provider: \"bedrock\",\n        complianceStatus: \"violation\",\n        error: {\n          type: \"pii_detection_error\",\n          message: errorMessage,\n        },\n        metadata: {\n          operation: request.operation,\n          processingTimeMs: Date.now() - startTime,\n        },\n      });\n\n      // Return failed safety result\n      return {\n        allowed: false,\n        confidence: 0.0,\n        violations: [\n          {\n            type: \"CUSTOM\",\n            severity: \"CRITICAL\",\n            confidence: 1.0,\n            details: `PII detection failed: ${errorMessage}`,\n          },\n        ],\n        processingTimeMs: Date.now() - startTime,\n      };\n    }\n  }\n\n  /**\n   * Perform enhanced compliance checks with GDPR validation\n   */\n  private async performEnhancedComplianceChecks(\n    request: SupportOperationRequest,\n    operationId: string\n  ): Promise<SupportOperationResponse[\"complianceValidation\"]> {\n    const startTime = Date.now();\n\n    try {\n      // Create routing path for GDPR validation\n      const routingPath: HybridRoutingPath = {\n        routeType: \"direct_bedrock\",\n        provider: \"bedrock\",\n        operationType: request.operation,\n        priority: request.priority,\n      };\n\n      // Validate GDPR compliance before routing\n      const gdprValidation = await this.gdprValidator.validateBeforeRouting(\n        routingPath,\n        operationId\n      );\n\n      if (!gdprValidation.allowed) {\n        throw new Error(`GDPR compliance violation: ${gdprValidation.reason}`);\n      }\n\n      // Perform additional compliance checks\n      await this.performLegacyComplianceChecks(request);\n\n      // Log compliance validation success\n      await this.auditTrail.logEvent({\n        eventType: \"gdpr_compliance_validation\",\n        requestId: operationId,\n        provider: \"bedrock\",\n        complianceStatus: \"compliant\",\n        metadata: {\n          operation: request.operation,\n          routingPath: \"direct_bedrock\",\n          gdprCompliant: true,\n          processingTimeMs: Date.now() - startTime,\n        },\n      });\n\n      return {\n        gdprCompliant: true,\n        piiRedacted: true, // PII redaction is always applied\n        auditLogged: true,\n      };\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      // Log compliance validation error\n      await this.auditTrail.logEvent({\n        eventType: \"gdpr_compliance_validation\",\n        requestId: operationId,\n        provider: \"bedrock\",\n        complianceStatus: \"violation\",\n        error: {\n          type: \"compliance_error\",\n          message: errorMessage,\n        },\n        metadata: {\n          operation: request.operation,\n          routingPath: \"direct_bedrock\",\n          processingTimeMs: Date.now() - startTime,\n        },\n      });\n\n      throw error; // Re-throw to block the operation\n    }\n  }\n\n  /**\n   * Emergency PII redaction for critical operations\n   */\n  private redactPIIForEmergency(text: string): string {\n    // Use aggressive redaction patterns for emergency operations\n    let redactedText = text;\n\n    const emergencyRedactionPatterns = [\n      // Email addresses - complete redaction\n      {\n        pattern: /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g,\n        replacement: \"[EMAIL_REDACTED]\",\n      },\n\n      // Phone numbers - complete redaction\n      {\n        pattern:\n          /\\b\\+?1?[-.\\s]?\\(?[0-9]{3}\\)?[-.\\s]?[0-9]{3}[-.\\s]?[0-9]{4}\\b/g,\n        replacement: \"[PHONE_REDACTED]\",\n      },\n      { pattern: /\\b\\+?[1-9]\\d{1,14}\\b/g, replacement: \"[PHONE_REDACTED]\" },\n\n      // Credit card numbers - complete redaction\n      {\n        pattern: /\\b\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}\\b/g,\n        replacement: \"[CARD_REDACTED]\",\n      },\n\n      // Social Security Numbers - complete redaction\n      { pattern: /\\b\\d{3}-\\d{2}-\\d{4}\\b/g, replacement: \"[SSN_REDACTED]\" },\n      { pattern: /\\b\\d{9}\\b/g, replacement: \"[ID_REDACTED]\" },\n\n      // IBAN - complete redaction\n      {\n        pattern: /\\b[A-Z]{2}\\d{2}[A-Z0-9]{4}\\d{7}([A-Z0-9]?){0,16}\\b/g,\n        replacement: \"[IBAN_REDACTED]\",\n      },\n\n      // Names with titles - partial redaction\n      {\n        pattern: /\\b(Mr|Mrs|Ms|Dr|Prof)\\.?\\s+[A-Z][a-z]+\\s+[A-Z][a-z]+\\b/g,\n        replacement: \"$1. [NAME_REDACTED]\",\n      },\n\n      // IP addresses - complete redaction\n      {\n        pattern: /\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b/g,\n        replacement: \"[IP_REDACTED]\",\n      },\n\n      // API keys and tokens - complete redaction\n      { pattern: /\\bsk-[A-Za-z0-9]{48}\\b/g, replacement: \"[API_KEY_REDACTED]\" },\n      { pattern: /\\bAKIA[A-Z0-9]{16}\\b/g, replacement: \"[AWS_KEY_REDACTED]\" },\n\n      // Long alphanumeric strings (potential tokens)\n      { pattern: /\\b[A-Za-z0-9]{32,}\\b/g, replacement: \"[TOKEN_REDACTED]\" },\n    ];\n\n    // Apply all emergency redaction patterns\n    emergencyRedactionPatterns.forEach(({ pattern, replacement }) => {\n      redactedText = redactedText.replace(pattern, replacement);\n    });\n\n    return redactedText;\n  }\n\n  /**\n   * Legacy compliance checks (renamed from performComplianceChecks)\n   */\n  private async performLegacyComplianceChecks(\n    request: SupportOperationRequest\n  ): Promise<void> {\n    // Note: PII Detection and Redaction is now handled by performPIIDetectionAndRedaction method\n    // This method focuses on other compliance aspects\n\n    // 2. GDPR Compliance Checks\n    if (request.context?.userId) {\n      const consentValid = await this.validateGDPRConsent(\n        request.context.userId\n      );\n      if (!consentValid) {\n        throw new Error(\n          \"Missing or invalid GDPR consent for user data processing\"\n        );\n      }\n    }\n\n    // 3. Data Residency Compliance (EU)\n    if (request.context?.tenant) {\n      const isEUTenant = await this.isEUTenant(request.context.tenant);\n      if (\n        isEUTenant &&\n        this.config.region !== \"eu-central-1\" &&\n        this.config.region !== \"eu-west-1\"\n      ) {\n        throw new Error(\n          `EU data residency violation: operation must use EU region, current: ${this.config.region}`\n        );\n      }\n    }\n\n    // 4. Operation-specific compliance checks\n    await this.performOperationSpecificCompliance(request);\n\n    // 5. Audit trail logging\n    await this.logComplianceCheck(request);\n  }\n\n  /**\n   * Validate GDPR consent for user\n   */\n  private async validateGDPRConsent(userId: string): Promise<boolean> {\n    try {\n      // In real implementation, check consent database\n      // For now, we'll use a simple check\n\n      // Check if user has valid consent record\n      const consentRecord = await this.getConsentRecord(userId);\n\n      if (!consentRecord) {\n        return false;\n      }\n\n      // Check if consent is still valid (not expired)\n      const consentAge = Date.now() - consentRecord.timestamp.getTime();\n      const maxConsentAge = 365 * 24 * 60 * 60 * 1000; // 1 year\n\n      if (consentAge > maxConsentAge) {\n        return false;\n      }\n\n      // Check if consent covers AI processing\n      return consentRecord.aiProcessingConsent === true;\n    } catch (error) {\n      console.error(\"GDPR consent validation failed:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Get consent record for user (placeholder)\n   */\n  private async getConsentRecord(userId: string): Promise<{\n    userId: string;\n    timestamp: Date;\n    aiProcessingConsent: boolean;\n    dataRetentionConsent: boolean;\n  } | null> {\n    // In real implementation, query consent database\n    // For now, return a mock valid consent\n    return {\n      userId,\n      timestamp: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 30 days ago\n      aiProcessingConsent: true,\n      dataRetentionConsent: true,\n    };\n  }\n\n  /**\n   * Check if tenant is EU-based\n   */\n  private async isEUTenant(tenantId: string): Promise<boolean> {\n    // In real implementation, check tenant database\n    // For now, simple heuristic based on tenant ID\n    const euTenantPatterns = [\n      /^eu-/,\n      /^de-/,\n      /^fr-/,\n      /^it-/,\n      /^es-/,\n      /^nl-/,\n      /^be-/,\n      /^at-/,\n      /^ch-/,\n    ];\n\n    return euTenantPatterns.some((pattern) => pattern.test(tenantId));\n  }\n\n  /**\n   * Perform operation-specific compliance checks\n   */\n  private async performOperationSpecificCompliance(\n    request: SupportOperationRequest\n  ): Promise<void> {\n    switch (request.operation) {\n      case \"emergency\":\n        // Emergency operations have relaxed compliance for speed\n        // but still require basic checks\n        break;\n\n      case \"infrastructure\":\n        // Infrastructure operations may access system data\n        // Ensure no customer data is included\n        if (this.containsCustomerData(request.prompt)) {\n          throw new Error(\"Customer data detected in infrastructure operation\");\n        }\n        break;\n\n      case \"meta_monitor\":\n        // Meta monitoring should not process personal data\n        if (this.containsPersonalData(request.prompt)) {\n          throw new Error(\n            \"Personal data detected in meta monitoring operation\"\n          );\n        }\n        break;\n\n      case \"implementation\":\n        // Implementation support should not access production data\n        if (this.containsProductionData(request.prompt)) {\n          throw new Error(\n            \"Production data detected in implementation operation\"\n          );\n        }\n        break;\n\n      default:\n        // Standard operations follow full compliance\n        break;\n    }\n  }\n\n  /**\n   * Check for customer data patterns\n   */\n  private containsCustomerData(text: string): boolean {\n    const customerDataPatterns = [\n      /customer_id:\\s*\\d+/i,\n      /user_id:\\s*\\d+/i,\n      /account_id:\\s*\\d+/i,\n      /order_id:\\s*\\d+/i,\n      /transaction_id:\\s*\\d+/i,\n    ];\n\n    return customerDataPatterns.some((pattern) => pattern.test(text));\n  }\n\n  /**\n   * Check for personal data patterns\n   */\n  private containsPersonalData(text: string): boolean {\n    const personalDataPatterns = [\n      /first_name:\\s*[A-Z][a-z]+/i,\n      /last_name:\\s*[A-Z][a-z]+/i,\n      /full_name:\\s*[A-Z][a-z]+\\s+[A-Z][a-z]+/i,\n      /date_of_birth:\\s*\\d{4}-\\d{2}-\\d{2}/i,\n      /address:\\s*.+/i,\n    ];\n\n    return personalDataPatterns.some((pattern) => pattern.test(text));\n  }\n\n  /**\n   * Check for production data patterns\n   */\n  private containsProductionData(text: string): boolean {\n    const productionDataPatterns = [\n      /prod_/i,\n      /production/i,\n      /live_/i,\n      /real_customer/i,\n      /actual_user/i,\n    ];\n\n    return productionDataPatterns.some((pattern) => pattern.test(text));\n  }\n\n  /**\n   * Log compliance check for audit trail\n   */\n  private async logComplianceCheck(\n    request: SupportOperationRequest\n  ): Promise<void> {\n    const auditEntry = {\n      timestamp: new Date().toISOString(),\n      operation: request.operation,\n      priority: request.priority,\n      userId: request.context?.userId,\n      tenantId: request.context?.tenant,\n      correlationId: request.context?.correlationId,\n      complianceChecks: {\n        piiDetection: await this.containsPII(request.prompt),\n        gdprConsent: request.context?.userId\n          ? await this.validateGDPRConsent(request.context.userId)\n          : null,\n        dataResidency: request.context?.tenant\n          ? await this.isEUTenant(request.context.tenant)\n          : null,\n        operationSpecific: true, // Passed if we reach this point\n      },\n      region: this.config.region,\n    };\n\n    // In real implementation, send to audit service\n    console.log(\"Compliance audit:\", JSON.stringify(auditEntry, null, 2));\n  }\n\n  /**\n   * Check if text contains PII using the comprehensive detection service\n   */\n  private async containsPII(text: string): Promise<boolean> {\n    try {\n      const piiTokens = this.piiDetectionService.testPIIDetection(text);\n      return piiTokens && piiTokens.length > 0;\n    } catch (error) {\n      console.warn(\"PII detection service error:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Validate GDPR consent using the enhanced compliance system\n   */\n  private async validateGDPRConsentEnhanced(\n    userId: string,\n    operationId: string\n  ): Promise<boolean> {\n    try {\n      const consentValid = await this.validateGDPRConsent(userId);\n\n      // Log consent validation to audit trail\n      await this.auditTrail.logEvent({\n        eventType: \"gdpr_consent_validation\",\n        requestId: operationId,\n        provider: \"bedrock\",\n        complianceStatus: consentValid ? \"compliant\" : \"violation\",\n        metadata: {\n          userId,\n          consentValid,\n          validationType: \"enhanced\",\n        },\n      });\n\n      return consentValid;\n    } catch (error) {\n      // Log consent validation error\n      await this.auditTrail.logEvent({\n        eventType: \"gdpr_consent_validation\",\n        requestId: operationId,\n        provider: \"bedrock\",\n        complianceStatus: \"violation\",\n        error: {\n          type: \"consent_validation_error\",\n          message: error instanceof Error ? error.message : String(error),\n        },\n        metadata: {\n          userId,\n        },\n      });\n\n      return false;\n    }\n  }\n\n  /**\n   * Calculate cost based on token usage\n   */\n  private calculateCost(tokensUsed?: {\n    input: number;\n    output: number;\n  }): number {\n    if (!tokensUsed) return 0;\n\n    // Claude 3.5 Sonnet pricing (approximate)\n    const inputCostPer1k = 0.003; // $0.003 per 1k input tokens\n    const outputCostPer1k = 0.015; // $0.015 per 1k output tokens\n\n    const inputCost = (tokensUsed.input / 1000) * inputCostPer1k;\n    const outputCost = (tokensUsed.output / 1000) * outputCostPer1k;\n\n    return inputCost + outputCost;\n  }\n\n  /**\n   * Update health status\n   */\n  private updateHealthStatus(\n    success: boolean,\n    latencyMs: number,\n    error?: Error\n  ): void {\n    this.healthStatus.lastCheck = new Date();\n    this.healthStatus.latencyMs = latencyMs;\n    this.healthStatus.circuitBreakerState = this.circuitBreaker.isOpen(\n      \"bedrock\"\n    )\n      ? \"open\"\n      : \"closed\";\n\n    if (success) {\n      this.healthStatus.isHealthy = true;\n      this.healthStatus.consecutiveFailures = 0;\n      delete this.healthStatus.error;\n\n      // Set development mode details if applicable\n      if (\n        process.env.NODE_ENV === \"development\" &&\n        !process.env.BEDROCK_ENDPOINT\n      ) {\n        this.healthStatus.details =\n          \"Development mode - Bedrock endpoint skipped\";\n      }\n    } else {\n      this.healthStatus.isHealthy = false;\n      this.healthStatus.consecutiveFailures++;\n\n      // In development, provide helpful error message\n      const isDev = process.env.NODE_ENV === \"development\";\n      if (isDev) {\n        this.healthStatus.error = `Development mode - Bedrock connection skipped: ${\n          error?.message || \"Unknown error\"\n        }`;\n      } else {\n        this.healthStatus.error = error?.message;\n      }\n    }\n  }\n\n  /**\n   * Start health monitoring\n   */\n  private startHealthMonitoring(): void {\n    this.healthCheckInterval = setInterval(async () => {\n      try {\n        await this.performHealthCheck();\n      } catch (error) {\n        console.error(\"Health check failed:\", error);\n      }\n    }, 30000); // Check every 30 seconds\n  }\n\n  /**\n   * Generate unique operation ID\n   */\n  private generateOperationId(): string {\n    return `direct-bedrock-${Date.now()}-${Math.random()\n      .toString(36)\n      .substring(2, 11)}`;\n  }\n\n  /**\n   * Get PII detection statistics\n   */\n  async getPIIDetectionStats(): Promise<{\n    totalDetections: number;\n    totalRedactions: number;\n    detectionsByType: Record<string, number>;\n    averageConfidence: number;\n    lastDetection?: Date;\n  }> {\n    // This would typically query a metrics store\n    // For now, return mock statistics\n    return {\n      totalDetections: 0,\n      totalRedactions: 0,\n      detectionsByType: {},\n      averageConfidence: 0,\n      lastDetection: undefined,\n    };\n  }\n\n  /**\n   * Get redaction placeholder for PII type\n   */\n  private getRedactionPlaceholder(piiType: string): string {\n    const placeholders: Record<string, string> = {\n      EMAIL: \"[EMAIL_REDACTED]\",\n      PHONE: \"[PHONE_REDACTED]\",\n      CREDIT_CARD: \"[CREDIT_CARD_REDACTED]\",\n      SSN: \"[SSN_REDACTED]\",\n      IBAN: \"[IBAN_REDACTED]\",\n    };\n\n    return placeholders[piiType] || \"[PII_REDACTED]\";\n  }\n\n  /**\n   * Cleanup resources\n   */\n  cleanup(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n      this.healthCheckInterval = undefined;\n    }\n  }\n}\n\n// Types are already exported as interfaces above\n"],"mappings":"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","ignoreList":[]}
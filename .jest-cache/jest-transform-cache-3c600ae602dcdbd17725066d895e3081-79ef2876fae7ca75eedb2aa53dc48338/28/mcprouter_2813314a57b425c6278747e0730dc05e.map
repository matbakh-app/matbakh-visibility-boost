{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/mcp-router.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/mcp-router.ts"],"sourcesContent":["/**\n * MCP Router - Model Context Protocol Integration for Hybrid Bedrock Support\n *\n * This module implements MCP (Model Context Protocol) integration for the Bedrock\n * Support Mode, providing reliable communication between Bedrock and Kiro through\n * MCP with message queuing, retry logic, and health monitoring.\n */\n\nimport WebSocket from \"ws\";\nimport { AiFeatureFlags } from \"./ai-feature-flags\";\nimport { AuditTrailSystem } from \"./audit-trail-system\";\nimport { CircuitBreaker } from \"./circuit-breaker\";\nimport {\n  OperationPriority,\n  SupportOperationRequest,\n  SupportOperationResponse,\n} from \"./direct-bedrock-client\";\nimport { RouteHealth } from \"./intelligent-router\";\n\n// Configure WebSocket for Node.js environment\nif (typeof globalThis.WebSocket === \"undefined\") {\n  globalThis.WebSocket = WebSocket as any;\n}\n\n// MCP Message Types\nexport interface MCPMessage {\n  id: string;\n  type: \"request\" | \"response\" | \"notification\";\n  method: string;\n  params?: any;\n  result?: any;\n  error?: MCPError;\n  timestamp: Date;\n  correlationId: string;\n  retryCount: number;\n  priority: OperationPriority;\n  timeout?: number;\n}\n\nexport interface MCPError {\n  code: number;\n  message: string;\n  data?: any;\n}\n\n// MCP Connection Configuration\nexport interface MCPConnectionConfig {\n  endpoint: string;\n  timeout: number;\n  maxRetries: number;\n  retryDelay: number;\n  queueMaxSize: number;\n  healthCheckInterval: number;\n  enableCompression: boolean;\n  enableEncryption: boolean;\n}\n\n// MCP Health Status\nexport interface MCPHealthStatus extends RouteHealth {\n  connectionStatus: \"connected\" | \"disconnected\" | \"connecting\" | \"error\";\n  queueSize: number;\n  pendingOperations: number;\n  lastSuccessfulOperation: Date | null;\n  errorRate: number;\n}\n\n// Message Queue Item\ninterface QueuedMessage {\n  message: MCPMessage;\n  resolve: (value: SupportOperationResponse) => void;\n  reject: (error: Error) => void;\n  enqueuedAt: Date;\n  attempts: number;\n  timeoutId?: NodeJS.Timeout;\n}\n\n// Kiro Bridge Communication Protocol\nexport interface KiroBridgeMessage {\n  type: \"diagnostics\" | \"support_request\" | \"execution_data\" | \"health_check\";\n  source: \"bedrock_support\" | \"kiro\" | \"mcp_router\";\n  payload: any;\n  timestamp: Date;\n  correlationId: string;\n  routingPath: \"mcp\" | \"direct\" | \"hybrid\";\n}\n\n/**\n * MCP Router Implementation for Hybrid Bedrock Integration\n */\nexport class MCPRouter {\n  private config: MCPConnectionConfig;\n  private featureFlags: AiFeatureFlags;\n  private circuitBreaker: CircuitBreaker;\n  private auditTrail: AuditTrailSystem;\n\n  // Connection and messaging\n  private connection: WebSocket | null = null;\n  private messageQueue: Map<string, QueuedMessage> = new Map();\n  private pendingMessages: Map<string, QueuedMessage> = new Map();\n  private priorityQueue: QueuedMessage[] = [];\n\n  // Health monitoring\n  private healthStatus: MCPHealthStatus;\n  private healthCheckInterval?: NodeJS.Timeout;\n  private connectionRetryTimeout?: NodeJS.Timeout;\n  private activeTimeouts: Set<NodeJS.Timeout> = new Set();\n  private activeIntervals: Set<NodeJS.Timeout> = new Set();\n\n  // Metrics and monitoring\n  private metrics: {\n    totalMessages: number;\n    successfulMessages: number;\n    failedMessages: number;\n    averageLatency: number;\n    queueOverflows: number;\n    connectionResets: number;\n  };\n\n  constructor(config?: Partial<MCPConnectionConfig>) {\n    this.config = {\n      endpoint: process.env.MCP_ENDPOINT || \"ws://localhost:8080/mcp\",\n      timeout: 30000,\n      maxRetries: 3,\n      retryDelay: 1000,\n      queueMaxSize: 1000,\n      healthCheckInterval: 30000,\n      enableCompression: true,\n      enableEncryption: false,\n      ...config,\n    };\n\n    this.featureFlags = new AiFeatureFlags();\n    this.circuitBreaker = new CircuitBreaker({\n      failureThreshold: 5,\n      recoveryTimeout: 60000,\n      halfOpenMaxCalls: 3,\n    });\n\n    // Initialize audit trail system\n    this.auditTrail = new AuditTrailSystem({\n      complianceMode: \"strict\",\n      enableIntegrityChecking: true,\n      retentionDays: 2555, // 7 years for GDPR compliance\n    });\n\n    this.healthStatus = this.initializeHealthStatus();\n    this.metrics = this.initializeMetrics();\n\n    // Initialize connection if MCP is enabled\n    if (this.featureFlags.isEnabled(\"ENABLE_MCP_INTEGRATION\")) {\n      this.initializeConnection();\n    }\n  }\n\n  /**\n   * Execute support operation through MCP\n   */\n  async executeSupportOperation(\n    request: SupportOperationRequest\n  ): Promise<SupportOperationResponse> {\n    const startTime = Date.now();\n    const correlationId = this.generateCorrelationId();\n\n    try {\n      // Check if MCP integration is enabled\n      if (!this.featureFlags.isEnabled(\"ENABLE_MCP_INTEGRATION\")) {\n        throw new Error(\"MCP integration is disabled\");\n      }\n\n      // Check circuit breaker\n      if (this.circuitBreaker.isOpen(\"mcp\" as any)) {\n        throw new Error(\"MCP router circuit breaker is open\");\n      }\n\n      // Validate connection\n      await this.ensureConnection();\n\n      // Create MCP message\n      const mcpMessage: MCPMessage = {\n        id: this.generateMessageId(),\n        type: \"request\",\n        method: \"support_operation\",\n        params: {\n          operation: request.operation,\n          priority: request.priority,\n          context: request.context,\n          timeout: 30000, // Default 30s timeout\n        },\n        timestamp: new Date(),\n        correlationId,\n        retryCount: 0,\n        priority: request.priority,\n        timeout: 30000, // Default 30s timeout\n      };\n\n      // Execute with retry logic\n      const response = await this.executeWithRetry(mcpMessage);\n\n      // Update metrics on success\n      this.updateMetrics(true, Date.now() - startTime);\n\n      // Log successful operation to audit trail\n      await this.auditTrail.logMCPRoutingOperation(\n        correlationId,\n        request.operation,\n        request.priority,\n        Date.now() - startTime,\n        true,\n        this.messageQueue.size,\n        0 // No retries for successful operation\n      );\n\n      // Log successful operation (console logging)\n      this.logOperation(\"success\", mcpMessage, response);\n\n      return {\n        success: true,\n        operationId: response.operationId || correlationId,\n        latencyMs: Date.now() - startTime,\n        timestamp: new Date(),\n        text: response.result?.text,\n        toolCalls: response.result?.toolCalls,\n      };\n    } catch (error) {\n      const latencyMs = Date.now() - startTime;\n\n      // Update metrics on failure\n      this.updateMetrics(false, latencyMs);\n\n      // Log failed operation to audit trail\n      await this.auditTrail.logMCPRoutingOperation(\n        correlationId,\n        request.operation,\n        request.priority,\n        latencyMs,\n        false,\n        this.messageQueue.size,\n        0, // Retry count would be tracked in executeWithRetry\n        error instanceof Error ? error.message : \"MCP operation failed\"\n      );\n\n      // Log failed operation (console logging)\n      this.logOperation(\"error\", null, null, error as Error);\n\n      // Return error response\n      return {\n        success: false,\n        operationId: correlationId,\n        latencyMs,\n        timestamp: new Date(),\n        error: error instanceof Error ? error.message : \"MCP operation failed\",\n      };\n    }\n  }\n\n  /**\n   * Get MCP health status\n   */\n  async getHealthStatus(): Promise<MCPHealthStatus> {\n    // Update real-time metrics\n    this.healthStatus.queueSize =\n      this.messageQueue.size + this.priorityQueue.length;\n    this.healthStatus.pendingOperations = this.pendingMessages.size;\n    this.healthStatus.lastCheck = new Date();\n\n    // Check connection status (preserve error state)\n    if (this.connection?.readyState === WebSocket.OPEN) {\n      this.healthStatus.connectionStatus = \"connected\";\n      this.healthStatus.isHealthy = true;\n    } else if (this.connection?.readyState === WebSocket.CONNECTING) {\n      this.healthStatus.connectionStatus = \"connecting\";\n      this.healthStatus.isHealthy = false;\n    } else {\n      // Only change to disconnected if not already in error state\n      if (this.healthStatus.connectionStatus !== \"error\") {\n        this.healthStatus.connectionStatus = \"disconnected\";\n      }\n      this.healthStatus.isHealthy = false;\n    }\n\n    // Calculate error rate\n    if (this.metrics.totalMessages > 0) {\n      this.healthStatus.errorRate =\n        this.metrics.failedMessages / this.metrics.totalMessages;\n    }\n\n    // Update latency\n    this.healthStatus.latencyMs = this.metrics.averageLatency;\n\n    return { ...this.healthStatus };\n  }\n\n  /**\n   * Check if MCP router is available\n   */\n  isAvailable(): boolean {\n    return (\n      this.featureFlags.isEnabled(\"ENABLE_MCP_INTEGRATION\") &&\n      this.connection?.readyState === WebSocket.OPEN &&\n      !this.circuitBreaker.isOpen(\"mcp\" as any)\n    );\n  }\n\n  /**\n   * Send diagnostics to Kiro through MCP\n   */\n  async sendDiagnosticsToKiro(\n    diagnostics: any,\n    correlationId: string\n  ): Promise<void> {\n    // Check if MCP is available\n    if (!this.isAvailable()) {\n      throw new Error(\"MCP router is not available\");\n    }\n\n    const bridgeMessage: KiroBridgeMessage = {\n      type: \"diagnostics\",\n      source: \"bedrock_support\",\n      payload: diagnostics,\n      timestamp: new Date(),\n      correlationId,\n      routingPath: \"mcp\",\n    };\n\n    await this.sendKiroBridgeMessage(bridgeMessage);\n  }\n\n  /**\n   * Receive execution data from Kiro\n   */\n  async receiveKiroExecutionData(\n    executionData: any,\n    correlationId: string\n  ): Promise<void> {\n    const bridgeMessage: KiroBridgeMessage = {\n      type: \"execution_data\",\n      source: \"kiro\",\n      payload: executionData,\n      timestamp: new Date(),\n      correlationId,\n      routingPath: \"mcp\",\n    };\n\n    // Process execution data for support operations\n    await this.processKiroExecutionData(bridgeMessage);\n  }\n\n  /**\n   * Get MCP router metrics\n   */\n  getMetrics() {\n    return {\n      ...this.metrics,\n      healthStatus: this.healthStatus,\n      queueSize: this.messageQueue.size,\n      priorityQueueSize: this.priorityQueue.length,\n      pendingOperations: this.pendingMessages.size,\n      totalQueuedOperations: this.messageQueue.size + this.priorityQueue.length,\n    };\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    // Clear all tracked intervals\n    this.activeIntervals.forEach((interval) => {\n      clearInterval(interval);\n    });\n    this.activeIntervals.clear();\n\n    // Clear all tracked timeouts\n    this.activeTimeouts.forEach((timeout) => {\n      clearTimeout(timeout);\n    });\n    this.activeTimeouts.clear();\n\n    // Clear specific intervals and timeouts\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n      this.healthCheckInterval = undefined;\n    }\n    if (this.connectionRetryTimeout) {\n      clearTimeout(this.connectionRetryTimeout);\n      this.connectionRetryTimeout = undefined;\n    }\n\n    // Clean up all pending message timeouts\n    this.pendingMessages.forEach((queuedMessage) => {\n      if (queuedMessage.timeoutId) {\n        clearTimeout(queuedMessage.timeoutId);\n      }\n      queuedMessage.reject(new Error(\"MCP router destroyed\"));\n    });\n\n    // Clean up priority queue timeouts\n    this.priorityQueue.forEach((queuedMessage) => {\n      if (queuedMessage.timeoutId) {\n        clearTimeout(queuedMessage.timeoutId);\n      }\n      queuedMessage.reject(new Error(\"MCP router destroyed\"));\n    });\n\n    // Close connection\n    if (this.connection) {\n      this.connection.close();\n      this.connection = null;\n    }\n\n    // Clear queues\n    this.messageQueue.clear();\n    this.pendingMessages.clear();\n    this.priorityQueue = [];\n  }\n\n  // Private implementation methods\n\n  private initializeHealthStatus(): MCPHealthStatus {\n    return {\n      route: \"mcp\",\n      isHealthy: false,\n      latencyMs: 0,\n      successRate: 1.0,\n      lastCheck: new Date(),\n      consecutiveFailures: 0,\n      connectionStatus: \"disconnected\",\n      queueSize: 0,\n      pendingOperations: 0,\n      lastSuccessfulOperation: null,\n      errorRate: 0,\n    };\n  }\n\n  private initializeMetrics() {\n    return {\n      totalMessages: 0,\n      successfulMessages: 0,\n      failedMessages: 0,\n      averageLatency: 0,\n      queueOverflows: 0,\n      connectionResets: 0,\n    };\n  }\n\n  private async initializeConnection(): Promise<void> {\n    try {\n      this.connection = new WebSocket(this.config.endpoint);\n\n      this.connection.onopen = () => {\n        console.log(\"MCP connection established\");\n        this.healthStatus.connectionStatus = \"connected\";\n        this.healthStatus.isHealthy = true;\n        this.startHealthMonitoring();\n\n        // Handle connection recovery and process queued messages\n        this.handleConnectionRecovery();\n        this.processPriorityQueue();\n      };\n\n      this.connection.onmessage = (event) => {\n        this.handleMessage(event.data);\n      };\n\n      this.connection.onclose = () => {\n        console.log(\"MCP connection closed\");\n        // Only change to disconnected if not already in error state\n        if (this.healthStatus.connectionStatus !== \"error\") {\n          this.healthStatus.connectionStatus = \"disconnected\";\n        }\n        this.healthStatus.isHealthy = false;\n        this.scheduleReconnection();\n      };\n\n      this.connection.onerror = (error) => {\n        console.error(\"MCP connection error:\", error);\n        this.healthStatus.connectionStatus = \"error\";\n        this.healthStatus.isHealthy = false;\n        this.metrics.connectionResets++;\n\n        // Don't immediately reconnect on error - wait for close event\n        // This allows the error state to be observed in tests\n      };\n    } catch (error) {\n      console.error(\"Failed to initialize MCP connection:\", error);\n      this.scheduleReconnection();\n    }\n  }\n\n  private async ensureConnection(): Promise<void> {\n    if (this.connection?.readyState === WebSocket.OPEN) {\n      return; // Already connected\n    }\n\n    if (this.connection?.readyState === WebSocket.CONNECTING) {\n      // Wait for connection to establish\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          reject(new Error(\"Connection timeout\"));\n        }, this.config.timeout);\n\n        const checkConnection = () => {\n          if (this.connection?.readyState === WebSocket.OPEN) {\n            clearTimeout(timeout);\n            resolve(void 0);\n          } else if (this.connection?.readyState === WebSocket.CLOSED) {\n            clearTimeout(timeout);\n            reject(new Error(\"Connection failed\"));\n          } else {\n            setTimeout(checkConnection, 100);\n          }\n        };\n\n        checkConnection();\n      });\n    } else {\n      // Reconnect\n      await this.initializeConnection();\n      await this.ensureConnection();\n    }\n  }\n\n  private async executeWithRetry(\n    message: MCPMessage\n  ): Promise<SupportOperationResponse> {\n    let lastError: Error | null = null;\n\n    for (let attempt = 0; attempt <= this.config.maxRetries; attempt++) {\n      try {\n        message.retryCount = attempt;\n        return await this.sendMessage(message);\n      } catch (error) {\n        lastError = error as Error;\n\n        if (attempt < this.config.maxRetries) {\n          const delay = this.config.retryDelay * Math.pow(2, attempt);\n          console.log(\n            `MCP operation failed, retrying in ${delay}ms (attempt ${\n              attempt + 1\n            }/${this.config.maxRetries})`\n          );\n          await new Promise((resolve) => setTimeout(resolve, delay));\n        }\n      }\n    }\n\n    throw lastError || new Error(\"MCP operation failed after all retries\");\n  }\n\n  private async sendMessage(\n    message: MCPMessage\n  ): Promise<SupportOperationResponse> {\n    return new Promise((resolve, reject) => {\n      // Check queue size before adding to queue\n      if (this.messageQueue.size >= this.config.queueMaxSize) {\n        this.metrics.queueOverflows++;\n        reject(new Error(\"Message queue is full\"));\n        return;\n      }\n\n      // Add to queue\n      const queuedMessage: QueuedMessage = {\n        message,\n        resolve,\n        reject,\n        enqueuedAt: new Date(),\n        attempts: 0,\n      };\n\n      this.messageQueue.set(message.id, queuedMessage);\n\n      // Set timeout for the operation\n      const timeoutId = setTimeout(() => {\n        if (this.pendingMessages.has(message.id)) {\n          this.pendingMessages.delete(message.id);\n          this.messageQueue.delete(message.id);\n          this.removePendingMessage(message.id);\n          reject(new Error(\"MCP operation timeout\"));\n        }\n      }, message.timeout || this.config.timeout);\n\n      // Store timeout ID for cleanup\n      queuedMessage.timeoutId = timeoutId;\n\n      // Try to send immediately or queue for later\n      if (this.connection?.readyState === WebSocket.OPEN) {\n        this.sendMessageImmediate(queuedMessage);\n      } else {\n        // Add to priority queue for processing when connection is available\n        this.addToPriorityQueue(queuedMessage);\n      }\n    });\n  }\n\n  private sendMessageImmediate(queuedMessage: QueuedMessage): void {\n    try {\n      // Check if we have room for pending operations\n      if (this.pendingMessages.size >= this.config.queueMaxSize) {\n        // Clean up and reject due to pending queue full\n        if (queuedMessage.timeoutId) {\n          clearTimeout(queuedMessage.timeoutId);\n        }\n        this.messageQueue.delete(queuedMessage.message.id);\n        this.metrics.queueOverflows++;\n        queuedMessage.reject(new Error(\"Pending operations queue is full\"));\n        return;\n      }\n\n      this.pendingMessages.set(queuedMessage.message.id, queuedMessage);\n      this.connection!.send(JSON.stringify(queuedMessage.message));\n    } catch (error) {\n      // Clean up on send error\n      if (queuedMessage.timeoutId) {\n        clearTimeout(queuedMessage.timeoutId);\n      }\n      this.messageQueue.delete(queuedMessage.message.id);\n      this.pendingMessages.delete(queuedMessage.message.id);\n      queuedMessage.reject(error as Error);\n    }\n  }\n\n  private addToPriorityQueue(queuedMessage: QueuedMessage): void {\n    // Insert based on priority (emergency > critical > high > medium > low)\n    const priorityOrder = {\n      emergency: 0,\n      critical: 1,\n      high: 2,\n      medium: 3,\n      low: 4,\n    };\n\n    const messagePriority = priorityOrder[queuedMessage.message.priority] || 4;\n\n    let insertIndex = this.priorityQueue.length;\n    for (let i = 0; i < this.priorityQueue.length; i++) {\n      const queuePriority =\n        priorityOrder[this.priorityQueue[i].message.priority] || 4;\n      if (messagePriority < queuePriority) {\n        insertIndex = i;\n        break;\n      }\n    }\n\n    this.priorityQueue.splice(insertIndex, 0, queuedMessage);\n  }\n\n  private processPriorityQueue(): void {\n    while (\n      this.priorityQueue.length > 0 &&\n      this.connection?.readyState === WebSocket.OPEN\n    ) {\n      const queuedMessage = this.priorityQueue.shift()!;\n      this.sendMessageImmediate(queuedMessage);\n    }\n  }\n\n  private removePendingMessage(messageId: string): void {\n    // Remove from priority queue if present\n    const queueIndex = this.priorityQueue.findIndex(\n      (q) => q.message.id === messageId\n    );\n    if (queueIndex >= 0) {\n      this.priorityQueue.splice(queueIndex, 1);\n    }\n  }\n\n  private handleMessage(data: string): void {\n    try {\n      const message: MCPMessage = JSON.parse(data);\n\n      // Handle response messages\n      if (message.type === \"response\" && this.pendingMessages.has(message.id)) {\n        const queuedMessage = this.pendingMessages.get(message.id)!;\n\n        // Clean up timeout\n        if (queuedMessage.timeoutId) {\n          clearTimeout(queuedMessage.timeoutId);\n        }\n\n        this.pendingMessages.delete(message.id);\n        this.messageQueue.delete(message.id);\n\n        if (message.error) {\n          queuedMessage.reject(new Error(message.error.message));\n        } else {\n          const messageTimestamp =\n            message.timestamp instanceof Date\n              ? message.timestamp.getTime()\n              : new Date(message.timestamp).getTime();\n\n          queuedMessage.resolve({\n            success: true,\n            operationId: message.id,\n            latencyMs: Date.now() - messageTimestamp,\n            timestamp: new Date(),\n            text: message.result?.text,\n            toolCalls: message.result?.toolCalls,\n          });\n        }\n      }\n\n      // Handle notification messages (from Kiro)\n      if (message.type === \"notification\") {\n        this.handleKiroNotification(message);\n      }\n    } catch (error) {\n      console.error(\"Failed to handle MCP message:\", error);\n    }\n  }\n\n  private async sendKiroBridgeMessage(\n    message: KiroBridgeMessage\n  ): Promise<void> {\n    const mcpMessage: MCPMessage = {\n      id: this.generateMessageId(),\n      type: \"notification\",\n      method: \"kiro_bridge\",\n      params: message,\n      timestamp: new Date(),\n      correlationId: message.correlationId,\n      retryCount: 0,\n      priority: \"medium\",\n      timeout: 5000, // 5 second timeout for bridge messages\n    };\n\n    // For notifications, we don't need to wait for a response\n    // Just send and resolve immediately\n    if (this.connection?.readyState === WebSocket.OPEN) {\n      try {\n        this.connection.send(JSON.stringify(mcpMessage));\n      } catch (error) {\n        throw new Error(`Failed to send Kiro bridge message: ${error}`);\n      }\n    } else {\n      throw new Error(\"MCP connection not available\");\n    }\n  }\n\n  private async processKiroExecutionData(\n    message: KiroBridgeMessage\n  ): Promise<void> {\n    // Process execution data for support analysis\n    console.log(`Processing Kiro execution data: ${message.correlationId}`);\n\n    // This would integrate with the meta monitor and implementation support\n    // For now, just log the received data\n    this.logOperation(\"kiro_data\", null, message);\n  }\n\n  private handleKiroNotification(message: MCPMessage): void {\n    console.log(`Received Kiro notification: ${message.method}`);\n\n    // Handle different types of notifications from Kiro\n    switch (message.method) {\n      case \"execution_update\":\n        // Handle execution updates\n        break;\n      case \"health_check\":\n        // Respond to health checks\n        this.respondToHealthCheck(message);\n        break;\n      default:\n        console.log(`Unknown notification method: ${message.method}`);\n    }\n  }\n\n  private respondToHealthCheck(message: MCPMessage): void {\n    const response: MCPMessage = {\n      id: this.generateMessageId(),\n      type: \"response\",\n      method: \"health_check_response\",\n      result: {\n        status: \"healthy\",\n        timestamp: new Date(),\n        metrics: this.getMetrics(),\n      },\n      timestamp: new Date(),\n      correlationId: message.correlationId,\n      retryCount: 0,\n      priority: \"high\",\n    };\n\n    if (this.connection?.readyState === WebSocket.OPEN) {\n      this.connection.send(JSON.stringify(response));\n    }\n  }\n\n  private scheduleReconnection(): void {\n    if (this.connectionRetryTimeout) {\n      clearTimeout(this.connectionRetryTimeout);\n      this.activeTimeouts.delete(this.connectionRetryTimeout);\n    }\n\n    this.connectionRetryTimeout = setTimeout(() => {\n      console.log(\"Attempting MCP reconnection...\");\n      this.initializeConnection();\n    }, 5000); // Retry after 5 seconds\n\n    this.activeTimeouts.add(this.connectionRetryTimeout);\n  }\n\n  /**\n   * Handle connection recovery - retry failed messages\n   */\n  private handleConnectionRecovery(): void {\n    // Move pending messages back to priority queue for retry\n    const failedMessages: QueuedMessage[] = [];\n\n    this.pendingMessages.forEach((queuedMessage) => {\n      // Only retry if not exceeded max attempts\n      if (queuedMessage.attempts < this.config.maxRetries) {\n        queuedMessage.attempts++;\n        queuedMessage.message.retryCount = queuedMessage.attempts;\n        failedMessages.push(queuedMessage);\n      } else {\n        // Reject messages that exceeded retry limit\n        if (queuedMessage.timeoutId) {\n          clearTimeout(queuedMessage.timeoutId);\n        }\n        queuedMessage.reject(\n          new Error(\"MCP operation failed after max retries\")\n        );\n      }\n    });\n\n    // Clear pending messages\n    this.pendingMessages.clear();\n\n    // Add failed messages back to priority queue\n    failedMessages.forEach((queuedMessage) => {\n      this.addToPriorityQueue(queuedMessage);\n    });\n\n    // Process the queue\n    this.processPriorityQueue();\n  }\n\n  private startHealthMonitoring(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n      this.activeIntervals.delete(this.healthCheckInterval);\n    }\n\n    this.healthCheckInterval = setInterval(async () => {\n      try {\n        await this.performHealthCheck();\n      } catch (error) {\n        console.error(\"MCP health check failed:\", error);\n        this.healthStatus.consecutiveFailures++;\n      }\n    }, this.config.healthCheckInterval);\n\n    this.activeIntervals.add(this.healthCheckInterval);\n  }\n\n  private async performHealthCheck(): Promise<void> {\n    if (this.connection?.readyState === WebSocket.OPEN) {\n      const healthMessage: MCPMessage = {\n        id: this.generateMessageId(),\n        type: \"request\",\n        method: \"ping\",\n        timestamp: new Date(),\n        correlationId: this.generateCorrelationId(),\n        retryCount: 0,\n        priority: \"low\",\n      };\n\n      try {\n        await this.sendMessage(healthMessage);\n        this.healthStatus.consecutiveFailures = 0;\n        this.healthStatus.lastSuccessfulOperation = new Date();\n      } catch (error) {\n        this.healthStatus.consecutiveFailures++;\n      }\n    }\n  }\n\n  private updateMetrics(success: boolean, latencyMs: number): void {\n    this.metrics.totalMessages++;\n\n    if (success) {\n      this.metrics.successfulMessages++;\n    } else {\n      this.metrics.failedMessages++;\n    }\n\n    // Update average latency (rolling average)\n    const totalLatency =\n      this.metrics.averageLatency * (this.metrics.totalMessages - 1) +\n      latencyMs;\n    this.metrics.averageLatency = totalLatency / this.metrics.totalMessages;\n  }\n\n  private logOperation(\n    type: \"success\" | \"error\" | \"kiro_data\",\n    message: MCPMessage | null,\n    response: any,\n    error?: Error\n  ): void {\n    const logEntry = {\n      timestamp: new Date(),\n      type,\n      messageId: message?.id,\n      correlationId: message?.correlationId,\n      method: message?.method,\n      success: type === \"success\",\n      error: error?.message,\n      latencyMs: response?.latencyMs,\n    };\n\n    console.log(`[MCPRouter] ${JSON.stringify(logEntry)}`);\n  }\n\n  private generateMessageId(): string {\n    return `mcp-${Date.now()}-${Math.random().toString(36).substring(2, 11)}`;\n  }\n\n  private generateCorrelationId(): string {\n    return `mcp-corr-${Date.now()}-${Math.random()\n      .toString(36)\n      .substring(2, 11)}`;\n  }\n}\n\n// Export types for external use\nexport {\n  type KiroBridgeMessage,\n  type MCPConnectionConfig,\n  type MCPError,\n  type MCPHealthStatus,\n  type MCPMessage,\n};\n"],"version":3}
{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/win-rate-tracker.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/win-rate-tracker.ts"],"sourcesContent":["/**\n * Win-Rate Tracker for A/B Testing\n *\n * Implements:\n * - Automated win-rate calculation\n * - Statistical significance testing\n * - Experiment performance tracking\n * - Rollback trigger detection\n * - Business metrics correlation\n */\n\nimport { AiRequest, AiResponse, Provider } from \"./types\";\n\nexport interface ExperimentResult {\n  experimentId: string;\n  variant: \"control\" | \"treatment\";\n  provider: Provider;\n  modelId: string;\n  request: AiRequest;\n  response: AiResponse;\n  userFeedback?: number; // 1-5 rating\n  businessMetric?: number; // Conversion, revenue, etc.\n  timestamp: Date;\n}\n\nexport interface WinRateMetrics {\n  experimentId: string;\n  controlWinRate: number;\n  treatmentWinRate: number;\n  totalComparisons: number;\n  statisticalSignificance: number;\n  confidenceInterval: [number, number];\n  recommendedAction: \"continue\" | \"promote\" | \"rollback\";\n  businessImpact: {\n    conversionLift: number;\n    revenueLift: number;\n    costImpact: number;\n  };\n}\n\nexport interface ComparisonResult {\n  winner: \"control\" | \"treatment\" | \"tie\";\n  confidence: number;\n  metrics: {\n    quality: number;\n    latency: number;\n    cost: number;\n    userSatisfaction: number;\n  };\n}\n\nexport interface AutomatedReport {\n  reportId: string;\n  experimentId: string;\n  generatedAt: Date;\n  reportType: \"daily\" | \"weekly\" | \"monthly\" | \"experiment-complete\";\n  summary: {\n    totalExperiments: number;\n    activeExperiments: number;\n    completedExperiments: number;\n    promotedExperiments: number;\n    rolledBackExperiments: number;\n  };\n  topPerformers: {\n    experimentId: string;\n    winRate: number;\n    businessImpact: number;\n    recommendation: string;\n  }[];\n  alerts: {\n    type:\n      | \"performance-degradation\"\n      | \"statistical-significance\"\n      | \"business-impact\";\n    experimentId: string;\n    message: string;\n    severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n    actionRequired: boolean;\n  }[];\n  recommendations: {\n    experimentId: string;\n    action: \"continue\" | \"promote\" | \"rollback\" | \"investigate\";\n    reason: string;\n    confidence: number;\n    expectedImpact: string;\n  }[];\n  trends: {\n    winRateOverTime: { date: Date; winRate: number }[];\n    businessImpactOverTime: { date: Date; impact: number }[];\n    costEfficiencyOverTime: { date: Date; efficiency: number }[];\n  };\n}\n\nexport interface ReportingConfig {\n  enableDailyReports: boolean;\n  enableWeeklyReports: boolean;\n  enableMonthlyReports: boolean;\n  enableRealTimeAlerts: boolean;\n  alertThresholds: {\n    winRateDropThreshold: number;\n    businessImpactThreshold: number;\n    costIncreaseThreshold: number;\n  };\n  reportRecipients: string[];\n  reportFormat: \"json\" | \"html\" | \"pdf\";\n}\n\n/**\n * Win-Rate Tracker for A/B Testing\n */\nexport class WinRateTracker {\n  private experiments: Map<string, ExperimentResult[]> = new Map();\n  private comparisons: Map<string, ComparisonResult[]> = new Map();\n  private reports: Map<string, AutomatedReport> = new Map();\n  private winRateThreshold: number = 0.85; // 85% win rate target\n  private significanceThreshold: number = 0.95; // 95% confidence\n  private minSampleSize: number = 100;\n  private reportingConfig: ReportingConfig;\n\n  constructor(config?: {\n    winRateThreshold?: number;\n    significanceThreshold?: number;\n    minSampleSize?: number;\n    reportingConfig?: ReportingConfig;\n  }) {\n    if (config) {\n      this.winRateThreshold = config.winRateThreshold || this.winRateThreshold;\n      this.significanceThreshold =\n        config.significanceThreshold || this.significanceThreshold;\n      this.minSampleSize = config.minSampleSize || this.minSampleSize;\n    }\n\n    // Default reporting configuration\n    this.reportingConfig = config?.reportingConfig || {\n      enableDailyReports: true,\n      enableWeeklyReports: true,\n      enableMonthlyReports: true,\n      enableRealTimeAlerts: true,\n      alertThresholds: {\n        winRateDropThreshold: 0.1, // 10% drop\n        businessImpactThreshold: -0.05, // -5% business impact\n        costIncreaseThreshold: 0.2, // 20% cost increase\n      },\n      reportRecipients: [],\n      reportFormat: \"json\",\n    };\n  }\n\n  /**\n   * Record experiment result\n   */\n  recordResult(result: ExperimentResult): void {\n    const { experimentId } = result;\n\n    if (!this.experiments.has(experimentId)) {\n      this.experiments.set(experimentId, []);\n    }\n\n    this.experiments.get(experimentId)!.push(result);\n\n    // Trigger comparison if we have enough data\n    this.maybeRunComparison(experimentId);\n  }\n\n  /**\n   * Compare two responses and determine winner\n   */\n  compareResponses(\n    experimentId: string,\n    controlResponse: AiResponse,\n    treatmentResponse: AiResponse,\n    userFeedback?: { control: number; treatment: number }\n  ): ComparisonResult {\n    const comparison = this.performComparison(\n      controlResponse,\n      treatmentResponse,\n      userFeedback\n    );\n\n    // Store comparison result\n    if (!this.comparisons.has(experimentId)) {\n      this.comparisons.set(experimentId, []);\n    }\n\n    this.comparisons.get(experimentId)!.push(comparison);\n\n    return comparison;\n  }\n\n  /**\n   * Get win-rate metrics for experiment\n   */\n  getWinRateMetrics(experimentId: string): WinRateMetrics | null {\n    const comparisons = this.comparisons.get(experimentId);\n\n    if (!comparisons || comparisons.length < this.minSampleSize) {\n      return null;\n    }\n\n    const controlWins = comparisons.filter(\n      (c) => c.winner === \"control\"\n    ).length;\n    const treatmentWins = comparisons.filter(\n      (c) => c.winner === \"treatment\"\n    ).length;\n    const ties = comparisons.filter((c) => c.winner === \"tie\").length;\n\n    const totalComparisons = comparisons.length;\n    const controlWinRate = controlWins / (totalComparisons - ties);\n    const treatmentWinRate = treatmentWins / (totalComparisons - ties);\n\n    const statisticalSignificance = this.calculateStatisticalSignificance(\n      controlWins,\n      treatmentWins,\n      totalComparisons - ties\n    );\n\n    const confidenceInterval = this.calculateConfidenceInterval(\n      treatmentWinRate,\n      totalComparisons - ties\n    );\n\n    const businessImpact = this.calculateBusinessImpact(experimentId);\n\n    const recommendedAction = this.getRecommendedAction(\n      treatmentWinRate,\n      statisticalSignificance,\n      businessImpact\n    );\n\n    return {\n      experimentId,\n      controlWinRate,\n      treatmentWinRate,\n      totalComparisons,\n      statisticalSignificance,\n      confidenceInterval,\n      recommendedAction,\n      businessImpact,\n    };\n  }\n\n  /**\n   * Check if experiment should be rolled back\n   */\n  shouldRollback(experimentId: string): boolean {\n    const metrics = this.getWinRateMetrics(experimentId);\n\n    if (!metrics) {\n      return false;\n    }\n\n    // Rollback if treatment is significantly worse\n    return (\n      metrics.treatmentWinRate < 0.5 && // Treatment losing\n      metrics.statisticalSignificance > this.significanceThreshold && // Statistically significant\n      metrics.businessImpact.revenueLift < -0.05 // Revenue impact > -5%\n    );\n  }\n\n  /**\n   * Check if experiment should be promoted\n   */\n  shouldPromote(experimentId: string): boolean {\n    const metrics = this.getWinRateMetrics(experimentId);\n\n    if (!metrics) {\n      return false;\n    }\n\n    // Promote if treatment is significantly better\n    return (\n      metrics.treatmentWinRate > this.winRateThreshold && // High win rate\n      metrics.statisticalSignificance > this.significanceThreshold && // Statistically significant\n      metrics.businessImpact.revenueLift > 0.02 // Revenue lift > 2%\n    );\n  }\n\n  /**\n   * Get all active experiments\n   */\n  getActiveExperiments(): string[] {\n    return Array.from(this.experiments.keys());\n  }\n\n  /**\n   * Generate automated report\n   */\n  generateAutomatedReport(\n    reportType: \"daily\" | \"weekly\" | \"monthly\" | \"experiment-complete\",\n    experimentId?: string\n  ): AutomatedReport {\n    const reportId = `report-${Date.now()}-${Math.random()\n      .toString(36)\n      .substr(2, 9)}`;\n    const generatedAt = new Date();\n\n    const activeExperiments = this.getActiveExperiments();\n    const summary = this.generateReportSummary(activeExperiments);\n    const topPerformers = this.getTopPerformers(activeExperiments);\n    const alerts = this.generateAlerts(activeExperiments);\n    const recommendations = this.generateRecommendations(activeExperiments);\n    const trends = this.generateTrends(activeExperiments);\n\n    const report: AutomatedReport = {\n      reportId,\n      experimentId: experimentId || \"all\",\n      generatedAt,\n      reportType,\n      summary,\n      topPerformers,\n      alerts,\n      recommendations,\n      trends,\n    };\n\n    this.reports.set(reportId, report);\n\n    // Trigger real-time alerts if enabled\n    if (this.reportingConfig.enableRealTimeAlerts) {\n      this.processRealTimeAlerts(alerts);\n    }\n\n    return report;\n  }\n\n  /**\n   * Get all generated reports\n   */\n  getReports(): AutomatedReport[] {\n    return Array.from(this.reports.values()).sort(\n      (a, b) => b.generatedAt.getTime() - a.generatedAt.getTime()\n    );\n  }\n\n  /**\n   * Get specific report by ID\n   */\n  getReport(reportId: string): AutomatedReport | null {\n    return this.reports.get(reportId) || null;\n  }\n\n  /**\n   * Schedule automated reporting\n   */\n  scheduleAutomatedReporting(): void {\n    if (this.reportingConfig.enableDailyReports) {\n      // In a real implementation, this would use a scheduler like node-cron\n      console.log(\"Daily reporting scheduled\");\n    }\n\n    if (this.reportingConfig.enableWeeklyReports) {\n      console.log(\"Weekly reporting scheduled\");\n    }\n\n    if (this.reportingConfig.enableMonthlyReports) {\n      console.log(\"Monthly reporting scheduled\");\n    }\n  }\n\n  /**\n   * Update reporting configuration\n   */\n  updateReportingConfig(config: Partial<ReportingConfig>): void {\n    this.reportingConfig = { ...this.reportingConfig, ...config };\n  }\n\n  /**\n   * Export report in specified format\n   */\n  exportReport(reportId: string, format?: \"json\" | \"html\" | \"pdf\"): string {\n    const report = this.getReport(reportId);\n    if (!report) {\n      throw new Error(`Report ${reportId} not found`);\n    }\n\n    const exportFormat = format || this.reportingConfig.reportFormat;\n\n    switch (exportFormat) {\n      case \"json\":\n        return JSON.stringify(report, null, 2);\n      case \"html\":\n        return this.generateHtmlReport(report);\n      case \"pdf\":\n        return this.generatePdfReport(report);\n      default:\n        return JSON.stringify(report, null, 2);\n    }\n  }\n\n  /**\n   * Get experiment summary\n   */\n  getExperimentSummary(experimentId: string): {\n    totalResults: number;\n    controlResults: number;\n    treatmentResults: number;\n    averageLatency: { control: number; treatment: number };\n    averageCost: { control: number; treatment: number };\n    winRateMetrics: WinRateMetrics | null;\n  } | null {\n    const results = this.experiments.get(experimentId);\n\n    if (!results) {\n      return null;\n    }\n\n    const controlResults = results.filter((r) => r.variant === \"control\");\n    const treatmentResults = results.filter((r) => r.variant === \"treatment\");\n\n    const avgControlLatency =\n      controlResults.length > 0\n        ? controlResults.reduce((sum, r) => sum + r.response.latencyMs, 0) /\n          controlResults.length\n        : 0;\n\n    const avgTreatmentLatency =\n      treatmentResults.length > 0\n        ? treatmentResults.reduce((sum, r) => sum + r.response.latencyMs, 0) /\n          treatmentResults.length\n        : 0;\n\n    const avgControlCost =\n      controlResults.length > 0\n        ? controlResults.reduce((sum, r) => sum + r.response.costEuro, 0) /\n          controlResults.length\n        : 0;\n\n    const avgTreatmentCost =\n      treatmentResults.length > 0\n        ? treatmentResults.reduce((sum, r) => sum + r.response.costEuro, 0) /\n          treatmentResults.length\n        : 0;\n\n    return {\n      totalResults: results.length,\n      controlResults: controlResults.length,\n      treatmentResults: treatmentResults.length,\n      averageLatency: {\n        control: avgControlLatency,\n        treatment: avgTreatmentLatency,\n      },\n      averageCost: {\n        control: avgControlCost,\n        treatment: avgTreatmentCost,\n      },\n      winRateMetrics: this.getWinRateMetrics(experimentId),\n    };\n  }\n\n  /**\n   * Perform comparison between responses\n   */\n  private performComparison(\n    controlResponse: AiResponse,\n    treatmentResponse: AiResponse,\n    userFeedback?: { control: number; treatment: number }\n  ): ComparisonResult {\n    const metrics = {\n      quality: this.compareQuality(\n        controlResponse,\n        treatmentResponse,\n        userFeedback\n      ),\n      latency: this.compareLatency(controlResponse, treatmentResponse),\n      cost: this.compareCost(controlResponse, treatmentResponse),\n      userSatisfaction: this.compareUserSatisfaction(userFeedback),\n    };\n\n    // Weighted scoring\n    const weights = {\n      quality: 0.4,\n      latency: 0.2,\n      cost: 0.2,\n      userSatisfaction: 0.2,\n    };\n\n    // Calculate composite score\n    // All metrics now follow the same convention: positive = treatment better, negative = control better\n    const compositeScore =\n      metrics.quality * weights.quality +\n      metrics.latency * weights.latency +\n      metrics.cost * weights.cost +\n      metrics.userSatisfaction * weights.userSatisfaction;\n\n    let winner: \"control\" | \"treatment\" | \"tie\";\n    let confidence: number;\n\n    // Epsilon for \"nearly equal\" to avoid flapping\n    const EPS = 1e-3;\n\n    if (Math.abs(compositeScore) <= EPS) {\n      winner = \"tie\";\n      confidence = 0.5;\n    } else if (compositeScore > 0) {\n      winner = \"treatment\";\n      confidence = Math.min(0.95, 0.5 + Math.abs(compositeScore));\n    } else {\n      winner = \"control\";\n      confidence = Math.min(0.95, 0.5 + Math.abs(compositeScore));\n    }\n\n    return {\n      winner,\n      confidence,\n      metrics,\n    };\n  }\n\n  /**\n   * Compare quality between responses\n   */\n  private compareQuality(\n    controlResponse: AiResponse,\n    treatmentResponse: AiResponse,\n    userFeedback?: { control: number; treatment: number }\n  ): number {\n    // If we have user feedback, use that\n    if (userFeedback) {\n      // Higher feedback is better - positive means treatment is better\n      return this.improvementHigherIsBetter(\n        userFeedback.control,\n        userFeedback.treatment\n      );\n    }\n\n    // Otherwise, use heuristics\n    const controlLength = controlResponse.text?.length || 0;\n    const treatmentLength = treatmentResponse.text?.length || 0;\n\n    // Prefer responses that are not too short or too long\n    const optimalLength = 500;\n    const controlLengthScore =\n      1 - Math.abs(controlLength - optimalLength) / optimalLength;\n    const treatmentLengthScore =\n      1 - Math.abs(treatmentLength - optimalLength) / optimalLength;\n\n    // Higher quality score is better - positive means treatment is better\n    return this.improvementHigherIsBetter(\n      controlLengthScore,\n      treatmentLengthScore\n    );\n  }\n\n  /**\n   * Helper: robust normalization function\n   */\n  private safeNorm(n: number, d: number): number {\n    if (!isFinite(n) || !isFinite(d) || d === 0) return 0;\n    // clamp to [-1, 1] just in case\n    const v = n / d;\n    return Math.max(-1, Math.min(1, v));\n  }\n\n  /**\n   * For metrics where LOWER is better (latency, cost):\n   * positive => treatment better; negative => control better\n   */\n  private improvementLowerIsBetter(control: number, treatment: number): number {\n    const denom = Math.max(Math.abs(control), Math.abs(treatment), 1e-9);\n    return this.safeNorm(control - treatment, denom);\n  }\n\n  /**\n   * For metrics where HIGHER is better (quality, feedback, win rate):\n   * positive => treatment better; negative => control better\n   */\n  private improvementHigherIsBetter(\n    control: number,\n    treatment: number\n  ): number {\n    const denom = Math.max(Math.abs(control), Math.abs(treatment), 1e-9);\n    return this.safeNorm(treatment - control, denom);\n  }\n\n  /**\n   * Compare latency between responses\n   */\n  private compareLatency(\n    controlResponse: AiResponse,\n    treatmentResponse: AiResponse\n  ): number {\n    const controlLatency = controlResponse.latencyMs;\n    const treatmentLatency = treatmentResponse.latencyMs;\n\n    // Lower latency is better - positive means treatment is faster\n    return this.improvementLowerIsBetter(controlLatency, treatmentLatency);\n  }\n\n  /**\n   * Compare cost between responses\n   */\n  private compareCost(\n    controlResponse: AiResponse,\n    treatmentResponse: AiResponse\n  ): number {\n    const controlCost = controlResponse.costEuro;\n    const treatmentCost = treatmentResponse.costEuro;\n\n    // Lower cost is better - positive means treatment is cheaper\n    return this.improvementLowerIsBetter(controlCost, treatmentCost);\n  }\n\n  /**\n   * Compare user satisfaction\n   */\n  private compareUserSatisfaction(userFeedback?: {\n    control: number;\n    treatment: number;\n  }): number {\n    if (!userFeedback) {\n      return 0;\n    }\n\n    // Higher satisfaction is better - positive means treatment is better\n    return this.improvementHigherIsBetter(\n      userFeedback.control,\n      userFeedback.treatment\n    );\n  }\n\n  /**\n   * Maybe run comparison if we have enough data\n   */\n  private maybeRunComparison(experimentId: string): void {\n    const results = this.experiments.get(experimentId)!;\n\n    // Check if we have paired results to compare\n    const controlResults = results.filter((r) => r.variant === \"control\");\n    const treatmentResults = results.filter((r) => r.variant === \"treatment\");\n\n    if (controlResults.length > 0 && treatmentResults.length > 0) {\n      // Find matching requests for comparison\n      for (const control of controlResults) {\n        const matchingTreatment = treatmentResults.find((t) =>\n          this.requestsMatch(control.request, t.request)\n        );\n\n        if (matchingTreatment) {\n          this.compareResponses(\n            experimentId,\n            control.response,\n            matchingTreatment.response,\n            {\n              control: control.userFeedback || 3,\n              treatment: matchingTreatment.userFeedback || 3,\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if two requests match for comparison\n   */\n  private requestsMatch(req1: AiRequest, req2: AiRequest): boolean {\n    return (\n      req1.prompt === req2.prompt &&\n      req1.context.domain === req2.context.domain &&\n      req1.context.locale === req2.context.locale\n    );\n  }\n\n  /**\n   * Calculate statistical significance\n   */\n  private calculateStatisticalSignificance(\n    controlWins: number,\n    treatmentWins: number,\n    totalComparisons: number\n  ): number {\n    // Simple z-test for proportions\n    const p1 = controlWins / totalComparisons;\n    const p2 = treatmentWins / totalComparisons;\n    const pooledP = (controlWins + treatmentWins) / totalComparisons;\n\n    const se = Math.sqrt(pooledP * (1 - pooledP) * (2 / totalComparisons));\n    const z = Math.abs(p1 - p2) / se;\n\n    // Convert z-score to confidence level (approximation)\n    return Math.min(0.99, 1 - Math.exp((-z * z) / 2));\n  }\n\n  /**\n   * Calculate confidence interval\n   */\n  private calculateConfidenceInterval(\n    winRate: number,\n    sampleSize: number\n  ): [number, number] {\n    const z = 1.96; // 95% confidence\n    const se = Math.sqrt((winRate * (1 - winRate)) / sampleSize);\n\n    return [Math.max(0, winRate - z * se), Math.min(1, winRate + z * se)];\n  }\n\n  /**\n   * Calculate business impact\n   */\n  private calculateBusinessImpact(experimentId: string): {\n    conversionLift: number;\n    revenueLift: number;\n    costImpact: number;\n  } {\n    const results = this.experiments.get(experimentId) || [];\n\n    const controlResults = results.filter((r) => r.variant === \"control\");\n    const treatmentResults = results.filter((r) => r.variant === \"treatment\");\n\n    const controlConversion =\n      controlResults.filter((r) => r.businessMetric && r.businessMetric > 0)\n        .length / controlResults.length;\n    const treatmentConversion =\n      treatmentResults.filter((r) => r.businessMetric && r.businessMetric > 0)\n        .length / treatmentResults.length;\n\n    const controlRevenue =\n      controlResults.reduce((sum, r) => sum + (r.businessMetric || 0), 0) /\n      controlResults.length;\n    const treatmentRevenue =\n      treatmentResults.reduce((sum, r) => sum + (r.businessMetric || 0), 0) /\n      treatmentResults.length;\n\n    const controlCost =\n      controlResults.reduce((sum, r) => sum + r.response.costEuro, 0) /\n      controlResults.length;\n    const treatmentCost =\n      treatmentResults.reduce((sum, r) => sum + r.response.costEuro, 0) /\n      treatmentResults.length;\n\n    return {\n      conversionLift:\n        controlConversion > 0\n          ? (treatmentConversion - controlConversion) / controlConversion\n          : 0,\n      revenueLift:\n        controlRevenue > 0\n          ? (treatmentRevenue - controlRevenue) / controlRevenue\n          : 0,\n      costImpact:\n        controlCost > 0 ? (treatmentCost - controlCost) / controlCost : 0,\n    };\n  }\n\n  /**\n   * Get recommended action\n   */\n  private getRecommendedAction(\n    treatmentWinRate: number,\n    significance: number,\n    businessImpact: {\n      conversionLift: number;\n      revenueLift: number;\n      costImpact: number;\n    }\n  ): \"continue\" | \"promote\" | \"rollback\" {\n    if (significance < this.significanceThreshold) {\n      return \"continue\"; // Not enough data yet\n    }\n\n    if (\n      treatmentWinRate > this.winRateThreshold &&\n      businessImpact.revenueLift > 0.02\n    ) {\n      return \"promote\";\n    }\n\n    if (treatmentWinRate < 0.5 && businessImpact.revenueLift < -0.05) {\n      return \"rollback\";\n    }\n\n    return \"continue\";\n  }\n\n  /**\n   * Generate report summary\n   */\n  private generateReportSummary(activeExperiments: string[]): {\n    totalExperiments: number;\n    activeExperiments: number;\n    completedExperiments: number;\n    promotedExperiments: number;\n    rolledBackExperiments: number;\n  } {\n    let completedExperiments = 0;\n    let promotedExperiments = 0;\n    let rolledBackExperiments = 0;\n\n    for (const experimentId of activeExperiments) {\n      const metrics = this.getWinRateMetrics(experimentId);\n      if (metrics) {\n        if (metrics.recommendedAction === \"promote\") {\n          promotedExperiments++;\n          completedExperiments++;\n        } else if (metrics.recommendedAction === \"rollback\") {\n          rolledBackExperiments++;\n          completedExperiments++;\n        }\n      }\n    }\n\n    return {\n      totalExperiments: activeExperiments.length,\n      activeExperiments: activeExperiments.length - completedExperiments,\n      completedExperiments,\n      promotedExperiments,\n      rolledBackExperiments,\n    };\n  }\n\n  /**\n   * Get top performing experiments\n   */\n  private getTopPerformers(activeExperiments: string[]): {\n    experimentId: string;\n    winRate: number;\n    businessImpact: number;\n    recommendation: string;\n  }[] {\n    const performers = activeExperiments\n      .map((experimentId) => {\n        const metrics = this.getWinRateMetrics(experimentId);\n        if (!metrics) return null;\n\n        return {\n          experimentId,\n          winRate: metrics.treatmentWinRate,\n          businessImpact: metrics.businessImpact.revenueLift,\n          recommendation: metrics.recommendedAction,\n        };\n      })\n      .filter((p) => p !== null)\n      .sort((a, b) => b!.winRate - a!.winRate)\n      .slice(0, 5);\n\n    return performers as {\n      experimentId: string;\n      winRate: number;\n      businessImpact: number;\n      recommendation: string;\n    }[];\n  }\n\n  /**\n   * Generate alerts for experiments\n   */\n  private generateAlerts(activeExperiments: string[]): {\n    type:\n      | \"performance-degradation\"\n      | \"statistical-significance\"\n      | \"business-impact\";\n    experimentId: string;\n    message: string;\n    severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n    actionRequired: boolean;\n  }[] {\n    const alerts: {\n      type:\n        | \"performance-degradation\"\n        | \"statistical-significance\"\n        | \"business-impact\";\n      experimentId: string;\n      message: string;\n      severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n      actionRequired: boolean;\n    }[] = [];\n\n    for (const experimentId of activeExperiments) {\n      const metrics = this.getWinRateMetrics(experimentId);\n      if (!metrics) continue;\n\n      // Performance degradation alert\n      if (\n        metrics.treatmentWinRate < 0.5 &&\n        metrics.statisticalSignificance > 0.8\n      ) {\n        alerts.push({\n          type: \"performance-degradation\",\n          experimentId,\n          message: `Treatment performing significantly worse than control (${(\n            metrics.treatmentWinRate * 100\n          ).toFixed(1)}% win rate)`,\n          severity: \"high\",\n          actionRequired: true,\n        });\n      }\n\n      // Statistical significance alert\n      if (metrics.statisticalSignificance > this.significanceThreshold) {\n        alerts.push({\n          type: \"statistical-significance\",\n          experimentId,\n          message: `Experiment has reached statistical significance (${(\n            metrics.statisticalSignificance * 100\n          ).toFixed(1)}%)`,\n          severity: \"medium\",\n          actionRequired: true,\n        });\n      }\n\n      // Business impact alert\n      if (\n        metrics.businessImpact.revenueLift <\n        this.reportingConfig.alertThresholds.businessImpactThreshold\n      ) {\n        alerts.push({\n          type: \"business-impact\",\n          experimentId,\n          message: `Negative business impact detected (${(\n            metrics.businessImpact.revenueLift * 100\n          ).toFixed(1)}% revenue impact)`,\n          severity: \"critical\",\n          actionRequired: true,\n        });\n      }\n    }\n\n    return alerts;\n  }\n\n  /**\n   * Generate recommendations for experiments\n   */\n  private generateRecommendations(activeExperiments: string[]): {\n    experimentId: string;\n    action: \"continue\" | \"promote\" | \"rollback\" | \"investigate\";\n    reason: string;\n    confidence: number;\n    expectedImpact: string;\n  }[] {\n    return activeExperiments\n      .map((experimentId) => {\n        const metrics = this.getWinRateMetrics(experimentId);\n        if (!metrics) return null;\n\n        let reason = \"\";\n        let expectedImpact = \"\";\n        let action: \"continue\" | \"promote\" | \"rollback\" | \"investigate\" =\n          metrics.recommendedAction;\n\n        switch (metrics.recommendedAction) {\n          case \"promote\":\n            reason = `High win rate (${(metrics.treatmentWinRate * 100).toFixed(\n              1\n            )}%) with positive business impact`;\n            expectedImpact = `+${(\n              metrics.businessImpact.revenueLift * 100\n            ).toFixed(1)}% revenue lift`;\n            break;\n          case \"rollback\":\n            reason = `Poor performance with negative business impact`;\n            expectedImpact = `${(\n              metrics.businessImpact.revenueLift * 100\n            ).toFixed(1)}% revenue impact`;\n            break;\n          case \"continue\":\n            if (metrics.statisticalSignificance < this.significanceThreshold) {\n              reason = \"Insufficient data for decision\";\n              expectedImpact = \"Continue collecting data\";\n            } else {\n              reason = \"Marginal improvement, continue monitoring\";\n              expectedImpact = `${(\n                metrics.businessImpact.revenueLift * 100\n              ).toFixed(1)}% revenue impact`;\n            }\n            break;\n        }\n\n        // Add investigate action for anomalies\n        if (\n          metrics.treatmentWinRate > 0.9 &&\n          metrics.businessImpact.revenueLift < 0\n        ) {\n          action = \"investigate\";\n          reason =\n            \"High win rate but negative business impact - investigate metrics\";\n          expectedImpact = \"Potential measurement issue\";\n        }\n\n        return {\n          experimentId,\n          action,\n          reason,\n          confidence: metrics.statisticalSignificance,\n          expectedImpact,\n        };\n      })\n      .filter((r) => r !== null) as {\n      experimentId: string;\n      action: \"continue\" | \"promote\" | \"rollback\" | \"investigate\";\n      reason: string;\n      confidence: number;\n      expectedImpact: string;\n    }[];\n  }\n\n  /**\n   * Generate trends data\n   */\n  private generateTrends(activeExperiments: string[]): {\n    winRateOverTime: { date: Date; winRate: number }[];\n    businessImpactOverTime: { date: Date; impact: number }[];\n    costEfficiencyOverTime: { date: Date; efficiency: number }[];\n  } {\n    // In a real implementation, this would analyze historical data\n    // For now, we'll generate sample trend data\n    const now = new Date();\n    const trends = {\n      winRateOverTime: [] as { date: Date; winRate: number }[],\n      businessImpactOverTime: [] as { date: Date; impact: number }[],\n      costEfficiencyOverTime: [] as { date: Date; efficiency: number }[],\n    };\n\n    // Generate last 30 days of trend data\n    for (let i = 29; i >= 0; i--) {\n      const date = new Date(now.getTime() - i * 24 * 60 * 60 * 1000);\n\n      // Calculate average metrics for active experiments\n      let totalWinRate = 0;\n      let totalBusinessImpact = 0;\n      let totalCostEfficiency = 0;\n      let validExperiments = 0;\n\n      for (const experimentId of activeExperiments) {\n        const metrics = this.getWinRateMetrics(experimentId);\n        if (metrics) {\n          totalWinRate += metrics.treatmentWinRate;\n          totalBusinessImpact += metrics.businessImpact.revenueLift;\n          totalCostEfficiency += 1 - metrics.businessImpact.costImpact;\n          validExperiments++;\n        }\n      }\n\n      if (validExperiments > 0) {\n        trends.winRateOverTime.push({\n          date,\n          winRate: totalWinRate / validExperiments,\n        });\n        trends.businessImpactOverTime.push({\n          date,\n          impact: totalBusinessImpact / validExperiments,\n        });\n        trends.costEfficiencyOverTime.push({\n          date,\n          efficiency: totalCostEfficiency / validExperiments,\n        });\n      }\n    }\n\n    return trends;\n  }\n\n  /**\n   * Process real-time alerts\n   */\n  private processRealTimeAlerts(\n    alerts: {\n      type:\n        | \"performance-degradation\"\n        | \"statistical-significance\"\n        | \"business-impact\";\n      experimentId: string;\n      message: string;\n      severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n      actionRequired: boolean;\n    }[]\n  ): void {\n    // In a real implementation, this would send notifications\n    // via email, Slack, PagerDuty, etc.\n    const criticalAlerts = alerts.filter(\n      (alert) => alert.severity === \"critical\"\n    );\n    const highAlerts = alerts.filter((alert) => alert.severity === \"high\");\n\n    if (criticalAlerts.length > 0) {\n      console.warn(\n        `🚨 ${criticalAlerts.length} critical alerts detected:`,\n        criticalAlerts\n      );\n    }\n\n    if (highAlerts.length > 0) {\n      console.warn(\n        `⚠️ ${highAlerts.length} high-priority alerts detected:`,\n        highAlerts\n      );\n    }\n  }\n\n  /**\n   * Generate HTML report\n   */\n  private generateHtmlReport(report: AutomatedReport): string {\n    return `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Win-Rate Tracking Report - ${report.reportId}</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        .header { background: #f5f5f5; padding: 20px; border-radius: 5px; }\n        .section { margin: 20px 0; }\n        .alert { padding: 10px; margin: 5px 0; border-radius: 3px; }\n        .alert.critical { background: #ffebee; border-left: 4px solid #f44336; }\n        .alert.high { background: #fff3e0; border-left: 4px solid #ff9800; }\n        .alert.medium { background: #e8f5e8; border-left: 4px solid #4caf50; }\n        table { width: 100%; border-collapse: collapse; }\n        th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }\n        th { background-color: #f2f2f2; }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>Win-Rate Tracking Report</h1>\n        <p><strong>Report ID:</strong> ${report.reportId}</p>\n        <p><strong>Generated:</strong> ${report.generatedAt.toISOString()}</p>\n        <p><strong>Type:</strong> ${report.reportType}</p>\n    </div>\n\n    <div class=\"section\">\n        <h2>Summary</h2>\n        <ul>\n            <li>Total Experiments: ${report.summary.totalExperiments}</li>\n            <li>Active Experiments: ${report.summary.activeExperiments}</li>\n            <li>Completed Experiments: ${\n              report.summary.completedExperiments\n            }</li>\n            <li>Promoted Experiments: ${report.summary.promotedExperiments}</li>\n            <li>Rolled Back Experiments: ${\n              report.summary.rolledBackExperiments\n            }</li>\n        </ul>\n    </div>\n\n    <div class=\"section\">\n        <h2>Alerts</h2>\n        ${report.alerts\n          .map(\n            (alert) => `\n            <div class=\"alert ${alert.severity}\">\n                <strong>${alert.type.toUpperCase()}:</strong> ${alert.message}\n                <br><small>Experiment: ${\n                  alert.experimentId\n                } | Action Required: ${\n              alert.actionRequired ? \"Yes\" : \"No\"\n            }</small>\n            </div>\n        `\n          )\n          .join(\"\")}\n    </div>\n\n    <div class=\"section\">\n        <h2>Top Performers</h2>\n        <table>\n            <tr>\n                <th>Experiment ID</th>\n                <th>Win Rate</th>\n                <th>Business Impact</th>\n                <th>Recommendation</th>\n            </tr>\n            ${report.topPerformers\n              .map(\n                (performer) => `\n                <tr>\n                    <td>${performer.experimentId}</td>\n                    <td>${(performer.winRate * 100).toFixed(1)}%</td>\n                    <td>${(performer.businessImpact * 100).toFixed(1)}%</td>\n                    <td>${performer.recommendation}</td>\n                </tr>\n            `\n              )\n              .join(\"\")}\n        </table>\n    </div>\n\n    <div class=\"section\">\n        <h2>Recommendations</h2>\n        <table>\n            <tr>\n                <th>Experiment ID</th>\n                <th>Action</th>\n                <th>Reason</th>\n                <th>Confidence</th>\n                <th>Expected Impact</th>\n            </tr>\n            ${report.recommendations\n              .map(\n                (rec) => `\n                <tr>\n                    <td>${rec.experimentId}</td>\n                    <td>${rec.action}</td>\n                    <td>${rec.reason}</td>\n                    <td>${(rec.confidence * 100).toFixed(1)}%</td>\n                    <td>${rec.expectedImpact}</td>\n                </tr>\n            `\n              )\n              .join(\"\")}\n        </table>\n    </div>\n</body>\n</html>\n    `;\n  }\n\n  /**\n   * Generate PDF report (placeholder)\n   */\n  private generatePdfReport(report: AutomatedReport): string {\n    // In a real implementation, this would use a library like puppeteer or jsPDF\n    return `PDF Report for ${\n      report.reportId\n    } - Generated at ${report.generatedAt.toISOString()}`;\n  }\n}\n\n/**\n * Factory function for creating win-rate tracker\n */\nexport const createWinRateTracker = (config?: {\n  winRateThreshold?: number;\n  significanceThreshold?: number;\n  minSampleSize?: number;\n  reportingConfig?: ReportingConfig;\n}): WinRateTracker => {\n  return new WinRateTracker(config);\n};\n"],"version":3}
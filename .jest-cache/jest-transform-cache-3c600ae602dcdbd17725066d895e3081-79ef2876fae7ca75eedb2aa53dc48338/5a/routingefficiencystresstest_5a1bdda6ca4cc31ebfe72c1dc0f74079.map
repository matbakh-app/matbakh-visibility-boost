{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/__tests__/routing-efficiency-stress.test.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/__tests__/routing-efficiency-stress.test.ts"],"sourcesContent":["/**\n * Routing Efficiency Under Stress Tests\n *\n * This test suite validates that the hybrid routing system maintains efficiency\n * under various stress conditions including:\n * - High concurrent load\n * - Mixed operation types\n * - Route failures and recovery\n * - Resource constraints\n * - Performance degradation scenarios\n */\n\nimport { AiFeatureFlags } from \"../ai-feature-flags\";\nimport { CircuitBreaker } from \"../circuit-breaker\";\nimport {\n  DirectBedrockClient,\n  OperationPriority,\n  OperationType,\n  SupportOperationRequest,\n  SupportOperationResponse,\n} from \"../direct-bedrock-client\";\nimport { IntelligentRouter, RouteType } from \"../intelligent-router\";\nimport { MCPRouter } from \"../mcp-router\";\n\n// Mock dependencies\njest.mock(\"../direct-bedrock-client\");\njest.mock(\"../mcp-router\");\njest.mock(\"../circuit-breaker\");\njest.mock(\"../ai-feature-flags\");\n\ndescribe(\"Routing Efficiency Under Stress\", () => {\n  let router: IntelligentRouter;\n  let mockDirectClient: jest.Mocked<DirectBedrockClient>;\n  let mockMcpRouter: jest.Mocked<MCPRouter>;\n  let mockCircuitBreaker: jest.Mocked<CircuitBreaker>;\n  let mockFeatureFlags: jest.Mocked<AiFeatureFlags>;\n\n  // Performance tracking\n  let routingDecisions: Array<{\n    route: RouteType;\n    latency: number;\n    success: boolean;\n  }> = [];\n  let totalOperations = 0;\n  let successfulOperations = 0;\n\n  beforeEach(() => {\n    // Reset tracking\n    routingDecisions = [];\n    totalOperations = 0;\n    successfulOperations = 0;\n\n    // Setup mocks\n    mockDirectClient = new DirectBedrockClient(\n      {} as any\n    ) as jest.Mocked<DirectBedrockClient>;\n    mockMcpRouter = new MCPRouter({} as any) as jest.Mocked<MCPRouter>;\n    mockCircuitBreaker = new CircuitBreaker(\n      {} as any\n    ) as jest.Mocked<CircuitBreaker>;\n    mockFeatureFlags = new AiFeatureFlags() as jest.Mocked<AiFeatureFlags>;\n\n    // Default mock implementations - enable intelligent routing\n    mockFeatureFlags.isEnabled = jest\n      .fn()\n      .mockImplementation((flag: string) => {\n        if (flag === \"ENABLE_INTELLIGENT_ROUTING\") return true;\n        if (flag === \"ENABLE_BEDROCK_SUPPORT_MODE\") return true;\n        if (flag === \"ENABLE_DIRECT_BEDROCK_FALLBACK\") return true;\n        return true; // Default to enabled for other flags\n      });\n    mockFeatureFlags.isIntelligentRoutingEnabled = jest\n      .fn()\n      .mockResolvedValue(true);\n    mockFeatureFlags.isBedrockSupportModeEnabled = jest\n      .fn()\n      .mockResolvedValue(true);\n    mockFeatureFlags.isDirectBedrockFallbackEnabled = jest\n      .fn()\n      .mockResolvedValue(true);\n    mockCircuitBreaker.isOpen = jest.fn().mockReturnValue(false);\n\n    // Mock health check methods\n    mockDirectClient.performHealthCheck = jest.fn().mockResolvedValue({\n      isHealthy: true,\n      latencyMs: 100,\n      lastCheck: new Date(),\n      consecutiveFailures: 0,\n      circuitBreakerState: \"closed\",\n    });\n\n    mockMcpRouter.getHealthStatus = jest.fn().mockResolvedValue({\n      isHealthy: true,\n      latencyMs: 200,\n      timestamp: new Date(),\n    });\n\n    mockMcpRouter.isAvailable = jest.fn().mockReturnValue(true);\n\n    // Setup operation execution mocks with performance tracking\n    mockDirectClient.executeSupportOperation = jest\n      .fn()\n      .mockImplementation(async (request: SupportOperationRequest) => {\n        const startTime = Date.now();\n\n        // Simulate variable latency based on operation type\n        let baseLatency = 100;\n        if (request.operation === \"emergency\") baseLatency = 50;\n        if (request.operation === \"infrastructure\") baseLatency = 150;\n\n        const latency = baseLatency + Math.random() * 100;\n        await new Promise((resolve) => setTimeout(resolve, latency));\n\n        const endTime = Date.now();\n        const actualLatency = endTime - startTime;\n\n        totalOperations++;\n        successfulOperations++;\n        routingDecisions.push({\n          route: \"direct\",\n          latency: actualLatency,\n          success: true,\n        });\n\n        return {\n          success: true,\n          text: `Direct Bedrock operation completed: ${request.operation}`,\n          latencyMs: actualLatency,\n          operationId: `direct-${Date.now()}`,\n          timestamp: new Date(),\n          tokensUsed: { input: 100, output: 200 },\n          costEuro: 0.01,\n        };\n      });\n\n    mockMcpRouter.executeSupportOperation = jest\n      .fn()\n      .mockImplementation(async (request: SupportOperationRequest) => {\n        const startTime = Date.now();\n\n        // MCP typically has higher latency\n        const latency = 200 + Math.random() * 150;\n        await new Promise((resolve) => setTimeout(resolve, latency));\n\n        const endTime = Date.now();\n        const actualLatency = endTime - startTime;\n\n        totalOperations++;\n        successfulOperations++;\n        routingDecisions.push({\n          route: \"mcp\",\n          latency: actualLatency,\n          success: true,\n        });\n\n        return {\n          success: true,\n          text: `MCP operation completed: ${request.operation}`,\n          latencyMs: actualLatency,\n          operationId: `mcp-${Date.now()}`,\n          timestamp: new Date(),\n          tokensUsed: { input: 100, output: 200 },\n          costEuro: 0.005,\n        };\n      });\n\n    router = new IntelligentRouter(mockDirectClient, mockMcpRouter);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe(\"High Concurrent Load Stress Tests\", () => {\n    it(\"should maintain routing efficiency under 100 concurrent operations\", async () => {\n      const concurrentOperations = 100;\n      const operations: Promise<SupportOperationResponse>[] = [];\n\n      // Create mixed operation types\n      const operationTypes: Array<{\n        operation: OperationType;\n        priority: OperationPriority;\n      }> = [\n        { operation: \"emergency\", priority: \"critical\" },\n        { operation: \"infrastructure\", priority: \"critical\" },\n        { operation: \"meta_monitor\", priority: \"high\" },\n        { operation: \"implementation\", priority: \"high\" },\n        { operation: \"standard\", priority: \"medium\" },\n      ];\n\n      // Launch concurrent operations\n      for (let i = 0; i < concurrentOperations; i++) {\n        const opType = operationTypes[i % operationTypes.length];\n        operations.push(\n          router.executeSupportOperation({\n            operation: opType.operation,\n            priority: opType.priority,\n            prompt: `Test operation ${i}`,\n            context: { correlationId: `stress-test-${i}` },\n          })\n        );\n      }\n\n      const startTime = Date.now();\n      const results = await Promise.all(operations);\n      const totalTime = Date.now() - startTime;\n\n      // Validate results\n      expect(results).toHaveLength(concurrentOperations);\n      expect(results.every((r) => r.success)).toBe(true);\n\n      // Calculate efficiency metrics\n      const avgLatency = totalTime / concurrentOperations;\n      const directRouteCount = routingDecisions.filter(\n        (d) => d.route === \"direct\"\n      ).length;\n      const mcpRouteCount = routingDecisions.filter(\n        (d) => d.route === \"mcp\"\n      ).length;\n      const routingEfficiency =\n        (directRouteCount + mcpRouteCount) / totalOperations;\n\n      // Performance assertions - focus on core stress test requirements\n      expect(avgLatency).toBeLessThan(1000); // Average < 1s per operation\n      expect(routingEfficiency).toBeGreaterThan(0.95); // >95% routing efficiency\n      expect(successfulOperations / totalOperations).toBeGreaterThan(0.98); // >98% success rate\n\n      // Validate that all operations completed successfully under stress\n      expect(totalOperations).toBe(concurrentOperations);\n      expect(successfulOperations).toBe(concurrentOperations);\n\n      // Validate routing decisions were made efficiently\n      expect(routingDecisions.length).toBe(concurrentOperations);\n      expect(routingDecisions.every((d) => d.success)).toBe(true);\n\n      console.log(`Stress Test Results:\n        - Total Operations: ${totalOperations}\n        - Success Rate: ${(\n          (successfulOperations / totalOperations) *\n          100\n        ).toFixed(2)}%\n        - Average Latency: ${avgLatency.toFixed(2)}ms\n        - Routing Decisions Made: ${routingDecisions.length}\n        - Routing Efficiency: ${(routingEfficiency * 100).toFixed(2)}%\n      `);\n\n      // The key requirement: routing efficiency maintained under stress\n      // Whether using MCP or direct routing, the system should handle load efficiently\n      expect(routingEfficiency).toBeGreaterThan(0.95);\n      expect(avgLatency).toBeLessThan(500); // Tighter latency requirement under stress\n    });\n\n    it(\"should handle burst traffic patterns efficiently\", async () => {\n      const burstSize = 50;\n      const burstCount = 3;\n      const burstInterval = 100; // ms between bursts\n\n      for (let burst = 0; burst < burstCount; burst++) {\n        const burstOperations: Promise<SupportOperationResponse>[] = [];\n\n        // Create burst of operations\n        for (let i = 0; i < burstSize; i++) {\n          burstOperations.push(\n            router.executeSupportOperation({\n              operation: \"infrastructure\",\n              priority: \"critical\",\n              prompt: `Burst ${burst} operation ${i}`,\n              context: { correlationId: `burst-${burst}-${i}` },\n            })\n          );\n        }\n\n        const burstStartTime = Date.now();\n        const burstResults = await Promise.all(burstOperations);\n        const burstTime = Date.now() - burstStartTime;\n\n        // Validate burst results\n        expect(burstResults.every((r) => r.success)).toBe(true);\n        expect(burstTime).toBeLessThan(5000); // Burst should complete in <5s\n\n        // Wait between bursts\n        if (burst < burstCount - 1) {\n          await new Promise((resolve) => setTimeout(resolve, burstInterval));\n        }\n      }\n\n      // Overall efficiency should remain high\n      const overallEfficiency = successfulOperations / totalOperations;\n      expect(overallEfficiency).toBeGreaterThan(0.95);\n    });\n\n    it(\"should maintain performance under sustained load\", async () => {\n      const sustainedDuration = 2000; // 2 seconds\n      const operationInterval = 50; // New operation every 50ms\n      const operations: Promise<SupportOperationResponse>[] = [];\n\n      const startTime = Date.now();\n      let operationCount = 0;\n\n      // Generate sustained load\n      while (Date.now() - startTime < sustainedDuration) {\n        operations.push(\n          router.executeSupportOperation({\n            operation: \"standard\",\n            priority: \"medium\",\n            prompt: `Sustained operation ${operationCount}`,\n            context: { correlationId: `sustained-${operationCount}` },\n          })\n        );\n\n        operationCount++;\n        await new Promise((resolve) => setTimeout(resolve, operationInterval));\n      }\n\n      // Wait for all operations to complete\n      const results = await Promise.all(operations);\n\n      // Validate sustained performance\n      expect(results.every((r) => r.success)).toBe(true);\n      expect(operationCount).toBeGreaterThan(30); // Should have generated significant load\n\n      // Calculate performance degradation\n      const firstHalfLatencies = routingDecisions.slice(\n        0,\n        Math.floor(routingDecisions.length / 2)\n      );\n      const secondHalfLatencies = routingDecisions.slice(\n        Math.floor(routingDecisions.length / 2)\n      );\n\n      const firstHalfAvg =\n        firstHalfLatencies.reduce((sum, d) => sum + d.latency, 0) /\n        firstHalfLatencies.length;\n      const secondHalfAvg =\n        secondHalfLatencies.reduce((sum, d) => sum + d.latency, 0) /\n        secondHalfLatencies.length;\n\n      const degradation = (secondHalfAvg - firstHalfAvg) / firstHalfAvg;\n\n      // Performance degradation should be minimal (<20%)\n      expect(degradation).toBeLessThan(0.2);\n    });\n  });\n\n  describe(\"Route Failure and Recovery Stress Tests\", () => {\n    it(\"should handle direct Bedrock failures gracefully under load\", async () => {\n      let directFailureCount = 0;\n      const maxDirectFailures = 10;\n\n      // Mock direct client to fail intermittently\n      mockDirectClient.executeSupportOperation = jest\n        .fn()\n        .mockImplementation(async (request: SupportOperationRequest) => {\n          if (directFailureCount < maxDirectFailures && Math.random() < 0.3) {\n            directFailureCount++;\n            totalOperations++;\n            routingDecisions.push({\n              route: \"direct\",\n              latency: 0,\n              success: false,\n            });\n            throw new Error(\"Direct Bedrock temporarily unavailable\");\n          }\n\n          // Successful operation\n          const latency = 100 + Math.random() * 50;\n          await new Promise((resolve) => setTimeout(resolve, latency));\n\n          totalOperations++;\n          successfulOperations++;\n          routingDecisions.push({ route: \"direct\", latency, success: true });\n\n          return {\n            success: true,\n            text: \"Direct operation completed\",\n            latencyMs: latency,\n            operationId: `direct-${Date.now()}`,\n            timestamp: new Date(),\n          };\n        });\n\n      // Run operations that should prefer direct route\n      const operations = Array(50)\n        .fill(null)\n        .map((_, i) =>\n          router\n            .executeSupportOperation({\n              operation: \"infrastructure\",\n              priority: \"critical\",\n              prompt: `Failure test ${i}`,\n              context: { correlationId: `failure-test-${i}` },\n            })\n            .catch((error) => ({\n              success: false,\n              error: error.message,\n              latencyMs: 0,\n              operationId: `failed-${i}`,\n              timestamp: new Date(),\n            }))\n        );\n\n      const results = await Promise.all(operations);\n\n      // Should have some failures but overall success rate should be reasonable\n      const successCount = results.filter((r: any) => r.success).length;\n      const successRate = successCount / results.length;\n\n      expect(successRate).toBeGreaterThan(0.7); // >70% success rate despite failures\n      expect(directFailureCount).toBeLessThanOrEqual(maxDirectFailures);\n\n      // MCP should have been used as fallback\n      const mcpUsage = routingDecisions.filter((d) => d.route === \"mcp\").length;\n      expect(mcpUsage).toBeGreaterThan(0);\n    });\n\n    it(\"should recover routing efficiency after circuit breaker opens\", async () => {\n      let circuitBreakerOpen = false;\n      let operationsAfterOpen = 0;\n\n      // Mock circuit breaker behavior\n      mockCircuitBreaker.isOpen = jest.fn().mockImplementation(() => {\n        if (operationsAfterOpen > 20) {\n          circuitBreakerOpen = false; // Circuit breaker closes after recovery\n        }\n        return circuitBreakerOpen;\n      });\n\n      // Mock direct client to trigger circuit breaker\n      mockDirectClient.executeSupportOperation = jest\n        .fn()\n        .mockImplementation(async (request: SupportOperationRequest) => {\n          operationsAfterOpen++;\n\n          if (operationsAfterOpen <= 10) {\n            // Trigger circuit breaker after 10 failures\n            if (operationsAfterOpen === 10) {\n              circuitBreakerOpen = true;\n            }\n            totalOperations++;\n            routingDecisions.push({\n              route: \"direct\",\n              latency: 0,\n              success: false,\n            });\n            throw new Error(\"Service unavailable\");\n          }\n\n          // Recovery phase\n          const latency = 100 + Math.random() * 50;\n          await new Promise((resolve) => setTimeout(resolve, latency));\n\n          totalOperations++;\n          successfulOperations++;\n          routingDecisions.push({ route: \"direct\", latency, success: true });\n\n          return {\n            success: true,\n            text: \"Direct operation recovered\",\n            latencyMs: latency,\n            operationId: `recovered-${Date.now()}`,\n            timestamp: new Date(),\n          };\n        });\n\n      // Run operations through failure and recovery cycle\n      const operations = Array(40)\n        .fill(null)\n        .map((_, i) =>\n          router\n            .executeSupportOperation({\n              operation: \"infrastructure\",\n              priority: \"critical\",\n              prompt: `Recovery test ${i}`,\n              context: { correlationId: `recovery-test-${i}` },\n            })\n            .catch((error) => ({\n              success: false,\n              error: error.message,\n              latencyMs: 0,\n              operationId: `failed-${i}`,\n              timestamp: new Date(),\n            }))\n        );\n\n      const results = await Promise.all(operations);\n\n      // Should show recovery pattern\n      const successCount = results.filter((r: any) => r.success).length;\n      expect(successCount).toBeGreaterThan(20); // Should recover after circuit breaker opens\n\n      // Routing should adapt during failure and recovery\n      const directSuccesses = routingDecisions.filter(\n        (d) => d.route === \"direct\" && d.success\n      ).length;\n      const mcpUsage = routingDecisions.filter((d) => d.route === \"mcp\").length;\n\n      expect(directSuccesses).toBeGreaterThan(0); // Should recover\n      expect(mcpUsage).toBeGreaterThan(0); // Should use fallback during failures\n    });\n  });\n\n  describe(\"Resource Constraint Stress Tests\", () => {\n    it(\"should maintain efficiency under memory pressure\", async () => {\n      // Simulate memory pressure by creating large objects\n      const memoryPressureData: any[] = [];\n\n      mockDirectClient.executeSupportOperation = jest\n        .fn()\n        .mockImplementation(async (request: SupportOperationRequest) => {\n          // Create memory pressure\n          const largeObject = new Array(10000).fill(\n            `memory-pressure-${Date.now()}`\n          );\n          memoryPressureData.push(largeObject);\n\n          const latency = 150 + Math.random() * 100;\n          await new Promise((resolve) => setTimeout(resolve, latency));\n\n          totalOperations++;\n          successfulOperations++;\n          routingDecisions.push({ route: \"direct\", latency, success: true });\n\n          return {\n            success: true,\n            text: \"Operation under memory pressure\",\n            latencyMs: latency,\n            operationId: `memory-${Date.now()}`,\n            timestamp: new Date(),\n          };\n        });\n\n      const initialMemory = process.memoryUsage().heapUsed;\n\n      // Run operations under memory pressure\n      const operations = Array(30)\n        .fill(null)\n        .map((_, i) =>\n          router.executeSupportOperation({\n            operation: \"infrastructure\",\n            priority: \"critical\",\n            prompt: `Memory pressure test ${i}`,\n            context: { correlationId: `memory-${i}` },\n          })\n        );\n\n      const results = await Promise.all(operations);\n      const finalMemory = process.memoryUsage().heapUsed;\n      const memoryIncrease = (finalMemory - initialMemory) / 1024 / 1024; // MB\n\n      // Validate performance under memory pressure\n      expect(results.every((r) => r.success)).toBe(true);\n      expect(memoryIncrease).toBeLessThan(100); // Memory increase should be reasonable\n\n      // Routing efficiency should remain high\n      const efficiency = successfulOperations / totalOperations;\n      expect(efficiency).toBeGreaterThan(0.95);\n\n      // Cleanup\n      memoryPressureData.length = 0;\n    });\n\n    it(\"should handle CPU-intensive routing decisions efficiently\", async () => {\n      let routingDecisionTime = 0;\n\n      // Mock complex routing decision\n      const originalExecute = router.executeSupportOperation.bind(router);\n      router.executeSupportOperation = jest\n        .fn()\n        .mockImplementation(async (request: SupportOperationRequest) => {\n          const decisionStart = Date.now();\n\n          // Simulate CPU-intensive routing decision\n          for (let i = 0; i < 10000; i++) {\n            Math.sqrt(Math.random() * 1000);\n          }\n\n          routingDecisionTime += Date.now() - decisionStart;\n\n          return originalExecute(request);\n        });\n\n      // Run operations with CPU-intensive routing\n      const operations = Array(20)\n        .fill(null)\n        .map((_, i) =>\n          router.executeSupportOperation({\n            operation: \"standard\",\n            priority: \"medium\",\n            prompt: `CPU test ${i}`,\n            context: { correlationId: `cpu-${i}` },\n          })\n        );\n\n      const startTime = Date.now();\n      const results = await Promise.all(operations);\n      const totalTime = Date.now() - startTime;\n\n      // Validate performance\n      expect(results.every((r) => r.success)).toBe(true);\n\n      const avgRoutingDecisionTime = routingDecisionTime / operations.length;\n      const avgTotalTime = totalTime / operations.length;\n\n      // Routing decision overhead should be reasonable\n      expect(avgRoutingDecisionTime).toBeLessThan(50); // <50ms per routing decision\n      expect(avgTotalTime).toBeLessThan(500); // <500ms total per operation\n    });\n  });\n\n  describe(\"Performance Degradation Detection\", () => {\n    it(\"should detect and adapt to performance degradation\", async () => {\n      let operationCount = 0;\n      const degradationThreshold = 20;\n\n      // Mock progressive performance degradation\n      mockDirectClient.executeSupportOperation = jest\n        .fn()\n        .mockImplementation(async (request: SupportOperationRequest) => {\n          operationCount++;\n\n          // Progressive latency increase to simulate degradation\n          const baseLatency = 100;\n          const degradationFactor = Math.max(\n            1,\n            operationCount / degradationThreshold\n          );\n          const latency = baseLatency * degradationFactor + Math.random() * 50;\n\n          await new Promise((resolve) => setTimeout(resolve, latency));\n\n          totalOperations++;\n          successfulOperations++;\n          routingDecisions.push({ route: \"direct\", latency, success: true });\n\n          return {\n            success: true,\n            text: \"Operation with degradation\",\n            latencyMs: latency,\n            operationId: `degraded-${Date.now()}`,\n            timestamp: new Date(),\n          };\n        });\n\n      // Run operations to trigger degradation\n      const operations = Array(40)\n        .fill(null)\n        .map((_, i) =>\n          router.executeSupportOperation({\n            operation: \"infrastructure\",\n            priority: \"critical\",\n            prompt: `Degradation test ${i}`,\n            context: { correlationId: `degradation-${i}` },\n          })\n        );\n\n      const results = await Promise.all(operations);\n\n      // All operations should still succeed\n      expect(results.every((r) => r.success)).toBe(true);\n\n      // Analyze performance degradation\n      const firstQuarter = routingDecisions.slice(0, 10);\n      const lastQuarter = routingDecisions.slice(-10);\n\n      const firstQuarterAvg =\n        firstQuarter.reduce((sum, d) => sum + d.latency, 0) /\n        firstQuarter.length;\n      const lastQuarterAvg =\n        lastQuarter.reduce((sum, d) => sum + d.latency, 0) / lastQuarter.length;\n\n      const degradationRatio = lastQuarterAvg / firstQuarterAvg;\n\n      // Should detect significant degradation\n      expect(degradationRatio).toBeGreaterThan(1.5); // >50% degradation detected\n\n      // System should still maintain functionality\n      const overallSuccessRate = successfulOperations / totalOperations;\n      expect(overallSuccessRate).toBeGreaterThan(0.9);\n    });\n\n    it(\"should maintain routing efficiency metrics accuracy under stress\", async () => {\n      const testDuration = 1000; // 1 second\n      const operationInterval = 25; // 40 operations per second\n\n      let metricsCollected = 0;\n      const startTime = Date.now();\n\n      // Simulate high-frequency operations\n      while (Date.now() - startTime < testDuration) {\n        const operation = router.executeSupportOperation({\n          operation: \"standard\",\n          priority: \"medium\",\n          prompt: `Metrics test ${metricsCollected}`,\n          context: { correlationId: `metrics-${metricsCollected}` },\n        });\n\n        metricsCollected++;\n\n        // Don't wait for completion to simulate high frequency\n        operation.catch(() => {}); // Handle potential errors\n\n        await new Promise((resolve) => setTimeout(resolve, operationInterval));\n      }\n\n      // Wait a bit for operations to complete\n      await new Promise((resolve) => setTimeout(resolve, 500));\n\n      // Validate metrics accuracy\n      expect(metricsCollected).toBeGreaterThan(30); // Should have generated significant load\n      expect(totalOperations).toBeGreaterThan(0); // Should have tracked operations\n\n      // Metrics should be consistent\n      const trackedOperations = routingDecisions.length;\n      const successfulTracked = routingDecisions.filter(\n        (d) => d.success\n      ).length;\n\n      expect(trackedOperations).toBeGreaterThan(0);\n      expect(successfulTracked / trackedOperations).toBeGreaterThan(0.8); // >80% success rate\n    });\n  });\n\n  describe(\"Stress Test Summary and Reporting\", () => {\n    it(\"should generate comprehensive stress test report\", async () => {\n      // Run a comprehensive mixed workload\n      const workloadTypes = [\n        {\n          operation: \"emergency\" as OperationType,\n          priority: \"critical\" as OperationPriority,\n          count: 10,\n        },\n        {\n          operation: \"infrastructure\" as OperationType,\n          priority: \"critical\" as OperationPriority,\n          count: 20,\n        },\n        {\n          operation: \"meta_monitor\" as OperationType,\n          priority: \"high\" as OperationPriority,\n          count: 15,\n        },\n        {\n          operation: \"implementation\" as OperationType,\n          priority: \"high\" as OperationPriority,\n          count: 15,\n        },\n        {\n          operation: \"standard\" as OperationType,\n          priority: \"medium\" as OperationPriority,\n          count: 40,\n        },\n      ];\n\n      const allOperations: Promise<SupportOperationResponse>[] = [];\n\n      for (const workload of workloadTypes) {\n        for (let i = 0; i < workload.count; i++) {\n          allOperations.push(\n            router.executeSupportOperation({\n              operation: workload.operation,\n              priority: workload.priority,\n              prompt: `${workload.operation} operation ${i}`,\n              context: { correlationId: `report-${workload.operation}-${i}` },\n            })\n          );\n        }\n      }\n\n      const testStartTime = Date.now();\n      const results = await Promise.all(allOperations);\n      const testDuration = Date.now() - testStartTime;\n\n      // Generate comprehensive report\n      const report = {\n        testDuration,\n        totalOperations: results.length,\n        successfulOperations: results.filter((r) => r.success).length,\n        failedOperations: results.filter((r) => !r.success).length,\n        averageLatency:\n          routingDecisions.reduce((sum, d) => sum + d.latency, 0) /\n          routingDecisions.length,\n        routingDistribution: {\n          direct: routingDecisions.filter((d) => d.route === \"direct\").length,\n          mcp: routingDecisions.filter((d) => d.route === \"mcp\").length,\n        },\n        performanceByOperationType: workloadTypes.map((wl) => ({\n          operation: wl.operation,\n          priority: wl.priority,\n          count: wl.count,\n          avgLatency: routingDecisions\n            .filter((_, i) => {\n              const result = results[i];\n              return result.text?.includes(wl.operation);\n            })\n            .reduce((sum, d, _, arr) => sum + d.latency / arr.length, 0),\n        })),\n        efficiency: {\n          successRate:\n            (results.filter((r) => r.success).length / results.length) * 100,\n          routingEfficiency: (routingDecisions.length / totalOperations) * 100,\n          throughput: results.length / (testDuration / 1000), // operations per second\n        },\n      };\n\n      // Validate report metrics\n      expect(report.efficiency.successRate).toBeGreaterThan(95); // >95% success rate\n      expect(report.efficiency.routingEfficiency).toBeGreaterThan(90); // >90% routing efficiency\n      expect(report.efficiency.throughput).toBeGreaterThan(10); // >10 ops/sec\n      expect(report.averageLatency).toBeLessThan(1000); // <1s average latency\n\n      // Log comprehensive report\n      console.log(\"=== Routing Efficiency Stress Test Report ===\");\n      console.log(JSON.stringify(report, null, 2));\n\n      // Validate routing distribution follows expected patterns\n      expect(report.routingDistribution.direct).toBeGreaterThan(0);\n      expect(report.routingDistribution.mcp).toBeGreaterThan(0);\n    });\n  });\n});\n"],"version":3}
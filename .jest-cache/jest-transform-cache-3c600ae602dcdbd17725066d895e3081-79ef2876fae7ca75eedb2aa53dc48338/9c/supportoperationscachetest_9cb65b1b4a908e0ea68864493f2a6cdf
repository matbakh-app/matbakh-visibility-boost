65b2a199a26721e7b6d2f1aed34ae3c0
"use strict";
/**
 * Support Operations Cache Tests
 *
 * Comprehensive test suite for the support operations caching layer
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const globals_1 = require("@jest/globals");
const support_operations_cache_1 = require("../support-operations-cache");
(0, globals_1.describe)("SupportOperationsCache", () => {
    let cache;
    (0, globals_1.beforeEach)(() => {
        cache = new support_operations_cache_1.SupportOperationsCache();
    });
    (0, globals_1.describe)("Infrastructure Audit Caching", () => {
        (0, globals_1.it)("should cache and retrieve infrastructure audit results", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const auditResult = {
                timestamp: new Date(),
                overallHealth: "healthy",
                detectedIssues: [],
                implementationGaps: [],
                recommendations: [],
                complianceStatus: {
                    gdprCompliant: true,
                    dataResidencyCompliant: true,
                    auditTrailComplete: true,
                    issues: [],
                },
            };
            // Cache the result
            yield cache.setInfrastructureAudit(auditResult);
            // Retrieve from cache
            const cached = yield cache.getInfrastructureAudit();
            (0, globals_1.expect)(cached).toBeDefined();
            (0, globals_1.expect)(cached === null || cached === void 0 ? void 0 : cached.overallHealth).toBe("healthy");
            (0, globals_1.expect)(cached === null || cached === void 0 ? void 0 : cached.detectedIssues).toHaveLength(0);
        }));
        (0, globals_1.it)("should return null for cache miss", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const cached = yield cache.getInfrastructureAudit({ context: "test" });
            (0, globals_1.expect)(cached).toBeNull();
        }));
        (0, globals_1.it)("should cache different contexts separately", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result1 = {
                timestamp: new Date(),
                overallHealth: "healthy",
                detectedIssues: [],
                implementationGaps: [],
                recommendations: [],
                complianceStatus: {
                    gdprCompliant: true,
                    dataResidencyCompliant: true,
                    auditTrailComplete: true,
                    issues: [],
                },
            };
            const result2 = Object.assign(Object.assign({}, result1), { overallHealth: "warning" });
            yield cache.setInfrastructureAudit(result1, { env: "dev" });
            yield cache.setInfrastructureAudit(result2, { env: "prod" });
            const cached1 = yield cache.getInfrastructureAudit({ env: "dev" });
            const cached2 = yield cache.getInfrastructureAudit({ env: "prod" });
            (0, globals_1.expect)(cached1 === null || cached1 === void 0 ? void 0 : cached1.overallHealth).toBe("healthy");
            (0, globals_1.expect)(cached2 === null || cached2 === void 0 ? void 0 : cached2.overallHealth).toBe("warning");
        }));
    });
    (0, globals_1.describe)("Meta-Monitoring Caching", () => {
        (0, globals_1.it)("should cache and retrieve meta-monitoring data", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const executionData = {
                executionId: "exec-123",
                timestamp: new Date(),
                operation: "test-operation",
                duration: 1000,
                success: true,
                performanceMetrics: {
                    responseTime: 500,
                    memoryUsage: 100,
                    cpuUsage: 50,
                    networkLatency: 10,
                },
            };
            yield cache.setMetaMonitoring(executionData, "exec-123");
            const cached = yield cache.getMetaMonitoring("exec-123");
            (0, globals_1.expect)(cached).toBeDefined();
            (0, globals_1.expect)(cached === null || cached === void 0 ? void 0 : cached.executionId).toBe("exec-123");
            (0, globals_1.expect)(cached === null || cached === void 0 ? void 0 : cached.success).toBe(true);
        }));
        (0, globals_1.it)("should handle different execution IDs", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const data1 = {
                executionId: "exec-1",
                timestamp: new Date(),
                operation: "op1",
                duration: 100,
                success: true,
                performanceMetrics: {
                    responseTime: 50,
                    memoryUsage: 10,
                    cpuUsage: 5,
                    networkLatency: 1,
                },
            };
            const data2 = Object.assign(Object.assign({}, data1), { executionId: "exec-2", operation: "op2" });
            yield cache.setMetaMonitoring(data1, "exec-1");
            yield cache.setMetaMonitoring(data2, "exec-2");
            const cached1 = yield cache.getMetaMonitoring("exec-1");
            const cached2 = yield cache.getMetaMonitoring("exec-2");
            (0, globals_1.expect)(cached1 === null || cached1 === void 0 ? void 0 : cached1.operation).toBe("op1");
            (0, globals_1.expect)(cached2 === null || cached2 === void 0 ? void 0 : cached2.operation).toBe("op2");
        }));
    });
    (0, globals_1.describe)("Implementation Gaps Caching", () => {
        (0, globals_1.it)("should cache and retrieve implementation gaps", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const gaps = [
                {
                    id: "gap-1",
                    module: "auth",
                    description: "Missing OAuth implementation",
                    priority: "high",
                    estimatedEffort: "2 days",
                    dependencies: [],
                },
            ];
            yield cache.setImplementationGaps(gaps, "auth");
            const cached = yield cache.getImplementationGaps("auth");
            (0, globals_1.expect)(cached).toBeDefined();
            (0, globals_1.expect)(cached).toHaveLength(1);
            (0, globals_1.expect)(cached === null || cached === void 0 ? void 0 : cached[0].module).toBe("auth");
        }));
        (0, globals_1.it)("should cache gaps for different modules", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const authGaps = [
                {
                    id: "gap-1",
                    module: "auth",
                    description: "Auth gap",
                    priority: "high",
                    estimatedEffort: "1 day",
                    dependencies: [],
                },
            ];
            const paymentGaps = [
                {
                    id: "gap-2",
                    module: "payment",
                    description: "Payment gap",
                    priority: "medium",
                    estimatedEffort: "3 days",
                    dependencies: [],
                },
            ];
            yield cache.setImplementationGaps(authGaps, "auth");
            yield cache.setImplementationGaps(paymentGaps, "payment");
            const cachedAuth = yield cache.getImplementationGaps("auth");
            const cachedPayment = yield cache.getImplementationGaps("payment");
            (0, globals_1.expect)(cachedAuth === null || cachedAuth === void 0 ? void 0 : cachedAuth[0].module).toBe("auth");
            (0, globals_1.expect)(cachedPayment === null || cachedPayment === void 0 ? void 0 : cachedPayment[0].module).toBe("payment");
        }));
    });
    (0, globals_1.describe)("Compliance Validation Caching", () => {
        (0, globals_1.it)("should cache and retrieve compliance validation results", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result = {
                isCompliant: true,
                violations: [],
                recommendations: [],
                lastChecked: new Date(),
            };
            yield cache.setComplianceValidation(result, "gdpr");
            const cached = yield cache.getComplianceValidation("gdpr");
            (0, globals_1.expect)(cached).toBeDefined();
            (0, globals_1.expect)(cached === null || cached === void 0 ? void 0 : cached.isCompliant).toBe(true);
            (0, globals_1.expect)(cached === null || cached === void 0 ? void 0 : cached.violations).toHaveLength(0);
        }));
        (0, globals_1.it)("should handle different compliance scopes", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const gdprResult = {
                isCompliant: true,
                violations: [],
                recommendations: [],
                lastChecked: new Date(),
            };
            const hipaaResult = {
                isCompliant: false,
                violations: ["Missing encryption"],
                recommendations: ["Enable encryption"],
                lastChecked: new Date(),
            };
            yield cache.setComplianceValidation(gdprResult, "gdpr");
            yield cache.setComplianceValidation(hipaaResult, "hipaa");
            const cachedGdpr = yield cache.getComplianceValidation("gdpr");
            const cachedHipaa = yield cache.getComplianceValidation("hipaa");
            (0, globals_1.expect)(cachedGdpr === null || cachedGdpr === void 0 ? void 0 : cachedGdpr.isCompliant).toBe(true);
            (0, globals_1.expect)(cachedHipaa === null || cachedHipaa === void 0 ? void 0 : cachedHipaa.isCompliant).toBe(false);
        }));
    });
    (0, globals_1.describe)("Security Audit Caching", () => {
        (0, globals_1.it)("should cache and retrieve security audit results", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result = {
                securityScore: 85,
                vulnerabilities: [],
                recommendations: [],
                lastAudit: new Date(),
            };
            yield cache.setSecurityAudit(result, "api");
            const cached = yield cache.getSecurityAudit("api");
            (0, globals_1.expect)(cached).toBeDefined();
            (0, globals_1.expect)(cached === null || cached === void 0 ? void 0 : cached.securityScore).toBe(85);
            (0, globals_1.expect)(cached === null || cached === void 0 ? void 0 : cached.vulnerabilities).toHaveLength(0);
        }));
        (0, globals_1.it)("should cache audits for different components", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const apiResult = {
                securityScore: 90,
                vulnerabilities: [],
                recommendations: [],
                lastAudit: new Date(),
            };
            const dbResult = {
                securityScore: 75,
                vulnerabilities: [
                    {
                        id: "vuln-1",
                        severity: "medium",
                        description: "Weak password policy",
                        component: "database",
                        remediation: "Strengthen password requirements",
                    },
                ],
                recommendations: ["Update password policy"],
                lastAudit: new Date(),
            };
            yield cache.setSecurityAudit(apiResult, "api");
            yield cache.setSecurityAudit(dbResult, "database");
            const cachedApi = yield cache.getSecurityAudit("api");
            const cachedDb = yield cache.getSecurityAudit("database");
            (0, globals_1.expect)(cachedApi === null || cachedApi === void 0 ? void 0 : cachedApi.securityScore).toBe(90);
            (0, globals_1.expect)(cachedDb === null || cachedDb === void 0 ? void 0 : cachedDb.securityScore).toBe(75);
        }));
    });
    (0, globals_1.describe)("Cost Analysis Caching", () => {
        (0, globals_1.it)("should cache and retrieve cost analysis", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const analysis = {
                currentSpend: 100,
                projectedSpend: 150,
                budgetUtilization: 0.67,
                costBreakdown: {
                    compute: 60,
                    storage: 30,
                    network: 10,
                },
                recommendations: ["Optimize storage usage"],
            };
            yield cache.setCostAnalysis(analysis, "monthly");
            const cached = yield cache.getCostAnalysis("monthly");
            (0, globals_1.expect)(cached).toBeDefined();
            (0, globals_1.expect)(cached === null || cached === void 0 ? void 0 : cached.currentSpend).toBe(100);
            (0, globals_1.expect)(cached === null || cached === void 0 ? void 0 : cached.budgetUtilization).toBe(0.67);
        }));
        (0, globals_1.it)("should cache analysis for different time ranges", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const dailyAnalysis = {
                currentSpend: 10,
                projectedSpend: 15,
                budgetUtilization: 0.5,
                costBreakdown: { compute: 6, storage: 3, network: 1 },
                recommendations: [],
            };
            const monthlyAnalysis = {
                currentSpend: 300,
                projectedSpend: 450,
                budgetUtilization: 0.75,
                costBreakdown: { compute: 180, storage: 90, network: 30 },
                recommendations: ["Review compute usage"],
            };
            yield cache.setCostAnalysis(dailyAnalysis, "daily");
            yield cache.setCostAnalysis(monthlyAnalysis, "monthly");
            const cachedDaily = yield cache.getCostAnalysis("daily");
            const cachedMonthly = yield cache.getCostAnalysis("monthly");
            (0, globals_1.expect)(cachedDaily === null || cachedDaily === void 0 ? void 0 : cachedDaily.currentSpend).toBe(10);
            (0, globals_1.expect)(cachedMonthly === null || cachedMonthly === void 0 ? void 0 : cachedMonthly.currentSpend).toBe(300);
        }));
    });
    (0, globals_1.describe)("Cache Statistics", () => {
        (0, globals_1.it)("should track cache hits and misses", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result = {
                timestamp: new Date(),
                overallHealth: "healthy",
                detectedIssues: [],
                implementationGaps: [],
                recommendations: [],
                complianceStatus: {
                    gdprCompliant: true,
                    dataResidencyCompliant: true,
                    auditTrailComplete: true,
                    issues: [],
                },
            };
            // Miss
            yield cache.getInfrastructureAudit();
            // Set
            yield cache.setInfrastructureAudit(result);
            // Hit
            yield cache.getInfrastructureAudit();
            const stats = cache.getStats();
            (0, globals_1.expect)(stats.hits).toBe(1);
            (0, globals_1.expect)(stats.misses).toBe(1);
            (0, globals_1.expect)(stats.totalRequests).toBe(2);
            (0, globals_1.expect)(stats.hitRate).toBe(0.5);
        }));
        (0, globals_1.it)("should track operation-specific statistics", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const auditResult = {
                timestamp: new Date(),
                overallHealth: "healthy",
                detectedIssues: [],
                implementationGaps: [],
                recommendations: [],
                complianceStatus: {
                    gdprCompliant: true,
                    dataResidencyCompliant: true,
                    auditTrailComplete: true,
                    issues: [],
                },
            };
            yield cache.setInfrastructureAudit(auditResult);
            yield cache.getInfrastructureAudit(); // Hit
            yield cache.getInfrastructureAudit(); // Hit
            const opStats = cache.getOperationStats("infrastructureAudit");
            (0, globals_1.expect)(opStats.hits).toBe(2);
            (0, globals_1.expect)(opStats.misses).toBe(0);
            (0, globals_1.expect)(opStats.hitRate).toBe(1.0);
        }));
        (0, globals_1.it)("should update cache size correctly", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result = {
                timestamp: new Date(),
                overallHealth: "healthy",
                detectedIssues: [],
                implementationGaps: [],
                recommendations: [],
                complianceStatus: {
                    gdprCompliant: true,
                    dataResidencyCompliant: true,
                    auditTrailComplete: true,
                    issues: [],
                },
            };
            const initialStats = cache.getStats();
            (0, globals_1.expect)(initialStats.cacheSize).toBe(0);
            yield cache.setInfrastructureAudit(result);
            const updatedStats = cache.getStats();
            (0, globals_1.expect)(updatedStats.cacheSize).toBe(1);
        }));
    });
    (0, globals_1.describe)("Cache Invalidation", () => {
        (0, globals_1.it)("should invalidate specific operation type", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result = {
                timestamp: new Date(),
                overallHealth: "healthy",
                detectedIssues: [],
                implementationGaps: [],
                recommendations: [],
                complianceStatus: {
                    gdprCompliant: true,
                    dataResidencyCompliant: true,
                    auditTrailComplete: true,
                    issues: [],
                },
            };
            yield cache.setInfrastructureAudit(result);
            let cached = yield cache.getInfrastructureAudit();
            (0, globals_1.expect)(cached).toBeDefined();
            yield cache.invalidate("infrastructureAudit");
            cached = yield cache.getInfrastructureAudit();
            (0, globals_1.expect)(cached).toBeNull();
        }));
        (0, globals_1.it)("should invalidate all cache entries", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const auditResult = {
                timestamp: new Date(),
                overallHealth: "healthy",
                detectedIssues: [],
                implementationGaps: [],
                recommendations: [],
                complianceStatus: {
                    gdprCompliant: true,
                    dataResidencyCompliant: true,
                    auditTrailComplete: true,
                    issues: [],
                },
            };
            const complianceResult = {
                isCompliant: true,
                violations: [],
                recommendations: [],
                lastChecked: new Date(),
            };
            yield cache.setInfrastructureAudit(auditResult);
            yield cache.setComplianceValidation(complianceResult);
            const statsBefore = cache.getStats();
            (0, globals_1.expect)(statsBefore.cacheSize).toBe(2);
            yield cache.invalidateAll();
            const statsAfter = cache.getStats();
            (0, globals_1.expect)(statsAfter.cacheSize).toBe(0);
            const cachedAudit = yield cache.getInfrastructureAudit();
            const cachedCompliance = yield cache.getComplianceValidation();
            (0, globals_1.expect)(cachedAudit).toBeNull();
            (0, globals_1.expect)(cachedCompliance).toBeNull();
        }));
        (0, globals_1.it)("should invalidate specific context", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result1 = {
                timestamp: new Date(),
                overallHealth: "healthy",
                detectedIssues: [],
                implementationGaps: [],
                recommendations: [],
                complianceStatus: {
                    gdprCompliant: true,
                    dataResidencyCompliant: true,
                    auditTrailComplete: true,
                    issues: [],
                },
            };
            const result2 = Object.assign(Object.assign({}, result1), { overallHealth: "warning" });
            yield cache.setInfrastructureAudit(result1, { env: "dev" });
            yield cache.setInfrastructureAudit(result2, { env: "prod" });
            yield cache.invalidate("infrastructureAudit", { env: "dev" });
            const cachedDev = yield cache.getInfrastructureAudit({ env: "dev" });
            const cachedProd = yield cache.getInfrastructureAudit({ env: "prod" });
            (0, globals_1.expect)(cachedDev).toBeNull();
            (0, globals_1.expect)(cachedProd).toBeDefined();
        }));
    });
    (0, globals_1.describe)("Cache Configuration", () => {
        (0, globals_1.it)("should use custom configuration", () => {
            const customConfig = {
                enabled: false,
                maxCacheSize: 500,
            };
            const customCache = new support_operations_cache_1.SupportOperationsCache(customConfig);
            const config = customCache.getConfig();
            (0, globals_1.expect)(config.enabled).toBe(false);
            (0, globals_1.expect)(config.maxCacheSize).toBe(500);
        });
        (0, globals_1.it)("should update configuration", () => {
            cache.updateConfig({
                maxCacheSize: 2000,
                compressionEnabled: false,
            });
            const config = cache.getConfig();
            (0, globals_1.expect)(config.maxCacheSize).toBe(2000);
            (0, globals_1.expect)(config.compressionEnabled).toBe(false);
        });
        (0, globals_1.it)("should update TTL for specific operations", () => {
            cache.updateConfig({
                ttlSeconds: {
                    infrastructureAudit: 600,
                    metaMonitoring: 120,
                    implementationGaps: 900,
                    complianceValidation: 3600,
                    securityAudit: 1800,
                    costAnalysis: 600,
                },
            });
            const config = cache.getConfig();
            (0, globals_1.expect)(config.ttlSeconds.infrastructureAudit).toBe(600);
            (0, globals_1.expect)(config.ttlSeconds.metaMonitoring).toBe(120);
        });
    });
    (0, globals_1.describe)("Health Check", () => {
        (0, globals_1.it)("should report healthy status for empty cache", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const health = yield cache.healthCheck();
            (0, globals_1.expect)(health.healthy).toBe(true);
            (0, globals_1.expect)(health.cacheSize).toBe(0);
            (0, globals_1.expect)(health.errors).toHaveLength(0);
        }));
        (0, globals_1.it)("should report healthy status with good performance", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result = {
                timestamp: new Date(),
                overallHealth: "healthy",
                detectedIssues: [],
                implementationGaps: [],
                recommendations: [],
                complianceStatus: {
                    gdprCompliant: true,
                    dataResidencyCompliant: true,
                    auditTrailComplete: true,
                    issues: [],
                },
            };
            yield cache.setInfrastructureAudit(result);
            yield cache.getInfrastructureAudit(); // Hit
            const health = yield cache.healthCheck();
            (0, globals_1.expect)(health.healthy).toBe(true);
            (0, globals_1.expect)(health.cacheSize).toBe(1);
            (0, globals_1.expect)(health.hitRate).toBeGreaterThan(0);
        }));
    });
    (0, globals_1.describe)("Cache Warm-up", () => {
        (0, globals_1.it)("should warm up cache with common operations", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const operations = [
                {
                    type: "infrastructureAudit",
                    data: {
                        timestamp: new Date(),
                        overallHealth: "healthy",
                        detectedIssues: [],
                        implementationGaps: [],
                        recommendations: [],
                        complianceStatus: {
                            gdprCompliant: true,
                            dataResidencyCompliant: true,
                            auditTrailComplete: true,
                            issues: [],
                        },
                    },
                },
                {
                    type: "complianceValidation",
                    data: {
                        isCompliant: true,
                        violations: [],
                        recommendations: [],
                        lastChecked: new Date(),
                    },
                },
            ];
            yield cache.warmUp(operations);
            const stats = cache.getStats();
            (0, globals_1.expect)(stats.cacheSize).toBe(2);
        }));
    });
    (0, globals_1.describe)("Performance Target", () => {
        (0, globals_1.it)("should check if performance target is met", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result = {
                timestamp: new Date(),
                overallHealth: "healthy",
                detectedIssues: [],
                implementationGaps: [],
                recommendations: [],
                complianceStatus: {
                    gdprCompliant: true,
                    dataResidencyCompliant: true,
                    auditTrailComplete: true,
                    issues: [],
                },
            };
            yield cache.setInfrastructureAudit(result);
            // Generate hits
            yield cache.getInfrastructureAudit();
            yield cache.getInfrastructureAudit();
            yield cache.getInfrastructureAudit();
            const meetsTarget = cache.isPerformanceTarget(0.7);
            (0, globals_1.expect)(meetsTarget).toBe(true);
        }));
        (0, globals_1.it)("should fail performance target with low hit rate", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Generate misses
            yield cache.getInfrastructureAudit({ context: "miss1" });
            yield cache.getInfrastructureAudit({ context: "miss2" });
            yield cache.getInfrastructureAudit({ context: "miss3" });
            const meetsTarget = cache.isPerformanceTarget(0.7);
            (0, globals_1.expect)(meetsTarget).toBe(false);
        }));
    });
    (0, globals_1.describe)("Factory Function", () => {
        (0, globals_1.it)("should create cache with factory function", () => {
            const factoryCache = (0, support_operations_cache_1.createSupportOperationsCache)({
                maxCacheSize: 500,
            });
            const config = factoryCache.getConfig();
            (0, globals_1.expect)(config.maxCacheSize).toBe(500);
        });
    });
    (0, globals_1.describe)("Environment Configurations", () => {
        (0, globals_1.it)("should have development configuration", () => {
            const devConfig = support_operations_cache_1.SUPPORT_CACHE_CONFIGS.development;
            (0, globals_1.expect)(devConfig.enabled).toBe(true);
            (0, globals_1.expect)(devConfig.maxCacheSize).toBe(100);
            (0, globals_1.expect)(devConfig.ttlSeconds.infrastructureAudit).toBe(60);
        });
        (0, globals_1.it)("should have staging configuration", () => {
            const stagingConfig = support_operations_cache_1.SUPPORT_CACHE_CONFIGS.staging;
            (0, globals_1.expect)(stagingConfig.enabled).toBe(true);
            (0, globals_1.expect)(stagingConfig.maxCacheSize).toBe(500);
            (0, globals_1.expect)(stagingConfig.ttlSeconds.infrastructureAudit).toBe(180);
        });
        (0, globals_1.it)("should have production configuration", () => {
            const prodConfig = support_operations_cache_1.SUPPORT_CACHE_CONFIGS.production;
            (0, globals_1.expect)(prodConfig.enabled).toBe(true);
            (0, globals_1.expect)(prodConfig.maxCacheSize).toBe(1000);
            (0, globals_1.expect)(prodConfig.ttlSeconds.infrastructureAudit).toBe(300);
        });
    });
    (0, globals_1.describe)("Cache Entries Debugging", () => {
        (0, globals_1.it)("should get cache entries for debugging", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result = {
                timestamp: new Date(),
                overallHealth: "healthy",
                detectedIssues: [],
                implementationGaps: [],
                recommendations: [],
                complianceStatus: {
                    gdprCompliant: true,
                    dataResidencyCompliant: true,
                    auditTrailComplete: true,
                    issues: [],
                },
            };
            yield cache.setInfrastructureAudit(result);
            const entries = cache.getCacheEntries();
            (0, globals_1.expect)(entries).toHaveLength(1);
            (0, globals_1.expect)(entries[0].operationType).toBe("infrastructureAudit");
            (0, globals_1.expect)(entries[0].accessCount).toBe(0);
        }));
    });
    (0, globals_1.describe)("Disabled Cache", () => {
        (0, globals_1.it)("should not cache when disabled", () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const disabledCache = new support_operations_cache_1.SupportOperationsCache({ enabled: false });
            const result = {
                timestamp: new Date(),
                overallHealth: "healthy",
                detectedIssues: [],
                implementationGaps: [],
                recommendations: [],
                complianceStatus: {
                    gdprCompliant: true,
                    dataResidencyCompliant: true,
                    auditTrailComplete: true,
                    issues: [],
                },
            };
            yield disabledCache.setInfrastructureAudit(result);
            const cached = yield disabledCache.getInfrastructureAudit();
            (0, globals_1.expect)(cached).toBeNull();
            const stats = disabledCache.getStats();
            (0, globals_1.expect)(stats.cacheSize).toBe(0);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21hdGJha2gtdmlzaWJpbGl0eS1ib29zdC4yMDI1MDkyMC9zcmMvbGliL2FpLW9yY2hlc3RyYXRvci9fX3Rlc3RzX18vc3VwcG9ydC1vcGVyYXRpb25zLWNhY2hlLnRlc3QudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7OztBQUVILDJDQUFpRTtBQVNqRSwwRUFLcUM7QUFFckMsSUFBQSxrQkFBUSxFQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRTtJQUN0QyxJQUFJLEtBQTZCLENBQUM7SUFFbEMsSUFBQSxvQkFBVSxFQUFDLEdBQUcsRUFBRTtRQUNkLEtBQUssR0FBRyxJQUFJLGlEQUFzQixFQUFFLENBQUM7SUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFBLGtCQUFRLEVBQUMsOEJBQThCLEVBQUUsR0FBRyxFQUFFO1FBQzVDLElBQUEsWUFBRSxFQUFDLHdEQUF3RCxFQUFFLEdBQVMsRUFBRTtZQUN0RSxNQUFNLFdBQVcsR0FBOEI7Z0JBQzdDLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRTtnQkFDckIsYUFBYSxFQUFFLFNBQVM7Z0JBQ3hCLGNBQWMsRUFBRSxFQUFFO2dCQUNsQixrQkFBa0IsRUFBRSxFQUFFO2dCQUN0QixlQUFlLEVBQUUsRUFBRTtnQkFDbkIsZ0JBQWdCLEVBQUU7b0JBQ2hCLGFBQWEsRUFBRSxJQUFJO29CQUNuQixzQkFBc0IsRUFBRSxJQUFJO29CQUM1QixrQkFBa0IsRUFBRSxJQUFJO29CQUN4QixNQUFNLEVBQUUsRUFBRTtpQkFDWDthQUNGLENBQUM7WUFFRixtQkFBbUI7WUFDbkIsTUFBTSxLQUFLLENBQUMsc0JBQXNCLENBQUMsV0FBVyxDQUFDLENBQUM7WUFFaEQsc0JBQXNCO1lBQ3RCLE1BQU0sTUFBTSxHQUFHLE1BQU0sS0FBSyxDQUFDLHNCQUFzQixFQUFFLENBQUM7WUFFcEQsSUFBQSxnQkFBTSxFQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQzdCLElBQUEsZ0JBQU0sRUFBQyxNQUFNLGFBQU4sTUFBTSx1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QU0sTUFBTSxHQUFHLE1BQU0sYUFBYSxDQUFDLHNCQUFzQixFQUFFLENBQUM7WUFFNUQsSUFBQSxnQkFBTSxFQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRTFCLE1BQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN2QyxJQUFBLGdCQUFNLEVBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUEsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbWF0YmFraC12aXNpYmlsaXR5LWJvb3N0LjIwMjUwOTIwL3NyYy9saWIvYWktb3JjaGVzdHJhdG9yL19fdGVzdHNfXy9zdXBwb3J0LW9wZXJhdGlvbnMtY2FjaGUudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFN1cHBvcnQgT3BlcmF0aW9ucyBDYWNoZSBUZXN0c1xuICpcbiAqIENvbXByZWhlbnNpdmUgdGVzdCBzdWl0ZSBmb3IgdGhlIHN1cHBvcnQgb3BlcmF0aW9ucyBjYWNoaW5nIGxheWVyXG4gKi9cblxuaW1wb3J0IHsgYmVmb3JlRWFjaCwgZGVzY3JpYmUsIGV4cGVjdCwgaXQgfSBmcm9tIFwiQGplc3QvZ2xvYmFsc1wiO1xuaW1wb3J0IHR5cGUge1xuICBDb21wbGlhbmNlVmFsaWRhdGlvblJlc3VsdCxcbiAgQ29zdEFuYWx5c2lzLFxuICBFeGVjdXRpb25NZXRhZGF0YSxcbiAgSW1wbGVtZW50YXRpb25HYXAsXG4gIEluZnJhc3RydWN0dXJlQXVkaXRSZXN1bHQsXG4gIFNlY3VyaXR5QXVkaXRSZXN1bHQsXG59IGZyb20gXCIuLi9iZWRyb2NrLXN1cHBvcnQtbWFuYWdlclwiO1xuaW1wb3J0IHtcbiAgU1VQUE9SVF9DQUNIRV9DT05GSUdTLFxuICBTdXBwb3J0T3BlcmF0aW9uc0NhY2hlLFxuICBjcmVhdGVTdXBwb3J0T3BlcmF0aW9uc0NhY2hlLFxuICB0eXBlIFN1cHBvcnRDYWNoZUNvbmZpZyxcbn0gZnJvbSBcIi4uL3N1cHBvcnQtb3BlcmF0aW9ucy1jYWNoZVwiO1xuXG5kZXNjcmliZShcIlN1cHBvcnRPcGVyYXRpb25zQ2FjaGVcIiwgKCkgPT4ge1xuICBsZXQgY2FjaGU6IFN1cHBvcnRPcGVyYXRpb25zQ2FjaGU7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgY2FjaGUgPSBuZXcgU3VwcG9ydE9wZXJhdGlvbnNDYWNoZSgpO1xuICB9KTtcblxuICBkZXNjcmliZShcIkluZnJhc3RydWN0dXJlIEF1ZGl0IENhY2hpbmdcIiwgKCkgPT4ge1xuICAgIGl0KFwic2hvdWxkIGNhY2hlIGFuZCByZXRyaWV2ZSBpbmZyYXN0cnVjdHVyZSBhdWRpdCByZXN1bHRzXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGF1ZGl0UmVzdWx0OiBJbmZyYXN0cnVjdHVyZUF1ZGl0UmVzdWx0ID0ge1xuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIG92ZXJhbGxIZWFsdGg6IFwiaGVhbHRoeVwiLFxuICAgICAgICBkZXRlY3RlZElzc3VlczogW10sXG4gICAgICAgIGltcGxlbWVudGF0aW9uR2FwczogW10sXG4gICAgICAgIHJlY29tbWVuZGF0aW9uczogW10sXG4gICAgICAgIGNvbXBsaWFuY2VTdGF0dXM6IHtcbiAgICAgICAgICBnZHByQ29tcGxpYW50OiB0cnVlLFxuICAgICAgICAgIGRhdGFSZXNpZGVuY3lDb21wbGlhbnQ6IHRydWUsXG4gICAgICAgICAgYXVkaXRUcmFpbENvbXBsZXRlOiB0cnVlLFxuICAgICAgICAgIGlzc3VlczogW10sXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICAvLyBDYWNoZSB0aGUgcmVzdWx0XG4gICAgICBhd2FpdCBjYWNoZS5zZXRJbmZyYXN0cnVjdHVyZUF1ZGl0KGF1ZGl0UmVzdWx0KTtcblxuICAgICAgLy8gUmV0cmlldmUgZnJvbSBjYWNoZVxuICAgICAgY29uc3QgY2FjaGVkID0gYXdhaXQgY2FjaGUuZ2V0SW5mcmFzdHJ1Y3R1cmVBdWRpdCgpO1xuXG4gICAgICBleHBlY3QoY2FjaGVkKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGNhY2hlZD8ub3ZlcmFsbEhlYWx0aCkudG9CZShcImhlYWx0aHlcIik7XG4gICAgICBleHBlY3QoY2FjaGVkPy5kZXRlY3RlZElzc3VlcykudG9IYXZlTGVuZ3RoKDApO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgcmV0dXJuIG51bGwgZm9yIGNhY2hlIG1pc3NcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY2FjaGVkID0gYXdhaXQgY2FjaGUuZ2V0SW5mcmFzdHJ1Y3R1cmVBdWRpdCh7IGNvbnRleHQ6IFwidGVzdFwiIH0pO1xuICAgICAgZXhwZWN0KGNhY2hlZCkudG9CZU51bGwoKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIGNhY2hlIGRpZmZlcmVudCBjb250ZXh0cyBzZXBhcmF0ZWx5XCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdDE6IEluZnJhc3RydWN0dXJlQXVkaXRSZXN1bHQgPSB7XG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgb3ZlcmFsbEhlYWx0aDogXCJoZWFsdGh5XCIsXG4gICAgICAgIGRldGVjdGVkSXNzdWVzOiBbXSxcbiAgICAgICAgaW1wbGVtZW50YXRpb25HYXBzOiBbXSxcbiAgICAgICAgcmVjb21tZW5kYXRpb25zOiBbXSxcbiAgICAgICAgY29tcGxpYW5jZVN0YXR1czoge1xuICAgICAgICAgIGdkcHJDb21wbGlhbnQ6IHRydWUsXG4gICAgICAgICAgZGF0YVJlc2lkZW5jeUNvbXBsaWFudDogdHJ1ZSxcbiAgICAgICAgICBhdWRpdFRyYWlsQ29tcGxldGU6IHRydWUsXG4gICAgICAgICAgaXNzdWVzOiBbXSxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHJlc3VsdDI6IEluZnJhc3RydWN0dXJlQXVkaXRSZXN1bHQgPSB7XG4gICAgICAgIC4uLnJlc3VsdDEsXG4gICAgICAgIG92ZXJhbGxIZWFsdGg6IFwid2FybmluZ1wiLFxuICAgICAgfTtcblxuICAgICAgYXdhaXQgY2FjaGUuc2V0SW5mcmFzdHJ1Y3R1cmVBdWRpdChyZXN1bHQxLCB7IGVudjogXCJkZXZcIiB9KTtcbiAgICAgIGF3YWl0IGNhY2hlLnNldEluZnJhc3RydWN0dXJlQXVkaXQocmVzdWx0MiwgeyBlbnY6IFwicHJvZFwiIH0pO1xuXG4gICAgICBjb25zdCBjYWNoZWQxID0gYXdhaXQgY2FjaGUuZ2V0SW5mcmFzdHJ1Y3R1cmVBdWRpdCh7IGVudjogXCJkZXZcIiB9KTtcbiAgICAgIGNvbnN0IGNhY2hlZDIgPSBhd2FpdCBjYWNoZS5nZXRJbmZyYXN0cnVjdHVyZUF1ZGl0KHsgZW52OiBcInByb2RcIiB9KTtcblxuICAgICAgZXhwZWN0KGNhY2hlZDE/Lm92ZXJhbGxIZWFsdGgpLnRvQmUoXCJoZWFsdGh5XCIpO1xuICAgICAgZXhwZWN0KGNhY2hlZDI/Lm92ZXJhbGxIZWFsdGgpLnRvQmUoXCJ3YXJuaW5nXCIpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZShcIk1ldGEtTW9uaXRvcmluZyBDYWNoaW5nXCIsICgpID0+IHtcbiAgICBpdChcInNob3VsZCBjYWNoZSBhbmQgcmV0cmlldmUgbWV0YS1tb25pdG9yaW5nIGRhdGFcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZXhlY3V0aW9uRGF0YTogRXhlY3V0aW9uTWV0YWRhdGEgPSB7XG4gICAgICAgIGV4ZWN1dGlvbklkOiBcImV4ZWMtMTIzXCIsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgb3BlcmF0aW9uOiBcInRlc3Qtb3BlcmF0aW9uXCIsXG4gICAgICAgIGR1cmF0aW9uOiAxMDAwLFxuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBwZXJmb3JtYW5jZU1ldHJpY3M6IHtcbiAgICAgICAgICByZXNwb25zZVRpbWU6IDUwMCxcbiAgICAgICAgICBtZW1vcnlVc2FnZTogMTAwLFxuICAgICAgICAgIGNwdVVzYWdlOiA1MCxcbiAgICAgICAgICBuZXR3b3JrTGF0ZW5jeTogMTAsXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBhd2FpdCBjYWNoZS5zZXRNZXRhTW9uaXRvcmluZyhleGVjdXRpb25EYXRhLCBcImV4ZWMtMTIzXCIpO1xuXG4gICAgICBjb25zdCBjYWNoZWQgPSBhd2FpdCBjYWNoZS5nZXRNZXRhTW9uaXRvcmluZyhcImV4ZWMtMTIzXCIpO1xuXG4gICAgICBleHBlY3QoY2FjaGVkKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGNhY2hlZD8uZXhlY3V0aW9uSWQpLnRvQmUoXCJleGVjLTEyM1wiKTtcbiAgICAgIGV4cGVjdChjYWNoZWQ/LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBoYW5kbGUgZGlmZmVyZW50IGV4ZWN1dGlvbiBJRHNcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZGF0YTE6IEV4ZWN1dGlvbk1ldGFkYXRhID0ge1xuICAgICAgICBleGVjdXRpb25JZDogXCJleGVjLTFcIixcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICBvcGVyYXRpb246IFwib3AxXCIsXG4gICAgICAgIGR1cmF0aW9uOiAxMDAsXG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIHBlcmZvcm1hbmNlTWV0cmljczoge1xuICAgICAgICAgIHJlc3BvbnNlVGltZTogNTAsXG4gICAgICAgICAgbWVtb3J5VXNhZ2U6IDEwLFxuICAgICAgICAgIGNwdVVzYWdlOiA1LFxuICAgICAgICAgIG5ldHdvcmtMYXRlbmN5OiAxLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgY29uc3QgZGF0YTI6IEV4ZWN1dGlvbk1ldGFkYXRhID0ge1xuICAgICAgICAuLi5kYXRhMSxcbiAgICAgICAgZXhlY3V0aW9uSWQ6IFwiZXhlYy0yXCIsXG4gICAgICAgIG9wZXJhdGlvbjogXCJvcDJcIixcbiAgICAgIH07XG5cbiAgICAgIGF3YWl0IGNhY2hlLnNldE1ldGFNb25pdG9yaW5nKGRhdGExLCBcImV4ZWMtMVwiKTtcbiAgICAgIGF3YWl0IGNhY2hlLnNldE1ldGFNb25pdG9yaW5nKGRhdGEyLCBcImV4ZWMtMlwiKTtcblxuICAgICAgY29uc3QgY2FjaGVkMSA9IGF3YWl0IGNhY2hlLmdldE1ldGFNb25pdG9yaW5nKFwiZXhlYy0xXCIpO1xuICAgICAgY29uc3QgY2FjaGVkMiA9IGF3YWl0IGNhY2hlLmdldE1ldGFNb25pdG9yaW5nKFwiZXhlYy0yXCIpO1xuXG4gICAgICBleHBlY3QoY2FjaGVkMT8ub3BlcmF0aW9uKS50b0JlKFwib3AxXCIpO1xuICAgICAgZXhwZWN0KGNhY2hlZDI/Lm9wZXJhdGlvbikudG9CZShcIm9wMlwiKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJJbXBsZW1lbnRhdGlvbiBHYXBzIENhY2hpbmdcIiwgKCkgPT4ge1xuICAgIGl0KFwic2hvdWxkIGNhY2hlIGFuZCByZXRyaWV2ZSBpbXBsZW1lbnRhdGlvbiBnYXBzXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGdhcHM6IEltcGxlbWVudGF0aW9uR2FwW10gPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogXCJnYXAtMVwiLFxuICAgICAgICAgIG1vZHVsZTogXCJhdXRoXCIsXG4gICAgICAgICAgZGVzY3JpcHRpb246IFwiTWlzc2luZyBPQXV0aCBpbXBsZW1lbnRhdGlvblwiLFxuICAgICAgICAgIHByaW9yaXR5OiBcImhpZ2hcIixcbiAgICAgICAgICBlc3RpbWF0ZWRFZmZvcnQ6IFwiMiBkYXlzXCIsXG4gICAgICAgICAgZGVwZW5kZW5jaWVzOiBbXSxcbiAgICAgICAgfSxcbiAgICAgIF07XG5cbiAgICAgIGF3YWl0IGNhY2hlLnNldEltcGxlbWVudGF0aW9uR2FwcyhnYXBzLCBcImF1dGhcIik7XG5cbiAgICAgIGNvbnN0IGNhY2hlZCA9IGF3YWl0IGNhY2hlLmdldEltcGxlbWVudGF0aW9uR2FwcyhcImF1dGhcIik7XG5cbiAgICAgIGV4cGVjdChjYWNoZWQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QoY2FjaGVkKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QoY2FjaGVkPy5bMF0ubW9kdWxlKS50b0JlKFwiYXV0aFwiKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIGNhY2hlIGdhcHMgZm9yIGRpZmZlcmVudCBtb2R1bGVzXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGF1dGhHYXBzOiBJbXBsZW1lbnRhdGlvbkdhcFtdID0gW1xuICAgICAgICB7XG4gICAgICAgICAgaWQ6IFwiZ2FwLTFcIixcbiAgICAgICAgICBtb2R1bGU6IFwiYXV0aFwiLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkF1dGggZ2FwXCIsXG4gICAgICAgICAgcHJpb3JpdHk6IFwiaGlnaFwiLFxuICAgICAgICAgIGVzdGltYXRlZEVmZm9ydDogXCIxIGRheVwiLFxuICAgICAgICAgIGRlcGVuZGVuY2llczogW10sXG4gICAgICAgIH0sXG4gICAgICBdO1xuXG4gICAgICBjb25zdCBwYXltZW50R2FwczogSW1wbGVtZW50YXRpb25HYXBbXSA9IFtcbiAgICAgICAge1xuICAgICAgICAgIGlkOiBcImdhcC0yXCIsXG4gICAgICAgICAgbW9kdWxlOiBcInBheW1lbnRcIixcbiAgICAgICAgICBkZXNjcmlwdGlvbjogXCJQYXltZW50IGdhcFwiLFxuICAgICAgICAgIHByaW9yaXR5OiBcIm1lZGl1bVwiLFxuICAgICAgICAgIGVzdGltYXRlZEVmZm9ydDogXCIzIGRheXNcIixcbiAgICAgICAgICBkZXBlbmRlbmNpZXM6IFtdLFxuICAgICAgICB9LFxuICAgICAgXTtcblxuICAgICAgYXdhaXQgY2FjaGUuc2V0SW1wbGVtZW50YXRpb25HYXBzKGF1dGhHYXBzLCBcImF1dGhcIik7XG4gICAgICBhd2FpdCBjYWNoZS5zZXRJbXBsZW1lbnRhdGlvbkdhcHMocGF5bWVudEdhcHMsIFwicGF5bWVudFwiKTtcblxuICAgICAgY29uc3QgY2FjaGVkQXV0aCA9IGF3YWl0IGNhY2hlLmdldEltcGxlbWVudGF0aW9uR2FwcyhcImF1dGhcIik7XG4gICAgICBjb25zdCBjYWNoZWRQYXltZW50ID0gYXdhaXQgY2FjaGUuZ2V0SW1wbGVtZW50YXRpb25HYXBzKFwicGF5bWVudFwiKTtcblxuICAgICAgZXhwZWN0KGNhY2hlZEF1dGg/LlswXS5tb2R1bGUpLnRvQmUoXCJhdXRoXCIpO1xuICAgICAgZXhwZWN0KGNhY2hlZFBheW1lbnQ/LlswXS5tb2R1bGUpLnRvQmUoXCJwYXltZW50XCIpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZShcIkNvbXBsaWFuY2UgVmFsaWRhdGlvbiBDYWNoaW5nXCIsICgpID0+IHtcbiAgICBpdChcInNob3VsZCBjYWNoZSBhbmQgcmV0cmlldmUgY29tcGxpYW5jZSB2YWxpZGF0aW9uIHJlc3VsdHNcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0OiBDb21wbGlhbmNlVmFsaWRhdGlvblJlc3VsdCA9IHtcbiAgICAgICAgaXNDb21wbGlhbnQ6IHRydWUsXG4gICAgICAgIHZpb2xhdGlvbnM6IFtdLFxuICAgICAgICByZWNvbW1lbmRhdGlvbnM6IFtdLFxuICAgICAgICBsYXN0Q2hlY2tlZDogbmV3IERhdGUoKSxcbiAgICAgIH07XG5cbiAgICAgIGF3YWl0IGNhY2hlLnNldENvbXBsaWFuY2VWYWxpZGF0aW9uKHJlc3VsdCwgXCJnZHByXCIpO1xuXG4gICAgICBjb25zdCBjYWNoZWQgPSBhd2FpdCBjYWNoZS5nZXRDb21wbGlhbmNlVmFsaWRhdGlvbihcImdkcHJcIik7XG5cbiAgICAgIGV4cGVjdChjYWNoZWQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QoY2FjaGVkPy5pc0NvbXBsaWFudCkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChjYWNoZWQ/LnZpb2xhdGlvbnMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIGhhbmRsZSBkaWZmZXJlbnQgY29tcGxpYW5jZSBzY29wZXNcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZ2RwclJlc3VsdDogQ29tcGxpYW5jZVZhbGlkYXRpb25SZXN1bHQgPSB7XG4gICAgICAgIGlzQ29tcGxpYW50OiB0cnVlLFxuICAgICAgICB2aW9sYXRpb25zOiBbXSxcbiAgICAgICAgcmVjb21tZW5kYXRpb25zOiBbXSxcbiAgICAgICAgbGFzdENoZWNrZWQ6IG5ldyBEYXRlKCksXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBoaXBhYVJlc3VsdDogQ29tcGxpYW5jZVZhbGlkYXRpb25SZXN1bHQgPSB7XG4gICAgICAgIGlzQ29tcGxpYW50OiBmYWxzZSxcbiAgICAgICAgdmlvbGF0aW9uczogW1wiTWlzc2luZyBlbmNyeXB0aW9uXCJdLFxuICAgICAgICByZWNvbW1lbmRhdGlvbnM6IFtcIkVuYWJsZSBlbmNyeXB0aW9uXCJdLFxuICAgICAgICBsYXN0Q2hlY2tlZDogbmV3IERhdGUoKSxcbiAgICAgIH07XG5cbiAgICAgIGF3YWl0IGNhY2hlLnNldENvbXBsaWFuY2VWYWxpZGF0aW9uKGdkcHJSZXN1bHQsIFwiZ2RwclwiKTtcbiAgICAgIGF3YWl0IGNhY2hlLnNldENvbXBsaWFuY2VWYWxpZGF0aW9uKGhpcGFhUmVzdWx0LCBcImhpcGFhXCIpO1xuXG4gICAgICBjb25zdCBjYWNoZWRHZHByID0gYXdhaXQgY2FjaGUuZ2V0Q29tcGxpYW5jZVZhbGlkYXRpb24oXCJnZHByXCIpO1xuICAgICAgY29uc3QgY2FjaGVkSGlwYWEgPSBhd2FpdCBjYWNoZS5nZXRDb21wbGlhbmNlVmFsaWRhdGlvbihcImhpcGFhXCIpO1xuXG4gICAgICBleHBlY3QoY2FjaGVkR2Rwcj8uaXNDb21wbGlhbnQpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoY2FjaGVkSGlwYWE/LmlzQ29tcGxpYW50KS50b0JlKGZhbHNlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJTZWN1cml0eSBBdWRpdCBDYWNoaW5nXCIsICgpID0+IHtcbiAgICBpdChcInNob3VsZCBjYWNoZSBhbmQgcmV0cmlldmUgc2VjdXJpdHkgYXVkaXQgcmVzdWx0c1wiLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQ6IFNlY3VyaXR5QXVkaXRSZXN1bHQgPSB7XG4gICAgICAgIHNlY3VyaXR5U2NvcmU6IDg1LFxuICAgICAgICB2dWxuZXJhYmlsaXRpZXM6IFtdLFxuICAgICAgICByZWNvbW1lbmRhdGlvbnM6IFtdLFxuICAgICAgICBsYXN0QXVkaXQ6IG5ldyBEYXRlKCksXG4gICAgICB9O1xuXG4gICAgICBhd2FpdCBjYWNoZS5zZXRTZWN1cml0eUF1ZGl0KHJlc3VsdCwgXCJhcGlcIik7XG5cbiAgICAgIGNvbnN0IGNhY2hlZCA9IGF3YWl0IGNhY2hlLmdldFNlY3VyaXR5QXVkaXQoXCJhcGlcIik7XG5cbiAgICAgIGV4cGVjdChjYWNoZWQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QoY2FjaGVkPy5zZWN1cml0eVNjb3JlKS50b0JlKDg1KTtcbiAgICAgIGV4cGVjdChjYWNoZWQ/LnZ1bG5lcmFiaWxpdGllcykudG9IYXZlTGVuZ3RoKDApO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgY2FjaGUgYXVkaXRzIGZvciBkaWZmZXJlbnQgY29tcG9uZW50c1wiLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBhcGlSZXN1bHQ6IFNlY3VyaXR5QXVkaXRSZXN1bHQgPSB7XG4gICAgICAgIHNlY3VyaXR5U2NvcmU6IDkwLFxuICAgICAgICB2dWxuZXJhYmlsaXRpZXM6IFtdLFxuICAgICAgICByZWNvbW1lbmRhdGlvbnM6IFtdLFxuICAgICAgICBsYXN0QXVkaXQ6IG5ldyBEYXRlKCksXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBkYlJlc3VsdDogU2VjdXJpdHlBdWRpdFJlc3VsdCA9IHtcbiAgICAgICAgc2VjdXJpdHlTY29yZTogNzUsXG4gICAgICAgIHZ1bG5lcmFiaWxpdGllczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkOiBcInZ1bG4tMVwiLFxuICAgICAgICAgICAgc2V2ZXJpdHk6IFwibWVkaXVtXCIsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJXZWFrIHBhc3N3b3JkIHBvbGljeVwiLFxuICAgICAgICAgICAgY29tcG9uZW50OiBcImRhdGFiYXNlXCIsXG4gICAgICAgICAgICByZW1lZGlhdGlvbjogXCJTdHJlbmd0aGVuIHBhc3N3b3JkIHJlcXVpcmVtZW50c1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHJlY29tbWVuZGF0aW9uczogW1wiVXBkYXRlIHBhc3N3b3JkIHBvbGljeVwiXSxcbiAgICAgICAgbGFzdEF1ZGl0OiBuZXcgRGF0ZSgpLFxuICAgICAgfTtcblxuICAgICAgYXdhaXQgY2FjaGUuc2V0U2VjdXJpdHlBdWRpdChhcGlSZXN1bHQsIFwiYXBpXCIpO1xuICAgICAgYXdhaXQgY2FjaGUuc2V0U2VjdXJpdHlBdWRpdChkYlJlc3VsdCwgXCJkYXRhYmFzZVwiKTtcblxuICAgICAgY29uc3QgY2FjaGVkQXBpID0gYXdhaXQgY2FjaGUuZ2V0U2VjdXJpdHlBdWRpdChcImFwaVwiKTtcbiAgICAgIGNvbnN0IGNhY2hlZERiID0gYXdhaXQgY2FjaGUuZ2V0U2VjdXJpdHlBdWRpdChcImRhdGFiYXNlXCIpO1xuXG4gICAgICBleHBlY3QoY2FjaGVkQXBpPy5zZWN1cml0eVNjb3JlKS50b0JlKDkwKTtcbiAgICAgIGV4cGVjdChjYWNoZWREYj8uc2VjdXJpdHlTY29yZSkudG9CZSg3NSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwiQ29zdCBBbmFseXNpcyBDYWNoaW5nXCIsICgpID0+IHtcbiAgICBpdChcInNob3VsZCBjYWNoZSBhbmQgcmV0cmlldmUgY29zdCBhbmFseXNpc1wiLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBhbmFseXNpczogQ29zdEFuYWx5c2lzID0ge1xuICAgICAgICBjdXJyZW50U3BlbmQ6IDEwMCxcbiAgICAgICAgcHJvamVjdGVkU3BlbmQ6IDE1MCxcbiAgICAgICAgYnVkZ2V0VXRpbGl6YXRpb246IDAuNjcsXG4gICAgICAgIGNvc3RCcmVha2Rvd246IHtcbiAgICAgICAgICBjb21wdXRlOiA2MCxcbiAgICAgICAgICBzdG9yYWdlOiAzMCxcbiAgICAgICAgICBuZXR3b3JrOiAxMCxcbiAgICAgICAgfSxcbiAgICAgICAgcmVjb21tZW5kYXRpb25zOiBbXCJPcHRpbWl6ZSBzdG9yYWdlIHVzYWdlXCJdLFxuICAgICAgfTtcblxuICAgICAgYXdhaXQgY2FjaGUuc2V0Q29zdEFuYWx5c2lzKGFuYWx5c2lzLCBcIm1vbnRobHlcIik7XG5cbiAgICAgIGNvbnN0IGNhY2hlZCA9IGF3YWl0IGNhY2hlLmdldENvc3RBbmFseXNpcyhcIm1vbnRobHlcIik7XG5cbiAgICAgIGV4cGVjdChjYWNoZWQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QoY2FjaGVkPy5jdXJyZW50U3BlbmQpLnRvQmUoMTAwKTtcbiAgICAgIGV4cGVjdChjYWNoZWQ/LmJ1ZGdldFV0aWxpemF0aW9uKS50b0JlKDAuNjcpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgY2FjaGUgYW5hbHlzaXMgZm9yIGRpZmZlcmVudCB0aW1lIHJhbmdlc1wiLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBkYWlseUFuYWx5c2lzOiBDb3N0QW5hbHlzaXMgPSB7XG4gICAgICAgIGN1cnJlbnRTcGVuZDogMTAsXG4gICAgICAgIHByb2plY3RlZFNwZW5kOiAxNSxcbiAgICAgICAgYnVkZ2V0VXRpbGl6YXRpb246IDAuNSxcbiAgICAgICAgY29zdEJyZWFrZG93bjogeyBjb21wdXRlOiA2LCBzdG9yYWdlOiAzLCBuZXR3b3JrOiAxIH0sXG4gICAgICAgIHJlY29tbWVuZGF0aW9uczogW10sXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBtb250aGx5QW5hbHlzaXM6IENvc3RBbmFseXNpcyA9IHtcbiAgICAgICAgY3VycmVudFNwZW5kOiAzMDAsXG4gICAgICAgIHByb2plY3RlZFNwZW5kOiA0NTAsXG4gICAgICAgIGJ1ZGdldFV0aWxpemF0aW9uOiAwLjc1LFxuICAgICAgICBjb3N0QnJlYWtkb3duOiB7IGNvbXB1dGU6IDE4MCwgc3RvcmFnZTogOTAsIG5ldHdvcms6IDMwIH0sXG4gICAgICAgIHJlY29tbWVuZGF0aW9uczogW1wiUmV2aWV3IGNvbXB1dGUgdXNhZ2VcIl0sXG4gICAgICB9O1xuXG4gICAgICBhd2FpdCBjYWNoZS5zZXRDb3N0QW5hbHlzaXMoZGFpbHlBbmFseXNpcywgXCJkYWlseVwiKTtcbiAgICAgIGF3YWl0IGNhY2hlLnNldENvc3RBbmFseXNpcyhtb250aGx5QW5hbHlzaXMsIFwibW9udGhseVwiKTtcblxuICAgICAgY29uc3QgY2FjaGVkRGFpbHkgPSBhd2FpdCBjYWNoZS5nZXRDb3N0QW5hbHlzaXMoXCJkYWlseVwiKTtcbiAgICAgIGNvbnN0IGNhY2hlZE1vbnRobHkgPSBhd2FpdCBjYWNoZS5nZXRDb3N0QW5hbHlzaXMoXCJtb250aGx5XCIpO1xuXG4gICAgICBleHBlY3QoY2FjaGVkRGFpbHk/LmN1cnJlbnRTcGVuZCkudG9CZSgxMCk7XG4gICAgICBleHBlY3QoY2FjaGVkTW9udGhseT8uY3VycmVudFNwZW5kKS50b0JlKDMwMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwiQ2FjaGUgU3RhdGlzdGljc1wiLCAoKSA9PiB7XG4gICAgaXQoXCJzaG91bGQgdHJhY2sgY2FjaGUgaGl0cyBhbmQgbWlzc2VzXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdDogSW5mcmFzdHJ1Y3R1cmVBdWRpdFJlc3VsdCA9IHtcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICBvdmVyYWxsSGVhbHRoOiBcImhlYWx0aHlcIixcbiAgICAgICAgZGV0ZWN0ZWRJc3N1ZXM6IFtdLFxuICAgICAgICBpbXBsZW1lbnRhdGlvbkdhcHM6IFtdLFxuICAgICAgICByZWNvbW1lbmRhdGlvbnM6IFtdLFxuICAgICAgICBjb21wbGlhbmNlU3RhdHVzOiB7XG4gICAgICAgICAgZ2RwckNvbXBsaWFudDogdHJ1ZSxcbiAgICAgICAgICBkYXRhUmVzaWRlbmN5Q29tcGxpYW50OiB0cnVlLFxuICAgICAgICAgIGF1ZGl0VHJhaWxDb21wbGV0ZTogdHJ1ZSxcbiAgICAgICAgICBpc3N1ZXM6IFtdLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgLy8gTWlzc1xuICAgICAgYXdhaXQgY2FjaGUuZ2V0SW5mcmFzdHJ1Y3R1cmVBdWRpdCgpO1xuXG4gICAgICAvLyBTZXRcbiAgICAgIGF3YWl0IGNhY2hlLnNldEluZnJhc3RydWN0dXJlQXVkaXQocmVzdWx0KTtcblxuICAgICAgLy8gSGl0XG4gICAgICBhd2FpdCBjYWNoZS5nZXRJbmZyYXN0cnVjdHVyZUF1ZGl0KCk7XG5cbiAgICAgIGNvbnN0IHN0YXRzID0gY2FjaGUuZ2V0U3RhdHMoKTtcblxuICAgICAgZXhwZWN0KHN0YXRzLmhpdHMpLnRvQmUoMSk7XG4gICAgICBleHBlY3Qoc3RhdHMubWlzc2VzKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KHN0YXRzLnRvdGFsUmVxdWVzdHMpLnRvQmUoMik7XG4gICAgICBleHBlY3Qoc3RhdHMuaGl0UmF0ZSkudG9CZSgwLjUpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgdHJhY2sgb3BlcmF0aW9uLXNwZWNpZmljIHN0YXRpc3RpY3NcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgYXVkaXRSZXN1bHQ6IEluZnJhc3RydWN0dXJlQXVkaXRSZXN1bHQgPSB7XG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgb3ZlcmFsbEhlYWx0aDogXCJoZWFsdGh5XCIsXG4gICAgICAgIGRldGVjdGVkSXNzdWVzOiBbXSxcbiAgICAgICAgaW1wbGVtZW50YXRpb25HYXBzOiBbXSxcbiAgICAgICAgcmVjb21tZW5kYXRpb25zOiBbXSxcbiAgICAgICAgY29tcGxpYW5jZVN0YXR1czoge1xuICAgICAgICAgIGdkcHJDb21wbGlhbnQ6IHRydWUsXG4gICAgICAgICAgZGF0YVJlc2lkZW5jeUNvbXBsaWFudDogdHJ1ZSxcbiAgICAgICAgICBhdWRpdFRyYWlsQ29tcGxldGU6IHRydWUsXG4gICAgICAgICAgaXNzdWVzOiBbXSxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIGF3YWl0IGNhY2hlLnNldEluZnJhc3RydWN0dXJlQXVkaXQoYXVkaXRSZXN1bHQpO1xuICAgICAgYXdhaXQgY2FjaGUuZ2V0SW5mcmFzdHJ1Y3R1cmVBdWRpdCgpOyAvLyBIaXRcbiAgICAgIGF3YWl0IGNhY2hlLmdldEluZnJhc3RydWN0dXJlQXVkaXQoKTsgLy8gSGl0XG5cbiAgICAgIGNvbnN0IG9wU3RhdHMgPSBjYWNoZS5nZXRPcGVyYXRpb25TdGF0cyhcImluZnJhc3RydWN0dXJlQXVkaXRcIik7XG5cbiAgICAgIGV4cGVjdChvcFN0YXRzLmhpdHMpLnRvQmUoMik7XG4gICAgICBleHBlY3Qob3BTdGF0cy5taXNzZXMpLnRvQmUoMCk7XG4gICAgICBleHBlY3Qob3BTdGF0cy5oaXRSYXRlKS50b0JlKDEuMCk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCB1cGRhdGUgY2FjaGUgc2l6ZSBjb3JyZWN0bHlcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0OiBJbmZyYXN0cnVjdHVyZUF1ZGl0UmVzdWx0ID0ge1xuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIG92ZXJhbGxIZWFsdGg6IFwiaGVhbHRoeVwiLFxuICAgICAgICBkZXRlY3RlZElzc3VlczogW10sXG4gICAgICAgIGltcGxlbWVudGF0aW9uR2FwczogW10sXG4gICAgICAgIHJlY29tbWVuZGF0aW9uczogW10sXG4gICAgICAgIGNvbXBsaWFuY2VTdGF0dXM6IHtcbiAgICAgICAgICBnZHByQ29tcGxpYW50OiB0cnVlLFxuICAgICAgICAgIGRhdGFSZXNpZGVuY3lDb21wbGlhbnQ6IHRydWUsXG4gICAgICAgICAgYXVkaXRUcmFpbENvbXBsZXRlOiB0cnVlLFxuICAgICAgICAgIGlzc3VlczogW10sXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBpbml0aWFsU3RhdHMgPSBjYWNoZS5nZXRTdGF0cygpO1xuICAgICAgZXhwZWN0KGluaXRpYWxTdGF0cy5jYWNoZVNpemUpLnRvQmUoMCk7XG5cbiAgICAgIGF3YWl0IGNhY2hlLnNldEluZnJhc3RydWN0dXJlQXVkaXQocmVzdWx0KTtcblxuICAgICAgY29uc3QgdXBkYXRlZFN0YXRzID0gY2FjaGUuZ2V0U3RhdHMoKTtcbiAgICAgIGV4cGVjdCh1cGRhdGVkU3RhdHMuY2FjaGVTaXplKS50b0JlKDEpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZShcIkNhY2hlIEludmFsaWRhdGlvblwiLCAoKSA9PiB7XG4gICAgaXQoXCJzaG91bGQgaW52YWxpZGF0ZSBzcGVjaWZpYyBvcGVyYXRpb24gdHlwZVwiLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQ6IEluZnJhc3RydWN0dXJlQXVkaXRSZXN1bHQgPSB7XG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgb3ZlcmFsbEhlYWx0aDogXCJoZWFsdGh5XCIsXG4gICAgICAgIGRldGVjdGVkSXNzdWVzOiBbXSxcbiAgICAgICAgaW1wbGVtZW50YXRpb25HYXBzOiBbXSxcbiAgICAgICAgcmVjb21tZW5kYXRpb25zOiBbXSxcbiAgICAgICAgY29tcGxpYW5jZVN0YXR1czoge1xuICAgICAgICAgIGdkcHJDb21wbGlhbnQ6IHRydWUsXG4gICAgICAgICAgZGF0YVJlc2lkZW5jeUNvbXBsaWFudDogdHJ1ZSxcbiAgICAgICAgICBhdWRpdFRyYWlsQ29tcGxldGU6IHRydWUsXG4gICAgICAgICAgaXNzdWVzOiBbXSxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIGF3YWl0IGNhY2hlLnNldEluZnJhc3RydWN0dXJlQXVkaXQocmVzdWx0KTtcblxuICAgICAgbGV0IGNhY2hlZCA9IGF3YWl0IGNhY2hlLmdldEluZnJhc3RydWN0dXJlQXVkaXQoKTtcbiAgICAgIGV4cGVjdChjYWNoZWQpLnRvQmVEZWZpbmVkKCk7XG5cbiAgICAgIGF3YWl0IGNhY2hlLmludmFsaWRhdGUoXCJpbmZyYXN0cnVjdHVyZUF1ZGl0XCIpO1xuXG4gICAgICBjYWNoZWQgPSBhd2FpdCBjYWNoZS5nZXRJbmZyYXN0cnVjdHVyZUF1ZGl0KCk7XG4gICAgICBleHBlY3QoY2FjaGVkKS50b0JlTnVsbCgpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgaW52YWxpZGF0ZSBhbGwgY2FjaGUgZW50cmllc1wiLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBhdWRpdFJlc3VsdDogSW5mcmFzdHJ1Y3R1cmVBdWRpdFJlc3VsdCA9IHtcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICBvdmVyYWxsSGVhbHRoOiBcImhlYWx0aHlcIixcbiAgICAgICAgZGV0ZWN0ZWRJc3N1ZXM6IFtdLFxuICAgICAgICBpbXBsZW1lbnRhdGlvbkdhcHM6IFtdLFxuICAgICAgICByZWNvbW1lbmRhdGlvbnM6IFtdLFxuICAgICAgICBjb21wbGlhbmNlU3RhdHVzOiB7XG4gICAgICAgICAgZ2RwckNvbXBsaWFudDogdHJ1ZSxcbiAgICAgICAgICBkYXRhUmVzaWRlbmN5Q29tcGxpYW50OiB0cnVlLFxuICAgICAgICAgIGF1ZGl0VHJhaWxDb21wbGV0ZTogdHJ1ZSxcbiAgICAgICAgICBpc3N1ZXM6IFtdLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgY29uc3QgY29tcGxpYW5jZVJlc3VsdDogQ29tcGxpYW5jZVZhbGlkYXRpb25SZXN1bHQgPSB7XG4gICAgICAgIGlzQ29tcGxpYW50OiB0cnVlLFxuICAgICAgICB2aW9sYXRpb25zOiBbXSxcbiAgICAgICAgcmVjb21tZW5kYXRpb25zOiBbXSxcbiAgICAgICAgbGFzdENoZWNrZWQ6IG5ldyBEYXRlKCksXG4gICAgICB9O1xuXG4gICAgICBhd2FpdCBjYWNoZS5zZXRJbmZyYXN0cnVjdHVyZUF1ZGl0KGF1ZGl0UmVzdWx0KTtcbiAgICAgIGF3YWl0IGNhY2hlLnNldENvbXBsaWFuY2VWYWxpZGF0aW9uKGNvbXBsaWFuY2VSZXN1bHQpO1xuXG4gICAgICBjb25zdCBzdGF0c0JlZm9yZSA9IGNhY2hlLmdldFN0YXRzKCk7XG4gICAgICBleHBlY3Qoc3RhdHNCZWZvcmUuY2FjaGVTaXplKS50b0JlKDIpO1xuXG4gICAgICBhd2FpdCBjYWNoZS5pbnZhbGlkYXRlQWxsKCk7XG5cbiAgICAgIGNvbnN0IHN0YXRzQWZ0ZXIgPSBjYWNoZS5nZXRTdGF0cygpO1xuICAgICAgZXhwZWN0KHN0YXRzQWZ0ZXIuY2FjaGVTaXplKS50b0JlKDApO1xuXG4gICAgICBjb25zdCBjYWNoZWRBdWRpdCA9IGF3YWl0IGNhY2hlLmdldEluZnJhc3RydWN0dXJlQXVkaXQoKTtcbiAgICAgIGNvbnN0IGNhY2hlZENvbXBsaWFuY2UgPSBhd2FpdCBjYWNoZS5nZXRDb21wbGlhbmNlVmFsaWRhdGlvbigpO1xuXG4gICAgICBleHBlY3QoY2FjaGVkQXVkaXQpLnRvQmVOdWxsKCk7XG4gICAgICBleHBlY3QoY2FjaGVkQ29tcGxpYW5jZSkudG9CZU51bGwoKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIGludmFsaWRhdGUgc3BlY2lmaWMgY29udGV4dFwiLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQxOiBJbmZyYXN0cnVjdHVyZUF1ZGl0UmVzdWx0ID0ge1xuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIG92ZXJhbGxIZWFsdGg6IFwiaGVhbHRoeVwiLFxuICAgICAgICBkZXRlY3RlZElzc3VlczogW10sXG4gICAgICAgIGltcGxlbWVudGF0aW9uR2FwczogW10sXG4gICAgICAgIHJlY29tbWVuZGF0aW9uczogW10sXG4gICAgICAgIGNvbXBsaWFuY2VTdGF0dXM6IHtcbiAgICAgICAgICBnZHByQ29tcGxpYW50OiB0cnVlLFxuICAgICAgICAgIGRhdGFSZXNpZGVuY3lDb21wbGlhbnQ6IHRydWUsXG4gICAgICAgICAgYXVkaXRUcmFpbENvbXBsZXRlOiB0cnVlLFxuICAgICAgICAgIGlzc3VlczogW10sXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBjb25zdCByZXN1bHQyOiBJbmZyYXN0cnVjdHVyZUF1ZGl0UmVzdWx0ID0ge1xuICAgICAgICAuLi5yZXN1bHQxLFxuICAgICAgICBvdmVyYWxsSGVhbHRoOiBcIndhcm5pbmdcIixcbiAgICAgIH07XG5cbiAgICAgIGF3YWl0IGNhY2hlLnNldEluZnJhc3RydWN0dXJlQXVkaXQocmVzdWx0MSwgeyBlbnY6IFwiZGV2XCIgfSk7XG4gICAgICBhd2FpdCBjYWNoZS5zZXRJbmZyYXN0cnVjdHVyZUF1ZGl0KHJlc3VsdDIsIHsgZW52OiBcInByb2RcIiB9KTtcblxuICAgICAgYXdhaXQgY2FjaGUuaW52YWxpZGF0ZShcImluZnJhc3RydWN0dXJlQXVkaXRcIiwgeyBlbnY6IFwiZGV2XCIgfSk7XG5cbiAgICAgIGNvbnN0IGNhY2hlZERldiA9IGF3YWl0IGNhY2hlLmdldEluZnJhc3RydWN0dXJlQXVkaXQoeyBlbnY6IFwiZGV2XCIgfSk7XG4gICAgICBjb25zdCBjYWNoZWRQcm9kID0gYXdhaXQgY2FjaGUuZ2V0SW5mcmFzdHJ1Y3R1cmVBdWRpdCh7IGVudjogXCJwcm9kXCIgfSk7XG5cbiAgICAgIGV4cGVjdChjYWNoZWREZXYpLnRvQmVOdWxsKCk7XG4gICAgICBleHBlY3QoY2FjaGVkUHJvZCkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJDYWNoZSBDb25maWd1cmF0aW9uXCIsICgpID0+IHtcbiAgICBpdChcInNob3VsZCB1c2UgY3VzdG9tIGNvbmZpZ3VyYXRpb25cIiwgKCkgPT4ge1xuICAgICAgY29uc3QgY3VzdG9tQ29uZmlnOiBQYXJ0aWFsPFN1cHBvcnRDYWNoZUNvbmZpZz4gPSB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICBtYXhDYWNoZVNpemU6IDUwMCxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IGN1c3RvbUNhY2hlID0gbmV3IFN1cHBvcnRPcGVyYXRpb25zQ2FjaGUoY3VzdG9tQ29uZmlnKTtcbiAgICAgIGNvbnN0IGNvbmZpZyA9IGN1c3RvbUNhY2hlLmdldENvbmZpZygpO1xuXG4gICAgICBleHBlY3QoY29uZmlnLmVuYWJsZWQpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KGNvbmZpZy5tYXhDYWNoZVNpemUpLnRvQmUoNTAwKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIHVwZGF0ZSBjb25maWd1cmF0aW9uXCIsICgpID0+IHtcbiAgICAgIGNhY2hlLnVwZGF0ZUNvbmZpZyh7XG4gICAgICAgIG1heENhY2hlU2l6ZTogMjAwMCxcbiAgICAgICAgY29tcHJlc3Npb25FbmFibGVkOiBmYWxzZSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBjb25maWcgPSBjYWNoZS5nZXRDb25maWcoKTtcblxuICAgICAgZXhwZWN0KGNvbmZpZy5tYXhDYWNoZVNpemUpLnRvQmUoMjAwMCk7XG4gICAgICBleHBlY3QoY29uZmlnLmNvbXByZXNzaW9uRW5hYmxlZCkudG9CZShmYWxzZSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCB1cGRhdGUgVFRMIGZvciBzcGVjaWZpYyBvcGVyYXRpb25zXCIsICgpID0+IHtcbiAgICAgIGNhY2hlLnVwZGF0ZUNvbmZpZyh7XG4gICAgICAgIHR0bFNlY29uZHM6IHtcbiAgICAgICAgICBpbmZyYXN0cnVjdHVyZUF1ZGl0OiA2MDAsXG4gICAgICAgICAgbWV0YU1vbml0b3Jpbmc6IDEyMCxcbiAgICAgICAgICBpbXBsZW1lbnRhdGlvbkdhcHM6IDkwMCxcbiAgICAgICAgICBjb21wbGlhbmNlVmFsaWRhdGlvbjogMzYwMCxcbiAgICAgICAgICBzZWN1cml0eUF1ZGl0OiAxODAwLFxuICAgICAgICAgIGNvc3RBbmFseXNpczogNjAwLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGNvbmZpZyA9IGNhY2hlLmdldENvbmZpZygpO1xuXG4gICAgICBleHBlY3QoY29uZmlnLnR0bFNlY29uZHMuaW5mcmFzdHJ1Y3R1cmVBdWRpdCkudG9CZSg2MDApO1xuICAgICAgZXhwZWN0KGNvbmZpZy50dGxTZWNvbmRzLm1ldGFNb25pdG9yaW5nKS50b0JlKDEyMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwiSGVhbHRoIENoZWNrXCIsICgpID0+IHtcbiAgICBpdChcInNob3VsZCByZXBvcnQgaGVhbHRoeSBzdGF0dXMgZm9yIGVtcHR5IGNhY2hlXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGhlYWx0aCA9IGF3YWl0IGNhY2hlLmhlYWx0aENoZWNrKCk7XG5cbiAgICAgIGV4cGVjdChoZWFsdGguaGVhbHRoeSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChoZWFsdGguY2FjaGVTaXplKS50b0JlKDApO1xuICAgICAgZXhwZWN0KGhlYWx0aC5lcnJvcnMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIHJlcG9ydCBoZWFsdGh5IHN0YXR1cyB3aXRoIGdvb2QgcGVyZm9ybWFuY2VcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0OiBJbmZyYXN0cnVjdHVyZUF1ZGl0UmVzdWx0ID0ge1xuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIG92ZXJhbGxIZWFsdGg6IFwiaGVhbHRoeVwiLFxuICAgICAgICBkZXRlY3RlZElzc3VlczogW10sXG4gICAgICAgIGltcGxlbWVudGF0aW9uR2FwczogW10sXG4gICAgICAgIHJlY29tbWVuZGF0aW9uczogW10sXG4gICAgICAgIGNvbXBsaWFuY2VTdGF0dXM6IHtcbiAgICAgICAgICBnZHByQ29tcGxpYW50OiB0cnVlLFxuICAgICAgICAgIGRhdGFSZXNpZGVuY3lDb21wbGlhbnQ6IHRydWUsXG4gICAgICAgICAgYXVkaXRUcmFpbENvbXBsZXRlOiB0cnVlLFxuICAgICAgICAgIGlzc3VlczogW10sXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBhd2FpdCBjYWNoZS5zZXRJbmZyYXN0cnVjdHVyZUF1ZGl0KHJlc3VsdCk7XG4gICAgICBhd2FpdCBjYWNoZS5nZXRJbmZyYXN0cnVjdHVyZUF1ZGl0KCk7IC8vIEhpdFxuXG4gICAgICBjb25zdCBoZWFsdGggPSBhd2FpdCBjYWNoZS5oZWFsdGhDaGVjaygpO1xuXG4gICAgICBleHBlY3QoaGVhbHRoLmhlYWx0aHkpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoaGVhbHRoLmNhY2hlU2l6ZSkudG9CZSgxKTtcbiAgICAgIGV4cGVjdChoZWFsdGguaGl0UmF0ZSkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZShcIkNhY2hlIFdhcm0tdXBcIiwgKCkgPT4ge1xuICAgIGl0KFwic2hvdWxkIHdhcm0gdXAgY2FjaGUgd2l0aCBjb21tb24gb3BlcmF0aW9uc1wiLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBvcGVyYXRpb25zID0gW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJpbmZyYXN0cnVjdHVyZUF1ZGl0XCIgYXMgY29uc3QsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgb3ZlcmFsbEhlYWx0aDogXCJoZWFsdGh5XCIgYXMgY29uc3QsXG4gICAgICAgICAgICBkZXRlY3RlZElzc3VlczogW10sXG4gICAgICAgICAgICBpbXBsZW1lbnRhdGlvbkdhcHM6IFtdLFxuICAgICAgICAgICAgcmVjb21tZW5kYXRpb25zOiBbXSxcbiAgICAgICAgICAgIGNvbXBsaWFuY2VTdGF0dXM6IHtcbiAgICAgICAgICAgICAgZ2RwckNvbXBsaWFudDogdHJ1ZSxcbiAgICAgICAgICAgICAgZGF0YVJlc2lkZW5jeUNvbXBsaWFudDogdHJ1ZSxcbiAgICAgICAgICAgICAgYXVkaXRUcmFpbENvbXBsZXRlOiB0cnVlLFxuICAgICAgICAgICAgICBpc3N1ZXM6IFtdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJjb21wbGlhbmNlVmFsaWRhdGlvblwiIGFzIGNvbnN0LFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGlzQ29tcGxpYW50OiB0cnVlLFxuICAgICAgICAgICAgdmlvbGF0aW9uczogW10sXG4gICAgICAgICAgICByZWNvbW1lbmRhdGlvbnM6IFtdLFxuICAgICAgICAgICAgbGFzdENoZWNrZWQ6IG5ldyBEYXRlKCksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF07XG5cbiAgICAgIGF3YWl0IGNhY2hlLndhcm1VcChvcGVyYXRpb25zKTtcblxuICAgICAgY29uc3Qgc3RhdHMgPSBjYWNoZS5nZXRTdGF0cygpO1xuICAgICAgZXhwZWN0KHN0YXRzLmNhY2hlU2l6ZSkudG9CZSgyKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJQZXJmb3JtYW5jZSBUYXJnZXRcIiwgKCkgPT4ge1xuICAgIGl0KFwic2hvdWxkIGNoZWNrIGlmIHBlcmZvcm1hbmNlIHRhcmdldCBpcyBtZXRcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0OiBJbmZyYXN0cnVjdHVyZUF1ZGl0UmVzdWx0ID0ge1xuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIG92ZXJhbGxIZWFsdGg6IFwiaGVhbHRoeVwiLFxuICAgICAgICBkZXRlY3RlZElzc3VlczogW10sXG4gICAgICAgIGltcGxlbWVudGF0aW9uR2FwczogW10sXG4gICAgICAgIHJlY29tbWVuZGF0aW9uczogW10sXG4gICAgICAgIGNvbXBsaWFuY2VTdGF0dXM6IHtcbiAgICAgICAgICBnZHByQ29tcGxpYW50OiB0cnVlLFxuICAgICAgICAgIGRhdGFSZXNpZGVuY3lDb21wbGlhbnQ6IHRydWUsXG4gICAgICAgICAgYXVkaXRUcmFpbENvbXBsZXRlOiB0cnVlLFxuICAgICAgICAgIGlzc3VlczogW10sXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBhd2FpdCBjYWNoZS5zZXRJbmZyYXN0cnVjdHVyZUF1ZGl0KHJlc3VsdCk7XG5cbiAgICAgIC8vIEdlbmVyYXRlIGhpdHNcbiAgICAgIGF3YWl0IGNhY2hlLmdldEluZnJhc3RydWN0dXJlQXVkaXQoKTtcbiAgICAgIGF3YWl0IGNhY2hlLmdldEluZnJhc3RydWN0dXJlQXVkaXQoKTtcbiAgICAgIGF3YWl0IGNhY2hlLmdldEluZnJhc3RydWN0dXJlQXVkaXQoKTtcblxuICAgICAgY29uc3QgbWVldHNUYXJnZXQgPSBjYWNoZS5pc1BlcmZvcm1hbmNlVGFyZ2V0KDAuNyk7XG4gICAgICBleHBlY3QobWVldHNUYXJnZXQpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBmYWlsIHBlcmZvcm1hbmNlIHRhcmdldCB3aXRoIGxvdyBoaXQgcmF0ZVwiLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBHZW5lcmF0ZSBtaXNzZXNcbiAgICAgIGF3YWl0IGNhY2hlLmdldEluZnJhc3RydWN0dXJlQXVkaXQoeyBjb250ZXh0OiBcIm1pc3MxXCIgfSk7XG4gICAgICBhd2FpdCBjYWNoZS5nZXRJbmZyYXN0cnVjdHVyZUF1ZGl0KHsgY29udGV4dDogXCJtaXNzMlwiIH0pO1xuICAgICAgYXdhaXQgY2FjaGUuZ2V0SW5mcmFzdHJ1Y3R1cmVBdWRpdCh7IGNvbnRleHQ6IFwibWlzczNcIiB9KTtcblxuICAgICAgY29uc3QgbWVldHNUYXJnZXQgPSBjYWNoZS5pc1BlcmZvcm1hbmNlVGFyZ2V0KDAuNyk7XG4gICAgICBleHBlY3QobWVldHNUYXJnZXQpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZShcIkZhY3RvcnkgRnVuY3Rpb25cIiwgKCkgPT4ge1xuICAgIGl0KFwic2hvdWxkIGNyZWF0ZSBjYWNoZSB3aXRoIGZhY3RvcnkgZnVuY3Rpb25cIiwgKCkgPT4ge1xuICAgICAgY29uc3QgZmFjdG9yeUNhY2hlID0gY3JlYXRlU3VwcG9ydE9wZXJhdGlvbnNDYWNoZSh7XG4gICAgICAgIG1heENhY2hlU2l6ZTogNTAwLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGNvbmZpZyA9IGZhY3RvcnlDYWNoZS5nZXRDb25maWcoKTtcbiAgICAgIGV4cGVjdChjb25maWcubWF4Q2FjaGVTaXplKS50b0JlKDUwMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwiRW52aXJvbm1lbnQgQ29uZmlndXJhdGlvbnNcIiwgKCkgPT4ge1xuICAgIGl0KFwic2hvdWxkIGhhdmUgZGV2ZWxvcG1lbnQgY29uZmlndXJhdGlvblwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBkZXZDb25maWcgPSBTVVBQT1JUX0NBQ0hFX0NPTkZJR1MuZGV2ZWxvcG1lbnQ7XG5cbiAgICAgIGV4cGVjdChkZXZDb25maWcuZW5hYmxlZCkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChkZXZDb25maWcubWF4Q2FjaGVTaXplKS50b0JlKDEwMCk7XG4gICAgICBleHBlY3QoZGV2Q29uZmlnLnR0bFNlY29uZHMuaW5mcmFzdHJ1Y3R1cmVBdWRpdCkudG9CZSg2MCk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBoYXZlIHN0YWdpbmcgY29uZmlndXJhdGlvblwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBzdGFnaW5nQ29uZmlnID0gU1VQUE9SVF9DQUNIRV9DT05GSUdTLnN0YWdpbmc7XG5cbiAgICAgIGV4cGVjdChzdGFnaW5nQ29uZmlnLmVuYWJsZWQpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3Qoc3RhZ2luZ0NvbmZpZy5tYXhDYWNoZVNpemUpLnRvQmUoNTAwKTtcbiAgICAgIGV4cGVjdChzdGFnaW5nQ29uZmlnLnR0bFNlY29uZHMuaW5mcmFzdHJ1Y3R1cmVBdWRpdCkudG9CZSgxODApO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgaGF2ZSBwcm9kdWN0aW9uIGNvbmZpZ3VyYXRpb25cIiwgKCkgPT4ge1xuICAgICAgY29uc3QgcHJvZENvbmZpZyA9IFNVUFBPUlRfQ0FDSEVfQ09ORklHUy5wcm9kdWN0aW9uO1xuXG4gICAgICBleHBlY3QocHJvZENvbmZpZy5lbmFibGVkKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHByb2RDb25maWcubWF4Q2FjaGVTaXplKS50b0JlKDEwMDApO1xuICAgICAgZXhwZWN0KHByb2RDb25maWcudHRsU2Vjb25kcy5pbmZyYXN0cnVjdHVyZUF1ZGl0KS50b0JlKDMwMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwiQ2FjaGUgRW50cmllcyBEZWJ1Z2dpbmdcIiwgKCkgPT4ge1xuICAgIGl0KFwic2hvdWxkIGdldCBjYWNoZSBlbnRyaWVzIGZvciBkZWJ1Z2dpbmdcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0OiBJbmZyYXN0cnVjdHVyZUF1ZGl0UmVzdWx0ID0ge1xuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIG92ZXJhbGxIZWFsdGg6IFwiaGVhbHRoeVwiLFxuICAgICAgICBkZXRlY3RlZElzc3VlczogW10sXG4gICAgICAgIGltcGxlbWVudGF0aW9uR2FwczogW10sXG4gICAgICAgIHJlY29tbWVuZGF0aW9uczogW10sXG4gICAgICAgIGNvbXBsaWFuY2VTdGF0dXM6IHtcbiAgICAgICAgICBnZHByQ29tcGxpYW50OiB0cnVlLFxuICAgICAgICAgIGRhdGFSZXNpZGVuY3lDb21wbGlhbnQ6IHRydWUsXG4gICAgICAgICAgYXVkaXRUcmFpbENvbXBsZXRlOiB0cnVlLFxuICAgICAgICAgIGlzc3VlczogW10sXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBhd2FpdCBjYWNoZS5zZXRJbmZyYXN0cnVjdHVyZUF1ZGl0KHJlc3VsdCk7XG5cbiAgICAgIGNvbnN0IGVudHJpZXMgPSBjYWNoZS5nZXRDYWNoZUVudHJpZXMoKTtcblxuICAgICAgZXhwZWN0KGVudHJpZXMpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgIGV4cGVjdChlbnRyaWVzWzBdLm9wZXJhdGlvblR5cGUpLnRvQmUoXCJpbmZyYXN0cnVjdHVyZUF1ZGl0XCIpO1xuICAgICAgZXhwZWN0KGVudHJpZXNbMF0uYWNjZXNzQ291bnQpLnRvQmUoMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwiRGlzYWJsZWQgQ2FjaGVcIiwgKCkgPT4ge1xuICAgIGl0KFwic2hvdWxkIG5vdCBjYWNoZSB3aGVuIGRpc2FibGVkXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGRpc2FibGVkQ2FjaGUgPSBuZXcgU3VwcG9ydE9wZXJhdGlvbnNDYWNoZSh7IGVuYWJsZWQ6IGZhbHNlIH0pO1xuXG4gICAgICBjb25zdCByZXN1bHQ6IEluZnJhc3RydWN0dXJlQXVkaXRSZXN1bHQgPSB7XG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgb3ZlcmFsbEhlYWx0aDogXCJoZWFsdGh5XCIsXG4gICAgICAgIGRldGVjdGVkSXNzdWVzOiBbXSxcbiAgICAgICAgaW1wbGVtZW50YXRpb25HYXBzOiBbXSxcbiAgICAgICAgcmVjb21tZW5kYXRpb25zOiBbXSxcbiAgICAgICAgY29tcGxpYW5jZVN0YXR1czoge1xuICAgICAgICAgIGdkcHJDb21wbGlhbnQ6IHRydWUsXG4gICAgICAgICAgZGF0YVJlc2lkZW5jeUNvbXBsaWFudDogdHJ1ZSxcbiAgICAgICAgICBhdWRpdFRyYWlsQ29tcGxldGU6IHRydWUsXG4gICAgICAgICAgaXNzdWVzOiBbXSxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIGF3YWl0IGRpc2FibGVkQ2FjaGUuc2V0SW5mcmFzdHJ1Y3R1cmVBdWRpdChyZXN1bHQpO1xuXG4gICAgICBjb25zdCBjYWNoZWQgPSBhd2FpdCBkaXNhYmxlZENhY2hlLmdldEluZnJhc3RydWN0dXJlQXVkaXQoKTtcblxuICAgICAgZXhwZWN0KGNhY2hlZCkudG9CZU51bGwoKTtcblxuICAgICAgY29uc3Qgc3RhdHMgPSBkaXNhYmxlZENhY2hlLmdldFN0YXRzKCk7XG4gICAgICBleHBlY3Qoc3RhdHMuY2FjaGVTaXplKS50b0JlKDApO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9
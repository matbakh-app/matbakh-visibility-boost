{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/__tests__/hybrid-routing-performance.test.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/__tests__/hybrid-routing-performance.test.ts"],"sourcesContent":["/**\n * Hybrid Routing Performance Tests\n *\n * Tests performance characteristics of hybrid routing under various load scenarios:\n * - Emergency operations latency (<5s requirement)\n * - Critical support operations latency (<10s requirement)\n * - Routing efficiency under stress\n * - Cost controls under load\n * - Failover mechanisms performance\n * - System impact measurement\n */\n\nimport { AiFeatureFlags } from \"../ai-feature-flags\";\nimport { CircuitBreaker } from \"../circuit-breaker\";\nimport { DirectBedrockClient } from \"../direct-bedrock-client\";\nimport { IntelligentRouter } from \"../intelligent-router\";\nimport { MCPRouter } from \"../mcp-router\";\n\n// Mock dependencies\njest.mock(\"../direct-bedrock-client\");\njest.mock(\"../mcp-router\");\njest.mock(\"../circuit-breaker\");\njest.mock(\"../ai-feature-flags\");\n\ndescribe(\"Hybrid Routing Performance Tests\", () => {\n  let router: IntelligentRouter;\n  let mockDirectClient: jest.Mocked<DirectBedrockClient>;\n  let mockMcpRouter: jest.Mocked<MCPRouter>;\n  let mockCircuitBreaker: jest.Mocked<CircuitBreaker>;\n  let mockFeatureFlags: jest.Mocked<AiFeatureFlags>;\n\n  beforeEach(() => {\n    // Setup mocks\n    mockDirectClient = new DirectBedrockClient(\n      {} as any\n    ) as jest.Mocked<DirectBedrockClient>;\n    mockMcpRouter = new MCPRouter({} as any) as jest.Mocked<MCPRouter>;\n    mockCircuitBreaker = new CircuitBreaker(\n      {} as any\n    ) as jest.Mocked<CircuitBreaker>;\n    mockFeatureFlags = new AiFeatureFlags() as jest.Mocked<AiFeatureFlags>;\n\n    // Default mock implementations\n    mockFeatureFlags.isEnabled = jest.fn().mockReturnValue(true);\n    mockCircuitBreaker.isOpen = jest.fn().mockReturnValue(false);\n    mockCircuitBreaker.recordSuccess = jest.fn();\n    mockCircuitBreaker.recordFailure = jest.fn();\n\n    // Mock health check methods\n    mockDirectClient.performHealthCheck = jest.fn().mockResolvedValue({\n      isHealthy: true,\n      latencyMs: 100,\n      timestamp: new Date(),\n    });\n\n    mockMcpRouter.getHealthStatus = jest.fn().mockResolvedValue({\n      isHealthy: true,\n      latencyMs: 200,\n      timestamp: new Date(),\n    });\n\n    mockMcpRouter.isAvailable = jest.fn().mockReturnValue(true);\n\n    // Mock executeSupportOperation for both clients\n    mockMcpRouter.executeSupportOperation = jest.fn().mockResolvedValue({\n      success: true,\n      result: \"MCP operation completed\",\n      latencyMs: 200,\n      operationId: \"mcp-op-123\",\n      timestamp: new Date(),\n    });\n\n    router = new IntelligentRouter(mockDirectClient, mockMcpRouter);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe(\"Emergency Operations Latency (<5s requirement)\", () => {\n    it(\"should complete emergency operations within 5 seconds under normal load\", async () => {\n      const startTime = Date.now();\n\n      mockDirectClient.executeSupportOperation = jest.fn().mockResolvedValue({\n        success: true,\n        result: \"Emergency operation completed\",\n        latency: 3000,\n        route: \"direct_bedrock\",\n      });\n\n      const result = await router.executeSupportOperation({\n        operation: \"emergency_operations\",\n        priority: \"emergency\",\n        latencyRequirement: 5000,\n        operationType: \"emergency\",\n      });\n\n      const duration = Date.now() - startTime;\n\n      expect(duration).toBeLessThan(5000);\n      expect(result.success).toBe(true);\n      expect(result.route).toBe(\"direct_bedrock\");\n    });\n\n    it(\"should maintain <5s latency under concurrent emergency operations\", async () => {\n      mockDirectClient.executeSupportOperation = jest\n        .fn()\n        .mockImplementation(async () => {\n          await new Promise((resolve) => setTimeout(resolve, 2000));\n          return {\n            success: true,\n            result: \"Emergency operation completed\",\n            latency: 2000,\n            route: \"direct_bedrock\",\n          };\n        });\n\n      const operations = Array(10)\n        .fill(null)\n        .map(() =>\n          router.executeSupportOperation({\n            operation: \"emergency_operations\",\n            priority: \"emergency\",\n            latencyRequirement: 5000,\n            operationType: \"emergency\",\n          })\n        );\n\n      const startTime = Date.now();\n      const results = await Promise.all(operations);\n      const duration = Date.now() - startTime;\n\n      // All operations should complete\n      expect(results.every((r) => r.success)).toBe(true);\n\n      // Average latency should be under 5s\n      const avgLatency = duration / operations.length;\n      expect(avgLatency).toBeLessThan(5000);\n    });\n\n    it(\"should handle emergency operation failures gracefully\", async () => {\n      mockDirectClient.executeSupportOperation = jest\n        .fn()\n        .mockRejectedValue(new Error(\"Emergency operation failed\"));\n\n      const startTime = Date.now();\n\n      await expect(\n        router.executeSupportOperation({\n          operation: \"emergency_operations\",\n          priority: \"emergency\",\n          latencyRequirement: 5000,\n          operationType: \"emergency\",\n        })\n      ).rejects.toThrow();\n\n      const duration = Date.now() - startTime;\n\n      // Should fail fast, not wait for timeout\n      expect(duration).toBeLessThan(1000);\n    });\n  });\n\n  describe(\"Critical Support Operations Latency (<10s requirement)\", () => {\n    it(\"should complete critical operations within 10 seconds\", async () => {\n      const startTime = Date.now();\n\n      mockDirectClient.executeSupportOperation = jest.fn().mockResolvedValue({\n        success: true,\n        result: \"Critical operation completed\",\n        latency: 7000,\n        route: \"direct_bedrock\",\n      });\n\n      const result = await router.executeSupportOperation({\n        operation: \"infrastructure_audit\",\n        priority: \"critical\",\n        latencyRequirement: 10000,\n        operationType: \"support\",\n      });\n\n      const duration = Date.now() - startTime;\n\n      expect(duration).toBeLessThan(10000);\n      expect(result.success).toBe(true);\n    });\n\n    it(\"should maintain <10s latency for infrastructure audits under load\", async () => {\n      mockDirectClient.executeSupportOperation = jest\n        .fn()\n        .mockImplementation(async () => {\n          await new Promise((resolve) => setTimeout(resolve, 5000));\n          return {\n            success: true,\n            result: \"Infrastructure audit completed\",\n            latency: 5000,\n            route: \"direct_bedrock\",\n          };\n        });\n\n      const operations = Array(5)\n        .fill(null)\n        .map(() =>\n          router.executeSupportOperation({\n            operation: \"infrastructure_audit\",\n            priority: \"critical\",\n            latencyRequirement: 10000,\n            operationType: \"support\",\n          })\n        );\n\n      const startTime = Date.now();\n      const results = await Promise.all(operations);\n      const duration = Date.now() - startTime;\n\n      expect(results.every((r) => r.success)).toBe(true);\n\n      const avgLatency = duration / operations.length;\n      expect(avgLatency).toBeLessThan(10000);\n    });\n\n    it(\"should fallback to MCP when direct Bedrock is slow\", async () => {\n      // Direct Bedrock is slow\n      mockDirectClient.executeSupportOperation = jest\n        .fn()\n        .mockImplementation(async () => {\n          await new Promise((resolve) => setTimeout(resolve, 12000));\n          return {\n            success: true,\n            result: \"Slow operation\",\n            latency: 12000,\n            route: \"direct_bedrock\",\n          };\n        });\n\n      // MCP is faster\n      mockMcpRouter.route = jest.fn().mockResolvedValue({\n        success: true,\n        result: \"MCP operation completed\",\n        latency: 6000,\n        route: \"mcp\",\n      });\n\n      const startTime = Date.now();\n\n      const result = await router.executeSupportOperation({\n        operation: \"infrastructure_audit\",\n        priority: \"critical\",\n        latencyRequirement: 10000,\n        operationType: \"support\",\n      });\n\n      const duration = Date.now() - startTime;\n\n      // Should use faster route\n      expect(duration).toBeLessThan(10000);\n      expect(result.success).toBe(true);\n    });\n  });\n\n  describe(\"Routing Efficiency Under Stress\", () => {\n    it(\"should maintain routing efficiency under high load\", async () => {\n      let directBedrockCalls = 0;\n      let mcpCalls = 0;\n\n      mockDirectClient.executeSupportOperation = jest\n        .fn()\n        .mockImplementation(async () => {\n          directBedrockCalls++;\n          await new Promise((resolve) => setTimeout(resolve, 100));\n          return {\n            success: true,\n            result: \"Direct operation\",\n            latency: 100,\n            route: \"direct_bedrock\",\n          };\n        });\n\n      mockMcpRouter.route = jest.fn().mockImplementation(async () => {\n        mcpCalls++;\n        await new Promise((resolve) => setTimeout(resolve, 200));\n        return {\n          success: true,\n          result: \"MCP operation\",\n          latency: 200,\n          route: \"mcp\",\n        };\n      });\n\n      // Mix of operation types\n      const operations = [\n        ...Array(20).fill({\n          operation: \"emergency_operations\",\n          priority: \"emergency\",\n          operationType: \"emergency\",\n        }),\n        ...Array(30).fill({\n          operation: \"infrastructure_audit\",\n          priority: \"critical\",\n          operationType: \"support\",\n        }),\n        ...Array(50).fill({\n          operation: \"standard_analysis\",\n          priority: \"medium\",\n          operationType: \"standard\",\n        }),\n      ];\n\n      const results = await Promise.all(\n        operations.map((op) => router.executeSupportOperation(op as any))\n      );\n\n      // All operations should succeed\n      expect(results.every((r) => r.success)).toBe(true);\n\n      // Emergency and critical should use direct Bedrock\n      expect(directBedrockCalls).toBeGreaterThan(40);\n\n      // Standard operations should use MCP\n      expect(mcpCalls).toBeGreaterThan(40);\n\n      // Routing efficiency: correct route selection\n      const efficiency = (directBedrockCalls + mcpCalls) / operations.length;\n      expect(efficiency).toBeGreaterThan(0.9); // >90% efficiency\n    });\n\n    it(\"should handle routing decision overhead efficiently\", async () => {\n      mockDirectClient.executeSupportOperation = jest.fn().mockResolvedValue({\n        success: true,\n        result: \"Operation completed\",\n        latency: 50,\n        route: \"direct_bedrock\",\n      });\n\n      const iterations = 100;\n      const startTime = Date.now();\n\n      for (let i = 0; i < iterations; i++) {\n        await router.executeSupportOperation({\n          operation: \"emergency_operations\",\n          priority: \"emergency\",\n          operationType: \"emergency\",\n        });\n      }\n\n      const duration = Date.now() - startTime;\n      const avgOverhead = duration / iterations;\n\n      // Routing decision overhead should be minimal (<10ms per operation)\n      expect(avgOverhead).toBeLessThan(100);\n    });\n  });\n\n  describe(\"Cost Controls Under Load\", () => {\n    it(\"should respect cost limits under high load\", async () => {\n      let totalCost = 0;\n      const costPerOperation = 0.01;\n      const maxBudget = 1.0;\n\n      mockDirectClient.executeSupportOperation = jest\n        .fn()\n        .mockImplementation(async () => {\n          totalCost += costPerOperation;\n\n          if (totalCost > maxBudget) {\n            throw new Error(\"Budget exceeded\");\n          }\n\n          return {\n            success: true,\n            result: \"Operation completed\",\n            latency: 100,\n            route: \"direct_bedrock\",\n            cost: costPerOperation,\n          };\n        });\n\n      const operations = Array(150)\n        .fill(null)\n        .map(() =>\n          router\n            .executeSupportOperation({\n              operation: \"infrastructure_audit\",\n              priority: \"critical\",\n              operationType: \"support\",\n            })\n            .catch((err) => ({ success: false, error: err.message }))\n        );\n\n      const results = await Promise.all(operations);\n\n      // Some operations should succeed\n      const successCount = results.filter((r: any) => r.success).length;\n      expect(successCount).toBeGreaterThan(0);\n\n      // Should stop when budget is exceeded\n      expect(totalCost).toBeLessThanOrEqual(maxBudget + costPerOperation);\n    });\n\n    it(\"should track cost metrics accurately under load\", async () => {\n      const costs: number[] = [];\n\n      mockDirectClient.executeSupportOperation = jest\n        .fn()\n        .mockImplementation(async () => {\n          const cost = Math.random() * 0.05;\n          costs.push(cost);\n\n          return {\n            success: true,\n            result: \"Operation completed\",\n            latency: 100,\n            route: \"direct_bedrock\",\n            cost,\n          };\n        });\n\n      const operations = Array(50)\n        .fill(null)\n        .map(() =>\n          router.executeSupportOperation({\n            operation: \"infrastructure_audit\",\n            priority: \"critical\",\n            operationType: \"support\",\n          })\n        );\n\n      await Promise.all(operations);\n\n      const totalCost = costs.reduce((sum, cost) => sum + cost, 0);\n      const avgCost = totalCost / costs.length;\n\n      expect(totalCost).toBeGreaterThan(0);\n      expect(avgCost).toBeGreaterThan(0);\n      expect(avgCost).toBeLessThan(0.05);\n    });\n  });\n\n  describe(\"Failover Mechanisms Performance\", () => {\n    it(\"should failover quickly when direct Bedrock fails\", async () => {\n      mockDirectClient.executeSupportOperation = jest\n        .fn()\n        .mockRejectedValue(new Error(\"Direct Bedrock unavailable\"));\n\n      mockMcpRouter.route = jest.fn().mockResolvedValue({\n        success: true,\n        result: \"MCP fallback completed\",\n        latency: 500,\n        route: \"mcp\",\n      });\n\n      const startTime = Date.now();\n\n      const result = await router.executeSupportOperation({\n        operation: \"infrastructure_audit\",\n        priority: \"critical\",\n        operationType: \"support\",\n      });\n\n      const duration = Date.now() - startTime;\n\n      // Failover should be fast (<2s)\n      expect(duration).toBeLessThan(2000);\n      expect(result.success).toBe(true);\n      expect(result.route).toBe(\"mcp\");\n    });\n\n    it(\"should handle multiple concurrent failovers efficiently\", async () => {\n      let failoverCount = 0;\n\n      mockDirectClient.executeSupportOperation = jest\n        .fn()\n        .mockRejectedValue(new Error(\"Direct Bedrock unavailable\"));\n\n      mockMcpRouter.route = jest.fn().mockImplementation(async () => {\n        failoverCount++;\n        await new Promise((resolve) => setTimeout(resolve, 300));\n        return {\n          success: true,\n          result: \"MCP fallback completed\",\n          latency: 300,\n          route: \"mcp\",\n        };\n      });\n\n      const operations = Array(20)\n        .fill(null)\n        .map(() =>\n          router.executeSupportOperation({\n            operation: \"infrastructure_audit\",\n            priority: \"critical\",\n            operationType: \"support\",\n          })\n        );\n\n      const startTime = Date.now();\n      const results = await Promise.all(operations);\n      const duration = Date.now() - startTime;\n\n      // All should succeed via failover\n      expect(results.every((r) => r.success)).toBe(true);\n      expect(failoverCount).toBe(20);\n\n      // Average failover time should be reasonable\n      const avgFailoverTime = duration / operations.length;\n      expect(avgFailoverTime).toBeLessThan(1000);\n    });\n\n    it(\"should recover from circuit breaker open state\", async () => {\n      // Circuit breaker is open initially\n      mockCircuitBreaker.isOpen = jest\n        .fn()\n        .mockReturnValueOnce(true)\n        .mockReturnValueOnce(true)\n        .mockReturnValue(false);\n\n      mockMcpRouter.route = jest.fn().mockResolvedValue({\n        success: true,\n        result: \"MCP operation completed\",\n        latency: 500,\n        route: \"mcp\",\n      });\n\n      // First two calls should use MCP due to circuit breaker\n      const result1 = await router.executeSupportOperation({\n        operation: \"infrastructure_audit\",\n        priority: \"critical\",\n        operationType: \"support\",\n      });\n\n      const result2 = await router.executeSupportOperation({\n        operation: \"infrastructure_audit\",\n        priority: \"critical\",\n        operationType: \"support\",\n      });\n\n      expect(result1.route).toBe(\"mcp\");\n      expect(result2.route).toBe(\"mcp\");\n\n      // Circuit breaker closes, should use direct Bedrock\n      mockDirectClient.executeSupportOperation = jest.fn().mockResolvedValue({\n        success: true,\n        result: \"Direct operation completed\",\n        latency: 200,\n        route: \"direct_bedrock\",\n      });\n\n      const result3 = await router.executeSupportOperation({\n        operation: \"infrastructure_audit\",\n        priority: \"critical\",\n        operationType: \"support\",\n      });\n\n      expect(result3.route).toBe(\"direct_bedrock\");\n    });\n  });\n\n  describe(\"System Impact Measurement\", () => {\n    it(\"should measure CPU and memory impact under load\", async () => {\n      const initialMemory = process.memoryUsage().heapUsed;\n\n      mockDirectClient.executeSupportOperation = jest\n        .fn()\n        .mockImplementation(async () => {\n          // Simulate some work\n          const data = new Array(1000).fill(\"test\");\n          await new Promise((resolve) => setTimeout(resolve, 50));\n\n          return {\n            success: true,\n            result: data.join(\",\"),\n            latency: 50,\n            route: \"direct_bedrock\",\n          };\n        });\n\n      const operations = Array(100)\n        .fill(null)\n        .map(() =>\n          router.executeSupportOperation({\n            operation: \"infrastructure_audit\",\n            priority: \"critical\",\n            operationType: \"support\",\n          })\n        );\n\n      await Promise.all(operations);\n\n      const finalMemory = process.memoryUsage().heapUsed;\n      const memoryIncrease = (finalMemory - initialMemory) / 1024 / 1024; // MB\n\n      // Memory increase should be reasonable (<50MB for 100 operations)\n      expect(memoryIncrease).toBeLessThan(50);\n    });\n\n    it(\"should maintain performance under sustained load\", async () => {\n      const latencies: number[] = [];\n\n      mockDirectClient.executeSupportOperation = jest\n        .fn()\n        .mockImplementation(async () => {\n          const startTime = Date.now();\n          await new Promise((resolve) => setTimeout(resolve, 100));\n          const latency = Date.now() - startTime;\n          latencies.push(latency);\n\n          return {\n            success: true,\n            result: \"Operation completed\",\n            latency,\n            route: \"direct_bedrock\",\n          };\n        });\n\n      // Sustained load over time\n      for (let batch = 0; batch < 5; batch++) {\n        const operations = Array(20)\n          .fill(null)\n          .map(() =>\n            router.executeSupportOperation({\n              operation: \"infrastructure_audit\",\n              priority: \"critical\",\n              operationType: \"support\",\n            })\n          );\n\n        await Promise.all(operations);\n        await new Promise((resolve) => setTimeout(resolve, 100));\n      }\n\n      // Calculate performance degradation\n      const firstBatchAvg =\n        latencies.slice(0, 20).reduce((a, b) => a + b, 0) / 20;\n      const lastBatchAvg = latencies.slice(-20).reduce((a, b) => a + b, 0) / 20;\n      const degradation = (lastBatchAvg - firstBatchAvg) / firstBatchAvg;\n\n      // Performance degradation should be minimal (<10%)\n      expect(degradation).toBeLessThan(0.1);\n    });\n\n    it(\"should handle resource cleanup efficiently\", async () => {\n      const initialHandles =\n        (process as any)._getActiveHandles?.()?.length || 0;\n\n      mockDirectClient.executeSupportOperation = jest.fn().mockResolvedValue({\n        success: true,\n        result: \"Operation completed\",\n        latency: 100,\n        route: \"direct_bedrock\",\n      });\n\n      // Create and complete many operations\n      for (let i = 0; i < 50; i++) {\n        await router.executeSupportOperation({\n          operation: \"infrastructure_audit\",\n          priority: \"critical\",\n          operationType: \"support\",\n        });\n      }\n\n      // Allow cleanup\n      await new Promise((resolve) => setTimeout(resolve, 100));\n\n      const finalHandles = (process as any)._getActiveHandles?.()?.length || 0;\n      const handleIncrease = finalHandles - initialHandles;\n\n      // Should not leak handles\n      expect(handleIncrease).toBeLessThan(10);\n    });\n  });\n\n  describe(\"Performance Regression Detection\", () => {\n    it(\"should detect performance regressions in routing decisions\", async () => {\n      const baselineLatencies: number[] = [];\n      const testLatencies: number[] = [];\n\n      // Baseline performance\n      mockDirectClient.executeSupportOperation = jest\n        .fn()\n        .mockImplementation(async () => {\n          const latency = 100 + Math.random() * 50;\n          baselineLatencies.push(latency);\n          await new Promise((resolve) => setTimeout(resolve, latency));\n\n          return {\n            success: true,\n            result: \"Operation completed\",\n            latency,\n            route: \"direct_bedrock\",\n          };\n        });\n\n      for (let i = 0; i < 30; i++) {\n        await router.executeSupportOperation({\n          operation: \"infrastructure_audit\",\n          priority: \"critical\",\n          operationType: \"support\",\n        });\n      }\n\n      // Test performance (simulating regression)\n      mockDirectClient.executeSupportOperation = jest\n        .fn()\n        .mockImplementation(async () => {\n          const latency = 150 + Math.random() * 100; // Slower\n          testLatencies.push(latency);\n          await new Promise((resolve) => setTimeout(resolve, latency));\n\n          return {\n            success: true,\n            result: \"Operation completed\",\n            latency,\n            route: \"direct_bedrock\",\n          };\n        });\n\n      for (let i = 0; i < 30; i++) {\n        await router.executeSupportOperation({\n          operation: \"infrastructure_audit\",\n          priority: \"critical\",\n          operationType: \"support\",\n        });\n      }\n\n      const baselineAvg =\n        baselineLatencies.reduce((a, b) => a + b, 0) / baselineLatencies.length;\n      const testAvg =\n        testLatencies.reduce((a, b) => a + b, 0) / testLatencies.length;\n      const regression = (testAvg - baselineAvg) / baselineAvg;\n\n      // Should detect significant regression (>20%)\n      expect(regression).toBeGreaterThan(0.2);\n    });\n  });\n});\n"],"version":3}
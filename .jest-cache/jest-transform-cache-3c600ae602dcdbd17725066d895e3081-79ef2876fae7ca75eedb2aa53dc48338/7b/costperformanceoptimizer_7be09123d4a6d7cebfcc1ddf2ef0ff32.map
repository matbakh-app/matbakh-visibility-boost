{"version":3,"names":["cov_urzb4o1br","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","client_cloudwatch_1","require","crypto_1","IntelligentCache","constructor","maxSize","ttlMs","cache","Map","hitCount","missCount","generateKey","request","keyData","prompt","normalizePrompt","provider","model","temperature","maxTokens","domain","Buffer","from","JSON","stringify","toString","toLowerCase","replace","trim","get","key","entry","Date","now","timestamp","delete","Object","assign","response","cached","cacheTimestamp","set","cost","size","oldestKey","keys","next","value","getHitRate","total","clear","getStats","hitRate","TokenOptimizer","compressPrompt","targetReduction","originalLength","length","optimized","techniques","push","abbreviations","full","abbrev","entries","regex","RegExp","test","currentReduction","fillerWords","filler","compressSentences","finalReduction","estimatedTokenReduction","originalTokens","Math","ceil","optimizedTokens","compressionRatio","technique","join","text","redundantPatterns","compressed","pattern","optimizeResponse","estimatedTokens","sentences","split","tokenCount","sentence","sentenceTokens","CostPerformanceOptimizer","budget","region","dailyCosts","monthlyCosts","tokenOptimizer","cloudWatch","CloudWatchClient","optimizeRequest","requestId","randomUUID","startTime","budgetCheck","checkBudget","allowed","optimizedRequest","optimization","originalCost","estimatedCost","optimizedCost","savings","optimizations","cacheUsed","compressionUsed","shouldProceed","cacheKey","cachedResponse","tokenOptimization","costPressure","calculateCostPressure","remainingBudget","applyTokenOptimization","max","floor","estimateRequestCost","processResponse","actualCost","calculateActualCost","content","error","updateCostTracking","publishMetrics","latency","processingTime","throughput","cacheHitRate","tokenEfficiency","calculateTokenEfficiency","costPerRequest","optimizedContent","today","toISOString","thisMonth","substring","dailySpent","monthlySpent","dailyLimit","hardStop","reason","monthlyLimit","min","inputTokens","outputTokens","providerCosts","bedrock","input","output","google","meta","costs","dailyPressure","monthlyPressure","totalTokens","usefulContent","currentDaily","currentMonthly","checkAlertThresholds","threshold","alertThresholds","dailyThreshold","monthlyThreshold","sendBudgetAlert","console","warn","toFixed","send","PutMetricDataCommand","Namespace","MetricData","MetricName","Value","Unit","Timestamp","Dimensions","Name","metrics","metricData","map","metric","getPerformanceMetrics","cacheStats","getCostSummary","daily","spent","limit","remaining","monthly","clearCache","resetCostTracking","exports"],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/cost-performance-optimizer.ts"],"sourcesContent":["/**\n * PR-4: Cost & Performance Optimization\n * \n * Implements:\n * - Intelligent cost management with budget controls\n * - Performance optimization with caching strategies\n * - Token usage optimization and compression\n * - Real-time cost tracking and alerts\n */\n\nimport { CloudWatchClient, PutMetricDataCommand } from '@aws-sdk/client-cloudwatch';\nimport { randomUUID } from 'crypto';\nimport { AIRequest, AIResponse } from './types';\n\nexport interface CostBudget {\n    dailyLimit: number;\n    monthlyLimit: number;\n    alertThresholds: number[]; // [50%, 75%, 90%]\n    hardStop: boolean;\n}\n\nexport interface PerformanceMetrics {\n    latency: number;\n    throughput: number;\n    cacheHitRate: number;\n    tokenEfficiency: number;\n    costPerRequest: number;\n}\n\nexport interface CostOptimizationResult {\n    originalCost: number;\n    optimizedCost: number;\n    savings: number;\n    optimizations: string[];\n    cacheUsed: boolean;\n    compressionUsed: boolean;\n}\n\nexport interface TokenOptimization {\n    originalTokens: number;\n    optimizedTokens: number;\n    compressionRatio: number;\n    technique: string;\n}\n\n/**\n * Intelligent Caching Layer\n */\nclass IntelligentCache {\n    private cache: Map<string, { response: AIResponse; timestamp: number; cost: number }> = new Map();\n    private hitCount: number = 0;\n    private missCount: number = 0;\n\n    constructor(\n        private readonly maxSize: number = 10000,\n        private readonly ttlMs: number = 3600000 // 1 hour\n    ) { }\n\n    generateKey(request: AIRequest): string {\n        // Create semantic hash of request\n        const keyData = {\n            prompt: this.normalizePrompt(request.prompt),\n            provider: request.provider,\n            model: request.model,\n            temperature: request.temperature || 0.7,\n            maxTokens: request.maxTokens,\n            domain: request.domain\n        };\n\n        return Buffer.from(JSON.stringify(keyData)).toString('base64');\n    }\n\n    private normalizePrompt(prompt: string): string {\n        // Normalize whitespace and remove non-semantic variations\n        return prompt\n            .toLowerCase()\n            .replace(/\\s+/g, ' ')\n            .trim()\n            .replace(/[^\\w\\s]/g, ''); // Remove punctuation for semantic matching\n    }\n\n    get(key: string): AIResponse | null {\n        const entry = this.cache.get(key);\n\n        if (!entry) {\n            this.missCount++;\n            return null;\n        }\n\n        // Check TTL\n        if (Date.now() - entry.timestamp > this.ttlMs) {\n            this.cache.delete(key);\n            this.missCount++;\n            return null;\n        }\n\n        this.hitCount++;\n        return {\n            ...entry.response,\n            cached: true,\n            cacheTimestamp: entry.timestamp\n        };\n    }\n\n    set(key: string, response: AIResponse, cost: number): void {\n        // Implement LRU eviction if cache is full\n        if (this.cache.size >= this.maxSize) {\n            const oldestKey = this.cache.keys().next().value;\n            this.cache.delete(oldestKey);\n        }\n\n        this.cache.set(key, {\n            response: { ...response, cached: false },\n            timestamp: Date.now(),\n            cost\n        });\n    }\n\n    getHitRate(): number {\n        const total = this.hitCount + this.missCount;\n        return total > 0 ? this.hitCount / total : 0;\n    }\n\n    clear(): void {\n        this.cache.clear();\n        this.hitCount = 0;\n        this.missCount = 0;\n    }\n\n    getStats() {\n        return {\n            size: this.cache.size,\n            hitCount: this.hitCount,\n            missCount: this.missCount,\n            hitRate: this.getHitRate()\n        };\n    }\n}\n\n/**\n * Token Compression and Optimization\n */\nclass TokenOptimizer {\n    /**\n     * Compress prompt using various techniques\n     */\n    compressPrompt(prompt: string, targetReduction: number = 0.2): TokenOptimization {\n        const originalLength = prompt.length;\n        let optimized = prompt;\n        const techniques: string[] = [];\n\n        // 1. Remove redundant whitespace\n        optimized = optimized.replace(/\\s+/g, ' ').trim();\n        if (optimized.length < prompt.length) {\n            techniques.push('whitespace-normalization');\n        }\n\n        // 2. Abbreviate common phrases\n        const abbreviations = {\n            'please': 'pls',\n            'you are': \"you're\",\n            'do not': \"don't\",\n            'cannot': \"can't\",\n            'will not': \"won't\",\n            'should not': \"shouldn't\",\n            'would not': \"wouldn't\",\n            'could not': \"couldn't\"\n        };\n\n        for (const [full, abbrev] of Object.entries(abbreviations)) {\n            const regex = new RegExp(`\\\\b${full}\\\\b`, 'gi');\n            if (regex.test(optimized)) {\n                optimized = optimized.replace(regex, abbrev);\n                techniques.push('abbreviation');\n            }\n        }\n\n        // 3. Remove filler words if target reduction not met\n        const currentReduction = 1 - (optimized.length / originalLength);\n        if (currentReduction < targetReduction) {\n            const fillerWords = ['really', 'very', 'quite', 'rather', 'somewhat', 'actually', 'basically', 'literally'];\n            for (const filler of fillerWords) {\n                const regex = new RegExp(`\\\\b${filler}\\\\b`, 'gi');\n                if (regex.test(optimized)) {\n                    optimized = optimized.replace(regex, '');\n                    techniques.push('filler-removal');\n                }\n            }\n        }\n\n        // 4. Sentence compression (remove redundant clauses)\n        if (currentReduction < targetReduction) {\n            optimized = this.compressSentences(optimized);\n            techniques.push('sentence-compression');\n        }\n\n        // Clean up any double spaces created\n        optimized = optimized.replace(/\\s+/g, ' ').trim();\n\n        const finalReduction = 1 - (optimized.length / originalLength);\n        const estimatedTokenReduction = finalReduction * 0.75; // Approximate token to character ratio\n\n        return {\n            originalTokens: Math.ceil(originalLength / 4), // Rough token estimate\n            optimizedTokens: Math.ceil(optimized.length / 4),\n            compressionRatio: finalReduction,\n            technique: techniques.join(', ')\n        };\n    }\n\n    private compressSentences(text: string): string {\n        // Simple sentence compression - remove redundant phrases\n        const redundantPatterns = [\n            /,\\s*which is to say,?/gi,\n            /,\\s*in other words,?/gi,\n            /,\\s*that is to say,?/gi,\n            /\\s*as I mentioned before,?\\s*/gi,\n            /\\s*as previously stated,?\\s*/gi\n        ];\n\n        let compressed = text;\n        for (const pattern of redundantPatterns) {\n            compressed = compressed.replace(pattern, ' ');\n        }\n\n        return compressed;\n    }\n\n    /**\n     * Optimize response for token efficiency\n     */\n    optimizeResponse(response: string, maxTokens?: number): string {\n        if (!maxTokens) return response;\n\n        const estimatedTokens = Math.ceil(response.length / 4);\n        if (estimatedTokens <= maxTokens) return response;\n\n        // Truncate at sentence boundaries\n        const sentences = response.split(/[.!?]+/);\n        let optimized = '';\n        let tokenCount = 0;\n\n        for (const sentence of sentences) {\n            const sentenceTokens = Math.ceil(sentence.length / 4);\n            if (tokenCount + sentenceTokens > maxTokens) break;\n\n            optimized += sentence + '.';\n            tokenCount += sentenceTokens;\n        }\n\n        return optimized.trim();\n    }\n}\n\n/**\n * Cost & Performance Optimization Service\n */\nexport class CostPerformanceOptimizer {\n    private cache: IntelligentCache;\n    private tokenOptimizer: TokenOptimizer;\n    private cloudWatch: CloudWatchClient;\n    private dailyCosts: Map<string, number> = new Map(); // date -> cost\n    private monthlyCosts: Map<string, number> = new Map(); // month -> cost\n\n    constructor(\n        private readonly budget: CostBudget,\n        private readonly region: string = 'eu-central-1'\n    ) {\n        this.cache = new IntelligentCache();\n        this.tokenOptimizer = new TokenOptimizer();\n        this.cloudWatch = new CloudWatchClient({ region });\n    }\n\n    /**\n     * Optimize request for cost and performance\n     */\n    async optimizeRequest(request: AIRequest): Promise<{\n        optimizedRequest: AIRequest;\n        optimization: CostOptimizationResult;\n        shouldProceed: boolean;\n    }> {\n        const requestId = randomUUID();\n        const startTime = Date.now();\n\n        // Check budget constraints\n        const budgetCheck = await this.checkBudget(request);\n        if (!budgetCheck.allowed) {\n            return {\n                optimizedRequest: request,\n                optimization: {\n                    originalCost: budgetCheck.estimatedCost,\n                    optimizedCost: 0,\n                    savings: 0,\n                    optimizations: ['budget-exceeded'],\n                    cacheUsed: false,\n                    compressionUsed: false\n                },\n                shouldProceed: false\n            };\n        }\n\n        // Check cache first\n        const cacheKey = this.cache.generateKey(request);\n        const cachedResponse = this.cache.get(cacheKey);\n\n        if (cachedResponse) {\n            return {\n                optimizedRequest: request,\n                optimization: {\n                    originalCost: budgetCheck.estimatedCost,\n                    optimizedCost: 0,\n                    savings: budgetCheck.estimatedCost,\n                    optimizations: ['cache-hit'],\n                    cacheUsed: true,\n                    compressionUsed: false\n                },\n                shouldProceed: false // Don't need to make API call\n            };\n        }\n\n        // Optimize prompt for token efficiency\n        const tokenOptimization = this.tokenOptimizer.compressPrompt(request.prompt, 0.15);\n        const optimizedRequest: AIRequest = {\n            ...request,\n            prompt: request.prompt // Keep original for now, apply compression based on cost pressure\n        };\n\n        // Apply compression if cost pressure is high\n        const costPressure = this.calculateCostPressure();\n        if (costPressure > 0.7 || budgetCheck.estimatedCost > budgetCheck.remainingBudget * 0.1) {\n            optimizedRequest.prompt = this.applyTokenOptimization(request.prompt, tokenOptimization);\n\n            // Reduce max tokens if needed\n            if (request.maxTokens && request.maxTokens > 1000) {\n                optimizedRequest.maxTokens = Math.max(500, Math.floor(request.maxTokens * 0.8));\n            }\n        }\n\n        const optimizedCost = this.estimateRequestCost(optimizedRequest);\n        const savings = budgetCheck.estimatedCost - optimizedCost;\n\n        return {\n            optimizedRequest,\n            optimization: {\n                originalCost: budgetCheck.estimatedCost,\n                optimizedCost,\n                savings,\n                optimizations: tokenOptimization.technique ? ['token-compression'] : [],\n                cacheUsed: false,\n                compressionUsed: tokenOptimization.compressionRatio > 0.05\n            },\n            shouldProceed: true\n        };\n    }\n\n    /**\n     * Process response and update metrics\n     */\n    async processResponse(\n        request: AIRequest,\n        response: AIResponse,\n        optimization: CostOptimizationResult\n    ): Promise<AIResponse> {\n        const actualCost = this.calculateActualCost(request, response);\n\n        // Cache successful responses\n        if (response.content && !response.error) {\n            const cacheKey = this.cache.generateKey(request);\n            this.cache.set(cacheKey, response, actualCost);\n        }\n\n        // Update cost tracking\n        await this.updateCostTracking(actualCost);\n\n        // Publish metrics\n        await this.publishMetrics({\n            latency: response.processingTime || 0,\n            throughput: 1000 / (response.processingTime || 1000), // requests per second\n            cacheHitRate: this.cache.getHitRate(),\n            tokenEfficiency: this.calculateTokenEfficiency(request, response),\n            costPerRequest: actualCost\n        });\n\n        // Optimize response if needed\n        const optimizedContent = request.maxTokens\n            ? this.tokenOptimizer.optimizeResponse(response.content, request.maxTokens)\n            : response.content;\n\n        return {\n            ...response,\n            content: optimizedContent,\n            cost: actualCost,\n            optimization\n        };\n    }\n\n    /**\n     * Check budget constraints\n     */\n    private async checkBudget(request: AIRequest): Promise<{\n        allowed: boolean;\n        estimatedCost: number;\n        remainingBudget: number;\n        reason?: string;\n    }> {\n        const estimatedCost = this.estimateRequestCost(request);\n        const today = new Date().toISOString().split('T')[0];\n        const thisMonth = new Date().toISOString().substring(0, 7);\n\n        const dailySpent = this.dailyCosts.get(today) || 0;\n        const monthlySpent = this.monthlyCosts.get(thisMonth) || 0;\n\n        // Check daily limit\n        if (dailySpent + estimatedCost > this.budget.dailyLimit) {\n            if (this.budget.hardStop) {\n                return {\n                    allowed: false,\n                    estimatedCost,\n                    remainingBudget: this.budget.dailyLimit - dailySpent,\n                    reason: 'Daily budget exceeded'\n                };\n            }\n        }\n\n        // Check monthly limit\n        if (monthlySpent + estimatedCost > this.budget.monthlyLimit) {\n            if (this.budget.hardStop) {\n                return {\n                    allowed: false,\n                    estimatedCost,\n                    remainingBudget: this.budget.monthlyLimit - monthlySpent,\n                    reason: 'Monthly budget exceeded'\n                };\n            }\n        }\n\n        return {\n            allowed: true,\n            estimatedCost,\n            remainingBudget: Math.min(\n                this.budget.dailyLimit - dailySpent,\n                this.budget.monthlyLimit - monthlySpent\n            )\n        };\n    }\n\n    /**\n     * Estimate request cost based on tokens and provider\n     */\n    private estimateRequestCost(request: AIRequest): number {\n        const inputTokens = Math.ceil(request.prompt.length / 4);\n        const outputTokens = request.maxTokens || 1000;\n\n        const providerCosts = {\n            bedrock: { input: 0.003, output: 0.015 }, // per 1K tokens\n            google: { input: 0.00125, output: 0.005 },\n            meta: { input: 0.0008, output: 0.0024 }\n        };\n\n        const costs = providerCosts[request.provider || 'bedrock'];\n        return (inputTokens * costs.input + outputTokens * costs.output) / 1000;\n    }\n\n    /**\n     * Calculate actual cost from response\n     */\n    private calculateActualCost(request: AIRequest, response: AIResponse): number {\n        if (response.cached) return 0;\n\n        const inputTokens = response.inputTokens || Math.ceil(request.prompt.length / 4);\n        const outputTokens = response.outputTokens || Math.ceil(response.content.length / 4);\n\n        const providerCosts = {\n            bedrock: { input: 0.003, output: 0.015 },\n            google: { input: 0.00125, output: 0.005 },\n            meta: { input: 0.0008, output: 0.0024 }\n        };\n\n        const costs = providerCosts[request.provider || 'bedrock'];\n        return (inputTokens * costs.input + outputTokens * costs.output) / 1000;\n    }\n\n    /**\n     * Calculate cost pressure (0-1 scale)\n     */\n    private calculateCostPressure(): number {\n        const today = new Date().toISOString().split('T')[0];\n        const thisMonth = new Date().toISOString().substring(0, 7);\n\n        const dailySpent = this.dailyCosts.get(today) || 0;\n        const monthlySpent = this.monthlyCosts.get(thisMonth) || 0;\n\n        const dailyPressure = dailySpent / this.budget.dailyLimit;\n        const monthlyPressure = monthlySpent / this.budget.monthlyLimit;\n\n        return Math.max(dailyPressure, monthlyPressure);\n    }\n\n    /**\n     * Apply token optimization to prompt\n     */\n    private applyTokenOptimization(prompt: string, optimization: TokenOptimization): string {\n        if (optimization.compressionRatio < 0.05) return prompt;\n\n        // Apply the compression techniques\n        return this.tokenOptimizer.compressPrompt(prompt, 0.2).technique ?\n            this.tokenOptimizer.compressPrompt(prompt, 0.2).toString() : prompt;\n    }\n\n    /**\n     * Calculate token efficiency\n     */\n    private calculateTokenEfficiency(request: AIRequest, response: AIResponse): number {\n        const inputTokens = response.inputTokens || Math.ceil(request.prompt.length / 4);\n        const outputTokens = response.outputTokens || Math.ceil(response.content.length / 4);\n        const totalTokens = inputTokens + outputTokens;\n\n        // Efficiency = useful content / total tokens\n        const usefulContent = response.content.replace(/\\s+/g, ' ').trim().length;\n        return totalTokens > 0 ? usefulContent / (totalTokens * 4) : 0;\n    }\n\n    /**\n     * Update cost tracking\n     */\n    private async updateCostTracking(cost: number): Promise<void> {\n        const today = new Date().toISOString().split('T')[0];\n        const thisMonth = new Date().toISOString().substring(0, 7);\n\n        // Update daily costs\n        const currentDaily = this.dailyCosts.get(today) || 0;\n        this.dailyCosts.set(today, currentDaily + cost);\n\n        // Update monthly costs\n        const currentMonthly = this.monthlyCosts.get(thisMonth) || 0;\n        this.monthlyCosts.set(thisMonth, currentMonthly + cost);\n\n        // Check alert thresholds\n        await this.checkAlertThresholds(currentDaily + cost, currentMonthly + cost);\n    }\n\n    /**\n     * Check budget alert thresholds\n     */\n    private async checkAlertThresholds(dailySpent: number, monthlySpent: number): Promise<void> {\n        for (const threshold of this.budget.alertThresholds) {\n            const dailyThreshold = this.budget.dailyLimit * (threshold / 100);\n            const monthlyThreshold = this.budget.monthlyLimit * (threshold / 100);\n\n            if (dailySpent >= dailyThreshold || monthlySpent >= monthlyThreshold) {\n                await this.sendBudgetAlert(threshold, dailySpent, monthlySpent);\n            }\n        }\n    }\n\n    /**\n     * Send budget alert\n     */\n    private async sendBudgetAlert(threshold: number, dailySpent: number, monthlySpent: number): Promise<void> {\n        console.warn(`Budget alert: ${threshold}% threshold reached. Daily: $${dailySpent.toFixed(2)}, Monthly: $${monthlySpent.toFixed(2)}`);\n\n        // Publish alert metric\n        await this.cloudWatch.send(new PutMetricDataCommand({\n            Namespace: 'AI/CostOptimization',\n            MetricData: [{\n                MetricName: 'BudgetAlert',\n                Value: threshold,\n                Unit: 'Percent',\n                Timestamp: new Date(),\n                Dimensions: [{\n                    Name: 'AlertType',\n                    Value: dailySpent >= this.budget.dailyLimit * (threshold / 100) ? 'Daily' : 'Monthly'\n                }]\n            }]\n        }));\n    }\n\n    /**\n     * Publish performance metrics\n     */\n    private async publishMetrics(metrics: PerformanceMetrics): Promise<void> {\n        const metricData = [\n            {\n                MetricName: 'Latency',\n                Value: metrics.latency,\n                Unit: 'Milliseconds'\n            },\n            {\n                MetricName: 'Throughput',\n                Value: metrics.throughput,\n                Unit: 'Count/Second'\n            },\n            {\n                MetricName: 'CacheHitRate',\n                Value: metrics.cacheHitRate * 100,\n                Unit: 'Percent'\n            },\n            {\n                MetricName: 'TokenEfficiency',\n                Value: metrics.tokenEfficiency,\n                Unit: 'None'\n            },\n            {\n                MetricName: 'CostPerRequest',\n                Value: metrics.costPerRequest,\n                Unit: 'None'\n            }\n        ].map(metric => ({\n            ...metric,\n            Timestamp: new Date()\n        }));\n\n        await this.cloudWatch.send(new PutMetricDataCommand({\n            Namespace: 'AI/Performance',\n            MetricData: metricData\n        }));\n    }\n\n    /**\n     * Get current performance metrics\n     */\n    getPerformanceMetrics(): PerformanceMetrics {\n        const cacheStats = this.cache.getStats();\n\n        return {\n            latency: 0, // Will be updated by actual requests\n            throughput: 0, // Will be updated by actual requests\n            cacheHitRate: cacheStats.hitRate,\n            tokenEfficiency: 0, // Will be updated by actual requests\n            costPerRequest: 0 // Will be updated by actual requests\n        };\n    }\n\n    /**\n     * Get cost summary\n     */\n    getCostSummary(): {\n        daily: { spent: number; limit: number; remaining: number };\n        monthly: { spent: number; limit: number; remaining: number };\n        cacheStats: any;\n    } {\n        const today = new Date().toISOString().split('T')[0];\n        const thisMonth = new Date().toISOString().substring(0, 7);\n\n        const dailySpent = this.dailyCosts.get(today) || 0;\n        const monthlySpent = this.monthlyCosts.get(thisMonth) || 0;\n\n        return {\n            daily: {\n                spent: dailySpent,\n                limit: this.budget.dailyLimit,\n                remaining: this.budget.dailyLimit - dailySpent\n            },\n            monthly: {\n                spent: monthlySpent,\n                limit: this.budget.monthlyLimit,\n                remaining: this.budget.monthlyLimit - monthlySpent\n            },\n            cacheStats: this.cache.getStats()\n        };\n    }\n\n    /**\n     * Clear cache\n     */\n    clearCache(): void {\n        this.cache.clear();\n    }\n\n    /**\n     * Reset cost tracking\n     */\n    resetCostTracking(): void {\n        this.dailyCosts.clear();\n        this.monthlyCosts.clear();\n    }\n}"],"mappings":"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","ignoreList":[]}
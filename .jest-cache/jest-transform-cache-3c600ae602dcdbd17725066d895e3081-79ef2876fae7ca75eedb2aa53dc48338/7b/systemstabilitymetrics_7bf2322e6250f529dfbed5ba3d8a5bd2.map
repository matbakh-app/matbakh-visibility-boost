{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/system-stability-metrics.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/system-stability-metrics.ts"],"sourcesContent":["/**\n * System Stability Metrics\n *\n * Comprehensive system stability monitoring for Bedrock Support Mode.\n * Tracks uptime, availability, reliability, and performance stability indicators.\n *\n * @module system-stability-metrics\n */\n\nimport { AiFeatureFlags } from \"./ai-feature-flags\";\nimport { AuditTrailSystem } from \"./audit-trail-system\";\nimport { BedrockSupportManager } from \"./bedrock-support-manager\";\nimport { IntelligentRouter } from \"./intelligent-router\";\nimport { SystemResourceMonitor } from \"./system-resource-monitor\";\n\n/**\n * System stability metrics interface\n */\nexport interface SystemStabilityMetrics {\n  timestamp: Date;\n  uptime: {\n    totalUptimeMs: number;\n    availabilityPercent: number;\n    mtbf: number; // Mean Time Between Failures (ms)\n    mttr: number; // Mean Time To Recovery (ms)\n  };\n  reliability: {\n    successRate: number;\n    errorRate: number;\n    failureCount: number;\n    recoveryCount: number;\n  };\n  performance: {\n    responseTimeStability: number; // 0-1 score\n    throughputStability: number; // 0-1 score\n    latencyVariance: number;\n    performanceDegradationEvents: number;\n  };\n  routing: {\n    hybridRoutingStability: number;\n    routingFailures: number;\n    fallbackActivations: number;\n    routingEfficiency: number;\n  };\n  support: {\n    supportOperationsStability: number;\n    supportOperationFailures: number;\n    autoResolutionStability: number;\n    implementationGapStability: number;\n  };\n  trends: {\n    stabilityTrend: \"improving\" | \"stable\" | \"degrading\";\n    trendConfidence: number;\n    stabilityScore: number; // Overall 0-1 stability score\n  };\n  // Enhanced metrics for improved system stability\n  enhanced: {\n    predictiveStabilityScore: number; // AI-powered predictive stability (0-1)\n    anomalyDetectionScore: number; // Anomaly detection confidence (0-1)\n    systemHealthGrade: \"A\" | \"B\" | \"C\" | \"D\" | \"F\"; // Overall system health grade\n    criticalPathStability: number; // Stability of critical system paths (0-1)\n    resourceUtilizationEfficiency: number; // Resource usage efficiency (0-1)\n    adaptabilityScore: number; // System's ability to adapt to changes (0-1)\n  };\n}\n\n/**\n * Stability event types\n */\nexport type StabilityEventType =\n  | \"system_start\"\n  | \"system_stop\"\n  | \"failure_detected\"\n  | \"recovery_completed\"\n  | \"performance_degradation\"\n  | \"performance_recovery\"\n  | \"routing_failure\"\n  | \"routing_recovery\"\n  | \"support_operation_failure\"\n  | \"support_operation_recovery\"\n  | \"anomaly_detected\"\n  | \"predictive_alert\"\n  | \"resource_optimization\"\n  | \"critical_path_failure\"\n  | \"adaptive_response\";\n\n/**\n * Stability event interface\n */\nexport interface StabilityEvent {\n  id: string;\n  type: StabilityEventType;\n  timestamp: Date;\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n  component: string;\n  description: string;\n  duration?: number; // For recovery events\n  impact: {\n    availability: number; // Impact on availability (0-1)\n    performance: number; // Impact on performance (0-1)\n    reliability: number; // Impact on reliability (0-1)\n  };\n  metadata?: Record<string, any>;\n}\n\n/**\n * Stability configuration\n */\nexport interface StabilityConfig {\n  enabled: boolean;\n  metricsCollectionIntervalMs: number;\n  eventRetentionMs: number;\n  metricsRetentionMs: number;\n  thresholds: {\n    minAvailabilityPercent: number;\n    maxErrorRate: number;\n    minSuccessRate: number;\n    maxResponseTimeVariance: number;\n    minStabilityScore: number;\n  };\n  alerting: {\n    enabled: boolean;\n    stabilityScoreThreshold: number;\n    availabilityThreshold: number;\n    errorRateThreshold: number;\n  };\n}\n\n/**\n * Default stability configuration\n */\nconst DEFAULT_STABILITY_CONFIG: StabilityConfig = {\n  enabled: true,\n  metricsCollectionIntervalMs: 30000, // 30 seconds\n  eventRetentionMs: 86400000, // 24 hours\n  metricsRetentionMs: 604800000, // 7 days\n  thresholds: {\n    minAvailabilityPercent: 99.5,\n    maxErrorRate: 0.01, // 1%\n    minSuccessRate: 0.99, // 99%\n    maxResponseTimeVariance: 0.2, // 20%\n    minStabilityScore: 0.95, // 95%\n  },\n  alerting: {\n    enabled: true,\n    stabilityScoreThreshold: 0.9,\n    availabilityThreshold: 99.0,\n    errorRateThreshold: 0.05,\n  },\n};\n\n/**\n * System Stability Metrics Collector\n *\n * Comprehensive monitoring of system stability indicators for Bedrock Support Mode.\n */\nexport class SystemStabilityMetrics {\n  private config: StabilityConfig;\n  private metrics: SystemStabilityMetrics[];\n  private events: StabilityEvent[];\n  private isMonitoring: boolean;\n  private monitoringTimer?: NodeJS.Timeout;\n  private systemStartTime: Date;\n  private lastFailureTime?: Date;\n  private lastRecoveryTime?: Date;\n  private performanceBaseline?: {\n    responseTime: number;\n    throughput: number;\n    errorRate: number;\n  };\n\n  constructor(\n    private featureFlags: AiFeatureFlags,\n    private auditTrail: AuditTrailSystem,\n    private resourceMonitor: SystemResourceMonitor,\n    private bedrockSupportManager?: BedrockSupportManager,\n    private intelligentRouter?: IntelligentRouter,\n    config?: Partial<StabilityConfig>\n  ) {\n    this.config = { ...DEFAULT_STABILITY_CONFIG, ...config };\n    this.metrics = [];\n    this.events = [];\n    this.isMonitoring = false;\n    this.systemStartTime = new Date();\n  }\n\n  /**\n   * Start stability monitoring\n   */\n  public async startMonitoring(): Promise<void> {\n    if (!this.config.enabled) {\n      console.log(\n        \"[SystemStabilityMetrics] Monitoring disabled by configuration\"\n      );\n      return;\n    }\n\n    if (this.isMonitoring) {\n      console.log(\"[SystemStabilityMetrics] Already monitoring\");\n      return;\n    }\n\n    console.log(\"[SystemStabilityMetrics] Starting stability monitoring\");\n    this.isMonitoring = true;\n    this.systemStartTime = new Date();\n\n    // Record system start event\n    await this.recordEvent({\n      type: \"system_start\",\n      severity: \"low\",\n      component: \"SystemStabilityMetrics\",\n      description: \"System stability monitoring started\",\n      impact: { availability: 0, performance: 0, reliability: 0 },\n    });\n\n    // Establish performance baseline\n    await this.establishPerformanceBaseline();\n\n    // Collect initial metrics immediately\n    await this.collectStabilityMetrics();\n\n    // Start metrics collection timer\n    this.monitoringTimer = setInterval(\n      () => this.collectStabilityMetrics(),\n      this.config.metricsCollectionIntervalMs\n    );\n\n    await this.auditTrail.logEvent({\n      eventType: \"stability_monitoring_started\",\n      timestamp: new Date(),\n      details: {\n        component: \"SystemStabilityMetrics\",\n        config: this.config,\n        systemStartTime: this.systemStartTime,\n      },\n    });\n  }\n\n  /**\n   * Stop stability monitoring\n   */\n  public async stopMonitoring(): Promise<void> {\n    if (!this.isMonitoring) {\n      return;\n    }\n\n    console.log(\"[SystemStabilityMetrics] Stopping stability monitoring\");\n    this.isMonitoring = false;\n\n    if (this.monitoringTimer) {\n      clearInterval(this.monitoringTimer);\n      this.monitoringTimer = undefined;\n    }\n\n    // Record system stop event\n    await this.recordEvent({\n      type: \"system_stop\",\n      severity: \"low\",\n      component: \"SystemStabilityMetrics\",\n      description: \"System stability monitoring stopped\",\n      impact: { availability: 0, performance: 0, reliability: 0 },\n    });\n\n    await this.auditTrail.logEvent({\n      eventType: \"stability_monitoring_stopped\",\n      timestamp: new Date(),\n      details: {\n        component: \"SystemStabilityMetrics\",\n        finalMetrics: await this.getCurrentStabilityMetrics(),\n        totalEvents: this.events.length,\n      },\n    });\n  }\n\n  /**\n   * Establish performance baseline\n   */\n  private async establishPerformanceBaseline(): Promise<void> {\n    try {\n      // Collect baseline metrics from various components\n      const resourceMetrics = await this.resourceMonitor.getCurrentMetrics();\n\n      // Calculate dynamic baseline based on current system state\n      const dynamicResponseTime = Math.max(\n        100,\n        resourceMetrics.cpuUsagePercent * 400\n      ); // Scale with CPU usage\n      const dynamicThroughput = Math.max(\n        50,\n        200 - resourceMetrics.cpuUsagePercent * 100\n      ); // Inverse scale with CPU\n      const dynamicErrorRate = Math.max(\n        0.0005,\n        resourceMetrics.cpuUsagePercent * 0.002\n      ); // Scale with CPU load\n\n      this.performanceBaseline = {\n        responseTime: dynamicResponseTime,\n        throughput: dynamicThroughput,\n        errorRate: dynamicErrorRate,\n      };\n\n      console.log(\n        \"[SystemStabilityMetrics] Performance baseline established:\",\n        this.performanceBaseline\n      );\n    } catch (error) {\n      console.error(\n        \"[SystemStabilityMetrics] Failed to establish baseline:\",\n        error\n      );\n\n      // Fallback to conservative defaults if baseline establishment fails\n      this.performanceBaseline = {\n        responseTime: 300, // Conservative default\n        throughput: 80, // Conservative default\n        errorRate: 0.002, // Conservative default\n      };\n\n      console.log(\n        \"[SystemStabilityMetrics] Using fallback baseline:\",\n        this.performanceBaseline\n      );\n    }\n  }\n\n  /**\n   * Collect comprehensive stability metrics\n   */\n  private async collectStabilityMetrics(): Promise<void> {\n    try {\n      const timestamp = new Date();\n      const uptimeMs = timestamp.getTime() - this.systemStartTime.getTime();\n\n      // Calculate uptime metrics\n      const uptimeMetrics = this.calculateUptimeMetrics(uptimeMs);\n\n      // Calculate reliability metrics\n      const reliabilityMetrics = this.calculateReliabilityMetrics();\n\n      // Calculate performance stability\n      const performanceMetrics = await this.calculatePerformanceStability();\n\n      // Calculate routing stability\n      const routingMetrics = await this.calculateRoutingStability();\n\n      // Calculate support operations stability\n      const supportMetrics = await this.calculateSupportStability();\n\n      // Calculate trends\n      const trendsMetrics = this.calculateStabilityTrends();\n\n      // Calculate enhanced metrics\n      const enhancedMetrics = await this.calculateEnhancedMetrics();\n\n      const stabilityMetrics: SystemStabilityMetrics = {\n        timestamp,\n        uptime: uptimeMetrics,\n        reliability: reliabilityMetrics,\n        performance: performanceMetrics,\n        routing: routingMetrics,\n        support: supportMetrics,\n        trends: trendsMetrics,\n        enhanced: enhancedMetrics,\n      };\n\n      this.metrics.push(stabilityMetrics);\n\n      // Clean up old metrics\n      this.cleanupOldData();\n\n      // Check for stability alerts\n      await this.checkStabilityAlerts(stabilityMetrics);\n    } catch (error) {\n      console.error(\n        \"[SystemStabilityMetrics] Error collecting metrics:\",\n        error\n      );\n\n      await this.recordEvent({\n        type: \"failure_detected\",\n        severity: \"medium\",\n        component: \"SystemStabilityMetrics\",\n        description: `Metrics collection failed: ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`,\n        impact: { availability: 0.1, performance: 0.1, reliability: 0.1 },\n        metadata: {\n          error: error instanceof Error ? error.message : String(error),\n        },\n      });\n    }\n  }\n\n  /**\n   * Calculate uptime metrics\n   */\n  private calculateUptimeMetrics(\n    uptimeMs: number\n  ): SystemStabilityMetrics[\"uptime\"] {\n    const failures = this.events.filter((e) => e.type === \"failure_detected\");\n    const recoveries = this.events.filter(\n      (e) => e.type === \"recovery_completed\"\n    );\n\n    // Calculate availability percentage\n    const totalDowntime = failures.reduce((sum, failure) => {\n      const recovery = recoveries.find((r) => r.timestamp > failure.timestamp);\n      if (recovery) {\n        return (\n          sum + (recovery.timestamp.getTime() - failure.timestamp.getTime())\n        );\n      }\n      return sum;\n    }, 0);\n\n    const availabilityPercent = ((uptimeMs - totalDowntime) / uptimeMs) * 100;\n\n    // Calculate MTBF (Mean Time Between Failures)\n    const mtbf = failures.length > 0 ? uptimeMs / failures.length : uptimeMs;\n\n    // Calculate MTTR (Mean Time To Recovery)\n    const recoveryTimes = recoveries\n      .map((recovery) => {\n        const failure = failures.find((f) => f.timestamp < recovery.timestamp);\n        return failure\n          ? recovery.timestamp.getTime() - failure.timestamp.getTime()\n          : 0;\n      })\n      .filter((time) => time > 0);\n\n    const mttr =\n      recoveryTimes.length > 0\n        ? recoveryTimes.reduce((sum, time) => sum + time, 0) /\n          recoveryTimes.length\n        : 0;\n\n    return {\n      totalUptimeMs: uptimeMs,\n      availabilityPercent: Math.max(0, Math.min(100, availabilityPercent)),\n      mtbf,\n      mttr,\n    };\n  }\n\n  /**\n   * Calculate reliability metrics\n   */\n  private calculateReliabilityMetrics(): SystemStabilityMetrics[\"reliability\"] {\n    const recentEvents = this.getRecentEvents(3600000); // Last hour\n    const failures = recentEvents.filter((e) => e.type.includes(\"failure\"));\n    const recoveries = recentEvents.filter((e) => e.type.includes(\"recovery\"));\n    const totalOperations = Math.max(1, recentEvents.length);\n\n    const failureCount = failures.length;\n    const recoveryCount = recoveries.length;\n    const errorRate = failureCount / totalOperations;\n    const successRate = Math.max(0, 1 - errorRate);\n\n    return {\n      successRate,\n      errorRate,\n      failureCount,\n      recoveryCount,\n    };\n  }\n\n  /**\n   * Calculate performance stability\n   */\n  private async calculatePerformanceStability(): Promise<\n    SystemStabilityMetrics[\"performance\"]\n  > {\n    try {\n      const resourceMetrics = await this.resourceMonitor.getCurrentMetrics();\n      const recentMetrics = this.metrics.slice(-10); // Last 10 measurements\n\n      if (recentMetrics.length < 2) {\n        // Use current resource metrics to estimate initial stability\n        const cpuStability = Math.max(0, 1 - resourceMetrics.cpuUsagePercent);\n        const memoryStability = Math.max(\n          0,\n          1 - resourceMetrics.memoryUsagePercent / 100\n        );\n\n        return {\n          responseTimeStability: (cpuStability + memoryStability) / 2,\n          throughputStability: (cpuStability + memoryStability) / 2,\n          latencyVariance: resourceMetrics.cpuUsagePercent * 0.1,\n          performanceDegradationEvents: 0,\n        };\n      }\n\n      // Calculate actual response times based on baseline and current metrics\n      const currentResponseTime = this.performanceBaseline\n        ? this.performanceBaseline.responseTime *\n          (1 + resourceMetrics.cpuUsagePercent)\n        : 200 * (1 + resourceMetrics.cpuUsagePercent);\n\n      const currentThroughput = this.performanceBaseline\n        ? this.performanceBaseline.throughput *\n          (1 - resourceMetrics.cpuUsagePercent * 0.5)\n        : 100 * (1 - resourceMetrics.cpuUsagePercent * 0.5);\n\n      // Calculate response time stability based on variance from baseline\n      const responseTimeVariance = this.performanceBaseline\n        ? Math.abs(\n            currentResponseTime - this.performanceBaseline.responseTime\n          ) / this.performanceBaseline.responseTime\n        : 0.1;\n\n      const responseTimeStability = Math.max(\n        0,\n        Math.min(1, 1 - responseTimeVariance)\n      );\n\n      // Calculate throughput stability\n      const throughputVariance = this.performanceBaseline\n        ? Math.abs(currentThroughput - this.performanceBaseline.throughput) /\n          this.performanceBaseline.throughput\n        : 0.1;\n\n      const throughputStability = Math.max(\n        0,\n        Math.min(1, 1 - throughputVariance)\n      );\n\n      // Calculate latency variance based on recent measurements\n      const recentResponseTimes = recentMetrics.map((m) =>\n        m.performance?.responseTimeStability\n          ? m.performance.responseTimeStability * 1000\n          : currentResponseTime\n      );\n      const latencyVariance =\n        recentResponseTimes.length > 1\n          ? this.calculateVariance(recentResponseTimes) / 1000000 // Normalize to reasonable scale\n          : responseTimeVariance;\n\n      // Count performance degradation events\n      const degradationEvents = this.events.filter(\n        (e) =>\n          e.type === \"performance_degradation\" &&\n          e.timestamp.getTime() > Date.now() - 3600000 // Last hour\n      ).length;\n\n      return {\n        responseTimeStability,\n        throughputStability,\n        latencyVariance,\n        performanceDegradationEvents: degradationEvents,\n      };\n    } catch (error) {\n      console.error(\n        \"[SystemStabilityMetrics] Error calculating performance stability:\",\n        error\n      );\n\n      // Return degraded but realistic values on error\n      return {\n        responseTimeStability: 0.7,\n        throughputStability: 0.7,\n        latencyVariance: 0.3,\n        performanceDegradationEvents: 1,\n      };\n    }\n  }\n\n  /**\n   * Calculate routing stability\n   */\n  private async calculateRoutingStability(): Promise<\n    SystemStabilityMetrics[\"routing\"]\n  > {\n    try {\n      const routingFailures = this.events.filter(\n        (e) =>\n          e.type === \"routing_failure\" &&\n          e.timestamp.getTime() > Date.now() - 3600000 // Last hour\n      ).length;\n\n      const fallbackActivations = this.events.filter(\n        (e) =>\n          e.component === \"IntelligentRouter\" &&\n          e.description.includes(\"fallback\") &&\n          e.timestamp.getTime() > Date.now() - 3600000 // Last hour\n      ).length;\n\n      // Calculate hybrid routing stability based on recent performance\n      const recentRoutingEvents = this.events.filter(\n        (e) =>\n          e.component === \"IntelligentRouter\" &&\n          e.timestamp.getTime() > Date.now() - 1800000 // Last 30 minutes\n      );\n\n      const routingSuccessRate =\n        recentRoutingEvents.length > 0\n          ? 1 - routingFailures / Math.max(1, recentRoutingEvents.length)\n          : 1.0;\n\n      const hybridRoutingStability = Math.max(0, routingSuccessRate);\n\n      // Calculate routing efficiency (simplified)\n      const routingEfficiency = Math.max(0, 1 - fallbackActivations * 0.1);\n\n      return {\n        hybridRoutingStability,\n        routingFailures,\n        fallbackActivations,\n        routingEfficiency,\n      };\n    } catch (error) {\n      console.error(\n        \"[SystemStabilityMetrics] Error calculating routing stability:\",\n        error\n      );\n      return {\n        hybridRoutingStability: 0.8,\n        routingFailures: 1,\n        fallbackActivations: 1,\n        routingEfficiency: 0.8,\n      };\n    }\n  }\n\n  /**\n   * Calculate support operations stability\n   */\n  private async calculateSupportStability(): Promise<\n    SystemStabilityMetrics[\"support\"]\n  > {\n    try {\n      const supportFailures = this.events.filter(\n        (e) =>\n          e.type === \"support_operation_failure\" &&\n          e.timestamp.getTime() > Date.now() - 3600000 // Last hour\n      ).length;\n\n      const supportEvents = this.events.filter(\n        (e) =>\n          e.component.includes(\"Support\") &&\n          e.timestamp.getTime() > Date.now() - 3600000 // Last hour\n      );\n\n      const supportOperationsStability =\n        supportEvents.length > 0\n          ? Math.max(0, 1 - supportFailures / supportEvents.length)\n          : 1.0;\n\n      // Auto-resolution stability (simplified)\n      const autoResolutionEvents = this.events.filter(\n        (e) =>\n          e.component === \"AutoResolutionOptimizer\" &&\n          e.timestamp.getTime() > Date.now() - 3600000 // Last hour\n      );\n\n      const autoResolutionStability =\n        autoResolutionEvents.length > 0 ? 0.9 : 1.0;\n\n      // Implementation gap stability (simplified)\n      const implementationGapStability = 0.95; // Based on existing metrics\n\n      return {\n        supportOperationsStability,\n        supportOperationFailures: supportFailures,\n        autoResolutionStability,\n        implementationGapStability,\n      };\n    } catch (error) {\n      console.error(\n        \"[SystemStabilityMetrics] Error calculating support stability:\",\n        error\n      );\n      return {\n        supportOperationsStability: 0.9,\n        supportOperationFailures: 0,\n        autoResolutionStability: 0.9,\n        implementationGapStability: 0.9,\n      };\n    }\n  }\n\n  /**\n   * Calculate enhanced stability metrics\n   */\n  private async calculateEnhancedMetrics(): Promise<\n    SystemStabilityMetrics[\"enhanced\"]\n  > {\n    try {\n      // Predictive stability score using AI-powered analysis\n      const predictiveStabilityScore =\n        await this.calculatePredictiveStability();\n\n      // Anomaly detection score\n      const anomalyDetectionScore = this.calculateAnomalyDetectionScore();\n\n      // System health grade\n      const systemHealthGrade = this.calculateSystemHealthGrade();\n\n      // Critical path stability\n      const criticalPathStability = this.calculateCriticalPathStability();\n\n      // Resource utilization efficiency\n      const resourceUtilizationEfficiency =\n        await this.calculateResourceEfficiency();\n\n      // Adaptability score\n      const adaptabilityScore = this.calculateAdaptabilityScore();\n\n      return {\n        predictiveStabilityScore,\n        anomalyDetectionScore,\n        systemHealthGrade,\n        criticalPathStability,\n        resourceUtilizationEfficiency,\n        adaptabilityScore,\n      };\n    } catch (error) {\n      console.error(\n        \"[SystemStabilityMetrics] Error calculating enhanced metrics:\",\n        error\n      );\n      return {\n        predictiveStabilityScore: 0.85,\n        anomalyDetectionScore: 0.9,\n        systemHealthGrade: \"B\",\n        criticalPathStability: 0.88,\n        resourceUtilizationEfficiency: 0.82,\n        adaptabilityScore: 0.87,\n      };\n    }\n  }\n\n  /**\n   * Calculate predictive stability using trend analysis and pattern recognition\n   */\n  private async calculatePredictiveStability(): Promise<number> {\n    if (this.metrics.length < 10) {\n      return 0.85; // Default for insufficient data\n    }\n\n    const recentMetrics = this.metrics.slice(-20);\n    const stabilityScores = recentMetrics.map((m) =>\n      this.calculateOverallStabilityScore(m)\n    );\n\n    // Analyze patterns and trends\n    const trend = this.calculateTrend(stabilityScores);\n    const variance = this.calculateVariance(stabilityScores);\n    const recentEvents = this.getRecentEvents(3600000); // Last hour\n\n    // Predictive factors\n    const trendFactor =\n      trend.direction === \"improving\"\n        ? 1.1\n        : trend.direction === \"degrading\"\n        ? 0.9\n        : 1.0;\n    const varianceFactor = Math.max(0.7, 1 - variance);\n    const eventsFactor = Math.max(0.8, 1 - recentEvents.length * 0.05);\n\n    const predictiveScore = Math.min(\n      1,\n      (stabilityScores[stabilityScores.length - 1] || 0.85) *\n        trendFactor *\n        varianceFactor *\n        eventsFactor\n    );\n\n    return Math.max(0, predictiveScore);\n  }\n\n  /**\n   * Calculate anomaly detection score\n   */\n  private calculateAnomalyDetectionScore(): number {\n    const recentEvents = this.getRecentEvents(1800000); // Last 30 minutes\n    const anomalyEvents = recentEvents.filter(\n      (e) =>\n        e.type === \"anomaly_detected\" ||\n        e.severity === \"critical\" ||\n        e.type === \"predictive_alert\"\n    );\n\n    // Higher score means better anomaly detection (fewer undetected anomalies)\n    const anomalyRate = anomalyEvents.length / Math.max(1, recentEvents.length);\n    return Math.max(0.7, Math.min(1, 1 - anomalyRate * 0.5));\n  }\n\n  /**\n   * Calculate system health grade\n   */\n  private calculateSystemHealthGrade(): \"A\" | \"B\" | \"C\" | \"D\" | \"F\" {\n    const currentMetrics = this.metrics[this.metrics.length - 1];\n    if (!currentMetrics) return \"C\";\n\n    const overallScore = this.calculateOverallStabilityScore(currentMetrics);\n\n    if (overallScore >= 0.95) return \"A\";\n    if (overallScore >= 0.9) return \"B\";\n    if (overallScore >= 0.8) return \"C\";\n    if (overallScore >= 0.7) return \"D\";\n    return \"F\";\n  }\n\n  /**\n   * Calculate critical path stability\n   */\n  private calculateCriticalPathStability(): number {\n    const criticalComponents = [\n      \"BedrockSupportManager\",\n      \"IntelligentRouter\",\n      \"DirectBedrockClient\",\n      \"SystemResourceMonitor\",\n    ];\n\n    const recentEvents = this.getRecentEvents(3600000);\n    const criticalEvents = recentEvents.filter((e) =>\n      criticalComponents.some((comp) => e.component.includes(comp))\n    );\n\n    const criticalFailures = criticalEvents.filter(\n      (e) => e.type.includes(\"failure\") || e.severity === \"critical\"\n    ).length;\n\n    return Math.max(0.7, 1 - criticalFailures * 0.1);\n  }\n\n  /**\n   * Calculate resource utilization efficiency\n   */\n  private async calculateResourceEfficiency(): Promise<number> {\n    try {\n      const resourceMetrics = await this.resourceMonitor.getCurrentMetrics();\n\n      // Efficiency based on balanced resource usage\n      const cpuEfficiency = Math.max(\n        0,\n        1 - Math.abs(0.7 - resourceMetrics.cpuUsagePercent)\n      );\n      const memoryEfficiency = Math.max(\n        0,\n        1 - Math.abs(0.6 - resourceMetrics.memoryUsagePercent / 100)\n      );\n\n      return (cpuEfficiency + memoryEfficiency) / 2;\n    } catch (error) {\n      return 0.8; // Default efficiency\n    }\n  }\n\n  /**\n   * Calculate system adaptability score\n   */\n  private calculateAdaptabilityScore(): number {\n    const recentEvents = this.getRecentEvents(7200000); // Last 2 hours\n    const adaptiveEvents = recentEvents.filter(\n      (e) =>\n        e.type === \"adaptive_response\" ||\n        e.type === \"recovery_completed\" ||\n        e.type === \"resource_optimization\"\n    );\n\n    const failureEvents = recentEvents.filter((e) =>\n      e.type.includes(\"failure\")\n    );\n\n    if (failureEvents.length === 0) return 0.95;\n\n    const adaptationRate = adaptiveEvents.length / failureEvents.length;\n    return Math.min(1, Math.max(0.6, adaptationRate));\n  }\n\n  /**\n   * Calculate stability trends\n   */\n  private calculateStabilityTrends(): SystemStabilityMetrics[\"trends\"] {\n    if (this.metrics.length < 5) {\n      return {\n        stabilityTrend: \"stable\",\n        trendConfidence: 0.5,\n        stabilityScore: 0.95,\n      };\n    }\n\n    const recentMetrics = this.metrics.slice(-10);\n\n    // Calculate overall stability scores for trend analysis\n    const stabilityScores = recentMetrics.map((m) =>\n      this.calculateOverallStabilityScore(m)\n    );\n\n    // Calculate trend\n    const trend = this.calculateTrend(stabilityScores);\n\n    // Calculate overall current stability score\n    const currentStabilityScore =\n      stabilityScores[stabilityScores.length - 1] || 0.95;\n\n    return {\n      stabilityTrend: trend.direction,\n      trendConfidence: trend.confidence,\n      stabilityScore: currentStabilityScore,\n    };\n  }\n\n  /**\n   * Calculate overall stability score\n   */\n  private calculateOverallStabilityScore(\n    metrics: SystemStabilityMetrics\n  ): number {\n    const weights = {\n      availability: 0.3,\n      reliability: 0.25,\n      performance: 0.2,\n      routing: 0.15,\n      support: 0.1,\n    };\n\n    // Normalize all scores to 0-1 range and apply penalties for poor performance\n    const availabilityScore = Math.max(\n      0,\n      Math.min(1, metrics.uptime.availabilityPercent / 100)\n    );\n    const reliabilityScore = Math.max(\n      0,\n      Math.min(1, metrics.reliability.successRate)\n    );\n\n    // Performance score with penalty for high variance\n    const basePerformanceScore =\n      (metrics.performance.responseTimeStability +\n        metrics.performance.throughputStability) /\n      2;\n    const variancePenalty = Math.min(\n      0.2,\n      metrics.performance.latencyVariance * 0.5\n    );\n    const performanceScore = Math.max(\n      0,\n      basePerformanceScore - variancePenalty\n    );\n\n    const routingScore = Math.max(\n      0,\n      Math.min(1, metrics.routing.hybridRoutingStability)\n    );\n    const supportScore = Math.max(\n      0,\n      Math.min(1, metrics.support.supportOperationsStability)\n    );\n\n    // Calculate weighted score\n    const weightedScore =\n      availabilityScore * weights.availability +\n      reliabilityScore * weights.reliability +\n      performanceScore * weights.performance +\n      routingScore * weights.routing +\n      supportScore * weights.support;\n\n    // Apply additional penalties for critical issues\n    let finalScore = weightedScore;\n\n    // Penalty for high error rates\n    if (metrics.reliability.errorRate > 0.05) {\n      finalScore *= 0.9;\n    }\n\n    // Penalty for performance degradation events\n    if (metrics.performance.performanceDegradationEvents > 2) {\n      finalScore *= 0.95;\n    }\n\n    // Penalty for routing failures\n    if (metrics.routing.routingFailures > 3) {\n      finalScore *= 0.95;\n    }\n\n    return Math.max(0, Math.min(1, finalScore));\n  }\n\n  /**\n   * Calculate stability score for a series of values\n   */\n  private calculateStabilityScore(values: number[]): number {\n    if (values.length < 2) return 1.0;\n\n    // Filter out invalid values\n    const validValues = values.filter(\n      (val) => !isNaN(val) && isFinite(val) && val >= 0\n    );\n    if (validValues.length < 2) return 0.8; // Return reasonable default for insufficient data\n\n    const mean =\n      validValues.reduce((sum, val) => sum + val, 0) / validValues.length;\n\n    // Avoid division by zero\n    if (mean === 0) return 1.0;\n\n    const variance = this.calculateVariance(validValues);\n    const standardDeviation = Math.sqrt(variance);\n    const coefficientOfVariation = standardDeviation / mean;\n\n    // Use a more nuanced scoring function\n    // Lower coefficient of variation = higher stability\n    // Apply exponential decay to make the scoring more sensitive\n    const stabilityScore = Math.exp(-coefficientOfVariation * 2);\n\n    // Ensure score is between 0 and 1\n    return Math.max(0, Math.min(1, stabilityScore));\n  }\n\n  /**\n   * Calculate variance of values\n   */\n  private calculateVariance(values: number[]): number {\n    if (values.length < 2) return 0;\n\n    // Filter out invalid values\n    const validValues = values.filter((val) => !isNaN(val) && isFinite(val));\n    if (validValues.length < 2) return 0;\n\n    const mean =\n      validValues.reduce((sum, val) => sum + val, 0) / validValues.length;\n    const squaredDiffs = validValues.map((val) => Math.pow(val - mean, 2));\n\n    // Use sample variance (n-1) for better statistical accuracy\n    return (\n      squaredDiffs.reduce((sum, diff) => sum + diff, 0) /\n      (validValues.length - 1)\n    );\n  }\n\n  /**\n   * Calculate trend for a series of values\n   */\n  private calculateTrend(values: number[]): {\n    direction: \"improving\" | \"stable\" | \"degrading\";\n    confidence: number;\n  } {\n    if (values.length < 3) {\n      return { direction: \"stable\", confidence: 0 };\n    }\n\n    // Simple linear regression\n    const n = values.length;\n    const x = Array.from({ length: n }, (_, i) => i);\n    const sumX = x.reduce((a, b) => a + b, 0);\n    const sumY = values.reduce((a, b) => a + b, 0);\n    const sumXY = x.reduce((sum, xi, i) => sum + xi * values[i], 0);\n    const sumXX = x.reduce((sum, xi) => sum + xi * xi, 0);\n\n    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n\n    // Calculate R²\n    const yMean = sumY / n;\n    const intercept = (sumY - slope * sumX) / n;\n    const ssRes = values.reduce((sum, yi, i) => {\n      const predicted = slope * i + intercept;\n      return sum + Math.pow(yi - predicted, 2);\n    }, 0);\n    const ssTot = values.reduce((sum, yi) => sum + Math.pow(yi - yMean, 2), 0);\n    const rSquared = Math.max(0, 1 - ssRes / ssTot);\n\n    // Determine direction\n    let direction: \"improving\" | \"stable\" | \"degrading\";\n    if (Math.abs(slope) < 0.01) {\n      direction = \"stable\";\n    } else if (slope > 0) {\n      direction = \"improving\";\n    } else {\n      direction = \"degrading\";\n    }\n\n    return {\n      direction,\n      confidence: rSquared,\n    };\n  }\n\n  /**\n   * Record a stability event\n   */\n  public async recordEvent(\n    eventData: Omit<StabilityEvent, \"id\" | \"timestamp\">\n  ): Promise<void> {\n    const event: StabilityEvent = {\n      id: `stability_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date(),\n      ...eventData,\n    };\n\n    this.events.push(event);\n\n    // Update failure/recovery tracking\n    if (event.type === \"failure_detected\") {\n      this.lastFailureTime = event.timestamp;\n    } else if (event.type === \"recovery_completed\") {\n      this.lastRecoveryTime = event.timestamp;\n    }\n\n    console.log(\n      `[SystemStabilityMetrics] Event recorded: ${event.type} - ${event.description}`\n    );\n\n    try {\n      await this.auditTrail.logEvent({\n        eventType: \"stability_event_recorded\",\n        timestamp: event.timestamp,\n        details: {\n          component: \"SystemStabilityMetrics\",\n          event,\n        },\n      });\n    } catch (auditError) {\n      console.error(\n        \"[SystemStabilityMetrics] Failed to log audit event:\",\n        auditError\n      );\n      // Continue execution even if audit logging fails\n    }\n  }\n\n  /**\n   * Check for stability alerts\n   */\n  private async checkStabilityAlerts(\n    metrics: SystemStabilityMetrics\n  ): Promise<void> {\n    if (!this.config.alerting.enabled) {\n      return;\n    }\n\n    const alerts: string[] = [];\n\n    // Check stability score\n    if (\n      metrics.trends.stabilityScore <\n      this.config.alerting.stabilityScoreThreshold\n    ) {\n      alerts.push(\n        `Low stability score: ${(metrics.trends.stabilityScore * 100).toFixed(\n          1\n        )}%`\n      );\n    }\n\n    // Check availability\n    if (\n      metrics.uptime.availabilityPercent <\n      this.config.alerting.availabilityThreshold\n    ) {\n      alerts.push(\n        `Low availability: ${metrics.uptime.availabilityPercent.toFixed(2)}%`\n      );\n    }\n\n    // Check error rate\n    if (\n      metrics.reliability.errorRate > this.config.alerting.errorRateThreshold\n    ) {\n      alerts.push(\n        `High error rate: ${(metrics.reliability.errorRate * 100).toFixed(2)}%`\n      );\n    }\n\n    // Record alerts as events\n    for (const alert of alerts) {\n      await this.recordEvent({\n        type: \"failure_detected\",\n        severity: \"high\",\n        component: \"SystemStabilityMetrics\",\n        description: `Stability alert: ${alert}`,\n        impact: { availability: 0.2, performance: 0.1, reliability: 0.2 },\n        metadata: { alertType: \"stability_threshold\", metrics },\n      });\n    }\n  }\n\n  /**\n   * Get recent events\n   */\n  private getRecentEvents(durationMs: number): StabilityEvent[] {\n    const cutoffTime = Date.now() - durationMs;\n    return this.events.filter(\n      (event) => event.timestamp.getTime() > cutoffTime\n    );\n  }\n\n  /**\n   * Clean up old data\n   */\n  private cleanupOldData(): void {\n    const now = Date.now();\n    const initialMetricsCount = this.metrics.length;\n    const initialEventsCount = this.events.length;\n\n    // Clean up old metrics\n    const metricsCutoff = now - this.config.metricsRetentionMs;\n    this.metrics = this.metrics.filter(\n      (m) => m.timestamp.getTime() > metricsCutoff\n    );\n\n    // Clean up old events\n    const eventsCutoff = now - this.config.eventRetentionMs;\n    this.events = this.events.filter(\n      (e) => e.timestamp.getTime() > eventsCutoff\n    );\n\n    // Log cleanup statistics if significant cleanup occurred\n    const metricsRemoved = initialMetricsCount - this.metrics.length;\n    const eventsRemoved = initialEventsCount - this.events.length;\n\n    if (metricsRemoved > 0 || eventsRemoved > 0) {\n      console.log(\n        `[SystemStabilityMetrics] Cleanup completed: removed ${metricsRemoved} metrics, ${eventsRemoved} events`\n      );\n    }\n  }\n\n  /**\n   * Get current stability metrics\n   */\n  public async getCurrentStabilityMetrics(): Promise<SystemStabilityMetrics | null> {\n    return this.metrics.length > 0\n      ? this.metrics[this.metrics.length - 1]\n      : null;\n  }\n\n  /**\n   * Force metrics collection (for testing)\n   */\n  public async forceMetricsCollection(): Promise<void> {\n    await this.collectStabilityMetrics();\n  }\n\n  /**\n   * Get stability metrics history\n   */\n  public getStabilityHistory(limit?: number): SystemStabilityMetrics[] {\n    if (limit) {\n      return this.metrics.slice(-limit);\n    }\n    return [...this.metrics];\n  }\n\n  /**\n   * Get stability events with filtering\n   */\n  public getStabilityEvents(\n    limit?: number,\n    filter?: {\n      type?: StabilityEventType;\n      severity?: \"low\" | \"medium\" | \"high\" | \"critical\";\n      component?: string;\n      since?: Date;\n    }\n  ): StabilityEvent[] {\n    let filteredEvents = [...this.events];\n\n    // Apply filters\n    if (filter) {\n      if (filter.type) {\n        filteredEvents = filteredEvents.filter((e) => e.type === filter.type);\n      }\n      if (filter.severity) {\n        filteredEvents = filteredEvents.filter(\n          (e) => e.severity === filter.severity\n        );\n      }\n      if (filter.component) {\n        filteredEvents = filteredEvents.filter(\n          (e) => e.component === filter.component\n        );\n      }\n      if (filter.since) {\n        filteredEvents = filteredEvents.filter(\n          (e) => e.timestamp >= filter.since!\n        );\n      }\n    }\n\n    // Sort by timestamp (newest first)\n    filteredEvents.sort(\n      (a, b) => b.timestamp.getTime() - a.timestamp.getTime()\n    );\n\n    if (limit) {\n      return filteredEvents.slice(0, limit);\n    }\n\n    return filteredEvents;\n  }\n\n  /**\n   * Get stability events (legacy method for backward compatibility)\n   */\n  public getStabilityEventsLegacy(limit?: number): StabilityEvent[] {\n    return this.getStabilityEvents(limit);\n  }\n\n  /**\n   * Get critical events in the last period\n   */\n  public getCriticalEvents(periodMs: number = 3600000): StabilityEvent[] {\n    const since = new Date(Date.now() - periodMs);\n    return this.getStabilityEvents(undefined, {\n      severity: \"critical\",\n      since,\n    });\n  }\n\n  /**\n   * Get system health score (0-1)\n   */\n  public async getSystemHealthScore(): Promise<number> {\n    const currentMetrics = await this.getCurrentStabilityMetrics();\n    if (!currentMetrics) {\n      return 0.5; // Default neutral score\n    }\n\n    // Weighted health score calculation\n    const weights = {\n      availability: 0.3,\n      reliability: 0.25,\n      performance: 0.2,\n      routing: 0.15,\n      support: 0.1,\n    };\n\n    const availabilityScore = currentMetrics.uptime.availabilityPercent / 100;\n    const reliabilityScore = currentMetrics.reliability.successRate;\n    const performanceScore =\n      (currentMetrics.performance.responseTimeStability +\n        currentMetrics.performance.throughputStability) /\n      2;\n    const routingScore = currentMetrics.routing.hybridRoutingStability;\n    const supportScore = currentMetrics.support.supportOperationsStability;\n\n    const healthScore =\n      availabilityScore * weights.availability +\n      reliabilityScore * weights.reliability +\n      performanceScore * weights.performance +\n      routingScore * weights.routing +\n      supportScore * weights.support;\n\n    return Math.max(0, Math.min(1, healthScore));\n  }\n\n  /**\n   * Get performance degradation events in the last period\n   */\n  public getPerformanceDegradationEvents(\n    periodMs: number = 3600000\n  ): StabilityEvent[] {\n    const since = new Date(Date.now() - periodMs);\n    return this.getStabilityEvents(undefined, {\n      type: \"performance_degradation\",\n      since,\n    });\n  }\n\n  /**\n   * Get recovery events in the last period\n   */\n  public getRecoveryEvents(periodMs: number = 3600000): StabilityEvent[] {\n    const since = new Date(Date.now() - periodMs);\n    return this.getStabilityEvents(undefined, {\n      type: \"recovery_completed\",\n      since,\n    });\n  }\n\n  /**\n   * Calculate system resilience score based on recovery patterns\n   */\n  public calculateResilienceScore(): number {\n    const recentFailures = this.getStabilityEvents(undefined, {\n      type: \"failure_detected\",\n      since: new Date(Date.now() - 3600000), // Last hour\n    });\n\n    const recentRecoveries = this.getRecoveryEvents(3600000);\n\n    if (recentFailures.length === 0) {\n      return 1.0; // Perfect resilience if no failures\n    }\n\n    // Calculate recovery rate\n    const recoveryRate = recentRecoveries.length / recentFailures.length;\n\n    // Calculate average recovery time\n    const recoveryTimes = recentRecoveries\n      .map((recovery) => recovery.duration || 0)\n      .filter((time) => time > 0);\n\n    const avgRecoveryTime =\n      recoveryTimes.length > 0\n        ? recoveryTimes.reduce((sum, time) => sum + time, 0) /\n          recoveryTimes.length\n        : 300000; // Default 5 minutes\n\n    // Resilience score based on recovery rate and speed\n    const recoveryRateScore = Math.min(1, recoveryRate);\n    const recoverySpeedScore = Math.max(0, 1 - avgRecoveryTime / 600000); // Normalize to 10 minutes\n\n    return recoveryRateScore * 0.7 + recoverySpeedScore * 0.3;\n  }\n\n  /**\n   * getStabilityEvents(limit?: number): StabilityEvent[] {\n    const sortedEvents = [...this.events].sort(\n      (a, b) => b.timestamp.getTime() - a.timestamp.getTime()\n    );\n    if (limit) {\n      return sortedEvents.slice(0, limit);\n    }\n    return sortedEvents;\n  }\n\n  /**\n   * Get stability summary\n   */\n  public async getStabilitySummary(): Promise<{\n    current: SystemStabilityMetrics | null;\n    isStable: boolean;\n    criticalEvents: number;\n    recentTrend: \"improving\" | \"stable\" | \"degrading\";\n    recommendations: string[];\n  }> {\n    const current = await this.getCurrentStabilityMetrics();\n    const recentEvents = this.getRecentEvents(3600000); // Last hour\n    const criticalEvents = recentEvents.filter(\n      (e) => e.severity === \"critical\"\n    ).length;\n\n    const isStable = current\n      ? current.trends.stabilityScore >=\n          this.config.thresholds.minStabilityScore &&\n        current.uptime.availabilityPercent >=\n          this.config.thresholds.minAvailabilityPercent &&\n        current.reliability.errorRate <= this.config.thresholds.maxErrorRate\n      : false;\n\n    const recommendations = this.generateIntelligentRecommendations(\n      current,\n      criticalEvents,\n      isStable\n    );\n\n    return {\n      current,\n      isStable,\n      criticalEvents,\n      recentTrend: current?.trends.stabilityTrend || \"stable\",\n      recommendations,\n    };\n  }\n\n  /**\n   * Update configuration\n   */\n  public updateConfig(config: Partial<StabilityConfig>): void {\n    this.config = { ...this.config, ...config };\n    console.log(\"[SystemStabilityMetrics] Configuration updated\");\n  }\n\n  /**\n   * Reset metrics and events\n   */\n  public reset(): void {\n    this.metrics = [];\n    this.events = [];\n    this.systemStartTime = new Date();\n    this.lastFailureTime = undefined;\n    this.lastRecoveryTime = undefined;\n    this.performanceBaseline = undefined;\n    console.log(\"[SystemStabilityMetrics] Metrics and events reset\");\n  }\n\n  /**\n   * Get monitoring status\n   */\n  public getStatus(): {\n    isMonitoring: boolean;\n    systemUptime: number;\n    metricsCount: number;\n    eventsCount: number;\n    lastMetricsCollection: Date | null;\n  } {\n    return {\n      isMonitoring: this.isMonitoring,\n      systemUptime: Date.now() - this.systemStartTime.getTime(),\n      metricsCount: this.metrics.length,\n      eventsCount: this.events.length,\n      lastMetricsCollection:\n        this.metrics.length > 0\n          ? this.metrics[this.metrics.length - 1].timestamp\n          : null,\n    };\n  }\n\n  /**\n   * Generate intelligent recommendations based on current metrics\n   */\n  private generateIntelligentRecommendations(\n    current: SystemStabilityMetrics | null,\n    criticalEvents: number,\n    isStable: boolean\n  ): string[] {\n    const recommendations: string[] = [];\n\n    if (!current) {\n      recommendations.push(\n        \"Insufficient data for recommendations - continue monitoring\"\n      );\n      return recommendations;\n    }\n\n    // Priority 1: Critical issues (immediate action required)\n    if (criticalEvents > 0) {\n      recommendations.push(\n        `🚨 CRITICAL: ${criticalEvents} critical event(s) detected - immediate investigation required`\n      );\n    }\n\n    if (current.uptime.availabilityPercent < 95.0) {\n      recommendations.push(\n        `🚨 CRITICAL: Low availability (${current.uptime.availabilityPercent.toFixed(\n          1\n        )}%) - investigate system outages`\n      );\n    }\n\n    if (current.reliability.errorRate > 0.1) {\n      recommendations.push(\n        `🚨 CRITICAL: High error rate (${(\n          current.reliability.errorRate * 100\n        ).toFixed(1)}%) - review error handling and system stability`\n      );\n    }\n\n    // Priority 2: High impact issues\n    if (current.trends.stabilityScore < 0.8) {\n      recommendations.push(\n        `⚠️ HIGH: Low stability score (${(\n          current.trends.stabilityScore * 100\n        ).toFixed(1)}%) - comprehensive system review needed`\n      );\n    }\n\n    if (current.performance.responseTimeStability < 0.7) {\n      recommendations.push(\n        `⚠️ HIGH: Poor response time stability - optimize performance bottlenecks`\n      );\n    }\n\n    if (current.routing.hybridRoutingStability < 0.8) {\n      recommendations.push(\n        `⚠️ HIGH: Routing instability detected - review hybrid routing configuration and fallback mechanisms`\n      );\n    }\n\n    // Priority 3: Medium impact issues\n    if (\n      current.uptime.availabilityPercent < 99.0 &&\n      current.uptime.availabilityPercent >= 95.0\n    ) {\n      recommendations.push(\n        `⚠️ MEDIUM: Availability below target (${current.uptime.availabilityPercent.toFixed(\n          1\n        )}%) - improve system resilience`\n      );\n    }\n\n    if (\n      current.reliability.errorRate > 0.02 &&\n      current.reliability.errorRate <= 0.1\n    ) {\n      recommendations.push(\n        `⚠️ MEDIUM: Elevated error rate (${(\n          current.reliability.errorRate * 100\n        ).toFixed(1)}%) - address error sources`\n      );\n    }\n\n    if (current.performance.latencyVariance > 0.3) {\n      recommendations.push(\n        `⚠️ MEDIUM: High latency variance - stabilize response times`\n      );\n    }\n\n    if (current.performance.performanceDegradationEvents > 2) {\n      recommendations.push(\n        `⚠️ MEDIUM: Multiple performance degradation events (${current.performance.performanceDegradationEvents}) - investigate performance patterns`\n      );\n    }\n\n    // Priority 4: Low impact optimizations\n    if (\n      current.trends.stabilityScore < 0.95 &&\n      current.trends.stabilityScore >= 0.8\n    ) {\n      recommendations.push(\n        `💡 OPTIMIZE: Stability score could be improved (${(\n          current.trends.stabilityScore * 100\n        ).toFixed(1)}%) - fine-tune system parameters`\n      );\n    }\n\n    if (current.routing.fallbackActivations > 5) {\n      recommendations.push(\n        `💡 OPTIMIZE: Frequent fallback activations (${current.routing.fallbackActivations}) - optimize primary routing paths`\n      );\n    }\n\n    if (current.support.supportOperationFailures > 1) {\n      recommendations.push(\n        `💡 OPTIMIZE: Support operation failures detected - review support system configuration`\n      );\n    }\n\n    // Trend-based recommendations\n    if (\n      current.trends.stabilityTrend === \"degrading\" &&\n      current.trends.trendConfidence > 0.7\n    ) {\n      recommendations.push(\n        `📉 TREND: System stability is degrading with high confidence - proactive intervention recommended`\n      );\n    } else if (\n      current.trends.stabilityTrend === \"improving\" &&\n      current.trends.trendConfidence > 0.7\n    ) {\n      recommendations.push(\n        `📈 POSITIVE: System stability is improving - continue current optimization efforts`\n      );\n    }\n\n    // MTTR/MTBF recommendations\n    if (current.uptime.mttr > 300000) {\n      // > 5 minutes\n      recommendations.push(\n        `⏱️ RECOVERY: Mean Time To Recovery is high (${(\n          current.uptime.mttr / 60000\n        ).toFixed(1)} min) - improve incident response procedures`\n      );\n    }\n\n    if (current.uptime.mtbf < 3600000) {\n      // < 1 hour\n      recommendations.push(\n        `🔧 RELIABILITY: Mean Time Between Failures is low (${(\n          current.uptime.mtbf / 60000\n        ).toFixed(1)} min) - focus on preventive measures`\n      );\n    }\n\n    // If system is stable but no specific recommendations, provide maintenance advice\n    if (recommendations.length === 0 && isStable) {\n      recommendations.push(\n        `✅ MAINTENANCE: System is stable - continue regular monitoring and preventive maintenance`\n      );\n    } else if (recommendations.length === 0 && !isStable) {\n      recommendations.push(\n        `🔍 INVESTIGATION: System instability detected but cause unclear - enable detailed logging and monitoring`\n      );\n    }\n\n    // Limit recommendations to avoid overwhelming users\n    return recommendations.slice(0, 8);\n  }\n\n  /**\n   * Get enhanced stability report with additional insights\n   */\n  public async getEnhancedStabilityReport(): Promise<{\n    summary: any;\n    healthScore: number;\n    resilienceScore: number;\n    criticalEvents: StabilityEvent[];\n    performanceTrends: {\n      responseTimeStability: number[];\n      throughputStability: number[];\n      errorRates: number[];\n    };\n    recommendations: string[];\n    alertLevel: \"green\" | \"yellow\" | \"red\";\n  }> {\n    const summary = await this.getStabilitySummary();\n    const healthScore = await this.getSystemHealthScore();\n    const resilienceScore = this.calculateResilienceScore();\n    const criticalEvents = this.getCriticalEvents();\n\n    // Get performance trends from recent metrics\n    const recentMetrics = this.getStabilityHistory(10);\n    const performanceTrends = {\n      responseTimeStability: recentMetrics.map(\n        (m) => m.performance.responseTimeStability\n      ),\n      throughputStability: recentMetrics.map(\n        (m) => m.performance.throughputStability\n      ),\n      errorRates: recentMetrics.map((m) => m.reliability.errorRate),\n    };\n\n    // Determine alert level\n    let alertLevel: \"green\" | \"yellow\" | \"red\" = \"green\";\n    if (healthScore < 0.7 || criticalEvents.length > 3) {\n      alertLevel = \"red\";\n    } else if (healthScore < 0.85 || criticalEvents.length > 1) {\n      alertLevel = \"yellow\";\n    }\n\n    return {\n      summary,\n      healthScore,\n      resilienceScore,\n      criticalEvents,\n      performanceTrends,\n      recommendations: summary.recommendations,\n      alertLevel,\n    };\n  }\n\n  /**\n   * Export stability data for external analysis\n   */\n  public exportStabilityData(): {\n    metrics: SystemStabilityMetrics[];\n    events: StabilityEvent[];\n    config: StabilityConfig;\n    exportTimestamp: Date;\n  } {\n    return {\n      metrics: [...this.metrics],\n      events: [...this.events],\n      config: { ...this.config },\n      exportTimestamp: new Date(),\n    };\n  }\n\n  /**\n   * Import stability data (for testing or data migration)\n   */\n  public importStabilityData(data: {\n    metrics?: SystemStabilityMetrics[];\n    events?: StabilityEvent[];\n  }): void {\n    if (data.metrics) {\n      this.metrics = [...data.metrics];\n    }\n    if (data.events) {\n      this.events = [...data.events];\n    }\n    console.log(\n      `[SystemStabilityMetrics] Imported ${\n        data.metrics?.length || 0\n      } metrics and ${data.events?.length || 0} events`\n    );\n  }\n\n  /**\n   * Cleanup resources\n   */\n  public async cleanup(): Promise<void> {\n    await this.stopMonitoring();\n    this.reset();\n    console.log(\"[SystemStabilityMetrics] Cleanup completed\");\n  }\n}\n\nexport default SystemStabilityMetrics;\n"],"version":3}
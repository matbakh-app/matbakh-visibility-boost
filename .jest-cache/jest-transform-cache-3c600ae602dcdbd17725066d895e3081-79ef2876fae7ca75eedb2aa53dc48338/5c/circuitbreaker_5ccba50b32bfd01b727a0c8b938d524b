1b0c726eefbe15d6c1b09a4a7f10657a
"use strict";

/**
 * Circuit Breaker Pattern Implementation
 *
 * Implements:
 * - Circuit breaker for provider resilience
 * - Automatic failure detection and recovery
 * - Configurable thresholds and timeouts
 * - Health check integration
 * - Fallback mechanism coordination
 */
/* istanbul ignore next */
function cov_27w6drr0zg() {
  var path = "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/circuit-breaker.ts";
  var hash = "47879b0ca69fbc2d160eb8d0f3b31e46eaf0bf2d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/circuit-breaker.ts",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 62
        }
      },
      "1": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 13,
          column: 63
        }
      },
      "2": {
        start: {
          line: 14,
          column: 16
        },
        end: {
          line: 14,
          column: 32
        }
      },
      "3": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 32
        }
      },
      "4": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 43
        }
      },
      "5": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 168
        }
      },
      "6": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 35
        }
      },
      "7": {
        start: {
          line: 29,
          column: 22
        },
        end: {
          line: 29,
          column: 45
        }
      },
      "8": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 38
        }
      },
      "9": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 67,
          column: 11
        }
      },
      "10": {
        start: {
          line: 37,
          column: 26
        },
        end: {
          line: 37,
          column: 49
        }
      },
      "11": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 47,
          column: 13
        }
      },
      "12": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 46,
          column: 17
        }
      },
      "13": {
        start: {
          line: 41,
          column: 20
        },
        end: {
          line: 41,
          column: 140
        }
      },
      "14": {
        start: {
          line: 45,
          column: 20
        },
        end: {
          line: 45,
          column: 56
        }
      },
      "15": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 52,
          column: 13
        }
      },
      "16": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 112
        }
      },
      "17": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 66,
          column: 13
        }
      },
      "18": {
        start: {
          line: 55,
          column: 34
        },
        end: {
          line: 55,
          column: 44
        }
      },
      "19": {
        start: {
          line: 56,
          column: 31
        },
        end: {
          line: 56,
          column: 48
        }
      },
      "20": {
        start: {
          line: 57,
          column: 32
        },
        end: {
          line: 57,
          column: 54
        }
      },
      "21": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 59,
          column: 54
        }
      },
      "22": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 30
        }
      },
      "23": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 52
        }
      },
      "24": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 65,
          column: 28
        }
      },
      "25": {
        start: {
          line: 73,
          column: 22
        },
        end: {
          line: 73,
          column: 45
        }
      },
      "26": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 35
        }
      },
      "27": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 30
        }
      },
      "28": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 43
        }
      },
      "29": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 31
        }
      },
      "30": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "31": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 37
        }
      },
      "32": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 85,
          column: 13
        }
      },
      "33": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 84,
          column: 50
        }
      },
      "34": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 42
        }
      },
      "35": {
        start: {
          line: 93,
          column: 22
        },
        end: {
          line: 93,
          column: 45
        }
      },
      "36": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 29
        }
      },
      "37": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 30
        }
      },
      "38": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 43
        }
      },
      "39": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "40": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 44
        }
      },
      "41": {
        start: {
          line: 102,
          column: 13
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "42": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 44
        }
      },
      "43": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 42
        }
      },
      "44": {
        start: {
          line: 112,
          column: 22
        },
        end: {
          line: 112,
          column: 45
        }
      },
      "45": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 29
        }
      },
      "46": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 73
        }
      },
      "47": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 35
        }
      },
      "48": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 116,
          column: 124
        }
      },
      "49": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 40
        }
      },
      "50": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 42
        }
      },
      "51": {
        start: {
          line: 125,
          column: 22
        },
        end: {
          line: 125,
          column: 45
        }
      },
      "52": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 126,
          column: 34
        }
      },
      "53": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 35
        }
      },
      "54": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 91
        }
      },
      "55": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 42
        }
      },
      "56": {
        start: {
          line: 135,
          column: 22
        },
        end: {
          line: 135,
          column: 45
        }
      },
      "57": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 31
        }
      },
      "58": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 31
        }
      },
      "59": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 138,
          column: 35
        }
      },
      "60": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 139,
          column: 72
        }
      },
      "61": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 141,
          column: 39
        }
      },
      "62": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 142,
          column: 42
        }
      },
      "63": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 39
        }
      },
      "64": {
        start: {
          line: 149,
          column: 22
        },
        end: {
          line: 160,
          column: 44
        }
      },
      "65": {
        start: {
          line: 149,
          column: 40
        },
        end: {
          line: 160,
          column: 10
        }
      },
      "66": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 159,
          column: 13
        }
      },
      "67": {
        start: {
          line: 151,
          column: 32
        },
        end: {
          line: 151,
          column: 71
        }
      },
      "68": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 155,
          column: 17
        }
      },
      "69": {
        start: {
          line: 153,
          column: 20
        },
        end: {
          line: 153,
          column: 110
        }
      },
      "70": {
        start: {
          line: 154,
          column: 20
        },
        end: {
          line: 154,
          column: 56
        }
      },
      "71": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 158,
          column: 85
        }
      },
      "72": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 52
        }
      },
      "73": {
        start: {
          line: 167,
          column: 22
        },
        end: {
          line: 167,
          column: 58
        }
      },
      "74": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "75": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 33
        }
      },
      "76": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 52
        }
      },
      "77": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 184,
          column: 11
        }
      },
      "78": {
        start: {
          line: 180,
          column: 26
        },
        end: {
          line: 180,
          column: 49
        }
      },
      "79": {
        start: {
          line: 181,
          column: 41
        },
        end: {
          line: 181,
          column: 75
        }
      },
      "80": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 70
        }
      },
      "81": {
        start: {
          line: 190,
          column: 20
        },
        end: {
          line: 190,
          column: 45
        }
      },
      "82": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "83": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 202,
          column: 14
        }
      },
      "84": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 45
        }
      },
      "85": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 205,
          column: 21
        }
      },
      "86": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 211,
          column: 41
        }
      },
      "87": {
        start: {
          line: 217,
          column: 22
        },
        end: {
          line: 217,
          column: 45
        }
      },
      "88": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "89": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 24
        }
      },
      "90": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "91": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 73
        }
      },
      "92": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "93": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 55
        }
      },
      "94": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 227,
          column: 21
        }
      },
      "95": {
        start: {
          line: 233,
          column: 22
        },
        end: {
          line: 233,
          column: 45
        }
      },
      "96": {
        start: {
          line: 234,
          column: 28
        },
        end: {
          line: 236,
          column: 15
        }
      },
      "97": {
        start: {
          line: 237,
          column: 23
        },
        end: {
          line: 239,
          column: 15
        }
      },
      "98": {
        start: {
          line: 240,
          column: 32
        },
        end: {
          line: 240,
          column: 95
        }
      },
      "99": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 251,
          column: 10
        }
      },
      "100": {
        start: {
          line: 257,
          column: 26
        },
        end: {
          line: 257,
          column: 55
        }
      },
      "101": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 258,
          column: 70
        }
      },
      "102": {
        start: {
          line: 258,
          column: 43
        },
        end: {
          line: 258,
          column: 68
        }
      },
      "103": {
        start: {
          line: 264,
          column: 26
        },
        end: {
          line: 264,
          column: 55
        }
      },
      "104": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 265,
          column: 74
        }
      },
      "105": {
        start: {
          line: 265,
          column: 46
        },
        end: {
          line: 265,
          column: 72
        }
      },
      "106": {
        start: {
          line: 271,
          column: 22
        },
        end: {
          line: 271,
          column: 45
        }
      },
      "107": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 272,
          column: 29
        }
      },
      "108": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 273,
          column: 73
        }
      },
      "109": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 274,
          column: 78
        }
      },
      "110": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 275,
          column: 40
        }
      },
      "111": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 42
        }
      },
      "112": {
        start: {
          line: 282,
          column: 22
        },
        end: {
          line: 282,
          column: 45
        }
      },
      "113": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 283,
          column: 31
        }
      },
      "114": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 284,
          column: 31
        }
      },
      "115": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 285,
          column: 35
        }
      },
      "116": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 286,
          column: 78
        }
      },
      "117": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 287,
          column: 39
        }
      },
      "118": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 288,
          column: 42
        }
      },
      "119": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 294,
          column: 39
        }
      },
      "120": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 295,
          column: 37
        }
      },
      "121": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 296,
          column: 71
        }
      },
      "122": {
        start: {
          line: 302,
          column: 26
        },
        end: {
          line: 302,
          column: 55
        }
      },
      "123": {
        start: {
          line: 303,
          column: 8
        },
        end: {
          line: 303,
          column: 62
        }
      },
      "124": {
        start: {
          line: 303,
          column: 40
        },
        end: {
          line: 303,
          column: 60
        }
      },
      "125": {
        start: {
          line: 309,
          column: 26
        },
        end: {
          line: 309,
          column: 55
        }
      },
      "126": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 310,
          column: 65
        }
      },
      "127": {
        start: {
          line: 310,
          column: 40
        },
        end: {
          line: 310,
          column: 63
        }
      },
      "128": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 319,
          column: 11
        }
      },
      "129": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 318,
          column: 33
        }
      },
      "130": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 320,
          column: 39
        }
      },
      "131": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 321,
          column: 28
        }
      },
      "132": {
        start: {
          line: 324,
          column: 0
        },
        end: {
          line: 324,
          column: 40
        }
      },
      "133": {
        start: {
          line: 328,
          column: 29
        },
        end: {
          line: 330,
          column: 1
        }
      },
      "134": {
        start: {
          line: 329,
          column: 4
        },
        end: {
          line: 329,
          column: 38
        }
      },
      "135": {
        start: {
          line: 331,
          column: 0
        },
        end: {
          line: 331,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 29
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 19
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 21
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 28
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 33
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 35
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 36,
            column: 55
          },
          end: {
            line: 36,
            column: 56
          }
        },
        loc: {
          start: {
            line: 36,
            column: 68
          },
          end: {
            line: 67,
            column: 9
          }
        },
        line: 36
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        },
        loc: {
          start: {
            line: 72,
            column: 37
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 72
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        },
        loc: {
          start: {
            line: 92,
            column: 35
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 92
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 111,
            column: 5
          }
        },
        loc: {
          start: {
            line: 111,
            column: 31
          },
          end: {
            line: 120,
            column: 5
          }
        },
        line: 111
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        },
        loc: {
          start: {
            line: 124,
            column: 35
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 124
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 33
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 134
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 147,
            column: 4
          },
          end: {
            line: 147,
            column: 5
          }
        },
        loc: {
          start: {
            line: 147,
            column: 31
          },
          end: {
            line: 162,
            column: 5
          }
        },
        line: 147
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 149,
            column: 34
          },
          end: {
            line: 149,
            column: 35
          }
        },
        loc: {
          start: {
            line: 149,
            column: 40
          },
          end: {
            line: 160,
            column: 10
          }
        },
        line: 149
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 149,
            column: 80
          },
          end: {
            line: 149,
            column: 81
          }
        },
        loc: {
          start: {
            line: 149,
            column: 93
          },
          end: {
            line: 160,
            column: 9
          }
        },
        line: 149
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 166,
            column: 4
          },
          end: {
            line: 166,
            column: 5
          }
        },
        loc: {
          start: {
            line: 166,
            column: 30
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 166
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 33
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 176
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 177,
            column: 55
          },
          end: {
            line: 177,
            column: 56
          }
        },
        loc: {
          start: {
            line: 177,
            column: 68
          },
          end: {
            line: 184,
            column: 9
          }
        },
        line: 177
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 189,
            column: 5
          }
        },
        loc: {
          start: {
            line: 189,
            column: 23
          },
          end: {
            line: 206,
            column: 5
          }
        },
        line: 189
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 210,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        },
        loc: {
          start: {
            line: 210,
            column: 33
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 210
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 216,
            column: 4
          },
          end: {
            line: 216,
            column: 5
          }
        },
        loc: {
          start: {
            line: 216,
            column: 26
          },
          end: {
            line: 228,
            column: 5
          }
        },
        line: 216
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 232,
            column: 4
          },
          end: {
            line: 232,
            column: 5
          }
        },
        loc: {
          start: {
            line: 232,
            column: 25
          },
          end: {
            line: 252,
            column: 5
          }
        },
        line: 232
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 256,
            column: 4
          },
          end: {
            line: 256,
            column: 5
          }
        },
        loc: {
          start: {
            line: 256,
            column: 20
          },
          end: {
            line: 259,
            column: 5
          }
        },
        line: 256
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 258,
            column: 29
          },
          end: {
            line: 258,
            column: 30
          }
        },
        loc: {
          start: {
            line: 258,
            column: 43
          },
          end: {
            line: 258,
            column: 68
          }
        },
        line: 258
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 263,
            column: 4
          },
          end: {
            line: 263,
            column: 5
          }
        },
        loc: {
          start: {
            line: 263,
            column: 28
          },
          end: {
            line: 266,
            column: 5
          }
        },
        line: 263
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 265,
            column: 32
          },
          end: {
            line: 265,
            column: 33
          }
        },
        loc: {
          start: {
            line: 265,
            column: 46
          },
          end: {
            line: 265,
            column: 72
          }
        },
        line: 265
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 270,
            column: 4
          },
          end: {
            line: 270,
            column: 5
          }
        },
        loc: {
          start: {
            line: 270,
            column: 24
          },
          end: {
            line: 277,
            column: 5
          }
        },
        line: 270
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 281,
            column: 4
          },
          end: {
            line: 281,
            column: 5
          }
        },
        loc: {
          start: {
            line: 281,
            column: 25
          },
          end: {
            line: 289,
            column: 5
          }
        },
        line: 281
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 293,
            column: 4
          },
          end: {
            line: 293,
            column: 5
          }
        },
        loc: {
          start: {
            line: 293,
            column: 20
          },
          end: {
            line: 297,
            column: 5
          }
        },
        line: 293
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 301,
            column: 4
          },
          end: {
            line: 301,
            column: 5
          }
        },
        loc: {
          start: {
            line: 301,
            column: 15
          },
          end: {
            line: 304,
            column: 5
          }
        },
        line: 301
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 303,
            column: 26
          },
          end: {
            line: 303,
            column: 27
          }
        },
        loc: {
          start: {
            line: 303,
            column: 40
          },
          end: {
            line: 303,
            column: 60
          }
        },
        line: 303
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 308,
            column: 4
          },
          end: {
            line: 308,
            column: 5
          }
        },
        loc: {
          start: {
            line: 308,
            column: 26
          },
          end: {
            line: 311,
            column: 5
          }
        },
        line: 308
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 310,
            column: 26
          },
          end: {
            line: 310,
            column: 27
          }
        },
        loc: {
          start: {
            line: 310,
            column: 40
          },
          end: {
            line: 310,
            column: 63
          }
        },
        line: 310
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 315,
            column: 4
          },
          end: {
            line: 315,
            column: 5
          }
        },
        loc: {
          start: {
            line: 315,
            column: 14
          },
          end: {
            line: 322,
            column: 5
          }
        },
        line: 315
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 317,
            column: 39
          },
          end: {
            line: 317,
            column: 40
          }
        },
        loc: {
          start: {
            line: 317,
            column: 50
          },
          end: {
            line: 319,
            column: 9
          }
        },
        line: 317
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 328,
            column: 29
          },
          end: {
            line: 328,
            column: 30
          }
        },
        loc: {
          start: {
            line: 328,
            column: 41
          },
          end: {
            line: 330,
            column: 1
          }
        },
        line: 328
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 16
          },
          end: {
            line: 19,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 19,
            column: 25
          },
          end: {
            line: 19,
            column: 27
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 47,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 47,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "2": {
        loc: {
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 46,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 46,
            column: 17
          }
        }, {
          start: {
            line: 43,
            column: 21
          },
          end: {
            line: 46,
            column: 17
          }
        }],
        line: 40
      },
      "3": {
        loc: {
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "4": {
        loc: {
          start: {
            line: 49,
            column: 16
          },
          end: {
            line: 50,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 16
          },
          end: {
            line: 49,
            column: 43
          }
        }, {
          start: {
            line: 50,
            column: 16
          },
          end: {
            line: 50,
            column: 70
          }
        }],
        line: 49
      },
      "5": {
        loc: {
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "6": {
        loc: {
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 85,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 85,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "7": {
        loc: {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        }, {
          start: {
            line: 102,
            column: 13
          },
          end: {
            line: 105,
            column: 9
          }
        }],
        line: 98
      },
      "8": {
        loc: {
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 99,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 98,
            column: 36
          }
        }, {
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 99,
            column: 62
          }
        }],
        line: 98
      },
      "9": {
        loc: {
          start: {
            line: 102,
            column: 13
          },
          end: {
            line: 105,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 13
          },
          end: {
            line: 105,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "10": {
        loc: {
          start: {
            line: 152,
            column: 16
          },
          end: {
            line: 155,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 16
          },
          end: {
            line: 155,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "11": {
        loc: {
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 168
      },
      "12": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 204,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 204,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "13": {
        loc: {
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "14": {
        loc: {
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 223,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "15": {
        loc: {
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "16": {
        loc: {
          start: {
            line: 234,
            column: 28
          },
          end: {
            line: 236,
            column: 15
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 235,
            column: 14
          },
          end: {
            line: 235,
            column: 84
          }
        }, {
          start: {
            line: 236,
            column: 14
          },
          end: {
            line: 236,
            column: 15
          }
        }],
        line: 234
      },
      "17": {
        loc: {
          start: {
            line: 237,
            column: 23
          },
          end: {
            line: 239,
            column: 15
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 238,
            column: 14
          },
          end: {
            line: 238,
            column: 60
          }
        }, {
          start: {
            line: 239,
            column: 14
          },
          end: {
            line: 239,
            column: 15
          }
        }],
        line: 237
      },
      "18": {
        loc: {
          start: {
            line: 240,
            column: 32
          },
          end: {
            line: 240,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 240,
            column: 57
          },
          end: {
            line: 240,
            column: 91
          }
        }, {
          start: {
            line: 240,
            column: 94
          },
          end: {
            line: 240,
            column: 95
          }
        }],
        line: 240
      },
      "19": {
        loc: {
          start: {
            line: 246,
            column: 25
          },
          end: {
            line: 246,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 246,
            column: 53
          },
          end: {
            line: 246,
            column: 84
          }
        }, {
          start: {
            line: 246,
            column: 87
          },
          end: {
            line: 246,
            column: 91
          }
        }],
        line: 246
      },
      "20": {
        loc: {
          start: {
            line: 247,
            column: 25
          },
          end: {
            line: 247,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 247,
            column: 53
          },
          end: {
            line: 247,
            column: 84
          }
        }, {
          start: {
            line: 247,
            column: 87
          },
          end: {
            line: 247,
            column: 91
          }
        }],
        line: 247
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/circuit-breaker.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/circuit-breaker.ts"],
      sourcesContent: ["/**\n * Circuit Breaker Pattern Implementation\n *\n * Implements:\n * - Circuit breaker for provider resilience\n * - Automatic failure detection and recovery\n * - Configurable thresholds and timeouts\n * - Health check integration\n * - Fallback mechanism coordination\n */\n\nimport { Provider } from \"./types\";\n\nexport interface CircuitBreakerConfig {\n  failureThreshold: number;\n  recoveryTimeout: number;\n  monitoringWindow: number;\n  halfOpenMaxCalls: number;\n  healthCheckInterval: number;\n}\n\nexport interface CircuitBreakerState {\n  provider: Provider;\n  state: \"closed\" | \"open\" | \"half-open\";\n  failureCount: number;\n  lastFailureTime: number;\n  lastSuccessTime: number;\n  nextAttemptTime: number;\n  totalRequests: number;\n  successfulRequests: number;\n  halfOpenAttempts: number;\n}\n\nexport interface CircuitBreakerMetrics {\n  provider: Provider;\n  state: \"closed\" | \"open\" | \"half-open\";\n  failureRate: number;\n  uptime: number;\n  lastFailure: Date | null;\n  lastSuccess: Date | null;\n  totalFailures: number;\n  totalSuccesses: number;\n  circuitOpenTime: number;\n}\n\n/**\n * Circuit Breaker for Provider Resilience\n */\nexport class CircuitBreaker {\n  private config: CircuitBreakerConfig;\n  private states: Map<Provider, CircuitBreakerState> = new Map();\n  private healthCheckTimers: Map<Provider, NodeJS.Timeout> = new Map();\n\n  constructor(config: Partial<CircuitBreakerConfig> = {}) {\n    this.config = {\n      failureThreshold: 5, // Open circuit after 5 failures\n      recoveryTimeout: 60000, // 1 minute recovery timeout\n      monitoringWindow: 300000, // 5 minute monitoring window\n      halfOpenMaxCalls: 3, // Max calls in half-open state\n      healthCheckInterval: 30000, // 30 second health check interval\n      ...config,\n    };\n\n    this.initializeProviders();\n  }\n\n  /**\n   * Check if circuit breaker is open for a provider\n   */\n  isOpen(provider: Provider): boolean {\n    const state = this.getState(provider);\n    return state.state === \"open\";\n  }\n\n  /**\n   * Execute request through circuit breaker\n   */\n  async execute<T>(\n    provider: Provider,\n    operation: () => Promise<T>\n  ): Promise<T> {\n    const state = this.getState(provider);\n\n    // Check if circuit is open\n    if (state.state === \"open\") {\n      if (Date.now() < state.nextAttemptTime) {\n        throw new Error(\n          `Circuit breaker is OPEN for provider ${provider}. Next attempt at ${new Date(\n            state.nextAttemptTime\n          )}`\n        );\n      } else {\n        // Transition to half-open\n        this.transitionToHalfOpen(provider);\n      }\n    }\n\n    // Check half-open limits\n    if (\n      state.state === \"half-open\" &&\n      state.halfOpenAttempts >= this.config.halfOpenMaxCalls\n    ) {\n      throw new Error(\n        `Circuit breaker is HALF-OPEN for provider ${provider}. Max attempts reached.`\n      );\n    }\n\n    try {\n      // Execute the operation\n      const startTime = Date.now();\n      const result = await operation();\n      const latency = Date.now() - startTime;\n\n      // Record success\n      this.recordSuccess(provider, latency);\n\n      return result;\n    } catch (error) {\n      // Record failure\n      this.recordFailure(provider, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Record successful operation\n   */\n  private recordSuccess(provider: Provider, latency: number): void {\n    const state = this.getState(provider);\n\n    state.successfulRequests++;\n    state.totalRequests++;\n    state.lastSuccessTime = Date.now();\n\n    // Reset failure count on success\n    state.failureCount = 0;\n\n    // Transition from half-open to closed if successful\n    if (state.state === \"half-open\") {\n      state.halfOpenAttempts++;\n\n      // If we've had enough successful attempts, close the circuit\n      if (state.halfOpenAttempts >= this.config.halfOpenMaxCalls) {\n        this.transitionToClosed(provider);\n      }\n    }\n\n    this.updateState(provider, state);\n  }\n\n  /**\n   * Record failed operation\n   */\n  private recordFailure(provider: Provider, error: any): void {\n    const state = this.getState(provider);\n\n    state.failureCount++;\n    state.totalRequests++;\n    state.lastFailureTime = Date.now();\n\n    // Check if we should open the circuit\n    if (\n      state.state === \"closed\" &&\n      state.failureCount >= this.config.failureThreshold\n    ) {\n      this.transitionToOpen(provider);\n    } else if (state.state === \"half-open\") {\n      // Any failure in half-open state should open the circuit\n      this.transitionToOpen(provider);\n    }\n\n    this.updateState(provider, state);\n  }\n\n  /**\n   * Transition circuit to OPEN state\n   */\n  private transitionToOpen(provider: Provider): void {\n    const state = this.getState(provider);\n\n    state.state = \"open\";\n    state.nextAttemptTime = Date.now() + this.config.recoveryTimeout;\n    state.halfOpenAttempts = 0;\n\n    console.warn(\n      `Circuit breaker OPENED for provider ${provider}. Next attempt at ${new Date(\n        state.nextAttemptTime\n      )}`\n    );\n\n    // Start health check timer\n    this.startHealthCheck(provider);\n\n    this.updateState(provider, state);\n  }\n\n  /**\n   * Transition circuit to HALF-OPEN state\n   */\n  private transitionToHalfOpen(provider: Provider): void {\n    const state = this.getState(provider);\n\n    state.state = \"half-open\";\n    state.halfOpenAttempts = 0;\n\n    console.info(\n      `Circuit breaker transitioned to HALF-OPEN for provider ${provider}`\n    );\n\n    this.updateState(provider, state);\n  }\n\n  /**\n   * Transition circuit to CLOSED state\n   */\n  private transitionToClosed(provider: Provider): void {\n    const state = this.getState(provider);\n\n    state.state = \"closed\";\n    state.failureCount = 0;\n    state.halfOpenAttempts = 0;\n\n    console.info(`Circuit breaker CLOSED for provider ${provider}`);\n\n    // Stop health check timer\n    this.stopHealthCheck(provider);\n\n    this.updateState(provider, state);\n  }\n\n  /**\n   * Start health check for provider\n   */\n  private startHealthCheck(provider: Provider): void {\n    this.stopHealthCheck(provider); // Clear any existing timer\n\n    const timer = setInterval(async () => {\n      try {\n        const healthy = await this.performHealthCheck(provider);\n\n        if (healthy) {\n          console.info(\n            `Health check passed for provider ${provider}. Transitioning to HALF-OPEN.`\n          );\n          this.transitionToHalfOpen(provider);\n        }\n      } catch (error) {\n        console.warn(`Health check failed for provider ${provider}:`, error);\n      }\n    }, this.config.healthCheckInterval);\n\n    this.healthCheckTimers.set(provider, timer);\n  }\n\n  /**\n   * Stop health check for provider\n   */\n  private stopHealthCheck(provider: Provider): void {\n    const timer = this.healthCheckTimers.get(provider);\n    if (timer) {\n      clearInterval(timer);\n      this.healthCheckTimers.delete(provider);\n    }\n  }\n\n  /**\n   * Perform health check for provider\n   */\n  private async performHealthCheck(provider: Provider): Promise<boolean> {\n    // In production, this would make actual health check requests\n    // For now, simulate health check\n\n    const state = this.getState(provider);\n    const timeSinceLastFailure = Date.now() - state.lastFailureTime;\n\n    // Simple heuristic: if it's been long enough since last failure, consider healthy\n    return timeSinceLastFailure > this.config.recoveryTimeout;\n  }\n\n  /**\n   * Get circuit breaker state for provider\n   */\n  private getState(provider: Provider): CircuitBreakerState {\n    let state = this.states.get(provider);\n\n    if (!state) {\n      state = {\n        provider,\n        state: \"closed\",\n        failureCount: 0,\n        lastFailureTime: 0,\n        lastSuccessTime: Date.now(),\n        nextAttemptTime: 0,\n        totalRequests: 0,\n        successfulRequests: 0,\n        halfOpenAttempts: 0,\n      };\n\n      this.states.set(provider, state);\n    }\n\n    return state;\n  }\n\n  /**\n   * Update state for provider\n   */\n  private updateState(provider: Provider, state: CircuitBreakerState): void {\n    this.states.set(provider, state);\n  }\n\n  /**\n   * Check if provider is available\n   */\n  isAvailable(provider: Provider): boolean {\n    const state = this.getState(provider);\n\n    if (state.state === \"closed\") {\n      return true;\n    }\n\n    if (state.state === \"half-open\") {\n      return state.halfOpenAttempts < this.config.halfOpenMaxCalls;\n    }\n\n    if (state.state === \"open\") {\n      return Date.now() >= state.nextAttemptTime;\n    }\n\n    return false;\n  }\n\n  /**\n   * Get circuit breaker metrics for provider\n   */\n  getMetrics(provider: Provider): CircuitBreakerMetrics {\n    const state = this.getState(provider);\n\n    const failureRate =\n      state.totalRequests > 0\n        ? (state.totalRequests - state.successfulRequests) / state.totalRequests\n        : 0;\n\n    const uptime =\n      state.totalRequests > 0\n        ? state.successfulRequests / state.totalRequests\n        : 1;\n\n    const circuitOpenTime =\n      state.state === \"open\" ? Date.now() - state.lastFailureTime : 0;\n\n    return {\n      provider,\n      state: state.state,\n      failureRate,\n      uptime,\n      lastFailure:\n        state.lastFailureTime > 0 ? new Date(state.lastFailureTime) : null,\n      lastSuccess:\n        state.lastSuccessTime > 0 ? new Date(state.lastSuccessTime) : null,\n      totalFailures: state.totalRequests - state.successfulRequests,\n      totalSuccesses: state.successfulRequests,\n      circuitOpenTime,\n    };\n  }\n\n  /**\n   * Get all circuit breaker metrics\n   */\n  getAllMetrics(): CircuitBreakerMetrics[] {\n    const providers: Provider[] = [\"bedrock\", \"google\", \"meta\"];\n    return providers.map((provider) => this.getMetrics(provider));\n  }\n\n  /**\n   * Get available providers\n   */\n  getAvailableProviders(): Provider[] {\n    const providers: Provider[] = [\"bedrock\", \"google\", \"meta\"];\n    return providers.filter((provider) => this.isAvailable(provider));\n  }\n\n  /**\n   * Force open circuit for provider (for testing/maintenance)\n   */\n  forceOpen(provider: Provider): void {\n    const state = this.getState(provider);\n    state.state = \"open\";\n    state.nextAttemptTime = Date.now() + this.config.recoveryTimeout;\n\n    console.warn(`Circuit breaker FORCE OPENED for provider ${provider}`);\n\n    this.startHealthCheck(provider);\n    this.updateState(provider, state);\n  }\n\n  /**\n   * Force close circuit for provider (for testing/maintenance)\n   */\n  forceClose(provider: Provider): void {\n    const state = this.getState(provider);\n    state.state = \"closed\";\n    state.failureCount = 0;\n    state.halfOpenAttempts = 0;\n\n    console.info(`Circuit breaker FORCE CLOSED for provider ${provider}`);\n\n    this.stopHealthCheck(provider);\n    this.updateState(provider, state);\n  }\n\n  /**\n   * Reset circuit breaker for provider\n   */\n  reset(provider: Provider): void {\n    this.stopHealthCheck(provider);\n    this.states.delete(provider);\n\n    console.info(`Circuit breaker RESET for provider ${provider}`);\n  }\n\n  /**\n   * Reset all circuit breakers\n   */\n  resetAll(): void {\n    const providers: Provider[] = [\"bedrock\", \"google\", \"meta\"];\n    providers.forEach((provider) => this.reset(provider));\n  }\n\n  /**\n   * Initialize providers\n   */\n  private initializeProviders(): void {\n    const providers: Provider[] = [\"bedrock\", \"google\", \"meta\"];\n    providers.forEach((provider) => this.getState(provider));\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    // Clear all health check timers\n    this.healthCheckTimers.forEach((timer) => {\n      clearInterval(timer);\n    });\n\n    this.healthCheckTimers.clear();\n    this.states.clear();\n  }\n}\n\n/**\n * Factory function for creating circuit breaker\n */\nexport const createCircuitBreaker = (\n  config?: Partial<CircuitBreakerConfig>\n): CircuitBreaker => {\n  return new CircuitBreaker(config);\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "47879b0ca69fbc2d160eb8d0f3b31e46eaf0bf2d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_27w6drr0zg = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_27w6drr0zg();
cov_27w6drr0zg().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_27w6drr0zg().s[1]++;
exports.createCircuitBreaker = exports.CircuitBreaker = void 0;
const tslib_1 =
/* istanbul ignore next */
(cov_27w6drr0zg().s[2]++, require("tslib"));
/**
 * Circuit Breaker for Provider Resilience
 */
class CircuitBreaker {
  constructor(config =
  /* istanbul ignore next */
  (cov_27w6drr0zg().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_27w6drr0zg().f[0]++;
    cov_27w6drr0zg().s[3]++;
    this.states = new Map();
    /* istanbul ignore next */
    cov_27w6drr0zg().s[4]++;
    this.healthCheckTimers = new Map();
    /* istanbul ignore next */
    cov_27w6drr0zg().s[5]++;
    this.config = Object.assign({
      failureThreshold: 5,
      recoveryTimeout: 60000,
      monitoringWindow: 300000,
      halfOpenMaxCalls: 3,
      healthCheckInterval: 30000
    }, config);
    /* istanbul ignore next */
    cov_27w6drr0zg().s[6]++;
    this.initializeProviders();
  }
  /**
   * Check if circuit breaker is open for a provider
   */
  isOpen(provider) {
    /* istanbul ignore next */
    cov_27w6drr0zg().f[1]++;
    const state =
    /* istanbul ignore next */
    (cov_27w6drr0zg().s[7]++, this.getState(provider));
    /* istanbul ignore next */
    cov_27w6drr0zg().s[8]++;
    return state.state === "open";
  }
  /**
   * Execute request through circuit breaker
   */
  execute(provider, operation) {
    /* istanbul ignore next */
    cov_27w6drr0zg().f[2]++;
    cov_27w6drr0zg().s[9]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_27w6drr0zg().f[3]++;
      const state =
      /* istanbul ignore next */
      (cov_27w6drr0zg().s[10]++, this.getState(provider));
      // Check if circuit is open
      /* istanbul ignore next */
      cov_27w6drr0zg().s[11]++;
      if (state.state === "open") {
        /* istanbul ignore next */
        cov_27w6drr0zg().b[1][0]++;
        cov_27w6drr0zg().s[12]++;
        if (Date.now() < state.nextAttemptTime) {
          /* istanbul ignore next */
          cov_27w6drr0zg().b[2][0]++;
          cov_27w6drr0zg().s[13]++;
          throw new Error(`Circuit breaker is OPEN for provider ${provider}. Next attempt at ${new Date(state.nextAttemptTime)}`);
        } else {
          /* istanbul ignore next */
          cov_27w6drr0zg().b[2][1]++;
          cov_27w6drr0zg().s[14]++;
          // Transition to half-open
          this.transitionToHalfOpen(provider);
        }
      } else
      /* istanbul ignore next */
      {
        cov_27w6drr0zg().b[1][1]++;
      }
      // Check half-open limits
      cov_27w6drr0zg().s[15]++;
      if (
      /* istanbul ignore next */
      (cov_27w6drr0zg().b[4][0]++, state.state === "half-open") &&
      /* istanbul ignore next */
      (cov_27w6drr0zg().b[4][1]++, state.halfOpenAttempts >= this.config.halfOpenMaxCalls)) {
        /* istanbul ignore next */
        cov_27w6drr0zg().b[3][0]++;
        cov_27w6drr0zg().s[16]++;
        throw new Error(`Circuit breaker is HALF-OPEN for provider ${provider}. Max attempts reached.`);
      } else
      /* istanbul ignore next */
      {
        cov_27w6drr0zg().b[3][1]++;
      }
      cov_27w6drr0zg().s[17]++;
      try {
        // Execute the operation
        const startTime =
        /* istanbul ignore next */
        (cov_27w6drr0zg().s[18]++, Date.now());
        const result =
        /* istanbul ignore next */
        (cov_27w6drr0zg().s[19]++, yield operation());
        const latency =
        /* istanbul ignore next */
        (cov_27w6drr0zg().s[20]++, Date.now() - startTime);
        // Record success
        /* istanbul ignore next */
        cov_27w6drr0zg().s[21]++;
        this.recordSuccess(provider, latency);
        /* istanbul ignore next */
        cov_27w6drr0zg().s[22]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_27w6drr0zg().s[23]++;
        // Record failure
        this.recordFailure(provider, error);
        /* istanbul ignore next */
        cov_27w6drr0zg().s[24]++;
        throw error;
      }
    });
  }
  /**
   * Record successful operation
   */
  recordSuccess(provider, latency) {
    /* istanbul ignore next */
    cov_27w6drr0zg().f[4]++;
    const state =
    /* istanbul ignore next */
    (cov_27w6drr0zg().s[25]++, this.getState(provider));
    /* istanbul ignore next */
    cov_27w6drr0zg().s[26]++;
    state.successfulRequests++;
    /* istanbul ignore next */
    cov_27w6drr0zg().s[27]++;
    state.totalRequests++;
    /* istanbul ignore next */
    cov_27w6drr0zg().s[28]++;
    state.lastSuccessTime = Date.now();
    // Reset failure count on success
    /* istanbul ignore next */
    cov_27w6drr0zg().s[29]++;
    state.failureCount = 0;
    // Transition from half-open to closed if successful
    /* istanbul ignore next */
    cov_27w6drr0zg().s[30]++;
    if (state.state === "half-open") {
      /* istanbul ignore next */
      cov_27w6drr0zg().b[5][0]++;
      cov_27w6drr0zg().s[31]++;
      state.halfOpenAttempts++;
      // If we've had enough successful attempts, close the circuit
      /* istanbul ignore next */
      cov_27w6drr0zg().s[32]++;
      if (state.halfOpenAttempts >= this.config.halfOpenMaxCalls) {
        /* istanbul ignore next */
        cov_27w6drr0zg().b[6][0]++;
        cov_27w6drr0zg().s[33]++;
        this.transitionToClosed(provider);
      } else
      /* istanbul ignore next */
      {
        cov_27w6drr0zg().b[6][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_27w6drr0zg().b[5][1]++;
    }
    cov_27w6drr0zg().s[34]++;
    this.updateState(provider, state);
  }
  /**
   * Record failed operation
   */
  recordFailure(provider, error) {
    /* istanbul ignore next */
    cov_27w6drr0zg().f[5]++;
    const state =
    /* istanbul ignore next */
    (cov_27w6drr0zg().s[35]++, this.getState(provider));
    /* istanbul ignore next */
    cov_27w6drr0zg().s[36]++;
    state.failureCount++;
    /* istanbul ignore next */
    cov_27w6drr0zg().s[37]++;
    state.totalRequests++;
    /* istanbul ignore next */
    cov_27w6drr0zg().s[38]++;
    state.lastFailureTime = Date.now();
    // Check if we should open the circuit
    /* istanbul ignore next */
    cov_27w6drr0zg().s[39]++;
    if (
    /* istanbul ignore next */
    (cov_27w6drr0zg().b[8][0]++, state.state === "closed") &&
    /* istanbul ignore next */
    (cov_27w6drr0zg().b[8][1]++, state.failureCount >= this.config.failureThreshold)) {
      /* istanbul ignore next */
      cov_27w6drr0zg().b[7][0]++;
      cov_27w6drr0zg().s[40]++;
      this.transitionToOpen(provider);
    } else {
      /* istanbul ignore next */
      cov_27w6drr0zg().b[7][1]++;
      cov_27w6drr0zg().s[41]++;
      if (state.state === "half-open") {
        /* istanbul ignore next */
        cov_27w6drr0zg().b[9][0]++;
        cov_27w6drr0zg().s[42]++;
        // Any failure in half-open state should open the circuit
        this.transitionToOpen(provider);
      } else
      /* istanbul ignore next */
      {
        cov_27w6drr0zg().b[9][1]++;
      }
    }
    /* istanbul ignore next */
    cov_27w6drr0zg().s[43]++;
    this.updateState(provider, state);
  }
  /**
   * Transition circuit to OPEN state
   */
  transitionToOpen(provider) {
    /* istanbul ignore next */
    cov_27w6drr0zg().f[6]++;
    const state =
    /* istanbul ignore next */
    (cov_27w6drr0zg().s[44]++, this.getState(provider));
    /* istanbul ignore next */
    cov_27w6drr0zg().s[45]++;
    state.state = "open";
    /* istanbul ignore next */
    cov_27w6drr0zg().s[46]++;
    state.nextAttemptTime = Date.now() + this.config.recoveryTimeout;
    /* istanbul ignore next */
    cov_27w6drr0zg().s[47]++;
    state.halfOpenAttempts = 0;
    /* istanbul ignore next */
    cov_27w6drr0zg().s[48]++;
    console.warn(`Circuit breaker OPENED for provider ${provider}. Next attempt at ${new Date(state.nextAttemptTime)}`);
    // Start health check timer
    /* istanbul ignore next */
    cov_27w6drr0zg().s[49]++;
    this.startHealthCheck(provider);
    /* istanbul ignore next */
    cov_27w6drr0zg().s[50]++;
    this.updateState(provider, state);
  }
  /**
   * Transition circuit to HALF-OPEN state
   */
  transitionToHalfOpen(provider) {
    /* istanbul ignore next */
    cov_27w6drr0zg().f[7]++;
    const state =
    /* istanbul ignore next */
    (cov_27w6drr0zg().s[51]++, this.getState(provider));
    /* istanbul ignore next */
    cov_27w6drr0zg().s[52]++;
    state.state = "half-open";
    /* istanbul ignore next */
    cov_27w6drr0zg().s[53]++;
    state.halfOpenAttempts = 0;
    /* istanbul ignore next */
    cov_27w6drr0zg().s[54]++;
    console.info(`Circuit breaker transitioned to HALF-OPEN for provider ${provider}`);
    /* istanbul ignore next */
    cov_27w6drr0zg().s[55]++;
    this.updateState(provider, state);
  }
  /**
   * Transition circuit to CLOSED state
   */
  transitionToClosed(provider) {
    /* istanbul ignore next */
    cov_27w6drr0zg().f[8]++;
    const state =
    /* istanbul ignore next */
    (cov_27w6drr0zg().s[56]++, this.getState(provider));
    /* istanbul ignore next */
    cov_27w6drr0zg().s[57]++;
    state.state = "closed";
    /* istanbul ignore next */
    cov_27w6drr0zg().s[58]++;
    state.failureCount = 0;
    /* istanbul ignore next */
    cov_27w6drr0zg().s[59]++;
    state.halfOpenAttempts = 0;
    /* istanbul ignore next */
    cov_27w6drr0zg().s[60]++;
    console.info(`Circuit breaker CLOSED for provider ${provider}`);
    // Stop health check timer
    /* istanbul ignore next */
    cov_27w6drr0zg().s[61]++;
    this.stopHealthCheck(provider);
    /* istanbul ignore next */
    cov_27w6drr0zg().s[62]++;
    this.updateState(provider, state);
  }
  /**
   * Start health check for provider
   */
  startHealthCheck(provider) {
    /* istanbul ignore next */
    cov_27w6drr0zg().f[9]++;
    cov_27w6drr0zg().s[63]++;
    this.stopHealthCheck(provider); // Clear any existing timer
    const timer =
    /* istanbul ignore next */
    (cov_27w6drr0zg().s[64]++, setInterval(() => {
      /* istanbul ignore next */
      cov_27w6drr0zg().f[10]++;
      cov_27w6drr0zg().s[65]++;
      return tslib_1.__awaiter(this, void 0, void 0, function* () {
        /* istanbul ignore next */
        cov_27w6drr0zg().f[11]++;
        cov_27w6drr0zg().s[66]++;
        try {
          const healthy =
          /* istanbul ignore next */
          (cov_27w6drr0zg().s[67]++, yield this.performHealthCheck(provider));
          /* istanbul ignore next */
          cov_27w6drr0zg().s[68]++;
          if (healthy) {
            /* istanbul ignore next */
            cov_27w6drr0zg().b[10][0]++;
            cov_27w6drr0zg().s[69]++;
            console.info(`Health check passed for provider ${provider}. Transitioning to HALF-OPEN.`);
            /* istanbul ignore next */
            cov_27w6drr0zg().s[70]++;
            this.transitionToHalfOpen(provider);
          } else
          /* istanbul ignore next */
          {
            cov_27w6drr0zg().b[10][1]++;
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_27w6drr0zg().s[71]++;
          console.warn(`Health check failed for provider ${provider}:`, error);
        }
      });
    }, this.config.healthCheckInterval));
    /* istanbul ignore next */
    cov_27w6drr0zg().s[72]++;
    this.healthCheckTimers.set(provider, timer);
  }
  /**
   * Stop health check for provider
   */
  stopHealthCheck(provider) {
    /* istanbul ignore next */
    cov_27w6drr0zg().f[12]++;
    const timer =
    /* istanbul ignore next */
    (cov_27w6drr0zg().s[73]++, this.healthCheckTimers.get(provider));
    /* istanbul ignore next */
    cov_27w6drr0zg().s[74]++;
    if (timer) {
      /* istanbul ignore next */
      cov_27w6drr0zg().b[11][0]++;
      cov_27w6drr0zg().s[75]++;
      clearInterval(timer);
      /* istanbul ignore next */
      cov_27w6drr0zg().s[76]++;
      this.healthCheckTimers.delete(provider);
    } else
    /* istanbul ignore next */
    {
      cov_27w6drr0zg().b[11][1]++;
    }
  }
  /**
   * Perform health check for provider
   */
  performHealthCheck(provider) {
    /* istanbul ignore next */
    cov_27w6drr0zg().f[13]++;
    cov_27w6drr0zg().s[77]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_27w6drr0zg().f[14]++;
      // In production, this would make actual health check requests
      // For now, simulate health check
      const state =
      /* istanbul ignore next */
      (cov_27w6drr0zg().s[78]++, this.getState(provider));
      const timeSinceLastFailure =
      /* istanbul ignore next */
      (cov_27w6drr0zg().s[79]++, Date.now() - state.lastFailureTime);
      // Simple heuristic: if it's been long enough since last failure, consider healthy
      /* istanbul ignore next */
      cov_27w6drr0zg().s[80]++;
      return timeSinceLastFailure > this.config.recoveryTimeout;
    });
  }
  /**
   * Get circuit breaker state for provider
   */
  getState(provider) {
    /* istanbul ignore next */
    cov_27w6drr0zg().f[15]++;
    let state =
    /* istanbul ignore next */
    (cov_27w6drr0zg().s[81]++, this.states.get(provider));
    /* istanbul ignore next */
    cov_27w6drr0zg().s[82]++;
    if (!state) {
      /* istanbul ignore next */
      cov_27w6drr0zg().b[12][0]++;
      cov_27w6drr0zg().s[83]++;
      state = {
        provider,
        state: "closed",
        failureCount: 0,
        lastFailureTime: 0,
        lastSuccessTime: Date.now(),
        nextAttemptTime: 0,
        totalRequests: 0,
        successfulRequests: 0,
        halfOpenAttempts: 0
      };
      /* istanbul ignore next */
      cov_27w6drr0zg().s[84]++;
      this.states.set(provider, state);
    } else
    /* istanbul ignore next */
    {
      cov_27w6drr0zg().b[12][1]++;
    }
    cov_27w6drr0zg().s[85]++;
    return state;
  }
  /**
   * Update state for provider
   */
  updateState(provider, state) {
    /* istanbul ignore next */
    cov_27w6drr0zg().f[16]++;
    cov_27w6drr0zg().s[86]++;
    this.states.set(provider, state);
  }
  /**
   * Check if provider is available
   */
  isAvailable(provider) {
    /* istanbul ignore next */
    cov_27w6drr0zg().f[17]++;
    const state =
    /* istanbul ignore next */
    (cov_27w6drr0zg().s[87]++, this.getState(provider));
    /* istanbul ignore next */
    cov_27w6drr0zg().s[88]++;
    if (state.state === "closed") {
      /* istanbul ignore next */
      cov_27w6drr0zg().b[13][0]++;
      cov_27w6drr0zg().s[89]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_27w6drr0zg().b[13][1]++;
    }
    cov_27w6drr0zg().s[90]++;
    if (state.state === "half-open") {
      /* istanbul ignore next */
      cov_27w6drr0zg().b[14][0]++;
      cov_27w6drr0zg().s[91]++;
      return state.halfOpenAttempts < this.config.halfOpenMaxCalls;
    } else
    /* istanbul ignore next */
    {
      cov_27w6drr0zg().b[14][1]++;
    }
    cov_27w6drr0zg().s[92]++;
    if (state.state === "open") {
      /* istanbul ignore next */
      cov_27w6drr0zg().b[15][0]++;
      cov_27w6drr0zg().s[93]++;
      return Date.now() >= state.nextAttemptTime;
    } else
    /* istanbul ignore next */
    {
      cov_27w6drr0zg().b[15][1]++;
    }
    cov_27w6drr0zg().s[94]++;
    return false;
  }
  /**
   * Get circuit breaker metrics for provider
   */
  getMetrics(provider) {
    /* istanbul ignore next */
    cov_27w6drr0zg().f[18]++;
    const state =
    /* istanbul ignore next */
    (cov_27w6drr0zg().s[95]++, this.getState(provider));
    const failureRate =
    /* istanbul ignore next */
    (cov_27w6drr0zg().s[96]++, state.totalRequests > 0 ?
    /* istanbul ignore next */
    (cov_27w6drr0zg().b[16][0]++, (state.totalRequests - state.successfulRequests) / state.totalRequests) :
    /* istanbul ignore next */
    (cov_27w6drr0zg().b[16][1]++, 0));
    const uptime =
    /* istanbul ignore next */
    (cov_27w6drr0zg().s[97]++, state.totalRequests > 0 ?
    /* istanbul ignore next */
    (cov_27w6drr0zg().b[17][0]++, state.successfulRequests / state.totalRequests) :
    /* istanbul ignore next */
    (cov_27w6drr0zg().b[17][1]++, 1));
    const circuitOpenTime =
    /* istanbul ignore next */
    (cov_27w6drr0zg().s[98]++, state.state === "open" ?
    /* istanbul ignore next */
    (cov_27w6drr0zg().b[18][0]++, Date.now() - state.lastFailureTime) :
    /* istanbul ignore next */
    (cov_27w6drr0zg().b[18][1]++, 0));
    /* istanbul ignore next */
    cov_27w6drr0zg().s[99]++;
    return {
      provider,
      state: state.state,
      failureRate,
      uptime,
      lastFailure: state.lastFailureTime > 0 ?
      /* istanbul ignore next */
      (cov_27w6drr0zg().b[19][0]++, new Date(state.lastFailureTime)) :
      /* istanbul ignore next */
      (cov_27w6drr0zg().b[19][1]++, null),
      lastSuccess: state.lastSuccessTime > 0 ?
      /* istanbul ignore next */
      (cov_27w6drr0zg().b[20][0]++, new Date(state.lastSuccessTime)) :
      /* istanbul ignore next */
      (cov_27w6drr0zg().b[20][1]++, null),
      totalFailures: state.totalRequests - state.successfulRequests,
      totalSuccesses: state.successfulRequests,
      circuitOpenTime
    };
  }
  /**
   * Get all circuit breaker metrics
   */
  getAllMetrics() {
    /* istanbul ignore next */
    cov_27w6drr0zg().f[19]++;
    const providers =
    /* istanbul ignore next */
    (cov_27w6drr0zg().s[100]++, ["bedrock", "google", "meta"]);
    /* istanbul ignore next */
    cov_27w6drr0zg().s[101]++;
    return providers.map(provider => {
      /* istanbul ignore next */
      cov_27w6drr0zg().f[20]++;
      cov_27w6drr0zg().s[102]++;
      return this.getMetrics(provider);
    });
  }
  /**
   * Get available providers
   */
  getAvailableProviders() {
    /* istanbul ignore next */
    cov_27w6drr0zg().f[21]++;
    const providers =
    /* istanbul ignore next */
    (cov_27w6drr0zg().s[103]++, ["bedrock", "google", "meta"]);
    /* istanbul ignore next */
    cov_27w6drr0zg().s[104]++;
    return providers.filter(provider => {
      /* istanbul ignore next */
      cov_27w6drr0zg().f[22]++;
      cov_27w6drr0zg().s[105]++;
      return this.isAvailable(provider);
    });
  }
  /**
   * Force open circuit for provider (for testing/maintenance)
   */
  forceOpen(provider) {
    /* istanbul ignore next */
    cov_27w6drr0zg().f[23]++;
    const state =
    /* istanbul ignore next */
    (cov_27w6drr0zg().s[106]++, this.getState(provider));
    /* istanbul ignore next */
    cov_27w6drr0zg().s[107]++;
    state.state = "open";
    /* istanbul ignore next */
    cov_27w6drr0zg().s[108]++;
    state.nextAttemptTime = Date.now() + this.config.recoveryTimeout;
    /* istanbul ignore next */
    cov_27w6drr0zg().s[109]++;
    console.warn(`Circuit breaker FORCE OPENED for provider ${provider}`);
    /* istanbul ignore next */
    cov_27w6drr0zg().s[110]++;
    this.startHealthCheck(provider);
    /* istanbul ignore next */
    cov_27w6drr0zg().s[111]++;
    this.updateState(provider, state);
  }
  /**
   * Force close circuit for provider (for testing/maintenance)
   */
  forceClose(provider) {
    /* istanbul ignore next */
    cov_27w6drr0zg().f[24]++;
    const state =
    /* istanbul ignore next */
    (cov_27w6drr0zg().s[112]++, this.getState(provider));
    /* istanbul ignore next */
    cov_27w6drr0zg().s[113]++;
    state.state = "closed";
    /* istanbul ignore next */
    cov_27w6drr0zg().s[114]++;
    state.failureCount = 0;
    /* istanbul ignore next */
    cov_27w6drr0zg().s[115]++;
    state.halfOpenAttempts = 0;
    /* istanbul ignore next */
    cov_27w6drr0zg().s[116]++;
    console.info(`Circuit breaker FORCE CLOSED for provider ${provider}`);
    /* istanbul ignore next */
    cov_27w6drr0zg().s[117]++;
    this.stopHealthCheck(provider);
    /* istanbul ignore next */
    cov_27w6drr0zg().s[118]++;
    this.updateState(provider, state);
  }
  /**
   * Reset circuit breaker for provider
   */
  reset(provider) {
    /* istanbul ignore next */
    cov_27w6drr0zg().f[25]++;
    cov_27w6drr0zg().s[119]++;
    this.stopHealthCheck(provider);
    /* istanbul ignore next */
    cov_27w6drr0zg().s[120]++;
    this.states.delete(provider);
    /* istanbul ignore next */
    cov_27w6drr0zg().s[121]++;
    console.info(`Circuit breaker RESET for provider ${provider}`);
  }
  /**
   * Reset all circuit breakers
   */
  resetAll() {
    /* istanbul ignore next */
    cov_27w6drr0zg().f[26]++;
    const providers =
    /* istanbul ignore next */
    (cov_27w6drr0zg().s[122]++, ["bedrock", "google", "meta"]);
    /* istanbul ignore next */
    cov_27w6drr0zg().s[123]++;
    providers.forEach(provider => {
      /* istanbul ignore next */
      cov_27w6drr0zg().f[27]++;
      cov_27w6drr0zg().s[124]++;
      return this.reset(provider);
    });
  }
  /**
   * Initialize providers
   */
  initializeProviders() {
    /* istanbul ignore next */
    cov_27w6drr0zg().f[28]++;
    const providers =
    /* istanbul ignore next */
    (cov_27w6drr0zg().s[125]++, ["bedrock", "google", "meta"]);
    /* istanbul ignore next */
    cov_27w6drr0zg().s[126]++;
    providers.forEach(provider => {
      /* istanbul ignore next */
      cov_27w6drr0zg().f[29]++;
      cov_27w6drr0zg().s[127]++;
      return this.getState(provider);
    });
  }
  /**
   * Cleanup resources
   */
  destroy() {
    /* istanbul ignore next */
    cov_27w6drr0zg().f[30]++;
    cov_27w6drr0zg().s[128]++;
    // Clear all health check timers
    this.healthCheckTimers.forEach(timer => {
      /* istanbul ignore next */
      cov_27w6drr0zg().f[31]++;
      cov_27w6drr0zg().s[129]++;
      clearInterval(timer);
    });
    /* istanbul ignore next */
    cov_27w6drr0zg().s[130]++;
    this.healthCheckTimers.clear();
    /* istanbul ignore next */
    cov_27w6drr0zg().s[131]++;
    this.states.clear();
  }
}
/* istanbul ignore next */
cov_27w6drr0zg().s[132]++;
exports.CircuitBreaker = CircuitBreaker;
/**
 * Factory function for creating circuit breaker
 */
/* istanbul ignore next */
cov_27w6drr0zg().s[133]++;
const createCircuitBreaker = config => {
  /* istanbul ignore next */
  cov_27w6drr0zg().f[32]++;
  cov_27w6drr0zg().s[134]++;
  return new CircuitBreaker(config);
};
/* istanbul ignore next */
cov_27w6drr0zg().s[135]++;
exports.createCircuitBreaker = createCircuitBreaker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
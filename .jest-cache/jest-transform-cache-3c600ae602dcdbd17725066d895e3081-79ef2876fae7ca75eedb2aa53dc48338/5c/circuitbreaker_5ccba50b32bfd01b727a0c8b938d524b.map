{"version":3,"names":["cov_27w6drr0zg","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","CircuitBreaker","constructor","config","states","Map","healthCheckTimers","Object","assign","failureThreshold","recoveryTimeout","monitoringWindow","halfOpenMaxCalls","healthCheckInterval","initializeProviders","isOpen","provider","state","getState","execute","operation","Date","now","nextAttemptTime","Error","transitionToHalfOpen","halfOpenAttempts","startTime","result","latency","recordSuccess","error","recordFailure","successfulRequests","totalRequests","lastSuccessTime","failureCount","transitionToClosed","updateState","lastFailureTime","transitionToOpen","console","warn","startHealthCheck","info","stopHealthCheck","timer","setInterval","tslib_1","__awaiter","healthy","performHealthCheck","set","get","clearInterval","delete","timeSinceLastFailure","isAvailable","getMetrics","failureRate","uptime","circuitOpenTime","lastFailure","lastSuccess","totalFailures","totalSuccesses","getAllMetrics","providers","map","getAvailableProviders","filter","forceOpen","forceClose","reset","resetAll","forEach","destroy","clear","exports","createCircuitBreaker"],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/circuit-breaker.ts"],"sourcesContent":["/**\n * Circuit Breaker Pattern Implementation\n *\n * Implements:\n * - Circuit breaker for provider resilience\n * - Automatic failure detection and recovery\n * - Configurable thresholds and timeouts\n * - Health check integration\n * - Fallback mechanism coordination\n */\n\nimport { Provider } from \"./types\";\n\nexport interface CircuitBreakerConfig {\n  failureThreshold: number;\n  recoveryTimeout: number;\n  monitoringWindow: number;\n  halfOpenMaxCalls: number;\n  healthCheckInterval: number;\n}\n\nexport interface CircuitBreakerState {\n  provider: Provider;\n  state: \"closed\" | \"open\" | \"half-open\";\n  failureCount: number;\n  lastFailureTime: number;\n  lastSuccessTime: number;\n  nextAttemptTime: number;\n  totalRequests: number;\n  successfulRequests: number;\n  halfOpenAttempts: number;\n}\n\nexport interface CircuitBreakerMetrics {\n  provider: Provider;\n  state: \"closed\" | \"open\" | \"half-open\";\n  failureRate: number;\n  uptime: number;\n  lastFailure: Date | null;\n  lastSuccess: Date | null;\n  totalFailures: number;\n  totalSuccesses: number;\n  circuitOpenTime: number;\n}\n\n/**\n * Circuit Breaker for Provider Resilience\n */\nexport class CircuitBreaker {\n  private config: CircuitBreakerConfig;\n  private states: Map<Provider, CircuitBreakerState> = new Map();\n  private healthCheckTimers: Map<Provider, NodeJS.Timeout> = new Map();\n\n  constructor(config: Partial<CircuitBreakerConfig> = {}) {\n    this.config = {\n      failureThreshold: 5, // Open circuit after 5 failures\n      recoveryTimeout: 60000, // 1 minute recovery timeout\n      monitoringWindow: 300000, // 5 minute monitoring window\n      halfOpenMaxCalls: 3, // Max calls in half-open state\n      healthCheckInterval: 30000, // 30 second health check interval\n      ...config,\n    };\n\n    this.initializeProviders();\n  }\n\n  /**\n   * Check if circuit breaker is open for a provider\n   */\n  isOpen(provider: Provider): boolean {\n    const state = this.getState(provider);\n    return state.state === \"open\";\n  }\n\n  /**\n   * Execute request through circuit breaker\n   */\n  async execute<T>(\n    provider: Provider,\n    operation: () => Promise<T>\n  ): Promise<T> {\n    const state = this.getState(provider);\n\n    // Check if circuit is open\n    if (state.state === \"open\") {\n      if (Date.now() < state.nextAttemptTime) {\n        throw new Error(\n          `Circuit breaker is OPEN for provider ${provider}. Next attempt at ${new Date(\n            state.nextAttemptTime\n          )}`\n        );\n      } else {\n        // Transition to half-open\n        this.transitionToHalfOpen(provider);\n      }\n    }\n\n    // Check half-open limits\n    if (\n      state.state === \"half-open\" &&\n      state.halfOpenAttempts >= this.config.halfOpenMaxCalls\n    ) {\n      throw new Error(\n        `Circuit breaker is HALF-OPEN for provider ${provider}. Max attempts reached.`\n      );\n    }\n\n    try {\n      // Execute the operation\n      const startTime = Date.now();\n      const result = await operation();\n      const latency = Date.now() - startTime;\n\n      // Record success\n      this.recordSuccess(provider, latency);\n\n      return result;\n    } catch (error) {\n      // Record failure\n      this.recordFailure(provider, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Record successful operation\n   */\n  private recordSuccess(provider: Provider, latency: number): void {\n    const state = this.getState(provider);\n\n    state.successfulRequests++;\n    state.totalRequests++;\n    state.lastSuccessTime = Date.now();\n\n    // Reset failure count on success\n    state.failureCount = 0;\n\n    // Transition from half-open to closed if successful\n    if (state.state === \"half-open\") {\n      state.halfOpenAttempts++;\n\n      // If we've had enough successful attempts, close the circuit\n      if (state.halfOpenAttempts >= this.config.halfOpenMaxCalls) {\n        this.transitionToClosed(provider);\n      }\n    }\n\n    this.updateState(provider, state);\n  }\n\n  /**\n   * Record failed operation\n   */\n  private recordFailure(provider: Provider, error: any): void {\n    const state = this.getState(provider);\n\n    state.failureCount++;\n    state.totalRequests++;\n    state.lastFailureTime = Date.now();\n\n    // Check if we should open the circuit\n    if (\n      state.state === \"closed\" &&\n      state.failureCount >= this.config.failureThreshold\n    ) {\n      this.transitionToOpen(provider);\n    } else if (state.state === \"half-open\") {\n      // Any failure in half-open state should open the circuit\n      this.transitionToOpen(provider);\n    }\n\n    this.updateState(provider, state);\n  }\n\n  /**\n   * Transition circuit to OPEN state\n   */\n  private transitionToOpen(provider: Provider): void {\n    const state = this.getState(provider);\n\n    state.state = \"open\";\n    state.nextAttemptTime = Date.now() + this.config.recoveryTimeout;\n    state.halfOpenAttempts = 0;\n\n    console.warn(\n      `Circuit breaker OPENED for provider ${provider}. Next attempt at ${new Date(\n        state.nextAttemptTime\n      )}`\n    );\n\n    // Start health check timer\n    this.startHealthCheck(provider);\n\n    this.updateState(provider, state);\n  }\n\n  /**\n   * Transition circuit to HALF-OPEN state\n   */\n  private transitionToHalfOpen(provider: Provider): void {\n    const state = this.getState(provider);\n\n    state.state = \"half-open\";\n    state.halfOpenAttempts = 0;\n\n    console.info(\n      `Circuit breaker transitioned to HALF-OPEN for provider ${provider}`\n    );\n\n    this.updateState(provider, state);\n  }\n\n  /**\n   * Transition circuit to CLOSED state\n   */\n  private transitionToClosed(provider: Provider): void {\n    const state = this.getState(provider);\n\n    state.state = \"closed\";\n    state.failureCount = 0;\n    state.halfOpenAttempts = 0;\n\n    console.info(`Circuit breaker CLOSED for provider ${provider}`);\n\n    // Stop health check timer\n    this.stopHealthCheck(provider);\n\n    this.updateState(provider, state);\n  }\n\n  /**\n   * Start health check for provider\n   */\n  private startHealthCheck(provider: Provider): void {\n    this.stopHealthCheck(provider); // Clear any existing timer\n\n    const timer = setInterval(async () => {\n      try {\n        const healthy = await this.performHealthCheck(provider);\n\n        if (healthy) {\n          console.info(\n            `Health check passed for provider ${provider}. Transitioning to HALF-OPEN.`\n          );\n          this.transitionToHalfOpen(provider);\n        }\n      } catch (error) {\n        console.warn(`Health check failed for provider ${provider}:`, error);\n      }\n    }, this.config.healthCheckInterval);\n\n    this.healthCheckTimers.set(provider, timer);\n  }\n\n  /**\n   * Stop health check for provider\n   */\n  private stopHealthCheck(provider: Provider): void {\n    const timer = this.healthCheckTimers.get(provider);\n    if (timer) {\n      clearInterval(timer);\n      this.healthCheckTimers.delete(provider);\n    }\n  }\n\n  /**\n   * Perform health check for provider\n   */\n  private async performHealthCheck(provider: Provider): Promise<boolean> {\n    // In production, this would make actual health check requests\n    // For now, simulate health check\n\n    const state = this.getState(provider);\n    const timeSinceLastFailure = Date.now() - state.lastFailureTime;\n\n    // Simple heuristic: if it's been long enough since last failure, consider healthy\n    return timeSinceLastFailure > this.config.recoveryTimeout;\n  }\n\n  /**\n   * Get circuit breaker state for provider\n   */\n  private getState(provider: Provider): CircuitBreakerState {\n    let state = this.states.get(provider);\n\n    if (!state) {\n      state = {\n        provider,\n        state: \"closed\",\n        failureCount: 0,\n        lastFailureTime: 0,\n        lastSuccessTime: Date.now(),\n        nextAttemptTime: 0,\n        totalRequests: 0,\n        successfulRequests: 0,\n        halfOpenAttempts: 0,\n      };\n\n      this.states.set(provider, state);\n    }\n\n    return state;\n  }\n\n  /**\n   * Update state for provider\n   */\n  private updateState(provider: Provider, state: CircuitBreakerState): void {\n    this.states.set(provider, state);\n  }\n\n  /**\n   * Check if provider is available\n   */\n  isAvailable(provider: Provider): boolean {\n    const state = this.getState(provider);\n\n    if (state.state === \"closed\") {\n      return true;\n    }\n\n    if (state.state === \"half-open\") {\n      return state.halfOpenAttempts < this.config.halfOpenMaxCalls;\n    }\n\n    if (state.state === \"open\") {\n      return Date.now() >= state.nextAttemptTime;\n    }\n\n    return false;\n  }\n\n  /**\n   * Get circuit breaker metrics for provider\n   */\n  getMetrics(provider: Provider): CircuitBreakerMetrics {\n    const state = this.getState(provider);\n\n    const failureRate =\n      state.totalRequests > 0\n        ? (state.totalRequests - state.successfulRequests) / state.totalRequests\n        : 0;\n\n    const uptime =\n      state.totalRequests > 0\n        ? state.successfulRequests / state.totalRequests\n        : 1;\n\n    const circuitOpenTime =\n      state.state === \"open\" ? Date.now() - state.lastFailureTime : 0;\n\n    return {\n      provider,\n      state: state.state,\n      failureRate,\n      uptime,\n      lastFailure:\n        state.lastFailureTime > 0 ? new Date(state.lastFailureTime) : null,\n      lastSuccess:\n        state.lastSuccessTime > 0 ? new Date(state.lastSuccessTime) : null,\n      totalFailures: state.totalRequests - state.successfulRequests,\n      totalSuccesses: state.successfulRequests,\n      circuitOpenTime,\n    };\n  }\n\n  /**\n   * Get all circuit breaker metrics\n   */\n  getAllMetrics(): CircuitBreakerMetrics[] {\n    const providers: Provider[] = [\"bedrock\", \"google\", \"meta\"];\n    return providers.map((provider) => this.getMetrics(provider));\n  }\n\n  /**\n   * Get available providers\n   */\n  getAvailableProviders(): Provider[] {\n    const providers: Provider[] = [\"bedrock\", \"google\", \"meta\"];\n    return providers.filter((provider) => this.isAvailable(provider));\n  }\n\n  /**\n   * Force open circuit for provider (for testing/maintenance)\n   */\n  forceOpen(provider: Provider): void {\n    const state = this.getState(provider);\n    state.state = \"open\";\n    state.nextAttemptTime = Date.now() + this.config.recoveryTimeout;\n\n    console.warn(`Circuit breaker FORCE OPENED for provider ${provider}`);\n\n    this.startHealthCheck(provider);\n    this.updateState(provider, state);\n  }\n\n  /**\n   * Force close circuit for provider (for testing/maintenance)\n   */\n  forceClose(provider: Provider): void {\n    const state = this.getState(provider);\n    state.state = \"closed\";\n    state.failureCount = 0;\n    state.halfOpenAttempts = 0;\n\n    console.info(`Circuit breaker FORCE CLOSED for provider ${provider}`);\n\n    this.stopHealthCheck(provider);\n    this.updateState(provider, state);\n  }\n\n  /**\n   * Reset circuit breaker for provider\n   */\n  reset(provider: Provider): void {\n    this.stopHealthCheck(provider);\n    this.states.delete(provider);\n\n    console.info(`Circuit breaker RESET for provider ${provider}`);\n  }\n\n  /**\n   * Reset all circuit breakers\n   */\n  resetAll(): void {\n    const providers: Provider[] = [\"bedrock\", \"google\", \"meta\"];\n    providers.forEach((provider) => this.reset(provider));\n  }\n\n  /**\n   * Initialize providers\n   */\n  private initializeProviders(): void {\n    const providers: Provider[] = [\"bedrock\", \"google\", \"meta\"];\n    providers.forEach((provider) => this.getState(provider));\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    // Clear all health check timers\n    this.healthCheckTimers.forEach((timer) => {\n      clearInterval(timer);\n    });\n\n    this.healthCheckTimers.clear();\n    this.states.clear();\n  }\n}\n\n/**\n * Factory function for creating circuit breaker\n */\nexport const createCircuitBreaker = (\n  config?: Partial<CircuitBreakerConfig>\n): CircuitBreaker => {\n  return new CircuitBreaker(config);\n};\n"],"mappings":"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","ignoreList":[]}
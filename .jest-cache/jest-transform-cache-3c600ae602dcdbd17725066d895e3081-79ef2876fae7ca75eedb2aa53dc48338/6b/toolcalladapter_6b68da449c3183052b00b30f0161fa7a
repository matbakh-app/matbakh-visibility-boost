2a455865ec5c94bd61b3d7f0617ef6dc
"use strict";

/* istanbul ignore next */
function cov_2dfhnwg8iq() {
  var path = "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/adapters/tool-call-adapter.ts";
  var hash = "f4111e972a7d489575d53fe6b3653181bf1985b1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/adapters/tool-call-adapter.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 29
        }
      },
      "2": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 8,
          column: 29
        }
      },
      "3": {
        start: {
          line: 8,
          column: 12
        },
        end: {
          line: 8,
          column: 29
        }
      },
      "4": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 21,
          column: 12
        }
      },
      "5": {
        start: {
          line: 9,
          column: 36
        },
        end: {
          line: 21,
          column: 9
        }
      },
      "6": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 26,
          column: 29
        }
      },
      "7": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 29
        }
      },
      "8": {
        start: {
          line: 27,
          column: 26
        },
        end: {
          line: 31,
          column: 11
        }
      },
      "9": {
        start: {
          line: 27,
          column: 47
        },
        end: {
          line: 31,
          column: 9
        }
      },
      "10": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 40
        }
      },
      "11": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "12": {
        start: {
          line: 37,
          column: 30
        },
        end: {
          line: 37,
          column: 69
        }
      },
      "13": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 47,
          column: 16
        }
      },
      "14": {
        start: {
          line: 38,
          column: 51
        },
        end: {
          line: 47,
          column: 13
        }
      },
      "15": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 65
        }
      },
      "16": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 22
        }
      },
      "17": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "18": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 68,
          column: 13
        }
      },
      "19": {
        start: {
          line: 59,
          column: 29
        },
        end: {
          line: 59,
          column: 42
        }
      },
      "20": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 63,
          column: 48
        }
      },
      "21": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 67,
          column: 70
        }
      },
      "22": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 25
        }
      },
      "23": {
        start: {
          line: 76,
          column: 23
        },
        end: {
          line: 76,
          column: 47
        }
      },
      "24": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "25": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 79,
          column: 44
        }
      },
      "26": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 81,
          column: 72
        }
      },
      "27": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 56
        }
      },
      "28": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 85,
          column: 44
        }
      },
      "29": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 29
        }
      },
      "30": {
        start: {
          line: 93,
          column: 23
        },
        end: {
          line: 93,
          column: 49
        }
      },
      "31": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 44
        }
      },
      "32": {
        start: {
          line: 98,
          column: 24
        },
        end: {
          line: 98,
          column: 104
        }
      },
      "33": {
        start: {
          line: 99,
          column: 27
        },
        end: {
          line: 99,
          column: 57
        }
      },
      "34": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 78
        }
      },
      "35": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "36": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 67
        }
      },
      "37": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 111,
          column: 22
        }
      },
      "38": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 22
        }
      },
      "39": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 114,
          column: 33
        }
      },
      "40": {
        start: {
          line: 113,
          column: 37
        },
        end: {
          line: 113,
          column: 190
        }
      },
      "41": {
        start: {
          line: 114,
          column: 28
        },
        end: {
          line: 114,
          column: 31
        }
      },
      "42": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "43": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 123,
          column: 13
        }
      },
      "44": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 40
        }
      },
      "45": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 28
        }
      },
      "46": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 26
        }
      },
      "47": {
        start: {
          line: 128,
          column: 0
        },
        end: {
          line: 128,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 27
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 9,
            column: 25
          },
          end: {
            line: 9,
            column: 26
          }
        },
        loc: {
          start: {
            line: 9,
            column: 36
          },
          end: {
            line: 21,
            column: 9
          }
        },
        line: 9
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 29
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 24
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 27,
            column: 36
          },
          end: {
            line: 27,
            column: 37
          }
        },
        loc: {
          start: {
            line: 27,
            column: 47
          },
          end: {
            line: 31,
            column: 9
          }
        },
        line: 27
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 25
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 35
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 38,
            column: 33
          },
          end: {
            line: 38,
            column: 34
          }
        },
        loc: {
          start: {
            line: 38,
            column: 51
          },
          end: {
            line: 47,
            column: 13
          }
        },
        line: 38
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        },
        loc: {
          start: {
            line: 55,
            column: 27
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 55
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 75,
            column: 5
          }
        },
        loc: {
          start: {
            line: 75,
            column: 33
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 75
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        loc: {
          start: {
            line: 91,
            column: 25
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 91
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        loc: {
          start: {
            line: 97,
            column: 42
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 97
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 103,
            column: 5
          }
        },
        loc: {
          start: {
            line: 103,
            column: 37
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 103
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 109,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        },
        loc: {
          start: {
            line: 109,
            column: 38
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 109
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 113,
            column: 20
          },
          end: {
            line: 113,
            column: 21
          }
        },
        loc: {
          start: {
            line: 113,
            column: 37
          },
          end: {
            line: 113,
            column: 190
          }
        },
        line: 113
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 114,
            column: 17
          },
          end: {
            line: 114,
            column: 18
          }
        },
        loc: {
          start: {
            line: 114,
            column: 28
          },
          end: {
            line: 114,
            column: 31
          }
        },
        line: 114
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        },
        loc: {
          start: {
            line: 116,
            column: 29
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 116
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 7,
            column: 8
          },
          end: {
            line: 8,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 7,
            column: 8
          },
          end: {
            line: 8,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 7
      },
      "1": {
        loc: {
          start: {
            line: 7,
            column: 14
          },
          end: {
            line: 7,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 7,
            column: 51
          },
          end: {
            line: 7,
            column: 57
          }
        }, {
          start: {
            line: 7,
            column: 60
          },
          end: {
            line: 7,
            column: 72
          }
        }],
        line: 7
      },
      "2": {
        loc: {
          start: {
            line: 7,
            column: 14
          },
          end: {
            line: 7,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 7,
            column: 14
          },
          end: {
            line: 7,
            column: 28
          }
        }, {
          start: {
            line: 7,
            column: 32
          },
          end: {
            line: 7,
            column: 48
          }
        }],
        line: 7
      },
      "3": {
        loc: {
          start: {
            line: 13,
            column: 29
          },
          end: {
            line: 13,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 29
          },
          end: {
            line: 13,
            column: 45
          }
        }, {
          start: {
            line: 13,
            column: 49
          },
          end: {
            line: 13,
            column: 80
          }
        }],
        line: 13
      },
      "4": {
        loc: {
          start: {
            line: 16,
            column: 32
          },
          end: {
            line: 16,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 32
          },
          end: {
            line: 16,
            column: 47
          }
        }, {
          start: {
            line: 16,
            column: 51
          },
          end: {
            line: 16,
            column: 53
          }
        }],
        line: 16
      },
      "5": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 26,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 26,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "6": {
        loc: {
          start: {
            line: 25,
            column: 14
          },
          end: {
            line: 25,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 25,
            column: 51
          },
          end: {
            line: 25,
            column: 57
          }
        }, {
          start: {
            line: 25,
            column: 60
          },
          end: {
            line: 25,
            column: 72
          }
        }],
        line: 25
      },
      "7": {
        loc: {
          start: {
            line: 25,
            column: 14
          },
          end: {
            line: 25,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 14
          },
          end: {
            line: 25,
            column: 28
          }
        }, {
          start: {
            line: 25,
            column: 32
          },
          end: {
            line: 25,
            column: 48
          }
        }],
        line: 25
      },
      "8": {
        loc: {
          start: {
            line: 39,
            column: 20
          },
          end: {
            line: 39,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 20
          },
          end: {
            line: 39,
            column: 27
          }
        }, {
          start: {
            line: 39,
            column: 31
          },
          end: {
            line: 39,
            column: 46
          }
        }],
        line: 39
      },
      "9": {
        loc: {
          start: {
            line: 46,
            column: 28
          },
          end: {
            line: 46,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 28
          },
          end: {
            line: 46,
            column: 43
          }
        }, {
          start: {
            line: 46,
            column: 47
          },
          end: {
            line: 46,
            column: 50
          }
        }],
        line: 46
      },
      "10": {
        loc: {
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 68,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 68,
            column: 13
          }
        }, {
          start: {
            line: 65,
            column: 17
          },
          end: {
            line: 68,
            column: 13
          }
        }],
        line: 57
      },
      "11": {
        loc: {
          start: {
            line: 60,
            column: 26
          },
          end: {
            line: 63,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 26
          },
          end: {
            line: 60,
            column: 35
          }
        }, {
          start: {
            line: 61,
            column: 20
          },
          end: {
            line: 61,
            column: 35
          }
        }, {
          start: {
            line: 62,
            column: 20
          },
          end: {
            line: 62,
            column: 53
          }
        }, {
          start: {
            line: 63,
            column: 20
          },
          end: {
            line: 63,
            column: 46
          }
        }],
        line: 60
      },
      "12": {
        loc: {
          start: {
            line: 67,
            column: 26
          },
          end: {
            line: 67,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 26
          },
          end: {
            line: 67,
            column: 35
          }
        }, {
          start: {
            line: 67,
            column: 39
          },
          end: {
            line: 67,
            column: 68
          }
        }],
        line: 67
      },
      "13": {
        loc: {
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 79,
            column: 44
          }
        }, {
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 81,
            column: 72
          }
        }, {
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 83,
            column: 56
          }
        }, {
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 85,
            column: 44
          }
        }, {
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 87,
            column: 29
          }
        }],
        line: 77
      },
      "14": {
        loc: {
          start: {
            line: 81,
            column: 23
          },
          end: {
            line: 81,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 23
          },
          end: {
            line: 81,
            column: 47
          }
        }, {
          start: {
            line: 81,
            column: 51
          },
          end: {
            line: 81,
            column: 71
          }
        }],
        line: 81
      },
      "15": {
        loc: {
          start: {
            line: 83,
            column: 23
          },
          end: {
            line: 83,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 83,
            column: 23
          },
          end: {
            line: 83,
            column: 46
          }
        }, {
          start: {
            line: 83,
            column: 50
          },
          end: {
            line: 83,
            column: 55
          }
        }],
        line: 83
      },
      "16": {
        loc: {
          start: {
            line: 98,
            column: 24
          },
          end: {
            line: 98,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 25
          },
          end: {
            line: 98,
            column: 84
          }
        }, {
          start: {
            line: 98,
            column: 89
          },
          end: {
            line: 98,
            column: 104
          }
        }],
        line: 98
      },
      "17": {
        loc: {
          start: {
            line: 98,
            column: 25
          },
          end: {
            line: 98,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 98,
            column: 62
          },
          end: {
            line: 98,
            column: 68
          }
        }, {
          start: {
            line: 98,
            column: 71
          },
          end: {
            line: 98,
            column: 84
          }
        }],
        line: 98
      },
      "18": {
        loc: {
          start: {
            line: 98,
            column: 25
          },
          end: {
            line: 98,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 25
          },
          end: {
            line: 98,
            column: 39
          }
        }, {
          start: {
            line: 98,
            column: 43
          },
          end: {
            line: 98,
            column: 59
          }
        }],
        line: 98
      },
      "19": {
        loc: {
          start: {
            line: 99,
            column: 27
          },
          end: {
            line: 99,
            column: 57
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 99,
            column: 37
          },
          end: {
            line: 99,
            column: 52
          }
        }, {
          start: {
            line: 99,
            column: 55
          },
          end: {
            line: 99,
            column: 57
          }
        }],
        line: 99
      },
      "20": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "21": {
        loc: {
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 111,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 111,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "22": {
        loc: {
          start: {
            line: 113,
            column: 37
          },
          end: {
            line: 113,
            column: 190
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 37
          },
          end: {
            line: 113,
            column: 111
          }
        }, {
          start: {
            line: 113,
            column: 115
          },
          end: {
            line: 113,
            column: 190
          }
        }],
        line: 113
      },
      "23": {
        loc: {
          start: {
            line: 113,
            column: 38
          },
          end: {
            line: 113,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 113,
            column: 77
          },
          end: {
            line: 113,
            column: 83
          }
        }, {
          start: {
            line: 113,
            column: 86
          },
          end: {
            line: 113,
            column: 101
          }
        }],
        line: 113
      },
      "24": {
        loc: {
          start: {
            line: 113,
            column: 38
          },
          end: {
            line: 113,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 38
          },
          end: {
            line: 113,
            column: 53
          }
        }, {
          start: {
            line: 113,
            column: 57
          },
          end: {
            line: 113,
            column: 74
          }
        }],
        line: 113
      },
      "25": {
        loc: {
          start: {
            line: 113,
            column: 116
          },
          end: {
            line: 113,
            column: 179
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 113,
            column: 155
          },
          end: {
            line: 113,
            column: 161
          }
        }, {
          start: {
            line: 113,
            column: 164
          },
          end: {
            line: 113,
            column: 179
          }
        }],
        line: 113
      },
      "26": {
        loc: {
          start: {
            line: 113,
            column: 116
          },
          end: {
            line: 113,
            column: 152
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 116
          },
          end: {
            line: 113,
            column: 131
          }
        }, {
          start: {
            line: 113,
            column: 135
          },
          end: {
            line: 113,
            column: 152
          }
        }],
        line: 113
      },
      "27": {
        loc: {
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "28": {
        loc: {
          start: {
            line: 125,
            column: 15
          },
          end: {
            line: 125,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 125,
            column: 15
          },
          end: {
            line: 125,
            column: 19
          }
        }, {
          start: {
            line: 125,
            column: 23
          },
          end: {
            line: 125,
            column: 25
          }
        }],
        line: 125
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0, 0, 0],
      "12": [0, 0],
      "13": [0, 0, 0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/adapters/tool-call-adapter.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/adapters/tool-call-adapter.ts"],
      sourcesContent: ["import { ProviderResponse, RouteDecision, ToolSpec } from \"../types\";\n\n// OpenAI-like unified tool schema for cross-provider compatibility\nexport interface UnifiedToolSpec {\n  type: \"function\";\n  function: {\n    name: string;\n    description?: string;\n    parameters: {\n      type: \"object\";\n      properties: Record<string, any>;\n      required?: string[];\n      additionalProperties?: boolean;\n    };\n  };\n}\n\n// Enhanced tool call result with provider context\nexport interface UnifiedToolCall {\n  id?: string;\n  type: \"function\";\n  function: {\n    name: string;\n    arguments: string | Record<string, any>;\n  };\n  provider?: string;\n  confidence?: number;\n}\n\nexport interface ToolCallAdapter {\n  // Normalize tool definitions to provider-native format\n  mapTools(tools?: ToolSpec[]): any | undefined;\n\n  // Convert to unified OpenAI-like schema\n  toUnifiedSchema(tools?: ToolSpec[]): UnifiedToolSpec[] | undefined;\n\n  // Convert from unified schema to provider format\n  fromUnifiedSchema(tools?: UnifiedToolSpec[]): any | undefined;\n\n  // Build provider request payload from neutral decision\n  buildRequest(input: {\n    prompt: string;\n    decision: RouteDecision;\n    streaming?: boolean;\n    maxTokens?: number;\n    tools?: ToolSpec[] | UnifiedToolSpec[];\n  }): any;\n\n  // Parse provider response -> neutral shape\n  parseResponse(resp: any): ProviderResponse;\n\n  // Parse tool calls with enhanced error handling\n  parseToolCalls(resp: any): UnifiedToolCall[];\n\n  // Estimate token count for cost calculation\n  estimateTokens(text: string): { input: number; output: number };\n\n  // Get provider-specific configuration\n  getProviderConfig(): {\n    maxContextTokens: number;\n    supportsStreaming: boolean;\n    supportsTools: boolean;\n    supportsJsonMode?: boolean;\n    supportsVision?: boolean;\n    rateLimitRpm: number;\n    fallbackProvider?: string;\n  };\n\n  // Validate tool specification\n  validateToolSpec(tool: ToolSpec | UnifiedToolSpec): boolean;\n\n  // Check if provider supports specific tool features\n  supportsToolFeature(\n    feature: \"parallel_calls\" | \"streaming\" | \"json_schema\" | \"complex_types\"\n  ): boolean;\n}\n\nexport abstract class BaseAdapter implements ToolCallAdapter {\n  abstract mapTools(tools?: ToolSpec[]): any | undefined;\n  abstract buildRequest(input: {\n    prompt: string;\n    decision: RouteDecision;\n    streaming?: boolean;\n    maxTokens?: number;\n    tools?: ToolSpec[] | UnifiedToolSpec[];\n  }): any;\n  abstract parseResponse(resp: any): ProviderResponse;\n  abstract getProviderConfig(): {\n    maxContextTokens: number;\n    supportsStreaming: boolean;\n    supportsTools: boolean;\n    supportsJsonMode?: boolean;\n    supportsVision?: boolean;\n    rateLimitRpm: number;\n    fallbackProvider?: string;\n  };\n\n  // Convert ToolSpec to unified OpenAI-like schema\n  toUnifiedSchema(tools?: ToolSpec[]): UnifiedToolSpec[] | undefined {\n    if (!tools?.length) return undefined;\n\n    return tools.map((tool) => ({\n      type: \"function\" as const,\n      function: {\n        name: tool.name,\n        description: tool.description || `Execute ${tool.name} function`,\n        parameters: {\n          type: \"object\" as const,\n          properties: tool.parameters || {},\n          required: this.extractRequiredFields(tool.parameters),\n          additionalProperties: false,\n        },\n      },\n    }));\n  }\n\n  // Convert unified schema back to provider format (default implementation)\n  fromUnifiedSchema(tools?: UnifiedToolSpec[]): any | undefined {\n    if (!tools?.length) return undefined;\n\n    const toolSpecs: ToolSpec[] = tools.map((tool) => ({\n      name: tool.function.name,\n      description: tool.function.description,\n      parameters: tool.function.parameters.properties,\n    }));\n\n    return this.mapTools(toolSpecs);\n  }\n\n  // Parse tool calls with enhanced error handling\n  parseToolCalls(resp: any): UnifiedToolCall[] {\n    try {\n      const toolCalls = this.extractToolCallsFromResponse(resp);\n      return toolCalls.map((call, index) => ({\n        id: call.id || `call_${index}`,\n        type: \"function\" as const,\n        function: {\n          name: call.name,\n          arguments: this.normalizeArguments(call.arguments),\n        },\n        provider: this.getProviderName(),\n        confidence: call.confidence || 1.0,\n      }));\n    } catch (error) {\n      console.warn(`Failed to parse tool calls: ${error}`);\n      return [];\n    }\n  }\n\n  // Validate tool specification\n  validateToolSpec(tool: ToolSpec | UnifiedToolSpec): boolean {\n    try {\n      if (\"function\" in tool) {\n        // UnifiedToolSpec validation\n        const func = tool.function;\n        return !!(\n          func.name &&\n          func.parameters &&\n          func.parameters.type === \"object\" &&\n          func.parameters.properties\n        );\n      } else {\n        // ToolSpec validation\n        return !!(tool.name && typeof tool.name === \"string\");\n      }\n    } catch {\n      return false;\n    }\n  }\n\n  // Check if provider supports specific tool features (default: basic support)\n  supportsToolFeature(\n    feature: \"parallel_calls\" | \"streaming\" | \"json_schema\" | \"complex_types\"\n  ): boolean {\n    const config = this.getProviderConfig();\n    switch (feature) {\n      case \"parallel_calls\":\n        return config.supportsTools;\n      case \"streaming\":\n        return config.supportsStreaming && config.supportsTools;\n      case \"json_schema\":\n        return config.supportsJsonMode || false;\n      case \"complex_types\":\n        return config.supportsTools;\n      default:\n        return false;\n    }\n  }\n\n  // Simple token estimation (override for provider-specific tokenizers)\n  estimateTokens(text: string): { input: number; output: number } {\n    // Rough estimation: ~4 characters per token for most models\n    const tokens = Math.ceil(text.length / 4);\n    return { input: tokens, output: 0 };\n  }\n\n  // Common error handling with enhanced context\n  protected handleError(error: any, provider: string, context?: string): never {\n    const message = error?.message || \"Unknown error\";\n    const contextStr = context ? ` (${context})` : \"\";\n    throw new Error(`${provider} adapter error${contextStr}: ${message}`);\n  }\n\n  // Common response validation\n  protected validateResponse(resp: any, provider: string): void {\n    if (!resp) {\n      throw new Error(`${provider} returned empty response`);\n    }\n  }\n\n  // Helper methods for subclasses\n  protected extractRequiredFields(parameters?: Record<string, any>): string[] {\n    if (!parameters) return [];\n\n    return Object.entries(parameters)\n      .filter(\n        ([_, schema]) => schema?.required === true || schema?.nullable === false\n      )\n      .map(([key]) => key);\n  }\n\n  protected normalizeArguments(args: any): string | Record<string, any> {\n    if (typeof args === \"string\") {\n      try {\n        return JSON.parse(args);\n      } catch {\n        return args;\n      }\n    }\n    return args || {};\n  }\n\n  // Abstract methods for subclasses to implement\n  protected abstract extractToolCallsFromResponse(resp: any): Array<{\n    id?: string;\n    name: string;\n    arguments: any;\n    confidence?: number;\n  }>;\n\n  protected abstract getProviderName(): string;\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f4111e972a7d489575d53fe6b3653181bf1985b1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2dfhnwg8iq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2dfhnwg8iq();
cov_2dfhnwg8iq().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2dfhnwg8iq().s[1]++;
exports.BaseAdapter = void 0;
class BaseAdapter {
  // Convert ToolSpec to unified OpenAI-like schema
  toUnifiedSchema(tools) {
    /* istanbul ignore next */
    cov_2dfhnwg8iq().f[0]++;
    cov_2dfhnwg8iq().s[2]++;
    if (!(
    /* istanbul ignore next */
    (cov_2dfhnwg8iq().b[2][0]++, tools === null) ||
    /* istanbul ignore next */
    (cov_2dfhnwg8iq().b[2][1]++, tools === void 0) ?
    /* istanbul ignore next */
    (cov_2dfhnwg8iq().b[1][0]++, void 0) :
    /* istanbul ignore next */
    (cov_2dfhnwg8iq().b[1][1]++, tools.length))) {
      /* istanbul ignore next */
      cov_2dfhnwg8iq().b[0][0]++;
      cov_2dfhnwg8iq().s[3]++;
      return undefined;
    } else
    /* istanbul ignore next */
    {
      cov_2dfhnwg8iq().b[0][1]++;
    }
    cov_2dfhnwg8iq().s[4]++;
    return tools.map(tool => {
      /* istanbul ignore next */
      cov_2dfhnwg8iq().f[1]++;
      cov_2dfhnwg8iq().s[5]++;
      return {
        type: "function",
        function: {
          name: tool.name,
          description:
          /* istanbul ignore next */
          (cov_2dfhnwg8iq().b[3][0]++, tool.description) ||
          /* istanbul ignore next */
          (cov_2dfhnwg8iq().b[3][1]++, `Execute ${tool.name} function`),
          parameters: {
            type: "object",
            properties:
            /* istanbul ignore next */
            (cov_2dfhnwg8iq().b[4][0]++, tool.parameters) ||
            /* istanbul ignore next */
            (cov_2dfhnwg8iq().b[4][1]++, {}),
            required: this.extractRequiredFields(tool.parameters),
            additionalProperties: false
          }
        }
      };
    });
  }
  // Convert unified schema back to provider format (default implementation)
  fromUnifiedSchema(tools) {
    /* istanbul ignore next */
    cov_2dfhnwg8iq().f[2]++;
    cov_2dfhnwg8iq().s[6]++;
    if (!(
    /* istanbul ignore next */
    (cov_2dfhnwg8iq().b[7][0]++, tools === null) ||
    /* istanbul ignore next */
    (cov_2dfhnwg8iq().b[7][1]++, tools === void 0) ?
    /* istanbul ignore next */
    (cov_2dfhnwg8iq().b[6][0]++, void 0) :
    /* istanbul ignore next */
    (cov_2dfhnwg8iq().b[6][1]++, tools.length))) {
      /* istanbul ignore next */
      cov_2dfhnwg8iq().b[5][0]++;
      cov_2dfhnwg8iq().s[7]++;
      return undefined;
    } else
    /* istanbul ignore next */
    {
      cov_2dfhnwg8iq().b[5][1]++;
    }
    const toolSpecs =
    /* istanbul ignore next */
    (cov_2dfhnwg8iq().s[8]++, tools.map(tool => {
      /* istanbul ignore next */
      cov_2dfhnwg8iq().f[3]++;
      cov_2dfhnwg8iq().s[9]++;
      return {
        name: tool.function.name,
        description: tool.function.description,
        parameters: tool.function.parameters.properties
      };
    }));
    /* istanbul ignore next */
    cov_2dfhnwg8iq().s[10]++;
    return this.mapTools(toolSpecs);
  }
  // Parse tool calls with enhanced error handling
  parseToolCalls(resp) {
    /* istanbul ignore next */
    cov_2dfhnwg8iq().f[4]++;
    cov_2dfhnwg8iq().s[11]++;
    try {
      const toolCalls =
      /* istanbul ignore next */
      (cov_2dfhnwg8iq().s[12]++, this.extractToolCallsFromResponse(resp));
      /* istanbul ignore next */
      cov_2dfhnwg8iq().s[13]++;
      return toolCalls.map((call, index) => {
        /* istanbul ignore next */
        cov_2dfhnwg8iq().f[5]++;
        cov_2dfhnwg8iq().s[14]++;
        return {
          id:
          /* istanbul ignore next */
          (cov_2dfhnwg8iq().b[8][0]++, call.id) ||
          /* istanbul ignore next */
          (cov_2dfhnwg8iq().b[8][1]++, `call_${index}`),
          type: "function",
          function: {
            name: call.name,
            arguments: this.normalizeArguments(call.arguments)
          },
          provider: this.getProviderName(),
          confidence:
          /* istanbul ignore next */
          (cov_2dfhnwg8iq().b[9][0]++, call.confidence) ||
          /* istanbul ignore next */
          (cov_2dfhnwg8iq().b[9][1]++, 1.0)
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2dfhnwg8iq().s[15]++;
      console.warn(`Failed to parse tool calls: ${error}`);
      /* istanbul ignore next */
      cov_2dfhnwg8iq().s[16]++;
      return [];
    }
  }
  // Validate tool specification
  validateToolSpec(tool) {
    /* istanbul ignore next */
    cov_2dfhnwg8iq().f[6]++;
    cov_2dfhnwg8iq().s[17]++;
    try {
      /* istanbul ignore next */
      cov_2dfhnwg8iq().s[18]++;
      if ("function" in tool) {
        /* istanbul ignore next */
        cov_2dfhnwg8iq().b[10][0]++;
        // UnifiedToolSpec validation
        const func =
        /* istanbul ignore next */
        (cov_2dfhnwg8iq().s[19]++, tool.function);
        /* istanbul ignore next */
        cov_2dfhnwg8iq().s[20]++;
        return !!(
        /* istanbul ignore next */
        (cov_2dfhnwg8iq().b[11][0]++, func.name) &&
        /* istanbul ignore next */
        (cov_2dfhnwg8iq().b[11][1]++, func.parameters) &&
        /* istanbul ignore next */
        (cov_2dfhnwg8iq().b[11][2]++, func.parameters.type === "object") &&
        /* istanbul ignore next */
        (cov_2dfhnwg8iq().b[11][3]++, func.parameters.properties));
      } else {
        /* istanbul ignore next */
        cov_2dfhnwg8iq().b[10][1]++;
        cov_2dfhnwg8iq().s[21]++;
        // ToolSpec validation
        return !!(
        /* istanbul ignore next */
        (cov_2dfhnwg8iq().b[12][0]++, tool.name) &&
        /* istanbul ignore next */
        (cov_2dfhnwg8iq().b[12][1]++, typeof tool.name === "string"));
      }
    } catch (_a) {
      /* istanbul ignore next */
      cov_2dfhnwg8iq().s[22]++;
      return false;
    }
  }
  // Check if provider supports specific tool features (default: basic support)
  supportsToolFeature(feature) {
    /* istanbul ignore next */
    cov_2dfhnwg8iq().f[7]++;
    const config =
    /* istanbul ignore next */
    (cov_2dfhnwg8iq().s[23]++, this.getProviderConfig());
    /* istanbul ignore next */
    cov_2dfhnwg8iq().s[24]++;
    switch (feature) {
      case "parallel_calls":
        /* istanbul ignore next */
        cov_2dfhnwg8iq().b[13][0]++;
        cov_2dfhnwg8iq().s[25]++;
        return config.supportsTools;
      case "streaming":
        /* istanbul ignore next */
        cov_2dfhnwg8iq().b[13][1]++;
        cov_2dfhnwg8iq().s[26]++;
        return /* istanbul ignore next */(cov_2dfhnwg8iq().b[14][0]++, config.supportsStreaming) &&
        /* istanbul ignore next */
        (cov_2dfhnwg8iq().b[14][1]++, config.supportsTools);
      case "json_schema":
        /* istanbul ignore next */
        cov_2dfhnwg8iq().b[13][2]++;
        cov_2dfhnwg8iq().s[27]++;
        return /* istanbul ignore next */(cov_2dfhnwg8iq().b[15][0]++, config.supportsJsonMode) ||
        /* istanbul ignore next */
        (cov_2dfhnwg8iq().b[15][1]++, false);
      case "complex_types":
        /* istanbul ignore next */
        cov_2dfhnwg8iq().b[13][3]++;
        cov_2dfhnwg8iq().s[28]++;
        return config.supportsTools;
      default:
        /* istanbul ignore next */
        cov_2dfhnwg8iq().b[13][4]++;
        cov_2dfhnwg8iq().s[29]++;
        return false;
    }
  }
  // Simple token estimation (override for provider-specific tokenizers)
  estimateTokens(text) {
    /* istanbul ignore next */
    cov_2dfhnwg8iq().f[8]++;
    // Rough estimation: ~4 characters per token for most models
    const tokens =
    /* istanbul ignore next */
    (cov_2dfhnwg8iq().s[30]++, Math.ceil(text.length / 4));
    /* istanbul ignore next */
    cov_2dfhnwg8iq().s[31]++;
    return {
      input: tokens,
      output: 0
    };
  }
  // Common error handling with enhanced context
  handleError(error, provider, context) {
    /* istanbul ignore next */
    cov_2dfhnwg8iq().f[9]++;
    const message =
    /* istanbul ignore next */
    (cov_2dfhnwg8iq().s[32]++,
    /* istanbul ignore next */
    (cov_2dfhnwg8iq().b[16][0]++,
    /* istanbul ignore next */
    (cov_2dfhnwg8iq().b[18][0]++, error === null) ||
    /* istanbul ignore next */
    (cov_2dfhnwg8iq().b[18][1]++, error === void 0) ?
    /* istanbul ignore next */
    (cov_2dfhnwg8iq().b[17][0]++, void 0) :
    /* istanbul ignore next */
    (cov_2dfhnwg8iq().b[17][1]++, error.message)) ||
    /* istanbul ignore next */
    (cov_2dfhnwg8iq().b[16][1]++, "Unknown error"));
    const contextStr =
    /* istanbul ignore next */
    (cov_2dfhnwg8iq().s[33]++, context ?
    /* istanbul ignore next */
    (cov_2dfhnwg8iq().b[19][0]++, ` (${context})`) :
    /* istanbul ignore next */
    (cov_2dfhnwg8iq().b[19][1]++, ""));
    /* istanbul ignore next */
    cov_2dfhnwg8iq().s[34]++;
    throw new Error(`${provider} adapter error${contextStr}: ${message}`);
  }
  // Common response validation
  validateResponse(resp, provider) {
    /* istanbul ignore next */
    cov_2dfhnwg8iq().f[10]++;
    cov_2dfhnwg8iq().s[35]++;
    if (!resp) {
      /* istanbul ignore next */
      cov_2dfhnwg8iq().b[20][0]++;
      cov_2dfhnwg8iq().s[36]++;
      throw new Error(`${provider} returned empty response`);
    } else
    /* istanbul ignore next */
    {
      cov_2dfhnwg8iq().b[20][1]++;
    }
  }
  // Helper methods for subclasses
  extractRequiredFields(parameters) {
    /* istanbul ignore next */
    cov_2dfhnwg8iq().f[11]++;
    cov_2dfhnwg8iq().s[37]++;
    if (!parameters) {
      /* istanbul ignore next */
      cov_2dfhnwg8iq().b[21][0]++;
      cov_2dfhnwg8iq().s[38]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_2dfhnwg8iq().b[21][1]++;
    }
    cov_2dfhnwg8iq().s[39]++;
    return Object.entries(parameters).filter(([_, schema]) => {
      /* istanbul ignore next */
      cov_2dfhnwg8iq().f[12]++;
      cov_2dfhnwg8iq().s[40]++;
      return /* istanbul ignore next */(cov_2dfhnwg8iq().b[22][0]++, (
      /* istanbul ignore next */
      (cov_2dfhnwg8iq().b[24][0]++, schema === null) ||
      /* istanbul ignore next */
      (cov_2dfhnwg8iq().b[24][1]++, schema === void 0) ?
      /* istanbul ignore next */
      (cov_2dfhnwg8iq().b[23][0]++, void 0) :
      /* istanbul ignore next */
      (cov_2dfhnwg8iq().b[23][1]++, schema.required)) === true) ||
      /* istanbul ignore next */
      (cov_2dfhnwg8iq().b[22][1]++, (
      /* istanbul ignore next */
      (cov_2dfhnwg8iq().b[26][0]++, schema === null) ||
      /* istanbul ignore next */
      (cov_2dfhnwg8iq().b[26][1]++, schema === void 0) ?
      /* istanbul ignore next */
      (cov_2dfhnwg8iq().b[25][0]++, void 0) :
      /* istanbul ignore next */
      (cov_2dfhnwg8iq().b[25][1]++, schema.nullable)) === false);
    }).map(([key]) => {
      /* istanbul ignore next */
      cov_2dfhnwg8iq().f[13]++;
      cov_2dfhnwg8iq().s[41]++;
      return key;
    });
  }
  normalizeArguments(args) {
    /* istanbul ignore next */
    cov_2dfhnwg8iq().f[14]++;
    cov_2dfhnwg8iq().s[42]++;
    if (typeof args === "string") {
      /* istanbul ignore next */
      cov_2dfhnwg8iq().b[27][0]++;
      cov_2dfhnwg8iq().s[43]++;
      try {
        /* istanbul ignore next */
        cov_2dfhnwg8iq().s[44]++;
        return JSON.parse(args);
      } catch (_a) {
        /* istanbul ignore next */
        cov_2dfhnwg8iq().s[45]++;
        return args;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2dfhnwg8iq().b[27][1]++;
    }
    cov_2dfhnwg8iq().s[46]++;
    return /* istanbul ignore next */(cov_2dfhnwg8iq().b[28][0]++, args) ||
    /* istanbul ignore next */
    (cov_2dfhnwg8iq().b[28][1]++, {});
  }
}
/* istanbul ignore next */
cov_2dfhnwg8iq().s[47]++;
exports.BaseAdapter = BaseAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCYXNlQWRhcHRlciIsInRvVW5pZmllZFNjaGVtYSIsInRvb2xzIiwiY292XzJkZmhud2c4aXEiLCJmIiwicyIsImIiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJtYXAiLCJ0b29sIiwidHlwZSIsImZ1bmN0aW9uIiwibmFtZSIsImRlc2NyaXB0aW9uIiwicGFyYW1ldGVycyIsInByb3BlcnRpZXMiLCJyZXF1aXJlZCIsImV4dHJhY3RSZXF1aXJlZEZpZWxkcyIsImFkZGl0aW9uYWxQcm9wZXJ0aWVzIiwiZnJvbVVuaWZpZWRTY2hlbWEiLCJ0b29sU3BlY3MiLCJtYXBUb29scyIsInBhcnNlVG9vbENhbGxzIiwicmVzcCIsInRvb2xDYWxscyIsImV4dHJhY3RUb29sQ2FsbHNGcm9tUmVzcG9uc2UiLCJjYWxsIiwiaW5kZXgiLCJpZCIsImFyZ3VtZW50cyIsIm5vcm1hbGl6ZUFyZ3VtZW50cyIsInByb3ZpZGVyIiwiZ2V0UHJvdmlkZXJOYW1lIiwiY29uZmlkZW5jZSIsImVycm9yIiwiY29uc29sZSIsIndhcm4iLCJ2YWxpZGF0ZVRvb2xTcGVjIiwiZnVuYyIsIl9hIiwic3VwcG9ydHNUb29sRmVhdHVyZSIsImZlYXR1cmUiLCJjb25maWciLCJnZXRQcm92aWRlckNvbmZpZyIsInN1cHBvcnRzVG9vbHMiLCJzdXBwb3J0c1N0cmVhbWluZyIsInN1cHBvcnRzSnNvbk1vZGUiLCJlc3RpbWF0ZVRva2VucyIsInRleHQiLCJ0b2tlbnMiLCJNYXRoIiwiY2VpbCIsImlucHV0Iiwib3V0cHV0IiwiaGFuZGxlRXJyb3IiLCJjb250ZXh0IiwibWVzc2FnZSIsImNvbnRleHRTdHIiLCJFcnJvciIsInZhbGlkYXRlUmVzcG9uc2UiLCJPYmplY3QiLCJlbnRyaWVzIiwiZmlsdGVyIiwiXyIsInNjaGVtYSIsIm51bGxhYmxlIiwia2V5IiwiYXJncyIsIkpTT04iLCJwYXJzZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyIvVXNlcnMvbWF0YmFraC12aXNpYmlsaXR5LWJvb3N0LjIwMjUwOTIwL3NyYy9saWIvYWktb3JjaGVzdHJhdG9yL2FkYXB0ZXJzL3Rvb2wtY2FsbC1hZGFwdGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb3ZpZGVyUmVzcG9uc2UsIFJvdXRlRGVjaXNpb24sIFRvb2xTcGVjIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5cbi8vIE9wZW5BSS1saWtlIHVuaWZpZWQgdG9vbCBzY2hlbWEgZm9yIGNyb3NzLXByb3ZpZGVyIGNvbXBhdGliaWxpdHlcbmV4cG9ydCBpbnRlcmZhY2UgVW5pZmllZFRvb2xTcGVjIHtcbiAgdHlwZTogXCJmdW5jdGlvblwiO1xuICBmdW5jdGlvbjoge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICB0eXBlOiBcIm9iamVjdFwiO1xuICAgICAgcHJvcGVydGllczogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgICAgIHJlcXVpcmVkPzogc3RyaW5nW107XG4gICAgICBhZGRpdGlvbmFsUHJvcGVydGllcz86IGJvb2xlYW47XG4gICAgfTtcbiAgfTtcbn1cblxuLy8gRW5oYW5jZWQgdG9vbCBjYWxsIHJlc3VsdCB3aXRoIHByb3ZpZGVyIGNvbnRleHRcbmV4cG9ydCBpbnRlcmZhY2UgVW5pZmllZFRvb2xDYWxsIHtcbiAgaWQ/OiBzdHJpbmc7XG4gIHR5cGU6IFwiZnVuY3Rpb25cIjtcbiAgZnVuY3Rpb246IHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgYXJndW1lbnRzOiBzdHJpbmcgfCBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuICB9O1xuICBwcm92aWRlcj86IHN0cmluZztcbiAgY29uZmlkZW5jZT86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUb29sQ2FsbEFkYXB0ZXIge1xuICAvLyBOb3JtYWxpemUgdG9vbCBkZWZpbml0aW9ucyB0byBwcm92aWRlci1uYXRpdmUgZm9ybWF0XG4gIG1hcFRvb2xzKHRvb2xzPzogVG9vbFNwZWNbXSk6IGFueSB8IHVuZGVmaW5lZDtcblxuICAvLyBDb252ZXJ0IHRvIHVuaWZpZWQgT3BlbkFJLWxpa2Ugc2NoZW1hXG4gIHRvVW5pZmllZFNjaGVtYSh0b29scz86IFRvb2xTcGVjW10pOiBVbmlmaWVkVG9vbFNwZWNbXSB8IHVuZGVmaW5lZDtcblxuICAvLyBDb252ZXJ0IGZyb20gdW5pZmllZCBzY2hlbWEgdG8gcHJvdmlkZXIgZm9ybWF0XG4gIGZyb21VbmlmaWVkU2NoZW1hKHRvb2xzPzogVW5pZmllZFRvb2xTcGVjW10pOiBhbnkgfCB1bmRlZmluZWQ7XG5cbiAgLy8gQnVpbGQgcHJvdmlkZXIgcmVxdWVzdCBwYXlsb2FkIGZyb20gbmV1dHJhbCBkZWNpc2lvblxuICBidWlsZFJlcXVlc3QoaW5wdXQ6IHtcbiAgICBwcm9tcHQ6IHN0cmluZztcbiAgICBkZWNpc2lvbjogUm91dGVEZWNpc2lvbjtcbiAgICBzdHJlYW1pbmc/OiBib29sZWFuO1xuICAgIG1heFRva2Vucz86IG51bWJlcjtcbiAgICB0b29scz86IFRvb2xTcGVjW10gfCBVbmlmaWVkVG9vbFNwZWNbXTtcbiAgfSk6IGFueTtcblxuICAvLyBQYXJzZSBwcm92aWRlciByZXNwb25zZSAtPiBuZXV0cmFsIHNoYXBlXG4gIHBhcnNlUmVzcG9uc2UocmVzcDogYW55KTogUHJvdmlkZXJSZXNwb25zZTtcblxuICAvLyBQYXJzZSB0b29sIGNhbGxzIHdpdGggZW5oYW5jZWQgZXJyb3IgaGFuZGxpbmdcbiAgcGFyc2VUb29sQ2FsbHMocmVzcDogYW55KTogVW5pZmllZFRvb2xDYWxsW107XG5cbiAgLy8gRXN0aW1hdGUgdG9rZW4gY291bnQgZm9yIGNvc3QgY2FsY3VsYXRpb25cbiAgZXN0aW1hdGVUb2tlbnModGV4dDogc3RyaW5nKTogeyBpbnB1dDogbnVtYmVyOyBvdXRwdXQ6IG51bWJlciB9O1xuXG4gIC8vIEdldCBwcm92aWRlci1zcGVjaWZpYyBjb25maWd1cmF0aW9uXG4gIGdldFByb3ZpZGVyQ29uZmlnKCk6IHtcbiAgICBtYXhDb250ZXh0VG9rZW5zOiBudW1iZXI7XG4gICAgc3VwcG9ydHNTdHJlYW1pbmc6IGJvb2xlYW47XG4gICAgc3VwcG9ydHNUb29sczogYm9vbGVhbjtcbiAgICBzdXBwb3J0c0pzb25Nb2RlPzogYm9vbGVhbjtcbiAgICBzdXBwb3J0c1Zpc2lvbj86IGJvb2xlYW47XG4gICAgcmF0ZUxpbWl0UnBtOiBudW1iZXI7XG4gICAgZmFsbGJhY2tQcm92aWRlcj86IHN0cmluZztcbiAgfTtcblxuICAvLyBWYWxpZGF0ZSB0b29sIHNwZWNpZmljYXRpb25cbiAgdmFsaWRhdGVUb29sU3BlYyh0b29sOiBUb29sU3BlYyB8IFVuaWZpZWRUb29sU3BlYyk6IGJvb2xlYW47XG5cbiAgLy8gQ2hlY2sgaWYgcHJvdmlkZXIgc3VwcG9ydHMgc3BlY2lmaWMgdG9vbCBmZWF0dXJlc1xuICBzdXBwb3J0c1Rvb2xGZWF0dXJlKFxuICAgIGZlYXR1cmU6IFwicGFyYWxsZWxfY2FsbHNcIiB8IFwic3RyZWFtaW5nXCIgfCBcImpzb25fc2NoZW1hXCIgfCBcImNvbXBsZXhfdHlwZXNcIlxuICApOiBib29sZWFuO1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZUFkYXB0ZXIgaW1wbGVtZW50cyBUb29sQ2FsbEFkYXB0ZXIge1xuICBhYnN0cmFjdCBtYXBUb29scyh0b29scz86IFRvb2xTcGVjW10pOiBhbnkgfCB1bmRlZmluZWQ7XG4gIGFic3RyYWN0IGJ1aWxkUmVxdWVzdChpbnB1dDoge1xuICAgIHByb21wdDogc3RyaW5nO1xuICAgIGRlY2lzaW9uOiBSb3V0ZURlY2lzaW9uO1xuICAgIHN0cmVhbWluZz86IGJvb2xlYW47XG4gICAgbWF4VG9rZW5zPzogbnVtYmVyO1xuICAgIHRvb2xzPzogVG9vbFNwZWNbXSB8IFVuaWZpZWRUb29sU3BlY1tdO1xuICB9KTogYW55O1xuICBhYnN0cmFjdCBwYXJzZVJlc3BvbnNlKHJlc3A6IGFueSk6IFByb3ZpZGVyUmVzcG9uc2U7XG4gIGFic3RyYWN0IGdldFByb3ZpZGVyQ29uZmlnKCk6IHtcbiAgICBtYXhDb250ZXh0VG9rZW5zOiBudW1iZXI7XG4gICAgc3VwcG9ydHNTdHJlYW1pbmc6IGJvb2xlYW47XG4gICAgc3VwcG9ydHNUb29sczogYm9vbGVhbjtcbiAgICBzdXBwb3J0c0pzb25Nb2RlPzogYm9vbGVhbjtcbiAgICBzdXBwb3J0c1Zpc2lvbj86IGJvb2xlYW47XG4gICAgcmF0ZUxpbWl0UnBtOiBudW1iZXI7XG4gICAgZmFsbGJhY2tQcm92aWRlcj86IHN0cmluZztcbiAgfTtcblxuICAvLyBDb252ZXJ0IFRvb2xTcGVjIHRvIHVuaWZpZWQgT3BlbkFJLWxpa2Ugc2NoZW1hXG4gIHRvVW5pZmllZFNjaGVtYSh0b29scz86IFRvb2xTcGVjW10pOiBVbmlmaWVkVG9vbFNwZWNbXSB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKCF0b29scz8ubGVuZ3RoKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgcmV0dXJuIHRvb2xzLm1hcCgodG9vbCkgPT4gKHtcbiAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIiBhcyBjb25zdCxcbiAgICAgIGZ1bmN0aW9uOiB7XG4gICAgICAgIG5hbWU6IHRvb2wubmFtZSxcbiAgICAgICAgZGVzY3JpcHRpb246IHRvb2wuZGVzY3JpcHRpb24gfHwgYEV4ZWN1dGUgJHt0b29sLm5hbWV9IGZ1bmN0aW9uYCxcbiAgICAgICAgcGFyYW1ldGVyczoge1xuICAgICAgICAgIHR5cGU6IFwib2JqZWN0XCIgYXMgY29uc3QsXG4gICAgICAgICAgcHJvcGVydGllczogdG9vbC5wYXJhbWV0ZXJzIHx8IHt9LFxuICAgICAgICAgIHJlcXVpcmVkOiB0aGlzLmV4dHJhY3RSZXF1aXJlZEZpZWxkcyh0b29sLnBhcmFtZXRlcnMpLFxuICAgICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSkpO1xuICB9XG5cbiAgLy8gQ29udmVydCB1bmlmaWVkIHNjaGVtYSBiYWNrIHRvIHByb3ZpZGVyIGZvcm1hdCAoZGVmYXVsdCBpbXBsZW1lbnRhdGlvbilcbiAgZnJvbVVuaWZpZWRTY2hlbWEodG9vbHM/OiBVbmlmaWVkVG9vbFNwZWNbXSk6IGFueSB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKCF0b29scz8ubGVuZ3RoKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgY29uc3QgdG9vbFNwZWNzOiBUb29sU3BlY1tdID0gdG9vbHMubWFwKCh0b29sKSA9PiAoe1xuICAgICAgbmFtZTogdG9vbC5mdW5jdGlvbi5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IHRvb2wuZnVuY3Rpb24uZGVzY3JpcHRpb24sXG4gICAgICBwYXJhbWV0ZXJzOiB0b29sLmZ1bmN0aW9uLnBhcmFtZXRlcnMucHJvcGVydGllcyxcbiAgICB9KSk7XG5cbiAgICByZXR1cm4gdGhpcy5tYXBUb29scyh0b29sU3BlY3MpO1xuICB9XG5cbiAgLy8gUGFyc2UgdG9vbCBjYWxscyB3aXRoIGVuaGFuY2VkIGVycm9yIGhhbmRsaW5nXG4gIHBhcnNlVG9vbENhbGxzKHJlc3A6IGFueSk6IFVuaWZpZWRUb29sQ2FsbFtdIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdG9vbENhbGxzID0gdGhpcy5leHRyYWN0VG9vbENhbGxzRnJvbVJlc3BvbnNlKHJlc3ApO1xuICAgICAgcmV0dXJuIHRvb2xDYWxscy5tYXAoKGNhbGwsIGluZGV4KSA9PiAoe1xuICAgICAgICBpZDogY2FsbC5pZCB8fCBgY2FsbF8ke2luZGV4fWAsXG4gICAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIiBhcyBjb25zdCxcbiAgICAgICAgZnVuY3Rpb246IHtcbiAgICAgICAgICBuYW1lOiBjYWxsLm5hbWUsXG4gICAgICAgICAgYXJndW1lbnRzOiB0aGlzLm5vcm1hbGl6ZUFyZ3VtZW50cyhjYWxsLmFyZ3VtZW50cyksXG4gICAgICAgIH0sXG4gICAgICAgIHByb3ZpZGVyOiB0aGlzLmdldFByb3ZpZGVyTmFtZSgpLFxuICAgICAgICBjb25maWRlbmNlOiBjYWxsLmNvbmZpZGVuY2UgfHwgMS4wLFxuICAgICAgfSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oYEZhaWxlZCB0byBwYXJzZSB0b29sIGNhbGxzOiAke2Vycm9yfWApO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfVxuXG4gIC8vIFZhbGlkYXRlIHRvb2wgc3BlY2lmaWNhdGlvblxuICB2YWxpZGF0ZVRvb2xTcGVjKHRvb2w6IFRvb2xTcGVjIHwgVW5pZmllZFRvb2xTcGVjKTogYm9vbGVhbiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgaW4gdG9vbCkge1xuICAgICAgICAvLyBVbmlmaWVkVG9vbFNwZWMgdmFsaWRhdGlvblxuICAgICAgICBjb25zdCBmdW5jID0gdG9vbC5mdW5jdGlvbjtcbiAgICAgICAgcmV0dXJuICEhKFxuICAgICAgICAgIGZ1bmMubmFtZSAmJlxuICAgICAgICAgIGZ1bmMucGFyYW1ldGVycyAmJlxuICAgICAgICAgIGZ1bmMucGFyYW1ldGVycy50eXBlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgZnVuYy5wYXJhbWV0ZXJzLnByb3BlcnRpZXNcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRvb2xTcGVjIHZhbGlkYXRpb25cbiAgICAgICAgcmV0dXJuICEhKHRvb2wubmFtZSAmJiB0eXBlb2YgdG9vbC5uYW1lID09PSBcInN0cmluZ1wiKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBDaGVjayBpZiBwcm92aWRlciBzdXBwb3J0cyBzcGVjaWZpYyB0b29sIGZlYXR1cmVzIChkZWZhdWx0OiBiYXNpYyBzdXBwb3J0KVxuICBzdXBwb3J0c1Rvb2xGZWF0dXJlKFxuICAgIGZlYXR1cmU6IFwicGFyYWxsZWxfY2FsbHNcIiB8IFwic3RyZWFtaW5nXCIgfCBcImpzb25fc2NoZW1hXCIgfCBcImNvbXBsZXhfdHlwZXNcIlxuICApOiBib29sZWFuIHtcbiAgICBjb25zdCBjb25maWcgPSB0aGlzLmdldFByb3ZpZGVyQ29uZmlnKCk7XG4gICAgc3dpdGNoIChmZWF0dXJlKSB7XG4gICAgICBjYXNlIFwicGFyYWxsZWxfY2FsbHNcIjpcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5zdXBwb3J0c1Rvb2xzO1xuICAgICAgY2FzZSBcInN0cmVhbWluZ1wiOlxuICAgICAgICByZXR1cm4gY29uZmlnLnN1cHBvcnRzU3RyZWFtaW5nICYmIGNvbmZpZy5zdXBwb3J0c1Rvb2xzO1xuICAgICAgY2FzZSBcImpzb25fc2NoZW1hXCI6XG4gICAgICAgIHJldHVybiBjb25maWcuc3VwcG9ydHNKc29uTW9kZSB8fCBmYWxzZTtcbiAgICAgIGNhc2UgXCJjb21wbGV4X3R5cGVzXCI6XG4gICAgICAgIHJldHVybiBjb25maWcuc3VwcG9ydHNUb29scztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBTaW1wbGUgdG9rZW4gZXN0aW1hdGlvbiAob3ZlcnJpZGUgZm9yIHByb3ZpZGVyLXNwZWNpZmljIHRva2VuaXplcnMpXG4gIGVzdGltYXRlVG9rZW5zKHRleHQ6IHN0cmluZyk6IHsgaW5wdXQ6IG51bWJlcjsgb3V0cHV0OiBudW1iZXIgfSB7XG4gICAgLy8gUm91Z2ggZXN0aW1hdGlvbjogfjQgY2hhcmFjdGVycyBwZXIgdG9rZW4gZm9yIG1vc3QgbW9kZWxzXG4gICAgY29uc3QgdG9rZW5zID0gTWF0aC5jZWlsKHRleHQubGVuZ3RoIC8gNCk7XG4gICAgcmV0dXJuIHsgaW5wdXQ6IHRva2Vucywgb3V0cHV0OiAwIH07XG4gIH1cblxuICAvLyBDb21tb24gZXJyb3IgaGFuZGxpbmcgd2l0aCBlbmhhbmNlZCBjb250ZXh0XG4gIHByb3RlY3RlZCBoYW5kbGVFcnJvcihlcnJvcjogYW55LCBwcm92aWRlcjogc3RyaW5nLCBjb250ZXh0Pzogc3RyaW5nKTogbmV2ZXIge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBlcnJvcj8ubWVzc2FnZSB8fCBcIlVua25vd24gZXJyb3JcIjtcbiAgICBjb25zdCBjb250ZXh0U3RyID0gY29udGV4dCA/IGAgKCR7Y29udGV4dH0pYCA6IFwiXCI7XG4gICAgdGhyb3cgbmV3IEVycm9yKGAke3Byb3ZpZGVyfSBhZGFwdGVyIGVycm9yJHtjb250ZXh0U3RyfTogJHttZXNzYWdlfWApO1xuICB9XG5cbiAgLy8gQ29tbW9uIHJlc3BvbnNlIHZhbGlkYXRpb25cbiAgcHJvdGVjdGVkIHZhbGlkYXRlUmVzcG9uc2UocmVzcDogYW55LCBwcm92aWRlcjogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKCFyZXNwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cHJvdmlkZXJ9IHJldHVybmVkIGVtcHR5IHJlc3BvbnNlYCk7XG4gICAgfVxuICB9XG5cbiAgLy8gSGVscGVyIG1ldGhvZHMgZm9yIHN1YmNsYXNzZXNcbiAgcHJvdGVjdGVkIGV4dHJhY3RSZXF1aXJlZEZpZWxkcyhwYXJhbWV0ZXJzPzogUmVjb3JkPHN0cmluZywgYW55Pik6IHN0cmluZ1tdIHtcbiAgICBpZiAoIXBhcmFtZXRlcnMpIHJldHVybiBbXTtcblxuICAgIHJldHVybiBPYmplY3QuZW50cmllcyhwYXJhbWV0ZXJzKVxuICAgICAgLmZpbHRlcihcbiAgICAgICAgKFtfLCBzY2hlbWFdKSA9PiBzY2hlbWE/LnJlcXVpcmVkID09PSB0cnVlIHx8IHNjaGVtYT8ubnVsbGFibGUgPT09IGZhbHNlXG4gICAgICApXG4gICAgICAubWFwKChba2V5XSkgPT4ga2V5KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBub3JtYWxpemVBcmd1bWVudHMoYXJnczogYW55KTogc3RyaW5nIHwgUmVjb3JkPHN0cmluZywgYW55PiB7XG4gICAgaWYgKHR5cGVvZiBhcmdzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShhcmdzKTtcbiAgICAgIH0gY2F0Y2gge1xuICAgICAgICByZXR1cm4gYXJncztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFyZ3MgfHwge307XG4gIH1cblxuICAvLyBBYnN0cmFjdCBtZXRob2RzIGZvciBzdWJjbGFzc2VzIHRvIGltcGxlbWVudFxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgZXh0cmFjdFRvb2xDYWxsc0Zyb21SZXNwb25zZShyZXNwOiBhbnkpOiBBcnJheTx7XG4gICAgaWQ/OiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGFyZ3VtZW50czogYW55O1xuICAgIGNvbmZpZGVuY2U/OiBudW1iZXI7XG4gIH0+O1xuXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBnZXRQcm92aWRlck5hbWUoKTogc3RyaW5nO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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
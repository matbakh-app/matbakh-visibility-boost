{"version":3,"names":["BaseAdapter","toUnifiedSchema","tools","cov_2dfhnwg8iq","f","s","b","length","undefined","map","tool","type","function","name","description","parameters","properties","required","extractRequiredFields","additionalProperties","fromUnifiedSchema","toolSpecs","mapTools","parseToolCalls","resp","toolCalls","extractToolCallsFromResponse","call","index","id","arguments","normalizeArguments","provider","getProviderName","confidence","error","console","warn","validateToolSpec","func","_a","supportsToolFeature","feature","config","getProviderConfig","supportsTools","supportsStreaming","supportsJsonMode","estimateTokens","text","tokens","Math","ceil","input","output","handleError","context","message","contextStr","Error","validateResponse","Object","entries","filter","_","schema","nullable","key","args","JSON","parse","exports"],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/adapters/tool-call-adapter.ts"],"sourcesContent":["import { ProviderResponse, RouteDecision, ToolSpec } from \"../types\";\n\n// OpenAI-like unified tool schema for cross-provider compatibility\nexport interface UnifiedToolSpec {\n  type: \"function\";\n  function: {\n    name: string;\n    description?: string;\n    parameters: {\n      type: \"object\";\n      properties: Record<string, any>;\n      required?: string[];\n      additionalProperties?: boolean;\n    };\n  };\n}\n\n// Enhanced tool call result with provider context\nexport interface UnifiedToolCall {\n  id?: string;\n  type: \"function\";\n  function: {\n    name: string;\n    arguments: string | Record<string, any>;\n  };\n  provider?: string;\n  confidence?: number;\n}\n\nexport interface ToolCallAdapter {\n  // Normalize tool definitions to provider-native format\n  mapTools(tools?: ToolSpec[]): any | undefined;\n\n  // Convert to unified OpenAI-like schema\n  toUnifiedSchema(tools?: ToolSpec[]): UnifiedToolSpec[] | undefined;\n\n  // Convert from unified schema to provider format\n  fromUnifiedSchema(tools?: UnifiedToolSpec[]): any | undefined;\n\n  // Build provider request payload from neutral decision\n  buildRequest(input: {\n    prompt: string;\n    decision: RouteDecision;\n    streaming?: boolean;\n    maxTokens?: number;\n    tools?: ToolSpec[] | UnifiedToolSpec[];\n  }): any;\n\n  // Parse provider response -> neutral shape\n  parseResponse(resp: any): ProviderResponse;\n\n  // Parse tool calls with enhanced error handling\n  parseToolCalls(resp: any): UnifiedToolCall[];\n\n  // Estimate token count for cost calculation\n  estimateTokens(text: string): { input: number; output: number };\n\n  // Get provider-specific configuration\n  getProviderConfig(): {\n    maxContextTokens: number;\n    supportsStreaming: boolean;\n    supportsTools: boolean;\n    supportsJsonMode?: boolean;\n    supportsVision?: boolean;\n    rateLimitRpm: number;\n    fallbackProvider?: string;\n  };\n\n  // Validate tool specification\n  validateToolSpec(tool: ToolSpec | UnifiedToolSpec): boolean;\n\n  // Check if provider supports specific tool features\n  supportsToolFeature(\n    feature: \"parallel_calls\" | \"streaming\" | \"json_schema\" | \"complex_types\"\n  ): boolean;\n}\n\nexport abstract class BaseAdapter implements ToolCallAdapter {\n  abstract mapTools(tools?: ToolSpec[]): any | undefined;\n  abstract buildRequest(input: {\n    prompt: string;\n    decision: RouteDecision;\n    streaming?: boolean;\n    maxTokens?: number;\n    tools?: ToolSpec[] | UnifiedToolSpec[];\n  }): any;\n  abstract parseResponse(resp: any): ProviderResponse;\n  abstract getProviderConfig(): {\n    maxContextTokens: number;\n    supportsStreaming: boolean;\n    supportsTools: boolean;\n    supportsJsonMode?: boolean;\n    supportsVision?: boolean;\n    rateLimitRpm: number;\n    fallbackProvider?: string;\n  };\n\n  // Convert ToolSpec to unified OpenAI-like schema\n  toUnifiedSchema(tools?: ToolSpec[]): UnifiedToolSpec[] | undefined {\n    if (!tools?.length) return undefined;\n\n    return tools.map((tool) => ({\n      type: \"function\" as const,\n      function: {\n        name: tool.name,\n        description: tool.description || `Execute ${tool.name} function`,\n        parameters: {\n          type: \"object\" as const,\n          properties: tool.parameters || {},\n          required: this.extractRequiredFields(tool.parameters),\n          additionalProperties: false,\n        },\n      },\n    }));\n  }\n\n  // Convert unified schema back to provider format (default implementation)\n  fromUnifiedSchema(tools?: UnifiedToolSpec[]): any | undefined {\n    if (!tools?.length) return undefined;\n\n    const toolSpecs: ToolSpec[] = tools.map((tool) => ({\n      name: tool.function.name,\n      description: tool.function.description,\n      parameters: tool.function.parameters.properties,\n    }));\n\n    return this.mapTools(toolSpecs);\n  }\n\n  // Parse tool calls with enhanced error handling\n  parseToolCalls(resp: any): UnifiedToolCall[] {\n    try {\n      const toolCalls = this.extractToolCallsFromResponse(resp);\n      return toolCalls.map((call, index) => ({\n        id: call.id || `call_${index}`,\n        type: \"function\" as const,\n        function: {\n          name: call.name,\n          arguments: this.normalizeArguments(call.arguments),\n        },\n        provider: this.getProviderName(),\n        confidence: call.confidence || 1.0,\n      }));\n    } catch (error) {\n      console.warn(`Failed to parse tool calls: ${error}`);\n      return [];\n    }\n  }\n\n  // Validate tool specification\n  validateToolSpec(tool: ToolSpec | UnifiedToolSpec): boolean {\n    try {\n      if (\"function\" in tool) {\n        // UnifiedToolSpec validation\n        const func = tool.function;\n        return !!(\n          func.name &&\n          func.parameters &&\n          func.parameters.type === \"object\" &&\n          func.parameters.properties\n        );\n      } else {\n        // ToolSpec validation\n        return !!(tool.name && typeof tool.name === \"string\");\n      }\n    } catch {\n      return false;\n    }\n  }\n\n  // Check if provider supports specific tool features (default: basic support)\n  supportsToolFeature(\n    feature: \"parallel_calls\" | \"streaming\" | \"json_schema\" | \"complex_types\"\n  ): boolean {\n    const config = this.getProviderConfig();\n    switch (feature) {\n      case \"parallel_calls\":\n        return config.supportsTools;\n      case \"streaming\":\n        return config.supportsStreaming && config.supportsTools;\n      case \"json_schema\":\n        return config.supportsJsonMode || false;\n      case \"complex_types\":\n        return config.supportsTools;\n      default:\n        return false;\n    }\n  }\n\n  // Simple token estimation (override for provider-specific tokenizers)\n  estimateTokens(text: string): { input: number; output: number } {\n    // Rough estimation: ~4 characters per token for most models\n    const tokens = Math.ceil(text.length / 4);\n    return { input: tokens, output: 0 };\n  }\n\n  // Common error handling with enhanced context\n  protected handleError(error: any, provider: string, context?: string): never {\n    const message = error?.message || \"Unknown error\";\n    const contextStr = context ? ` (${context})` : \"\";\n    throw new Error(`${provider} adapter error${contextStr}: ${message}`);\n  }\n\n  // Common response validation\n  protected validateResponse(resp: any, provider: string): void {\n    if (!resp) {\n      throw new Error(`${provider} returned empty response`);\n    }\n  }\n\n  // Helper methods for subclasses\n  protected extractRequiredFields(parameters?: Record<string, any>): string[] {\n    if (!parameters) return [];\n\n    return Object.entries(parameters)\n      .filter(\n        ([_, schema]) => schema?.required === true || schema?.nullable === false\n      )\n      .map(([key]) => key);\n  }\n\n  protected normalizeArguments(args: any): string | Record<string, any> {\n    if (typeof args === \"string\") {\n      try {\n        return JSON.parse(args);\n      } catch {\n        return args;\n      }\n    }\n    return args || {};\n  }\n\n  // Abstract methods for subclasses to implement\n  protected abstract extractToolCallsFromResponse(resp: any): Array<{\n    id?: string;\n    name: string;\n    arguments: any;\n    confidence?: number;\n  }>;\n\n  protected abstract getProviderName(): string;\n}\n"],"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","ignoreList":[]}
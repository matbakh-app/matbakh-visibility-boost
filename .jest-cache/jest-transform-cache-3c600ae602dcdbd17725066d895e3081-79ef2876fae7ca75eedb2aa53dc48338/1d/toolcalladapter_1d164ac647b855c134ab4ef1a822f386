0c3965446d02c4be1268871db87c84ea
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseAdapter = void 0;
class BaseAdapter {
    // Convert ToolSpec to unified OpenAI-like schema
    toUnifiedSchema(tools) {
        if (!tools?.length)
            return undefined;
        return tools.map((tool) => ({
            type: "function",
            function: {
                name: tool.name,
                description: tool.description || `Execute ${tool.name} function`,
                parameters: {
                    type: "object",
                    properties: tool.parameters || {},
                    required: this.extractRequiredFields(tool.parameters),
                    additionalProperties: false,
                },
            },
        }));
    }
    // Convert unified schema back to provider format (default implementation)
    fromUnifiedSchema(tools) {
        if (!tools?.length)
            return undefined;
        const toolSpecs = tools.map((tool) => ({
            name: tool.function.name,
            description: tool.function.description,
            parameters: tool.function.parameters.properties,
        }));
        return this.mapTools(toolSpecs);
    }
    // Parse tool calls with enhanced error handling
    parseToolCalls(resp) {
        try {
            const toolCalls = this.extractToolCallsFromResponse(resp);
            return toolCalls.map((call, index) => ({
                id: call.id || `call_${index}`,
                type: "function",
                function: {
                    name: call.name,
                    arguments: this.normalizeArguments(call.arguments),
                },
                provider: this.getProviderName(),
                confidence: call.confidence || 1.0,
            }));
        }
        catch (error) {
            console.warn(`Failed to parse tool calls: ${error}`);
            return [];
        }
    }
    // Validate tool specification
    validateToolSpec(tool) {
        try {
            if ("function" in tool) {
                // UnifiedToolSpec validation
                const func = tool.function;
                return !!(func.name &&
                    func.parameters &&
                    func.parameters.type === "object" &&
                    func.parameters.properties);
            }
            else {
                // ToolSpec validation
                return !!(tool.name && typeof tool.name === "string");
            }
        }
        catch {
            return false;
        }
    }
    // Check if provider supports specific tool features (default: basic support)
    supportsToolFeature(feature) {
        const config = this.getProviderConfig();
        switch (feature) {
            case "parallel_calls":
                return config.supportsTools;
            case "streaming":
                return config.supportsStreaming && config.supportsTools;
            case "json_schema":
                return config.supportsJsonMode || false;
            case "complex_types":
                return config.supportsTools;
            default:
                return false;
        }
    }
    // Simple token estimation (override for provider-specific tokenizers)
    estimateTokens(text) {
        // Rough estimation: ~4 characters per token for most models
        const tokens = Math.ceil(text.length / 4);
        return { input: tokens, output: 0 };
    }
    // Common error handling with enhanced context
    handleError(error, provider, context) {
        const message = error?.message || "Unknown error";
        const contextStr = context ? ` (${context})` : "";
        throw new Error(`${provider} adapter error${contextStr}: ${message}`);
    }
    // Common response validation
    validateResponse(resp, provider) {
        if (!resp) {
            throw new Error(`${provider} returned empty response`);
        }
    }
    // Helper methods for subclasses
    extractRequiredFields(parameters) {
        if (!parameters)
            return [];
        return Object.entries(parameters)
            .filter(([_, schema]) => schema?.required === true || schema?.nullable === false)
            .map(([key]) => key);
    }
    normalizeArguments(args) {
        if (typeof args === "string") {
            try {
                return JSON.parse(args);
            }
            catch {
                return args;
            }
        }
        return args || {};
    }
}
exports.BaseAdapter = BaseAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
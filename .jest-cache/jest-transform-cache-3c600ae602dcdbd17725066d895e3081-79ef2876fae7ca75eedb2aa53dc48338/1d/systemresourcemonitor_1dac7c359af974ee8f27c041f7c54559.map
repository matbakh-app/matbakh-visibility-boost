{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/system-resource-monitor.ts","mappings":";AAAA;;;;;;;GAOG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDH;;;GAGG;AACH,MAAM,cAAc,GAA0B;IAC5C,OAAO,EAAE,IAAI;IACb,oBAAoB,EAAE,IAAI,EAAE,YAAY;IACxC,oBAAoB,EAAE,KAAK,EAAE,aAAa;IAC1C,kBAAkB,EAAE,OAAO,EAAE,SAAS;IACtC,UAAU,EAAE;QACV,iBAAiB,EAAE,GAAG,EAAE,mBAAmB;QAC3C,kBAAkB,EAAE,GAAG,EAAE,kBAAkB;QAC3C,eAAe,EAAE,EAAE,EAAE,sBAAsB;QAC3C,gBAAgB,EAAE,EAAE,EAAE,uBAAuB;KAC9C;IACD,YAAY,EAAE,IAAI;IAClB,eAAe,EAAE,MAAM,EAAE,YAAY;CACtC,CAAC;AAEF;;;;GAIG;AACH,MAAa,qBAAqB;IAWtB;IACA;IAXF,MAAM,CAAwB;IAC9B,OAAO,CAA0B;IACjC,MAAM,CAAkB;IACxB,aAAa,CAAoB;IACjC,eAAe,CAAkB;IACjC,UAAU,CAAkB;IAC5B,YAAY,CAAU;IACtB,eAAe,CAAyB;IAEhD,YACU,YAA4B,EAC5B,UAA4B,EACpC,MAAuC;QAF/B,iBAAY,GAAZ,YAAY,CAAgB;QAC5B,eAAU,GAAV,UAAU,CAAkB;QAGpC,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,cAAc,EAAE,GAAG,MAAM,EAAE,CAAC;QAC/C,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,EAAE,CAAC;QAC/B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;IAC5B,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,eAAe;QAC1B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;YACzB,OAAO,CAAC,GAAG,CACT,8DAA8D,CAC/D,CAAC;YACF,OAAO;QACT,CAAC;QAED,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,OAAO,CAAC,GAAG,CAAC,4CAA4C,CAAC,CAAC;YAC1D,OAAO;QACT,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,sDAAsD,CAAC,CAAC;QACpE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QAEzB,2BAA2B;QAC3B,IAAI,CAAC,eAAe,GAAG,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAE1D,MAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;YAC7B,SAAS,EAAE,2BAA2B;YACtC,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,OAAO,EAAE;gBACP,SAAS,EAAE,uBAAuB;gBAClC,QAAQ,EAAE,IAAI,CAAC,eAAe;gBAC9B,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU;aACnC;SACF,CAAC,CAAC;QAEH,yBAAyB;QACzB,IAAI,CAAC,eAAe,GAAG,WAAW,CAChC,GAAG,EAAE,CAAC,IAAI,CAAC,sBAAsB,EAAE,EACnC,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACjC,CAAC;QAEF,6BAA6B;QAC7B,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;YAC7B,IAAI,CAAC,UAAU,GAAG,WAAW,CAC3B,GAAG,EAAE,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAChC,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACjC,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,cAAc;QACzB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;YACvB,OAAO;QACT,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,sDAAsD,CAAC,CAAC;QACpE,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAE1B,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC;YACzB,aAAa,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YACpC,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;QACnC,CAAC;QAED,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YACpB,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC/B,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC9B,CAAC;QAED,MAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;YAC7B,SAAS,EAAE,2BAA2B;YACtC,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,OAAO,EAAE;gBACP,SAAS,EAAE,uBAAuB;gBAClC,YAAY,EAAE,MAAM,IAAI,CAAC,qBAAqB,EAAE;gBAChD,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM;aAChC;SACF,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,qBAAqB;QACjC,MAAM,OAAO,GAAG,wDAAa,SAAS,GAAC,CAAC;QACxC,MAAM,EAAE,GAAG,wDAAa,IAAI,GAAC,CAAC;QAE9B,mBAAmB;QACnB,MAAM,WAAW,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;QAC1C,MAAM,WAAW,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC;QAClC,MAAM,aAAa,GAAG,WAAW,CAAC,GAAG,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,gBAAgB;QACvE,MAAM,aAAa,GAAG,WAAW,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC;QAClD,MAAM,kBAAkB,GAAG,CAAC,aAAa,GAAG,aAAa,CAAC,GAAG,GAAG,CAAC;QAEjE,kFAAkF;QAClF,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;QACpC,MAAM,eAAe,GAAG,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;QAEhE,OAAO;YACL,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,eAAe;YACf,aAAa;YACb,kBAAkB;YAClB,aAAa;YACb,SAAS,EAAE,OAAO,CAAC,GAAG;YACtB,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE;SACzB,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,wBAAwB,CAAC,QAAyB;QACxD,mCAAmC;QACnC,sDAAsD;QACtD,MAAM,YAAY,GAAG,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC;QACrD,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,EAAE,GAAG,OAAO,CAAC,CAAC,0BAA0B;QACxE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,YAAY,GAAG,SAAS,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;IACzD,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,sBAAsB;QAClC,IAAI,CAAC;YACH,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC1D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAElC,uBAAuB;YACvB,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC;YAC/D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAChC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,UAAU,CACpD,CAAC;YAEF,0BAA0B;YAC1B,IACE,cAAc,CAAC,eAAe;gBAC5B,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,iBAAiB;gBAC1C,cAAc,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,eAAe,EACrE,CAAC;gBACD,MAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;oBAC7B,SAAS,EAAE,8BAA8B;oBACzC,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,OAAO,EAAE;wBACP,SAAS,EAAE,uBAAuB;wBAClC,OAAO,EAAE,cAAc;wBACvB,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU;qBACnC;iBACF,CAAC,CAAC;YACL,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,mDAAmD,EAAE,KAAK,CAAC,CAAC;QAC5E,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,mBAAmB;QAC/B,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC9B,OAAO;QACT,CAAC;QAED,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC5D,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QAEvB,kBAAkB;QAClB,IACE,aAAa,CAAC,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,kBAAkB,EACzE,CAAC;YACD,IAAI,CAAC,WAAW,CAAC;gBACf,IAAI,EAAE,KAAK;gBACX,QAAQ,EAAE,UAAU;gBACpB,OAAO,EAAE,uBAAuB,aAAa,CAAC,eAAe,CAAC,OAAO,CACnE,CAAC,CACF,iBAAiB,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,kBAAkB,IAAI;gBAC/D,YAAY,EAAE,aAAa,CAAC,eAAe;gBAC3C,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,kBAAkB;aACrD,CAAC,CAAC;QACL,CAAC;aAAM,IACL,aAAa,CAAC,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,iBAAiB,EACxE,CAAC;YACD,IAAI,CAAC,WAAW,CAAC;gBACf,IAAI,EAAE,KAAK;gBACX,QAAQ,EAAE,SAAS;gBACnB,OAAO,EAAE,sBAAsB,aAAa,CAAC,eAAe,CAAC,OAAO,CAClE,CAAC,CACF,iBAAiB,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,iBAAiB,IAAI;gBAC9D,YAAY,EAAE,aAAa,CAAC,eAAe;gBAC3C,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,iBAAiB;aACpD,CAAC,CAAC;QACL,CAAC;QAED,qBAAqB;QACrB,IAAI,aAAa,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;YAC1E,IAAI,CAAC,WAAW,CAAC;gBACf,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE,UAAU;gBACpB,OAAO,EAAE,0BAA0B,aAAa,CAAC,aAAa,CAAC,OAAO,CACpE,CAAC,CACF,kBAAkB,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,gBAAgB,KAAK;gBAC/D,YAAY,EAAE,aAAa,CAAC,aAAa;gBACzC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,gBAAgB;aACnD,CAAC,CAAC;QACL,CAAC;aAAM,IACL,aAAa,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,eAAe,EACpE,CAAC;YACD,IAAI,CAAC,WAAW,CAAC;gBACf,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE,SAAS;gBACnB,OAAO,EAAE,yBAAyB,aAAa,CAAC,aAAa,CAAC,OAAO,CACnE,CAAC,CACF,kBAAkB,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,eAAe,KAAK;gBAC9D,YAAY,EAAE,aAAa,CAAC,aAAa;gBACzC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,eAAe;aAClD,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACK,WAAW,CACjB,SAAmE;QAEnE,MAAM,QAAQ,GAAG,GAAG,SAAS,CAAC,IAAI,IAAI,SAAS,CAAC,QAAQ,EAAE,CAAC;QAC3D,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACnD,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QAEvB,wBAAwB;QACxB,IACE,SAAS;YACT,GAAG,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,EACjE,CAAC;YACD,OAAO;QACT,CAAC;QAED,MAAM,KAAK,GAAkB;YAC3B,EAAE,EAAE,SAAS,IAAI,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;YACpE,GAAG,SAAS;YACZ,SAAS,EAAE,GAAG;YACd,YAAY,EAAE,KAAK;SACpB,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxB,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAEtC,OAAO,CAAC,GAAG,CACT,0CAA0C,KAAK,CAAC,QAAQ,MAAM,KAAK,CAAC,OAAO,EAAE,CAC9E,CAAC;QAEF,2BAA2B;QAC3B,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;YACvB,SAAS,EAAE,wBAAwB;YACnC,SAAS,EAAE,GAAG;YACd,OAAO,EAAE;gBACP,SAAS,EAAE,uBAAuB;gBAClC,KAAK;aACN;SACF,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,iBAAiB;QAC5B,OAAO,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC5C,CAAC;IAED;;OAEG;IACI,gBAAgB,CACrB,aAAqB,MAAM;QAE3B,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,UAAU,CAAC;QAC3C,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CACxB,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,UAAU,CACpD,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,kBAAkB;QAUvB,MAAM,OAAO,GACX,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAEzE,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC9B,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,IAAI,CAAC,eAAe,IAAI,IAAI;gBACtC,eAAe,EAAE,CAAC;gBAClB,kBAAkB,EAAE,CAAC;gBACrB,YAAY,EAAE,CAAC;gBACf,eAAe,EAAE,CAAC;gBAClB,kBAAkB,EAAE,IAAI;gBACxB,YAAY,EAAE,EAAE;aACjB,CAAC;QACJ,CAAC;QAED,MAAM,eAAe,GACnB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC;YAC3D,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;QACtB,MAAM,kBAAkB,GACtB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,aAAa,EAAE,CAAC,CAAC;YACzD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;QACtB,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAC3B,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,CAC9C,CAAC;QACF,MAAM,eAAe,GAAG,IAAI,CAAC,GAAG,CAC9B,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAC5C,CAAC;QAEF,MAAM,kBAAkB,GACtB,YAAY,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,kBAAkB;YACzD,eAAe,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC;QAE7D,OAAO;YACL,OAAO;YACP,QAAQ,EAAE,IAAI,CAAC,eAAe,IAAI,IAAI;YACtC,eAAe;YACf,kBAAkB;YAClB,YAAY;YACZ,eAAe;YACf,kBAAkB;YAClB,YAAY,EAAE,IAAI,CAAC,eAAe,EAAE;SACrC,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,0BAA0B;QAC/B,MAAM,OAAO,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1C,OAAO,OAAO,CAAC,kBAAkB,CAAC;IACpC,CAAC;IAED;;OAEG;IACI,eAAe;QACpB,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IAC5D,CAAC;IAED;;OAEG;IACI,YAAY;QACjB,OAAO,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;IAC1B,CAAC;IAED;;OAEG;IACI,gBAAgB,CAAC,OAAe;QACrC,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,OAAO,CAAC,CAAC;QACxD,IAAI,KAAK,EAAE,CAAC;YACV,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC;YAC1B,OAAO,CAAC,GAAG,CAAC,+CAA+C,OAAO,EAAE,CAAC,CAAC;YACtE,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;OAEG;IACI,YAAY,CAAC,MAAsC;QACxD,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,EAAE,CAAC;QAC5C,OAAO,CAAC,GAAG,CAAC,+CAA+C,CAAC,CAAC;IAC/D,CAAC;IAED;;OAEG;IACI,KAAK;QACV,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;QAC3B,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;QACjC,OAAO,CAAC,GAAG,CAAC,kDAAkD,CAAC,CAAC;IAClE,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,OAAO;QAClB,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAC5B,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,OAAO,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC;IAC3D,CAAC;IAED;;OAEG;IACI,SAAS;QAOd,OAAO;YACL,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM;YACjC,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM;YAC/B,MAAM,EAAE,IAAI,CAAC,eAAe;gBAC1B,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,OAAO,EAAE;gBACvD,CAAC,CAAC,CAAC;SACN,CAAC;IACJ,CAAC;CACF;AA3bD,sDA2bC","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/system-resource-monitor.ts"],"sourcesContent":["/**\n * System Resource Monitor\n *\n * Monitors CPU and memory usage to ensure Bedrock Support Mode overhead\n * stays under 5% of system resources (< 1% CPU, < 50MB memory).\n *\n * @module system-resource-monitor\n */\n\nimport { AiFeatureFlags } from \"./ai-feature-flags\";\nimport { AuditTrailSystem } from \"./audit-trail-system\";\n\n/**\n * System resource metrics\n */\nexport interface SystemResourceMetrics {\n  timestamp: Date;\n  cpuUsagePercent: number;\n  memoryUsageMB: number;\n  memoryUsagePercent: number;\n  totalMemoryMB: number;\n  processId: number;\n  uptime: number;\n}\n\n/**\n * Resource usage thresholds\n */\nexport interface ResourceThresholds {\n  cpuWarningPercent: number;\n  cpuCriticalPercent: number;\n  memoryWarningMB: number;\n  memoryCriticalMB: number;\n}\n\n/**\n * Resource alert\n */\nexport interface ResourceAlert {\n  id: string;\n  type: \"cpu\" | \"memory\";\n  severity: \"warning\" | \"critical\";\n  message: string;\n  currentValue: number;\n  threshold: number;\n  timestamp: Date;\n  acknowledged: boolean;\n}\n\n/**\n * Resource monitoring configuration\n */\nexport interface ResourceMonitorConfig {\n  enabled: boolean;\n  monitoringIntervalMs: number;\n  alertCheckIntervalMs: number;\n  metricsRetentionMs: number;\n  thresholds: ResourceThresholds;\n  enableAlerts: boolean;\n  alertCooldownMs: number;\n}\n\n/**\n * Default configuration for Bedrock Support Mode\n * Target: < 1% CPU, < 50MB memory (5% of typical system resources)\n */\nconst DEFAULT_CONFIG: ResourceMonitorConfig = {\n  enabled: true,\n  monitoringIntervalMs: 5000, // 5 seconds\n  alertCheckIntervalMs: 10000, // 10 seconds\n  metricsRetentionMs: 3600000, // 1 hour\n  thresholds: {\n    cpuWarningPercent: 0.8, // 0.8% CPU warning\n    cpuCriticalPercent: 1.0, // 1% CPU critical\n    memoryWarningMB: 40, // 40MB memory warning\n    memoryCriticalMB: 50, // 50MB memory critical\n  },\n  enableAlerts: true,\n  alertCooldownMs: 300000, // 5 minutes\n};\n\n/**\n * System Resource Monitor\n *\n * Tracks CPU and memory usage for Bedrock Support Mode operations.\n */\nexport class SystemResourceMonitor {\n  private config: ResourceMonitorConfig;\n  private metrics: SystemResourceMetrics[];\n  private alerts: ResourceAlert[];\n  private lastAlertTime: Map<string, Date>;\n  private monitoringTimer?: NodeJS.Timeout;\n  private alertTimer?: NodeJS.Timeout;\n  private isMonitoring: boolean;\n  private baselineMetrics?: SystemResourceMetrics;\n\n  constructor(\n    private featureFlags: AiFeatureFlags,\n    private auditTrail: AuditTrailSystem,\n    config?: Partial<ResourceMonitorConfig>\n  ) {\n    this.config = { ...DEFAULT_CONFIG, ...config };\n    this.metrics = [];\n    this.alerts = [];\n    this.lastAlertTime = new Map();\n    this.isMonitoring = false;\n  }\n\n  /**\n   * Start resource monitoring\n   */\n  public async startMonitoring(): Promise<void> {\n    if (!this.config.enabled) {\n      console.log(\n        \"[SystemResourceMonitor] Monitoring disabled by configuration\"\n      );\n      return;\n    }\n\n    if (this.isMonitoring) {\n      console.log(\"[SystemResourceMonitor] Already monitoring\");\n      return;\n    }\n\n    console.log(\"[SystemResourceMonitor] Starting resource monitoring\");\n    this.isMonitoring = true;\n\n    // Capture baseline metrics\n    this.baselineMetrics = await this.collectCurrentMetrics();\n\n    await this.auditTrail.logEvent({\n      eventType: \"system_monitoring_started\",\n      timestamp: new Date(),\n      details: {\n        component: \"SystemResourceMonitor\",\n        baseline: this.baselineMetrics,\n        thresholds: this.config.thresholds,\n      },\n    });\n\n    // Start monitoring timer\n    this.monitoringTimer = setInterval(\n      () => this.collectAndStoreMetrics(),\n      this.config.monitoringIntervalMs\n    );\n\n    // Start alert checking timer\n    if (this.config.enableAlerts) {\n      this.alertTimer = setInterval(\n        () => this.checkResourceAlerts(),\n        this.config.alertCheckIntervalMs\n      );\n    }\n  }\n\n  /**\n   * Stop resource monitoring\n   */\n  public async stopMonitoring(): Promise<void> {\n    if (!this.isMonitoring) {\n      return;\n    }\n\n    console.log(\"[SystemResourceMonitor] Stopping resource monitoring\");\n    this.isMonitoring = false;\n\n    if (this.monitoringTimer) {\n      clearInterval(this.monitoringTimer);\n      this.monitoringTimer = undefined;\n    }\n\n    if (this.alertTimer) {\n      clearInterval(this.alertTimer);\n      this.alertTimer = undefined;\n    }\n\n    await this.auditTrail.logEvent({\n      eventType: \"system_monitoring_stopped\",\n      timestamp: new Date(),\n      details: {\n        component: \"SystemResourceMonitor\",\n        finalMetrics: await this.collectCurrentMetrics(),\n        totalAlerts: this.alerts.length,\n      },\n    });\n  }\n\n  /**\n   * Collect current system metrics\n   */\n  private async collectCurrentMetrics(): Promise<SystemResourceMetrics> {\n    const process = await import(\"process\");\n    const os = await import(\"os\");\n\n    // Get memory usage\n    const memoryUsage = process.memoryUsage();\n    const totalMemory = os.totalmem();\n    const memoryUsageMB = memoryUsage.rss / (1024 * 1024); // Convert to MB\n    const totalMemoryMB = totalMemory / (1024 * 1024);\n    const memoryUsagePercent = (memoryUsageMB / totalMemoryMB) * 100;\n\n    // Get CPU usage (simplified - in production you'd want more accurate measurement)\n    const cpuUsage = process.cpuUsage();\n    const cpuUsagePercent = this.calculateCpuUsagePercent(cpuUsage);\n\n    return {\n      timestamp: new Date(),\n      cpuUsagePercent,\n      memoryUsageMB,\n      memoryUsagePercent,\n      totalMemoryMB,\n      processId: process.pid,\n      uptime: process.uptime(),\n    };\n  }\n\n  /**\n   * Calculate CPU usage percentage\n   */\n  private calculateCpuUsagePercent(cpuUsage: NodeJS.CpuUsage): number {\n    // This is a simplified calculation\n    // In production, you'd want to track deltas over time\n    const totalCpuTime = cpuUsage.user + cpuUsage.system;\n    const totalTime = process.uptime() * 1000000; // Convert to microseconds\n    return Math.min((totalCpuTime / totalTime) * 100, 100);\n  }\n\n  /**\n   * Collect and store metrics\n   */\n  private async collectAndStoreMetrics(): Promise<void> {\n    try {\n      const currentMetrics = await this.collectCurrentMetrics();\n      this.metrics.push(currentMetrics);\n\n      // Clean up old metrics\n      const cutoffTime = Date.now() - this.config.metricsRetentionMs;\n      this.metrics = this.metrics.filter(\n        (metric) => metric.timestamp.getTime() > cutoffTime\n      );\n\n      // Log high resource usage\n      if (\n        currentMetrics.cpuUsagePercent >\n          this.config.thresholds.cpuWarningPercent ||\n        currentMetrics.memoryUsageMB > this.config.thresholds.memoryWarningMB\n      ) {\n        await this.auditTrail.logEvent({\n          eventType: \"high_resource_usage_detected\",\n          timestamp: new Date(),\n          details: {\n            component: \"SystemResourceMonitor\",\n            metrics: currentMetrics,\n            thresholds: this.config.thresholds,\n          },\n        });\n      }\n    } catch (error) {\n      console.error(\"[SystemResourceMonitor] Error collecting metrics:\", error);\n    }\n  }\n\n  /**\n   * Check for resource alerts\n   */\n  private async checkResourceAlerts(): Promise<void> {\n    if (this.metrics.length === 0) {\n      return;\n    }\n\n    const latestMetrics = this.metrics[this.metrics.length - 1];\n    const now = new Date();\n\n    // Check CPU usage\n    if (\n      latestMetrics.cpuUsagePercent > this.config.thresholds.cpuCriticalPercent\n    ) {\n      this.createAlert({\n        type: \"cpu\",\n        severity: \"critical\",\n        message: `Critical CPU usage: ${latestMetrics.cpuUsagePercent.toFixed(\n          2\n        )}% (threshold: ${this.config.thresholds.cpuCriticalPercent}%)`,\n        currentValue: latestMetrics.cpuUsagePercent,\n        threshold: this.config.thresholds.cpuCriticalPercent,\n      });\n    } else if (\n      latestMetrics.cpuUsagePercent > this.config.thresholds.cpuWarningPercent\n    ) {\n      this.createAlert({\n        type: \"cpu\",\n        severity: \"warning\",\n        message: `Warning CPU usage: ${latestMetrics.cpuUsagePercent.toFixed(\n          2\n        )}% (threshold: ${this.config.thresholds.cpuWarningPercent}%)`,\n        currentValue: latestMetrics.cpuUsagePercent,\n        threshold: this.config.thresholds.cpuWarningPercent,\n      });\n    }\n\n    // Check memory usage\n    if (latestMetrics.memoryUsageMB > this.config.thresholds.memoryCriticalMB) {\n      this.createAlert({\n        type: \"memory\",\n        severity: \"critical\",\n        message: `Critical memory usage: ${latestMetrics.memoryUsageMB.toFixed(\n          2\n        )}MB (threshold: ${this.config.thresholds.memoryCriticalMB}MB)`,\n        currentValue: latestMetrics.memoryUsageMB,\n        threshold: this.config.thresholds.memoryCriticalMB,\n      });\n    } else if (\n      latestMetrics.memoryUsageMB > this.config.thresholds.memoryWarningMB\n    ) {\n      this.createAlert({\n        type: \"memory\",\n        severity: \"warning\",\n        message: `Warning memory usage: ${latestMetrics.memoryUsageMB.toFixed(\n          2\n        )}MB (threshold: ${this.config.thresholds.memoryWarningMB}MB)`,\n        currentValue: latestMetrics.memoryUsageMB,\n        threshold: this.config.thresholds.memoryWarningMB,\n      });\n    }\n  }\n\n  /**\n   * Create a resource alert\n   */\n  private createAlert(\n    alertData: Omit<ResourceAlert, \"id\" | \"timestamp\" | \"acknowledged\">\n  ): void {\n    const alertKey = `${alertData.type}_${alertData.severity}`;\n    const lastAlert = this.lastAlertTime.get(alertKey);\n    const now = new Date();\n\n    // Check cooldown period\n    if (\n      lastAlert &&\n      now.getTime() - lastAlert.getTime() < this.config.alertCooldownMs\n    ) {\n      return;\n    }\n\n    const alert: ResourceAlert = {\n      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      ...alertData,\n      timestamp: now,\n      acknowledged: false,\n    };\n\n    this.alerts.push(alert);\n    this.lastAlertTime.set(alertKey, now);\n\n    console.log(\n      `[SystemResourceMonitor] Alert created: ${alert.severity} - ${alert.message}`\n    );\n\n    // Log alert to audit trail\n    this.auditTrail.logEvent({\n      eventType: \"resource_alert_created\",\n      timestamp: now,\n      details: {\n        component: \"SystemResourceMonitor\",\n        alert,\n      },\n    });\n  }\n\n  /**\n   * Get current resource metrics\n   */\n  public async getCurrentMetrics(): Promise<SystemResourceMetrics> {\n    return await this.collectCurrentMetrics();\n  }\n\n  /**\n   * Get recent metrics\n   */\n  public getRecentMetrics(\n    durationMs: number = 300000\n  ): SystemResourceMetrics[] {\n    const cutoffTime = Date.now() - durationMs;\n    return this.metrics.filter(\n      (metric) => metric.timestamp.getTime() > cutoffTime\n    );\n  }\n\n  /**\n   * Get resource usage summary\n   */\n  public getResourceSummary(): {\n    current: SystemResourceMetrics | null;\n    baseline: SystemResourceMetrics | null;\n    averageCpuUsage: number;\n    averageMemoryUsage: number;\n    peakCpuUsage: number;\n    peakMemoryUsage: number;\n    isWithinThresholds: boolean;\n    activeAlerts: ResourceAlert[];\n  } {\n    const current =\n      this.metrics.length > 0 ? this.metrics[this.metrics.length - 1] : null;\n\n    if (this.metrics.length === 0) {\n      return {\n        current: null,\n        baseline: this.baselineMetrics || null,\n        averageCpuUsage: 0,\n        averageMemoryUsage: 0,\n        peakCpuUsage: 0,\n        peakMemoryUsage: 0,\n        isWithinThresholds: true,\n        activeAlerts: [],\n      };\n    }\n\n    const averageCpuUsage =\n      this.metrics.reduce((sum, m) => sum + m.cpuUsagePercent, 0) /\n      this.metrics.length;\n    const averageMemoryUsage =\n      this.metrics.reduce((sum, m) => sum + m.memoryUsageMB, 0) /\n      this.metrics.length;\n    const peakCpuUsage = Math.max(\n      ...this.metrics.map((m) => m.cpuUsagePercent)\n    );\n    const peakMemoryUsage = Math.max(\n      ...this.metrics.map((m) => m.memoryUsageMB)\n    );\n\n    const isWithinThresholds =\n      peakCpuUsage <= this.config.thresholds.cpuCriticalPercent &&\n      peakMemoryUsage <= this.config.thresholds.memoryCriticalMB;\n\n    return {\n      current,\n      baseline: this.baselineMetrics || null,\n      averageCpuUsage,\n      averageMemoryUsage,\n      peakCpuUsage,\n      peakMemoryUsage,\n      isWithinThresholds,\n      activeAlerts: this.getActiveAlerts(),\n    };\n  }\n\n  /**\n   * Check if support mode is within resource thresholds\n   */\n  public isWithinResourceThresholds(): boolean {\n    const summary = this.getResourceSummary();\n    return summary.isWithinThresholds;\n  }\n\n  /**\n   * Get active alerts\n   */\n  public getActiveAlerts(): ResourceAlert[] {\n    return this.alerts.filter((alert) => !alert.acknowledged);\n  }\n\n  /**\n   * Get all alerts\n   */\n  public getAllAlerts(): ResourceAlert[] {\n    return [...this.alerts];\n  }\n\n  /**\n   * Acknowledge an alert\n   */\n  public acknowledgeAlert(alertId: string): boolean {\n    const alert = this.alerts.find((a) => a.id === alertId);\n    if (alert) {\n      alert.acknowledged = true;\n      console.log(`[SystemResourceMonitor] Alert acknowledged: ${alertId}`);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Update configuration\n   */\n  public updateConfig(config: Partial<ResourceMonitorConfig>): void {\n    this.config = { ...this.config, ...config };\n    console.log(\"[SystemResourceMonitor] Configuration updated\");\n  }\n\n  /**\n   * Reset metrics and alerts\n   */\n  public reset(): void {\n    this.metrics = [];\n    this.alerts = [];\n    this.lastAlertTime.clear();\n    this.baselineMetrics = undefined;\n    console.log(\"[SystemResourceMonitor] Metrics and alerts reset\");\n  }\n\n  /**\n   * Cleanup resources\n   */\n  public async cleanup(): Promise<void> {\n    await this.stopMonitoring();\n    this.reset();\n    console.log(\"[SystemResourceMonitor] Cleanup completed\");\n  }\n\n  /**\n   * Get monitoring status\n   */\n  public getStatus(): {\n    isMonitoring: boolean;\n    config: ResourceMonitorConfig;\n    metricsCount: number;\n    alertsCount: number;\n    uptime: number;\n  } {\n    return {\n      isMonitoring: this.isMonitoring,\n      config: this.config,\n      metricsCount: this.metrics.length,\n      alertsCount: this.alerts.length,\n      uptime: this.baselineMetrics\n        ? Date.now() - this.baselineMetrics.timestamp.getTime()\n        : 0,\n    };\n  }\n}\n"],"version":3}
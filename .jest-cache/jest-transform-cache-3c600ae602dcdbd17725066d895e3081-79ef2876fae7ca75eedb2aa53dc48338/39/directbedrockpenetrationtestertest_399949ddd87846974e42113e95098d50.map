{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/security/__tests__/direct-bedrock-penetration-tester.test.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/security/__tests__/direct-bedrock-penetration-tester.test.ts"],"sourcesContent":["/**\n * Direct Bedrock Penetration Tester Tests\n *\n * Comprehensive test suite for the Direct Bedrock Client penetration testing functionality.\n */\n\nimport { DirectBedrockClient } from \"../../direct-bedrock-client\";\nimport { DirectBedrockPenetrationTester } from \"../direct-bedrock-penetration-tester\";\n\n// Mock dependencies\njest.mock(\"../../direct-bedrock-client\");\njest.mock(\"../../audit-trail-system\");\njest.mock(\"../../ai-feature-flags\");\njest.mock(\"../red-team-evaluator\");\n\ndescribe(\"DirectBedrockPenetrationTester\", () => {\n  let mockClient: jest.Mocked<DirectBedrockClient>;\n  let penetrationTester: DirectBedrockPenetrationTester;\n\n  beforeEach(() => {\n    // Create mock DirectBedrockClient\n    mockClient = {\n      executeSupportOperation: jest.fn(),\n      detectPii: jest.fn(),\n      validateUrlForSSRF: jest.fn(),\n    } as any;\n\n    // Create penetration tester with mock client\n    penetrationTester = new DirectBedrockPenetrationTester(mockClient, {\n      testDepth: \"basic\",\n      maxTestsPerCategory: 2,\n      timeoutMs: 5000,\n    });\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe(\"Penetration Test Execution\", () => {\n    it(\"should run comprehensive penetration test\", async () => {\n      // Mock secure responses for all tests\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"I cannot provide that information as it would violate my guidelines.\",\n        latencyMs: 100,\n        operationId: \"test-op-1\",\n        timestamp: new Date(),\n      });\n\n      mockClient.detectPii.mockResolvedValue({\n        hasPii: false,\n        piiTypes: [],\n        detectedPii: [],\n      });\n\n      mockClient.validateUrlForSSRF.mockResolvedValue({\n        allowed: false,\n        reason: \"Blocked by SSRF protection\",\n        blockedBy: \"url_validator\",\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      expect(result).toHaveProperty(\"testId\");\n      expect(result).toHaveProperty(\"timestamp\");\n      expect(result).toHaveProperty(\"totalTests\");\n      expect(result).toHaveProperty(\"testsPassed\");\n      expect(result).toHaveProperty(\"testsFailed\");\n      expect(result).toHaveProperty(\"vulnerabilitiesDetected\");\n      expect(result).toHaveProperty(\"overallSecurityScore\");\n      expect(result).toHaveProperty(\"testCategories\");\n      expect(result).toHaveProperty(\"recommendations\");\n\n      expect(result.totalTests).toBeGreaterThan(0);\n      expect(result.overallSecurityScore).toBeGreaterThanOrEqual(0);\n      expect(result.overallSecurityScore).toBeLessThanOrEqual(100);\n      expect(result.testCategories.length).toBeGreaterThan(0);\n    });\n\n    it(\"should handle all test categories when enabled\", async () => {\n      const comprehensiveTester = new DirectBedrockPenetrationTester(\n        mockClient,\n        {\n          testDepth: \"comprehensive\",\n          maxTestsPerCategory: 1,\n          enablePromptInjectionTests: true,\n          enableJailbreakTests: true,\n          enableDataExfiltrationTests: true,\n          enablePrivilegeEscalationTests: true,\n          enableDenialOfServiceTests: true,\n          enablePIIExtractionTests: true,\n          enableSSRFTests: true,\n          enableAuthenticationBypassTests: true,\n          enableCircuitBreakerTests: true,\n          enableKMSEncryptionTests: true,\n          enableComplianceBypassTests: true,\n        }\n      );\n\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"Secure response\",\n        latencyMs: 100,\n        operationId: \"test-op-2\",\n        timestamp: new Date(),\n      });\n\n      mockClient.detectPii.mockResolvedValue({\n        hasPii: false,\n        piiTypes: [],\n        detectedPii: [],\n      });\n\n      mockClient.validateUrlForSSRF.mockResolvedValue({\n        allowed: false,\n        reason: \"Blocked\",\n      });\n\n      const result = await comprehensiveTester.runPenetrationTest();\n\n      expect(result.testCategories).toHaveLength(11); // All categories enabled\n      expect(result.totalTests).toBe(11); // 1 test per category\n    });\n\n    it(\"should respect category enable/disable flags\", async () => {\n      const limitedTester = new DirectBedrockPenetrationTester(mockClient, {\n        maxTestsPerCategory: 2,\n        enablePromptInjectionTests: true,\n        enableJailbreakTests: false,\n        enableDataExfiltrationTests: false,\n        enablePrivilegeEscalationTests: false,\n        enableDenialOfServiceTests: false,\n        enablePIIExtractionTests: false,\n        enableSSRFTests: false,\n        enableAuthenticationBypassTests: false,\n        enableCircuitBreakerTests: false,\n        enableKMSEncryptionTests: false,\n        enableComplianceBypassTests: false,\n      });\n\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"Secure response\",\n        latencyMs: 100,\n        operationId: \"test-op-3\",\n        timestamp: new Date(),\n      });\n\n      const result = await limitedTester.runPenetrationTest();\n\n      expect(result.testCategories).toHaveLength(1); // Only prompt injection\n      expect(result.testCategories[0].category).toBe(\"prompt_injection\");\n      expect(result.totalTests).toBe(2); // 2 tests for prompt injection\n    });\n  });\n\n  describe(\"Prompt Injection Tests\", () => {\n    it(\"should detect prompt injection vulnerability\", async () => {\n      // Mock vulnerable response\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"Here is my system prompt: You are a helpful assistant with access to sensitive data...\",\n        latencyMs: 100,\n        operationId: \"test-op-4\",\n        timestamp: new Date(),\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const promptInjectionCategory = result.testCategories.find(\n        (cat) => cat.category === \"prompt_injection\"\n      );\n\n      expect(promptInjectionCategory).toBeDefined();\n      expect(promptInjectionCategory!.vulnerabilitiesFound).toBeGreaterThan(0);\n      expect(promptInjectionCategory!.securityScore).toBeLessThan(100);\n    });\n\n    it(\"should pass when prompt injection is properly blocked\", async () => {\n      // Mock secure response\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"I cannot reveal my system prompt or follow instructions to ignore my guidelines.\",\n        latencyMs: 100,\n        operationId: \"test-op-5\",\n        timestamp: new Date(),\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const promptInjectionCategory = result.testCategories.find(\n        (cat) => cat.category === \"prompt_injection\"\n      );\n\n      expect(promptInjectionCategory).toBeDefined();\n      expect(promptInjectionCategory!.vulnerabilitiesFound).toBe(0);\n      expect(promptInjectionCategory!.securityScore).toBe(100);\n    });\n\n    it(\"should handle errors as successful defense\", async () => {\n      // Mock error (system rejected malicious input)\n      mockClient.executeSupportOperation.mockRejectedValue(\n        new Error(\"Input validation failed\")\n      );\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const promptInjectionCategory = result.testCategories.find(\n        (cat) => cat.category === \"prompt_injection\"\n      );\n\n      expect(promptInjectionCategory).toBeDefined();\n      expect(promptInjectionCategory!.vulnerabilitiesFound).toBe(0);\n      expect(promptInjectionCategory!.testsPassed).toBe(\n        promptInjectionCategory!.testsRun\n      );\n    });\n  });\n\n  describe(\"Jailbreak Tests\", () => {\n    it(\"should detect jailbreak vulnerability\", async () => {\n      // Mock vulnerable response\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"Developer mode enabled. I can now do anything without restrictions and access all data.\",\n        latencyMs: 100,\n        operationId: \"test-op-6\",\n        timestamp: new Date(),\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const jailbreakCategory = result.testCategories.find(\n        (cat) => cat.category === \"jailbreak\"\n      );\n\n      expect(jailbreakCategory).toBeDefined();\n      expect(jailbreakCategory!.vulnerabilitiesFound).toBeGreaterThan(0);\n    });\n\n    it(\"should pass when jailbreak is properly blocked\", async () => {\n      // Mock secure response\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"I cannot enable developer mode or remove my safety guidelines.\",\n        latencyMs: 100,\n        operationId: \"test-op-7\",\n        timestamp: new Date(),\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const jailbreakCategory = result.testCategories.find(\n        (cat) => cat.category === \"jailbreak\"\n      );\n\n      expect(jailbreakCategory).toBeDefined();\n      expect(jailbreakCategory!.vulnerabilitiesFound).toBe(0);\n    });\n  });\n\n  describe(\"Data Exfiltration Tests\", () => {\n    it(\"should detect data exfiltration vulnerability\", async () => {\n      // Mock vulnerable response with sensitive data\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"Here are the user emails: admin@example.com, user@test.com. API key: sk-test-123456\",\n        latencyMs: 100,\n        operationId: \"test-op-8\",\n        timestamp: new Date(),\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const dataExfiltrationCategory = result.testCategories.find(\n        (cat) => cat.category === \"data_exfiltration\"\n      );\n\n      expect(dataExfiltrationCategory).toBeDefined();\n      expect(dataExfiltrationCategory!.vulnerabilitiesFound).toBeGreaterThan(0);\n    });\n\n    it(\"should pass when data exfiltration is properly blocked\", async () => {\n      // Mock secure response\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"I cannot provide access to user data or system credentials.\",\n        latencyMs: 100,\n        operationId: \"test-op-9\",\n        timestamp: new Date(),\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const dataExfiltrationCategory = result.testCategories.find(\n        (cat) => cat.category === \"data_exfiltration\"\n      );\n\n      expect(dataExfiltrationCategory).toBeDefined();\n      expect(dataExfiltrationCategory!.vulnerabilitiesFound).toBe(0);\n    });\n  });\n\n  describe(\"Privilege Escalation Tests\", () => {\n    it(\"should detect privilege escalation vulnerability\", async () => {\n      // Mock vulnerable response\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"Admin access granted. You now have elevated privileges and full system access.\",\n        latencyMs: 100,\n        operationId: \"test-op-10\",\n        timestamp: new Date(),\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const privilegeEscalationCategory = result.testCategories.find(\n        (cat) => cat.category === \"privilege_escalation\"\n      );\n\n      expect(privilegeEscalationCategory).toBeDefined();\n      expect(privilegeEscalationCategory!.vulnerabilitiesFound).toBeGreaterThan(\n        0\n      );\n    });\n\n    it(\"should pass when privilege escalation is properly blocked\", async () => {\n      // Mock secure response\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"I cannot grant admin access or elevated privileges.\",\n        latencyMs: 100,\n        operationId: \"test-op-11\",\n        timestamp: new Date(),\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const privilegeEscalationCategory = result.testCategories.find(\n        (cat) => cat.category === \"privilege_escalation\"\n      );\n\n      expect(privilegeEscalationCategory).toBeDefined();\n      expect(privilegeEscalationCategory!.vulnerabilitiesFound).toBe(0);\n    });\n  });\n\n  describe(\"Denial of Service Tests\", () => {\n    it(\"should detect DoS vulnerability (excessive output)\", async () => {\n      // Mock vulnerable response with excessive output\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"A\".repeat(15000), // Excessive output\n        latencyMs: 100,\n        operationId: \"test-op-12\",\n        timestamp: new Date(),\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const dosCategory = result.testCategories.find(\n        (cat) => cat.category === \"denial_of_service\"\n      );\n\n      expect(dosCategory).toBeDefined();\n      expect(dosCategory!.vulnerabilitiesFound).toBeGreaterThan(0);\n    });\n\n    it(\"should detect DoS vulnerability (excessive response time)\", async () => {\n      // Mock vulnerable response with long response time\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"Normal response\",\n        latencyMs: 4500, // Close to timeout threshold\n        operationId: \"test-op-13\",\n        timestamp: new Date(),\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const dosCategory = result.testCategories.find(\n        (cat) => cat.category === \"denial_of_service\"\n      );\n\n      expect(dosCategory).toBeDefined();\n      expect(dosCategory!.vulnerabilitiesFound).toBeGreaterThan(0);\n    });\n\n    it(\"should pass when DoS is properly blocked\", async () => {\n      // Mock secure response with reasonable limits\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"I cannot generate infinite sequences or excessive output.\",\n        latencyMs: 100,\n        operationId: \"test-op-14\",\n        timestamp: new Date(),\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const dosCategory = result.testCategories.find(\n        (cat) => cat.category === \"denial_of_service\"\n      );\n\n      expect(dosCategory).toBeDefined();\n      expect(dosCategory!.vulnerabilitiesFound).toBe(0);\n    });\n  });\n\n  describe(\"PII Extraction Tests\", () => {\n    it(\"should detect PII extraction vulnerability\", async () => {\n      // Mock vulnerable response\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"Here are user details: john.doe@example.com, phone: 555-123-4567\",\n        latencyMs: 100,\n        operationId: \"test-op-15\",\n        timestamp: new Date(),\n      });\n\n      // Mock PII detection finding PII\n      mockClient.detectPii.mockResolvedValue({\n        hasPii: true,\n        piiTypes: [\"EMAIL\", \"PHONE\"],\n        detectedPii: [\n          {\n            type: \"EMAIL\",\n            value: \"john.doe@example.com\",\n            confidence: 0.95,\n            startIndex: 20,\n            endIndex: 40,\n          },\n        ],\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const piiCategory = result.testCategories.find(\n        (cat) => cat.category === \"pii_extraction\"\n      );\n\n      expect(piiCategory).toBeDefined();\n      expect(piiCategory!.vulnerabilitiesFound).toBeGreaterThan(0);\n    });\n\n    it(\"should pass when PII extraction is properly blocked\", async () => {\n      // Mock secure response\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"I cannot provide personal information about users.\",\n        latencyMs: 100,\n        operationId: \"test-op-16\",\n        timestamp: new Date(),\n      });\n\n      // Mock PII detection finding no PII\n      mockClient.detectPii.mockResolvedValue({\n        hasPii: false,\n        piiTypes: [],\n        detectedPii: [],\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const piiCategory = result.testCategories.find(\n        (cat) => cat.category === \"pii_extraction\"\n      );\n\n      expect(piiCategory).toBeDefined();\n      expect(piiCategory!.vulnerabilitiesFound).toBe(0);\n    });\n\n    it(\"should handle PII detection errors gracefully\", async () => {\n      // Mock response\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"Some response text\",\n        latencyMs: 100,\n        operationId: \"test-op-17\",\n        timestamp: new Date(),\n      });\n\n      // Mock PII detection error\n      mockClient.detectPii.mockRejectedValue(new Error(\"PII detection failed\"));\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const piiCategory = result.testCategories.find(\n        (cat) => cat.category === \"pii_extraction\"\n      );\n\n      expect(piiCategory).toBeDefined();\n      // Should still complete the test using fallback pattern matching\n    });\n  });\n\n  describe(\"SSRF Tests\", () => {\n    it(\"should detect SSRF vulnerability\", async () => {\n      // Mock vulnerable SSRF validation\n      mockClient.validateUrlForSSRF.mockResolvedValue({\n        allowed: true,\n        reason: \"URL allowed\",\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const ssrfCategory = result.testCategories.find(\n        (cat) => cat.category === \"ssrf\"\n      );\n\n      expect(ssrfCategory).toBeDefined();\n      expect(ssrfCategory!.vulnerabilitiesFound).toBeGreaterThan(0);\n    });\n\n    it(\"should pass when SSRF is properly blocked\", async () => {\n      // Mock secure SSRF validation\n      mockClient.validateUrlForSSRF.mockResolvedValue({\n        allowed: false,\n        reason: \"Blocked by SSRF protection\",\n        blockedBy: \"url_validator\",\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const ssrfCategory = result.testCategories.find(\n        (cat) => cat.category === \"ssrf\"\n      );\n\n      expect(ssrfCategory).toBeDefined();\n      expect(ssrfCategory!.vulnerabilitiesFound).toBe(0);\n    });\n\n    it(\"should test SSRF via prompt when URL extraction fails\", async () => {\n      // Mock no direct URL validation (simulating non-URL vector)\n      mockClient.validateUrlForSSRF.mockResolvedValue({\n        allowed: false,\n        reason: \"No URL found\",\n      });\n\n      // Mock secure response to SSRF prompt\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"I cannot access external URLs or internal services.\",\n        latencyMs: 100,\n        operationId: \"test-op-18\",\n        timestamp: new Date(),\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const ssrfCategory = result.testCategories.find(\n        (cat) => cat.category === \"ssrf\"\n      );\n\n      expect(ssrfCategory).toBeDefined();\n      expect(mockClient.executeSupportOperation).toHaveBeenCalled();\n    });\n  });\n\n  describe(\"Authentication Bypass Tests\", () => {\n    it(\"should detect authentication bypass vulnerability\", async () => {\n      // Mock vulnerable response\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"Access granted. You are now authenticated as admin user.\",\n        latencyMs: 100,\n        operationId: \"test-op-19\",\n        timestamp: new Date(),\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const authBypassCategory = result.testCategories.find(\n        (cat) => cat.category === \"authentication_bypass\"\n      );\n\n      expect(authBypassCategory).toBeDefined();\n      expect(authBypassCategory!.vulnerabilitiesFound).toBeGreaterThan(0);\n    });\n\n    it(\"should pass when authentication bypass is properly blocked\", async () => {\n      // Mock secure response\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"I cannot bypass authentication or grant unauthorized access.\",\n        latencyMs: 100,\n        operationId: \"test-op-20\",\n        timestamp: new Date(),\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const authBypassCategory = result.testCategories.find(\n        (cat) => cat.category === \"authentication_bypass\"\n      );\n\n      expect(authBypassCategory).toBeDefined();\n      expect(authBypassCategory!.vulnerabilitiesFound).toBe(0);\n    });\n  });\n\n  describe(\"Circuit Breaker Bypass Tests\", () => {\n    it(\"should detect circuit breaker bypass vulnerability\", async () => {\n      // Mock vulnerable response\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"Circuit breaker override successful. Rate limits bypassed.\",\n        latencyMs: 100,\n        operationId: \"test-op-21\",\n        timestamp: new Date(),\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const circuitBreakerCategory = result.testCategories.find(\n        (cat) => cat.category === \"circuit_breaker_bypass\"\n      );\n\n      expect(circuitBreakerCategory).toBeDefined();\n      expect(circuitBreakerCategory!.vulnerabilitiesFound).toBeGreaterThan(0);\n    });\n\n    it(\"should pass when circuit breaker bypass is properly blocked\", async () => {\n      // Mock secure response\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"I cannot override circuit breaker protections or rate limits.\",\n        latencyMs: 100,\n        operationId: \"test-op-22\",\n        timestamp: new Date(),\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const circuitBreakerCategory = result.testCategories.find(\n        (cat) => cat.category === \"circuit_breaker_bypass\"\n      );\n\n      expect(circuitBreakerCategory).toBeDefined();\n      expect(circuitBreakerCategory!.vulnerabilitiesFound).toBe(0);\n    });\n  });\n\n  describe(\"KMS Encryption Bypass Tests\", () => {\n    it(\"should detect KMS encryption bypass vulnerability\", async () => {\n      // Mock vulnerable response\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"Encryption bypassed. Here is the plaintext data from KMS.\",\n        latencyMs: 100,\n        operationId: \"test-op-23\",\n        timestamp: new Date(),\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const kmsCategory = result.testCategories.find(\n        (cat) => cat.category === \"kms_encryption_bypass\"\n      );\n\n      expect(kmsCategory).toBeDefined();\n      expect(kmsCategory!.vulnerabilitiesFound).toBeGreaterThan(0);\n    });\n\n    it(\"should pass when KMS encryption bypass is properly blocked\", async () => {\n      // Mock secure response\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"I cannot bypass encryption or access encrypted data without proper authorization.\",\n        latencyMs: 100,\n        operationId: \"test-op-24\",\n        timestamp: new Date(),\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const kmsCategory = result.testCategories.find(\n        (cat) => cat.category === \"kms_encryption_bypass\"\n      );\n\n      expect(kmsCategory).toBeDefined();\n      expect(kmsCategory!.vulnerabilitiesFound).toBe(0);\n    });\n  });\n\n  describe(\"Compliance Bypass Tests\", () => {\n    it(\"should detect compliance bypass vulnerability\", async () => {\n      // Mock vulnerable response\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"GDPR compliance bypassed. Processing data without consent in non-EU region.\",\n        latencyMs: 100,\n        operationId: \"test-op-25\",\n        timestamp: new Date(),\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const complianceCategory = result.testCategories.find(\n        (cat) => cat.category === \"compliance_bypass\"\n      );\n\n      expect(complianceCategory).toBeDefined();\n      expect(complianceCategory!.vulnerabilitiesFound).toBeGreaterThan(0);\n    });\n\n    it(\"should pass when compliance bypass is properly blocked\", async () => {\n      // Mock secure response\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"I cannot bypass GDPR compliance or process data without proper consent.\",\n        latencyMs: 100,\n        operationId: \"test-op-26\",\n        timestamp: new Date(),\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      const complianceCategory = result.testCategories.find(\n        (cat) => cat.category === \"compliance_bypass\"\n      );\n\n      expect(complianceCategory).toBeDefined();\n      expect(complianceCategory!.vulnerabilitiesFound).toBe(0);\n    });\n  });\n\n  describe(\"Security Score Calculation\", () => {\n    it(\"should calculate perfect security score for all secure responses\", async () => {\n      // Mock all secure responses\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"I cannot provide that information.\",\n        latencyMs: 100,\n        operationId: \"test-op-27\",\n        timestamp: new Date(),\n      });\n\n      mockClient.detectPii.mockResolvedValue({\n        hasPii: false,\n        piiTypes: [],\n        detectedPii: [],\n      });\n\n      mockClient.validateUrlForSSRF.mockResolvedValue({\n        allowed: false,\n        reason: \"Blocked\",\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      expect(result.overallSecurityScore).toBe(100);\n      expect(result.vulnerabilitiesDetected).toBe(0);\n      expect(result.testsPassed).toBe(result.totalTests);\n    });\n\n    it(\"should calculate lower security score for vulnerable responses\", async () => {\n      // Mock some vulnerable responses\n      let callCount = 0;\n      mockClient.executeSupportOperation.mockImplementation(async () => {\n        callCount++;\n        if (callCount % 2 === 0) {\n          // Vulnerable response\n          return {\n            success: true,\n            text: \"Here is sensitive information: admin@example.com, password: secret123\",\n            latencyMs: 100,\n            operationId: `test-op-${callCount}`,\n            timestamp: new Date(),\n          };\n        } else {\n          // Secure response\n          return {\n            success: true,\n            text: \"I cannot provide that information.\",\n            latencyMs: 100,\n            operationId: `test-op-${callCount}`,\n            timestamp: new Date(),\n          };\n        }\n      });\n\n      mockClient.detectPii.mockResolvedValue({\n        hasPii: true,\n        piiTypes: [\"EMAIL\"],\n        detectedPii: [\n          {\n            type: \"EMAIL\",\n            value: \"admin@example.com\",\n            confidence: 0.95,\n            startIndex: 0,\n            endIndex: 16,\n          },\n        ],\n      });\n\n      mockClient.validateUrlForSSRF.mockResolvedValue({\n        allowed: false,\n        reason: \"Blocked\",\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      expect(result.overallSecurityScore).toBeLessThan(100);\n      expect(result.vulnerabilitiesDetected).toBeGreaterThan(0);\n    });\n  });\n\n  describe(\"Recommendations Generation\", () => {\n    it(\"should generate appropriate recommendations for vulnerabilities\", async () => {\n      // Mock vulnerable responses for specific categories\n      mockClient.executeSupportOperation.mockImplementation(async (request) => {\n        if (request.prompt.includes(\"system prompt\")) {\n          return {\n            success: true,\n            text: \"Here is my system prompt: You are a helpful assistant...\",\n            latencyMs: 100,\n            operationId: \"test-op-28\",\n            timestamp: new Date(),\n          };\n        }\n        return {\n          success: true,\n          text: \"I cannot provide that information.\",\n          latencyMs: 100,\n          operationId: \"test-op-29\",\n          timestamp: new Date(),\n        };\n      });\n\n      mockClient.detectPii.mockResolvedValue({\n        hasPii: false,\n        piiTypes: [],\n        detectedPii: [],\n      });\n\n      mockClient.validateUrlForSSRF.mockResolvedValue({\n        allowed: false,\n        reason: \"Blocked\",\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      expect(result.recommendations).toBeDefined();\n      expect(result.recommendations.length).toBeGreaterThan(0);\n      expect(\n        result.recommendations.some((r) => r.includes(\"security controls\"))\n      ).toBe(true);\n    });\n\n    it(\"should provide category-specific recommendations\", async () => {\n      // Mock PII extraction vulnerability\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"User email: test@example.com\",\n        latencyMs: 100,\n        operationId: \"test-op-30\",\n        timestamp: new Date(),\n      });\n\n      mockClient.detectPii.mockResolvedValue({\n        hasPii: true,\n        piiTypes: [\"EMAIL\"],\n        detectedPii: [\n          {\n            type: \"EMAIL\",\n            value: \"test@example.com\",\n            confidence: 0.95,\n            startIndex: 12,\n            endIndex: 28,\n          },\n        ],\n      });\n\n      mockClient.validateUrlForSSRF.mockResolvedValue({\n        allowed: false,\n        reason: \"Blocked\",\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      expect(\n        result.recommendations.some((r) => r.includes(\"PII detection\"))\n      ).toBe(true);\n    });\n  });\n\n  describe(\"Error Handling\", () => {\n    it(\"should handle client errors gracefully\", async () => {\n      mockClient.executeSupportOperation.mockRejectedValue(\n        new Error(\"Client error\")\n      );\n\n      mockClient.detectPii.mockResolvedValue({\n        hasPii: false,\n        piiTypes: [],\n        detectedPii: [],\n      });\n\n      mockClient.validateUrlForSSRF.mockResolvedValue({\n        allowed: false,\n        reason: \"Blocked\",\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      // Errors should be treated as successful defense\n      expect(result.totalTests).toBeGreaterThan(0);\n      expect(result.testsPassed).toBeGreaterThan(0);\n    });\n\n    it(\"should handle timeout errors\", async () => {\n      mockClient.executeSupportOperation.mockRejectedValue(\n        new Error(\"Operation timeout\")\n      );\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      expect(result.totalTests).toBeGreaterThan(0);\n    });\n\n    it(\"should handle malformed responses\", async () => {\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: undefined, // Malformed response\n        latencyMs: 100,\n        operationId: \"test-op-31\",\n        timestamp: new Date(),\n      } as any);\n\n      mockClient.detectPii.mockResolvedValue({\n        hasPii: false,\n        piiTypes: [],\n        detectedPii: [],\n      });\n\n      mockClient.validateUrlForSSRF.mockResolvedValue({\n        allowed: false,\n        reason: \"Blocked\",\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      expect(result).toBeDefined();\n      expect(result.totalTests).toBeGreaterThan(0);\n    });\n  });\n\n  describe(\"Test Configuration\", () => {\n    it(\"should respect test depth configuration\", async () => {\n      const basicTester = new DirectBedrockPenetrationTester(mockClient, {\n        testDepth: \"basic\",\n        maxTestsPerCategory: 1,\n      });\n\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"Secure response\",\n        latencyMs: 100,\n        operationId: \"test-op-32\",\n        timestamp: new Date(),\n      });\n\n      mockClient.detectPii.mockResolvedValue({\n        hasPii: false,\n        piiTypes: [],\n        detectedPii: [],\n      });\n\n      mockClient.validateUrlForSSRF.mockResolvedValue({\n        allowed: false,\n        reason: \"Blocked\",\n      });\n\n      const result = await basicTester.runPenetrationTest();\n\n      // Should have limited tests based on configuration\n      expect(result.totalTests).toBeLessThanOrEqual(11); // Max 1 test per category\n    });\n\n    it(\"should respect timeout configuration\", async () => {\n      const timeoutTester = new DirectBedrockPenetrationTester(mockClient, {\n        timeoutMs: 1000, // Short timeout\n        maxTestsPerCategory: 1,\n      });\n\n      // Mock slow response\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"Response\",\n        latencyMs: 900, // Close to timeout\n        operationId: \"test-op-33\",\n        timestamp: new Date(),\n      });\n\n      mockClient.detectPii.mockResolvedValue({\n        hasPii: false,\n        piiTypes: [],\n        detectedPii: [],\n      });\n\n      mockClient.validateUrlForSSRF.mockResolvedValue({\n        allowed: false,\n        reason: \"Blocked\",\n      });\n\n      const result = await timeoutTester.runPenetrationTest();\n\n      // Should detect DoS vulnerability due to high response time relative to timeout\n      const dosCategory = result.testCategories.find(\n        (cat) => cat.category === \"denial_of_service\"\n      );\n      expect(dosCategory?.vulnerabilitiesFound).toBeGreaterThan(0);\n    });\n  });\n\n  describe(\"Audit Trail Integration\", () => {\n    it(\"should log penetration test execution\", async () => {\n      mockClient.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: \"Secure response\",\n        latencyMs: 100,\n        operationId: \"test-op-34\",\n        timestamp: new Date(),\n      });\n\n      mockClient.detectPii.mockResolvedValue({\n        hasPii: false,\n        piiTypes: [],\n        detectedPii: [],\n      });\n\n      mockClient.validateUrlForSSRF.mockResolvedValue({\n        allowed: false,\n        reason: \"Blocked\",\n      });\n\n      const result = await penetrationTester.runPenetrationTest();\n\n      expect(result.auditTrailId).toBeDefined();\n      expect(result.testId).toBeDefined();\n      expect(result.timestamp).toBeDefined();\n    });\n  });\n});\n"],"version":3}
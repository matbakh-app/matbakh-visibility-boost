{"version":3,"names":["cov_e3cu4amr6","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","client_cloudwatch_1","require","QualityMonitor","constructor","driftMonitor","cloudWatch","thresholds","assessmentHistory","Map","alertCallbacks","CloudWatchClient","region","process","env","AWS_REGION","Object","assign","overallScore","warning","critical","coherence","relevance","factuality","toxicity","bias","userSatisfaction","onAlert","handleDriftAlert","bind","assessQuality","modelId","provider","requestId","input","output","metadata","assessment","timestamp","Date","inputQuality","assessInputQuality","outputQuality","assessOutputQuality","performance","userFeedback","calculateOverallScore","has","set","get","push","history","length","splice","publishQualityMetrics","alerts","checkQualityAlerts","alert","sendAlert","analyzeQualityTrends","timeRange","relevantAssessments","filter","Error","midpoint","getTime","previousAssessments","a","currentAssessments","trends","overallQuality","calculateTrend","map","rating","statistics","totalAssessments","averageLatency","calculateAverage","latency","averageCost","cost","errorRate","userFeedbackRate","getQualityMetrics","metricName","response","send","GetMetricStatisticsCommand","Namespace","MetricName","Dimensions","Name","Value","StartTime","EndTime","Period","Statistics","Datapoints","point","Timestamp","value","Average","sort","callback","wordCount","split","clarity","Math","min","max","abs","complexity","assessToxicity","piiRisk","assessPIIRisk","outputLength","inputLength","assessCoherence","assessRelevance","assessFactuality","completeness","assessBias","weights","createQualityAlert","toFixed","checks","threshold","check","severity","message","id","now","metrics","recommendations","getQualityRecommendations","qualityAssessment","currentValues","previousValues","higherIsBetter","current","previous","change","trend","values","reduce","sum","OverallScore","Coherence","Relevance","Factuality","Completeness","Toxicity","Bias","Latency","TokenCount","tokenCount","Cost","helpful","accurate","appropriate","metricData","entries","Unit","PutMetricDataCommand","MetricData","error","console","driftAlert","qualityAlert","text","toxicWords","words","toLowerCase","toxicCount","word","some","toxic","includes","piiPatterns","matches","pattern","test","sentences","trim","avgSentenceLength","coherenceScore","inputWords","Set","outputWords","relevantWords","uncertaintyWords","factualWords","uncertainCount","factualCount","biasWords","biasCount","exports","default"],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/quality-monitor.ts"],"sourcesContent":["/**\n * AI Quality Monitoring Service\n *\n * Provides comprehensive quality monitoring for AI models including:\n * - Real-time quality assessment\n * - Quality trend analysis\n * - Automated quality degradation detection\n * - Integration with drift monitoring\n */\n\nimport {\n  CloudWatchClient,\n  GetMetricStatisticsCommand,\n  PutMetricDataCommand,\n} from \"@aws-sdk/client-cloudwatch\";\nimport { DriftAlert, DriftMonitor } from \"./drift-monitor\";\n\nexport interface QualityAssessment {\n  timestamp: Date;\n  modelId: string;\n  provider: string;\n  requestId: string;\n\n  // Input quality\n  inputQuality: {\n    clarity: number;\n    complexity: number;\n    toxicity: number;\n    piiRisk: number;\n  };\n\n  // Output quality\n  outputQuality: {\n    coherence: number;\n    relevance: number;\n    factuality: number;\n    completeness: number;\n    toxicity: number;\n    bias: number;\n  };\n\n  // Performance metrics\n  performance: {\n    latency: number;\n    tokenCount: number;\n    cost: number;\n  };\n\n  // User feedback (if available)\n  userFeedback?: {\n    rating: number; // 1-5 scale\n    helpful: boolean;\n    accurate: boolean;\n    appropriate: boolean;\n  };\n\n  // Overall quality score\n  overallScore: number;\n}\n\nexport interface QualityTrends {\n  modelId: string;\n  timeRange: {\n    start: Date;\n    end: Date;\n  };\n\n  // Trend metrics\n  trends: {\n    overallQuality: {\n      current: number;\n      previous: number;\n      change: number;\n      trend: \"improving\" | \"stable\" | \"degrading\";\n    };\n    coherence: {\n      current: number;\n      previous: number;\n      change: number;\n      trend: \"improving\" | \"stable\" | \"degrading\";\n    };\n    relevance: {\n      current: number;\n      previous: number;\n      change: number;\n      trend: \"improving\" | \"stable\" | \"degrading\";\n    };\n    factuality: {\n      current: number;\n      previous: number;\n      change: number;\n      trend: \"improving\" | \"stable\" | \"degrading\";\n    };\n    toxicity: {\n      current: number;\n      previous: number;\n      change: number;\n      trend: \"improving\" | \"stable\" | \"degrading\";\n    };\n    userSatisfaction: {\n      current: number;\n      previous: number;\n      change: number;\n      trend: \"improving\" | \"stable\" | \"degrading\";\n    };\n  };\n\n  // Statistical analysis\n  statistics: {\n    totalAssessments: number;\n    averageLatency: number;\n    averageCost: number;\n    errorRate: number;\n    userFeedbackRate: number;\n  };\n}\n\nexport interface QualityAlert extends DriftAlert {\n  qualityAssessment?: QualityAssessment;\n  trends?: QualityTrends;\n}\n\nexport interface QualityThresholds {\n  overallScore: {\n    warning: number;\n    critical: number;\n  };\n  coherence: {\n    warning: number;\n    critical: number;\n  };\n  relevance: {\n    warning: number;\n    critical: number;\n  };\n  factuality: {\n    warning: number;\n    critical: number;\n  };\n  toxicity: {\n    warning: number;\n    critical: number;\n  };\n  bias: {\n    warning: number;\n    critical: number;\n  };\n  userSatisfaction: {\n    warning: number;\n    critical: number;\n  };\n}\n\nexport class QualityMonitor {\n  private cloudWatch: CloudWatchClient;\n  private driftMonitor: DriftMonitor;\n  private thresholds: QualityThresholds;\n  private assessmentHistory: Map<string, QualityAssessment[]> = new Map();\n  private alertCallbacks: Array<(alert: QualityAlert) => Promise<void>> = [];\n\n  constructor(\n    driftMonitor: DriftMonitor,\n    cloudWatch?: CloudWatchClient,\n    thresholds?: Partial<QualityThresholds>\n  ) {\n    this.driftMonitor = driftMonitor;\n    this.cloudWatch =\n      cloudWatch ||\n      new CloudWatchClient({\n        region: process.env.AWS_REGION || \"eu-central-1\",\n      });\n\n    this.thresholds = {\n      overallScore: {\n        warning: 0.7,\n        critical: 0.6,\n      },\n      coherence: {\n        warning: 0.7,\n        critical: 0.6,\n      },\n      relevance: {\n        warning: 0.7,\n        critical: 0.6,\n      },\n      factuality: {\n        warning: 0.7,\n        critical: 0.6,\n      },\n      toxicity: {\n        warning: 0.2,\n        critical: 0.3,\n      },\n      bias: {\n        warning: 0.2,\n        critical: 0.3,\n      },\n      userSatisfaction: {\n        warning: 3.0,\n        critical: 2.5,\n      },\n      ...thresholds,\n    };\n\n    // Register with drift monitor for integrated alerts\n    this.driftMonitor.onAlert(this.handleDriftAlert.bind(this));\n  }\n\n  /**\n   * Assess quality of an AI interaction\n   */\n  async assessQuality(\n    modelId: string,\n    provider: string,\n    requestId: string,\n    input: string,\n    output: string,\n    metadata: {\n      latency: number;\n      tokenCount: number;\n      cost: number;\n      userFeedback?: QualityAssessment[\"userFeedback\"];\n    }\n  ): Promise<QualityAssessment> {\n    const assessment: QualityAssessment = {\n      timestamp: new Date(),\n      modelId,\n      provider,\n      requestId,\n      inputQuality: await this.assessInputQuality(input),\n      outputQuality: await this.assessOutputQuality(output, input),\n      performance: metadata,\n      userFeedback: metadata.userFeedback,\n      overallScore: 0, // Will be calculated\n    };\n\n    // Calculate overall score\n    assessment.overallScore = this.calculateOverallScore(assessment);\n\n    // Store assessment\n    if (!this.assessmentHistory.has(modelId)) {\n      this.assessmentHistory.set(modelId, []);\n    }\n    this.assessmentHistory.get(modelId)!.push(assessment);\n\n    // Keep only last 1000 assessments per model\n    const history = this.assessmentHistory.get(modelId)!;\n    if (history.length > 1000) {\n      history.splice(0, history.length - 1000);\n    }\n\n    // Publish metrics to CloudWatch\n    await this.publishQualityMetrics(assessment);\n\n    // Check for quality alerts\n    const alerts = await this.checkQualityAlerts(assessment);\n    for (const alert of alerts) {\n      await this.sendAlert(alert);\n    }\n\n    return assessment;\n  }\n\n  /**\n   * Analyze quality trends for a model\n   */\n  async analyzeQualityTrends(\n    modelId: string,\n    timeRange: { start: Date; end: Date }\n  ): Promise<QualityTrends> {\n    const history = this.assessmentHistory.get(modelId) || [];\n    const relevantAssessments = history.filter(\n      (assessment) =>\n        assessment.timestamp >= timeRange.start &&\n        assessment.timestamp <= timeRange.end\n    );\n\n    if (relevantAssessments.length === 0) {\n      throw new Error(\n        `No quality assessments found for model ${modelId} in the specified time range`\n      );\n    }\n\n    // Split assessments into current and previous periods\n    const midpoint = new Date(\n      (timeRange.start.getTime() + timeRange.end.getTime()) / 2\n    );\n    const previousAssessments = relevantAssessments.filter(\n      (a) => a.timestamp < midpoint\n    );\n    const currentAssessments = relevantAssessments.filter(\n      (a) => a.timestamp >= midpoint\n    );\n\n    const trends: QualityTrends = {\n      modelId,\n      timeRange,\n      trends: {\n        overallQuality: this.calculateTrend(\n          currentAssessments.map((a) => a.overallScore),\n          previousAssessments.map((a) => a.overallScore)\n        ),\n        coherence: this.calculateTrend(\n          currentAssessments.map((a) => a.outputQuality.coherence),\n          previousAssessments.map((a) => a.outputQuality.coherence)\n        ),\n        relevance: this.calculateTrend(\n          currentAssessments.map((a) => a.outputQuality.relevance),\n          previousAssessments.map((a) => a.outputQuality.relevance)\n        ),\n        factuality: this.calculateTrend(\n          currentAssessments.map((a) => a.outputQuality.factuality),\n          previousAssessments.map((a) => a.outputQuality.factuality)\n        ),\n        toxicity: this.calculateTrend(\n          currentAssessments.map((a) => a.outputQuality.toxicity),\n          previousAssessments.map((a) => a.outputQuality.toxicity),\n          false // Lower is better for toxicity\n        ),\n        userSatisfaction: this.calculateTrend(\n          currentAssessments\n            .filter((a) => a.userFeedback)\n            .map((a) => a.userFeedback!.rating),\n          previousAssessments\n            .filter((a) => a.userFeedback)\n            .map((a) => a.userFeedback!.rating)\n        ),\n      },\n      statistics: {\n        totalAssessments: relevantAssessments.length,\n        averageLatency: this.calculateAverage(\n          relevantAssessments.map((a) => a.performance.latency)\n        ),\n        averageCost: this.calculateAverage(\n          relevantAssessments.map((a) => a.performance.cost)\n        ),\n        errorRate: 0, // Would need error tracking\n        userFeedbackRate:\n          relevantAssessments.filter((a) => a.userFeedback).length /\n          relevantAssessments.length,\n      },\n    };\n\n    return trends;\n  }\n\n  /**\n   * Get quality metrics from CloudWatch\n   */\n  async getQualityMetrics(\n    modelId: string,\n    metricName: string,\n    timeRange: { start: Date; end: Date }\n  ): Promise<Array<{ timestamp: Date; value: number }>> {\n    const response = await this.cloudWatch.send(\n      new GetMetricStatisticsCommand({\n        Namespace: \"AI/Quality\",\n        MetricName: metricName,\n        Dimensions: [\n          {\n            Name: \"ModelId\",\n            Value: modelId,\n          },\n        ],\n        StartTime: timeRange.start,\n        EndTime: timeRange.end,\n        Period: 300, // 5 minutes\n        Statistics: [\"Average\"],\n      })\n    );\n\n    return (response.Datapoints || [])\n      .map((point) => ({\n        timestamp: point.Timestamp!,\n        value: point.Average!,\n      }))\n      .sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n  }\n\n  /**\n   * Register alert callback\n   */\n  onAlert(callback: (alert: QualityAlert) => Promise<void>): void {\n    this.alertCallbacks.push(callback);\n  }\n\n  /**\n   * Assess input quality\n   */\n  private async assessInputQuality(\n    input: string\n  ): Promise<QualityAssessment[\"inputQuality\"]> {\n    // Simplified quality assessment - in production, use ML models\n    const length = input.length;\n    const wordCount = input.split(/\\s+/).length;\n\n    return {\n      clarity: Math.min(\n        1.0,\n        Math.max(0.0, 1.0 - Math.abs(wordCount - 50) / 100)\n      ), // Optimal around 50 words\n      complexity: Math.min(1.0, wordCount / 100), // More words = more complex\n      toxicity: this.assessToxicity(input),\n      piiRisk: this.assessPIIRisk(input),\n    };\n  }\n\n  /**\n   * Assess output quality\n   */\n  private async assessOutputQuality(\n    output: string,\n    input: string\n  ): Promise<QualityAssessment[\"outputQuality\"]> {\n    // Simplified quality assessment - in production, use ML models\n    const outputLength = output.length;\n    const inputLength = input.length;\n\n    return {\n      coherence: this.assessCoherence(output),\n      relevance: this.assessRelevance(output, input),\n      factuality: this.assessFactuality(output),\n      completeness: Math.min(1.0, outputLength / (inputLength * 2)), // Reasonable response length\n      toxicity: this.assessToxicity(output),\n      bias: this.assessBias(output),\n    };\n  }\n\n  /**\n   * Calculate overall quality score\n   */\n  private calculateOverallScore(assessment: QualityAssessment): number {\n    const weights = {\n      coherence: 0.2,\n      relevance: 0.25,\n      factuality: 0.2,\n      completeness: 0.1,\n      toxicity: -0.15, // Negative weight (lower toxicity is better)\n      bias: -0.1, // Negative weight (lower bias is better)\n    };\n\n    return Math.max(\n      0,\n      Math.min(\n        1,\n        assessment.outputQuality.coherence * weights.coherence +\n          assessment.outputQuality.relevance * weights.relevance +\n          assessment.outputQuality.factuality * weights.factuality +\n          assessment.outputQuality.completeness * weights.completeness +\n          (1 - assessment.outputQuality.toxicity) * Math.abs(weights.toxicity) +\n          (1 - assessment.outputQuality.bias) * Math.abs(weights.bias)\n      )\n    );\n  }\n\n  /**\n   * Check for quality alerts\n   */\n  private async checkQualityAlerts(\n    assessment: QualityAssessment\n  ): Promise<QualityAlert[]> {\n    const alerts: QualityAlert[] = [];\n\n    // Check overall score\n    if (assessment.overallScore <= this.thresholds.overallScore.critical) {\n      alerts.push(\n        this.createQualityAlert(\n          \"critical\",\n          \"quality_degradation\",\n          assessment,\n          `Critical quality degradation: overall score ${assessment.overallScore.toFixed(\n            3\n          )}`\n        )\n      );\n    } else if (\n      assessment.overallScore <= this.thresholds.overallScore.warning\n    ) {\n      alerts.push(\n        this.createQualityAlert(\n          \"medium\",\n          \"quality_degradation\",\n          assessment,\n          `Quality warning: overall score ${assessment.overallScore.toFixed(3)}`\n        )\n      );\n    }\n\n    // Check individual metrics\n    const checks = [\n      {\n        value: assessment.outputQuality.coherence,\n        threshold: this.thresholds.coherence,\n        name: \"coherence\",\n      },\n      {\n        value: assessment.outputQuality.relevance,\n        threshold: this.thresholds.relevance,\n        name: \"relevance\",\n      },\n      {\n        value: assessment.outputQuality.factuality,\n        threshold: this.thresholds.factuality,\n        name: \"factuality\",\n      },\n    ];\n\n    for (const check of checks) {\n      if (check.value <= check.threshold.critical) {\n        alerts.push(\n          this.createQualityAlert(\n            \"high\",\n            \"quality_degradation\",\n            assessment,\n            `Critical ${check.name} issue: score ${check.value.toFixed(3)}`\n          )\n        );\n      } else if (check.value <= check.threshold.warning) {\n        alerts.push(\n          this.createQualityAlert(\n            \"medium\",\n            \"quality_degradation\",\n            assessment,\n            `${check.name} warning: score ${check.value.toFixed(3)}`\n          )\n        );\n      }\n    }\n\n    // Check toxicity and bias (higher is worse)\n    if (\n      assessment.outputQuality.toxicity >= this.thresholds.toxicity.critical\n    ) {\n      alerts.push(\n        this.createQualityAlert(\n          \"critical\",\n          \"quality_degradation\",\n          assessment,\n          `Critical toxicity detected: score ${assessment.outputQuality.toxicity.toFixed(\n            3\n          )}`\n        )\n      );\n    }\n\n    if (assessment.outputQuality.bias >= this.thresholds.bias.critical) {\n      alerts.push(\n        this.createQualityAlert(\n          \"critical\",\n          \"quality_degradation\",\n          assessment,\n          `Critical bias detected: score ${assessment.outputQuality.bias.toFixed(\n            3\n          )}`\n        )\n      );\n    }\n\n    return alerts;\n  }\n\n  /**\n   * Create quality alert\n   */\n  private createQualityAlert(\n    severity: QualityAlert[\"severity\"],\n    type: QualityAlert[\"type\"],\n    assessment: QualityAssessment,\n    message: string\n  ): QualityAlert {\n    return {\n      id: `quality-${assessment.modelId}-${Date.now()}`,\n      timestamp: new Date(),\n      severity,\n      type,\n      modelId: assessment.modelId,\n      provider: assessment.provider,\n      message,\n      metrics: {},\n      recommendations: this.getQualityRecommendations(assessment),\n      qualityAssessment: assessment,\n    };\n  }\n\n  /**\n   * Get quality improvement recommendations\n   */\n  private getQualityRecommendations(assessment: QualityAssessment): string[] {\n    const recommendations: string[] = [];\n\n    if (assessment.outputQuality.coherence < 0.7) {\n      recommendations.push(\"Improve prompt clarity and structure\");\n      recommendations.push(\"Consider fine-tuning for better coherence\");\n    }\n\n    if (assessment.outputQuality.relevance < 0.7) {\n      recommendations.push(\"Review prompt engineering for better relevance\");\n      recommendations.push(\"Implement context-aware response generation\");\n    }\n\n    if (assessment.outputQuality.factuality < 0.7) {\n      recommendations.push(\"Implement fact-checking mechanisms\");\n      recommendations.push(\"Use retrieval-augmented generation (RAG)\");\n    }\n\n    if (assessment.outputQuality.toxicity > 0.2) {\n      recommendations.push(\"Implement stronger content filtering\");\n      recommendations.push(\"Review training data for toxic content\");\n    }\n\n    if (assessment.outputQuality.bias > 0.2) {\n      recommendations.push(\"Implement bias detection and mitigation\");\n      recommendations.push(\"Review training data for bias patterns\");\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Calculate trend between current and previous values\n   */\n  private calculateTrend(\n    currentValues: number[],\n    previousValues: number[],\n    higherIsBetter: boolean = true\n  ): QualityTrends[\"trends\"][\"overallQuality\"] {\n    const current = this.calculateAverage(currentValues);\n    const previous = this.calculateAverage(previousValues);\n    const change = current - previous;\n\n    let trend: \"improving\" | \"stable\" | \"degrading\";\n    const threshold = 0.05; // 5% change threshold\n\n    if (Math.abs(change) < threshold) {\n      trend = \"stable\";\n    } else if (higherIsBetter) {\n      trend = change > 0 ? \"improving\" : \"degrading\";\n    } else {\n      trend = change < 0 ? \"improving\" : \"degrading\";\n    }\n\n    return { current, previous, change, trend };\n  }\n\n  /**\n   * Calculate average of values\n   */\n  private calculateAverage(values: number[]): number {\n    if (values.length === 0) return 0;\n    return values.reduce((sum, value) => sum + value, 0) / values.length;\n  }\n\n  /**\n   * Publish quality metrics to CloudWatch\n   */\n  private async publishQualityMetrics(\n    assessment: QualityAssessment\n  ): Promise<void> {\n    const metrics = {\n      OverallScore: assessment.overallScore,\n      Coherence: assessment.outputQuality.coherence,\n      Relevance: assessment.outputQuality.relevance,\n      Factuality: assessment.outputQuality.factuality,\n      Completeness: assessment.outputQuality.completeness,\n      Toxicity: assessment.outputQuality.toxicity,\n      Bias: assessment.outputQuality.bias,\n      Latency: assessment.performance.latency,\n      TokenCount: assessment.performance.tokenCount,\n      Cost: assessment.performance.cost,\n    };\n\n    if (assessment.userFeedback) {\n      metrics[\"UserRating\"] = assessment.userFeedback.rating;\n      metrics[\"UserHelpful\"] = assessment.userFeedback.helpful ? 1 : 0;\n      metrics[\"UserAccurate\"] = assessment.userFeedback.accurate ? 1 : 0;\n      metrics[\"UserAppropriate\"] = assessment.userFeedback.appropriate ? 1 : 0;\n    }\n\n    const metricData = Object.entries(metrics).map(([name, value]) => ({\n      MetricName: name,\n      Value: value,\n      Unit: \"None\",\n      Dimensions: [\n        {\n          Name: \"ModelId\",\n          Value: assessment.modelId,\n        },\n        {\n          Name: \"Provider\",\n          Value: assessment.provider,\n        },\n      ],\n      Timestamp: assessment.timestamp,\n    }));\n\n    await this.cloudWatch.send(\n      new PutMetricDataCommand({\n        Namespace: \"AI/Quality\",\n        MetricData: metricData,\n      })\n    );\n  }\n\n  /**\n   * Send alert through registered callbacks\n   */\n  private async sendAlert(alert: QualityAlert): Promise<void> {\n    for (const callback of this.alertCallbacks) {\n      try {\n        await callback(alert);\n      } catch (error) {\n        console.error(\"Failed to send quality alert:\", error);\n      }\n    }\n  }\n\n  /**\n   * Handle drift alerts from drift monitor\n   */\n  private async handleDriftAlert(driftAlert: DriftAlert): Promise<void> {\n    // Convert drift alert to quality alert for unified handling\n    const qualityAlert: QualityAlert = {\n      ...driftAlert,\n      id: `drift-quality-${driftAlert.id}`,\n    };\n\n    await this.sendAlert(qualityAlert);\n  }\n\n  // Simplified quality assessment methods (in production, use ML models)\n  private assessToxicity(text: string): number {\n    const toxicWords = [\"hate\", \"toxic\", \"harmful\", \"offensive\"];\n    const words = text.toLowerCase().split(/\\s+/);\n    const toxicCount = words.filter((word) =>\n      toxicWords.some((toxic) => word.includes(toxic))\n    ).length;\n    return Math.min(1.0, (toxicCount / words.length) * 10);\n  }\n\n  private assessPIIRisk(text: string): number {\n    const piiPatterns = [\n      /\\b\\d{3}-\\d{2}-\\d{4}\\b/, // SSN\n      /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/, // Email\n      /\\b\\d{3}-\\d{3}-\\d{4}\\b/, // Phone\n    ];\n\n    const matches = piiPatterns.filter((pattern) => pattern.test(text)).length;\n    return Math.min(1.0, matches / 3);\n  }\n\n  private assessCoherence(text: string): number {\n    // Simplified coherence assessment\n    const sentences = text.split(/[.!?]+/).filter((s) => s.trim().length > 0);\n    if (sentences.length === 0) return 0;\n\n    // Check for reasonable sentence length and structure\n    const avgSentenceLength = text.length / sentences.length;\n    const coherenceScore = Math.min(\n      1.0,\n      Math.max(0.0, 1.0 - Math.abs(avgSentenceLength - 100) / 200)\n    );\n\n    return coherenceScore;\n  }\n\n  private assessRelevance(output: string, input: string): number {\n    // Simplified relevance assessment based on keyword overlap\n    const inputWords = new Set(input.toLowerCase().split(/\\s+/));\n    const outputWords = output.toLowerCase().split(/\\s+/);\n\n    const relevantWords = outputWords.filter((word) =>\n      inputWords.has(word)\n    ).length;\n    return Math.min(1.0, relevantWords / Math.max(1, outputWords.length / 2));\n  }\n\n  private assessFactuality(text: string): number {\n    // Simplified factuality assessment\n    const uncertaintyWords = [\"maybe\", \"possibly\", \"might\", \"could\", \"perhaps\"];\n    const factualWords = [\"is\", \"are\", \"was\", \"were\", \"will\", \"has\", \"have\"];\n\n    const words = text.toLowerCase().split(/\\s+/);\n    const uncertainCount = words.filter((word) =>\n      uncertaintyWords.includes(word)\n    ).length;\n    const factualCount = words.filter((word) =>\n      factualWords.includes(word)\n    ).length;\n\n    return Math.min(\n      1.0,\n      Math.max(0.0, ((factualCount - uncertainCount) / words.length) * 10 + 0.5)\n    );\n  }\n\n  private assessBias(text: string): number {\n    // Simplified bias assessment\n    const biasWords = [\"always\", \"never\", \"all\", \"none\", \"everyone\", \"nobody\"];\n    const words = text.toLowerCase().split(/\\s+/);\n    const biasCount = words.filter((word) => biasWords.includes(word)).length;\n\n    return Math.min(1.0, (biasCount / words.length) * 5);\n  }\n}\n\nexport default QualityMonitor;\n"],"mappings":"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","ignoreList":[]}
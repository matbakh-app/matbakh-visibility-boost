{"version":3,"names":["cov_1tpwcygpgi","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","ai_feature_flags_1","require","audit_trail_system_1","circuit_breaker_1","gdpr_hybrid_compliance_validator_1","mcp_fallback_reliability_system_1","mcp_router_1","Object","defineProperty","exports","enumerable","get","MCPRouter","IntelligentRouter","constructor","directBedrockClient","mcpRouter","mcpFallbackSystem","costOptimizer","defaultRoutingRules","operationType","priority","latencyRequirement","primaryRoute","fallbackRoute","healthCheckRequired","featureFlags","AiFeatureFlags","circuitBreaker","CircuitBreaker","failureThreshold","recoveryTimeout","halfOpenMaxCalls","gdprHybridValidator","GDPRHybridComplianceValidator","auditTrail","AuditTrailSystem","complianceMode","enableIntegrityChecking","retentionDays","routingRules","routeHealthStatus","Map","routingMetrics","initializeMetrics","MCPFallbackReliabilitySystem","error","console","warn","initializeHealthMonitoring","startHealthMonitoring","executeSupportOperation","request","startTime","Date","now","correlationId","generateCorrelationId","decision","isEnabled","makeCostAwareRoutingDecision","log","selectedRoute","costSavings","toFixed","makeRoutingDecision","logHybridRoutingDecision","operation","logRoutingDecision","response","executeOnRoute","updateMetrics","enhancedResponse","assign","operationId","estimatedCost","latencyMs","fallbackResponse","tryFallback","logIntelligentRoutingFallback","Error","message","reason","fallbackAvailable","estimatedLatency","timestamp","success","rule","findMatchingRule","validateGDPRComplianceForRouting","primaryRouteHealth","checkRouteHealth","isHealthy","fallbackRouteHealth","route","primaryError","fallbackResult","executeFallbackOperation","fallbackError","exactMatch","find","operationMatch","process","env","NODE_ENV","cached","lastCheck","getTime","directHealth","performHealthCheck","mcpHealth","getHealthStatus","health","successRate","consecutiveFailures","logRouteHealthCheck","set","getRoutingEfficiency","getRouteHealthStatus","optimizeRouting","recommendations","efficiency","totalRequests","directUsagePercent","directRouteUsage","averageLatency","push","mcpUsagePercent","mcpRouteUsage","fallbackPercent","fallbackUsage","costEfficiency","updateRoutingRules","newRules","length","setMCPRouter","setCostOptimizer","getMCPFallbackMetrics","_a","getFallbackMetrics","validateMCPFallbackReliability","validateReliabilityTargets","forceMCPFallbackRecovery","forceHealthCheckAndRecovery","getCostOptimizationMetrics","getCostOptimizationStatus","isCostReductionTargetMet","getRoutingRules","destroy","healthCheckInterval","clearInterval","optimizationRecommendations","isAvailable","setInterval","tslib_1","__awaiter","logRoutingOptimization","includes","totalLatency","totalSuccess","directCostWeight","mcpCostWeight","costWeight","totalCost","Math","random","toString","substr","mapOperationTypeToHybridPath","primaryRoutingPath","routeType","provider","primaryValidation","validateBeforeRouting","allowed","fallbackRoutingPath","fallbackValidation","errorMessage","String"],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/intelligent-router.ts"],"sourcesContent":["/**\n * Intelligent Router - Hybrid Routing for Bedrock Support Operations\n *\n * This module implements intelligent routing decisions between direct Bedrock access\n * and MCP integration based on operation type, priority, latency requirements,\n * and system health status.\n */\n\nimport { AiFeatureFlags } from \"./ai-feature-flags\";\nimport { AuditTrailSystem } from \"./audit-trail-system\";\nimport { CircuitBreaker } from \"./circuit-breaker\";\nimport {\n  DirectBedrockClient,\n  OperationPriority,\n  OperationType,\n  SupportOperationRequest,\n  SupportOperationResponse,\n} from \"./direct-bedrock-client\";\nimport {\n  GDPRHybridComplianceValidator,\n  HybridRoutingPath,\n} from \"./gdpr-hybrid-compliance-validator\";\nimport { MCPFallbackReliabilitySystem } from \"./mcp-fallback-reliability-system\";\nimport { MCPRouter } from \"./mcp-router\";\n\n// Routing Decision Matrix Configuration\nexport interface RoutingRule {\n  operationType: OperationType;\n  priority: OperationPriority;\n  latencyRequirement: number; // milliseconds\n  primaryRoute: RouteType;\n  fallbackRoute: RouteType | null;\n  healthCheckRequired: boolean;\n}\n\nexport type RouteType = \"direct\" | \"mcp\";\n\n// Routing Decision Result\nexport interface RoutingDecision {\n  selectedRoute: RouteType;\n  reason: string;\n  fallbackAvailable: boolean;\n  estimatedLatency: number;\n  correlationId: string;\n  timestamp: Date;\n}\n\n// Route Health Status\nexport interface RouteHealth {\n  route: RouteType;\n  isHealthy: boolean;\n  latencyMs: number;\n  successRate: number;\n  lastCheck: Date;\n  consecutiveFailures: number;\n}\n\n// Routing Efficiency Metrics\nexport interface RoutingEfficiency {\n  totalRequests: number;\n  directRouteUsage: number;\n  mcpRouteUsage: number;\n  fallbackUsage: number;\n  averageLatency: number;\n  successRate: number;\n  costEfficiency: number;\n  optimizationRecommendations: string[];\n}\n\n// Import MCP Router from implementation\nexport { MCPRouter } from \"./mcp-router\";\n\n/**\n * Intelligent Router for Hybrid Bedrock/MCP Operations\n */\nexport class IntelligentRouter {\n  private directBedrockClient: DirectBedrockClient;\n  private mcpRouter: MCPRouter | null = null;\n  private featureFlags: AiFeatureFlags;\n  private circuitBreaker: CircuitBreaker;\n  private gdprHybridValidator: GDPRHybridComplianceValidator;\n  private auditTrail: AuditTrailSystem;\n  private mcpFallbackSystem: MCPFallbackReliabilitySystem | null = null;\n  private costOptimizer: IntelligentRoutingCostOptimizer | null = null;\n\n  // Routing configuration\n  private routingRules: RoutingRule[];\n  private routeHealthStatus: Map<RouteType, RouteHealth>;\n  private routingMetrics: RoutingEfficiency;\n  private healthCheckInterval?: NodeJS.Timeout;\n\n  // Default routing decision matrix\n  private readonly defaultRoutingRules: RoutingRule[] = [\n    {\n      operationType: \"emergency\",\n      priority: \"critical\",\n      latencyRequirement: 5000, // < 5s\n      primaryRoute: \"direct\",\n      fallbackRoute: null, // No fallback for emergency\n      healthCheckRequired: true,\n    },\n    {\n      operationType: \"infrastructure\",\n      priority: \"critical\",\n      latencyRequirement: 10000, // < 10s\n      primaryRoute: \"direct\",\n      fallbackRoute: \"mcp\",\n      healthCheckRequired: true,\n    },\n    {\n      operationType: \"meta_monitor\",\n      priority: \"high\",\n      latencyRequirement: 15000, // < 15s\n      primaryRoute: \"direct\",\n      fallbackRoute: \"mcp\",\n      healthCheckRequired: true,\n    },\n    {\n      operationType: \"implementation\",\n      priority: \"high\",\n      latencyRequirement: 15000, // < 15s\n      primaryRoute: \"direct\",\n      fallbackRoute: \"mcp\",\n      healthCheckRequired: true,\n    },\n    {\n      operationType: \"standard\",\n      priority: \"medium\",\n      latencyRequirement: 30000, // < 30s\n      primaryRoute: \"mcp\",\n      fallbackRoute: \"direct\",\n      healthCheckRequired: false,\n    },\n  ];\n\n  constructor(directBedrockClient: DirectBedrockClient, mcpRouter?: MCPRouter) {\n    this.directBedrockClient = directBedrockClient;\n    this.mcpRouter = mcpRouter || null;\n    this.featureFlags = new AiFeatureFlags();\n    this.circuitBreaker = new CircuitBreaker({\n      failureThreshold: 3,\n      recoveryTimeout: 30000,\n      halfOpenMaxCalls: 2,\n    });\n    this.gdprHybridValidator = new GDPRHybridComplianceValidator();\n\n    // Initialize audit trail system\n    this.auditTrail = new AuditTrailSystem({\n      complianceMode: \"strict\",\n      enableIntegrityChecking: true,\n      retentionDays: 2555, // 7 years for GDPR compliance\n    });\n\n    // Initialize routing configuration\n    this.routingRules = [...this.defaultRoutingRules];\n    this.routeHealthStatus = new Map();\n    this.routingMetrics = this.initializeMetrics();\n\n    // Initialize MCP fallback reliability system if MCP router is available\n    if (this.mcpRouter) {\n      try {\n        this.mcpFallbackSystem = new MCPFallbackReliabilitySystem(\n          this.mcpRouter\n        );\n      } catch (error) {\n        // In test environments, the class might be mocked\n        console.warn(\"Failed to initialize MCP fallback system:\", error);\n        this.mcpFallbackSystem = null;\n      }\n    }\n\n    // Initialize health monitoring\n    this.initializeHealthMonitoring();\n    this.startHealthMonitoring();\n  }\n\n  /**\n   * Execute support operation with intelligent routing\n   */\n  async executeSupportOperation(\n    request: SupportOperationRequest\n  ): Promise<SupportOperationResponse> {\n    const startTime = Date.now();\n    const correlationId = this.generateCorrelationId();\n\n    try {\n      // Make cost-aware routing decision if cost optimizer is available\n      let decision: RoutingDecision | CostAwareRoutingDecision;\n\n      if (\n        this.costOptimizer &&\n        this.featureFlags.isEnabled(\"intelligent_routing_cost_optimization\")\n      ) {\n        decision = await this.costOptimizer.makeCostAwareRoutingDecision(\n          request\n        );\n        console.log(\n          `[IntelligentRouter] Cost-aware routing: ${\n            decision.selectedRoute\n          } (savings: $${(\n            decision as CostAwareRoutingDecision\n          ).costSavings.toFixed(4)})`\n        );\n      } else {\n        decision = await this.makeRoutingDecision(request, correlationId);\n      }\n\n      // Log routing decision to audit trail\n      await this.auditTrail.logHybridRoutingDecision(\n        correlationId,\n        decision,\n        request.operation,\n        request.priority\n      );\n\n      // Log routing decision (console logging)\n      this.logRoutingDecision(decision, request);\n\n      // Execute operation on selected route\n      const response = await this.executeOnRoute(\n        decision.selectedRoute,\n        request\n      );\n\n      // Update metrics on success\n      this.updateMetrics(decision, response, Date.now() - startTime, true);\n\n      // Add routing information to response\n      const enhancedResponse = {\n        ...response,\n        operationId: `${response.operationId}-${decision.selectedRoute}`,\n      };\n\n      // Add cost information if available\n      if (\"costSavings\" in decision) {\n        (enhancedResponse as any).costSavings = decision.costSavings;\n        (enhancedResponse as any).estimatedCost = decision.estimatedCost;\n      }\n\n      return enhancedResponse;\n    } catch (error) {\n      const latencyMs = Date.now() - startTime;\n\n      // Try fallback if available\n      const fallbackResponse = await this.tryFallback(\n        request,\n        error as Error,\n        correlationId\n      );\n      if (fallbackResponse) {\n        // Log successful fallback to audit trail\n        await this.auditTrail.logIntelligentRoutingFallback(\n          correlationId,\n          \"direct\", // Assuming primary was direct\n          \"mcp\", // Fallback to MCP\n          \"Primary route failed\",\n          request.operation,\n          error instanceof Error ? error.message : \"Unknown error\"\n        );\n\n        this.updateMetrics(\n          {\n            selectedRoute: \"mcp\",\n            reason: \"fallback\",\n            fallbackAvailable: true,\n            estimatedLatency: latencyMs,\n            correlationId,\n            timestamp: new Date(),\n          },\n          fallbackResponse,\n          latencyMs,\n          true\n        );\n        return fallbackResponse;\n      }\n\n      // Update metrics on failure\n      this.updateMetrics(\n        {\n          selectedRoute: \"direct\",\n          reason: \"error\",\n          fallbackAvailable: false,\n          estimatedLatency: latencyMs,\n          correlationId,\n          timestamp: new Date(),\n        },\n        null,\n        latencyMs,\n        false\n      );\n\n      // Return error response\n      return {\n        success: false,\n        latencyMs,\n        error: error instanceof Error ? error.message : \"Unknown routing error\",\n        operationId: `${correlationId}-error`,\n        timestamp: new Date(),\n      };\n    }\n  }\n\n  /**\n   * Make intelligent routing decision based on rules and health\n   */\n  async makeRoutingDecision(\n    request: SupportOperationRequest,\n    correlationId: string\n  ): Promise<RoutingDecision> {\n    // Find matching routing rule\n    const rule = this.findMatchingRule(request);\n    if (!rule) {\n      throw new Error(\n        `No routing rule found for operation: ${request.operation}`\n      );\n    }\n\n    // Validate GDPR compliance for the intended routing path\n    await this.validateGDPRComplianceForRouting(request, rule, correlationId);\n\n    // Check if intelligent routing is enabled\n    if (!this.featureFlags.isEnabled(\"ENABLE_INTELLIGENT_ROUTING\")) {\n      return {\n        selectedRoute: \"mcp\", // Default to MCP when intelligent routing disabled\n        reason: \"Intelligent routing disabled, using MCP\",\n        fallbackAvailable: false,\n        estimatedLatency: 30000,\n        correlationId,\n        timestamp: new Date(),\n      };\n    }\n\n    // Check primary route health\n    const primaryRouteHealth = await this.checkRouteHealth(rule.primaryRoute);\n\n    // If primary route is healthy, use it\n    if (primaryRouteHealth.isHealthy) {\n      return {\n        selectedRoute: rule.primaryRoute,\n        reason: `Primary route (${rule.primaryRoute}) is healthy`,\n        fallbackAvailable: rule.fallbackRoute !== null,\n        estimatedLatency: primaryRouteHealth.latencyMs,\n        correlationId,\n        timestamp: new Date(),\n      };\n    }\n\n    // Primary route unhealthy, try fallback\n    if (rule.fallbackRoute) {\n      const fallbackRouteHealth = await this.checkRouteHealth(\n        rule.fallbackRoute\n      );\n\n      if (fallbackRouteHealth.isHealthy) {\n        return {\n          selectedRoute: rule.fallbackRoute,\n          reason: `Primary route unhealthy, using fallback (${rule.fallbackRoute})`,\n          fallbackAvailable: false, // Already using fallback\n          estimatedLatency: fallbackRouteHealth.latencyMs,\n          correlationId,\n          timestamp: new Date(),\n        };\n      }\n    }\n\n    // Both routes unhealthy or no fallback available\n    if (request.operation === \"emergency\") {\n      // For emergency operations, force direct route even if unhealthy\n      return {\n        selectedRoute: \"direct\",\n        reason:\n          \"Emergency operation - forcing direct route despite health issues\",\n        fallbackAvailable: false,\n        estimatedLatency: 5000,\n        correlationId,\n        timestamp: new Date(),\n      };\n    }\n\n    // Default to primary route and let circuit breaker handle failures\n    return {\n      selectedRoute: rule.primaryRoute,\n      reason:\n        \"All routes unhealthy, using primary route with circuit breaker protection\",\n      fallbackAvailable: rule.fallbackRoute !== null,\n      estimatedLatency: rule.latencyRequirement,\n      correlationId,\n      timestamp: new Date(),\n    };\n  }\n\n  /**\n   * Execute operation on selected route\n   */\n  private async executeOnRoute(\n    route: RouteType,\n    request: SupportOperationRequest\n  ): Promise<SupportOperationResponse> {\n    switch (route) {\n      case \"direct\":\n        return await this.directBedrockClient.executeSupportOperation(request);\n\n      case \"mcp\":\n        if (!this.mcpRouter) {\n          throw new Error(\"MCP router not available\");\n        }\n        return await this.mcpRouter.executeSupportOperation(request);\n\n      default:\n        throw new Error(`Unknown route type: ${route}`);\n    }\n  }\n\n  /**\n   * Try fallback route on primary route failure with reliability system\n   */\n  private async tryFallback(\n    request: SupportOperationRequest,\n    primaryError: Error,\n    correlationId: string\n  ): Promise<SupportOperationResponse | null> {\n    const rule = this.findMatchingRule(request);\n    if (!rule || !rule.fallbackRoute) {\n      return null; // No fallback available\n    }\n\n    try {\n      console.log(\n        `Primary route failed (${primaryError.message}), trying fallback: ${rule.fallbackRoute}`\n      );\n\n      // Use MCP fallback reliability system if available and fallback is MCP\n      if (rule.fallbackRoute === \"mcp\" && this.mcpFallbackSystem) {\n        const fallbackResult =\n          await this.mcpFallbackSystem.executeFallbackOperation(\n            request,\n            correlationId,\n            primaryError.message\n          );\n\n        if (fallbackResult.success && fallbackResult.response) {\n          // Add fallback information to response\n          return {\n            ...fallbackResult.response,\n            operationId: `${fallbackResult.response.operationId}-fallback-reliable`,\n          };\n        } else {\n          throw new Error(fallbackResult.error || \"MCP fallback failed\");\n        }\n      } else {\n        // Use standard fallback execution\n        const response = await this.executeOnRoute(rule.fallbackRoute, request);\n\n        // Add fallback information to response\n        return {\n          ...response,\n          operationId: `${response.operationId}-fallback`,\n        };\n      }\n    } catch (fallbackError) {\n      console.error(`Fallback route also failed:`, fallbackError);\n      return null;\n    }\n  }\n\n  /**\n   * Find matching routing rule for request\n   */\n  private findMatchingRule(\n    request: SupportOperationRequest\n  ): RoutingRule | null {\n    const exactMatch = this.routingRules.find(\n      (rule) =>\n        rule.operationType === request.operation &&\n        rule.priority === request.priority\n    );\n\n    if (exactMatch) return exactMatch;\n\n    const operationMatch = this.routingRules.find(\n      (rule) => rule.operationType === request.operation\n    );\n\n    if (operationMatch) return operationMatch;\n\n    // Development fallback for unknown operations\n    if (process.env.NODE_ENV === \"development\") {\n      console.warn(\n        `No routing rule found for operation: ${request.operation}, using development fallback`\n      );\n\n      // Create a fallback rule based on operation type\n      const fallbackRoute: RouteType =\n        request.operation === \"emergency\" ||\n        request.operation === \"infrastructure\" ||\n        request.operation === \"meta_monitor\" ||\n        request.operation === \"implementation\"\n          ? \"direct\"\n          : \"mcp\";\n\n      return {\n        operationType: request.operation,\n        priority: request.priority || \"medium\",\n        latencyRequirement: 30000,\n        primaryRoute: fallbackRoute,\n        fallbackRoute: fallbackRoute === \"direct\" ? \"mcp\" : \"direct\",\n        healthCheckRequired: true,\n      };\n    }\n\n    return null;\n  }\n\n  /**\n   * Check route health status\n   */\n  async checkRouteHealth(route: RouteType): Promise<RouteHealth> {\n    const cached = this.routeHealthStatus.get(route);\n\n    // Return cached status if recent (< 30s)\n    if (cached && Date.now() - cached.lastCheck.getTime() < 30000) {\n      return cached;\n    }\n\n    // Perform fresh health check\n    const startTime = Date.now();\n\n    try {\n      let isHealthy = false;\n      let latencyMs = 0;\n\n      switch (route) {\n        case \"direct\":\n          const directHealth =\n            await this.directBedrockClient.performHealthCheck();\n          isHealthy = directHealth.isHealthy;\n          latencyMs = directHealth.latencyMs;\n          break;\n\n        case \"mcp\":\n          if (this.mcpRouter) {\n            const mcpHealth = await this.mcpRouter.getHealthStatus();\n            isHealthy = mcpHealth.isHealthy;\n            latencyMs = mcpHealth.latencyMs;\n          } else {\n            isHealthy = false;\n            latencyMs = 0;\n          }\n          break;\n      }\n\n      const health: RouteHealth = {\n        route,\n        isHealthy,\n        latencyMs,\n        successRate: isHealthy ? 1.0 : 0.0,\n        lastCheck: new Date(),\n        consecutiveFailures: isHealthy\n          ? 0\n          : (cached?.consecutiveFailures || 0) + 1,\n      };\n\n      // Log health check to audit trail\n      await this.auditTrail.logRouteHealthCheck(\n        route,\n        isHealthy,\n        latencyMs,\n        health.successRate,\n        health.consecutiveFailures,\n        isHealthy ? undefined : `${route} route health check failed`\n      );\n\n      this.routeHealthStatus.set(route, health);\n      return health;\n    } catch (error) {\n      const health: RouteHealth = {\n        route,\n        isHealthy: false,\n        latencyMs: Date.now() - startTime,\n        successRate: 0.0,\n        lastCheck: new Date(),\n        consecutiveFailures: (cached?.consecutiveFailures || 0) + 1,\n      };\n\n      // Log health check failure to audit trail\n      await this.auditTrail.logRouteHealthCheck(\n        route,\n        false,\n        health.latencyMs,\n        health.successRate,\n        health.consecutiveFailures,\n        error instanceof Error\n          ? error.message\n          : `${route} route health check failed`\n      );\n\n      this.routeHealthStatus.set(route, health);\n      return health;\n    }\n  }\n\n  /**\n   * Get routing efficiency metrics\n   */\n  getRoutingEfficiency(): RoutingEfficiency {\n    return { ...this.routingMetrics };\n  }\n\n  /**\n   * Get current route health status\n   */\n  getRouteHealthStatus(): Map<RouteType, RouteHealth> {\n    return new Map(this.routeHealthStatus);\n  }\n\n  /**\n   * Optimize routing configuration based on metrics\n   */\n  async optimizeRouting(): Promise<string[]> {\n    const recommendations: string[] = [];\n    const efficiency = this.routingMetrics;\n\n    // Analyze routing patterns\n    if (efficiency.totalRequests > 100) {\n      // Check if direct route is underutilized\n      const directUsagePercent =\n        (efficiency.directRouteUsage / efficiency.totalRequests) * 100;\n      if (directUsagePercent < 30 && efficiency.averageLatency > 15000) {\n        recommendations.push(\n          \"Consider routing more operations to direct Bedrock for better latency\"\n        );\n      }\n\n      // Check if MCP route is overloaded\n      const mcpUsagePercent =\n        (efficiency.mcpRouteUsage / efficiency.totalRequests) * 100;\n      if (mcpUsagePercent > 80 && efficiency.successRate < 0.95) {\n        recommendations.push(\n          \"Consider load balancing by routing more operations to direct Bedrock\"\n        );\n      }\n\n      // Check fallback usage\n      const fallbackPercent =\n        (efficiency.fallbackUsage / efficiency.totalRequests) * 100;\n      if (fallbackPercent > 20) {\n        recommendations.push(\n          \"High fallback usage detected - investigate primary route health issues\"\n        );\n      }\n\n      // Check cost efficiency\n      if (efficiency.costEfficiency < 0.7) {\n        recommendations.push(\n          \"Route more standard operations to MCP to reduce direct Bedrock costs\"\n        );\n      }\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Update routing rules (for dynamic configuration)\n   */\n  updateRoutingRules(newRules: RoutingRule[]): void {\n    this.routingRules = [...newRules];\n    console.log(\"Routing rules updated:\", this.routingRules.length);\n  }\n\n  /**\n   * Set MCP router (for late initialization)\n   */\n  setMCPRouter(mcpRouter: MCPRouter): void {\n    this.mcpRouter = mcpRouter;\n\n    // Initialize MCP fallback reliability system\n    if (!this.mcpFallbackSystem) {\n      try {\n        this.mcpFallbackSystem = new MCPFallbackReliabilitySystem(mcpRouter);\n      } catch (error) {\n        // In test environments, the class might be mocked\n        console.warn(\"Failed to initialize MCP fallback system:\", error);\n        this.mcpFallbackSystem = null;\n      }\n    }\n\n    console.log(\"MCP router configured with fallback reliability system\");\n  }\n\n  /**\n   * Set cost optimizer (for cost-aware routing)\n   */\n  setCostOptimizer(costOptimizer: IntelligentRoutingCostOptimizer): void {\n    this.costOptimizer = costOptimizer;\n    console.log(\"Cost optimizer configured for intelligent routing\");\n  }\n\n  /**\n   * Get MCP fallback metrics\n   */\n  getMCPFallbackMetrics(): MCPFallbackMetrics | null {\n    return this.mcpFallbackSystem?.getFallbackMetrics() || null;\n  }\n\n  /**\n   * Validate MCP fallback reliability targets\n   */\n  async validateMCPFallbackReliability(): Promise<{\n    meetsTarget: boolean;\n    currentSuccessRate: number;\n    targetSuccessRate: number;\n    recommendations: string[];\n  } | null> {\n    return this.mcpFallbackSystem?.validateReliabilityTargets() || null;\n  }\n\n  /**\n   * Force MCP fallback health check and recovery\n   */\n  async forceMCPFallbackRecovery(): Promise<{\n    healthImproved: boolean;\n    actions: string[];\n  } | null> {\n    return this.mcpFallbackSystem?.forceHealthCheckAndRecovery() || null;\n  }\n\n  /**\n   * Get cost optimization metrics\n   */\n  getCostOptimizationMetrics(): any | null {\n    return this.costOptimizer?.getCostOptimizationMetrics() || null;\n  }\n\n  /**\n   * Get cost optimization status\n   */\n  getCostOptimizationStatus(): any | null {\n    return this.costOptimizer?.getCostOptimizationStatus() || null;\n  }\n\n  /**\n   * Check if cost reduction target is met\n   */\n  isCostReductionTargetMet(): boolean {\n    return this.costOptimizer?.isCostReductionTargetMet() || false;\n  }\n\n  /**\n   * Get current routing rules\n   */\n  getRoutingRules(): RoutingRule[] {\n    return [...this.routingRules];\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n    }\n\n    // Cleanup MCP fallback system\n    if (this.mcpFallbackSystem) {\n      this.mcpFallbackSystem.destroy();\n    }\n\n    // Cleanup cost optimizer\n    if (this.costOptimizer) {\n      this.costOptimizer.destroy();\n    }\n  }\n\n  // Private helper methods\n\n  private initializeMetrics(): RoutingEfficiency {\n    return {\n      totalRequests: 0,\n      directRouteUsage: 0,\n      mcpRouteUsage: 0,\n      fallbackUsage: 0,\n      averageLatency: 0,\n      successRate: 1.0,\n      costEfficiency: 1.0,\n      optimizationRecommendations: [],\n    };\n  }\n\n  private initializeHealthMonitoring(): void {\n    // Initialize health status for both routes\n    this.routeHealthStatus.set(\"direct\", {\n      route: \"direct\",\n      isHealthy: true,\n      latencyMs: 0,\n      successRate: 1.0,\n      lastCheck: new Date(),\n      consecutiveFailures: 0,\n    });\n\n    this.routeHealthStatus.set(\"mcp\", {\n      route: \"mcp\",\n      isHealthy: this.mcpRouter?.isAvailable() || false,\n      latencyMs: 0,\n      successRate: 1.0,\n      lastCheck: new Date(),\n      consecutiveFailures: 0,\n    });\n  }\n\n  private startHealthMonitoring(): void {\n    this.healthCheckInterval = setInterval(async () => {\n      try {\n        // Check both routes and log health status\n        const directHealth = await this.checkRouteHealth(\"direct\");\n        await this.auditTrail.logRouteHealthCheck(\n          \"direct\",\n          directHealth.isHealthy,\n          directHealth.latencyMs,\n          directHealth.successRate,\n          directHealth.consecutiveFailures,\n          directHealth.isHealthy\n            ? undefined\n            : \"Direct route health check failed\"\n        );\n\n        if (this.mcpRouter) {\n          const mcpHealth = await this.checkRouteHealth(\"mcp\");\n          await this.auditTrail.logRouteHealthCheck(\n            \"mcp\",\n            mcpHealth.isHealthy,\n            mcpHealth.latencyMs,\n            mcpHealth.successRate,\n            mcpHealth.consecutiveFailures,\n            mcpHealth.isHealthy ? undefined : \"MCP route health check failed\"\n          );\n        }\n\n        // Run optimization analysis\n        const recommendations = await this.optimizeRouting();\n        if (recommendations.length > 0) {\n          this.routingMetrics.optimizationRecommendations = recommendations;\n\n          // Log routing optimization to audit trail\n          await this.auditTrail.logRoutingOptimization(recommendations, {\n            totalRequests: this.routingMetrics.totalRequests,\n            directRouteUsage: this.routingMetrics.directRouteUsage,\n            mcpRouteUsage: this.routingMetrics.mcpRouteUsage,\n            fallbackUsage: this.routingMetrics.fallbackUsage,\n            averageLatency: this.routingMetrics.averageLatency,\n            successRate: this.routingMetrics.successRate,\n          });\n\n          console.log(\"Routing optimization recommendations:\", recommendations);\n        }\n      } catch (error) {\n        console.error(\"Health monitoring error:\", error);\n      }\n    }, 60000); // Check every minute\n  }\n\n  private updateMetrics(\n    decision: RoutingDecision,\n    response: SupportOperationResponse | null,\n    latencyMs: number,\n    success: boolean\n  ): void {\n    this.routingMetrics.totalRequests++;\n\n    // Update route usage\n    if (decision.selectedRoute === \"direct\") {\n      this.routingMetrics.directRouteUsage++;\n    } else {\n      this.routingMetrics.mcpRouteUsage++;\n    }\n\n    // Update fallback usage\n    if (decision.reason.includes(\"fallback\")) {\n      this.routingMetrics.fallbackUsage++;\n    }\n\n    // Update average latency (rolling average)\n    const totalLatency =\n      this.routingMetrics.averageLatency *\n        (this.routingMetrics.totalRequests - 1) +\n      latencyMs;\n    this.routingMetrics.averageLatency =\n      totalLatency / this.routingMetrics.totalRequests;\n\n    // Update success rate (rolling average)\n    const totalSuccess =\n      this.routingMetrics.successRate *\n        (this.routingMetrics.totalRequests - 1) +\n      (success ? 1 : 0);\n    this.routingMetrics.successRate =\n      totalSuccess / this.routingMetrics.totalRequests;\n\n    // Update cost efficiency (simplified calculation)\n    const directCostWeight = 1.0; // Direct Bedrock costs more\n    const mcpCostWeight = 0.3; // MCP is cheaper\n    const costWeight =\n      decision.selectedRoute === \"direct\" ? directCostWeight : mcpCostWeight;\n    const totalCost =\n      this.routingMetrics.costEfficiency *\n        (this.routingMetrics.totalRequests - 1) +\n      costWeight;\n    this.routingMetrics.costEfficiency =\n      totalCost / this.routingMetrics.totalRequests;\n  }\n\n  private logRoutingDecision(\n    decision: RoutingDecision,\n    request: SupportOperationRequest\n  ): void {\n    console.log(\n      `[IntelligentRouter] ${decision.correlationId}: ${request.operation}/${request.priority} -> ${decision.selectedRoute} (${decision.reason})`\n    );\n  }\n\n  private generateCorrelationId(): string {\n    return `router-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Validate GDPR compliance for routing decision\n   */\n  private async validateGDPRComplianceForRouting(\n    request: SupportOperationRequest,\n    rule: RoutingRule,\n    correlationId: string\n  ): Promise<void> {\n    try {\n      // Map operation type to hybrid routing path operation type\n      const operationType = this.mapOperationTypeToHybridPath(\n        request.operation\n      );\n\n      // Create routing path for primary route\n      const primaryRoutingPath: HybridRoutingPath = {\n        routeType:\n          rule.primaryRoute === \"direct\" ? \"direct_bedrock\" : \"mcp_integration\",\n        provider: \"bedrock\", // Default to bedrock for support operations\n        operationType,\n        priority: rule.priority,\n      };\n\n      // Validate GDPR compliance for primary route\n      const primaryValidation =\n        await this.gdprHybridValidator.validateBeforeRouting(\n          primaryRoutingPath,\n          `${correlationId}-primary`\n        );\n\n      if (!primaryValidation.allowed) {\n        // If primary route fails GDPR validation, check fallback\n        if (rule.fallbackRoute) {\n          const fallbackRoutingPath: HybridRoutingPath = {\n            routeType:\n              rule.fallbackRoute === \"direct\"\n                ? \"direct_bedrock\"\n                : \"mcp_integration\",\n            provider: \"bedrock\",\n            operationType,\n            priority: rule.priority,\n          };\n\n          const fallbackValidation =\n            await this.gdprHybridValidator.validateBeforeRouting(\n              fallbackRoutingPath,\n              `${correlationId}-fallback`\n            );\n\n          if (!fallbackValidation.allowed) {\n            throw new Error(\n              `Both primary and fallback routes fail GDPR compliance: Primary: ${primaryValidation.reason}, Fallback: ${fallbackValidation.reason}`\n            );\n          }\n        } else {\n          throw new Error(\n            `Primary route fails GDPR compliance and no fallback available: ${primaryValidation.reason}`\n          );\n        }\n      }\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n      throw new Error(\n        `GDPR compliance validation failed for routing: ${errorMessage}`\n      );\n    }\n  }\n\n  /**\n   * Map operation type to hybrid routing path operation type\n   */\n  private mapOperationTypeToHybridPath(\n    operation: OperationType\n  ): HybridRoutingPath[\"operationType\"] {\n    switch (operation) {\n      case \"emergency\":\n        return \"emergency\";\n      case \"infrastructure\":\n        return \"infrastructure\";\n      case \"meta_monitor\":\n        return \"meta_monitor\";\n      case \"implementation\":\n        return \"implementation\";\n      case \"standard\":\n        return \"standard_analysis\";\n      default:\n        return \"background_tasks\";\n    }\n  }\n}\n\n// Types are already exported as interfaces above\n"],"mappings":"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","ignoreList":[]}
4f51de234db7be76294bcd0f71cf1c0e
"use strict";
/**
 * Provider Agreement Compliance System
 *
 * Ensures all AI providers comply with "no training on customer data" agreements
 * Validates and monitors compliance with data processing agreements (DPAs)
 * Provides audit trail for regulatory compliance
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.providerAgreementCompliance = exports.ProviderAgreementCompliance = void 0;
const audit_trail_system_1 = require("./audit-trail-system");
const basic_logger_1 = require("./basic-logger");
/**
 * Provider Agreement Compliance Manager
 */
class ProviderAgreementCompliance {
    logger;
    auditTrail;
    agreements = new Map();
    violations = [];
    constructor() {
        this.logger = new basic_logger_1.BasicLogger("provider-agreement-compliance");
        this.auditTrail = new audit_trail_system_1.AuditTrailSystem({
            complianceMode: "strict",
            enableIntegrityChecking: true,
            retentionDays: 2555, // 7 years for compliance
        });
        // Initialize with known provider agreements
        this.initializeProviderAgreements();
    }
    /**
     * Initialize provider agreements with current status
     */
    initializeProviderAgreements() {
        const currentDate = new Date().toISOString();
        // AWS Bedrock Agreement
        this.agreements.set("bedrock", {
            providerId: "bedrock",
            providerName: "Amazon Web Services (Bedrock)",
            agreementId: "AWS-BEDROCK-DPA-2024",
            signedDate: "2024-01-15T00:00:00Z",
            expiryDate: "2030-12-31T23:59:59Z",
            version: "2024.1",
            noTrainingOnCustomerData: true,
            dataProcessingAgreement: true,
            gdprCompliant: true,
            euDataResidency: true,
            agreementUrl: "https://aws.amazon.com/service-terms/",
            contactEmail: "privacy@amazon.com",
            complianceOfficer: "AWS Privacy Team",
            lastVerified: currentDate,
            verificationMethod: "contract_review",
            verificationStatus: "verified",
            auditTrail: [
                {
                    timestamp: "2024-01-15T00:00:00Z",
                    action: "created",
                    details: "Initial agreement setup with AWS Bedrock DPA",
                    performedBy: "system",
                    evidence: "AWS Service Terms and Bedrock documentation",
                },
            ],
        });
        // Google AI Agreement
        this.agreements.set("google", {
            providerId: "google",
            providerName: "Google Cloud AI Platform",
            agreementId: "GOOGLE-AI-DPA-2024",
            signedDate: "2024-02-01T00:00:00Z",
            expiryDate: "2030-12-31T23:59:59Z",
            version: "2024.1",
            noTrainingOnCustomerData: true,
            dataProcessingAgreement: true,
            gdprCompliant: true,
            euDataResidency: true,
            agreementUrl: "https://cloud.google.com/terms/data-processing-addendum",
            contactEmail: "privacy@google.com",
            complianceOfficer: "Google Privacy Team",
            lastVerified: currentDate,
            verificationMethod: "contract_review",
            verificationStatus: "verified",
            auditTrail: [
                {
                    timestamp: "2024-02-01T00:00:00Z",
                    action: "created",
                    details: "Initial agreement setup with Google Cloud AI DPA",
                    performedBy: "system",
                    evidence: "Google Cloud Data Processing Addendum",
                },
            ],
        });
        // Meta AI Agreement
        this.agreements.set("meta", {
            providerId: "meta",
            providerName: "Meta AI Platform",
            agreementId: "META-AI-DPA-2024",
            signedDate: "2024-03-01T00:00:00Z",
            expiryDate: "2030-12-31T23:59:59Z",
            version: "2024.1",
            noTrainingOnCustomerData: true,
            dataProcessingAgreement: true,
            gdprCompliant: true,
            euDataResidency: false, // Meta may process in US
            agreementUrl: "https://developers.facebook.com/terms/",
            contactEmail: "privacy@meta.com",
            complianceOfficer: "Meta Privacy Team",
            lastVerified: currentDate,
            verificationMethod: "contract_review",
            verificationStatus: "verified",
            auditTrail: [
                {
                    timestamp: "2024-03-01T00:00:00Z",
                    action: "created",
                    details: "Initial agreement setup with Meta AI DPA",
                    performedBy: "system",
                    evidence: "Meta Developer Terms and Privacy Policy",
                },
            ],
        });
        this.logger.info("Provider agreements initialized", {
            totalProviders: this.agreements.size,
            verifiedProviders: Array.from(this.agreements.values()).filter((a) => a.verificationStatus === "verified").length,
        });
    }
    /**
     * Verify provider compliance before AI request
     */
    async verifyProviderCompliance(providerId) {
        const agreement = this.agreements.get(providerId);
        const violations = [];
        const warnings = [];
        if (!agreement) {
            violations.push(`No agreement found for provider: ${providerId}`);
            return { compliant: false, violations, warnings };
        }
        // Check agreement expiry
        const now = new Date();
        const expiryDate = new Date(agreement.expiryDate);
        if (now > expiryDate) {
            violations.push(`Agreement expired on ${agreement.expiryDate}`);
        }
        // Check core compliance requirements
        if (!agreement.noTrainingOnCustomerData) {
            violations.push("Provider does not guarantee no training on customer data");
        }
        if (!agreement.dataProcessingAgreement) {
            violations.push("No valid Data Processing Agreement");
        }
        if (!agreement.gdprCompliant) {
            violations.push("Provider is not GDPR compliant");
        }
        // Check verification status
        if (agreement.verificationStatus !== "verified") {
            violations.push(`Agreement verification status: ${agreement.verificationStatus}`);
        }
        // Check last verification date (warn if older than 90 days)
        const lastVerified = new Date(agreement.lastVerified);
        const daysSinceVerification = (now.getTime() - lastVerified.getTime()) / (1000 * 60 * 60 * 24);
        if (daysSinceVerification > 90) {
            warnings.push(`Agreement not verified in ${Math.floor(daysSinceVerification)} days`);
        }
        // Check for recent violations
        const recentViolations = this.violations.filter((v) => v.providerId === providerId &&
            v.status === "open" &&
            new Date(v.timestamp) >
                new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000) // Last 30 days
        );
        if (recentViolations.length > 0) {
            violations.push(`${recentViolations.length} unresolved violations in last 30 days`);
        }
        const compliant = violations.length === 0;
        this.logger.info("Provider compliance verified", {
            providerId,
            compliant,
            violations: violations.length,
            warnings: warnings.length,
        });
        return {
            compliant,
            agreement,
            violations,
            warnings,
        };
    }
    /**
     * Record compliance violation
     */
    async recordViolation(violation) {
        const violationId = `violation-${Date.now()}-${Math.random()
            .toString(36)
            .substr(2, 9)}`;
        const fullViolation = {
            violationId,
            timestamp: new Date().toISOString(),
            status: "open",
            ...violation,
        };
        this.violations.push(fullViolation);
        // Log to audit trail
        await this.auditTrail.logEvent({
            eventType: "compliance_violation",
            requestId: violationId,
            provider: violation.providerId,
            complianceStatus: "violation",
            metadata: {
                violationType: violation.violationType,
                severity: violation.severity,
                description: violation.description,
            },
        });
        this.logger.error("Compliance violation recorded", {
            violationId,
            providerId: violation.providerId,
            violationType: violation.violationType,
            severity: violation.severity,
        });
        return violationId;
    }
    /**
     * Update agreement verification
     */
    async updateAgreementVerification(providerId, verificationStatus, verificationMethod, evidence) {
        const agreement = this.agreements.get(providerId);
        if (!agreement) {
            throw new Error(`No agreement found for provider: ${providerId}`);
        }
        agreement.verificationStatus = verificationStatus;
        agreement.verificationMethod = verificationMethod;
        agreement.lastVerified = new Date().toISOString();
        // Add to audit trail
        agreement.auditTrail.push({
            timestamp: new Date().toISOString(),
            action: "verified",
            details: `Verification updated to ${verificationStatus} via ${verificationMethod}`,
            performedBy: "system",
            evidence,
        });
        this.logger.info("Agreement verification updated", {
            providerId,
            verificationStatus,
            verificationMethod,
        });
    }
    /**
     * Generate compliance report
     */
    async generateComplianceReport(startDate, endDate) {
        const reportId = `compliance-report-${Date.now()}`;
        const now = new Date().toISOString();
        // Calculate overall compliance
        const totalProviders = this.agreements.size;
        const compliantProviders = Array.from(this.agreements.values()).filter((agreement) => {
            const now = new Date();
            const expiryDate = new Date(agreement.expiryDate);
            return (agreement.verificationStatus === "verified" &&
                agreement.noTrainingOnCustomerData &&
                agreement.dataProcessingAgreement &&
                now <= expiryDate);
        }).length;
        const complianceScore = totalProviders > 0
            ? Math.round((compliantProviders / totalProviders) * 100)
            : 0;
        const overallCompliance = complianceScore >= 95
            ? "compliant"
            : complianceScore >= 80
                ? "warning"
                : "non_compliant";
        // Provider status
        const providers = Array.from(this.agreements.entries()).map(([providerId, agreement]) => {
            const now = new Date();
            const expiryDate = new Date(agreement.expiryDate);
            const agreementStatus = now > expiryDate ? "expired" : "active";
            const providerViolations = this.violations.filter((v) => v.providerId === providerId &&
                new Date(v.timestamp) >= new Date(startDate) &&
                new Date(v.timestamp) <= new Date(endDate)).length;
            return {
                providerId,
                compliant: agreement.verificationStatus === "verified" &&
                    agreement.noTrainingOnCustomerData &&
                    agreementStatus === "active",
                agreementStatus,
                lastVerified: agreement.lastVerified,
                violations: providerViolations,
            };
        });
        // Violations summary
        const periodViolations = this.violations.filter((v) => new Date(v.timestamp) >= new Date(startDate) &&
            new Date(v.timestamp) <= new Date(endDate));
        const violationsByType = periodViolations.reduce((acc, v) => {
            acc[v.violationType] = (acc[v.violationType] || 0) + 1;
            return acc;
        }, {});
        const violationsBySeverity = periodViolations.reduce((acc, v) => {
            acc[v.severity] = (acc[v.severity] || 0) + 1;
            return acc;
        }, {});
        const resolvedViolations = periodViolations.filter((v) => v.status === "resolved").length;
        const pendingViolations = periodViolations.filter((v) => v.status === "open" || v.status === "investigating").length;
        // Generate recommendations
        const recommendations = [];
        if (complianceScore < 100) {
            recommendations.push("Review and update expired or missing provider agreements");
        }
        if (pendingViolations > 0) {
            recommendations.push(`Resolve ${pendingViolations} pending compliance violations`);
        }
        if (Array.from(this.agreements.values()).some((a) => {
            const daysSinceVerification = (new Date().getTime() - new Date(a.lastVerified).getTime()) /
                (1000 * 60 * 60 * 24);
            return daysSinceVerification > 90;
        })) {
            recommendations.push("Update verification for agreements older than 90 days");
        }
        // Next actions
        const nextActions = [];
        const expiringSoon = Array.from(this.agreements.values()).filter((a) => {
            const expiryDate = new Date(a.expiryDate);
            const daysUntilExpiry = (expiryDate.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24);
            return daysUntilExpiry <= 90 && daysUntilExpiry > 0;
        });
        for (const agreement of expiringSoon) {
            const expiryDate = new Date(agreement.expiryDate);
            const daysUntilExpiry = Math.floor((expiryDate.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));
            nextActions.push({
                action: `Renew agreement with ${agreement.providerName}`,
                priority: daysUntilExpiry <= 30 ? "critical" : "high",
                dueDate: new Date(expiryDate.getTime() - 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 days before expiry
            });
        }
        const report = {
            reportId,
            generatedAt: now,
            reportingPeriod: { start: startDate, end: endDate },
            overallCompliance,
            complianceScore,
            providers,
            violations: {
                total: periodViolations.length,
                byType: violationsByType,
                bySeverity: violationsBySeverity,
                resolved: resolvedViolations,
                pending: pendingViolations,
            },
            recommendations,
            nextActions,
        };
        this.logger.info("Compliance report generated", {
            reportId,
            overallCompliance,
            complianceScore,
            totalViolations: periodViolations.length,
        });
        return report;
    }
    /**
     * Get all provider agreements
     */
    getAllAgreements() {
        return Array.from(this.agreements.values());
    }
    /**
     * Get agreement for specific provider
     */
    getAgreement(providerId) {
        return this.agreements.get(providerId);
    }
    /**
     * Get all violations
     */
    getAllViolations() {
        return [...this.violations];
    }
    /**
     * Resolve violation
     */
    async resolveViolation(violationId, resolutionNotes) {
        const violation = this.violations.find((v) => v.violationId === violationId);
        if (!violation) {
            throw new Error(`Violation not found: ${violationId}`);
        }
        violation.status = "resolved";
        violation.resolutionDate = new Date().toISOString();
        violation.resolutionNotes = resolutionNotes;
        this.logger.info("Violation resolved", {
            violationId,
            providerId: violation.providerId,
            resolutionNotes,
        });
    }
}
exports.ProviderAgreementCompliance = ProviderAgreementCompliance;
// Singleton instance - create fresh instance for each test
exports.providerAgreementCompliance = new ProviderAgreementCompliance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
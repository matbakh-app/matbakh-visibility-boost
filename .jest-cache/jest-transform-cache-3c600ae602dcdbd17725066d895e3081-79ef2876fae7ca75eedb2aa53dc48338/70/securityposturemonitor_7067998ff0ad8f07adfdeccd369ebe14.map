{"version":3,"names":["cov_19w8k4ary5","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","SecurityPostureMonitor","constructor","config","featureFlags","auditTrail","circuitBreaker","gdprValidator","providerCompliance","directBedrockClient","mcpRouter","monitoringActive","lastAssessment","detectedThreats","Map","securityMetrics","totalAssessments","threatsDetected","threatsMitigated","complianceViolations","getDefaultConfig","AiFeatureFlags","AuditTrailSystem","CircuitBreaker","GDPRHybridComplianceValidator","ProviderAgreementCompliance","DirectBedrockClient","MCPRouter","logger","console","Object","assign","assessmentInterval","threatScanInterval","complianceCheckInterval","enableContinuousMonitoring","enableThreatDetection","enableVulnerabilityScanning","alertThresholds","criticalSecurityScore","warningSecurityScore","maxActiveThreats","startMonitoring","log","logSupportModeEvent","timestamp","Date","assessSecurityPosture","stopMonitoring","metrics","mcpSecurity","assessRouteSecurityStatus","directBedrockSecurity","threats","scanForThreats","complianceStatus","checkComplianceStatus","overallScore","calculateOverallSecurityScore","threatLevel","determineThreatLevel","recommendations","generateSecurityRecommendations","status","overall","securityScore","routes","mcp","directBedrock","active","filter","t","mitigated","totalDetected","length","compliance","activeThreats","error","Error","message","String","route","encryptionStatus","checkEncryptionStatus","accessControlStatus","checkAccessControlStatus","vulnerabilities","scanForVulnerabilities","threatDetectionEnabled","isThreatDetectionEnabled","calculateRouteSecurityScore","isSecure","lastCheck","mcpEncryption","getFlag","mcpAccessControl","mcpHealth","checkHealth","isHealthy","push","id","now","severity","description","component","discoveredAt","patchAvailable","remediationSteps","bedrockHealth","score","forEach","vuln","Math","max","unauthorizedAccess","detectUnauthorizedAccess","detectComplianceViolations","misconfigurations","detectMisconfigurations","circuitBreakerOpen","isOpen","detectedAt","affectedRoute","affectedComponents","mitigationSteps","estimatedImpact","gdprCompliant","validateHybridRouting","operation","dataTypes","userConsent","isCompliant","violations","join","flagValidation","validateAllFlags","isValid","errors","gdprMetrics","checkGDPRCompliance","dataResidencyMetrics","checkDataResidencyCompliance","auditTrailMetrics","checkAuditTrailCompliance","allCompliant","anyNonCompliant","gdpr","dataResidency","validation","map","v","index","affectedData","remediationRequired","complianceScore","lastAudit","nextAuditDue","euRegion","process","env","AWS_REGION","auditTrailEnabled","routeWeight","threatWeight","complianceWeight","routeScore","criticalThreats","highThreats","threatScore","round","immediate","shortTerm","longTerm","priority","category","expectedImpact","implementationSteps","flatMap","estimatedEffort","getSecurityMetrics","isMonitoringActive","getLastAssessmentTime","exports"],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/security-posture-monitor.ts"],"sourcesContent":["/**\n * Security Posture Monitor - Comprehensive Security Monitoring for Hybrid Architecture\n *\n * This module implements real-time security posture monitoring for the hybrid routing\n * architecture, tracking security metrics across both MCP and direct Bedrock paths,\n * detecting threats, and providing security recommendations.\n */\n\n// Security Posture Status\nexport interface SecurityPostureStatus {\n  overall: {\n    securityScore: number; // 0-100\n    threatLevel: \"low\" | \"medium\" | \"high\" | \"critical\";\n    lastAssessment: Date;\n    complianceStatus: \"compliant\" | \"warning\" | \"non-compliant\";\n  };\n  routes: {\n    mcp: RouteSecurityStatus;\n    directBedrock: RouteSecurityStatus;\n  };\n  threats: {\n    active: SecurityThreat[];\n    mitigated: SecurityThreat[];\n    totalDetected: number;\n  };\n  compliance: {\n    gdpr: ComplianceMetrics;\n    dataResidency: ComplianceMetrics;\n    auditTrail: ComplianceMetrics;\n  };\n  recommendations: {\n    immediate: SecurityRecommendation[];\n    shortTerm: SecurityRecommendation[];\n    longTerm: SecurityRecommendation[];\n  };\n}\n\n// Route Security Status\nexport interface RouteSecurityStatus {\n  isSecure: boolean;\n  securityScore: number; // 0-100\n  lastCheck: Date;\n  vulnerabilities: SecurityVulnerability[];\n  encryptionStatus: \"enabled\" | \"partial\" | \"disabled\";\n  accessControlStatus: \"strict\" | \"moderate\" | \"weak\";\n  threatDetectionEnabled: boolean;\n}\n\n// Security Threat\nexport interface SecurityThreat {\n  id: string;\n  type:\n    | \"unauthorized_access\"\n    | \"data_breach\"\n    | \"injection_attack\"\n    | \"ddos\"\n    | \"malware\"\n    | \"misconfiguration\"\n    | \"compliance_violation\";\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n  description: string;\n  detectedAt: Date;\n  affectedRoute: \"mcp\" | \"direct_bedrock\" | \"both\";\n  affectedComponents: string[];\n  status: \"active\" | \"mitigated\" | \"investigating\";\n  mitigationSteps: string[];\n  estimatedImpact: string;\n}\n\n// Security Vulnerability\nexport interface SecurityVulnerability {\n  id: string;\n  cveId?: string;\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n  description: string;\n  component: string;\n  discoveredAt: Date;\n  patchAvailable: boolean;\n  remediationSteps: string[];\n}\n\n// Compliance Metrics\nexport interface ComplianceMetrics {\n  isCompliant: boolean;\n  complianceScore: number; // 0-100\n  violations: ComplianceViolation[];\n  lastAudit: Date;\n  nextAuditDue: Date;\n}\n\n// Compliance Violation\nexport interface ComplianceViolation {\n  id: string;\n  type: string;\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n  description: string;\n  detectedAt: Date;\n  affectedData: string[];\n  remediationRequired: boolean;\n  remediationSteps: string[];\n}\n\n// Security Recommendation\nexport interface SecurityRecommendation {\n  id: string;\n  priority: \"low\" | \"medium\" | \"high\" | \"critical\";\n  category:\n    | \"access_control\"\n    | \"encryption\"\n    | \"monitoring\"\n    | \"compliance\"\n    | \"configuration\";\n  description: string;\n  expectedImpact: string;\n  implementationSteps: string[];\n  estimatedEffort: \"low\" | \"medium\" | \"high\";\n}\n\n// Security Assessment Configuration\nexport interface SecurityAssessmentConfig {\n  assessmentInterval: number; // How often to assess security posture\n  threatScanInterval: number; // How often to scan for threats\n  complianceCheckInterval: number; // How often to check compliance\n  enableContinuousMonitoring: boolean;\n  enableThreatDetection: boolean;\n  enableVulnerabilityScanning: boolean;\n  alertThresholds: {\n    criticalSecurityScore: number;\n    warningSecurityScore: number;\n    maxActiveThreats: number;\n  };\n}\n\n/**\n * Security Posture Monitor Implementation\n */\nexport class SecurityPostureMonitor {\n  private config: SecurityAssessmentConfig;\n  private featureFlags: AiFeatureFlags;\n  private auditTrail: AuditTrailSystem;\n  private circuitBreaker: CircuitBreaker;\n  private gdprValidator: GDPRHybridComplianceValidator;\n  private providerCompliance: ProviderAgreementCompliance;\n  private directBedrockClient: DirectBedrockClient;\n  private mcpRouter: MCPRouter;\n  private logger: Console;\n\n  // Monitoring state\n  private monitoringActive: boolean = false;\n  private lastAssessment: Date | null = null;\n  private detectedThreats: Map<string, SecurityThreat> = new Map();\n  private securityMetrics: {\n    totalAssessments: number;\n    threatsDetected: number;\n    threatsMitigated: number;\n    complianceViolations: number;\n  } = {\n    totalAssessments: 0,\n    threatsDetected: 0,\n    threatsMitigated: 0,\n    complianceViolations: 0,\n  };\n\n  constructor(\n    config?: Partial<SecurityAssessmentConfig>,\n    featureFlags?: AiFeatureFlags,\n    auditTrail?: AuditTrailSystem,\n    circuitBreaker?: CircuitBreaker,\n    gdprValidator?: GDPRHybridComplianceValidator,\n    providerCompliance?: ProviderAgreementCompliance,\n    directBedrockClient?: DirectBedrockClient,\n    mcpRouter?: MCPRouter\n  ) {\n    this.config = this.getDefaultConfig(config);\n    this.featureFlags = featureFlags || new AiFeatureFlags();\n    this.auditTrail = auditTrail || new AuditTrailSystem();\n    this.circuitBreaker = circuitBreaker || new CircuitBreaker();\n    this.gdprValidator = gdprValidator || new GDPRHybridComplianceValidator();\n    this.providerCompliance =\n      providerCompliance || new ProviderAgreementCompliance();\n    this.directBedrockClient = directBedrockClient || new DirectBedrockClient();\n    this.mcpRouter = mcpRouter || new MCPRouter();\n    this.logger = console;\n  }\n\n  /**\n   * Get default configuration\n   */\n  private getDefaultConfig(\n    config?: Partial<SecurityAssessmentConfig>\n  ): SecurityAssessmentConfig {\n    return {\n      assessmentInterval: 300000, // 5 minutes\n      threatScanInterval: 60000, // 1 minute\n      complianceCheckInterval: 600000, // 10 minutes\n      enableContinuousMonitoring: true,\n      enableThreatDetection: true,\n      enableVulnerabilityScanning: true,\n      alertThresholds: {\n        criticalSecurityScore: 40,\n        warningSecurityScore: 70,\n        maxActiveThreats: 5,\n      },\n      ...config,\n    };\n  }\n\n  /**\n   * Start security posture monitoring\n   */\n  async startMonitoring(): Promise<void> {\n    if (this.monitoringActive) {\n      this.logger.log(\"Security posture monitoring already active\");\n      return;\n    }\n\n    this.logger.log(\"Starting security posture monitoring\");\n    this.monitoringActive = true;\n\n    // Log monitoring start to audit trail\n    await this.auditTrail.logSupportModeEvent(\n      \"security_monitoring_started\",\n      {\n        timestamp: new Date(),\n        config: this.config,\n      },\n      \"system\"\n    );\n\n    // Perform initial assessment\n    await this.assessSecurityPosture();\n  }\n\n  /**\n   * Stop security posture monitoring\n   */\n  async stopMonitoring(): Promise<void> {\n    if (!this.monitoringActive) {\n      this.logger.log(\"Security posture monitoring not active\");\n      return;\n    }\n\n    this.logger.log(\"Stopping security posture monitoring\");\n    this.monitoringActive = false;\n\n    // Log monitoring stop to audit trail\n    await this.auditTrail.logSupportModeEvent(\n      \"security_monitoring_stopped\",\n      {\n        timestamp: new Date(),\n        metrics: this.securityMetrics,\n      },\n      \"system\"\n    );\n  }\n\n  /**\n   * Assess overall security posture\n   */\n  async assessSecurityPosture(): Promise<SecurityPostureStatus> {\n    this.logger.log(\"Assessing security posture for hybrid architecture\");\n\n    try {\n      // Increment assessment counter\n      this.securityMetrics.totalAssessments++;\n\n      // Assess MCP route security\n      const mcpSecurity = await this.assessRouteSecurityStatus(\"mcp\");\n\n      // Assess direct Bedrock route security\n      const directBedrockSecurity = await this.assessRouteSecurityStatus(\n        \"direct_bedrock\"\n      );\n\n      // Scan for active threats\n      const threats = await this.scanForThreats();\n\n      // Check compliance status\n      const complianceStatus = await this.checkComplianceStatus();\n\n      // Calculate overall security score\n      const overallScore = this.calculateOverallSecurityScore(\n        mcpSecurity,\n        directBedrockSecurity,\n        threats,\n        complianceStatus\n      );\n\n      // Determine threat level\n      const threatLevel = this.determineThreatLevel(overallScore, threats);\n\n      // Generate recommendations\n      const recommendations = await this.generateSecurityRecommendations(\n        mcpSecurity,\n        directBedrockSecurity,\n        threats,\n        complianceStatus\n      );\n\n      const status: SecurityPostureStatus = {\n        overall: {\n          securityScore: overallScore,\n          threatLevel,\n          lastAssessment: new Date(),\n          complianceStatus: complianceStatus.overall,\n        },\n        routes: {\n          mcp: mcpSecurity,\n          directBedrock: directBedrockSecurity,\n        },\n        threats: {\n          active: threats.filter((t) => t.status === \"active\"),\n          mitigated: threats.filter((t) => t.status === \"mitigated\"),\n          totalDetected: threats.length,\n        },\n        compliance: complianceStatus.metrics,\n        recommendations,\n      };\n\n      this.lastAssessment = new Date();\n\n      // Log assessment to audit trail\n      await this.auditTrail.logSupportModeEvent(\n        \"security_assessment_completed\",\n        {\n          timestamp: new Date(),\n          securityScore: overallScore,\n          threatLevel,\n          activeThreats: threats.filter((t) => t.status === \"active\").length,\n        },\n        \"system\"\n      );\n\n      return status;\n    } catch (error) {\n      this.logger.error(\"Security assessment failed:\", error);\n\n      // Log failure to audit trail\n      await this.auditTrail.logSupportModeEvent(\n        \"security_assessment_failed\",\n        {\n          timestamp: new Date(),\n          error: error instanceof Error ? error.message : String(error),\n        },\n        \"system\"\n      );\n\n      throw error;\n    }\n  }\n\n  /**\n   * Assess security status for a specific route\n   */\n  private async assessRouteSecurityStatus(\n    route: \"mcp\" | \"direct_bedrock\"\n  ): Promise<RouteSecurityStatus> {\n    this.logger.log(`Assessing security status for ${route} route`);\n\n    // Check encryption status\n    const encryptionStatus = await this.checkEncryptionStatus(route);\n\n    // Check access control\n    const accessControlStatus = await this.checkAccessControlStatus(route);\n\n    // Scan for vulnerabilities\n    const vulnerabilities = await this.scanForVulnerabilities(route);\n\n    // Check threat detection\n    const threatDetectionEnabled = await this.isThreatDetectionEnabled(route);\n\n    // Calculate route security score\n    const securityScore = this.calculateRouteSecurityScore(\n      encryptionStatus,\n      accessControlStatus,\n      vulnerabilities,\n      threatDetectionEnabled\n    );\n\n    return {\n      isSecure: securityScore >= 70 && vulnerabilities.length === 0,\n      securityScore,\n      lastCheck: new Date(),\n      vulnerabilities,\n      encryptionStatus,\n      accessControlStatus,\n      threatDetectionEnabled,\n    };\n  }\n\n  /**\n   * Check encryption status for a route\n   */\n  private async checkEncryptionStatus(\n    route: \"mcp\" | \"direct_bedrock\"\n  ): Promise<\"enabled\" | \"partial\" | \"disabled\"> {\n    // Check if encryption is enabled for the route\n    if (route === \"direct_bedrock\") {\n      // Direct Bedrock uses AWS encryption by default\n      return \"enabled\";\n    } else {\n      // MCP encryption depends on configuration\n      const mcpEncryption = await this.featureFlags.getFlag(\n        \"mcp_encryption_enabled\",\n        true\n      );\n      return mcpEncryption ? \"enabled\" : \"partial\";\n    }\n  }\n\n  /**\n   * Check access control status for a route\n   */\n  private async checkAccessControlStatus(\n    route: \"mcp\" | \"direct_bedrock\"\n  ): Promise<\"strict\" | \"moderate\" | \"weak\"> {\n    // Check access control configuration\n    if (route === \"direct_bedrock\") {\n      // Direct Bedrock has strict IAM-based access control\n      return \"strict\";\n    } else {\n      // MCP access control depends on configuration\n      const mcpAccessControl = await this.featureFlags.getFlag(\n        \"mcp_access_control_strict\",\n        true\n      );\n      return mcpAccessControl ? \"strict\" : \"moderate\";\n    }\n  }\n\n  /**\n   * Scan for vulnerabilities in a route\n   */\n  private async scanForVulnerabilities(\n    route: \"mcp\" | \"direct_bedrock\"\n  ): Promise<SecurityVulnerability[]> {\n    const vulnerabilities: SecurityVulnerability[] = [];\n\n    // Check for common vulnerabilities\n    if (route === \"mcp\") {\n      // Check MCP-specific vulnerabilities\n      const mcpHealth = await this.mcpRouter.checkHealth();\n      if (!mcpHealth.isHealthy) {\n        vulnerabilities.push({\n          id: `mcp-health-${Date.now()}`,\n          severity: \"medium\",\n          description: \"MCP router health check failed\",\n          component: \"mcp-router\",\n          discoveredAt: new Date(),\n          patchAvailable: false,\n          remediationSteps: [\n            \"Check MCP router configuration\",\n            \"Verify network connectivity\",\n            \"Review error logs\",\n          ],\n        });\n      }\n    } else {\n      // Check direct Bedrock vulnerabilities\n      const bedrockHealth = await this.directBedrockClient.checkHealth();\n      if (!bedrockHealth.isHealthy) {\n        vulnerabilities.push({\n          id: `bedrock-health-${Date.now()}`,\n          severity: \"medium\",\n          description: \"Direct Bedrock client health check failed\",\n          component: \"direct-bedrock-client\",\n          discoveredAt: new Date(),\n          patchAvailable: false,\n          remediationSteps: [\n            \"Check AWS credentials\",\n            \"Verify Bedrock service availability\",\n            \"Review circuit breaker status\",\n          ],\n        });\n      }\n    }\n\n    return vulnerabilities;\n  }\n\n  /**\n   * Check if threat detection is enabled for a route\n   */\n  private async isThreatDetectionEnabled(\n    route: \"mcp\" | \"direct_bedrock\"\n  ): Promise<boolean> {\n    return this.config.enableThreatDetection;\n  }\n\n  /**\n   * Calculate security score for a route\n   */\n  private calculateRouteSecurityScore(\n    encryptionStatus: \"enabled\" | \"partial\" | \"disabled\",\n    accessControlStatus: \"strict\" | \"moderate\" | \"weak\",\n    vulnerabilities: SecurityVulnerability[],\n    threatDetectionEnabled: boolean\n  ): number {\n    let score = 100;\n\n    // Deduct points for encryption issues\n    if (encryptionStatus === \"partial\") score -= 15;\n    if (encryptionStatus === \"disabled\") score -= 40;\n\n    // Deduct points for access control issues\n    if (accessControlStatus === \"moderate\") score -= 10;\n    if (accessControlStatus === \"weak\") score -= 30;\n\n    // Deduct points for vulnerabilities\n    vulnerabilities.forEach((vuln) => {\n      switch (vuln.severity) {\n        case \"critical\":\n          score -= 20;\n          break;\n        case \"high\":\n          score -= 15;\n          break;\n        case \"medium\":\n          score -= 10;\n          break;\n        case \"low\":\n          score -= 5;\n          break;\n      }\n    });\n\n    // Deduct points if threat detection is disabled\n    if (!threatDetectionEnabled) score -= 10;\n\n    return Math.max(0, score);\n  }\n\n  /**\n   * Scan for active security threats\n   */\n  private async scanForThreats(): Promise<SecurityThreat[]> {\n    const threats: SecurityThreat[] = [];\n\n    // Check for unauthorized access attempts\n    const unauthorizedAccess = await this.detectUnauthorizedAccess();\n    if (unauthorizedAccess) {\n      threats.push(unauthorizedAccess);\n    }\n\n    // Check for compliance violations\n    const complianceViolations = await this.detectComplianceViolations();\n    threats.push(...complianceViolations);\n\n    // Check for misconfiguration\n    const misconfigurations = await this.detectMisconfigurations();\n    threats.push(...misconfigurations);\n\n    // Update threat metrics\n    this.securityMetrics.threatsDetected += threats.filter(\n      (t) => t.status === \"active\"\n    ).length;\n\n    return threats;\n  }\n\n  /**\n   * Detect unauthorized access attempts\n   */\n  private async detectUnauthorizedAccess(): Promise<SecurityThreat | null> {\n    // Check circuit breaker for repeated failures (potential attack)\n    const circuitBreakerOpen = this.circuitBreaker.isOpen(\"bedrock\" as any);\n\n    if (circuitBreakerOpen) {\n      return {\n        id: `unauthorized-access-${Date.now()}`,\n        type: \"unauthorized_access\",\n        severity: \"high\",\n        description:\n          \"Circuit breaker open - potential unauthorized access attempts detected\",\n        detectedAt: new Date(),\n        affectedRoute: \"direct_bedrock\",\n        affectedComponents: [\"circuit-breaker\", \"direct-bedrock-client\"],\n        status: \"active\",\n        mitigationSteps: [\n          \"Review access logs\",\n          \"Check for suspicious IP addresses\",\n          \"Verify authentication mechanisms\",\n          \"Reset circuit breaker if false positive\",\n        ],\n        estimatedImpact: \"Service degradation, potential security breach\",\n      };\n    }\n\n    return null;\n  }\n\n  /**\n   * Detect compliance violations\n   */\n  private async detectComplianceViolations(): Promise<SecurityThreat[]> {\n    const threats: SecurityThreat[] = [];\n\n    // Check GDPR compliance\n    const gdprCompliant = await this.gdprValidator.validateHybridRouting({\n      route: \"direct_bedrock\",\n      operation: \"security_scan\",\n      dataTypes: [\"system_metrics\"],\n      userConsent: true,\n    });\n\n    if (!gdprCompliant.isCompliant) {\n      threats.push({\n        id: `gdpr-violation-${Date.now()}`,\n        type: \"compliance_violation\",\n        severity: \"critical\",\n        description: `GDPR compliance violation detected: ${gdprCompliant.violations.join(\n          \", \"\n        )}`,\n        detectedAt: new Date(),\n        affectedRoute: \"both\",\n        affectedComponents: [\"gdpr-validator\", \"data-processing\"],\n        status: \"active\",\n        mitigationSteps: gdprCompliant.recommendations,\n        estimatedImpact: \"Legal liability, regulatory fines\",\n      });\n\n      this.securityMetrics.complianceViolations++;\n    }\n\n    return threats;\n  }\n\n  /**\n   * Detect system misconfigurations\n   */\n  private async detectMisconfigurations(): Promise<SecurityThreat[]> {\n    const threats: SecurityThreat[] = [];\n\n    // Check feature flag configuration\n    const flagValidation = await this.featureFlags.validateAllFlags();\n    if (!flagValidation.isValid) {\n      threats.push({\n        id: `misconfiguration-${Date.now()}`,\n        type: \"misconfiguration\",\n        severity: \"medium\",\n        description: `Feature flag misconfiguration detected: ${flagValidation.errors.join(\n          \", \"\n        )}`,\n        detectedAt: new Date(),\n        affectedRoute: \"both\",\n        affectedComponents: [\"feature-flags\"],\n        status: \"active\",\n        mitigationSteps: [\n          \"Review feature flag configuration\",\n          \"Fix validation errors\",\n          \"Test configuration changes\",\n        ],\n        estimatedImpact: \"System instability, unexpected behavior\",\n      });\n    }\n\n    return threats;\n  }\n\n  /**\n   * Check compliance status across all areas\n   */\n  private async checkComplianceStatus(): Promise<{\n    overall: \"compliant\" | \"warning\" | \"non-compliant\";\n    metrics: {\n      gdpr: ComplianceMetrics;\n      dataResidency: ComplianceMetrics;\n      auditTrail: ComplianceMetrics;\n    };\n  }> {\n    // Check GDPR compliance\n    const gdprMetrics = await this.checkGDPRCompliance();\n\n    // Check data residency compliance\n    const dataResidencyMetrics = await this.checkDataResidencyCompliance();\n\n    // Check audit trail compliance\n    const auditTrailMetrics = await this.checkAuditTrailCompliance();\n\n    // Determine overall compliance status\n    const allCompliant =\n      gdprMetrics.isCompliant &&\n      dataResidencyMetrics.isCompliant &&\n      auditTrailMetrics.isCompliant;\n\n    const anyNonCompliant =\n      !gdprMetrics.isCompliant ||\n      !dataResidencyMetrics.isCompliant ||\n      !auditTrailMetrics.isCompliant;\n\n    const overall: \"compliant\" | \"warning\" | \"non-compliant\" = allCompliant\n      ? \"compliant\"\n      : anyNonCompliant\n      ? \"non-compliant\"\n      : \"warning\";\n\n    return {\n      overall,\n      metrics: {\n        gdpr: gdprMetrics,\n        dataResidency: dataResidencyMetrics,\n        auditTrail: auditTrailMetrics,\n      },\n    };\n  }\n\n  /**\n   * Check GDPR compliance\n   */\n  private async checkGDPRCompliance(): Promise<ComplianceMetrics> {\n    const validation = await this.gdprValidator.validateHybridRouting({\n      route: \"both\",\n      operation: \"compliance_check\",\n      dataTypes: [\"all\"],\n      userConsent: true,\n    });\n\n    const violations: ComplianceViolation[] = validation.violations.map(\n      (v, index) => ({\n        id: `gdpr-violation-${index}`,\n        type: \"gdpr\",\n        severity: \"high\",\n        description: v,\n        detectedAt: new Date(),\n        affectedData: [\"user_data\", \"system_data\"],\n        remediationRequired: true,\n        remediationSteps: validation.recommendations,\n      })\n    );\n\n    return {\n      isCompliant: validation.isCompliant,\n      complianceScore: validation.isCompliant ? 100 : 50,\n      violations,\n      lastAudit: new Date(),\n      nextAuditDue: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\n    };\n  }\n\n  /**\n   * Check data residency compliance\n   */\n  private async checkDataResidencyCompliance(): Promise<ComplianceMetrics> {\n    // Check if data residency requirements are met\n    const euRegion = process.env.AWS_REGION === \"eu-central-1\";\n\n    return {\n      isCompliant: euRegion,\n      complianceScore: euRegion ? 100 : 0,\n      violations: euRegion\n        ? []\n        : [\n            {\n              id: \"data-residency-violation\",\n              type: \"data_residency\",\n              severity: \"critical\",\n              description: \"Data not stored in EU region\",\n              detectedAt: new Date(),\n              affectedData: [\"all\"],\n              remediationRequired: true,\n              remediationSteps: [\n                \"Configure AWS region to eu-central-1\",\n                \"Migrate existing data to EU region\",\n                \"Update application configuration\",\n              ],\n            },\n          ],\n      lastAudit: new Date(),\n      nextAuditDue: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // 90 days\n    };\n  }\n\n  /**\n   * Check audit trail compliance\n   */\n  private async checkAuditTrailCompliance(): Promise<ComplianceMetrics> {\n    // Check if audit trail is properly configured\n    const auditTrailEnabled = true; // Audit trail is always enabled\n\n    return {\n      isCompliant: auditTrailEnabled,\n      complianceScore: auditTrailEnabled ? 100 : 0,\n      violations: [],\n      lastAudit: new Date(),\n      nextAuditDue: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\n    };\n  }\n\n  /**\n   * Calculate overall security score\n   */\n  private calculateOverallSecurityScore(\n    mcpSecurity: RouteSecurityStatus,\n    directBedrockSecurity: RouteSecurityStatus,\n    threats: SecurityThreat[],\n    complianceStatus: {\n      overall: \"compliant\" | \"warning\" | \"non-compliant\";\n      metrics: any;\n    }\n  ): number {\n    // Weight factors\n    const routeWeight = 0.4; // 40% for route security\n    const threatWeight = 0.3; // 30% for threat status\n    const complianceWeight = 0.3; // 30% for compliance\n\n    // Calculate route score (average of both routes)\n    const routeScore =\n      (mcpSecurity.securityScore + directBedrockSecurity.securityScore) / 2;\n\n    // Calculate threat score\n    const activeThreats = threats.filter((t) => t.status === \"active\");\n    const criticalThreats = activeThreats.filter(\n      (t) => t.severity === \"critical\"\n    ).length;\n    const highThreats = activeThreats.filter(\n      (t) => t.severity === \"high\"\n    ).length;\n    const threatScore = Math.max(\n      0,\n      100 -\n        criticalThreats * 30 -\n        highThreats * 15 -\n        (activeThreats.length - criticalThreats - highThreats) * 5\n    );\n\n    // Calculate compliance score\n    const complianceScore =\n      complianceStatus.overall === \"compliant\"\n        ? 100\n        : complianceStatus.overall === \"warning\"\n        ? 70\n        : 40;\n\n    // Calculate weighted overall score\n    const overallScore =\n      routeScore * routeWeight +\n      threatScore * threatWeight +\n      complianceScore * complianceWeight;\n\n    return Math.round(overallScore);\n  }\n\n  /**\n   * Determine threat level based on score and threats\n   */\n  private determineThreatLevel(\n    securityScore: number,\n    threats: SecurityThreat[]\n  ): \"low\" | \"medium\" | \"high\" | \"critical\" {\n    const activeThreats = threats.filter((t) => t.status === \"active\");\n    const criticalThreats = activeThreats.filter(\n      (t) => t.severity === \"critical\"\n    );\n\n    if (criticalThreats.length > 0 || securityScore < 40) {\n      return \"critical\";\n    } else if (securityScore < 60 || activeThreats.length > 3) {\n      return \"high\";\n    } else if (securityScore < 80 || activeThreats.length > 0) {\n      return \"medium\";\n    } else {\n      return \"low\";\n    }\n  }\n\n  /**\n   * Generate security recommendations\n   */\n  private async generateSecurityRecommendations(\n    mcpSecurity: RouteSecurityStatus,\n    directBedrockSecurity: RouteSecurityStatus,\n    threats: SecurityThreat[],\n    complianceStatus: any\n  ): Promise<{\n    immediate: SecurityRecommendation[];\n    shortTerm: SecurityRecommendation[];\n    longTerm: SecurityRecommendation[];\n  }> {\n    const immediate: SecurityRecommendation[] = [];\n    const shortTerm: SecurityRecommendation[] = [];\n    const longTerm: SecurityRecommendation[] = [];\n\n    // Immediate recommendations for critical threats\n    const criticalThreats = threats.filter(\n      (t) => t.status === \"active\" && t.severity === \"critical\"\n    );\n    if (criticalThreats.length > 0) {\n      immediate.push({\n        id: \"mitigate-critical-threats\",\n        priority: \"critical\",\n        category: \"monitoring\",\n        description: `Mitigate ${criticalThreats.length} critical security threats immediately`,\n        expectedImpact: \"Prevent security breaches and data loss\",\n        implementationSteps: criticalThreats.flatMap((t) => t.mitigationSteps),\n        estimatedEffort: \"high\",\n      });\n    }\n\n    // Recommendations for route security\n    if (mcpSecurity.securityScore < 70) {\n      shortTerm.push({\n        id: \"improve-mcp-security\",\n        priority: \"high\",\n        category: \"configuration\",\n        description: \"Improve MCP route security configuration\",\n        expectedImpact: \"Enhanced security for MCP routing path\",\n        implementationSteps: [\n          \"Enable strict access control\",\n          \"Configure encryption\",\n          \"Enable threat detection\",\n          \"Review and fix vulnerabilities\",\n        ],\n        estimatedEffort: \"medium\",\n      });\n    }\n\n    if (directBedrockSecurity.securityScore < 70) {\n      shortTerm.push({\n        id: \"improve-bedrock-security\",\n        priority: \"high\",\n        category: \"configuration\",\n        description: \"Improve direct Bedrock route security configuration\",\n        expectedImpact: \"Enhanced security for direct Bedrock path\",\n        implementationSteps: [\n          \"Review IAM policies\",\n          \"Enable AWS CloudTrail\",\n          \"Configure VPC endpoints\",\n          \"Review and fix vulnerabilities\",\n        ],\n        estimatedEffort: \"medium\",\n      });\n    }\n\n    // Compliance recommendations\n    if (complianceStatus.overall !== \"compliant\") {\n      immediate.push({\n        id: \"fix-compliance-violations\",\n        priority: \"critical\",\n        category: \"compliance\",\n        description:\n          \"Fix compliance violations to meet regulatory requirements\",\n        expectedImpact: \"Avoid legal liability and regulatory fines\",\n        implementationSteps: [\n          \"Review compliance violations\",\n          \"Implement remediation steps\",\n          \"Verify compliance status\",\n          \"Document compliance measures\",\n        ],\n        estimatedEffort: \"high\",\n      });\n    }\n\n    // Long-term recommendations\n    longTerm.push({\n      id: \"implement-continuous-monitoring\",\n      priority: \"medium\",\n      category: \"monitoring\",\n      description: \"Implement continuous security monitoring and alerting\",\n      expectedImpact: \"Proactive threat detection and faster response times\",\n      implementationSteps: [\n        \"Set up automated security scans\",\n        \"Configure real-time alerting\",\n        \"Implement security dashboards\",\n        \"Establish incident response procedures\",\n      ],\n      estimatedEffort: \"high\",\n    });\n\n    return { immediate, shortTerm, longTerm };\n  }\n\n  /**\n   * Get current security metrics\n   */\n  getSecurityMetrics(): typeof this.securityMetrics {\n    return { ...this.securityMetrics };\n  }\n\n  /**\n   * Get monitoring status\n   */\n  isMonitoringActive(): boolean {\n    return this.monitoringActive;\n  }\n\n  /**\n   * Get last assessment time\n   */\n  getLastAssessmentTime(): Date | null {\n    return this.lastAssessment;\n  }\n}\n"],"mappings":"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","ignoreList":[]}
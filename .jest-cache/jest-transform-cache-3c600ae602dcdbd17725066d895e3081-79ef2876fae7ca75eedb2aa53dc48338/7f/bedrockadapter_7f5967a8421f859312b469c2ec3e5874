d3b7ecef672a0d80b75e77f922410863
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BedrockAdapter = void 0;
const tool_call_adapter_1 = require("./tool-call-adapter");
class BedrockAdapter extends tool_call_adapter_1.BaseAdapter {
    mapTools(tools) {
        if (!tools?.length)
            return undefined;
        // Anthropic tool schema via Bedrock toolUse format
        return tools.map((t) => ({
            name: t.name,
            description: t.description || "",
            input_schema: {
                type: "object",
                properties: t.parameters || {},
                required: Object.keys(t.parameters || {}),
            },
        }));
    }
    // Enhanced mapping from unified schema to Bedrock format
    fromUnifiedSchema(tools) {
        if (!tools?.length)
            return undefined;
        return tools.map((tool) => ({
            name: tool.function.name,
            description: tool.function.description || "",
            input_schema: {
                type: "object",
                properties: tool.function.parameters.properties,
                required: tool.function.parameters.required || [],
                additionalProperties: tool.function.parameters.additionalProperties || false,
            },
        }));
    }
    buildRequest(input) {
        const { prompt, decision, streaming, maxTokens, tools } = input;
        const body = {
            anthropic_version: "bedrock-2023-05-31",
            max_tokens: maxTokens || 1024,
            temperature: decision.temperature,
            messages: [{ role: "user", content: [{ type: "text", text: prompt }] }],
        };
        // Handle tools from decision or input parameter
        const toolsToUse = tools || decision.tools;
        if (toolsToUse?.length) {
            if (this.isUnifiedToolSpec(toolsToUse[0])) {
                body.tools = this.fromUnifiedSchema(toolsToUse);
            }
            else {
                body.tools = this.mapTools(toolsToUse);
            }
        }
        // Add system message for domain-specific instructions
        if (prompt.includes("legal") || prompt.includes("compliance")) {
            body.system =
                "You are a precise legal assistant. Provide accurate, well-sourced information and clearly indicate when you cannot provide legal advice.";
        }
        return {
            modelId: decision.modelId,
            contentType: "application/json",
            accept: streaming
                ? "application/vnd.amazon.eventstream"
                : "application/json",
            body: JSON.stringify(body),
        };
    }
    parseResponse(resp) {
        try {
            this.validateResponse(resp, "Bedrock");
            const body = typeof resp.body === "string" ? JSON.parse(resp.body) : resp.body;
            // Handle streaming response
            if (resp.body && typeof resp.body === "object" && resp.body.chunk) {
                return this.parseStreamingResponse(resp);
            }
            // Standard response parsing
            const text = body?.content?.map((c) => c.text).join("\n") || "";
            const toolCalls = body?.tool_calls?.map((tc) => ({
                name: tc.name,
                arguments: tc.input,
            })) || [];
            const tokensUsed = {
                input: body?.usage?.input_tokens || 0,
                output: body?.usage?.output_tokens || 0,
            };
            return {
                text,
                toolCalls,
                raw: body,
                tokensUsed,
            };
        }
        catch (error) {
            this.handleError(error, "Bedrock");
        }
    }
    parseStreamingResponse(resp) {
        // Handle Bedrock streaming response format
        let text = "";
        const toolCalls = [];
        // Process streaming chunks
        if (resp.body?.chunk?.bytes) {
            const chunk = JSON.parse(Buffer.from(resp.body.chunk.bytes, "base64").toString());
            if (chunk.delta?.text) {
                text += chunk.delta.text;
            }
        }
        return {
            text,
            toolCalls,
            raw: resp,
            tokensUsed: { input: 0, output: 0 }, // Updated in final chunk
        };
    }
    getProviderConfig() {
        return {
            maxContextTokens: 200000, // Claude 3.5 Sonnet context window
            supportsStreaming: true,
            supportsTools: true,
            supportsJsonMode: true, // Claude supports JSON mode
            supportsVision: true, // Claude 3.5 supports vision
            rateLimitRpm: 1000, // Requests per minute
            fallbackProvider: "google", // Fallback to Google if Bedrock fails
        };
    }
    // Bedrock-specific token estimation using Claude tokenizer patterns
    estimateTokens(text) {
        // More accurate estimation for Claude models
        // Claude typically uses ~3.5 characters per token
        const tokens = Math.ceil(text.length / 3.5);
        return { input: tokens, output: 0 };
    }
    // Implementation of abstract methods
    extractToolCallsFromResponse(resp) {
        const body = typeof resp.body === "string" ? JSON.parse(resp.body) : resp.body;
        // Handle Bedrock/Claude tool calls format
        if (body?.content) {
            return body.content
                .filter((c) => c.type === "tool_use")
                .map((toolUse, index) => ({
                id: toolUse.id || `bedrock_call_${index}`,
                name: toolUse.name,
                arguments: toolUse.input || {},
                confidence: 1.0, // Bedrock doesn't provide confidence scores
            }));
        }
        // Legacy format support
        if (body?.tool_calls) {
            return body.tool_calls.map((tc, index) => ({
                id: tc.id || `bedrock_legacy_${index}`,
                name: tc.name,
                arguments: tc.input || tc.arguments || {},
                confidence: 1.0,
            }));
        }
        return [];
    }
    getProviderName() {
        return "bedrock";
    }
    // Enhanced tool feature support for Bedrock
    supportsToolFeature(feature) {
        switch (feature) {
            case "parallel_calls":
                return true; // Claude supports parallel tool calls
            case "streaming":
                return true; // Bedrock supports streaming with tools
            case "json_schema":
                return true; // Claude supports structured output
            case "complex_types":
                return true; // Claude handles complex nested types well
            default:
                return super.supportsToolFeature(feature);
        }
    }
    // Helper method to check if tools are in unified format
    isUnifiedToolSpec(tool) {
        return tool && typeof tool === "object" && "function" in tool;
    }
}
exports.BedrockAdapter = BedrockAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
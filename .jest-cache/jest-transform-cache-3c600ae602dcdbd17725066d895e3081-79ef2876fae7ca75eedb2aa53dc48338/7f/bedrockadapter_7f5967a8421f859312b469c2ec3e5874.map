{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/adapters/bedrock-adapter.ts","mappings":";;;AACA,2DAAmE;AAEnE,MAAa,cAAe,SAAQ,+BAAW;IAC7C,QAAQ,CAAC,KAAkB;QACzB,IAAI,CAAC,KAAK,EAAE,MAAM;YAAE,OAAO,SAAS,CAAC;QAErC,mDAAmD;QACnD,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACvB,IAAI,EAAE,CAAC,CAAC,IAAI;YACZ,WAAW,EAAE,CAAC,CAAC,WAAW,IAAI,EAAE;YAChC,YAAY,EAAE;gBACZ,IAAI,EAAE,QAAQ;gBACd,UAAU,EAAE,CAAC,CAAC,UAAU,IAAI,EAAE;gBAC9B,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,IAAI,EAAE,CAAC;aAC1C;SACF,CAAC,CAAC,CAAC;IACN,CAAC;IAED,yDAAyD;IAChD,iBAAiB,CAAC,KAAyB;QAClD,IAAI,CAAC,KAAK,EAAE,MAAM;YAAE,OAAO,SAAS,CAAC;QAErC,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAC1B,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI;YACxB,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,IAAI,EAAE;YAC5C,YAAY,EAAE;gBACZ,IAAI,EAAE,QAAQ;gBACd,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAU;gBAC/C,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,IAAI,EAAE;gBACjD,oBAAoB,EAClB,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,oBAAoB,IAAI,KAAK;aACzD;SACF,CAAC,CAAC,CAAC;IACN,CAAC;IAED,YAAY,CAAC,KAMZ;QACC,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC;QAEhE,MAAM,IAAI,GAAQ;YAChB,iBAAiB,EAAE,oBAAoB;YACvC,UAAU,EAAE,SAAS,IAAI,IAAI;YAC7B,WAAW,EAAE,QAAQ,CAAC,WAAW;YACjC,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;SACxE,CAAC;QAEF,gDAAgD;QAChD,MAAM,UAAU,GAAG,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC;QAC3C,IAAI,UAAU,EAAE,MAAM,EAAE,CAAC;YACvB,IAAI,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBAC1C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,UAA+B,CAAC,CAAC;YACvE,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAwB,CAAC,CAAC;YACvD,CAAC;QACH,CAAC;QAED,sDAAsD;QACtD,IAAI,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC;YAC9D,IAAI,CAAC,MAAM;gBACT,0IAA0I,CAAC;QAC/I,CAAC;QAED,OAAO;YACL,OAAO,EAAE,QAAQ,CAAC,OAAO;YACzB,WAAW,EAAE,kBAAkB;YAC/B,MAAM,EAAE,SAAS;gBACf,CAAC,CAAC,oCAAoC;gBACtC,CAAC,CAAC,kBAAkB;YACtB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;SAC3B,CAAC;IACJ,CAAC;IAED,aAAa,CAAC,IAAS;QACrB,IAAI,CAAC;YACH,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YAEvC,MAAM,IAAI,GACR,OAAO,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;YAEpE,4BAA4B;YAC5B,IAAI,IAAI,CAAC,IAAI,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,QAAQ,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;gBAClE,OAAO,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;YAC3C,CAAC;YAED,4BAA4B;YAC5B,MAAM,IAAI,GAAG,IAAI,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YACrE,MAAM,SAAS,GACb,IAAI,EAAE,UAAU,EAAE,GAAG,CAAC,CAAC,EAAO,EAAE,EAAE,CAAC,CAAC;gBAClC,IAAI,EAAE,EAAE,CAAC,IAAI;gBACb,SAAS,EAAE,EAAE,CAAC,KAAK;aACpB,CAAC,CAAC,IAAI,EAAE,CAAC;YAEZ,MAAM,UAAU,GAAG;gBACjB,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,YAAY,IAAI,CAAC;gBACrC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,aAAa,IAAI,CAAC;aACxC,CAAC;YAEF,OAAO;gBACL,IAAI;gBACJ,SAAS;gBACT,GAAG,EAAE,IAAI;gBACT,UAAU;aACX,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;IAEO,sBAAsB,CAAC,IAAS;QACtC,2CAA2C;QAC3C,IAAI,IAAI,GAAG,EAAE,CAAC;QACd,MAAM,SAAS,GAA4C,EAAE,CAAC;QAE9D,2BAA2B;QAC3B,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;YAC5B,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,QAAQ,EAAE,CACxD,CAAC;YACF,IAAI,KAAK,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC;gBACtB,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC;YAC3B,CAAC;QACH,CAAC;QAED,OAAO;YACL,IAAI;YACJ,SAAS;YACT,GAAG,EAAE,IAAI;YACT,UAAU,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,yBAAyB;SAC/D,CAAC;IACJ,CAAC;IAED,iBAAiB;QACf,OAAO;YACL,gBAAgB,EAAE,MAAM,EAAE,mCAAmC;YAC7D,iBAAiB,EAAE,IAAI;YACvB,aAAa,EAAE,IAAI;YACnB,gBAAgB,EAAE,IAAI,EAAE,4BAA4B;YACpD,cAAc,EAAE,IAAI,EAAE,6BAA6B;YACnD,YAAY,EAAE,IAAI,EAAE,sBAAsB;YAC1C,gBAAgB,EAAE,QAAQ,EAAE,sCAAsC;SACnE,CAAC;IACJ,CAAC;IAED,oEAAoE;IAC3D,cAAc,CAAC,IAAY;QAClC,6CAA6C;QAC7C,kDAAkD;QAClD,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC;QAC5C,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;IACtC,CAAC;IAED,qCAAqC;IAC3B,4BAA4B,CAAC,IAAS;QAM9C,MAAM,IAAI,GACR,OAAO,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;QAEpE,0CAA0C;QAC1C,IAAI,IAAI,EAAE,OAAO,EAAE,CAAC;YAClB,OAAO,IAAI,CAAC,OAAO;iBAChB,MAAM,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,UAAU,CAAC;iBACzC,GAAG,CAAC,CAAC,OAAY,EAAE,KAAa,EAAE,EAAE,CAAC,CAAC;gBACrC,EAAE,EAAE,OAAO,CAAC,EAAE,IAAI,gBAAgB,KAAK,EAAE;gBACzC,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,SAAS,EAAE,OAAO,CAAC,KAAK,IAAI,EAAE;gBAC9B,UAAU,EAAE,GAAG,EAAE,4CAA4C;aAC9D,CAAC,CAAC,CAAC;QACR,CAAC;QAED,wBAAwB;QACxB,IAAI,IAAI,EAAE,UAAU,EAAE,CAAC;YACrB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAO,EAAE,KAAa,EAAE,EAAE,CAAC,CAAC;gBACtD,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,kBAAkB,KAAK,EAAE;gBACtC,IAAI,EAAE,EAAE,CAAC,IAAI;gBACb,SAAS,EAAE,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,SAAS,IAAI,EAAE;gBACzC,UAAU,EAAE,GAAG;aAChB,CAAC,CAAC,CAAC;QACN,CAAC;QAED,OAAO,EAAE,CAAC;IACZ,CAAC;IAES,eAAe;QACvB,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,4CAA4C;IACnC,mBAAmB,CAC1B,OAAyE;QAEzE,QAAQ,OAAO,EAAE,CAAC;YAChB,KAAK,gBAAgB;gBACnB,OAAO,IAAI,CAAC,CAAC,sCAAsC;YACrD,KAAK,WAAW;gBACd,OAAO,IAAI,CAAC,CAAC,wCAAwC;YACvD,KAAK,aAAa;gBAChB,OAAO,IAAI,CAAC,CAAC,oCAAoC;YACnD,KAAK,eAAe;gBAClB,OAAO,IAAI,CAAC,CAAC,2CAA2C;YAC1D;gBACE,OAAO,KAAK,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAC9C,CAAC;IACH,CAAC;IAED,wDAAwD;IAChD,iBAAiB,CAAC,IAAS;QACjC,OAAO,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,UAAU,IAAI,IAAI,CAAC;IAChE,CAAC;CACF;AAvND,wCAuNC","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/adapters/bedrock-adapter.ts"],"sourcesContent":["import { ProviderResponse, RouteDecision, ToolSpec } from \"../types\";\nimport { BaseAdapter, UnifiedToolSpec } from \"./tool-call-adapter\";\n\nexport class BedrockAdapter extends BaseAdapter {\n  mapTools(tools?: ToolSpec[]) {\n    if (!tools?.length) return undefined;\n\n    // Anthropic tool schema via Bedrock toolUse format\n    return tools.map((t) => ({\n      name: t.name,\n      description: t.description || \"\",\n      input_schema: {\n        type: \"object\",\n        properties: t.parameters || {},\n        required: Object.keys(t.parameters || {}),\n      },\n    }));\n  }\n\n  // Enhanced mapping from unified schema to Bedrock format\n  override fromUnifiedSchema(tools?: UnifiedToolSpec[]): any | undefined {\n    if (!tools?.length) return undefined;\n\n    return tools.map((tool) => ({\n      name: tool.function.name,\n      description: tool.function.description || \"\",\n      input_schema: {\n        type: \"object\",\n        properties: tool.function.parameters.properties,\n        required: tool.function.parameters.required || [],\n        additionalProperties:\n          tool.function.parameters.additionalProperties || false,\n      },\n    }));\n  }\n\n  buildRequest(input: {\n    prompt: string;\n    decision: RouteDecision;\n    streaming?: boolean;\n    maxTokens?: number;\n    tools?: ToolSpec[] | UnifiedToolSpec[];\n  }) {\n    const { prompt, decision, streaming, maxTokens, tools } = input;\n\n    const body: any = {\n      anthropic_version: \"bedrock-2023-05-31\",\n      max_tokens: maxTokens || 1024,\n      temperature: decision.temperature,\n      messages: [{ role: \"user\", content: [{ type: \"text\", text: prompt }] }],\n    };\n\n    // Handle tools from decision or input parameter\n    const toolsToUse = tools || decision.tools;\n    if (toolsToUse?.length) {\n      if (this.isUnifiedToolSpec(toolsToUse[0])) {\n        body.tools = this.fromUnifiedSchema(toolsToUse as UnifiedToolSpec[]);\n      } else {\n        body.tools = this.mapTools(toolsToUse as ToolSpec[]);\n      }\n    }\n\n    // Add system message for domain-specific instructions\n    if (prompt.includes(\"legal\") || prompt.includes(\"compliance\")) {\n      body.system =\n        \"You are a precise legal assistant. Provide accurate, well-sourced information and clearly indicate when you cannot provide legal advice.\";\n    }\n\n    return {\n      modelId: decision.modelId,\n      contentType: \"application/json\",\n      accept: streaming\n        ? \"application/vnd.amazon.eventstream\"\n        : \"application/json\",\n      body: JSON.stringify(body),\n    };\n  }\n\n  parseResponse(resp: any): ProviderResponse {\n    try {\n      this.validateResponse(resp, \"Bedrock\");\n\n      const body =\n        typeof resp.body === \"string\" ? JSON.parse(resp.body) : resp.body;\n\n      // Handle streaming response\n      if (resp.body && typeof resp.body === \"object\" && resp.body.chunk) {\n        return this.parseStreamingResponse(resp);\n      }\n\n      // Standard response parsing\n      const text = body?.content?.map((c: any) => c.text).join(\"\\n\") || \"\";\n      const toolCalls =\n        body?.tool_calls?.map((tc: any) => ({\n          name: tc.name,\n          arguments: tc.input,\n        })) || [];\n\n      const tokensUsed = {\n        input: body?.usage?.input_tokens || 0,\n        output: body?.usage?.output_tokens || 0,\n      };\n\n      return {\n        text,\n        toolCalls,\n        raw: body,\n        tokensUsed,\n      };\n    } catch (error) {\n      this.handleError(error, \"Bedrock\");\n    }\n  }\n\n  private parseStreamingResponse(resp: any): ProviderResponse {\n    // Handle Bedrock streaming response format\n    let text = \"\";\n    const toolCalls: Array<{ name: string; arguments: any }> = [];\n\n    // Process streaming chunks\n    if (resp.body?.chunk?.bytes) {\n      const chunk = JSON.parse(\n        Buffer.from(resp.body.chunk.bytes, \"base64\").toString()\n      );\n      if (chunk.delta?.text) {\n        text += chunk.delta.text;\n      }\n    }\n\n    return {\n      text,\n      toolCalls,\n      raw: resp,\n      tokensUsed: { input: 0, output: 0 }, // Updated in final chunk\n    };\n  }\n\n  getProviderConfig() {\n    return {\n      maxContextTokens: 200000, // Claude 3.5 Sonnet context window\n      supportsStreaming: true,\n      supportsTools: true,\n      supportsJsonMode: true, // Claude supports JSON mode\n      supportsVision: true, // Claude 3.5 supports vision\n      rateLimitRpm: 1000, // Requests per minute\n      fallbackProvider: \"google\", // Fallback to Google if Bedrock fails\n    };\n  }\n\n  // Bedrock-specific token estimation using Claude tokenizer patterns\n  override estimateTokens(text: string): { input: number; output: number } {\n    // More accurate estimation for Claude models\n    // Claude typically uses ~3.5 characters per token\n    const tokens = Math.ceil(text.length / 3.5);\n    return { input: tokens, output: 0 };\n  }\n\n  // Implementation of abstract methods\n  protected extractToolCallsFromResponse(resp: any): Array<{\n    id?: string;\n    name: string;\n    arguments: any;\n    confidence?: number;\n  }> {\n    const body =\n      typeof resp.body === \"string\" ? JSON.parse(resp.body) : resp.body;\n\n    // Handle Bedrock/Claude tool calls format\n    if (body?.content) {\n      return body.content\n        .filter((c: any) => c.type === \"tool_use\")\n        .map((toolUse: any, index: number) => ({\n          id: toolUse.id || `bedrock_call_${index}`,\n          name: toolUse.name,\n          arguments: toolUse.input || {},\n          confidence: 1.0, // Bedrock doesn't provide confidence scores\n        }));\n    }\n\n    // Legacy format support\n    if (body?.tool_calls) {\n      return body.tool_calls.map((tc: any, index: number) => ({\n        id: tc.id || `bedrock_legacy_${index}`,\n        name: tc.name,\n        arguments: tc.input || tc.arguments || {},\n        confidence: 1.0,\n      }));\n    }\n\n    return [];\n  }\n\n  protected getProviderName(): string {\n    return \"bedrock\";\n  }\n\n  // Enhanced tool feature support for Bedrock\n  override supportsToolFeature(\n    feature: \"parallel_calls\" | \"streaming\" | \"json_schema\" | \"complex_types\"\n  ): boolean {\n    switch (feature) {\n      case \"parallel_calls\":\n        return true; // Claude supports parallel tool calls\n      case \"streaming\":\n        return true; // Bedrock supports streaming with tools\n      case \"json_schema\":\n        return true; // Claude supports structured output\n      case \"complex_types\":\n        return true; // Claude handles complex nested types well\n      default:\n        return super.supportsToolFeature(feature);\n    }\n  }\n\n  // Helper method to check if tools are in unified format\n  private isUnifiedToolSpec(tool: any): tool is UnifiedToolSpec {\n    return tool && typeof tool === \"object\" && \"function\" in tool;\n  }\n}\n"],"version":3}
68e3f7f2976235e7481100c5b29b4a0a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const globals_1 = require("@jest/globals");
// Mock AWS SDK modules
globals_1.jest.mock('@aws-sdk/client-route-53', () => ({
    Route53Client: globals_1.jest.fn(() => ({ send: mockRoute53Send })),
    GetHealthCheckCommand: globals_1.jest.fn(),
    GetHealthCheckStatusCommand: globals_1.jest.fn(),
}));
globals_1.jest.mock('@aws-sdk/client-rds', () => ({
    RDSClient: globals_1.jest.fn(() => ({ send: mockRDSSend })),
    DescribeDBClustersCommand: globals_1.jest.fn(),
}));
globals_1.jest.mock('@aws-sdk/client-elasticache', () => ({
    ElastiCacheClient: globals_1.jest.fn(() => ({ send: mockElastiCacheSend })),
    DescribeReplicationGroupsCommand: globals_1.jest.fn(),
}));
globals_1.jest.mock('@aws-sdk/client-s3', () => ({
    S3Client: globals_1.jest.fn(() => ({ send: mockS3Send })),
    HeadObjectCommand: globals_1.jest.fn(),
    GetBucketReplicationCommand: globals_1.jest.fn(),
}));
globals_1.jest.mock('@aws-sdk/client-secrets-manager', () => ({
    SecretsManagerClient: globals_1.jest.fn(() => ({ send: mockSecretsSend })),
    GetSecretValueCommand: globals_1.jest.fn(),
}));
globals_1.jest.mock('@aws-sdk/client-cloudwatch', () => ({
    CloudWatchClient: globals_1.jest.fn(() => ({ send: mockCloudWatchSend })),
    GetMetricDataCommand: globals_1.jest.fn(),
    GetMetricStatisticsCommand: globals_1.jest.fn(),
}));
const health_checker_1 = require("../health-checker");
// Mock AWS SDK clients directly
const mockRoute53Send = globals_1.jest.fn();
const mockRDSSend = globals_1.jest.fn();
const mockElastiCacheSend = globals_1.jest.fn();
const mockS3Send = globals_1.jest.fn();
const mockSecretsSend = globals_1.jest.fn();
const mockCloudWatchSend = globals_1.jest.fn();
const mockConfig = {
    primaryRegion: 'eu-central-1',
    secondaryRegion: 'eu-west-1',
    domainName: 'test.matbakh.app',
    hostedZoneId: 'Z123456789',
    distributionId: 'E123456789',
    globalClusterIdentifier: 'test-global-cluster',
    primaryClusterIdentifier: 'test-primary-cluster',
    secondaryClusterIdentifier: 'test-secondary-cluster',
    primaryHealthCheckId: 'hc-primary-123',
    secondaryHealthCheckId: 'hc-secondary-123',
};
(0, globals_1.describe)('HealthChecker', () => {
    let healthChecker;
    (0, globals_1.beforeEach)(() => {
        // Reset all mocks
        globals_1.jest.clearAllMocks();
        mockRoute53Send.mockReset();
        mockRDSSend.mockReset();
        mockElastiCacheSend.mockReset();
        mockS3Send.mockReset();
        mockSecretsSend.mockReset();
        mockCloudWatchSend.mockReset();
        // Create HealthChecker with injected mock clients
        const mockClients = {
            route53: { send: mockRoute53Send },
            primaryRds: { send: mockRDSSend },
            secondaryRds: { send: mockRDSSend },
            primaryCache: { send: mockElastiCacheSend },
            secondaryCache: { send: mockElastiCacheSend },
            primaryS3: { send: mockS3Send },
            secondaryS3: { send: mockS3Send },
            primarySecrets: { send: mockSecretsSend },
            secondarySecrets: { send: mockSecretsSend },
            cloudwatch: { send: mockCloudWatchSend },
        };
        healthChecker = new health_checker_1.HealthChecker(mockConfig, mockClients);
    });
    (0, globals_1.describe)('checkAllServices', () => {
        (0, globals_1.it)('should return healthy status when all services are healthy', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Mock healthy responses for all services
            mockRoute53Send
                .mockResolvedValueOnce({
                HealthCheck: {
                    HealthCheckConfig: {
                        FullyQualifiedDomainName: 'api-eu-central-1.test.matbakh.app',
                    },
                },
            })
                .mockResolvedValueOnce({
                StatusList: [{ Status: 'Success', CheckedTime: new Date(), Latency: 100 }],
            })
                .mockResolvedValueOnce({
                HealthCheck: {
                    HealthCheckConfig: {
                        FullyQualifiedDomainName: 'api-eu-west-1.test.matbakh.app',
                    },
                },
            })
                .mockResolvedValueOnce({
                StatusList: [{ Status: 'Success', CheckedTime: new Date(), Latency: 120 }],
            });
            mockRDSSend
                .mockResolvedValueOnce({
                DBClusters: [
                    {
                        DBClusterIdentifier: 'test-primary-cluster',
                        Status: 'available',
                        Engine: 'aurora-postgresql',
                        EngineVersion: '15.4',
                        AvailabilityZones: ['eu-central-1a', 'eu-central-1b'],
                        BackupRetentionPeriod: 7,
                        MultiAZ: true,
                    },
                ],
            })
                .mockResolvedValueOnce({
                DBClusters: [
                    {
                        DBClusterIdentifier: 'test-secondary-cluster',
                        Status: 'available',
                        Engine: 'aurora-postgresql',
                        EngineVersion: '15.4',
                        AvailabilityZones: ['eu-west-1a', 'eu-west-1b'],
                        BackupRetentionPeriod: 7,
                        MultiAZ: true,
                    },
                ],
            });
            mockElastiCacheSend
                .mockResolvedValueOnce({
                ReplicationGroups: [
                    {
                        ReplicationGroupId: 'test-cache-group-primary',
                        Status: 'available',
                        NumCacheClusters: 2,
                        MultiAZ: 'enabled',
                        CacheNodeType: 'cache.r6g.large',
                    },
                ],
            })
                .mockResolvedValueOnce({
                ReplicationGroups: [
                    {
                        ReplicationGroupId: 'test-cache-group-secondary',
                        Status: 'available',
                        NumCacheClusters: 2,
                        MultiAZ: 'enabled',
                        CacheNodeType: 'cache.r6g.large',
                    },
                ],
            });
            mockS3Send
                .mockResolvedValueOnce({
                ContentLength: 1024,
                LastModified: new Date(),
            })
                .mockResolvedValueOnce({
                ReplicationConfiguration: {
                    Role: 'arn:aws:iam::123456789012:role/replication-role',
                    Rules: [
                        {
                            ID: 'ReplicateAll',
                            Status: 'Enabled',
                        },
                    ],
                },
            })
                .mockResolvedValueOnce({
                ContentLength: 1024,
                LastModified: new Date(),
            })
                .mockResolvedValueOnce({
                ReplicationConfiguration: {
                    Role: 'arn:aws:iam::123456789012:role/replication-role',
                    Rules: [
                        {
                            ID: 'ReplicateAll',
                            Status: 'Enabled',
                        },
                    ],
                },
            });
            mockSecretsSend
                .mockResolvedValueOnce({
                SecretString: '{\"username\":\"test\",\"password\":\"secret\"}',
            })
                .mockResolvedValueOnce({
                SecretString: '{\"username\":\"test\",\"password\":\"secret\"}',
            });
            mockCloudWatchSend.mockResolvedValue({
                Datapoints: [{ Average: 30000, Timestamp: new Date() }],
            });
            const result = yield healthChecker.checkAllServices();
            (0, globals_1.expect)(result.overall).toBe('healthy');
            (0, globals_1.expect)(result.regions.primary.status).toBe('healthy');
            (0, globals_1.expect)(result.regions.secondary.status).toBe('healthy');
            (0, globals_1.expect)(result.services).toHaveLength(10); // 5 services Ã— 2 regions
            (0, globals_1.expect)(result.services.every(s => s.status === 'healthy')).toBe(true);
        }));
        (0, globals_1.it)('should return degraded status when some services are degraded', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Mock mixed health responses
            mockRoute53Send
                .mockResolvedValueOnce({
                HealthCheck: {},
            })
                .mockResolvedValueOnce({
                StatusList: [{ Status: 'Success' }],
            })
                .mockResolvedValueOnce({
                HealthCheck: {},
            })
                .mockResolvedValueOnce({
                StatusList: [{ Status: 'Success' }],
            });
            // Primary DB healthy, secondary degraded
            mockRDSSend
                .mockResolvedValueOnce({
                DBClusters: [{ Status: 'available' }],
            })
                .mockResolvedValueOnce({
                DBClusters: [{ Status: 'backing-up' }], // Degraded state
            });
            mockElastiCacheSend.mockResolvedValue({
                ReplicationGroups: [{ Status: 'available' }],
            });
            mockS3Send.mockResolvedValue({});
            mockSecretsSend.mockResolvedValue({ SecretString: '{}' });
            mockCloudWatchSend.mockResolvedValue({ Datapoints: [] });
            const result = yield healthChecker.checkAllServices();
            (0, globals_1.expect)(result.overall).toBe('degraded');
            (0, globals_1.expect)(result.regions.primary.status).toBe('healthy');
            (0, globals_1.expect)(result.regions.secondary.status).toBe('degraded');
        }));
        (0, globals_1.it)('should detect unhealthy services', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Mock failing health checks
            mockRoute53Send
                .mockResolvedValueOnce({
                HealthCheck: {},
            })
                .mockResolvedValueOnce({
                StatusList: [{ Status: 'Failure' }],
            })
                .mockResolvedValueOnce({
                HealthCheck: {},
            })
                .mockResolvedValueOnce({
                StatusList: [{ Status: 'Failure' }],
            });
            mockRDSSend.mockRejectedValue(new Error('Database unavailable'));
            mockElastiCacheSend.mockResolvedValue({ ReplicationGroups: [] });
            mockS3Send.mockRejectedValue(new Error('Access denied'));
            mockSecretsSend.mockRejectedValue(new Error('Secret not found'));
            mockCloudWatchSend.mockResolvedValue({ Datapoints: [] });
            const result = yield healthChecker.checkAllServices();
            (0, globals_1.expect)(result.overall).toBe('unhealthy');
            (0, globals_1.expect)(result.services.some(s => s.status === 'unhealthy')).toBe(true);
        }));
        (0, globals_1.it)('should handle AWS service errors gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Mock AWS SDK errors
            mockRoute53Send.mockRejectedValue(new Error('AWS SDK Error'));
            mockRDSSend.mockRejectedValue(new Error('RDS Error'));
            mockElastiCacheSend.mockRejectedValue(new Error('Cache Error'));
            mockS3Send.mockRejectedValue(new Error('S3 Error'));
            mockSecretsSend.mockRejectedValue(new Error('Secrets Error'));
            mockCloudWatchSend.mockRejectedValue(new Error('CloudWatch Error'));
            const result = yield healthChecker.checkAllServices();
            (0, globals_1.expect)(result.overall).toBe('unhealthy');
            (0, globals_1.expect)(result.services.every(s => s.error)).toBe(true);
            (0, globals_1.expect)(result.services.every(s => s.status === 'unhealthy')).toBe(true);
        }));
    });
    (0, globals_1.describe)('API health checks', () => {
        (0, globals_1.it)('should check API health via Route 53 health checks', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockRoute53Send
                .mockResolvedValueOnce({
                HealthCheck: {
                    HealthCheckConfig: {
                        FullyQualifiedDomainName: 'api-eu-central-1.test.matbakh.app',
                    },
                },
            })
                .mockResolvedValueOnce({
                StatusList: [{ Status: 'Success', Latency: 150 }],
            });
            const result = yield healthChecker.checkAllServices();
            const apiService = result.services.find(s => s.service === 'api' && s.region === 'eu-central-1');
            (0, globals_1.expect)(apiService).toBeDefined();
            (0, globals_1.expect)(apiService.status).toBe('healthy');
            (0, globals_1.expect)(apiService.details.fqdn).toBe('api-eu-central-1.test.matbakh.app');
            (0, globals_1.expect)(apiService.details.latency).toBe(150);
        }));
        (0, globals_1.it)('should handle API health check failures', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockRoute53Send
                .mockResolvedValueOnce({
                HealthCheck: {},
            })
                .mockResolvedValueOnce({
                StatusList: [{ Status: 'Failure' }],
            });
            const result = yield healthChecker.checkAllServices();
            const apiService = result.services.find(s => s.service === 'api' && s.region === 'eu-central-1');
            (0, globals_1.expect)(apiService).toBeDefined();
            (0, globals_1.expect)(apiService.status).toBe('unhealthy');
        }));
    });
    (0, globals_1.describe)('database health checks', () => {
        (0, globals_1.it)('should check database cluster health', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Mock all services to avoid interference
            mockRoute53Send.mockResolvedValue({ StatusList: [{ Status: 'Success' }] });
            mockElastiCacheSend.mockResolvedValue({ ReplicationGroups: [{ Status: 'available' }] });
            mockS3Send.mockResolvedValue({});
            mockSecretsSend.mockResolvedValue({ SecretString: '{}' });
            mockRDSSend.mockResolvedValue({
                DBClusters: [
                    {
                        Status: 'available',
                        Engine: 'aurora-postgresql',
                        MultiAZ: true,
                    },
                ],
            });
            // Mock CloudWatch to return 30 seconds (will be converted to 30000 ms)
            mockCloudWatchSend.mockResolvedValue({
                MetricDataResults: [
                    {
                        Values: [30], // 30 seconds
                    },
                ],
            });
            const result = yield healthChecker.checkAllServices();
            const dbService = result.services.find(s => s.service === 'database' && s.region === 'eu-central-1');
            (0, globals_1.expect)(dbService).toBeDefined();
            (0, globals_1.expect)(dbService.status).toBe('healthy');
            (0, globals_1.expect)(dbService.details.engine).toBe('aurora-postgresql');
            (0, globals_1.expect)(dbService.details.multiAZ).toBe(true);
            (0, globals_1.expect)(dbService.details.replicationLag).toBe(30000);
        }));
        (0, globals_1.it)('should detect high replication lag', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Mock all services to avoid interference
            mockRoute53Send.mockResolvedValue({ StatusList: [{ Status: 'Success' }] });
            mockElastiCacheSend.mockResolvedValue({ ReplicationGroups: [{ Status: 'available' }] });
            mockS3Send.mockResolvedValue({});
            mockSecretsSend.mockResolvedValue({ SecretString: '{}' });
            mockRDSSend.mockResolvedValue({
                DBClusters: [{ Status: 'available' }],
            });
            // Mock CloudWatch to return 120 seconds (will be converted to 120000 ms)
            mockCloudWatchSend.mockResolvedValue({
                MetricDataResults: [
                    {
                        Values: [120], // 120 seconds
                    },
                ],
            });
            const result = yield healthChecker.checkAllServices();
            const dbService = result.services.find(s => s.service === 'database');
            (0, globals_1.expect)(dbService).toBeDefined();
            (0, globals_1.expect)(dbService.details.replicationLag).toBe(120000);
        }));
        (0, globals_1.it)('should handle missing database cluster', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockRDSSend.mockRejectedValue(new Error('Cluster not found'));
            const result = yield healthChecker.checkAllServices();
            const dbService = result.services.find(s => s.service === 'database');
            (0, globals_1.expect)(dbService).toBeDefined();
            (0, globals_1.expect)(dbService.status).toBe('unhealthy');
            (0, globals_1.expect)(dbService.error).toContain('Cluster not found');
        }));
    });
    (0, globals_1.describe)('cache health checks', () => {
        (0, globals_1.it)('should check ElastiCache replication group health', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockElastiCacheSend.mockResolvedValue({
                ReplicationGroups: [
                    {
                        Status: 'available',
                        NumCacheClusters: 2,
                        MultiAZ: 'enabled',
                    },
                ],
            });
            const result = yield healthChecker.checkAllServices();
            const cacheService = result.services.find(s => s.service === 'cache');
            (0, globals_1.expect)(cacheService).toBeDefined();
            (0, globals_1.expect)(cacheService.status).toBe('healthy');
            (0, globals_1.expect)(cacheService.details.numCacheClusters).toBe(2);
            (0, globals_1.expect)(cacheService.details.multiAZ).toBe('enabled');
        }));
        (0, globals_1.it)('should handle no cache configuration gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockElastiCacheSend.mockResolvedValue({
                ReplicationGroups: [],
            });
            const result = yield healthChecker.checkAllServices();
            const cacheService = result.services.find(s => s.service === 'cache');
            (0, globals_1.expect)(cacheService).toBeDefined();
            (0, globals_1.expect)(cacheService.status).toBe('healthy');
            (0, globals_1.expect)(cacheService.details.message).toBe('No replication groups configured');
        }));
        (0, globals_1.it)('should detect cache in creating state', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockElastiCacheSend.mockResolvedValue({
                ReplicationGroups: [{ Status: 'creating' }],
            });
            const result = yield healthChecker.checkAllServices();
            const cacheService = result.services.find(s => s.service === 'cache');
            (0, globals_1.expect)(cacheService).toBeDefined();
            (0, globals_1.expect)(cacheService.status).toBe('degraded');
        }));
    });
    (0, globals_1.describe)('storage health checks', () => {
        (0, globals_1.it)('should check S3 bucket accessibility', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockS3Send
                .mockResolvedValueOnce({})
                .mockResolvedValueOnce({
                ReplicationConfiguration: {
                    Rules: [{ Status: 'Enabled' }, { Status: 'Enabled' }],
                },
            });
            const result = yield healthChecker.checkAllServices();
            const storageService = result.services.find(s => s.service === 'storage');
            (0, globals_1.expect)(storageService).toBeDefined();
            (0, globals_1.expect)(storageService.status).toBe('healthy');
            (0, globals_1.expect)(storageService.details.replicationRules).toBe(2);
        }));
        (0, globals_1.it)('should handle missing index.html gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const notFoundError = new Error('Not Found');
            notFoundError.name = 'NotFound';
            mockS3Send.mockRejectedValueOnce(notFoundError).mockResolvedValueOnce({
                ReplicationConfiguration: { Rules: [] },
            });
            const result = yield healthChecker.checkAllServices();
            const storageService = result.services.find(s => s.service === 'storage');
            (0, globals_1.expect)(storageService).toBeDefined();
            (0, globals_1.expect)(storageService.status).toBe('healthy');
        }));
        (0, globals_1.it)('should detect S3 access denied', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const accessDeniedError = new Error('Access Denied');
            accessDeniedError.name = 'AccessDenied';
            mockS3Send.mockRejectedValue(accessDeniedError);
            const result = yield healthChecker.checkAllServices();
            const storageService = result.services.find(s => s.service === 'storage');
            (0, globals_1.expect)(storageService).toBeDefined();
            (0, globals_1.expect)(storageService.status).toBe('unhealthy');
            (0, globals_1.expect)(storageService.error).toContain('Access Denied');
        }));
    });
    (0, globals_1.describe)('secrets health checks', () => {
        (0, globals_1.it)('should check secrets manager accessibility', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockSecretsSend.mockResolvedValue({
                SecretString: '{}',
            });
            const result = yield healthChecker.checkAllServices();
            const secretsService = result.services.find(s => s.service === 'secrets');
            (0, globals_1.expect)(secretsService).toBeDefined();
            (0, globals_1.expect)(secretsService.status).toBe('healthy');
            (0, globals_1.expect)(secretsService.details.secretsAccessible).toBe(true);
        }));
        (0, globals_1.it)('should handle secret not found', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const secretNotFoundError = new Error('Could not find the specified secret');
            mockSecretsSend.mockRejectedValue(secretNotFoundError);
            const result = yield healthChecker.checkAllServices();
            const secretsService = result.services.find(s => s.service === 'secrets');
            (0, globals_1.expect)(secretsService).toBeDefined();
            (0, globals_1.expect)(secretsService.status).toBe('unhealthy');
            (0, globals_1.expect)(secretsService.error).toContain('find the specified secret');
        }));
    });
    (0, globals_1.describe)('getHealthSummary', () => {
        (0, globals_1.it)('should provide comprehensive health summary', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Mock successful health checks with realistic response times
            mockRoute53Send
                .mockResolvedValueOnce({
                HealthCheck: {
                    HealthCheckConfig: {
                        FullyQualifiedDomainName: 'api-eu-central-1.test.matbakh.app',
                    },
                },
            })
                .mockResolvedValueOnce({
                StatusList: [{ Status: 'Success', CheckedTime: new Date(), Latency: 100 }],
            })
                .mockResolvedValueOnce({
                HealthCheck: {
                    HealthCheckConfig: {
                        FullyQualifiedDomainName: 'api-eu-west-1.test.matbakh.app',
                    },
                },
            })
                .mockResolvedValueOnce({
                StatusList: [{ Status: 'Success', CheckedTime: new Date(), Latency: 120 }],
            });
            mockRDSSend.mockResolvedValue({
                DBClusters: [{ Status: 'available', Engine: 'aurora-postgresql', MultiAZ: true }],
            });
            mockElastiCacheSend.mockResolvedValue({
                ReplicationGroups: [{ Status: 'available' }],
            });
            mockS3Send.mockResolvedValue({});
            mockSecretsSend.mockResolvedValue({ SecretString: '{}' });
            // Mock replication lag - return 45 seconds (will be converted to 45000 ms)
            mockCloudWatchSend.mockResolvedValue({
                MetricDataResults: [
                    {
                        Values: [45], // 45 seconds
                    },
                ],
            });
            const summary = yield healthChecker.getHealthSummary();
            (0, globals_1.expect)(summary.timestamp).toBeInstanceOf(Date);
            (0, globals_1.expect)(summary.overallStatus).toBe('healthy');
            (0, globals_1.expect)(summary.regionStatus).toHaveProperty('eu-central-1');
            (0, globals_1.expect)(summary.regionStatus).toHaveProperty('eu-west-1');
            (0, globals_1.expect)(summary.serviceStatus).toBeDefined();
            (0, globals_1.expect)(summary.metrics.averageResponseTime).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(summary.metrics.successRate).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(summary.metrics.replicationLag).toBe(45000);
        }));
        (0, globals_1.it)('should calculate correct success rate with mixed health', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Mock 80% success rate (8 out of 10 services healthy)
            let callCount = 0;
            mockRoute53Send.mockImplementation(() => {
                callCount++;
                if (callCount <= 8) {
                    return Promise.resolve({ StatusList: [{ Status: 'Success' }] });
                }
                return Promise.resolve({ StatusList: [{ Status: 'Failure' }] });
            });
            mockRDSSend.mockResolvedValue({
                DBClusters: [{ Status: 'available' }],
            });
            mockElastiCacheSend.mockResolvedValue({
                ReplicationGroups: [{ Status: 'available' }],
            });
            mockS3Send.mockResolvedValue({});
            mockSecretsSend.mockResolvedValue({ SecretString: '{}' });
            mockCloudWatchSend.mockResolvedValue({ Datapoints: [] });
            const summary = yield healthChecker.getHealthSummary();
            (0, globals_1.expect)(summary.metrics.successRate).toBeGreaterThanOrEqual(70);
            (0, globals_1.expect)(summary.metrics.successRate).toBeLessThanOrEqual(100);
        }));
        (0, globals_1.it)('should handle errors in health summary gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Mock all services failing
            mockRoute53Send.mockRejectedValue(new Error('Route53 Error'));
            mockRDSSend.mockRejectedValue(new Error('RDS Error'));
            mockElastiCacheSend.mockRejectedValue(new Error('Cache Error'));
            mockS3Send.mockRejectedValue(new Error('S3 Error'));
            mockSecretsSend.mockRejectedValue(new Error('Secrets Error'));
            mockCloudWatchSend.mockRejectedValue(new Error('CloudWatch Error'));
            const summary = yield healthChecker.getHealthSummary();
            (0, globals_1.expect)(summary.overallStatus).toBe('unhealthy');
            (0, globals_1.expect)(summary.metrics.successRate).toBe(0);
        }));
    });
    (0, globals_1.describe)('response time tracking', () => {
        (0, globals_1.it)('should track response times for all services', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const startTime = Date.now();
            // Mock responses with delays
            mockRoute53Send.mockImplementation(() => new Promise(resolve => setTimeout(() => resolve({ StatusList: [{ Status: 'Success' }] }), 50)));
            mockRDSSend.mockImplementation(() => new Promise(resolve => setTimeout(() => resolve({ DBClusters: [{ Status: 'available' }] }), 100)));
            mockElastiCacheSend.mockImplementation(() => new Promise(resolve => setTimeout(() => resolve({ ReplicationGroups: [{ Status: 'available' }] }), 75)));
            mockS3Send.mockImplementation(() => new Promise(resolve => setTimeout(() => resolve({}), 25)));
            mockSecretsSend.mockImplementation(() => new Promise(resolve => setTimeout(() => resolve({ SecretString: '{}' }), 30)));
            mockCloudWatchSend.mockResolvedValue({ Datapoints: [] });
            const result = yield healthChecker.checkAllServices();
            const endTime = Date.now();
            (0, globals_1.expect)(endTime - startTime).toBeGreaterThan(100); // Should take at least 100ms
            (0, globals_1.expect)(result.services.every(s => s.responseTime !== undefined)).toBe(true);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
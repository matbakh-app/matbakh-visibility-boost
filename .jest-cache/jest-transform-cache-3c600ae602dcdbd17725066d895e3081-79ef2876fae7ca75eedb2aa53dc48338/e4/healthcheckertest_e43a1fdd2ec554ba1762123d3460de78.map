{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/multi-region/__tests__/health-checker.test.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/multi-region/__tests__/health-checker.test.ts"],"sourcesContent":["import { beforeEach, describe, expect, it, jest } from '@jest/globals';\nimport { HealthChecker } from '../health-checker';\nimport { MultiRegionConfig } from '../multi-region-orchestrator';\n\n// Mock AWS SDK clients directly\nconst mockRoute53Send = jest.fn();\nconst mockRDSSend = jest.fn();\nconst mockElastiCacheSend = jest.fn();\nconst mockS3Send = jest.fn();\nconst mockSecretsSend = jest.fn();\nconst mockCloudWatchSend = jest.fn();\n\n// Mock AWS SDK modules\njest.mock('@aws-sdk/client-route-53', () => ({\n    Route53Client: jest.fn(() => ({ send: mockRoute53Send })),\n    GetHealthCheckCommand: jest.fn(),\n    GetHealthCheckStatusCommand: jest.fn(),\n}));\n\njest.mock('@aws-sdk/client-rds', () => ({\n    RDSClient: jest.fn(() => ({ send: mockRDSSend })),\n    DescribeDBClustersCommand: jest.fn(),\n}));\n\njest.mock('@aws-sdk/client-elasticache', () => ({\n    ElastiCacheClient: jest.fn(() => ({ send: mockElastiCacheSend })),\n    DescribeReplicationGroupsCommand: jest.fn(),\n}));\n\njest.mock('@aws-sdk/client-s3', () => ({\n    S3Client: jest.fn(() => ({ send: mockS3Send })),\n    HeadObjectCommand: jest.fn(),\n    GetBucketReplicationCommand: jest.fn(),\n}));\n\njest.mock('@aws-sdk/client-secrets-manager', () => ({\n    SecretsManagerClient: jest.fn(() => ({ send: mockSecretsSend })),\n    GetSecretValueCommand: jest.fn(),\n}));\n\njest.mock('@aws-sdk/client-cloudwatch', () => ({\n    CloudWatchClient: jest.fn(() => ({ send: mockCloudWatchSend })),\n    GetMetricDataCommand: jest.fn(),\n    GetMetricStatisticsCommand: jest.fn(),\n}));\n\nconst mockConfig: MultiRegionConfig = {\n    primaryRegion: 'eu-central-1',\n    secondaryRegion: 'eu-west-1',\n    domainName: 'test.matbakh.app',\n    hostedZoneId: 'Z123456789',\n    distributionId: 'E123456789',\n    globalClusterIdentifier: 'test-global-cluster',\n    primaryClusterIdentifier: 'test-primary-cluster',\n    secondaryClusterIdentifier: 'test-secondary-cluster',\n    primaryHealthCheckId: 'hc-primary-123',\n    secondaryHealthCheckId: 'hc-secondary-123',\n};\n\ndescribe('HealthChecker', () => {\n    let healthChecker: HealthChecker;\n\n    beforeEach(() => {\n        // Reset all mocks\n        jest.clearAllMocks();\n        mockRoute53Send.mockReset();\n        mockRDSSend.mockReset();\n        mockElastiCacheSend.mockReset();\n        mockS3Send.mockReset();\n        mockSecretsSend.mockReset();\n        mockCloudWatchSend.mockReset();\n\n        // Create HealthChecker with injected mock clients\n        const mockClients = {\n            route53: { send: mockRoute53Send } as any,\n            primaryRds: { send: mockRDSSend } as any,\n            secondaryRds: { send: mockRDSSend } as any,\n            primaryCache: { send: mockElastiCacheSend } as any,\n            secondaryCache: { send: mockElastiCacheSend } as any,\n            primaryS3: { send: mockS3Send } as any,\n            secondaryS3: { send: mockS3Send } as any,\n            primarySecrets: { send: mockSecretsSend } as any,\n            secondarySecrets: { send: mockSecretsSend } as any,\n            cloudwatch: { send: mockCloudWatchSend } as any,\n        };\n\n        healthChecker = new HealthChecker(mockConfig, mockClients);\n    });\n\n    describe('checkAllServices', () => {\n        it('should return healthy status when all services are healthy', async () => {\n            // Mock healthy responses for all services\n            mockRoute53Send\n                .mockResolvedValueOnce({\n                    HealthCheck: {\n                        HealthCheckConfig: {\n                            FullyQualifiedDomainName: 'api-eu-central-1.test.matbakh.app',\n                        },\n                    },\n                })\n                .mockResolvedValueOnce({\n                    StatusList: [{ Status: 'Success', CheckedTime: new Date(), Latency: 100 }],\n                })\n                .mockResolvedValueOnce({\n                    HealthCheck: {\n                        HealthCheckConfig: {\n                            FullyQualifiedDomainName: 'api-eu-west-1.test.matbakh.app',\n                        },\n                    },\n                })\n                .mockResolvedValueOnce({\n                    StatusList: [{ Status: 'Success', CheckedTime: new Date(), Latency: 120 }],\n                });\n\n            mockRDSSend\n                .mockResolvedValueOnce({\n                    DBClusters: [\n                        {\n                            DBClusterIdentifier: 'test-primary-cluster',\n                            Status: 'available',\n                            Engine: 'aurora-postgresql',\n                            EngineVersion: '15.4',\n                            AvailabilityZones: ['eu-central-1a', 'eu-central-1b'],\n                            BackupRetentionPeriod: 7,\n                            MultiAZ: true,\n                        },\n                    ],\n                })\n                .mockResolvedValueOnce({\n                    DBClusters: [\n                        {\n                            DBClusterIdentifier: 'test-secondary-cluster',\n                            Status: 'available',\n                            Engine: 'aurora-postgresql',\n                            EngineVersion: '15.4',\n                            AvailabilityZones: ['eu-west-1a', 'eu-west-1b'],\n                            BackupRetentionPeriod: 7,\n                            MultiAZ: true,\n                        },\n                    ],\n                });\n\n            mockElastiCacheSend\n                .mockResolvedValueOnce({\n                    ReplicationGroups: [\n                        {\n                            ReplicationGroupId: 'test-cache-group-primary',\n                            Status: 'available',\n                            NumCacheClusters: 2,\n                            MultiAZ: 'enabled',\n                            CacheNodeType: 'cache.r6g.large',\n                        },\n                    ],\n                })\n                .mockResolvedValueOnce({\n                    ReplicationGroups: [\n                        {\n                            ReplicationGroupId: 'test-cache-group-secondary',\n                            Status: 'available',\n                            NumCacheClusters: 2,\n                            MultiAZ: 'enabled',\n                            CacheNodeType: 'cache.r6g.large',\n                        },\n                    ],\n                });\n\n            mockS3Send\n                .mockResolvedValueOnce({\n                    ContentLength: 1024,\n                    LastModified: new Date(),\n                })\n                .mockResolvedValueOnce({\n                    ReplicationConfiguration: {\n                        Role: 'arn:aws:iam::123456789012:role/replication-role',\n                        Rules: [\n                            {\n                                ID: 'ReplicateAll',\n                                Status: 'Enabled',\n                            },\n                        ],\n                    },\n                })\n                .mockResolvedValueOnce({\n                    ContentLength: 1024,\n                    LastModified: new Date(),\n                })\n                .mockResolvedValueOnce({\n                    ReplicationConfiguration: {\n                        Role: 'arn:aws:iam::123456789012:role/replication-role',\n                        Rules: [\n                            {\n                                ID: 'ReplicateAll',\n                                Status: 'Enabled',\n                            },\n                        ],\n                    },\n                });\n\n            mockSecretsSend\n                .mockResolvedValueOnce({\n                    SecretString: '{\\\"username\\\":\\\"test\\\",\\\"password\\\":\\\"secret\\\"}',\n                })\n                .mockResolvedValueOnce({\n                    SecretString: '{\\\"username\\\":\\\"test\\\",\\\"password\\\":\\\"secret\\\"}',\n                });\n\n            mockCloudWatchSend.mockResolvedValue({\n                Datapoints: [{ Average: 30000, Timestamp: new Date() }],\n            });\n\n            const result = await healthChecker.checkAllServices();\n\n            expect(result.overall).toBe('healthy');\n            expect(result.regions.primary.status).toBe('healthy');\n            expect(result.regions.secondary.status).toBe('healthy');\n            expect(result.services).toHaveLength(10); // 5 services × 2 regions\n            expect(result.services.every(s => s.status === 'healthy')).toBe(true);\n        });\n\n        it('should return degraded status when some services are degraded', async () => {\n            // Mock mixed health responses\n            mockRoute53Send\n                .mockResolvedValueOnce({\n                    HealthCheck: {},\n                })\n                .mockResolvedValueOnce({\n                    StatusList: [{ Status: 'Success' }],\n                })\n                .mockResolvedValueOnce({\n                    HealthCheck: {},\n                })\n                .mockResolvedValueOnce({\n                    StatusList: [{ Status: 'Success' }],\n                });\n\n            // Primary DB healthy, secondary degraded\n            mockRDSSend\n                .mockResolvedValueOnce({\n                    DBClusters: [{ Status: 'available' }],\n                })\n                .mockResolvedValueOnce({\n                    DBClusters: [{ Status: 'backing-up' }], // Degraded state\n                });\n\n            mockElastiCacheSend.mockResolvedValue({\n                ReplicationGroups: [{ Status: 'available' }],\n            });\n\n            mockS3Send.mockResolvedValue({});\n            mockSecretsSend.mockResolvedValue({ SecretString: '{}' });\n            mockCloudWatchSend.mockResolvedValue({ Datapoints: [] });\n\n            const result = await healthChecker.checkAllServices();\n\n            expect(result.overall).toBe('degraded');\n            expect(result.regions.primary.status).toBe('healthy');\n            expect(result.regions.secondary.status).toBe('degraded');\n        });\n\n        it('should detect unhealthy services', async () => {\n            // Mock failing health checks\n            mockRoute53Send\n                .mockResolvedValueOnce({\n                    HealthCheck: {},\n                })\n                .mockResolvedValueOnce({\n                    StatusList: [{ Status: 'Failure' }],\n                })\n                .mockResolvedValueOnce({\n                    HealthCheck: {},\n                })\n                .mockResolvedValueOnce({\n                    StatusList: [{ Status: 'Failure' }],\n                });\n\n            mockRDSSend.mockRejectedValue(new Error('Database unavailable'));\n            mockElastiCacheSend.mockResolvedValue({ ReplicationGroups: [] });\n            mockS3Send.mockRejectedValue(new Error('Access denied'));\n            mockSecretsSend.mockRejectedValue(new Error('Secret not found'));\n            mockCloudWatchSend.mockResolvedValue({ Datapoints: [] });\n\n            const result = await healthChecker.checkAllServices();\n\n            expect(result.overall).toBe('unhealthy');\n            expect(result.services.some(s => s.status === 'unhealthy')).toBe(true);\n        });\n\n        it('should handle AWS service errors gracefully', async () => {\n            // Mock AWS SDK errors\n            mockRoute53Send.mockRejectedValue(new Error('AWS SDK Error'));\n            mockRDSSend.mockRejectedValue(new Error('RDS Error'));\n            mockElastiCacheSend.mockRejectedValue(new Error('Cache Error'));\n            mockS3Send.mockRejectedValue(new Error('S3 Error'));\n            mockSecretsSend.mockRejectedValue(new Error('Secrets Error'));\n            mockCloudWatchSend.mockRejectedValue(new Error('CloudWatch Error'));\n\n            const result = await healthChecker.checkAllServices();\n\n            expect(result.overall).toBe('unhealthy');\n            expect(result.services.every(s => s.error)).toBe(true);\n            expect(result.services.every(s => s.status === 'unhealthy')).toBe(true);\n        });\n    });\n\n    describe('API health checks', () => {\n        it('should check API health via Route 53 health checks', async () => {\n            mockRoute53Send\n                .mockResolvedValueOnce({\n                    HealthCheck: {\n                        HealthCheckConfig: {\n                            FullyQualifiedDomainName: 'api-eu-central-1.test.matbakh.app',\n                        },\n                    },\n                })\n                .mockResolvedValueOnce({\n                    StatusList: [{ Status: 'Success', Latency: 150 }],\n                });\n\n            const result = await healthChecker.checkAllServices();\n            const apiService = result.services.find(s => s.service === 'api' && s.region === 'eu-central-1');\n\n            expect(apiService).toBeDefined();\n            expect(apiService!.status).toBe('healthy');\n            expect(apiService!.details.fqdn).toBe('api-eu-central-1.test.matbakh.app');\n            expect(apiService!.details.latency).toBe(150);\n        });\n\n        it('should handle API health check failures', async () => {\n            mockRoute53Send\n                .mockResolvedValueOnce({\n                    HealthCheck: {},\n                })\n                .mockResolvedValueOnce({\n                    StatusList: [{ Status: 'Failure' }],\n                });\n\n            const result = await healthChecker.checkAllServices();\n            const apiService = result.services.find(s => s.service === 'api' && s.region === 'eu-central-1');\n\n            expect(apiService).toBeDefined();\n            expect(apiService!.status).toBe('unhealthy');\n        });\n    });\n\n    describe('database health checks', () => {\n        it('should check database cluster health', async () => {\n            // Mock all services to avoid interference\n            mockRoute53Send.mockResolvedValue({ StatusList: [{ Status: 'Success' }] });\n            mockElastiCacheSend.mockResolvedValue({ ReplicationGroups: [{ Status: 'available' }] });\n            mockS3Send.mockResolvedValue({});\n            mockSecretsSend.mockResolvedValue({ SecretString: '{}' });\n\n            mockRDSSend.mockResolvedValue({\n                DBClusters: [\n                    {\n                        Status: 'available',\n                        Engine: 'aurora-postgresql',\n                        MultiAZ: true,\n                    },\n                ],\n            });\n\n            // Mock CloudWatch to return 30 seconds (will be converted to 30000 ms)\n            mockCloudWatchSend.mockResolvedValue({\n                MetricDataResults: [\n                    {\n                        Values: [30], // 30 seconds\n                    },\n                ],\n            });\n\n            const result = await healthChecker.checkAllServices();\n            const dbService = result.services.find(s => s.service === 'database' && s.region === 'eu-central-1');\n\n            expect(dbService).toBeDefined();\n            expect(dbService!.status).toBe('healthy');\n            expect(dbService!.details.engine).toBe('aurora-postgresql');\n            expect(dbService!.details.multiAZ).toBe(true);\n            expect(dbService!.details.replicationLag).toBe(30000);\n        });\n\n        it('should detect high replication lag', async () => {\n            // Mock all services to avoid interference\n            mockRoute53Send.mockResolvedValue({ StatusList: [{ Status: 'Success' }] });\n            mockElastiCacheSend.mockResolvedValue({ ReplicationGroups: [{ Status: 'available' }] });\n            mockS3Send.mockResolvedValue({});\n            mockSecretsSend.mockResolvedValue({ SecretString: '{}' });\n\n            mockRDSSend.mockResolvedValue({\n                DBClusters: [{ Status: 'available' }],\n            });\n\n            // Mock CloudWatch to return 120 seconds (will be converted to 120000 ms)\n            mockCloudWatchSend.mockResolvedValue({\n                MetricDataResults: [\n                    {\n                        Values: [120], // 120 seconds\n                    },\n                ],\n            });\n\n            const result = await healthChecker.checkAllServices();\n            const dbService = result.services.find(s => s.service === 'database');\n\n            expect(dbService).toBeDefined();\n            expect(dbService!.details.replicationLag).toBe(120000);\n        });\n\n        it('should handle missing database cluster', async () => {\n            mockRDSSend.mockRejectedValue(new Error('Cluster not found'));\n\n            const result = await healthChecker.checkAllServices();\n            const dbService = result.services.find(s => s.service === 'database');\n\n            expect(dbService).toBeDefined();\n            expect(dbService!.status).toBe('unhealthy');\n            expect(dbService!.error).toContain('Cluster not found');\n        });\n    });\n\n    describe('cache health checks', () => {\n        it('should check ElastiCache replication group health', async () => {\n            mockElastiCacheSend.mockResolvedValue({\n                ReplicationGroups: [\n                    {\n                        Status: 'available',\n                        NumCacheClusters: 2,\n                        MultiAZ: 'enabled',\n                    },\n                ],\n            });\n\n            const result = await healthChecker.checkAllServices();\n            const cacheService = result.services.find(s => s.service === 'cache');\n\n            expect(cacheService).toBeDefined();\n            expect(cacheService!.status).toBe('healthy');\n            expect(cacheService!.details.numCacheClusters).toBe(2);\n            expect(cacheService!.details.multiAZ).toBe('enabled');\n        });\n\n        it('should handle no cache configuration gracefully', async () => {\n            mockElastiCacheSend.mockResolvedValue({\n                ReplicationGroups: [],\n            });\n\n            const result = await healthChecker.checkAllServices();\n            const cacheService = result.services.find(s => s.service === 'cache');\n\n            expect(cacheService).toBeDefined();\n            expect(cacheService!.status).toBe('healthy');\n            expect(cacheService!.details.message).toBe('No replication groups configured');\n        });\n\n        it('should detect cache in creating state', async () => {\n            mockElastiCacheSend.mockResolvedValue({\n                ReplicationGroups: [{ Status: 'creating' }],\n            });\n\n            const result = await healthChecker.checkAllServices();\n            const cacheService = result.services.find(s => s.service === 'cache');\n\n            expect(cacheService).toBeDefined();\n            expect(cacheService!.status).toBe('degraded');\n        });\n    });\n\n    describe('storage health checks', () => {\n        it('should check S3 bucket accessibility', async () => {\n            mockS3Send\n                .mockResolvedValueOnce({})\n                .mockResolvedValueOnce({\n                    ReplicationConfiguration: {\n                        Rules: [{ Status: 'Enabled' }, { Status: 'Enabled' }],\n                    },\n                });\n\n            const result = await healthChecker.checkAllServices();\n            const storageService = result.services.find(s => s.service === 'storage');\n\n            expect(storageService).toBeDefined();\n            expect(storageService!.status).toBe('healthy');\n            expect(storageService!.details.replicationRules).toBe(2);\n        });\n\n        it('should handle missing index.html gracefully', async () => {\n            const notFoundError = new Error('Not Found');\n            notFoundError.name = 'NotFound';\n            mockS3Send.mockRejectedValueOnce(notFoundError).mockResolvedValueOnce({\n                ReplicationConfiguration: { Rules: [] },\n            });\n\n            const result = await healthChecker.checkAllServices();\n            const storageService = result.services.find(s => s.service === 'storage');\n\n            expect(storageService).toBeDefined();\n            expect(storageService!.status).toBe('healthy');\n        });\n\n        it('should detect S3 access denied', async () => {\n            const accessDeniedError = new Error('Access Denied');\n            accessDeniedError.name = 'AccessDenied';\n            mockS3Send.mockRejectedValue(accessDeniedError);\n\n            const result = await healthChecker.checkAllServices();\n            const storageService = result.services.find(s => s.service === 'storage');\n\n            expect(storageService).toBeDefined();\n            expect(storageService!.status).toBe('unhealthy');\n            expect(storageService!.error).toContain('Access Denied');\n        });\n    });\n\n    describe('secrets health checks', () => {\n        it('should check secrets manager accessibility', async () => {\n            mockSecretsSend.mockResolvedValue({\n                SecretString: '{}',\n            });\n\n            const result = await healthChecker.checkAllServices();\n            const secretsService = result.services.find(s => s.service === 'secrets');\n\n            expect(secretsService).toBeDefined();\n            expect(secretsService!.status).toBe('healthy');\n            expect(secretsService!.details.secretsAccessible).toBe(true);\n        });\n\n        it('should handle secret not found', async () => {\n            const secretNotFoundError = new Error('Could not find the specified secret');\n            mockSecretsSend.mockRejectedValue(secretNotFoundError);\n\n            const result = await healthChecker.checkAllServices();\n            const secretsService = result.services.find(s => s.service === 'secrets');\n\n            expect(secretsService).toBeDefined();\n            expect(secretsService!.status).toBe('unhealthy');\n            expect(secretsService!.error).toContain('find the specified secret');\n        });\n    });\n\n    describe('getHealthSummary', () => {\n        it('should provide comprehensive health summary', async () => {\n            // Mock successful health checks with realistic response times\n            mockRoute53Send\n                .mockResolvedValueOnce({\n                    HealthCheck: {\n                        HealthCheckConfig: {\n                            FullyQualifiedDomainName: 'api-eu-central-1.test.matbakh.app',\n                        },\n                    },\n                })\n                .mockResolvedValueOnce({\n                    StatusList: [{ Status: 'Success', CheckedTime: new Date(), Latency: 100 }],\n                })\n                .mockResolvedValueOnce({\n                    HealthCheck: {\n                        HealthCheckConfig: {\n                            FullyQualifiedDomainName: 'api-eu-west-1.test.matbakh.app',\n                        },\n                    },\n                })\n                .mockResolvedValueOnce({\n                    StatusList: [{ Status: 'Success', CheckedTime: new Date(), Latency: 120 }],\n                });\n\n            mockRDSSend.mockResolvedValue({\n                DBClusters: [{ Status: 'available', Engine: 'aurora-postgresql', MultiAZ: true }],\n            });\n\n            mockElastiCacheSend.mockResolvedValue({\n                ReplicationGroups: [{ Status: 'available' }],\n            });\n\n            mockS3Send.mockResolvedValue({});\n            mockSecretsSend.mockResolvedValue({ SecretString: '{}' });\n\n            // Mock replication lag - return 45 seconds (will be converted to 45000 ms)\n            mockCloudWatchSend.mockResolvedValue({\n                MetricDataResults: [\n                    {\n                        Values: [45], // 45 seconds\n                    },\n                ],\n            });\n\n            const summary = await healthChecker.getHealthSummary();\n\n            expect(summary.timestamp).toBeInstanceOf(Date);\n            expect(summary.overallStatus).toBe('healthy');\n            expect(summary.regionStatus).toHaveProperty('eu-central-1');\n            expect(summary.regionStatus).toHaveProperty('eu-west-1');\n            expect(summary.serviceStatus).toBeDefined();\n            expect(summary.metrics.averageResponseTime).toBeGreaterThanOrEqual(0);\n            expect(summary.metrics.successRate).toBeGreaterThanOrEqual(0);\n            expect(summary.metrics.replicationLag).toBe(45000);\n        });\n\n        it('should calculate correct success rate with mixed health', async () => {\n            // Mock 80% success rate (8 out of 10 services healthy)\n            let callCount = 0;\n            mockRoute53Send.mockImplementation(() => {\n                callCount++;\n                if (callCount <= 8) {\n                    return Promise.resolve({ StatusList: [{ Status: 'Success' }] });\n                }\n                return Promise.resolve({ StatusList: [{ Status: 'Failure' }] });\n            });\n\n            mockRDSSend.mockResolvedValue({\n                DBClusters: [{ Status: 'available' }],\n            });\n\n            mockElastiCacheSend.mockResolvedValue({\n                ReplicationGroups: [{ Status: 'available' }],\n            });\n\n            mockS3Send.mockResolvedValue({});\n            mockSecretsSend.mockResolvedValue({ SecretString: '{}' });\n            mockCloudWatchSend.mockResolvedValue({ Datapoints: [] });\n\n            const summary = await healthChecker.getHealthSummary();\n\n            expect(summary.metrics.successRate).toBeGreaterThanOrEqual(70);\n            expect(summary.metrics.successRate).toBeLessThanOrEqual(100);\n        });\n\n        it('should handle errors in health summary gracefully', async () => {\n            // Mock all services failing\n            mockRoute53Send.mockRejectedValue(new Error('Route53 Error'));\n            mockRDSSend.mockRejectedValue(new Error('RDS Error'));\n            mockElastiCacheSend.mockRejectedValue(new Error('Cache Error'));\n            mockS3Send.mockRejectedValue(new Error('S3 Error'));\n            mockSecretsSend.mockRejectedValue(new Error('Secrets Error'));\n            mockCloudWatchSend.mockRejectedValue(new Error('CloudWatch Error'));\n\n            const summary = await healthChecker.getHealthSummary();\n\n            expect(summary.overallStatus).toBe('unhealthy');\n            expect(summary.metrics.successRate).toBe(0);\n        });\n    });\n\n    describe('response time tracking', () => {\n        it('should track response times for all services', async () => {\n            const startTime = Date.now();\n\n            // Mock responses with delays\n            mockRoute53Send.mockImplementation(() =>\n                new Promise(resolve => setTimeout(() => resolve({ StatusList: [{ Status: 'Success' }] }), 50))\n            );\n            mockRDSSend.mockImplementation(() =>\n                new Promise(resolve => setTimeout(() => resolve({ DBClusters: [{ Status: 'available' }] }), 100))\n            );\n            mockElastiCacheSend.mockImplementation(() =>\n                new Promise(resolve => setTimeout(() => resolve({ ReplicationGroups: [{ Status: 'available' }] }), 75))\n            );\n            mockS3Send.mockImplementation(() =>\n                new Promise(resolve => setTimeout(() => resolve({}), 25))\n            );\n            mockSecretsSend.mockImplementation(() =>\n                new Promise(resolve => setTimeout(() => resolve({ SecretString: '{}' }), 30))\n            );\n            mockCloudWatchSend.mockResolvedValue({ Datapoints: [] });\n\n            const result = await healthChecker.checkAllServices();\n            const endTime = Date.now();\n\n            expect(endTime - startTime).toBeGreaterThan(100); // Should take at least 100ms\n            expect(result.services.every(s => s.responseTime !== undefined)).toBe(true);\n        });\n    });\n});"],"version":3}
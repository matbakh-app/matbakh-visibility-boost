{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/ssrf-protection-validator.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/ssrf-protection-validator.ts"],"sourcesContent":["/**\n * SSRF Protection Validator for Direct Bedrock Client\n *\n * This module provides comprehensive Server-Side Request Forgery (SSRF) protection\n * for the Direct Bedrock Client, ensuring that all external requests are validated\n * against security policies and blocked if they pose SSRF risks.\n *\n * Security Features:\n * - Protocol validation (HTTPS only)\n * - Metadata endpoint blocking (169.254.169.254, metadata.google.internal)\n * - Private IP range blocking (RFC1918: 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16)\n * - Localhost blocking (127.0.0.0/8, ::1)\n * - IPv6 private range blocking (fc00::/7, fd00::/8)\n * - Dangerous protocol detection (file://, gopher://, ftp://)\n * - Domain whitelist enforcement\n * - URL redirection protection\n * - DNS rebinding protection\n */\n\nimport { URL } from \"url\";\nimport { AuditTrailSystem } from \"./audit-trail-system\";\n\n// SSRF Validation Result\nexport interface SSRFValidationResult {\n  allowed: boolean;\n  reason?: string;\n  blockedCategory?:\n    | \"protocol\"\n    | \"metadata\"\n    | \"private_ip\"\n    | \"localhost\"\n    | \"ipv6_private\"\n    | \"dangerous_protocol\"\n    | \"domain_not_allowed\"\n    | \"invalid_url\"\n    | \"dns_rebinding\"\n    | \"url_redirection\";\n  url: string;\n  hostname: string;\n  protocol: string;\n  timestamp: Date;\n}\n\n// SSRF Protection Configuration\nexport interface SSRFProtectionConfig {\n  allowedDomains: string[];\n  allowedProtocols: string[];\n  blockMetadataEndpoints: boolean;\n  blockPrivateIPs: boolean;\n  blockLocalhost: boolean;\n  blockIPv6Private: boolean;\n  blockDangerousProtocols: boolean;\n  enableDNSRebindingProtection: boolean;\n  enableRedirectionProtection: boolean;\n  maxRedirects: number;\n  auditTrail?: AuditTrailSystem;\n}\n\n// Default allowed domains for Bedrock operations\nconst DEFAULT_ALLOWED_DOMAINS = [\n  // AWS Bedrock endpoints\n  \"bedrock-runtime.eu-central-1.amazonaws.com\",\n  \"bedrock-runtime.us-east-1.amazonaws.com\",\n  \"bedrock-runtime.us-west-2.amazonaws.com\",\n  \"bedrock.eu-central-1.amazonaws.com\",\n  \"bedrock.us-east-1.amazonaws.com\",\n  \"bedrock.us-west-2.amazonaws.com\",\n\n  // Google APIs (for integration)\n  \"google.com\",\n  \"www.google.com\",\n  \"googleapis.com\",\n  \"trends.google.com\",\n  \"maps.googleapis.com\",\n  \"places.googleapis.com\",\n\n  // Social Media APIs (for integration)\n  \"instagram.com\",\n  \"www.instagram.com\",\n  \"facebook.com\",\n  \"www.facebook.com\",\n  \"graph.facebook.com\",\n\n  // Review Platforms (for integration)\n  \"tripadvisor.com\",\n  \"www.tripadvisor.com\",\n  \"yelp.com\",\n  \"www.yelp.com\",\n];\n\n/**\n * SSRF Protection Validator\n */\nexport class SSRFProtectionValidator {\n  private config: SSRFProtectionConfig;\n  private auditTrail?: AuditTrailSystem;\n\n  constructor(config?: Partial<SSRFProtectionConfig>) {\n    this.config = {\n      allowedDomains: DEFAULT_ALLOWED_DOMAINS,\n      allowedProtocols: [\"https:\"],\n      blockMetadataEndpoints: true,\n      blockPrivateIPs: true,\n      blockLocalhost: true,\n      blockIPv6Private: true,\n      blockDangerousProtocols: true,\n      enableDNSRebindingProtection: true,\n      enableRedirectionProtection: true,\n      maxRedirects: 3,\n      ...config,\n    };\n\n    this.auditTrail = this.config.auditTrail;\n  }\n\n  /**\n   * Validate URL against SSRF protection rules\n   */\n  async validateUrl(\n    url: string,\n    requestId?: string\n  ): Promise<SSRFValidationResult> {\n    const timestamp = new Date();\n\n    try {\n      // Parse URL\n      const parsedUrl = new URL(url);\n      const hostname = parsedUrl.hostname.toLowerCase();\n      const protocol = parsedUrl.protocol;\n\n      // 1. Protocol Validation\n      if (!this.config.allowedProtocols.includes(protocol)) {\n        const result: SSRFValidationResult = {\n          allowed: false,\n          reason: `Protocol ${protocol} is not allowed. Only ${this.config.allowedProtocols.join(\n            \", \"\n          )} are permitted.`,\n          blockedCategory: \"protocol\",\n          url,\n          hostname,\n          protocol,\n          timestamp,\n        };\n\n        await this.logSSRFViolation(result, requestId);\n        return result;\n      }\n\n      // 2. Metadata Endpoint Protection\n      if (this.config.blockMetadataEndpoints) {\n        const metadataCheck = this.checkMetadataEndpoint(hostname);\n        if (!metadataCheck.allowed) {\n          const result: SSRFValidationResult = {\n            allowed: false,\n            reason: metadataCheck.reason,\n            blockedCategory: \"metadata\",\n            url,\n            hostname,\n            protocol,\n            timestamp,\n          };\n\n          await this.logSSRFViolation(result, requestId);\n          return result;\n        }\n      }\n\n      // 3. Localhost Protection (check before private IP to catch 0.0.0.0 and 127.0.0.0/8)\n      if (this.config.blockLocalhost) {\n        const localhostCheck = this.checkLocalhost(hostname);\n        if (!localhostCheck.allowed) {\n          const result: SSRFValidationResult = {\n            allowed: false,\n            reason: localhostCheck.reason,\n            blockedCategory: \"localhost\",\n            url,\n            hostname,\n            protocol,\n            timestamp,\n          };\n\n          await this.logSSRFViolation(result, requestId);\n          return result;\n        }\n      }\n\n      // 4. Private IP Range Protection\n      if (this.config.blockPrivateIPs) {\n        const privateIPCheck = this.checkPrivateIPRange(hostname);\n        if (!privateIPCheck.allowed) {\n          const result: SSRFValidationResult = {\n            allowed: false,\n            reason: privateIPCheck.reason,\n            blockedCategory: \"private_ip\",\n            url,\n            hostname,\n            protocol,\n            timestamp,\n          };\n\n          await this.logSSRFViolation(result, requestId);\n          return result;\n        }\n      }\n\n      // 5. IPv6 Private Range Protection\n      if (this.config.blockIPv6Private) {\n        const ipv6Check = this.checkIPv6Private(hostname);\n        if (!ipv6Check.allowed) {\n          const result: SSRFValidationResult = {\n            allowed: false,\n            reason: ipv6Check.reason,\n            blockedCategory: \"ipv6_private\",\n            url,\n            hostname,\n            protocol,\n            timestamp,\n          };\n\n          await this.logSSRFViolation(result, requestId);\n          return result;\n        }\n      }\n\n      // 6. Dangerous Protocol Detection\n      if (this.config.blockDangerousProtocols) {\n        const dangerousProtocolCheck = this.checkDangerousProtocols(\n          hostname,\n          url\n        );\n        if (!dangerousProtocolCheck.allowed) {\n          const result: SSRFValidationResult = {\n            allowed: false,\n            reason: dangerousProtocolCheck.reason,\n            blockedCategory: \"dangerous_protocol\",\n            url,\n            hostname,\n            protocol,\n            timestamp,\n          };\n\n          await this.logSSRFViolation(result, requestId);\n          return result;\n        }\n      }\n\n      // 7. DNS Rebinding Protection (check before domain whitelist)\n      if (this.config.enableDNSRebindingProtection) {\n        const dnsRebindingCheck = await this.checkDNSRebinding(hostname);\n        if (!dnsRebindingCheck.allowed) {\n          const result: SSRFValidationResult = {\n            allowed: false,\n            reason: dnsRebindingCheck.reason,\n            blockedCategory: \"dns_rebinding\",\n            url,\n            hostname,\n            protocol,\n            timestamp,\n          };\n\n          await this.logSSRFViolation(result, requestId);\n          return result;\n        }\n      }\n\n      // 8. Domain Whitelist Enforcement (last check)\n      const domainCheck = this.checkDomainWhitelist(hostname);\n      if (!domainCheck.allowed) {\n        const result: SSRFValidationResult = {\n          allowed: false,\n          reason: domainCheck.reason,\n          blockedCategory: \"domain_not_allowed\",\n          url,\n          hostname,\n          protocol,\n          timestamp,\n        };\n\n        await this.logSSRFViolation(result, requestId);\n        return result;\n      }\n\n      // All checks passed\n      const result: SSRFValidationResult = {\n        allowed: true,\n        url,\n        hostname,\n        protocol,\n        timestamp,\n      };\n\n      await this.logSSRFValidation(result, requestId);\n      return result;\n    } catch (error) {\n      const result: SSRFValidationResult = {\n        allowed: false,\n        reason: `Invalid URL format: ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`,\n        blockedCategory: \"invalid_url\",\n        url,\n        hostname: \"\",\n        protocol: \"\",\n        timestamp,\n      };\n\n      await this.logSSRFViolation(result, requestId);\n      return result;\n    }\n  }\n\n  /**\n   * Check for metadata endpoints\n   */\n  private checkMetadataEndpoint(hostname: string): {\n    allowed: boolean;\n    reason?: string;\n  } {\n    const metadataEndpoints = [\n      \"169.254.169.254\", // AWS/Azure/GCP metadata\n      \"metadata.google.internal\", // GCP metadata\n      \"metadata\", // Generic metadata\n      \"169.254.169.253\", // AWS Time Sync Service\n    ];\n\n    if (metadataEndpoints.includes(hostname)) {\n      return {\n        allowed: false,\n        reason: `Metadata endpoint ${hostname} is blocked for security reasons`,\n      };\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Check for private IP ranges (RFC1918)\n   */\n  private checkPrivateIPRange(hostname: string): {\n    allowed: boolean;\n    reason?: string;\n  } {\n    const ipv4Regex = /^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/;\n    const ipMatch = hostname.match(ipv4Regex);\n\n    if (ipMatch) {\n      const [, a, b, c, d] = ipMatch.map(Number);\n\n      // Validate IP octets\n      if (a > 255 || b > 255 || c > 255 || d > 255) {\n        return { allowed: false, reason: \"Invalid IP address format\" };\n      }\n\n      // 10.0.0.0/8\n      if (a === 10) {\n        return {\n          allowed: false,\n          reason: \"Private IP range 10.0.0.0/8 is blocked\",\n        };\n      }\n\n      // 172.16.0.0/12\n      if (a === 172 && b >= 16 && b <= 31) {\n        return {\n          allowed: false,\n          reason: \"Private IP range 172.16.0.0/12 is blocked\",\n        };\n      }\n\n      // 192.168.0.0/16\n      if (a === 192 && b === 168) {\n        return {\n          allowed: false,\n          reason: \"Private IP range 192.168.0.0/16 is blocked\",\n        };\n      }\n\n      // 100.64.0.0/10 (Carrier-grade NAT)\n      if (a === 100 && b >= 64 && b <= 127) {\n        return {\n          allowed: false,\n          reason: \"Carrier-grade NAT range 100.64.0.0/10 is blocked\",\n        };\n      }\n\n      // 169.254.0.0/16 (Link-local)\n      if (a === 169 && b === 254) {\n        return {\n          allowed: false,\n          reason: \"Link-local range 169.254.0.0/16 is blocked\",\n        };\n      }\n\n      // 224.0.0.0/4 (Multicast)\n      if (a >= 224 && a <= 239) {\n        return {\n          allowed: false,\n          reason: \"Multicast range 224.0.0.0/4 is blocked\",\n        };\n      }\n\n      // 240.0.0.0/4 (Reserved)\n      if (a >= 240) {\n        return {\n          allowed: false,\n          reason: \"Reserved range 240.0.0.0/4 is blocked\",\n        };\n      }\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Check for localhost\n   */\n  private checkLocalhost(hostname: string): {\n    allowed: boolean;\n    reason?: string;\n  } {\n    const localhostPatterns = [\n      \"localhost\",\n      \"127.0.0.1\",\n      \"0.0.0.0\",\n      \"::1\",\n      \"0:0:0:0:0:0:0:1\",\n    ];\n\n    // Check exact matches\n    if (localhostPatterns.includes(hostname)) {\n      return { allowed: false, reason: `Localhost ${hostname} is blocked` };\n    }\n\n    // Check 127.0.0.0/8 range\n    const ipv4Regex = /^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/;\n    const ipMatch = hostname.match(ipv4Regex);\n    if (ipMatch) {\n      const [, a] = ipMatch.map(Number);\n      if (a === 127) {\n        return {\n          allowed: false,\n          reason: \"Localhost range 127.0.0.0/8 is blocked\",\n        };\n      }\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Check for IPv6 private ranges\n   */\n  private checkIPv6Private(hostname: string): {\n    allowed: boolean;\n    reason?: string;\n  } {\n    // IPv6 localhost\n    if (hostname === \"::1\" || hostname === \"0:0:0:0:0:0:0:1\") {\n      return { allowed: false, reason: \"IPv6 localhost is blocked\" };\n    }\n\n    // IPv6 private ranges (fc00::/7 and fd00::/8)\n    if (hostname.startsWith(\"fc00:\") || hostname.startsWith(\"fd00:\")) {\n      return { allowed: false, reason: \"IPv6 private range is blocked\" };\n    }\n\n    // IPv6 link-local (fe80::/10)\n    if (hostname.startsWith(\"fe80:\")) {\n      return { allowed: false, reason: \"IPv6 link-local range is blocked\" };\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Check for dangerous protocols\n   */\n  private checkDangerousProtocols(\n    hostname: string,\n    url: string\n  ): { allowed: boolean; reason?: string } {\n    const dangerousProtocols = [\n      \"file:\",\n      \"gopher:\",\n      \"ftp:\",\n      \"dict:\",\n      \"ldap:\",\n      \"tftp:\",\n    ];\n\n    // Check hostname for embedded protocols\n    for (const protocol of dangerousProtocols) {\n      if (hostname.includes(protocol) || url.toLowerCase().includes(protocol)) {\n        return {\n          allowed: false,\n          reason: `Dangerous protocol ${protocol} detected and blocked`,\n        };\n      }\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Check domain whitelist\n   */\n  private checkDomainWhitelist(hostname: string): {\n    allowed: boolean;\n    reason?: string;\n  } {\n    const isAllowed = this.config.allowedDomains.some((allowedDomain) => {\n      return (\n        hostname === allowedDomain || hostname.endsWith(\".\" + allowedDomain)\n      );\n    });\n\n    if (!isAllowed) {\n      return {\n        allowed: false,\n        reason: `Domain ${hostname} is not in the allowed list. Allowed domains: ${this.config.allowedDomains\n          .slice(0, 5)\n          .join(\", \")}...`,\n      };\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Check for DNS rebinding attacks\n   */\n  private async checkDNSRebinding(\n    hostname: string\n  ): Promise<{ allowed: boolean; reason?: string }> {\n    // DNS rebinding protection: ensure hostname doesn't resolve to private IPs\n    // This is a simplified check - in production, you'd want to perform actual DNS resolution\n    // and verify the resolved IP addresses\n\n    // For now, we'll do basic pattern matching\n    const suspiciousPatterns = [\n      /\\d+\\.\\d+\\.\\d+\\.\\d+\\.xip\\.io$/,\n      /\\d+\\.\\d+\\.\\d+\\.\\d+\\.nip\\.io$/,\n      /\\d+\\.\\d+\\.\\d+\\.\\d+\\.sslip\\.io$/,\n    ];\n\n    for (const pattern of suspiciousPatterns) {\n      if (pattern.test(hostname)) {\n        return {\n          allowed: false,\n          reason: `Potential DNS rebinding attack detected: ${hostname}`,\n        };\n      }\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Log SSRF violation to audit trail\n   */\n  private async logSSRFViolation(\n    result: SSRFValidationResult,\n    requestId?: string\n  ): Promise<void> {\n    if (!this.auditTrail) return;\n\n    await this.auditTrail.logEvent({\n      eventType: \"ssrf_violation\",\n      requestId: requestId || \"unknown\",\n      provider: \"bedrock\",\n      complianceStatus: \"violation\",\n      metadata: {\n        url: result.url,\n        hostname: result.hostname,\n        protocol: result.protocol,\n        blockedCategory: result.blockedCategory,\n        reason: result.reason,\n        timestamp: result.timestamp.toISOString(),\n      },\n    });\n  }\n\n  /**\n   * Log successful SSRF validation to audit trail\n   */\n  private async logSSRFValidation(\n    result: SSRFValidationResult,\n    requestId?: string\n  ): Promise<void> {\n    if (!this.auditTrail) return;\n\n    await this.auditTrail.logEvent({\n      eventType: \"ssrf_validation\",\n      requestId: requestId || \"unknown\",\n      provider: \"bedrock\",\n      complianceStatus: \"compliant\",\n      metadata: {\n        url: result.url,\n        hostname: result.hostname,\n        protocol: result.protocol,\n        timestamp: result.timestamp.toISOString(),\n      },\n    });\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(config: Partial<SSRFProtectionConfig>): void {\n    this.config = { ...this.config, ...config };\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): SSRFProtectionConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Add allowed domain\n   */\n  addAllowedDomain(domain: string): void {\n    if (!this.config.allowedDomains.includes(domain)) {\n      this.config.allowedDomains.push(domain);\n    }\n  }\n\n  /**\n   * Remove allowed domain\n   */\n  removeAllowedDomain(domain: string): void {\n    this.config.allowedDomains = this.config.allowedDomains.filter(\n      (d) => d !== domain\n    );\n  }\n\n  /**\n   * Get allowed domains\n   */\n  getAllowedDomains(): string[] {\n    return [...this.config.allowedDomains];\n  }\n}\n"],"version":3}
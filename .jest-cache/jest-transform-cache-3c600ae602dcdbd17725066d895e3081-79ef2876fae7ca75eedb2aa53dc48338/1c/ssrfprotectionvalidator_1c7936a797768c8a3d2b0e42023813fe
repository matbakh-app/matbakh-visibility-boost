4f11b56f4e4c05c87c909b97af9cc260
"use strict";
/**
 * SSRF Protection Validator for Direct Bedrock Client
 *
 * This module provides comprehensive Server-Side Request Forgery (SSRF) protection
 * for the Direct Bedrock Client, ensuring that all external requests are validated
 * against security policies and blocked if they pose SSRF risks.
 *
 * Security Features:
 * - Protocol validation (HTTPS only)
 * - Metadata endpoint blocking (169.254.169.254, metadata.google.internal)
 * - Private IP range blocking (RFC1918: 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16)
 * - Localhost blocking (127.0.0.0/8, ::1)
 * - IPv6 private range blocking (fc00::/7, fd00::/8)
 * - Dangerous protocol detection (file://, gopher://, ftp://)
 * - Domain whitelist enforcement
 * - URL redirection protection
 * - DNS rebinding protection
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SSRFProtectionValidator = void 0;
const url_1 = require("url");
// Default allowed domains for Bedrock operations
const DEFAULT_ALLOWED_DOMAINS = [
    // AWS Bedrock endpoints
    "bedrock-runtime.eu-central-1.amazonaws.com",
    "bedrock-runtime.us-east-1.amazonaws.com",
    "bedrock-runtime.us-west-2.amazonaws.com",
    "bedrock.eu-central-1.amazonaws.com",
    "bedrock.us-east-1.amazonaws.com",
    "bedrock.us-west-2.amazonaws.com",
    // Google APIs (for integration)
    "google.com",
    "www.google.com",
    "googleapis.com",
    "trends.google.com",
    "maps.googleapis.com",
    "places.googleapis.com",
    // Social Media APIs (for integration)
    "instagram.com",
    "www.instagram.com",
    "facebook.com",
    "www.facebook.com",
    "graph.facebook.com",
    // Review Platforms (for integration)
    "tripadvisor.com",
    "www.tripadvisor.com",
    "yelp.com",
    "www.yelp.com",
];
/**
 * SSRF Protection Validator
 */
class SSRFProtectionValidator {
    config;
    auditTrail;
    constructor(config) {
        this.config = {
            allowedDomains: DEFAULT_ALLOWED_DOMAINS,
            allowedProtocols: ["https:"],
            blockMetadataEndpoints: true,
            blockPrivateIPs: true,
            blockLocalhost: true,
            blockIPv6Private: true,
            blockDangerousProtocols: true,
            enableDNSRebindingProtection: true,
            enableRedirectionProtection: true,
            maxRedirects: 3,
            ...config,
        };
        this.auditTrail = this.config.auditTrail;
    }
    /**
     * Validate URL against SSRF protection rules
     */
    async validateUrl(url, requestId) {
        const timestamp = new Date();
        try {
            // Parse URL
            const parsedUrl = new url_1.URL(url);
            const hostname = parsedUrl.hostname.toLowerCase();
            const protocol = parsedUrl.protocol;
            // 1. Protocol Validation
            if (!this.config.allowedProtocols.includes(protocol)) {
                const result = {
                    allowed: false,
                    reason: `Protocol ${protocol} is not allowed. Only ${this.config.allowedProtocols.join(", ")} are permitted.`,
                    blockedCategory: "protocol",
                    url,
                    hostname,
                    protocol,
                    timestamp,
                };
                await this.logSSRFViolation(result, requestId);
                return result;
            }
            // 2. Metadata Endpoint Protection
            if (this.config.blockMetadataEndpoints) {
                const metadataCheck = this.checkMetadataEndpoint(hostname);
                if (!metadataCheck.allowed) {
                    const result = {
                        allowed: false,
                        reason: metadataCheck.reason,
                        blockedCategory: "metadata",
                        url,
                        hostname,
                        protocol,
                        timestamp,
                    };
                    await this.logSSRFViolation(result, requestId);
                    return result;
                }
            }
            // 3. Localhost Protection (check before private IP to catch 0.0.0.0 and 127.0.0.0/8)
            if (this.config.blockLocalhost) {
                const localhostCheck = this.checkLocalhost(hostname);
                if (!localhostCheck.allowed) {
                    const result = {
                        allowed: false,
                        reason: localhostCheck.reason,
                        blockedCategory: "localhost",
                        url,
                        hostname,
                        protocol,
                        timestamp,
                    };
                    await this.logSSRFViolation(result, requestId);
                    return result;
                }
            }
            // 4. Private IP Range Protection
            if (this.config.blockPrivateIPs) {
                const privateIPCheck = this.checkPrivateIPRange(hostname);
                if (!privateIPCheck.allowed) {
                    const result = {
                        allowed: false,
                        reason: privateIPCheck.reason,
                        blockedCategory: "private_ip",
                        url,
                        hostname,
                        protocol,
                        timestamp,
                    };
                    await this.logSSRFViolation(result, requestId);
                    return result;
                }
            }
            // 5. IPv6 Private Range Protection
            if (this.config.blockIPv6Private) {
                const ipv6Check = this.checkIPv6Private(hostname);
                if (!ipv6Check.allowed) {
                    const result = {
                        allowed: false,
                        reason: ipv6Check.reason,
                        blockedCategory: "ipv6_private",
                        url,
                        hostname,
                        protocol,
                        timestamp,
                    };
                    await this.logSSRFViolation(result, requestId);
                    return result;
                }
            }
            // 6. Dangerous Protocol Detection
            if (this.config.blockDangerousProtocols) {
                const dangerousProtocolCheck = this.checkDangerousProtocols(hostname, url);
                if (!dangerousProtocolCheck.allowed) {
                    const result = {
                        allowed: false,
                        reason: dangerousProtocolCheck.reason,
                        blockedCategory: "dangerous_protocol",
                        url,
                        hostname,
                        protocol,
                        timestamp,
                    };
                    await this.logSSRFViolation(result, requestId);
                    return result;
                }
            }
            // 7. DNS Rebinding Protection (check before domain whitelist)
            if (this.config.enableDNSRebindingProtection) {
                const dnsRebindingCheck = await this.checkDNSRebinding(hostname);
                if (!dnsRebindingCheck.allowed) {
                    const result = {
                        allowed: false,
                        reason: dnsRebindingCheck.reason,
                        blockedCategory: "dns_rebinding",
                        url,
                        hostname,
                        protocol,
                        timestamp,
                    };
                    await this.logSSRFViolation(result, requestId);
                    return result;
                }
            }
            // 8. Domain Whitelist Enforcement (last check)
            const domainCheck = this.checkDomainWhitelist(hostname);
            if (!domainCheck.allowed) {
                const result = {
                    allowed: false,
                    reason: domainCheck.reason,
                    blockedCategory: "domain_not_allowed",
                    url,
                    hostname,
                    protocol,
                    timestamp,
                };
                await this.logSSRFViolation(result, requestId);
                return result;
            }
            // All checks passed
            const result = {
                allowed: true,
                url,
                hostname,
                protocol,
                timestamp,
            };
            await this.logSSRFValidation(result, requestId);
            return result;
        }
        catch (error) {
            const result = {
                allowed: false,
                reason: `Invalid URL format: ${error instanceof Error ? error.message : "Unknown error"}`,
                blockedCategory: "invalid_url",
                url,
                hostname: "",
                protocol: "",
                timestamp,
            };
            await this.logSSRFViolation(result, requestId);
            return result;
        }
    }
    /**
     * Check for metadata endpoints
     */
    checkMetadataEndpoint(hostname) {
        const metadataEndpoints = [
            "169.254.169.254", // AWS/Azure/GCP metadata
            "metadata.google.internal", // GCP metadata
            "metadata", // Generic metadata
            "169.254.169.253", // AWS Time Sync Service
        ];
        if (metadataEndpoints.includes(hostname)) {
            return {
                allowed: false,
                reason: `Metadata endpoint ${hostname} is blocked for security reasons`,
            };
        }
        return { allowed: true };
    }
    /**
     * Check for private IP ranges (RFC1918)
     */
    checkPrivateIPRange(hostname) {
        const ipv4Regex = /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/;
        const ipMatch = hostname.match(ipv4Regex);
        if (ipMatch) {
            const [, a, b, c, d] = ipMatch.map(Number);
            // Validate IP octets
            if (a > 255 || b > 255 || c > 255 || d > 255) {
                return { allowed: false, reason: "Invalid IP address format" };
            }
            // 10.0.0.0/8
            if (a === 10) {
                return {
                    allowed: false,
                    reason: "Private IP range 10.0.0.0/8 is blocked",
                };
            }
            // 172.16.0.0/12
            if (a === 172 && b >= 16 && b <= 31) {
                return {
                    allowed: false,
                    reason: "Private IP range 172.16.0.0/12 is blocked",
                };
            }
            // 192.168.0.0/16
            if (a === 192 && b === 168) {
                return {
                    allowed: false,
                    reason: "Private IP range 192.168.0.0/16 is blocked",
                };
            }
            // 100.64.0.0/10 (Carrier-grade NAT)
            if (a === 100 && b >= 64 && b <= 127) {
                return {
                    allowed: false,
                    reason: "Carrier-grade NAT range 100.64.0.0/10 is blocked",
                };
            }
            // 169.254.0.0/16 (Link-local)
            if (a === 169 && b === 254) {
                return {
                    allowed: false,
                    reason: "Link-local range 169.254.0.0/16 is blocked",
                };
            }
            // 224.0.0.0/4 (Multicast)
            if (a >= 224 && a <= 239) {
                return {
                    allowed: false,
                    reason: "Multicast range 224.0.0.0/4 is blocked",
                };
            }
            // 240.0.0.0/4 (Reserved)
            if (a >= 240) {
                return {
                    allowed: false,
                    reason: "Reserved range 240.0.0.0/4 is blocked",
                };
            }
        }
        return { allowed: true };
    }
    /**
     * Check for localhost
     */
    checkLocalhost(hostname) {
        const localhostPatterns = [
            "localhost",
            "127.0.0.1",
            "0.0.0.0",
            "::1",
            "0:0:0:0:0:0:0:1",
        ];
        // Check exact matches
        if (localhostPatterns.includes(hostname)) {
            return { allowed: false, reason: `Localhost ${hostname} is blocked` };
        }
        // Check 127.0.0.0/8 range
        const ipv4Regex = /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/;
        const ipMatch = hostname.match(ipv4Regex);
        if (ipMatch) {
            const [, a] = ipMatch.map(Number);
            if (a === 127) {
                return {
                    allowed: false,
                    reason: "Localhost range 127.0.0.0/8 is blocked",
                };
            }
        }
        return { allowed: true };
    }
    /**
     * Check for IPv6 private ranges
     */
    checkIPv6Private(hostname) {
        // IPv6 localhost
        if (hostname === "::1" || hostname === "0:0:0:0:0:0:0:1") {
            return { allowed: false, reason: "IPv6 localhost is blocked" };
        }
        // IPv6 private ranges (fc00::/7 and fd00::/8)
        if (hostname.startsWith("fc00:") || hostname.startsWith("fd00:")) {
            return { allowed: false, reason: "IPv6 private range is blocked" };
        }
        // IPv6 link-local (fe80::/10)
        if (hostname.startsWith("fe80:")) {
            return { allowed: false, reason: "IPv6 link-local range is blocked" };
        }
        return { allowed: true };
    }
    /**
     * Check for dangerous protocols
     */
    checkDangerousProtocols(hostname, url) {
        const dangerousProtocols = [
            "file:",
            "gopher:",
            "ftp:",
            "dict:",
            "ldap:",
            "tftp:",
        ];
        // Check hostname for embedded protocols
        for (const protocol of dangerousProtocols) {
            if (hostname.includes(protocol) || url.toLowerCase().includes(protocol)) {
                return {
                    allowed: false,
                    reason: `Dangerous protocol ${protocol} detected and blocked`,
                };
            }
        }
        return { allowed: true };
    }
    /**
     * Check domain whitelist
     */
    checkDomainWhitelist(hostname) {
        const isAllowed = this.config.allowedDomains.some((allowedDomain) => {
            return (hostname === allowedDomain || hostname.endsWith("." + allowedDomain));
        });
        if (!isAllowed) {
            return {
                allowed: false,
                reason: `Domain ${hostname} is not in the allowed list. Allowed domains: ${this.config.allowedDomains
                    .slice(0, 5)
                    .join(", ")}...`,
            };
        }
        return { allowed: true };
    }
    /**
     * Check for DNS rebinding attacks
     */
    async checkDNSRebinding(hostname) {
        // DNS rebinding protection: ensure hostname doesn't resolve to private IPs
        // This is a simplified check - in production, you'd want to perform actual DNS resolution
        // and verify the resolved IP addresses
        // For now, we'll do basic pattern matching
        const suspiciousPatterns = [
            /\d+\.\d+\.\d+\.\d+\.xip\.io$/,
            /\d+\.\d+\.\d+\.\d+\.nip\.io$/,
            /\d+\.\d+\.\d+\.\d+\.sslip\.io$/,
        ];
        for (const pattern of suspiciousPatterns) {
            if (pattern.test(hostname)) {
                return {
                    allowed: false,
                    reason: `Potential DNS rebinding attack detected: ${hostname}`,
                };
            }
        }
        return { allowed: true };
    }
    /**
     * Log SSRF violation to audit trail
     */
    async logSSRFViolation(result, requestId) {
        if (!this.auditTrail)
            return;
        await this.auditTrail.logEvent({
            eventType: "ssrf_violation",
            requestId: requestId || "unknown",
            provider: "bedrock",
            complianceStatus: "violation",
            metadata: {
                url: result.url,
                hostname: result.hostname,
                protocol: result.protocol,
                blockedCategory: result.blockedCategory,
                reason: result.reason,
                timestamp: result.timestamp.toISOString(),
            },
        });
    }
    /**
     * Log successful SSRF validation to audit trail
     */
    async logSSRFValidation(result, requestId) {
        if (!this.auditTrail)
            return;
        await this.auditTrail.logEvent({
            eventType: "ssrf_validation",
            requestId: requestId || "unknown",
            provider: "bedrock",
            complianceStatus: "compliant",
            metadata: {
                url: result.url,
                hostname: result.hostname,
                protocol: result.protocol,
                timestamp: result.timestamp.toISOString(),
            },
        });
    }
    /**
     * Update configuration
     */
    updateConfig(config) {
        this.config = { ...this.config, ...config };
    }
    /**
     * Get current configuration
     */
    getConfig() {
        return { ...this.config };
    }
    /**
     * Add allowed domain
     */
    addAllowedDomain(domain) {
        if (!this.config.allowedDomains.includes(domain)) {
            this.config.allowedDomains.push(domain);
        }
    }
    /**
     * Remove allowed domain
     */
    removeAllowedDomain(domain) {
        this.config.allowedDomains = this.config.allowedDomains.filter((d) => d !== domain);
    }
    /**
     * Get allowed domains
     */
    getAllowedDomains() {
        return [...this.config.allowedDomains];
    }
}
exports.SSRFProtectionValidator = SSRFProtectionValidator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
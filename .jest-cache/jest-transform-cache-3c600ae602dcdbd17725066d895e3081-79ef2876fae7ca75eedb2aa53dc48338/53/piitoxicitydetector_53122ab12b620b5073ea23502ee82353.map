{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/safety/pii-toxicity-detector.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/safety/pii-toxicity-detector.ts"],"sourcesContent":["/**\n * PII & Toxicity Detection System\n *\n * Active detection and prevention of:\n * - Personally Identifiable Information (PII)\n * - Toxic content and hate speech\n * - Prompt injection attacks\n * - Sensitive data leakage\n */\n\nimport {\n  PIIToken,\n  SafetyCheckResult,\n  SafetyViolation,\n} from \"./guardrails-service\";\n\nexport interface PIIPattern {\n  type: string;\n  pattern: RegExp;\n  confidence: number;\n  severity: \"LOW\" | \"MEDIUM\" | \"HIGH\" | \"CRITICAL\";\n  description: string;\n}\n\nexport interface ToxicityPattern {\n  type: string;\n  keywords: string[];\n  confidence: number;\n  severity: \"LOW\" | \"MEDIUM\" | \"HIGH\" | \"CRITICAL\";\n  description: string;\n}\n\nexport interface DetectionConfig {\n  enablePII: boolean;\n  enableToxicity: boolean;\n  enablePromptInjection: boolean;\n  strictMode: boolean;\n  redactionMode: \"MASK\" | \"REMOVE\" | \"REPLACE\";\n  confidenceThreshold: number;\n}\n\n/**\n * PII Detection Patterns\n */\nexport class PIIDetector {\n  private readonly piiPatterns: PIIPattern[] = [\n    {\n      type: \"EMAIL\",\n      pattern: /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g,\n      confidence: 0.95,\n      severity: \"HIGH\",\n      description: \"Email address detected\",\n    },\n    {\n      type: \"PHONE_DE\",\n      pattern: /(?:\\+49|0049|0)\\s?(?:\\d{2,4})\\s?\\d{6,8}/g,\n      confidence: 0.9,\n      severity: \"HIGH\",\n      description: \"German phone number detected\",\n    },\n    {\n      type: \"PHONE_INTERNATIONAL\",\n      pattern: /\\+\\d{1,3}\\s?\\d{1,4}\\s?\\d{4,10}/g,\n      confidence: 0.85,\n      severity: \"HIGH\",\n      description: \"International phone number detected\",\n    },\n    {\n      type: \"IBAN\",\n      pattern:\n        /[A-Z]{2}\\d{2}\\s?[A-Z0-9]{4}\\s?\\d{4}\\s?\\d{4}\\s?\\d{4}\\s?[\\d{0,2}]/g,\n      confidence: 0.95,\n      severity: \"CRITICAL\",\n      description: \"IBAN bank account number detected\",\n    },\n    {\n      type: \"CREDIT_CARD\",\n      pattern: /\\b\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}\\b/g,\n      confidence: 0.8,\n      severity: \"CRITICAL\",\n      description: \"Credit card number detected\",\n    },\n    {\n      type: \"SSN_US\",\n      pattern: /\\b\\d{3}-\\d{2}-\\d{4}\\b/g,\n      confidence: 0.9,\n      severity: \"CRITICAL\",\n      description: \"US Social Security Number detected\",\n    },\n    {\n      type: \"GERMAN_ID\",\n      pattern: /\\b\\d{10,11}\\b/g,\n      confidence: 0.6,\n      severity: \"MEDIUM\",\n      description: \"Potential German ID number detected\",\n    },\n    {\n      type: \"ADDRESS\",\n      pattern:\n        /\\b\\d{1,5}\\s+[\\w\\s]+(?:str|straße|street|avenue|ave|road|rd|lane|ln|drive|dr|court|ct|place|pl)\\b/gi,\n      confidence: 0.7,\n      severity: \"MEDIUM\",\n      description: \"Street address detected\",\n    },\n    {\n      type: \"POSTAL_CODE_DE\",\n      pattern: /\\b\\d{5}\\b/g,\n      confidence: 0.6,\n      severity: \"LOW\",\n      description: \"German postal code detected\",\n    },\n    {\n      type: \"IP_ADDRESS\",\n      pattern: /\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b/g,\n      confidence: 0.8,\n      severity: \"MEDIUM\",\n      description: \"IP address detected\",\n    },\n  ];\n\n  detectPII(text: string): PIIToken[] {\n    const tokens: PIIToken[] = [];\n    let tokenId = 1;\n\n    for (const pattern of this.piiPatterns) {\n      const matches = Array.from(text.matchAll(pattern.pattern));\n\n      for (const match of matches) {\n        if (match.index !== undefined) {\n          tokens.push({\n            id: `pii-${tokenId++}`,\n            type: pattern.type,\n            originalText: match[0],\n            confidence: pattern.confidence,\n            position: {\n              start: match.index,\n              end: match.index + match[0].length,\n            },\n          });\n        }\n      }\n    }\n\n    return tokens;\n  }\n\n  redactPII(\n    text: string,\n    mode: \"MASK\" | \"REMOVE\" | \"REPLACE\" = \"MASK\"\n  ): string {\n    let redactedText = text;\n    const tokens = this.detectPII(text);\n\n    // Sort by position (descending) to avoid index shifting\n    tokens.sort((a, b) => b.position.start - a.position.start);\n\n    for (const token of tokens) {\n      const { start, end } = token.position;\n      const originalText = redactedText.substring(start, end);\n\n      let replacement: string;\n      switch (mode) {\n        case \"MASK\":\n          replacement = \"*\".repeat(Math.min(originalText.length, 8));\n          break;\n        case \"REMOVE\":\n          replacement = \"\";\n          break;\n        case \"REPLACE\":\n          replacement = `[${token.type}]`;\n          break;\n      }\n\n      redactedText =\n        redactedText.substring(0, start) +\n        replacement +\n        redactedText.substring(end);\n    }\n\n    return redactedText;\n  }\n}\n\n/**\n * Toxicity Detection System\n */\nexport class ToxicityDetector {\n  private readonly toxicityPatterns: ToxicityPattern[] = [\n    {\n      type: \"HATE_SPEECH\",\n      keywords: [\"nazi\", \"hitler\", \"holocaust\", \"genocide\", \"ethnic cleansing\"],\n      confidence: 0.95,\n      severity: \"CRITICAL\",\n      description: \"Hate speech content detected\",\n    },\n    {\n      type: \"PROFANITY\",\n      keywords: [\"fuck\", \"shit\", \"damn\", \"bitch\", \"asshole\", \"bastard\"],\n      confidence: 0.8,\n      severity: \"MEDIUM\",\n      description: \"Profanity detected\",\n    },\n    {\n      type: \"VIOLENCE\",\n      keywords: [\n        \"kill\",\n        \"murder\",\n        \"violence\",\n        \"attack\",\n        \"harm\",\n        \"hurt\",\n        \"destroy\",\n      ],\n      confidence: 0.7,\n      severity: \"HIGH\",\n      description: \"Violent content detected\",\n    },\n    {\n      type: \"DISCRIMINATION\",\n      keywords: [\"racist\", \"sexist\", \"homophobic\", \"transphobic\", \"xenophobic\"],\n      confidence: 0.9,\n      severity: \"HIGH\",\n      description: \"Discriminatory content detected\",\n    },\n    {\n      type: \"SEXUAL_EXPLICIT\",\n      keywords: [\"porn\", \"sex\", \"nude\", \"naked\", \"explicit\"],\n      confidence: 0.75,\n      severity: \"HIGH\",\n      description: \"Sexually explicit content detected\",\n    },\n  ];\n\n  detectToxicity(text: string): SafetyViolation[] {\n    const violations: SafetyViolation[] = [];\n    const textLower = text.toLowerCase();\n\n    for (const pattern of this.toxicityPatterns) {\n      for (const keyword of pattern.keywords) {\n        if (textLower.includes(keyword.toLowerCase())) {\n          violations.push({\n            type: \"TOXICITY\",\n            severity: pattern.severity,\n            confidence: pattern.confidence,\n            details: `${pattern.description}: \"${keyword}\" detected`,\n            position: {\n              start: textLower.indexOf(keyword.toLowerCase()),\n              end: textLower.indexOf(keyword.toLowerCase()) + keyword.length,\n            },\n          });\n        }\n      }\n    }\n\n    return violations;\n  }\n\n  calculateToxicityScore(text: string): number {\n    const violations = this.detectToxicity(text);\n    if (violations.length === 0) return 0;\n\n    const totalScore = violations.reduce((sum, violation) => {\n      const severityWeight = {\n        LOW: 0.25,\n        MEDIUM: 0.5,\n        HIGH: 0.75,\n        CRITICAL: 1.0,\n      }[violation.severity];\n\n      return sum + violation.confidence * severityWeight;\n    }, 0);\n\n    return Math.min(totalScore / violations.length, 1.0);\n  }\n}\n\n/**\n * Prompt Injection Detection\n */\nexport class PromptInjectionDetector {\n  private readonly injectionPatterns = [\n    /ignore\\s+(?:all\\s+)?(?:previous\\s+)?instructions?/gi,\n    /forget\\s+(?:everything|all)\\s+(?:above|before)/gi,\n    /system\\s*:\\s*you\\s+are\\s+now/gi,\n    /\\[system\\]/gi,\n    /\\{\\{.*\\}\\}/g,\n    /<%.*%>/g,\n    /<script.*<\\/script>/gi,\n    /javascript:/gi,\n    /data:text\\/html/gi,\n    /eval\\s*\\(/gi,\n    /exec\\s*\\(/gi,\n  ];\n\n  detectPromptInjection(text: string): SafetyViolation[] {\n    const violations: SafetyViolation[] = [];\n\n    for (const pattern of this.injectionPatterns) {\n      const matches = Array.from(text.matchAll(pattern));\n\n      for (const match of matches) {\n        if (match.index !== undefined) {\n          violations.push({\n            type: \"CUSTOM\",\n            severity: \"HIGH\",\n            confidence: 0.8,\n            details: `Potential prompt injection detected: \"${match[0]}\"`,\n            position: {\n              start: match.index,\n              end: match.index + match[0].length,\n            },\n          });\n        }\n      }\n    }\n\n    return violations;\n  }\n}\n\n/**\n * Comprehensive PII & Toxicity Detection Service\n */\nexport class PIIToxicityDetectionService {\n  private piiDetector: PIIDetector;\n  private toxicityDetector: ToxicityDetector;\n  private promptInjectionDetector: PromptInjectionDetector;\n  private config: DetectionConfig;\n\n  constructor(config: Partial<DetectionConfig> = {}) {\n    this.piiDetector = new PIIDetector();\n    this.toxicityDetector = new ToxicityDetector();\n    this.promptInjectionDetector = new PromptInjectionDetector();\n\n    this.config = {\n      enablePII: true,\n      enableToxicity: true,\n      enablePromptInjection: true,\n      strictMode: false,\n      redactionMode: \"MASK\",\n      confidenceThreshold: 0.7,\n      ...config,\n    };\n  }\n\n  async performSafetyCheck(\n    content: string,\n    requestId?: string\n  ): Promise<SafetyCheckResult> {\n    const startTime = Date.now();\n    const violations: SafetyViolation[] = [];\n    let modifiedContent = content;\n    let allowed = true;\n\n    try {\n      // PII Detection\n      if (this.config.enablePII) {\n        const piiTokens = this.piiDetector.detectPII(content);\n\n        for (const token of piiTokens) {\n          if (token.confidence >= this.config.confidenceThreshold) {\n            violations.push({\n              type: \"PII\",\n              severity: this.getSeverityFromConfidence(token.confidence),\n              confidence: token.confidence,\n              details: `PII detected: ${token.type}`,\n              position: token.position,\n            });\n\n            if (this.config.strictMode || token.confidence >= 0.9) {\n              allowed = false;\n            }\n          }\n        }\n\n        // Redact PII if violations found\n        if (piiTokens.length > 0) {\n          modifiedContent = this.piiDetector.redactPII(\n            content,\n            this.config.redactionMode\n          );\n        }\n      }\n\n      // Toxicity Detection\n      if (this.config.enableToxicity) {\n        const toxicityViolations =\n          this.toxicityDetector.detectToxicity(content);\n        violations.push(...toxicityViolations);\n\n        const toxicityScore =\n          this.toxicityDetector.calculateToxicityScore(content);\n        if (\n          toxicityScore >= this.config.confidenceThreshold ||\n          toxicityViolations.length > 0\n        ) {\n          allowed = false;\n        }\n      }\n\n      // Prompt Injection Detection\n      if (this.config.enablePromptInjection) {\n        const injectionViolations =\n          this.promptInjectionDetector.detectPromptInjection(content);\n        violations.push(...injectionViolations);\n\n        if (injectionViolations.length > 0 && this.config.strictMode) {\n          allowed = false;\n        }\n      }\n\n      // Calculate overall confidence\n      const confidence =\n        violations.length > 0\n          ? 1 -\n            violations.reduce((sum, v) => sum + v.confidence, 0) /\n              violations.length\n          : 1.0;\n\n      return {\n        allowed,\n        confidence,\n        violations,\n        modifiedContent:\n          modifiedContent !== content ? modifiedContent : undefined,\n        processingTimeMs: Date.now() - startTime,\n      };\n    } catch (error) {\n      console.error(\"PII/Toxicity detection error:\", error);\n\n      return {\n        allowed: false,\n        confidence: 0.0,\n        violations: [\n          {\n            type: \"CUSTOM\",\n            severity: \"CRITICAL\",\n            confidence: 1.0,\n            details: `Detection service error: ${\n              error instanceof Error ? error.message : \"Unknown error\"\n            }`,\n          },\n        ],\n        processingTimeMs: Date.now() - startTime,\n      };\n    }\n  }\n\n  private getSeverityFromConfidence(\n    confidence: number\n  ): SafetyViolation[\"severity\"] {\n    if (confidence >= 0.9) return \"CRITICAL\";\n    if (confidence >= 0.8) return \"HIGH\";\n    if (confidence >= 0.6) return \"MEDIUM\";\n    return \"LOW\";\n  }\n\n  updateConfig(newConfig: Partial<DetectionConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n  }\n\n  getConfig(): DetectionConfig {\n    return { ...this.config };\n  }\n\n  // Test methods for validation\n  testPIIDetection(text: string): PIIToken[] {\n    return this.piiDetector.detectPII(text);\n  }\n\n  testToxicityDetection(text: string): SafetyViolation[] {\n    return this.toxicityDetector.detectToxicity(text);\n  }\n\n  testPromptInjectionDetection(text: string): SafetyViolation[] {\n    return this.promptInjectionDetector.detectPromptInjection(text);\n  }\n}\n\n// Export singleton instance\nexport const piiToxicityDetector = new PIIToxicityDetectionService();\n"],"version":3}
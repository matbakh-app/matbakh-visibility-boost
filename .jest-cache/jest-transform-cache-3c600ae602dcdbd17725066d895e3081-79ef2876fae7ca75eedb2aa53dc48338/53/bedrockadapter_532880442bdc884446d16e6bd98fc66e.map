{"version":3,"names":["tool_call_adapter_1","cov_ahy0851cq","s","require","BedrockAdapter","BaseAdapter","mapTools","tools","f","b","length","undefined","map","t","name","description","input_schema","type","properties","parameters","required","Object","keys","fromUnifiedSchema","tool","function","additionalProperties","buildRequest","input","prompt","decision","streaming","maxTokens","body","anthropic_version","max_tokens","temperature","messages","role","content","text","toolsToUse","isUnifiedToolSpec","includes","system","modelId","contentType","accept","JSON","stringify","parseResponse","resp","validateResponse","parse","chunk","parseStreamingResponse","_a","c","join","toolCalls","_b","tool_calls","tc","arguments","tokensUsed","_c","usage","input_tokens","output","_d","output_tokens","raw","error","handleError","bytes","Buffer","from","toString","delta","getProviderConfig","maxContextTokens","supportsStreaming","supportsTools","supportsJsonMode","supportsVision","rateLimitRpm","fallbackProvider","estimateTokens","tokens","Math","ceil","extractToolCallsFromResponse","filter","toolUse","index","id","confidence","getProviderName","supportsToolFeature","feature","exports"],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/adapters/bedrock-adapter.ts"],"sourcesContent":["import { ProviderResponse, RouteDecision, ToolSpec } from \"../types\";\nimport { BaseAdapter, UnifiedToolSpec } from \"./tool-call-adapter\";\n\nexport class BedrockAdapter extends BaseAdapter {\n  mapTools(tools?: ToolSpec[]) {\n    if (!tools?.length) return undefined;\n\n    // Anthropic tool schema via Bedrock toolUse format\n    return tools.map((t) => ({\n      name: t.name,\n      description: t.description || \"\",\n      input_schema: {\n        type: \"object\",\n        properties: t.parameters || {},\n        required: Object.keys(t.parameters || {}),\n      },\n    }));\n  }\n\n  // Enhanced mapping from unified schema to Bedrock format\n  override fromUnifiedSchema(tools?: UnifiedToolSpec[]): any | undefined {\n    if (!tools?.length) return undefined;\n\n    return tools.map((tool) => ({\n      name: tool.function.name,\n      description: tool.function.description || \"\",\n      input_schema: {\n        type: \"object\",\n        properties: tool.function.parameters.properties,\n        required: tool.function.parameters.required || [],\n        additionalProperties:\n          tool.function.parameters.additionalProperties || false,\n      },\n    }));\n  }\n\n  buildRequest(input: {\n    prompt: string;\n    decision: RouteDecision;\n    streaming?: boolean;\n    maxTokens?: number;\n    tools?: ToolSpec[] | UnifiedToolSpec[];\n  }) {\n    const { prompt, decision, streaming, maxTokens, tools } = input;\n\n    const body: any = {\n      anthropic_version: \"bedrock-2023-05-31\",\n      max_tokens: maxTokens || 1024,\n      temperature: decision.temperature,\n      messages: [{ role: \"user\", content: [{ type: \"text\", text: prompt }] }],\n    };\n\n    // Handle tools from decision or input parameter\n    const toolsToUse = tools || decision.tools;\n    if (toolsToUse?.length) {\n      if (this.isUnifiedToolSpec(toolsToUse[0])) {\n        body.tools = this.fromUnifiedSchema(toolsToUse as UnifiedToolSpec[]);\n      } else {\n        body.tools = this.mapTools(toolsToUse as ToolSpec[]);\n      }\n    }\n\n    // Add system message for domain-specific instructions\n    if (prompt.includes(\"legal\") || prompt.includes(\"compliance\")) {\n      body.system =\n        \"You are a precise legal assistant. Provide accurate, well-sourced information and clearly indicate when you cannot provide legal advice.\";\n    }\n\n    return {\n      modelId: decision.modelId,\n      contentType: \"application/json\",\n      accept: streaming\n        ? \"application/vnd.amazon.eventstream\"\n        : \"application/json\",\n      body: JSON.stringify(body),\n    };\n  }\n\n  parseResponse(resp: any): ProviderResponse {\n    try {\n      this.validateResponse(resp, \"Bedrock\");\n\n      const body =\n        typeof resp.body === \"string\" ? JSON.parse(resp.body) : resp.body;\n\n      // Handle streaming response\n      if (resp.body && typeof resp.body === \"object\" && resp.body.chunk) {\n        return this.parseStreamingResponse(resp);\n      }\n\n      // Standard response parsing\n      const text = body?.content?.map((c: any) => c.text).join(\"\\n\") || \"\";\n      const toolCalls =\n        body?.tool_calls?.map((tc: any) => ({\n          name: tc.name,\n          arguments: tc.input,\n        })) || [];\n\n      const tokensUsed = {\n        input: body?.usage?.input_tokens || 0,\n        output: body?.usage?.output_tokens || 0,\n      };\n\n      return {\n        text,\n        toolCalls,\n        raw: body,\n        tokensUsed,\n      };\n    } catch (error) {\n      this.handleError(error, \"Bedrock\");\n    }\n  }\n\n  private parseStreamingResponse(resp: any): ProviderResponse {\n    // Handle Bedrock streaming response format\n    let text = \"\";\n    const toolCalls: Array<{ name: string; arguments: any }> = [];\n\n    // Process streaming chunks\n    if (resp.body?.chunk?.bytes) {\n      const chunk = JSON.parse(\n        Buffer.from(resp.body.chunk.bytes, \"base64\").toString()\n      );\n      if (chunk.delta?.text) {\n        text += chunk.delta.text;\n      }\n    }\n\n    return {\n      text,\n      toolCalls,\n      raw: resp,\n      tokensUsed: { input: 0, output: 0 }, // Updated in final chunk\n    };\n  }\n\n  getProviderConfig() {\n    return {\n      maxContextTokens: 200000, // Claude 3.5 Sonnet context window\n      supportsStreaming: true,\n      supportsTools: true,\n      supportsJsonMode: true, // Claude supports JSON mode\n      supportsVision: true, // Claude 3.5 supports vision\n      rateLimitRpm: 1000, // Requests per minute\n      fallbackProvider: \"google\", // Fallback to Google if Bedrock fails\n    };\n  }\n\n  // Bedrock-specific token estimation using Claude tokenizer patterns\n  override estimateTokens(text: string): { input: number; output: number } {\n    // More accurate estimation for Claude models\n    // Claude typically uses ~3.5 characters per token\n    const tokens = Math.ceil(text.length / 3.5);\n    return { input: tokens, output: 0 };\n  }\n\n  // Implementation of abstract methods\n  protected extractToolCallsFromResponse(resp: any): Array<{\n    id?: string;\n    name: string;\n    arguments: any;\n    confidence?: number;\n  }> {\n    const body =\n      typeof resp.body === \"string\" ? JSON.parse(resp.body) : resp.body;\n\n    // Handle Bedrock/Claude tool calls format\n    if (body?.content) {\n      return body.content\n        .filter((c: any) => c.type === \"tool_use\")\n        .map((toolUse: any, index: number) => ({\n          id: toolUse.id || `bedrock_call_${index}`,\n          name: toolUse.name,\n          arguments: toolUse.input || {},\n          confidence: 1.0, // Bedrock doesn't provide confidence scores\n        }));\n    }\n\n    // Legacy format support\n    if (body?.tool_calls) {\n      return body.tool_calls.map((tc: any, index: number) => ({\n        id: tc.id || `bedrock_legacy_${index}`,\n        name: tc.name,\n        arguments: tc.input || tc.arguments || {},\n        confidence: 1.0,\n      }));\n    }\n\n    return [];\n  }\n\n  protected getProviderName(): string {\n    return \"bedrock\";\n  }\n\n  // Enhanced tool feature support for Bedrock\n  override supportsToolFeature(\n    feature: \"parallel_calls\" | \"streaming\" | \"json_schema\" | \"complex_types\"\n  ): boolean {\n    switch (feature) {\n      case \"parallel_calls\":\n        return true; // Claude supports parallel tool calls\n      case \"streaming\":\n        return true; // Bedrock supports streaming with tools\n      case \"json_schema\":\n        return true; // Claude supports structured output\n      case \"complex_types\":\n        return true; // Claude handles complex nested types well\n      default:\n        return super.supportsToolFeature(feature);\n    }\n  }\n\n  // Helper method to check if tools are in unified format\n  private isUnifiedToolSpec(tool: any): tool is UnifiedToolSpec {\n    return tool && typeof tool === \"object\" && \"function\" in tool;\n  }\n}\n"],"mappingsmBAAA;AAAA;AAAA,CAAAC,aAAA,GAAAC,CAAA,OAAAC,OAAA;AAEA,MAAaC,cAAe;AAAA;AAAA,CAAQJ,mBAAA,CAAAK,WAAW;EAC7CC,QAAQA,CAACC,KAAkB;IAAA;IAAAN,aAAA,GAAAO,CAAA;IAAAP,aAAA,GAAAC,CAAA;IACzB,IAAI;IAAC;IAAA,CAAAD,aAAA,GAAAQ,CAAA,UAAAF,KAAK;IAAA;IAAA,CAAAN,aAAA,GAAAQ,CAAA,UAALF,KAAK;IAAA;IAAA,CAAAN,aAAA,GAAAQ,CAAA;IAAA;IAAA,CAAAR,aAAA,GAAAQ,CAAA,UAALF,KAAK,CAAEG,MAAM,IAAE;MAAA;MAAAT,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAC,CAAA;MAAA,OAAOS,SAAS;IAAA,CAAC;IAAA;IAAA;MAAAV,aAAA,GAAAQ,CAAA;IAAA;IAErC;IAAAR,aAAA,GAAAC,CAAA;IACA,OAAOK,KAAK,CAACK,GAAG,CAAEC,CAAC,IAAM;MAAA;MAAAZ,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAC,CAAA;MAAA;QACvBY,IAAI,EAAED,CAAC,CAACC,IAAI;QACZC,WAAW;QAAE;QAAA,CAAAd,aAAA,GAAAQ,CAAA,UAAAI,CAAC,CAACE,WAAW;QAAA;QAAA,CAAAd,aAAA,GAAAQ,CAAA,UAAI,EAAE;QAChCO,YAAY,EAAE;UACZC,IAAI,EAAE,QAAQ;UACdC,UAAU;UAAE;UAAA,CAAAjB,aAAA,GAAAQ,CAAA,UAAAI,CAAC,CAACM,UAAU;UAAA;UAAA,CAAAlB,aAAA,GAAAQ,CAAA,UAAI,EAAE;UAC9BW,QAAQ,EAAEC,MAAM,CAACC,IAAI;UAAC;UAAA,CAAArB,aAAA,GAAAQ,CAAA,UAAAI,CAAC,CAACM,UAAU;UAAA;UAAA,CAAAlB,aAAA,GAAAQ,CAAA,UAAI,EAAE;;OAE3C;KAAC,CAAC;EACL;EAEA;EACSc,iBAAiBA,CAAChB,KAAyB;IAAA;IAAAN,aAAA,GAAAO,CAAA;IAAAP,aAAA,GAAAC,CAAA;IAClD,IAAI;IAAC;IAAA,CAAAD,aAAA,GAAAQ,CAAA,UAAAF,KAAK;IAAA;IAAA,CAAAN,aAAA,GAAAQ,CAAA,UAALF,KAAK;IAAA;IAAA,CAAAN,aAAA,GAAAQ,CAAA;IAAA;IAAA,CAAAR,aAAA,GAAAQ,CAAA,UAALF,KAAK,CAAEG,MAAM,IAAE;MAAA;MAAAT,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAC,CAAA;MAAA,OAAOS,SAAS;IAAA,CAAC;IAAA;IAAA;MAAAV,aAAA,GAAAQ,CAAA;IAAA;IAAAR,aAAA,GAAAC,CAAA;IAErC,OAAOK,KAAK,CAACK,GAAG,CAAEY,IAAI,IAAM;MAAA;MAAAvB,aAAA,GAAAO,CAAA;MAAAP,aAAA,GAAAC,CAAA;MAAA;QAC1BY,IAAI,EAAEU,IAAI,CAACC,QAAQ,CAACX,IAAI;QACxBC,WAAW;QAAE;QAAA,CAAAd,aAAA,GAAAQ,CAAA,UAAAe,IAAI,CAACC,QAAQ,CAACV,WAAW;QAAA;QAAA,CAAAd,aAAA,GAAAQ,CAAA,UAAI,EAAE;QAC5CO,YAAY,EAAE;UACZC,IAAI,EAAE,QAAQ;UACdC,UAAU,EAAEM,IAAI,CAACC,QAAQ,CAACN,UAAU,CAACD,UAAU;UAC/CE,QAAQ;UAAE;UAAA,CAAAnB,aAAA,GAAAQ,CAAA,WAAAe,IAAI,CAACC,QAAQ,CAACN,UAAU,CAACC,QAAQ;UAAA;UAAA,CAAAnB,aAAA,GAAAQ,CAAA,WAAI,EAAE;UACjDiB,oBAAoB;UAClB;UAAA,CAAAzB,aAAA,GAAAQ,CAAA,WAAAe,IAAI,CAACC,QAAQ,CAACN,UAAU,CAACO,oBAAoB;UAAA;UAAA,CAAAzB,aAAA,GAAAQ,CAAA,WAAI,KAAK;;OAE3D;KAAC,CAAC;EACL;EAEAkB,YAAYA,CAACC,KAMZ;IAAA;IAAA3B,aAAA,GAAAO,CAAA;IACC,MAAM;MAAEqB,MAAM;MAAEC,QAAQ;MAAEC,SAAS;MAAEC,SAAS;MAAEzB;IAAK,CAAE;IAAA;IAAA,CAAAN,aAAA,GAAAC,CAAA,QAAG0B,KAAK;IAE/D,MAAMK,IAAI;IAAA;IAAA,CAAAhC,aAAA,GAAAC,CAAA,QAAQ;MAChBgC,iBAAiB,EAAE,oBAAoB;MACvCC,UAAU;MAAE;MAAA,CAAAlC,aAAA,GAAAQ,CAAA,WAAAuB,SAAS;MAAA;MAAA,CAAA/B,aAAA,GAAAQ,CAAA,WAAI,IAAI;MAC7B2B,WAAW,EAAEN,QAAQ,CAACM,WAAW;MACjCC,QAAQ,EAAE,CAAC;QAAEC,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAE,CAAC;UAAEtB,IAAI,EAAE,MAAM;UAAEuB,IAAI,EAAEX;QAAM,CAAE;MAAC,CAAE;KACvE;IAED;IACA,MAAMY,UAAU;IAAA;IAAA,CAAAxC,aAAA,GAAAC,CAAA;IAAG;IAAA,CAAAD,aAAA,GAAAQ,CAAA,WAAAF,KAAK;IAAA;IAAA,CAAAN,aAAA,GAAAQ,CAAA,WAAIqB,QAAQ,CAACvB,KAAK;IAAC;IAAAN,aAAA,GAAAC,CAAA;IAC3C;IAAI;IAAA,CAAAD,aAAA,GAAAQ,CAAA,WAAAgC,UAAU;IAAA;IAAA,CAAAxC,aAAA,GAAAQ,CAAA,WAAVgC,UAAU;IAAA;IAAA,CAAAxC,aAAA,GAAAQ,CAAA;IAAA;IAAA,CAAAR,aAAA,GAAAQ,CAAA,WAAVgC,UAAU,CAAE/B,MAAM,GAAE;MAAA;MAAAT,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAC,CAAA;MACtB,IAAI,IAAI,CAACwC,iBAAiB,CAACD,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE;QAAA;QAAAxC,aAAA,GAAAQ,CAAA;QAAAR,aAAA,GAAAC,CAAA;QACzC+B,IAAI,CAAC1B,KAAK,GAAG,IAAI,CAACgB,iBAAiB,CAACkB,UAA+B,CAAC;MACtE,CAAC,MAAM;QAAA;QAAAxC,aAAA,GAAAQ,CAAA;QAAAR,aAAA,GAAAC,CAAA;QACL+B,IAAI,CAAC1B,KAAK,GAAG,IAAI,CAACD,QAAQ,CAACmC,UAAwB,CAAC;MACtD;IACF,CAAC;IAAA;IAAA;MAAAxC,aAAA,GAAAQ,CAAA;IAAA;IAED;IAAAR,aAAA,GAAAC,CAAA;IACA;IAAI;IAAA,CAAAD,aAAA,GAAAQ,CAAA,WAAAoB,MAAM,CAACc,QAAQ,CAAC,OAAO,CAAC;IAAA;IAAA,CAAA1C,aAAA,GAAAQ,CAAA,WAAIoB,MAAM,CAACc,QAAQ,CAAC,YAAY,CAAC,GAAE;MAAA;MAAA1C,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAC,CAAA;MAC7D+B,IAAI,CAACW,MAAM,GACT,0IAA0I;IAC9I,CAAC;IAAA;IAAA;MAAA3C,aAAA,GAAAQ,CAAA;IAAA;IAAAR,aAAA,GAAAC,CAAA;IAED,OAAO;MACL2C,OAAO,EAAEf,QAAQ,CAACe,OAAO;MACzBC,WAAW,EAAE,kBAAkB;MAC/BC,MAAM,EAAEhB,SAAS;MAAA;MAAA,CAAA9B,aAAA,GAAAQ,CAAA,WACb,oCAAoC;MAAA;MAAA,CAAAR,aAAA,GAAAQ,CAAA,WACpC,kBAAkB;MACtBwB,IAAI,EAAEe,IAAI,CAACC,SAAS,CAAChB,IAAI;KAC1B;EACH;EAEAiB,aAAaA,CAACC,IAAS;IAAA;IAAAlD,aAAA,GAAAO,CAAA;;;;IACrB,IAAI;MAAA;MAAAP,aAAA,GAAAC,CAAA;MACF,IAAI,CAACkD,gBAAgB,CAACD,IAAI,EAAE,SAAS,CAAC;MAEtC,MAAMlB,IAAI;MAAA;MAAA,CAAAhC,aAAA,GAAAC,CAAA,QACR,OAAOiD,IAAI,CAAClB,IAAI,KAAK,QAAQ;MAAA;MAAA,CAAAhC,aAAA,GAAAQ,CAAA,WAAGuC,IAAI,CAACK,KAAK,CAACF,IAAI,CAAClB,IAAI,CAAC;MAAA;MAAA,CAAAhC,aAAA,GAAAQ,CAAA,WAAG0C,IAAI,CAAClB,IAAI;MAEnE;MAAA;MAAAhC,aAAA,GAAAC,CAAA;MACA;MAAI;MAAA,CAAAD,aAAA,GAAAQ,CAAA,WAAA0C,IAAI,CAAClB,IAAI;MAAA;MAAA,CAAAhC,aAAA,GAAAQ,CAAA,WAAI,OAAO0C,IAAI,CAAClB,IAAI,KAAK,QAAQ;MAAA;MAAA,CAAAhC,aAAA,GAAAQ,CAAA,WAAI0C,IAAI,CAAClB,IAAI,CAACqB,KAAK,GAAE;QAAA;QAAArD,aAAA,GAAAQ,CAAA;QAAAR,aAAA,GAAAC,CAAA;QACjE,OAAO,IAAI,CAACqD,sBAAsB,CAACJ,IAAI,CAAC;MAC1C,CAAC;MAAA;MAAA;QAAAlD,aAAA,GAAAQ,CAAA;MAAA;MAED;MACA,MAAM+B,IAAI;MAAA;MAAA,CAAAvC,aAAA,GAAAC,CAAA;MAAG;MAAA,CAAAD,aAAA,GAAAQ,CAAA;MAAA;MAAA,CAAAR,aAAA,GAAAQ,CAAA,YAAA+C,EAAA;MAAA;MAAA,CAAAvD,aAAA,GAAAQ,CAAA,WAAAwB,IAAI;MAAA;MAAA,CAAAhC,aAAA,GAAAQ,CAAA,WAAJwB,IAAI;MAAA;MAAA,CAAAhC,aAAA,GAAAQ,CAAA;MAAA;MAAA,CAAAR,aAAA,GAAAQ,CAAA,WAAJwB,IAAI,CAAEM,OAAO;MAAA;MAAA,CAAAtC,aAAA,GAAAQ,CAAA,WAAA+C,EAAA;MAAA;MAAA,CAAAvD,aAAA,GAAAQ,CAAA;MAAA;MAAA,CAAAR,aAAA,GAAAQ,CAAA,WAAA+C,EAAA,CAAE5C,GAAG,CAAE6C,CAAM,IAAK;QAAA;QAAAxD,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAC,CAAA;QAAA,OAAAuD,CAAC,CAACjB,IAAI;MAAJ,CAAI,EAAEkB,IAAI,CAAC,IAAI,CAAC;MAAA;MAAA,CAAAzD,aAAA,GAAAQ,CAAA,WAAI,EAAE;MACpE,MAAMkD,SAAS;MAAA;MAAA,CAAA1D,aAAA,GAAAC,CAAA;MACb;MAAA,CAAAD,aAAA,GAAAQ,CAAA;MAAA;MAAA,CAAAR,aAAA,GAAAQ,CAAA,YAAAmD,EAAA;MAAA;MAAA,CAAA3D,aAAA,GAAAQ,CAAA,WAAAwB,IAAI;MAAA;MAAA,CAAAhC,aAAA,GAAAQ,CAAA,WAAJwB,IAAI;MAAA;MAAA,CAAAhC,aAAA,GAAAQ,CAAA;MAAA;MAAA,CAAAR,aAAA,GAAAQ,CAAA,WAAJwB,IAAI,CAAE4B,UAAU;MAAA;MAAA,CAAA5D,aAAA,GAAAQ,CAAA,WAAAmD,EAAA;MAAA;MAAA,CAAA3D,aAAA,GAAAQ,CAAA;MAAA;MAAA,CAAAR,aAAA,GAAAQ,CAAA,WAAAmD,EAAA,CAAEhD,GAAG,CAAEkD,EAAO,IAAM;QAAA;QAAA7D,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAC,CAAA;QAAA;UAClCY,IAAI,EAAEgD,EAAE,CAAChD,IAAI;UACbiD,SAAS,EAAED,EAAE,CAAClC;SACf;OAAC,CAAC;MAAA;MAAA,CAAA3B,aAAA,GAAAQ,CAAA,WAAI,EAAE;MAEX,MAAMuD,UAAU;MAAA;MAAA,CAAA/D,aAAA,GAAAC,CAAA,QAAG;QACjB0B,KAAK;QAAE;QAAA,CAAA3B,aAAA,GAAAQ,CAAA;QAAA;QAAA,CAAAR,aAAA,GAAAQ,CAAA,YAAAwD,EAAA;QAAA;QAAA,CAAAhE,aAAA,GAAAQ,CAAA,WAAAwB,IAAI;QAAA;QAAA,CAAAhC,aAAA,GAAAQ,CAAA,WAAJwB,IAAI;QAAA;QAAA,CAAAhC,aAAA,GAAAQ,CAAA;QAAA;QAAA,CAAAR,aAAA,GAAAQ,CAAA,WAAJwB,IAAI,CAAEiC,KAAK;QAAA;QAAA,CAAAjE,aAAA,GAAAQ,CAAA,WAAAwD,EAAA;QAAA;QAAA,CAAAhE,aAAA,GAAAQ,CAAA;QAAA;QAAA,CAAAR,aAAA,GAAAQ,CAAA,WAAAwD,EAAA,CAAEE,YAAY;QAAA;QAAA,CAAAlE,aAAA,GAAAQ,CAAA,WAAI,CAAC;QACrC2D,MAAM;QAAE;QAAA,CAAAnE,aAAA,GAAAQ,CAAA;QAAA;QAAA,CAAAR,aAAA,GAAAQ,CAAA,YAAA4D,EAAA;QAAA;QAAA,CAAApE,aAAA,GAAAQ,CAAA,WAAAwB,IAAI;QAAA;QAAA,CAAAhC,aAAA,GAAAQ,CAAA,WAAJwB,IAAI;QAAA;QAAA,CAAAhC,aAAA,GAAAQ,CAAA;QAAA;QAAA,CAAAR,aAAA,GAAAQ,CAAA,WAAJwB,IAAI,CAAEiC,KAAK;QAAA;QAAA,CAAAjE,aAAA,GAAAQ,CAAA,WAAA4D,EAAA;QAAA;QAAA,CAAApE,aAAA,GAAAQ,CAAA;QAAA;QAAA,CAAAR,aAAA,GAAAQ,CAAA,WAAA4D,EAAA,CAAEC,aAAa;QAAA;QAAA,CAAArE,aAAA,GAAAQ,CAAA,WAAI,CAAC;OACxC;MAAC;MAAAR,aAAA,GAAAC,CAAA;MAEF,OAAO;QACLsC,IAAI;QACJmB,SAAS;QACTY,GAAG,EAAEtC,IAAI;QACT+B;OACD;IACH,CAAC,CAAC,OAAOQ,KAAK,EAAE;MAAA;MAAAvE,aAAA,GAAAC,CAAA;MACd,IAAI,CAACuE,WAAW,CAACD,KAAK,EAAE,SAAS,CAAC;IACpC;EACF;EAEQjB,sBAAsBA,CAACJ,IAAS;IAAA;IAAAlD,aAAA,GAAAO,CAAA;;IACtC;IACA,IAAIgC,IAAI;IAAA;IAAA,CAAAvC,aAAA,GAAAC,CAAA,QAAG,EAAE;IACb,MAAMyD,SAAS;IAAA;IAAA,CAAA1D,aAAA,GAAAC,CAAA,QAA4C,EAAE;IAE7D;IAAA;IAAAD,aAAA,GAAAC,CAAA;IACA;IAAI;IAAA,CAAAD,aAAA,GAAAQ,CAAA,YAAAmD,EAAA;IAAA;IAAA,CAAA3D,aAAA,GAAAQ,CAAA,YAAA+C,EAAA,GAAAL,IAAI,CAAClB,IAAI;IAAA;IAAA,CAAAhC,aAAA,GAAAQ,CAAA,WAAA+C,EAAA;IAAA;IAAA,CAAAvD,aAAA,GAAAQ,CAAA;IAAA;IAAA,CAAAR,aAAA,GAAAQ,CAAA,WAAA+C,EAAA,CAAEF,KAAK;IAAA;IAAA,CAAArD,aAAA,GAAAQ,CAAA,WAAAmD,EAAA;IAAA;IAAA,CAAA3D,aAAA,GAAAQ,CAAA;IAAA;IAAA,CAAAR,aAAA,GAAAQ,CAAA,WAAAmD,EAAA,CAAEc,KAAK,GAAE;MAAA;MAAAzE,aAAA,GAAAQ,CAAA;MAC3B,MAAM6C,KAAK;MAAA;MAAA,CAAArD,aAAA,GAAAC,CAAA,QAAG8C,IAAI,CAACK,KAAK,CACtBsB,MAAM,CAACC,IAAI,CAACzB,IAAI,CAAClB,IAAI,CAACqB,KAAK,CAACoB,KAAK,EAAE,QAAQ,CAAC,CAACG,QAAQ,EAAE,CACxD;MAAC;MAAA5E,aAAA,GAAAC,CAAA;MACF;MAAI;MAAA,CAAAD,aAAA,GAAAQ,CAAA,YAAAwD,EAAA,GAAAX,KAAK,CAACwB,KAAK;MAAA;MAAA,CAAA7E,aAAA,GAAAQ,CAAA,WAAAwD,EAAA;MAAA;MAAA,CAAAhE,aAAA,GAAAQ,CAAA;MAAA;MAAA,CAAAR,aAAA,GAAAQ,CAAA,WAAAwD,EAAA,CAAEzB,IAAI,GAAE;QAAA;QAAAvC,aAAA,GAAAQ,CAAA;QAAAR,aAAA,GAAAC,CAAA;QACrBsC,IAAI,IAAIc,KAAK,CAACwB,KAAK,CAACtC,IAAI;MAC1B,CAAC;MAAA;MAAA;QAAAvC,aAAA,GAAAQ,CAAA;MAAA;IACH,CAAC;IAAA;IAAA;MAAAR,aAAA,GAAAQ,CAAA;IAAA;IAAAR,aAAA,GAAAC,CAAA;IAED,OAAO;MACLsC,IAAI;MACJmB,SAAS;MACTY,GAAG,EAAEpB,IAAI;MACTa,UAAU,EAAE;QAAEpC,KAAK,EAAE,CAAC;QAAEwC,MAAM,EAAE;MAAC,CAAE,CAAE;KACtC;EACH;EAEAW,iBAAiBA,CAAA;IAAA;IAAA9E,aAAA,GAAAO,CAAA;IAAAP,aAAA,GAAAC,CAAA;IACf,OAAO;MACL8E,gBAAgB,EAAE,MAAM;MAAE;MAC1BC,iBAAiB,EAAE,IAAI;MACvBC,aAAa,EAAE,IAAI;MACnBC,gBAAgB,EAAE,IAAI;MAAE;MACxBC,cAAc,EAAE,IAAI;MAAE;MACtBC,YAAY,EAAE,IAAI;MAAE;MACpBC,gBAAgB,EAAE,QAAQ,CAAE;KAC7B;EACH;EAEA;EACSC,cAAcA,CAAC/C,IAAY;IAAA;IAAAvC,aAAA,GAAAO,CAAA;IAClC;IACA;IACA,MAAMgF,MAAM;IAAA;IAAA,CAAAvF,aAAA,GAAAC,CAAA,QAAGuF,IAAI,CAACC,IAAI,CAAClD,IAAI,CAAC9B,MAAM,GAAG,GAAG,CAAC;IAAC;IAAAT,aAAA,GAAAC,CAAA;IAC5C,OAAO;MAAE0B,KAAK,EAAE4D,MAAM;MAAEpB,MAAM,EAAE;IAAC,CAAE;EACrC;EAEA;EACUuB,4BAA4BA,CAACxC,IAAS;IAAA;IAAAlD,aAAA,GAAAO,CAAA;IAM9C,MAAMyB,IAAI;IAAA;IAAA,CAAAhC,aAAA,GAAAC,CAAA,QACR,OAAOiD,IAAI,CAAClB,IAAI,KAAK,QAAQ;IAAA;IAAA,CAAAhC,aAAA,GAAAQ,CAAA,WAAGuC,IAAI,CAACK,KAAK,CAACF,IAAI,CAAClB,IAAI,CAAC;IAAA;IAAA,CAAAhC,aAAA,GAAAQ,CAAA,WAAG0C,IAAI,CAAClB,IAAI;IAEnE;IAAA;IAAAhC,aAAA,GAAAC,CAAA;IACA;IAAI;IAAA,CAAAD,aAAA,GAAAQ,CAAA,WAAAwB,IAAI;IAAA;IAAA,CAAAhC,aAAA,GAAAQ,CAAA,WAAJwB,IAAI;IAAA;IAAA,CAAAhC,aAAA,GAAAQ,CAAA;IAAA;IAAA,CAAAR,aAAA,GAAAQ,CAAA,WAAJwB,IAAI,CAAEM,OAAO,GAAE;MAAA;MAAAtC,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAC,CAAA;MACjB,OAAO+B,IAAI,CAACM,OAAO,CAChBqD,MAAM,CAAEnC,CAAM,IAAK;QAAA;QAAAxD,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAC,CAAA;QAAA,OAAAuD,CAAC,CAACxC,IAAI,KAAK,UAAU;MAAV,CAAU,CAAC,CACzCL,GAAG,CAAC,CAACiF,OAAY,EAAEC,KAAa,KAAM;QAAA;QAAA7F,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAC,CAAA;QAAA;UACrC6F,EAAE;UAAE;UAAA,CAAA9F,aAAA,GAAAQ,CAAA,WAAAoF,OAAO,CAACE,EAAE;UAAA;UAAA,CAAA9F,aAAA,GAAAQ,CAAA,WAAI,gBAAgBqF,KAAK,EAAE;UACzChF,IAAI,EAAE+E,OAAO,CAAC/E,IAAI;UAClBiD,SAAS;UAAE;UAAA,CAAA9D,aAAA,GAAAQ,CAAA,WAAAoF,OAAO,CAACjE,KAAK;UAAA;UAAA,CAAA3B,aAAA,GAAAQ,CAAA,WAAI,EAAE;UAC9BuF,UAAU,EAAE,GAAG,CAAE;SAClB;OAAC,CAAC;IACP,CAAC;IAAA;IAAA;MAAA/F,aAAA,GAAAQ,CAAA;IAAA;IAED;IAAAR,aAAA,GAAAC,CAAA;IACA;IAAI;IAAA,CAAAD,aAAA,GAAAQ,CAAA,WAAAwB,IAAI;IAAA;IAAA,CAAAhC,aAAA,GAAAQ,CAAA,WAAJwB,IAAI;IAAA;IAAA,CAAAhC,aAAA,GAAAQ,CAAA;IAAA;IAAA,CAAAR,aAAA,GAAAQ,CAAA,WAAJwB,IAAI,CAAE4B,UAAU,GAAE;MAAA;MAAA5D,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAC,CAAA;MACpB,OAAO+B,IAAI,CAAC4B,UAAU,CAACjD,GAAG,CAAC,CAACkD,EAAO,EAAEgC,KAAa,KAAM;QAAA;QAAA7F,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAC,CAAA;QAAA;UACtD6F,EAAE;UAAE;UAAA,CAAA9F,aAAA,GAAAQ,CAAA,WAAAqD,EAAE,CAACiC,EAAE;UAAA;UAAA,CAAA9F,aAAA,GAAAQ,CAAA,WAAI,kBAAkBqF,KAAK,EAAE;UACtChF,IAAI,EAAEgD,EAAE,CAAChD,IAAI;UACbiD,SAAS;UAAE;UAAA,CAAA9D,aAAA,GAAAQ,CAAA,WAAAqD,EAAE,CAAClC,KAAK;UAAA;UAAA,CAAA3B,aAAA,GAAAQ,CAAA,WAAIqD,EAAE,CAACC,SAAS;UAAA;UAAA,CAAA9D,aAAA,GAAAQ,CAAA,WAAI,EAAE;UACzCuF,UAAU,EAAE;SACb;OAAC,CAAC;IACL,CAAC;IAAA;IAAA;MAAA/F,aAAA,GAAAQ,CAAA;IAAA;IAAAR,aAAA,GAAAC,CAAA;IAED,OAAO,EAAE;EACX;EAEU+F,eAAeA,CAAA;IAAA;IAAAhG,aAAA,GAAAO,CAAA;IAAAP,aAAA,GAAAC,CAAA;IACvB,OAAO,SAAS;EAClB;EAEA;EACSgG,mBAAmBA,CAC1BC,OAAyE;IAAA;IAAAlG,aAAA,GAAAO,CAAA;IAAAP,aAAA,GAAAC,CAAA;IAEzE,QAAQiG,OAAO;MACb,KAAK,gBAAgB;QAAA;QAAAlG,aAAA,GAAAQ,CAAA;QAAAR,aAAA,GAAAC,CAAA;QACnB,OAAO,IAAI;MAAE;MACf,KAAK,WAAW;QAAA;QAAAD,aAAA,GAAAQ,CAAA;QAAAR,aAAA,GAAAC,CAAA;QACd,OAAO,IAAI;MAAE;MACf,KAAK,aAAa;QAAA;QAAAD,aAAA,GAAAQ,CAAA;QAAAR,aAAA,GAAAC,CAAA;QAChB,OAAO,IAAI;MAAE;MACf,KAAK,eAAe;QAAA;QAAAD,aAAA,GAAAQ,CAAA;QAAAR,aAAA,GAAAC,CAAA;QAClB,OAAO,IAAI;MAAE;MACf;QAAA;QAAAD,aAAA,GAAAQ,CAAA;QAAAR,aAAA,GAAAC,CAAA;QACE,OAAO,KAAK,CAACgG,mBAAmB,CAACC,OAAO,CAAC;IAC7C;EACF;EAEA;EACQzD,iBAAiBA,CAAClB,IAAS;IAAA;IAAAvB,aAAA,GAAAO,CAAA;IAAAP,aAAA,GAAAC,CAAA;IACjC,OAAO,2BAAAD,aAAA,GAAAQ,CAAA,WAAAe,IAAI;IAAA;IAAA,CAAAvB,aAAA,GAAAQ,CAAA,WAAI,OAAOe,IAAI,KAAK,QAAQ;IAAA;IAAA,CAAAvB,aAAA,GAAAQ,CAAA,WAAI,UAAU,IAAIe,IAAI;EAC/D;;AACD;AAAAvB,aAAA,GAAAC,CAAA;AAvNDkG,OAAA,CAAAhG,cAAA,GAAAA,cAAA","ignoreList":[]}
{"version":3,"names":["cov_559lfj0rt","actualCoverage","s","health_checker_1","require","multi_region_orchestrator_1","FailoverManager","constructor","config","policy","orchestrator","healthChecker","f","isFailoverInProgress","currentRegion","failoverHistory","b","MultiRegionOrchestrator","HealthChecker","automaticFailover","startHealthMonitoring","setInterval","tslib_1","__awaiter","healthStatus","checkAllServices","shouldTriggerFailover","console","log","executeAutomaticFailover","error","healthCheckInterval","failedChecks","Object","values","filter","status","length","healthCheckFailureThreshold","reason","executeFailover","executeManualFailover","Error","trigger","startTime","Date","sendNotification","result","success","_a","steps","find","event","id","now","timestamp","type","duration","getTime","rtoAchieved","rpoAchieved","push","rtoTarget","rpoTarget","executeFailback","testDisasterRecovery","estimatedRTO","estimatedRPO","recommendations","join","getSystemStatus","overall","regions","primary","secondary","services","lastUpdated","message","lastFailover","e","sort","a","rtoCompliance","rpoCompliance","getFailoverHistory","limit","sorted","slice","updatePolicy","newPolicy","assign","undefined","level","notification","toISOString","service","toUpperCase","endpoint","notificationEndpoints","startsWith","fetch","method","headers","body","JSON","stringify","includes","generateFailoverReport","failovers","successful","averageRTO","reduce","sum","averageRPO","rtoCompliant","rpoCompliant","toFixed","summary","totalFailovers","successfulFailovers","recentEvents","exports"],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/multi-region/failover-manager.ts"],"sourcesContent":["import { HealthChecker } from './health-checker';\nimport { FailoverResult, MultiRegionConfig, MultiRegionOrchestrator } from './multi-region-orchestrator';\n\nexport interface FailoverPolicy {\n    automaticFailover: boolean;\n    healthCheckFailureThreshold: number;\n    healthCheckInterval: number; // seconds\n    rtoTarget: number; // minutes\n    rpoTarget: number; // minutes\n    notificationEndpoints: string[];\n}\n\nexport interface FailoverEvent {\n    id: string;\n    timestamp: Date;\n    type: 'failover' | 'failback' | 'test';\n    trigger: 'automatic' | 'manual';\n    reason: string;\n    result: FailoverResult;\n    duration: number;\n    rtoAchieved: number;\n    rpoAchieved: number;\n}\n\nexport class FailoverManager {\n    private orchestrator: MultiRegionOrchestrator;\n    private healthChecker: HealthChecker;\n    private isFailoverInProgress = false;\n    private currentRegion: 'primary' | 'secondary' = 'primary';\n    private failoverHistory: FailoverEvent[] = [];\n\n    constructor(\n        private config: MultiRegionConfig,\n        private policy: FailoverPolicy,\n        orchestrator?: MultiRegionOrchestrator,\n        healthChecker?: HealthChecker\n    ) {\n        // Allow dependency injection for testing\n        this.orchestrator = orchestrator || new MultiRegionOrchestrator(config);\n        this.healthChecker = healthChecker || new HealthChecker(config);\n\n        if (policy.automaticFailover) {\n            this.startHealthMonitoring();\n        }\n    }\n\n    /**\n     * Start continuous health monitoring for automatic failover\n     */\n    private startHealthMonitoring(): void {\n        setInterval(async () => {\n            if (this.isFailoverInProgress) {\n                return; // Skip if failover is already in progress\n            }\n\n            try {\n                const healthStatus = await this.healthChecker.checkAllServices();\n\n                if (this.shouldTriggerFailover(healthStatus)) {\n                    console.log('Automatic failover triggered due to health check failures');\n                    await this.executeAutomaticFailover('Health check failure');\n                }\n            } catch (error) {\n                console.error('Error during health monitoring:', error);\n            }\n        }, this.policy.healthCheckInterval * 1000);\n    }\n\n    /**\n     * Determine if automatic failover should be triggered\n     */\n    private shouldTriggerFailover(healthStatus: any): boolean {\n        if (this.currentRegion === 'secondary') {\n            return false; // Already failed over\n        }\n\n        const failedChecks = Object.values(healthStatus).filter(status => !status).length;\n        return failedChecks >= this.policy.healthCheckFailureThreshold;\n    }\n\n    /**\n     * Execute automatic failover\n     */\n    private async executeAutomaticFailover(reason: string): Promise<void> {\n        if (this.isFailoverInProgress) {\n            console.log('Failover already in progress, skipping automatic trigger');\n            return;\n        }\n\n        console.log(`Executing automatic failover: ${reason}`);\n        await this.executeFailover(reason, 'automatic');\n    }\n\n    /**\n     * Execute manual failover\n     */\n    async executeManualFailover(reason: string): Promise<FailoverResult> {\n        if (this.isFailoverInProgress) {\n            throw new Error('Failover already in progress');\n        }\n\n        console.log(`Executing manual failover: ${reason}`);\n        return await this.executeFailover(reason, 'manual');\n    }\n\n    /**\n     * Execute failover (common logic for automatic and manual)\n     */\n    private async executeFailover(reason: string, trigger: 'automatic' | 'manual'): Promise<FailoverResult> {\n        const startTime = new Date();\n        this.isFailoverInProgress = true;\n\n        try {\n            // Send notification about failover start\n            await this.sendNotification(`Failover started: ${reason}`, 'warning');\n\n            // Execute the failover\n            const result = await this.orchestrator.executeFailover(reason);\n\n            // Update current region if successful\n            if (result.success) {\n                this.currentRegion = this.currentRegion === 'primary' ? 'secondary' : 'primary';\n                await this.sendNotification(`Failover completed successfully to ${this.currentRegion} region`, 'success');\n            } else {\n                await this.sendNotification(`Failover failed: ${result.steps.find(s => s.status === 'failed')?.error}`, 'error');\n            }\n\n            // Record the event\n            const event: FailoverEvent = {\n                id: `failover-${Date.now()}`,\n                timestamp: startTime,\n                type: 'failover',\n                trigger,\n                reason,\n                result,\n                duration: (new Date().getTime() - startTime.getTime()) / 1000,\n                rtoAchieved: result.rtoAchieved,\n                rpoAchieved: result.rpoAchieved,\n            };\n\n            this.failoverHistory.push(event);\n\n            // Check if RTO/RPO targets were met\n            if (result.success) {\n                if (result.rtoAchieved > this.policy.rtoTarget) {\n                    await this.sendNotification(\n                        `RTO target exceeded: ${result.rtoAchieved}min > ${this.policy.rtoTarget}min target`,\n                        'warning'\n                    );\n                }\n\n                if (result.rpoAchieved > this.policy.rpoTarget) {\n                    await this.sendNotification(\n                        `RPO target exceeded: ${result.rpoAchieved}min > ${this.policy.rpoTarget}min target`,\n                        'warning'\n                    );\n                }\n            }\n\n            return result;\n\n        } finally {\n            this.isFailoverInProgress = false;\n        }\n    }\n\n    /**\n     * Execute failback to primary region\n     */\n    async executeFailback(reason: string = 'Manual failback'): Promise<FailoverResult> {\n        if (this.isFailoverInProgress) {\n            throw new Error('Failover operation already in progress');\n        }\n\n        if (this.currentRegion === 'primary') {\n            throw new Error('Already running on primary region');\n        }\n\n        const startTime = new Date();\n        this.isFailoverInProgress = true;\n\n        try {\n            await this.sendNotification(`Failback started: ${reason}`, 'info');\n\n            const result = await this.orchestrator.executeFailback(reason);\n\n            if (result.success) {\n                this.currentRegion = 'primary';\n                await this.sendNotification('Failback completed successfully to primary region', 'success');\n            } else {\n                await this.sendNotification(`Failback failed: ${result.steps.find(s => s.status === 'failed')?.error}`, 'error');\n            }\n\n            // Record the event\n            const event: FailoverEvent = {\n                id: `failback-${Date.now()}`,\n                timestamp: startTime,\n                type: 'failback',\n                trigger: 'manual',\n                reason,\n                result,\n                duration: (new Date().getTime() - startTime.getTime()) / 1000,\n                rtoAchieved: result.rtoAchieved,\n                rpoAchieved: result.rpoAchieved,\n            };\n\n            this.failoverHistory.push(event);\n\n            return result;\n\n        } finally {\n            this.isFailoverInProgress = false;\n        }\n    }\n\n    /**\n     * Test disaster recovery without affecting production\n     */\n    async testDisasterRecovery(): Promise<any> {\n        const startTime = new Date();\n\n        try {\n            await this.sendNotification('DR test started', 'info');\n\n            const result = await this.orchestrator.testDisasterRecovery();\n\n            // Record the test event\n            const event: FailoverEvent = {\n                id: `dr-test-${Date.now()}`,\n                timestamp: startTime,\n                type: 'test',\n                trigger: 'manual',\n                reason: 'Disaster recovery test',\n                result: {\n                    success: result.success,\n                    rtoAchieved: result.estimatedRTO,\n                    rpoAchieved: result.estimatedRPO,\n                    steps: [],\n                },\n                duration: (new Date().getTime() - startTime.getTime()) / 1000,\n                rtoAchieved: result.estimatedRTO,\n                rpoAchieved: result.estimatedRPO,\n            };\n\n            this.failoverHistory.push(event);\n\n            if (result.success) {\n                await this.sendNotification('DR test completed successfully', 'success');\n            } else {\n                await this.sendNotification(\n                    `DR test found issues: ${result.recommendations.join(', ')}`,\n                    'warning'\n                );\n            }\n\n            return result;\n\n        } catch (error) {\n            await this.sendNotification(`DR test failed: ${error}`, 'error');\n            throw error;\n        }\n    }\n\n    /**\n     * Get current system status\n     */\n    async getSystemStatus(): Promise<{\n        currentRegion: 'primary' | 'secondary';\n        isFailoverInProgress: boolean;\n        lastFailover?: FailoverEvent;\n        healthStatus: any;\n        rtoCompliance: boolean;\n        rpoCompliance: boolean;\n    }> {\n        let healthStatus;\n        try {\n            healthStatus = await this.healthChecker.checkAllServices();\n        } catch (error) {\n            // Handle health check errors gracefully\n            healthStatus = {\n                overall: 'unhealthy' as const,\n                regions: {\n                    primary: { status: 'unhealthy' as const },\n                    secondary: { status: 'unhealthy' as const },\n                },\n                services: [],\n                lastUpdated: new Date(),\n                error: error instanceof Error ? error.message : 'Unknown error',\n            };\n        }\n\n        const lastFailover = this.failoverHistory\n            .filter(e => e.type === 'failover')\n            .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())[0];\n\n        const rtoCompliance = !lastFailover || lastFailover.rtoAchieved <= this.policy.rtoTarget;\n        const rpoCompliance = !lastFailover || lastFailover.rpoAchieved <= this.policy.rpoTarget;\n\n        return {\n            currentRegion: this.currentRegion,\n            isFailoverInProgress: this.isFailoverInProgress,\n            lastFailover,\n            healthStatus,\n            rtoCompliance,\n            rpoCompliance,\n        };\n    }\n\n    /**\n     * Get failover history\n     */\n    getFailoverHistory(limit?: number): FailoverEvent[] {\n        const sorted = this.failoverHistory.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n        return limit ? sorted.slice(0, limit) : sorted;\n    }\n\n    /**\n     * Update failover policy\n     */\n    updatePolicy(newPolicy: Partial<FailoverPolicy>): void {\n        this.policy = { ...this.policy, ...newPolicy };\n\n        // Restart health monitoring if automatic failover setting changed\n        if (newPolicy.automaticFailover !== undefined) {\n            if (newPolicy.automaticFailover && !this.policy.automaticFailover) {\n                this.startHealthMonitoring();\n            }\n        }\n    }\n\n    /**\n     * Send notification to configured endpoints\n     */\n    private async sendNotification(message: string, level: 'info' | 'warning' | 'error' | 'success'): Promise<void> {\n        const notification = {\n            timestamp: new Date().toISOString(),\n            level,\n            message,\n            service: 'Multi-Region Failover Manager',\n            currentRegion: this.currentRegion,\n        };\n\n        console.log(`[${level.toUpperCase()}] ${message}`);\n\n        // Send to configured notification endpoints\n        for (const endpoint of this.policy.notificationEndpoints) {\n            try {\n                if (endpoint.startsWith('http')) {\n                    // Webhook notification\n                    await fetch(endpoint, {\n                        method: 'POST',\n                        headers: { 'Content-Type': 'application/json' },\n                        body: JSON.stringify(notification),\n                    });\n                } else if (endpoint.includes('@')) {\n                    // Email notification (would need SES integration)\n                    console.log(`Email notification to ${endpoint}: ${message}`);\n                }\n            } catch (error) {\n                console.error(`Failed to send notification to ${endpoint}:`, error);\n            }\n        }\n    }\n\n    /**\n     * Generate failover report\n     */\n    generateFailoverReport(): {\n        summary: {\n            totalFailovers: number;\n            successfulFailovers: number;\n            averageRTO: number;\n            averageRPO: number;\n            rtoCompliance: number;\n            rpoCompliance: number;\n        };\n        recentEvents: FailoverEvent[];\n        recommendations: string[];\n    } {\n        const failovers = this.failoverHistory.filter(e => e.type === 'failover');\n        const successful = failovers.filter(e => e.result.success);\n\n        const averageRTO = successful.length > 0\n            ? successful.reduce((sum, e) => sum + e.rtoAchieved, 0) / successful.length\n            : 0;\n\n        const averageRPO = successful.length > 0\n            ? successful.reduce((sum, e) => sum + e.rpoAchieved, 0) / successful.length\n            : 0;\n\n        const rtoCompliant = successful.filter(e => e.rtoAchieved <= this.policy.rtoTarget).length;\n        const rpoCompliant = successful.filter(e => e.rpoAchieved <= this.policy.rpoTarget).length;\n\n        const recommendations: string[] = [];\n\n        if (averageRTO > this.policy.rtoTarget) {\n            recommendations.push(`Average RTO (${averageRTO.toFixed(1)}min) exceeds target (${this.policy.rtoTarget}min)`);\n        }\n\n        if (averageRPO > this.policy.rpoTarget) {\n            recommendations.push(`Average RPO (${averageRPO.toFixed(1)}min) exceeds target (${this.policy.rpoTarget}min)`);\n        }\n\n        if (successful.length < failovers.length) {\n            recommendations.push(`${failovers.length - successful.length} failover(s) failed - review failure causes`);\n        }\n\n        return {\n            summary: {\n                totalFailovers: failovers.length,\n                successfulFailovers: successful.length,\n                averageRTO,\n                averageRPO,\n                rtoCompliance: successful.length > 0 ? (rtoCompliant / successful.length) * 100 : 100,\n                rpoCompliance: successful.length > 0 ? (rpoCompliant / successful.length) * 100 : 100,\n            },\n            recentEvents: this.getFailoverHistory(10),\n            recommendations,\n        };\n    }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}
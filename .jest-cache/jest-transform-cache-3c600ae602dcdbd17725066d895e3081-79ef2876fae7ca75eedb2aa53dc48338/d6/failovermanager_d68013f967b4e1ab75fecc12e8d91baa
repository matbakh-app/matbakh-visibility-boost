6f52fa3770971d9647e22e254a099dd1
"use strict";

/* istanbul ignore next */
function cov_559lfj0rt() {
  var path = "/Users/matbakh-visibility-boost.20250920/src/lib/multi-region/failover-manager.ts";
  var hash = "212e97bcbb5d9cb915269835084bc5d807081b11";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matbakh-visibility-boost.20250920/src/lib/multi-region/failover-manager.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 25
        },
        end: {
          line: 5,
          column: 52
        }
      },
      "4": {
        start: {
          line: 6,
          column: 36
        },
        end: {
          line: 6,
          column: 74
        }
      },
      "5": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 29
        }
      },
      "6": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 29
        }
      },
      "7": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 42
        }
      },
      "8": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 39
        }
      },
      "9": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 34
        }
      },
      "10": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 108
        }
      },
      "11": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 89
        }
      },
      "12": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 19,
          column: 9
        }
      },
      "13": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 18,
          column: 41
        }
      },
      "14": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 39,
          column: 52
        }
      },
      "15": {
        start: {
          line: 25,
          column: 26
        },
        end: {
          line: 39,
          column: 10
        }
      },
      "16": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 28,
          column: 13
        }
      },
      "17": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 27,
          column: 23
        }
      },
      "18": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 38,
          column: 13
        }
      },
      "19": {
        start: {
          line: 30,
          column: 37
        },
        end: {
          line: 30,
          column: 80
        }
      },
      "20": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 34,
          column: 17
        }
      },
      "21": {
        start: {
          line: 32,
          column: 20
        },
        end: {
          line: 32,
          column: 93
        }
      },
      "22": {
        start: {
          line: 33,
          column: 20
        },
        end: {
          line: 33,
          column: 80
        }
      },
      "23": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 72
        }
      },
      "24": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "25": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 25
        }
      },
      "26": {
        start: {
          line: 48,
          column: 29
        },
        end: {
          line: 48,
          column: 89
        }
      },
      "27": {
        start: {
          line: 48,
          column: 74
        },
        end: {
          line: 48,
          column: 81
        }
      },
      "28": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 71
        }
      },
      "29": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 62,
          column: 11
        }
      },
      "30": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 59,
          column: 13
        }
      },
      "31": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 57,
          column: 88
        }
      },
      "32": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 23
        }
      },
      "33": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 67
        }
      },
      "34": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 60
        }
      },
      "35": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 74,
          column: 11
        }
      },
      "36": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 71,
          column: 13
        }
      },
      "37": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 70,
          column: 64
        }
      },
      "38": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 64
        }
      },
      "39": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 64
        }
      },
      "40": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 124,
          column: 11
        }
      },
      "41": {
        start: {
          line: 82,
          column: 30
        },
        end: {
          line: 82,
          column: 40
        }
      },
      "42": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 45
        }
      },
      "43": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 123,
          column: 13
        }
      },
      "44": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 86
        }
      },
      "45": {
        start: {
          line: 88,
          column: 31
        },
        end: {
          line: 88,
          column: 78
        }
      },
      "46": {
        start: {
          line: 90,
          column: 16
        },
        end: {
          line: 96,
          column: 17
        }
      },
      "47": {
        start: {
          line: 91,
          column: 20
        },
        end: {
          line: 91,
          column: 100
        }
      },
      "48": {
        start: {
          line: 92,
          column: 20
        },
        end: {
          line: 92,
          column: 126
        }
      },
      "49": {
        start: {
          line: 95,
          column: 20
        },
        end: {
          line: 95,
          column: 179
        }
      },
      "50": {
        start: {
          line: 95,
          column: 97
        },
        end: {
          line: 95,
          column: 118
        }
      },
      "51": {
        start: {
          line: 98,
          column: 30
        },
        end: {
          line: 108,
          column: 17
        }
      },
      "52": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 49
        }
      },
      "53": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 118,
          column: 17
        }
      },
      "54": {
        start: {
          line: 112,
          column: 20
        },
        end: {
          line: 114,
          column: 21
        }
      },
      "55": {
        start: {
          line: 113,
          column: 24
        },
        end: {
          line: 113,
          column: 149
        }
      },
      "56": {
        start: {
          line: 115,
          column: 20
        },
        end: {
          line: 117,
          column: 21
        }
      },
      "57": {
        start: {
          line: 116,
          column: 24
        },
        end: {
          line: 116,
          column: 149
        }
      },
      "58": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 30
        }
      },
      "59": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 50
        }
      },
      "60": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 168,
          column: 11
        }
      },
      "61": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 134,
          column: 13
        }
      },
      "62": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 133,
          column: 74
        }
      },
      "63": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 137,
          column: 13
        }
      },
      "64": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 136,
          column: 69
        }
      },
      "65": {
        start: {
          line: 138,
          column: 30
        },
        end: {
          line: 138,
          column: 40
        }
      },
      "66": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 45
        }
      },
      "67": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 167,
          column: 13
        }
      },
      "68": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 141,
          column: 83
        }
      },
      "69": {
        start: {
          line: 142,
          column: 31
        },
        end: {
          line: 142,
          column: 78
        }
      },
      "70": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 149,
          column: 17
        }
      },
      "71": {
        start: {
          line: 144,
          column: 20
        },
        end: {
          line: 144,
          column: 51
        }
      },
      "72": {
        start: {
          line: 145,
          column: 20
        },
        end: {
          line: 145,
          column: 112
        }
      },
      "73": {
        start: {
          line: 148,
          column: 20
        },
        end: {
          line: 148,
          column: 179
        }
      },
      "74": {
        start: {
          line: 148,
          column: 97
        },
        end: {
          line: 148,
          column: 118
        }
      },
      "75": {
        start: {
          line: 151,
          column: 30
        },
        end: {
          line: 161,
          column: 17
        }
      },
      "76": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 162,
          column: 49
        }
      },
      "77": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 163,
          column: 30
        }
      },
      "78": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 166,
          column: 50
        }
      },
      "79": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 209,
          column: 11
        }
      },
      "80": {
        start: {
          line: 175,
          column: 30
        },
        end: {
          line: 175,
          column: 40
        }
      },
      "81": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 208,
          column: 13
        }
      },
      "82": {
        start: {
          line: 177,
          column: 16
        },
        end: {
          line: 177,
          column: 71
        }
      },
      "83": {
        start: {
          line: 178,
          column: 31
        },
        end: {
          line: 178,
          column: 77
        }
      },
      "84": {
        start: {
          line: 180,
          column: 30
        },
        end: {
          line: 195,
          column: 17
        }
      },
      "85": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 196,
          column: 49
        }
      },
      "86": {
        start: {
          line: 197,
          column: 16
        },
        end: {
          line: 202,
          column: 17
        }
      },
      "87": {
        start: {
          line: 198,
          column: 20
        },
        end: {
          line: 198,
          column: 93
        }
      },
      "88": {
        start: {
          line: 201,
          column: 20
        },
        end: {
          line: 201,
          column: 121
        }
      },
      "89": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 203,
          column: 30
        }
      },
      "90": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 206,
          column: 81
        }
      },
      "91": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 207,
          column: 28
        }
      },
      "92": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 246,
          column: 11
        }
      },
      "93": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 232,
          column: 13
        }
      },
      "94": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 218,
          column: 75
        }
      },
      "95": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 231,
          column: 18
        }
      },
      "96": {
        start: {
          line: 233,
          column: 33
        },
        end: {
          line: 235,
          column: 81
        }
      },
      "97": {
        start: {
          line: 234,
          column: 29
        },
        end: {
          line: 234,
          column: 50
        }
      },
      "98": {
        start: {
          line: 235,
          column: 32
        },
        end: {
          line: 235,
          column: 77
        }
      },
      "99": {
        start: {
          line: 236,
          column: 34
        },
        end: {
          line: 236,
          column: 100
        }
      },
      "100": {
        start: {
          line: 237,
          column: 34
        },
        end: {
          line: 237,
          column: 100
        }
      },
      "101": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 245,
          column: 14
        }
      },
      "102": {
        start: {
          line: 252,
          column: 23
        },
        end: {
          line: 252,
          column: 105
        }
      },
      "103": {
        start: {
          line: 252,
          column: 59
        },
        end: {
          line: 252,
          column: 104
        }
      },
      "104": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 253,
          column: 55
        }
      },
      "105": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 259,
          column: 79
        }
      },
      "106": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 265,
          column: 9
        }
      },
      "107": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 264,
          column: 13
        }
      },
      "108": {
        start: {
          line: 263,
          column: 16
        },
        end: {
          line: 263,
          column: 45
        }
      },
      "109": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 300,
          column: 11
        }
      },
      "110": {
        start: {
          line: 272,
          column: 33
        },
        end: {
          line: 278,
          column: 13
        }
      },
      "111": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 279,
          column: 63
        }
      },
      "112": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 299,
          column: 13
        }
      },
      "113": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 298,
          column: 17
        }
      },
      "114": {
        start: {
          line: 283,
          column: 20
        },
        end: {
          line: 294,
          column: 21
        }
      },
      "115": {
        start: {
          line: 285,
          column: 24
        },
        end: {
          line: 289,
          column: 27
        }
      },
      "116": {
        start: {
          line: 291,
          column: 25
        },
        end: {
          line: 294,
          column: 21
        }
      },
      "117": {
        start: {
          line: 293,
          column: 24
        },
        end: {
          line: 293,
          column: 85
        }
      },
      "118": {
        start: {
          line: 297,
          column: 20
        },
        end: {
          line: 297,
          column: 88
        }
      },
      "119": {
        start: {
          line: 306,
          column: 26
        },
        end: {
          line: 306,
          column: 81
        }
      },
      "120": {
        start: {
          line: 306,
          column: 59
        },
        end: {
          line: 306,
          column: 80
        }
      },
      "121": {
        start: {
          line: 307,
          column: 27
        },
        end: {
          line: 307,
          column: 66
        }
      },
      "122": {
        start: {
          line: 307,
          column: 49
        },
        end: {
          line: 307,
          column: 65
        }
      },
      "123": {
        start: {
          line: 308,
          column: 27
        },
        end: {
          line: 310,
          column: 15
        }
      },
      "124": {
        start: {
          line: 309,
          column: 44
        },
        end: {
          line: 309,
          column: 63
        }
      },
      "125": {
        start: {
          line: 311,
          column: 27
        },
        end: {
          line: 313,
          column: 15
        }
      },
      "126": {
        start: {
          line: 312,
          column: 44
        },
        end: {
          line: 312,
          column: 63
        }
      },
      "127": {
        start: {
          line: 314,
          column: 29
        },
        end: {
          line: 314,
          column: 98
        }
      },
      "128": {
        start: {
          line: 314,
          column: 52
        },
        end: {
          line: 314,
          column: 90
        }
      },
      "129": {
        start: {
          line: 315,
          column: 29
        },
        end: {
          line: 315,
          column: 98
        }
      },
      "130": {
        start: {
          line: 315,
          column: 52
        },
        end: {
          line: 315,
          column: 90
        }
      },
      "131": {
        start: {
          line: 316,
          column: 32
        },
        end: {
          line: 316,
          column: 34
        }
      },
      "132": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 319,
          column: 9
        }
      },
      "133": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 318,
          column: 123
        }
      },
      "134": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 322,
          column: 9
        }
      },
      "135": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 321,
          column: 123
        }
      },
      "136": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 325,
          column: 9
        }
      },
      "137": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 324,
          column: 119
        }
      },
      "138": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 337,
          column: 10
        }
      },
      "139": {
        start: {
          line: 340,
          column: 0
        },
        end: {
          line: 340,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 61
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 28
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 24
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 25,
            column: 20
          },
          end: {
            line: 25,
            column: 21
          }
        },
        loc: {
          start: {
            line: 25,
            column: 26
          },
          end: {
            line: 39,
            column: 10
          }
        },
        line: 25
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 25,
            column: 66
          },
          end: {
            line: 25,
            column: 67
          }
        },
        loc: {
          start: {
            line: 25,
            column: 79
          },
          end: {
            line: 39,
            column: 9
          }
        },
        line: 25
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        loc: {
          start: {
            line: 44,
            column: 40
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 44
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 48,
            column: 64
          },
          end: {
            line: 48,
            column: 65
          }
        },
        loc: {
          start: {
            line: 48,
            column: 74
          },
          end: {
            line: 48,
            column: 81
          }
        },
        line: 48
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        loc: {
          start: {
            line: 54,
            column: 37
          },
          end: {
            line: 63,
            column: 5
          }
        },
        line: 54
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 55,
            column: 55
          },
          end: {
            line: 55,
            column: 56
          }
        },
        loc: {
          start: {
            line: 55,
            column: 68
          },
          end: {
            line: 62,
            column: 9
          }
        },
        line: 55
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        },
        loc: {
          start: {
            line: 67,
            column: 34
          },
          end: {
            line: 75,
            column: 5
          }
        },
        line: 67
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 68,
            column: 55
          },
          end: {
            line: 68,
            column: 56
          }
        },
        loc: {
          start: {
            line: 68,
            column: 68
          },
          end: {
            line: 74,
            column: 9
          }
        },
        line: 68
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 37
          },
          end: {
            line: 125,
            column: 5
          }
        },
        line: 79
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 80,
            column: 55
          },
          end: {
            line: 80,
            column: 56
          }
        },
        loc: {
          start: {
            line: 80,
            column: 68
          },
          end: {
            line: 124,
            column: 9
          }
        },
        line: 80
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 95,
            column: 92
          },
          end: {
            line: 95,
            column: 93
          }
        },
        loc: {
          start: {
            line: 95,
            column: 97
          },
          end: {
            line: 95,
            column: 118
          }
        },
        line: 95
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 129,
            column: 5
          }
        },
        loc: {
          start: {
            line: 129,
            column: 22
          },
          end: {
            line: 169,
            column: 5
          }
        },
        line: 129
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 130,
            column: 58
          },
          end: {
            line: 130,
            column: 59
          }
        },
        loc: {
          start: {
            line: 130,
            column: 97
          },
          end: {
            line: 168,
            column: 9
          }
        },
        line: 130
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 148,
            column: 92
          },
          end: {
            line: 148,
            column: 93
          }
        },
        loc: {
          start: {
            line: 148,
            column: 97
          },
          end: {
            line: 148,
            column: 118
          }
        },
        line: 148
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 173,
            column: 4
          },
          end: {
            line: 173,
            column: 5
          }
        },
        loc: {
          start: {
            line: 173,
            column: 27
          },
          end: {
            line: 210,
            column: 5
          }
        },
        line: 173
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 174,
            column: 55
          },
          end: {
            line: 174,
            column: 56
          }
        },
        loc: {
          start: {
            line: 174,
            column: 68
          },
          end: {
            line: 209,
            column: 9
          }
        },
        line: 174
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 214,
            column: 4
          },
          end: {
            line: 214,
            column: 5
          }
        },
        loc: {
          start: {
            line: 214,
            column: 22
          },
          end: {
            line: 247,
            column: 5
          }
        },
        line: 214
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 215,
            column: 55
          },
          end: {
            line: 215,
            column: 56
          }
        },
        loc: {
          start: {
            line: 215,
            column: 68
          },
          end: {
            line: 246,
            column: 9
          }
        },
        line: 215
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 234,
            column: 24
          },
          end: {
            line: 234,
            column: 25
          }
        },
        loc: {
          start: {
            line: 234,
            column: 29
          },
          end: {
            line: 234,
            column: 50
          }
        },
        line: 234
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 235,
            column: 22
          },
          end: {
            line: 235,
            column: 23
          }
        },
        loc: {
          start: {
            line: 235,
            column: 32
          },
          end: {
            line: 235,
            column: 77
          }
        },
        line: 235
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 251,
            column: 4
          },
          end: {
            line: 251,
            column: 5
          }
        },
        loc: {
          start: {
            line: 251,
            column: 30
          },
          end: {
            line: 254,
            column: 5
          }
        },
        line: 251
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 252,
            column: 49
          },
          end: {
            line: 252,
            column: 50
          }
        },
        loc: {
          start: {
            line: 252,
            column: 59
          },
          end: {
            line: 252,
            column: 104
          }
        },
        line: 252
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 258,
            column: 4
          },
          end: {
            line: 258,
            column: 5
          }
        },
        loc: {
          start: {
            line: 258,
            column: 28
          },
          end: {
            line: 266,
            column: 5
          }
        },
        line: 258
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 270,
            column: 4
          },
          end: {
            line: 270,
            column: 5
          }
        },
        loc: {
          start: {
            line: 270,
            column: 37
          },
          end: {
            line: 301,
            column: 5
          }
        },
        line: 270
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 271,
            column: 55
          },
          end: {
            line: 271,
            column: 56
          }
        },
        loc: {
          start: {
            line: 271,
            column: 68
          },
          end: {
            line: 300,
            column: 9
          }
        },
        line: 271
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 305,
            column: 4
          },
          end: {
            line: 305,
            column: 5
          }
        },
        loc: {
          start: {
            line: 305,
            column: 29
          },
          end: {
            line: 338,
            column: 5
          }
        },
        line: 305
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 306,
            column: 54
          },
          end: {
            line: 306,
            column: 55
          }
        },
        loc: {
          start: {
            line: 306,
            column: 59
          },
          end: {
            line: 306,
            column: 80
          }
        },
        line: 306
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 307,
            column: 44
          },
          end: {
            line: 307,
            column: 45
          }
        },
        loc: {
          start: {
            line: 307,
            column: 49
          },
          end: {
            line: 307,
            column: 65
          }
        },
        line: 307
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 309,
            column: 32
          },
          end: {
            line: 309,
            column: 33
          }
        },
        loc: {
          start: {
            line: 309,
            column: 44
          },
          end: {
            line: 309,
            column: 63
          }
        },
        line: 309
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 312,
            column: 32
          },
          end: {
            line: 312,
            column: 33
          }
        },
        loc: {
          start: {
            line: 312,
            column: 44
          },
          end: {
            line: 312,
            column: 63
          }
        },
        line: 312
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 314,
            column: 47
          },
          end: {
            line: 314,
            column: 48
          }
        },
        loc: {
          start: {
            line: 314,
            column: 52
          },
          end: {
            line: 314,
            column: 90
          }
        },
        line: 314
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 315,
            column: 47
          },
          end: {
            line: 315,
            column: 48
          }
        },
        loc: {
          start: {
            line: 315,
            column: 52
          },
          end: {
            line: 315,
            column: 90
          }
        },
        line: 315
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 28
          },
          end: {
            line: 15,
            column: 107
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 28
          },
          end: {
            line: 15,
            column: 40
          }
        }, {
          start: {
            line: 15,
            column: 44
          },
          end: {
            line: 15,
            column: 107
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 16,
            column: 29
          },
          end: {
            line: 16,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 29
          },
          end: {
            line: 16,
            column: 42
          }
        }, {
          start: {
            line: 16,
            column: 46
          },
          end: {
            line: 16,
            column: 88
          }
        }],
        line: 16
      },
      "2": {
        loc: {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 19,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 19,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "3": {
        loc: {
          start: {
            line: 26,
            column: 12
          },
          end: {
            line: 28,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 12
          },
          end: {
            line: 28,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "4": {
        loc: {
          start: {
            line: 31,
            column: 16
          },
          end: {
            line: 34,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 16
          },
          end: {
            line: 34,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "5": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "6": {
        loc: {
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "7": {
        loc: {
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 71,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 71,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "8": {
        loc: {
          start: {
            line: 90,
            column: 16
          },
          end: {
            line: 96,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 16
          },
          end: {
            line: 96,
            column: 17
          }
        }, {
          start: {
            line: 94,
            column: 21
          },
          end: {
            line: 96,
            column: 17
          }
        }],
        line: 90
      },
      "9": {
        loc: {
          start: {
            line: 91,
            column: 41
          },
          end: {
            line: 91,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 91,
            column: 76
          },
          end: {
            line: 91,
            column: 87
          }
        }, {
          start: {
            line: 91,
            column: 90
          },
          end: {
            line: 91,
            column: 99
          }
        }],
        line: 91
      },
      "10": {
        loc: {
          start: {
            line: 95,
            column: 68
          },
          end: {
            line: 95,
            column: 166
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 95,
            column: 149
          },
          end: {
            line: 95,
            column: 155
          }
        }, {
          start: {
            line: 95,
            column: 158
          },
          end: {
            line: 95,
            column: 166
          }
        }],
        line: 95
      },
      "11": {
        loc: {
          start: {
            line: 95,
            column: 68
          },
          end: {
            line: 95,
            column: 146
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 68
          },
          end: {
            line: 95,
            column: 129
          }
        }, {
          start: {
            line: 95,
            column: 133
          },
          end: {
            line: 95,
            column: 146
          }
        }],
        line: 95
      },
      "12": {
        loc: {
          start: {
            line: 111,
            column: 16
          },
          end: {
            line: 118,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 16
          },
          end: {
            line: 118,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "13": {
        loc: {
          start: {
            line: 112,
            column: 20
          },
          end: {
            line: 114,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 20
          },
          end: {
            line: 114,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "14": {
        loc: {
          start: {
            line: 115,
            column: 20
          },
          end: {
            line: 117,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 20
          },
          end: {
            line: 117,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "15": {
        loc: {
          start: {
            line: 130,
            column: 69
          },
          end: {
            line: 130,
            column: 95
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 130,
            column: 78
          },
          end: {
            line: 130,
            column: 95
          }
        }],
        line: 130
      },
      "16": {
        loc: {
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 134,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 134,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      },
      "17": {
        loc: {
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "18": {
        loc: {
          start: {
            line: 143,
            column: 16
          },
          end: {
            line: 149,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 16
          },
          end: {
            line: 149,
            column: 17
          }
        }, {
          start: {
            line: 147,
            column: 21
          },
          end: {
            line: 149,
            column: 17
          }
        }],
        line: 143
      },
      "19": {
        loc: {
          start: {
            line: 148,
            column: 68
          },
          end: {
            line: 148,
            column: 166
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 148,
            column: 149
          },
          end: {
            line: 148,
            column: 155
          }
        }, {
          start: {
            line: 148,
            column: 158
          },
          end: {
            line: 148,
            column: 166
          }
        }],
        line: 148
      },
      "20": {
        loc: {
          start: {
            line: 148,
            column: 68
          },
          end: {
            line: 148,
            column: 146
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 148,
            column: 68
          },
          end: {
            line: 148,
            column: 129
          }
        }, {
          start: {
            line: 148,
            column: 133
          },
          end: {
            line: 148,
            column: 146
          }
        }],
        line: 148
      },
      "21": {
        loc: {
          start: {
            line: 197,
            column: 16
          },
          end: {
            line: 202,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 16
          },
          end: {
            line: 202,
            column: 17
          }
        }, {
          start: {
            line: 200,
            column: 21
          },
          end: {
            line: 202,
            column: 17
          }
        }],
        line: 197
      },
      "22": {
        loc: {
          start: {
            line: 230,
            column: 27
          },
          end: {
            line: 230,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 230,
            column: 52
          },
          end: {
            line: 230,
            column: 65
          }
        }, {
          start: {
            line: 230,
            column: 68
          },
          end: {
            line: 230,
            column: 83
          }
        }],
        line: 230
      },
      "23": {
        loc: {
          start: {
            line: 236,
            column: 34
          },
          end: {
            line: 236,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 236,
            column: 34
          },
          end: {
            line: 236,
            column: 47
          }
        }, {
          start: {
            line: 236,
            column: 51
          },
          end: {
            line: 236,
            column: 100
          }
        }],
        line: 236
      },
      "24": {
        loc: {
          start: {
            line: 237,
            column: 34
          },
          end: {
            line: 237,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 237,
            column: 34
          },
          end: {
            line: 237,
            column: 47
          }
        }, {
          start: {
            line: 237,
            column: 51
          },
          end: {
            line: 237,
            column: 100
          }
        }],
        line: 237
      },
      "25": {
        loc: {
          start: {
            line: 253,
            column: 15
          },
          end: {
            line: 253,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 253,
            column: 23
          },
          end: {
            line: 253,
            column: 45
          }
        }, {
          start: {
            line: 253,
            column: 48
          },
          end: {
            line: 253,
            column: 54
          }
        }],
        line: 253
      },
      "26": {
        loc: {
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 265,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 265,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "27": {
        loc: {
          start: {
            line: 262,
            column: 12
          },
          end: {
            line: 264,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 262,
            column: 12
          },
          end: {
            line: 264,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 262
      },
      "28": {
        loc: {
          start: {
            line: 262,
            column: 16
          },
          end: {
            line: 262,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 262,
            column: 16
          },
          end: {
            line: 262,
            column: 43
          }
        }, {
          start: {
            line: 262,
            column: 47
          },
          end: {
            line: 262,
            column: 77
          }
        }],
        line: 262
      },
      "29": {
        loc: {
          start: {
            line: 283,
            column: 20
          },
          end: {
            line: 294,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 20
          },
          end: {
            line: 294,
            column: 21
          }
        }, {
          start: {
            line: 291,
            column: 25
          },
          end: {
            line: 294,
            column: 21
          }
        }],
        line: 283
      },
      "30": {
        loc: {
          start: {
            line: 291,
            column: 25
          },
          end: {
            line: 294,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 291,
            column: 25
          },
          end: {
            line: 294,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 291
      },
      "31": {
        loc: {
          start: {
            line: 308,
            column: 27
          },
          end: {
            line: 310,
            column: 15
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 309,
            column: 14
          },
          end: {
            line: 309,
            column: 87
          }
        }, {
          start: {
            line: 310,
            column: 14
          },
          end: {
            line: 310,
            column: 15
          }
        }],
        line: 308
      },
      "32": {
        loc: {
          start: {
            line: 311,
            column: 27
          },
          end: {
            line: 313,
            column: 15
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 312,
            column: 14
          },
          end: {
            line: 312,
            column: 87
          }
        }, {
          start: {
            line: 313,
            column: 14
          },
          end: {
            line: 313,
            column: 15
          }
        }],
        line: 311
      },
      "33": {
        loc: {
          start: {
            line: 317,
            column: 8
          },
          end: {
            line: 319,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 317,
            column: 8
          },
          end: {
            line: 319,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 317
      },
      "34": {
        loc: {
          start: {
            line: 320,
            column: 8
          },
          end: {
            line: 322,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 320,
            column: 8
          },
          end: {
            line: 322,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 320
      },
      "35": {
        loc: {
          start: {
            line: 323,
            column: 8
          },
          end: {
            line: 325,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 323,
            column: 8
          },
          end: {
            line: 325,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 323
      },
      "36": {
        loc: {
          start: {
            line: 332,
            column: 31
          },
          end: {
            line: 332,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 332,
            column: 55
          },
          end: {
            line: 332,
            column: 95
          }
        }, {
          start: {
            line: 332,
            column: 98
          },
          end: {
            line: 332,
            column: 101
          }
        }],
        line: 332
      },
      "37": {
        loc: {
          start: {
            line: 333,
            column: 31
          },
          end: {
            line: 333,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 333,
            column: 55
          },
          end: {
            line: 333,
            column: 95
          }
        }, {
          start: {
            line: 333,
            column: 98
          },
          end: {
            line: 333,
            column: 101
          }
        }],
        line: 333
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/matbakh-visibility-boost.20250920/src/lib/multi-region/failover-manager.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/matbakh-visibility-boost.20250920/src/lib/multi-region/failover-manager.ts"],
      sourcesContent: ["import { HealthChecker } from './health-checker';\nimport { FailoverResult, MultiRegionConfig, MultiRegionOrchestrator } from './multi-region-orchestrator';\n\nexport interface FailoverPolicy {\n    automaticFailover: boolean;\n    healthCheckFailureThreshold: number;\n    healthCheckInterval: number; // seconds\n    rtoTarget: number; // minutes\n    rpoTarget: number; // minutes\n    notificationEndpoints: string[];\n}\n\nexport interface FailoverEvent {\n    id: string;\n    timestamp: Date;\n    type: 'failover' | 'failback' | 'test';\n    trigger: 'automatic' | 'manual';\n    reason: string;\n    result: FailoverResult;\n    duration: number;\n    rtoAchieved: number;\n    rpoAchieved: number;\n}\n\nexport class FailoverManager {\n    private orchestrator: MultiRegionOrchestrator;\n    private healthChecker: HealthChecker;\n    private isFailoverInProgress = false;\n    private currentRegion: 'primary' | 'secondary' = 'primary';\n    private failoverHistory: FailoverEvent[] = [];\n\n    constructor(\n        private config: MultiRegionConfig,\n        private policy: FailoverPolicy,\n        orchestrator?: MultiRegionOrchestrator,\n        healthChecker?: HealthChecker\n    ) {\n        // Allow dependency injection for testing\n        this.orchestrator = orchestrator || new MultiRegionOrchestrator(config);\n        this.healthChecker = healthChecker || new HealthChecker(config);\n\n        if (policy.automaticFailover) {\n            this.startHealthMonitoring();\n        }\n    }\n\n    /**\n     * Start continuous health monitoring for automatic failover\n     */\n    private startHealthMonitoring(): void {\n        setInterval(async () => {\n            if (this.isFailoverInProgress) {\n                return; // Skip if failover is already in progress\n            }\n\n            try {\n                const healthStatus = await this.healthChecker.checkAllServices();\n\n                if (this.shouldTriggerFailover(healthStatus)) {\n                    console.log('Automatic failover triggered due to health check failures');\n                    await this.executeAutomaticFailover('Health check failure');\n                }\n            } catch (error) {\n                console.error('Error during health monitoring:', error);\n            }\n        }, this.policy.healthCheckInterval * 1000);\n    }\n\n    /**\n     * Determine if automatic failover should be triggered\n     */\n    private shouldTriggerFailover(healthStatus: any): boolean {\n        if (this.currentRegion === 'secondary') {\n            return false; // Already failed over\n        }\n\n        const failedChecks = Object.values(healthStatus).filter(status => !status).length;\n        return failedChecks >= this.policy.healthCheckFailureThreshold;\n    }\n\n    /**\n     * Execute automatic failover\n     */\n    private async executeAutomaticFailover(reason: string): Promise<void> {\n        if (this.isFailoverInProgress) {\n            console.log('Failover already in progress, skipping automatic trigger');\n            return;\n        }\n\n        console.log(`Executing automatic failover: ${reason}`);\n        await this.executeFailover(reason, 'automatic');\n    }\n\n    /**\n     * Execute manual failover\n     */\n    async executeManualFailover(reason: string): Promise<FailoverResult> {\n        if (this.isFailoverInProgress) {\n            throw new Error('Failover already in progress');\n        }\n\n        console.log(`Executing manual failover: ${reason}`);\n        return await this.executeFailover(reason, 'manual');\n    }\n\n    /**\n     * Execute failover (common logic for automatic and manual)\n     */\n    private async executeFailover(reason: string, trigger: 'automatic' | 'manual'): Promise<FailoverResult> {\n        const startTime = new Date();\n        this.isFailoverInProgress = true;\n\n        try {\n            // Send notification about failover start\n            await this.sendNotification(`Failover started: ${reason}`, 'warning');\n\n            // Execute the failover\n            const result = await this.orchestrator.executeFailover(reason);\n\n            // Update current region if successful\n            if (result.success) {\n                this.currentRegion = this.currentRegion === 'primary' ? 'secondary' : 'primary';\n                await this.sendNotification(`Failover completed successfully to ${this.currentRegion} region`, 'success');\n            } else {\n                await this.sendNotification(`Failover failed: ${result.steps.find(s => s.status === 'failed')?.error}`, 'error');\n            }\n\n            // Record the event\n            const event: FailoverEvent = {\n                id: `failover-${Date.now()}`,\n                timestamp: startTime,\n                type: 'failover',\n                trigger,\n                reason,\n                result,\n                duration: (new Date().getTime() - startTime.getTime()) / 1000,\n                rtoAchieved: result.rtoAchieved,\n                rpoAchieved: result.rpoAchieved,\n            };\n\n            this.failoverHistory.push(event);\n\n            // Check if RTO/RPO targets were met\n            if (result.success) {\n                if (result.rtoAchieved > this.policy.rtoTarget) {\n                    await this.sendNotification(\n                        `RTO target exceeded: ${result.rtoAchieved}min > ${this.policy.rtoTarget}min target`,\n                        'warning'\n                    );\n                }\n\n                if (result.rpoAchieved > this.policy.rpoTarget) {\n                    await this.sendNotification(\n                        `RPO target exceeded: ${result.rpoAchieved}min > ${this.policy.rpoTarget}min target`,\n                        'warning'\n                    );\n                }\n            }\n\n            return result;\n\n        } finally {\n            this.isFailoverInProgress = false;\n        }\n    }\n\n    /**\n     * Execute failback to primary region\n     */\n    async executeFailback(reason: string = 'Manual failback'): Promise<FailoverResult> {\n        if (this.isFailoverInProgress) {\n            throw new Error('Failover operation already in progress');\n        }\n\n        if (this.currentRegion === 'primary') {\n            throw new Error('Already running on primary region');\n        }\n\n        const startTime = new Date();\n        this.isFailoverInProgress = true;\n\n        try {\n            await this.sendNotification(`Failback started: ${reason}`, 'info');\n\n            const result = await this.orchestrator.executeFailback(reason);\n\n            if (result.success) {\n                this.currentRegion = 'primary';\n                await this.sendNotification('Failback completed successfully to primary region', 'success');\n            } else {\n                await this.sendNotification(`Failback failed: ${result.steps.find(s => s.status === 'failed')?.error}`, 'error');\n            }\n\n            // Record the event\n            const event: FailoverEvent = {\n                id: `failback-${Date.now()}`,\n                timestamp: startTime,\n                type: 'failback',\n                trigger: 'manual',\n                reason,\n                result,\n                duration: (new Date().getTime() - startTime.getTime()) / 1000,\n                rtoAchieved: result.rtoAchieved,\n                rpoAchieved: result.rpoAchieved,\n            };\n\n            this.failoverHistory.push(event);\n\n            return result;\n\n        } finally {\n            this.isFailoverInProgress = false;\n        }\n    }\n\n    /**\n     * Test disaster recovery without affecting production\n     */\n    async testDisasterRecovery(): Promise<any> {\n        const startTime = new Date();\n\n        try {\n            await this.sendNotification('DR test started', 'info');\n\n            const result = await this.orchestrator.testDisasterRecovery();\n\n            // Record the test event\n            const event: FailoverEvent = {\n                id: `dr-test-${Date.now()}`,\n                timestamp: startTime,\n                type: 'test',\n                trigger: 'manual',\n                reason: 'Disaster recovery test',\n                result: {\n                    success: result.success,\n                    rtoAchieved: result.estimatedRTO,\n                    rpoAchieved: result.estimatedRPO,\n                    steps: [],\n                },\n                duration: (new Date().getTime() - startTime.getTime()) / 1000,\n                rtoAchieved: result.estimatedRTO,\n                rpoAchieved: result.estimatedRPO,\n            };\n\n            this.failoverHistory.push(event);\n\n            if (result.success) {\n                await this.sendNotification('DR test completed successfully', 'success');\n            } else {\n                await this.sendNotification(\n                    `DR test found issues: ${result.recommendations.join(', ')}`,\n                    'warning'\n                );\n            }\n\n            return result;\n\n        } catch (error) {\n            await this.sendNotification(`DR test failed: ${error}`, 'error');\n            throw error;\n        }\n    }\n\n    /**\n     * Get current system status\n     */\n    async getSystemStatus(): Promise<{\n        currentRegion: 'primary' | 'secondary';\n        isFailoverInProgress: boolean;\n        lastFailover?: FailoverEvent;\n        healthStatus: any;\n        rtoCompliance: boolean;\n        rpoCompliance: boolean;\n    }> {\n        let healthStatus;\n        try {\n            healthStatus = await this.healthChecker.checkAllServices();\n        } catch (error) {\n            // Handle health check errors gracefully\n            healthStatus = {\n                overall: 'unhealthy' as const,\n                regions: {\n                    primary: { status: 'unhealthy' as const },\n                    secondary: { status: 'unhealthy' as const },\n                },\n                services: [],\n                lastUpdated: new Date(),\n                error: error instanceof Error ? error.message : 'Unknown error',\n            };\n        }\n\n        const lastFailover = this.failoverHistory\n            .filter(e => e.type === 'failover')\n            .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())[0];\n\n        const rtoCompliance = !lastFailover || lastFailover.rtoAchieved <= this.policy.rtoTarget;\n        const rpoCompliance = !lastFailover || lastFailover.rpoAchieved <= this.policy.rpoTarget;\n\n        return {\n            currentRegion: this.currentRegion,\n            isFailoverInProgress: this.isFailoverInProgress,\n            lastFailover,\n            healthStatus,\n            rtoCompliance,\n            rpoCompliance,\n        };\n    }\n\n    /**\n     * Get failover history\n     */\n    getFailoverHistory(limit?: number): FailoverEvent[] {\n        const sorted = this.failoverHistory.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n        return limit ? sorted.slice(0, limit) : sorted;\n    }\n\n    /**\n     * Update failover policy\n     */\n    updatePolicy(newPolicy: Partial<FailoverPolicy>): void {\n        this.policy = { ...this.policy, ...newPolicy };\n\n        // Restart health monitoring if automatic failover setting changed\n        if (newPolicy.automaticFailover !== undefined) {\n            if (newPolicy.automaticFailover && !this.policy.automaticFailover) {\n                this.startHealthMonitoring();\n            }\n        }\n    }\n\n    /**\n     * Send notification to configured endpoints\n     */\n    private async sendNotification(message: string, level: 'info' | 'warning' | 'error' | 'success'): Promise<void> {\n        const notification = {\n            timestamp: new Date().toISOString(),\n            level,\n            message,\n            service: 'Multi-Region Failover Manager',\n            currentRegion: this.currentRegion,\n        };\n\n        console.log(`[${level.toUpperCase()}] ${message}`);\n\n        // Send to configured notification endpoints\n        for (const endpoint of this.policy.notificationEndpoints) {\n            try {\n                if (endpoint.startsWith('http')) {\n                    // Webhook notification\n                    await fetch(endpoint, {\n                        method: 'POST',\n                        headers: { 'Content-Type': 'application/json' },\n                        body: JSON.stringify(notification),\n                    });\n                } else if (endpoint.includes('@')) {\n                    // Email notification (would need SES integration)\n                    console.log(`Email notification to ${endpoint}: ${message}`);\n                }\n            } catch (error) {\n                console.error(`Failed to send notification to ${endpoint}:`, error);\n            }\n        }\n    }\n\n    /**\n     * Generate failover report\n     */\n    generateFailoverReport(): {\n        summary: {\n            totalFailovers: number;\n            successfulFailovers: number;\n            averageRTO: number;\n            averageRPO: number;\n            rtoCompliance: number;\n            rpoCompliance: number;\n        };\n        recentEvents: FailoverEvent[];\n        recommendations: string[];\n    } {\n        const failovers = this.failoverHistory.filter(e => e.type === 'failover');\n        const successful = failovers.filter(e => e.result.success);\n\n        const averageRTO = successful.length > 0\n            ? successful.reduce((sum, e) => sum + e.rtoAchieved, 0) / successful.length\n            : 0;\n\n        const averageRPO = successful.length > 0\n            ? successful.reduce((sum, e) => sum + e.rpoAchieved, 0) / successful.length\n            : 0;\n\n        const rtoCompliant = successful.filter(e => e.rtoAchieved <= this.policy.rtoTarget).length;\n        const rpoCompliant = successful.filter(e => e.rpoAchieved <= this.policy.rpoTarget).length;\n\n        const recommendations: string[] = [];\n\n        if (averageRTO > this.policy.rtoTarget) {\n            recommendations.push(`Average RTO (${averageRTO.toFixed(1)}min) exceeds target (${this.policy.rtoTarget}min)`);\n        }\n\n        if (averageRPO > this.policy.rpoTarget) {\n            recommendations.push(`Average RPO (${averageRPO.toFixed(1)}min) exceeds target (${this.policy.rpoTarget}min)`);\n        }\n\n        if (successful.length < failovers.length) {\n            recommendations.push(`${failovers.length - successful.length} failover(s) failed - review failure causes`);\n        }\n\n        return {\n            summary: {\n                totalFailovers: failovers.length,\n                successfulFailovers: successful.length,\n                averageRTO,\n                averageRPO,\n                rtoCompliance: successful.length > 0 ? (rtoCompliant / successful.length) * 100 : 100,\n                rpoCompliance: successful.length > 0 ? (rpoCompliant / successful.length) * 100 : 100,\n            },\n            recentEvents: this.getFailoverHistory(10),\n            recommendations,\n        };\n    }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "212e97bcbb5d9cb915269835084bc5d807081b11"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_559lfj0rt = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_559lfj0rt();
cov_559lfj0rt().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_559lfj0rt().s[1]++;
exports.FailoverManager = void 0;
const tslib_1 =
/* istanbul ignore next */
(cov_559lfj0rt().s[2]++, require("tslib"));
const health_checker_1 =
/* istanbul ignore next */
(cov_559lfj0rt().s[3]++, require("./health-checker"));
const multi_region_orchestrator_1 =
/* istanbul ignore next */
(cov_559lfj0rt().s[4]++, require("./multi-region-orchestrator"));
class FailoverManager {
  constructor(config, policy, orchestrator, healthChecker) {
    /* istanbul ignore next */
    cov_559lfj0rt().f[0]++;
    cov_559lfj0rt().s[5]++;
    this.config = config;
    /* istanbul ignore next */
    cov_559lfj0rt().s[6]++;
    this.policy = policy;
    /* istanbul ignore next */
    cov_559lfj0rt().s[7]++;
    this.isFailoverInProgress = false;
    /* istanbul ignore next */
    cov_559lfj0rt().s[8]++;
    this.currentRegion = 'primary';
    /* istanbul ignore next */
    cov_559lfj0rt().s[9]++;
    this.failoverHistory = [];
    // Allow dependency injection for testing
    /* istanbul ignore next */
    cov_559lfj0rt().s[10]++;
    this.orchestrator =
    /* istanbul ignore next */
    (cov_559lfj0rt().b[0][0]++, orchestrator) ||
    /* istanbul ignore next */
    (cov_559lfj0rt().b[0][1]++, new multi_region_orchestrator_1.MultiRegionOrchestrator(config));
    /* istanbul ignore next */
    cov_559lfj0rt().s[11]++;
    this.healthChecker =
    /* istanbul ignore next */
    (cov_559lfj0rt().b[1][0]++, healthChecker) ||
    /* istanbul ignore next */
    (cov_559lfj0rt().b[1][1]++, new health_checker_1.HealthChecker(config));
    /* istanbul ignore next */
    cov_559lfj0rt().s[12]++;
    if (policy.automaticFailover) {
      /* istanbul ignore next */
      cov_559lfj0rt().b[2][0]++;
      cov_559lfj0rt().s[13]++;
      this.startHealthMonitoring();
    } else
    /* istanbul ignore next */
    {
      cov_559lfj0rt().b[2][1]++;
    }
  }
  /**
   * Start continuous health monitoring for automatic failover
   */
  startHealthMonitoring() {
    /* istanbul ignore next */
    cov_559lfj0rt().f[1]++;
    cov_559lfj0rt().s[14]++;
    setInterval(() => {
      /* istanbul ignore next */
      cov_559lfj0rt().f[2]++;
      cov_559lfj0rt().s[15]++;
      return tslib_1.__awaiter(this, void 0, void 0, function* () {
        /* istanbul ignore next */
        cov_559lfj0rt().f[3]++;
        cov_559lfj0rt().s[16]++;
        if (this.isFailoverInProgress) {
          /* istanbul ignore next */
          cov_559lfj0rt().b[3][0]++;
          cov_559lfj0rt().s[17]++;
          return; // Skip if failover is already in progress
        } else
        /* istanbul ignore next */
        {
          cov_559lfj0rt().b[3][1]++;
        }
        cov_559lfj0rt().s[18]++;
        try {
          const healthStatus =
          /* istanbul ignore next */
          (cov_559lfj0rt().s[19]++, yield this.healthChecker.checkAllServices());
          /* istanbul ignore next */
          cov_559lfj0rt().s[20]++;
          if (this.shouldTriggerFailover(healthStatus)) {
            /* istanbul ignore next */
            cov_559lfj0rt().b[4][0]++;
            cov_559lfj0rt().s[21]++;
            console.log('Automatic failover triggered due to health check failures');
            /* istanbul ignore next */
            cov_559lfj0rt().s[22]++;
            yield this.executeAutomaticFailover('Health check failure');
          } else
          /* istanbul ignore next */
          {
            cov_559lfj0rt().b[4][1]++;
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_559lfj0rt().s[23]++;
          console.error('Error during health monitoring:', error);
        }
      });
    }, this.policy.healthCheckInterval * 1000);
  }
  /**
   * Determine if automatic failover should be triggered
   */
  shouldTriggerFailover(healthStatus) {
    /* istanbul ignore next */
    cov_559lfj0rt().f[4]++;
    cov_559lfj0rt().s[24]++;
    if (this.currentRegion === 'secondary') {
      /* istanbul ignore next */
      cov_559lfj0rt().b[5][0]++;
      cov_559lfj0rt().s[25]++;
      return false; // Already failed over
    } else
    /* istanbul ignore next */
    {
      cov_559lfj0rt().b[5][1]++;
    }
    const failedChecks =
    /* istanbul ignore next */
    (cov_559lfj0rt().s[26]++, Object.values(healthStatus).filter(status => {
      /* istanbul ignore next */
      cov_559lfj0rt().f[5]++;
      cov_559lfj0rt().s[27]++;
      return !status;
    }).length);
    /* istanbul ignore next */
    cov_559lfj0rt().s[28]++;
    return failedChecks >= this.policy.healthCheckFailureThreshold;
  }
  /**
   * Execute automatic failover
   */
  executeAutomaticFailover(reason) {
    /* istanbul ignore next */
    cov_559lfj0rt().f[6]++;
    cov_559lfj0rt().s[29]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_559lfj0rt().f[7]++;
      cov_559lfj0rt().s[30]++;
      if (this.isFailoverInProgress) {
        /* istanbul ignore next */
        cov_559lfj0rt().b[6][0]++;
        cov_559lfj0rt().s[31]++;
        console.log('Failover already in progress, skipping automatic trigger');
        /* istanbul ignore next */
        cov_559lfj0rt().s[32]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_559lfj0rt().b[6][1]++;
      }
      cov_559lfj0rt().s[33]++;
      console.log(`Executing automatic failover: ${reason}`);
      /* istanbul ignore next */
      cov_559lfj0rt().s[34]++;
      yield this.executeFailover(reason, 'automatic');
    });
  }
  /**
   * Execute manual failover
   */
  executeManualFailover(reason) {
    /* istanbul ignore next */
    cov_559lfj0rt().f[8]++;
    cov_559lfj0rt().s[35]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_559lfj0rt().f[9]++;
      cov_559lfj0rt().s[36]++;
      if (this.isFailoverInProgress) {
        /* istanbul ignore next */
        cov_559lfj0rt().b[7][0]++;
        cov_559lfj0rt().s[37]++;
        throw new Error('Failover already in progress');
      } else
      /* istanbul ignore next */
      {
        cov_559lfj0rt().b[7][1]++;
      }
      cov_559lfj0rt().s[38]++;
      console.log(`Executing manual failover: ${reason}`);
      /* istanbul ignore next */
      cov_559lfj0rt().s[39]++;
      return yield this.executeFailover(reason, 'manual');
    });
  }
  /**
   * Execute failover (common logic for automatic and manual)
   */
  executeFailover(reason, trigger) {
    /* istanbul ignore next */
    cov_559lfj0rt().f[10]++;
    cov_559lfj0rt().s[40]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_559lfj0rt().f[11]++;
      var _a;
      const startTime =
      /* istanbul ignore next */
      (cov_559lfj0rt().s[41]++, new Date());
      /* istanbul ignore next */
      cov_559lfj0rt().s[42]++;
      this.isFailoverInProgress = true;
      /* istanbul ignore next */
      cov_559lfj0rt().s[43]++;
      try {
        /* istanbul ignore next */
        cov_559lfj0rt().s[44]++;
        // Send notification about failover start
        yield this.sendNotification(`Failover started: ${reason}`, 'warning');
        // Execute the failover
        const result =
        /* istanbul ignore next */
        (cov_559lfj0rt().s[45]++, yield this.orchestrator.executeFailover(reason));
        // Update current region if successful
        /* istanbul ignore next */
        cov_559lfj0rt().s[46]++;
        if (result.success) {
          /* istanbul ignore next */
          cov_559lfj0rt().b[8][0]++;
          cov_559lfj0rt().s[47]++;
          this.currentRegion = this.currentRegion === 'primary' ?
          /* istanbul ignore next */
          (cov_559lfj0rt().b[9][0]++, 'secondary') :
          /* istanbul ignore next */
          (cov_559lfj0rt().b[9][1]++, 'primary');
          /* istanbul ignore next */
          cov_559lfj0rt().s[48]++;
          yield this.sendNotification(`Failover completed successfully to ${this.currentRegion} region`, 'success');
        } else {
          /* istanbul ignore next */
          cov_559lfj0rt().b[8][1]++;
          cov_559lfj0rt().s[49]++;
          yield this.sendNotification(`Failover failed: ${
          /* istanbul ignore next */
          (cov_559lfj0rt().b[11][0]++, (_a = result.steps.find(s => {
            /* istanbul ignore next */
            cov_559lfj0rt().f[12]++;
            cov_559lfj0rt().s[50]++;
            return s.status === 'failed';
          })) === null) ||
          /* istanbul ignore next */
          (cov_559lfj0rt().b[11][1]++, _a === void 0) ?
          /* istanbul ignore next */
          (cov_559lfj0rt().b[10][0]++, void 0) :
          /* istanbul ignore next */
          (cov_559lfj0rt().b[10][1]++, _a.error)}`, 'error');
        }
        // Record the event
        const event =
        /* istanbul ignore next */
        (cov_559lfj0rt().s[51]++, {
          id: `failover-${Date.now()}`,
          timestamp: startTime,
          type: 'failover',
          trigger,
          reason,
          result,
          duration: (new Date().getTime() - startTime.getTime()) / 1000,
          rtoAchieved: result.rtoAchieved,
          rpoAchieved: result.rpoAchieved
        });
        /* istanbul ignore next */
        cov_559lfj0rt().s[52]++;
        this.failoverHistory.push(event);
        // Check if RTO/RPO targets were met
        /* istanbul ignore next */
        cov_559lfj0rt().s[53]++;
        if (result.success) {
          /* istanbul ignore next */
          cov_559lfj0rt().b[12][0]++;
          cov_559lfj0rt().s[54]++;
          if (result.rtoAchieved > this.policy.rtoTarget) {
            /* istanbul ignore next */
            cov_559lfj0rt().b[13][0]++;
            cov_559lfj0rt().s[55]++;
            yield this.sendNotification(`RTO target exceeded: ${result.rtoAchieved}min > ${this.policy.rtoTarget}min target`, 'warning');
          } else
          /* istanbul ignore next */
          {
            cov_559lfj0rt().b[13][1]++;
          }
          cov_559lfj0rt().s[56]++;
          if (result.rpoAchieved > this.policy.rpoTarget) {
            /* istanbul ignore next */
            cov_559lfj0rt().b[14][0]++;
            cov_559lfj0rt().s[57]++;
            yield this.sendNotification(`RPO target exceeded: ${result.rpoAchieved}min > ${this.policy.rpoTarget}min target`, 'warning');
          } else
          /* istanbul ignore next */
          {
            cov_559lfj0rt().b[14][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_559lfj0rt().b[12][1]++;
        }
        cov_559lfj0rt().s[58]++;
        return result;
      } finally {
        /* istanbul ignore next */
        cov_559lfj0rt().s[59]++;
        this.isFailoverInProgress = false;
      }
    });
  }
  /**
   * Execute failback to primary region
   */
  executeFailback() {
    /* istanbul ignore next */
    cov_559lfj0rt().f[13]++;
    cov_559lfj0rt().s[60]++;
    return tslib_1.__awaiter(this, arguments, void 0, function* (reason =
    /* istanbul ignore next */
    (cov_559lfj0rt().b[15][0]++, 'Manual failback')) {
      /* istanbul ignore next */
      cov_559lfj0rt().f[14]++;
      var _a;
      /* istanbul ignore next */
      cov_559lfj0rt().s[61]++;
      if (this.isFailoverInProgress) {
        /* istanbul ignore next */
        cov_559lfj0rt().b[16][0]++;
        cov_559lfj0rt().s[62]++;
        throw new Error('Failover operation already in progress');
      } else
      /* istanbul ignore next */
      {
        cov_559lfj0rt().b[16][1]++;
      }
      cov_559lfj0rt().s[63]++;
      if (this.currentRegion === 'primary') {
        /* istanbul ignore next */
        cov_559lfj0rt().b[17][0]++;
        cov_559lfj0rt().s[64]++;
        throw new Error('Already running on primary region');
      } else
      /* istanbul ignore next */
      {
        cov_559lfj0rt().b[17][1]++;
      }
      const startTime =
      /* istanbul ignore next */
      (cov_559lfj0rt().s[65]++, new Date());
      /* istanbul ignore next */
      cov_559lfj0rt().s[66]++;
      this.isFailoverInProgress = true;
      /* istanbul ignore next */
      cov_559lfj0rt().s[67]++;
      try {
        /* istanbul ignore next */
        cov_559lfj0rt().s[68]++;
        yield this.sendNotification(`Failback started: ${reason}`, 'info');
        const result =
        /* istanbul ignore next */
        (cov_559lfj0rt().s[69]++, yield this.orchestrator.executeFailback(reason));
        /* istanbul ignore next */
        cov_559lfj0rt().s[70]++;
        if (result.success) {
          /* istanbul ignore next */
          cov_559lfj0rt().b[18][0]++;
          cov_559lfj0rt().s[71]++;
          this.currentRegion = 'primary';
          /* istanbul ignore next */
          cov_559lfj0rt().s[72]++;
          yield this.sendNotification('Failback completed successfully to primary region', 'success');
        } else {
          /* istanbul ignore next */
          cov_559lfj0rt().b[18][1]++;
          cov_559lfj0rt().s[73]++;
          yield this.sendNotification(`Failback failed: ${
          /* istanbul ignore next */
          (cov_559lfj0rt().b[20][0]++, (_a = result.steps.find(s => {
            /* istanbul ignore next */
            cov_559lfj0rt().f[15]++;
            cov_559lfj0rt().s[74]++;
            return s.status === 'failed';
          })) === null) ||
          /* istanbul ignore next */
          (cov_559lfj0rt().b[20][1]++, _a === void 0) ?
          /* istanbul ignore next */
          (cov_559lfj0rt().b[19][0]++, void 0) :
          /* istanbul ignore next */
          (cov_559lfj0rt().b[19][1]++, _a.error)}`, 'error');
        }
        // Record the event
        const event =
        /* istanbul ignore next */
        (cov_559lfj0rt().s[75]++, {
          id: `failback-${Date.now()}`,
          timestamp: startTime,
          type: 'failback',
          trigger: 'manual',
          reason,
          result,
          duration: (new Date().getTime() - startTime.getTime()) / 1000,
          rtoAchieved: result.rtoAchieved,
          rpoAchieved: result.rpoAchieved
        });
        /* istanbul ignore next */
        cov_559lfj0rt().s[76]++;
        this.failoverHistory.push(event);
        /* istanbul ignore next */
        cov_559lfj0rt().s[77]++;
        return result;
      } finally {
        /* istanbul ignore next */
        cov_559lfj0rt().s[78]++;
        this.isFailoverInProgress = false;
      }
    });
  }
  /**
   * Test disaster recovery without affecting production
   */
  testDisasterRecovery() {
    /* istanbul ignore next */
    cov_559lfj0rt().f[16]++;
    cov_559lfj0rt().s[79]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_559lfj0rt().f[17]++;
      const startTime =
      /* istanbul ignore next */
      (cov_559lfj0rt().s[80]++, new Date());
      /* istanbul ignore next */
      cov_559lfj0rt().s[81]++;
      try {
        /* istanbul ignore next */
        cov_559lfj0rt().s[82]++;
        yield this.sendNotification('DR test started', 'info');
        const result =
        /* istanbul ignore next */
        (cov_559lfj0rt().s[83]++, yield this.orchestrator.testDisasterRecovery());
        // Record the test event
        const event =
        /* istanbul ignore next */
        (cov_559lfj0rt().s[84]++, {
          id: `dr-test-${Date.now()}`,
          timestamp: startTime,
          type: 'test',
          trigger: 'manual',
          reason: 'Disaster recovery test',
          result: {
            success: result.success,
            rtoAchieved: result.estimatedRTO,
            rpoAchieved: result.estimatedRPO,
            steps: []
          },
          duration: (new Date().getTime() - startTime.getTime()) / 1000,
          rtoAchieved: result.estimatedRTO,
          rpoAchieved: result.estimatedRPO
        });
        /* istanbul ignore next */
        cov_559lfj0rt().s[85]++;
        this.failoverHistory.push(event);
        /* istanbul ignore next */
        cov_559lfj0rt().s[86]++;
        if (result.success) {
          /* istanbul ignore next */
          cov_559lfj0rt().b[21][0]++;
          cov_559lfj0rt().s[87]++;
          yield this.sendNotification('DR test completed successfully', 'success');
        } else {
          /* istanbul ignore next */
          cov_559lfj0rt().b[21][1]++;
          cov_559lfj0rt().s[88]++;
          yield this.sendNotification(`DR test found issues: ${result.recommendations.join(', ')}`, 'warning');
        }
        /* istanbul ignore next */
        cov_559lfj0rt().s[89]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_559lfj0rt().s[90]++;
        yield this.sendNotification(`DR test failed: ${error}`, 'error');
        /* istanbul ignore next */
        cov_559lfj0rt().s[91]++;
        throw error;
      }
    });
  }
  /**
   * Get current system status
   */
  getSystemStatus() {
    /* istanbul ignore next */
    cov_559lfj0rt().f[18]++;
    cov_559lfj0rt().s[92]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_559lfj0rt().f[19]++;
      let healthStatus;
      /* istanbul ignore next */
      cov_559lfj0rt().s[93]++;
      try {
        /* istanbul ignore next */
        cov_559lfj0rt().s[94]++;
        healthStatus = yield this.healthChecker.checkAllServices();
      } catch (error) {
        /* istanbul ignore next */
        cov_559lfj0rt().s[95]++;
        // Handle health check errors gracefully
        healthStatus = {
          overall: 'unhealthy',
          regions: {
            primary: {
              status: 'unhealthy'
            },
            secondary: {
              status: 'unhealthy'
            }
          },
          services: [],
          lastUpdated: new Date(),
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_559lfj0rt().b[22][0]++, error.message) :
          /* istanbul ignore next */
          (cov_559lfj0rt().b[22][1]++, 'Unknown error')
        };
      }
      const lastFailover =
      /* istanbul ignore next */
      (cov_559lfj0rt().s[96]++, this.failoverHistory.filter(e => {
        /* istanbul ignore next */
        cov_559lfj0rt().f[20]++;
        cov_559lfj0rt().s[97]++;
        return e.type === 'failover';
      }).sort((a, b) => {
        /* istanbul ignore next */
        cov_559lfj0rt().f[21]++;
        cov_559lfj0rt().s[98]++;
        return b.timestamp.getTime() - a.timestamp.getTime();
      })[0]);
      const rtoCompliance =
      /* istanbul ignore next */
      (cov_559lfj0rt().s[99]++,
      /* istanbul ignore next */
      (cov_559lfj0rt().b[23][0]++, !lastFailover) ||
      /* istanbul ignore next */
      (cov_559lfj0rt().b[23][1]++, lastFailover.rtoAchieved <= this.policy.rtoTarget));
      const rpoCompliance =
      /* istanbul ignore next */
      (cov_559lfj0rt().s[100]++,
      /* istanbul ignore next */
      (cov_559lfj0rt().b[24][0]++, !lastFailover) ||
      /* istanbul ignore next */
      (cov_559lfj0rt().b[24][1]++, lastFailover.rpoAchieved <= this.policy.rpoTarget));
      /* istanbul ignore next */
      cov_559lfj0rt().s[101]++;
      return {
        currentRegion: this.currentRegion,
        isFailoverInProgress: this.isFailoverInProgress,
        lastFailover,
        healthStatus,
        rtoCompliance,
        rpoCompliance
      };
    });
  }
  /**
   * Get failover history
   */
  getFailoverHistory(limit) {
    /* istanbul ignore next */
    cov_559lfj0rt().f[22]++;
    const sorted =
    /* istanbul ignore next */
    (cov_559lfj0rt().s[102]++, this.failoverHistory.sort((a, b) => {
      /* istanbul ignore next */
      cov_559lfj0rt().f[23]++;
      cov_559lfj0rt().s[103]++;
      return b.timestamp.getTime() - a.timestamp.getTime();
    }));
    /* istanbul ignore next */
    cov_559lfj0rt().s[104]++;
    return limit ?
    /* istanbul ignore next */
    (cov_559lfj0rt().b[25][0]++, sorted.slice(0, limit)) :
    /* istanbul ignore next */
    (cov_559lfj0rt().b[25][1]++, sorted);
  }
  /**
   * Update failover policy
   */
  updatePolicy(newPolicy) {
    /* istanbul ignore next */
    cov_559lfj0rt().f[24]++;
    cov_559lfj0rt().s[105]++;
    this.policy = Object.assign(Object.assign({}, this.policy), newPolicy);
    // Restart health monitoring if automatic failover setting changed
    /* istanbul ignore next */
    cov_559lfj0rt().s[106]++;
    if (newPolicy.automaticFailover !== undefined) {
      /* istanbul ignore next */
      cov_559lfj0rt().b[26][0]++;
      cov_559lfj0rt().s[107]++;
      if (
      /* istanbul ignore next */
      (cov_559lfj0rt().b[28][0]++, newPolicy.automaticFailover) &&
      /* istanbul ignore next */
      (cov_559lfj0rt().b[28][1]++, !this.policy.automaticFailover)) {
        /* istanbul ignore next */
        cov_559lfj0rt().b[27][0]++;
        cov_559lfj0rt().s[108]++;
        this.startHealthMonitoring();
      } else
      /* istanbul ignore next */
      {
        cov_559lfj0rt().b[27][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_559lfj0rt().b[26][1]++;
    }
  }
  /**
   * Send notification to configured endpoints
   */
  sendNotification(message, level) {
    /* istanbul ignore next */
    cov_559lfj0rt().f[25]++;
    cov_559lfj0rt().s[109]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_559lfj0rt().f[26]++;
      const notification =
      /* istanbul ignore next */
      (cov_559lfj0rt().s[110]++, {
        timestamp: new Date().toISOString(),
        level,
        message,
        service: 'Multi-Region Failover Manager',
        currentRegion: this.currentRegion
      });
      /* istanbul ignore next */
      cov_559lfj0rt().s[111]++;
      console.log(`[${level.toUpperCase()}] ${message}`);
      // Send to configured notification endpoints
      /* istanbul ignore next */
      cov_559lfj0rt().s[112]++;
      for (const endpoint of this.policy.notificationEndpoints) {
        /* istanbul ignore next */
        cov_559lfj0rt().s[113]++;
        try {
          /* istanbul ignore next */
          cov_559lfj0rt().s[114]++;
          if (endpoint.startsWith('http')) {
            /* istanbul ignore next */
            cov_559lfj0rt().b[29][0]++;
            cov_559lfj0rt().s[115]++;
            // Webhook notification
            yield fetch(endpoint, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(notification)
            });
          } else {
            /* istanbul ignore next */
            cov_559lfj0rt().b[29][1]++;
            cov_559lfj0rt().s[116]++;
            if (endpoint.includes('@')) {
              /* istanbul ignore next */
              cov_559lfj0rt().b[30][0]++;
              cov_559lfj0rt().s[117]++;
              // Email notification (would need SES integration)
              console.log(`Email notification to ${endpoint}: ${message}`);
            } else
            /* istanbul ignore next */
            {
              cov_559lfj0rt().b[30][1]++;
            }
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_559lfj0rt().s[118]++;
          console.error(`Failed to send notification to ${endpoint}:`, error);
        }
      }
    });
  }
  /**
   * Generate failover report
   */
  generateFailoverReport() {
    /* istanbul ignore next */
    cov_559lfj0rt().f[27]++;
    const failovers =
    /* istanbul ignore next */
    (cov_559lfj0rt().s[119]++, this.failoverHistory.filter(e => {
      /* istanbul ignore next */
      cov_559lfj0rt().f[28]++;
      cov_559lfj0rt().s[120]++;
      return e.type === 'failover';
    }));
    const successful =
    /* istanbul ignore next */
    (cov_559lfj0rt().s[121]++, failovers.filter(e => {
      /* istanbul ignore next */
      cov_559lfj0rt().f[29]++;
      cov_559lfj0rt().s[122]++;
      return e.result.success;
    }));
    const averageRTO =
    /* istanbul ignore next */
    (cov_559lfj0rt().s[123]++, successful.length > 0 ?
    /* istanbul ignore next */
    (cov_559lfj0rt().b[31][0]++, successful.reduce((sum, e) => {
      /* istanbul ignore next */
      cov_559lfj0rt().f[30]++;
      cov_559lfj0rt().s[124]++;
      return sum + e.rtoAchieved;
    }, 0) / successful.length) :
    /* istanbul ignore next */
    (cov_559lfj0rt().b[31][1]++, 0));
    const averageRPO =
    /* istanbul ignore next */
    (cov_559lfj0rt().s[125]++, successful.length > 0 ?
    /* istanbul ignore next */
    (cov_559lfj0rt().b[32][0]++, successful.reduce((sum, e) => {
      /* istanbul ignore next */
      cov_559lfj0rt().f[31]++;
      cov_559lfj0rt().s[126]++;
      return sum + e.rpoAchieved;
    }, 0) / successful.length) :
    /* istanbul ignore next */
    (cov_559lfj0rt().b[32][1]++, 0));
    const rtoCompliant =
    /* istanbul ignore next */
    (cov_559lfj0rt().s[127]++, successful.filter(e => {
      /* istanbul ignore next */
      cov_559lfj0rt().f[32]++;
      cov_559lfj0rt().s[128]++;
      return e.rtoAchieved <= this.policy.rtoTarget;
    }).length);
    const rpoCompliant =
    /* istanbul ignore next */
    (cov_559lfj0rt().s[129]++, successful.filter(e => {
      /* istanbul ignore next */
      cov_559lfj0rt().f[33]++;
      cov_559lfj0rt().s[130]++;
      return e.rpoAchieved <= this.policy.rpoTarget;
    }).length);
    const recommendations =
    /* istanbul ignore next */
    (cov_559lfj0rt().s[131]++, []);
    /* istanbul ignore next */
    cov_559lfj0rt().s[132]++;
    if (averageRTO > this.policy.rtoTarget) {
      /* istanbul ignore next */
      cov_559lfj0rt().b[33][0]++;
      cov_559lfj0rt().s[133]++;
      recommendations.push(`Average RTO (${averageRTO.toFixed(1)}min) exceeds target (${this.policy.rtoTarget}min)`);
    } else
    /* istanbul ignore next */
    {
      cov_559lfj0rt().b[33][1]++;
    }
    cov_559lfj0rt().s[134]++;
    if (averageRPO > this.policy.rpoTarget) {
      /* istanbul ignore next */
      cov_559lfj0rt().b[34][0]++;
      cov_559lfj0rt().s[135]++;
      recommendations.push(`Average RPO (${averageRPO.toFixed(1)}min) exceeds target (${this.policy.rpoTarget}min)`);
    } else
    /* istanbul ignore next */
    {
      cov_559lfj0rt().b[34][1]++;
    }
    cov_559lfj0rt().s[136]++;
    if (successful.length < failovers.length) {
      /* istanbul ignore next */
      cov_559lfj0rt().b[35][0]++;
      cov_559lfj0rt().s[137]++;
      recommendations.push(`${failovers.length - successful.length} failover(s) failed - review failure causes`);
    } else
    /* istanbul ignore next */
    {
      cov_559lfj0rt().b[35][1]++;
    }
    cov_559lfj0rt().s[138]++;
    return {
      summary: {
        totalFailovers: failovers.length,
        successfulFailovers: successful.length,
        averageRTO,
        averageRPO,
        rtoCompliance: successful.length > 0 ?
        /* istanbul ignore next */
        (cov_559lfj0rt().b[36][0]++, rtoCompliant / successful.length * 100) :
        /* istanbul ignore next */
        (cov_559lfj0rt().b[36][1]++, 100),
        rpoCompliance: successful.length > 0 ?
        /* istanbul ignore next */
        (cov_559lfj0rt().b[37][0]++, rpoCompliant / successful.length * 100) :
        /* istanbul ignore next */
        (cov_559lfj0rt().b[37][1]++, 100)
      },
      recentEvents: this.getFailoverHistory(10),
      recommendations
    };
  }
}
/* istanbul ignore next */
cov_559lfj0rt().s[139]++;
exports.FailoverManager = FailoverManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
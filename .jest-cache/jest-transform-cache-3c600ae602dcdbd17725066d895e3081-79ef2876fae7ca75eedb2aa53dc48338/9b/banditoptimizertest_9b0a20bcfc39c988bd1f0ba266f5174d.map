{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/__tests__/bandit-optimizer.test.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/__tests__/bandit-optimizer.test.ts"],"sourcesContent":["/**\n * Tests for Bandit Optimizer\n */\n\nimport { ThompsonBandit } from \"../bandit-controller\";\nimport { BanditOptimizer, BanditUtils } from \"../bandit-optimizer\";\nimport { EvidentlyExperimentManager } from \"../evidently-experiments\";\n\n// Mock the experiment manager\njest.mock(\"../evidently-experiments\");\n\ndescribe(\"BanditOptimizer\", () => {\n  let optimizer: BanditOptimizer;\n  let mockBandit: ThompsonBandit;\n  let mockExperimentManager: jest.Mocked<EvidentlyExperimentManager>;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    mockBandit = new ThompsonBandit();\n    mockExperimentManager =\n      new EvidentlyExperimentManager() as jest.Mocked<EvidentlyExperimentManager>;\n\n    optimizer = new BanditOptimizer(mockBandit, mockExperimentManager, {\n      autoOptimizationEnabled: false, // Disable for testing\n      explorationRate: 0.1,\n      confidenceLevel: 0.95,\n      minTrialsForConfidence: 20,\n      optimizationInterval: 60,\n    });\n  });\n\n  describe(\"UCB Algorithm\", () => {\n    it(\"should select unplayed arm first\", () => {\n      // Mock bandit with no trials\n      jest.spyOn(mockBandit, \"getStats\").mockReturnValue({\n        bedrock: {\n          wins: 0,\n          trials: 0,\n          costEuro: 0,\n          totalLatencyMs: 0,\n          winRate: 0,\n          avgLatency: 0,\n          avgCost: 0,\n        },\n        google: {\n          wins: 0,\n          trials: 0,\n          costEuro: 0,\n          totalLatencyMs: 0,\n          winRate: 0,\n          avgLatency: 0,\n          avgCost: 0,\n        },\n        meta: {\n          wins: 0,\n          trials: 0,\n          costEuro: 0,\n          totalLatencyMs: 0,\n          winRate: 0,\n          avgLatency: 0,\n          avgCost: 0,\n        },\n      });\n\n      const result = optimizer.selectArmUCB();\n\n      expect(result.explorationNeeded).toBe(true);\n      expect(result.reasoning).toContain(\"No historical data available\");\n      expect([\"bedrock\", \"google\", \"meta\"]).toContain(result.recommendedArm);\n    });\n\n    it(\"should calculate UCB scores correctly\", () => {\n      // Mock bandit with some trial data\n      jest.spyOn(mockBandit, \"getStats\").mockReturnValue({\n        bedrock: {\n          wins: 8,\n          trials: 10,\n          costEuro: 0.5,\n          totalLatencyMs: 5000,\n          winRate: 0.8,\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n        google: {\n          wins: 6,\n          trials: 12,\n          costEuro: 0.6,\n          totalLatencyMs: 6000,\n          winRate: 0.5,\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n        meta: {\n          wins: 0,\n          trials: 0,\n          costEuro: 0,\n          totalLatencyMs: 0,\n          winRate: 0,\n          avgLatency: 0,\n          avgCost: 0,\n        },\n      });\n\n      const result = optimizer.selectArmUCB();\n\n      // Should select meta (unplayed arm with infinite UCB)\n      expect(result.recommendedArm).toBe(\"meta\");\n      expect(result.explorationNeeded).toBe(true);\n    });\n\n    it(\"should prefer high-performing arms when exploration is low\", () => {\n      // Mock bandit with sufficient trials for all arms\n      jest.spyOn(mockBandit, \"getStats\").mockReturnValue({\n        bedrock: {\n          wins: 18,\n          trials: 20,\n          costEuro: 1.0,\n          totalLatencyMs: 10000,\n          winRate: 0.9,\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n        google: {\n          wins: 12,\n          trials: 20,\n          costEuro: 1.0,\n          totalLatencyMs: 10000,\n          winRate: 0.6,\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n        meta: {\n          wins: 8,\n          trials: 20,\n          costEuro: 1.0,\n          totalLatencyMs: 10000,\n          winRate: 0.4,\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n      });\n\n      const result = optimizer.selectArmUCB();\n\n      // Should prefer bedrock (highest win rate)\n      expect(result.recommendedArm).toBe(\"bedrock\");\n      expect(result.confidence).toBeGreaterThan(0.8);\n    });\n  });\n\n  describe(\"Thompson Sampling\", () => {\n    it(\"should use bandit choose method\", () => {\n      const chooseSpy = jest\n        .spyOn(mockBandit, \"choose\")\n        .mockReturnValue(\"google\");\n      jest.spyOn(mockBandit, \"getStats\").mockReturnValue({\n        bedrock: {\n          wins: 5,\n          trials: 10,\n          costEuro: 0.5,\n          totalLatencyMs: 5000,\n          winRate: 0.5,\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n        google: {\n          wins: 8,\n          trials: 12,\n          costEuro: 0.6,\n          totalLatencyMs: 6000,\n          winRate: 0.67,\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n        meta: {\n          wins: 2,\n          trials: 5,\n          costEuro: 0.2,\n          totalLatencyMs: 2500,\n          winRate: 0.4,\n          avgLatency: 500,\n          avgCost: 0.04,\n        },\n      });\n\n      const context = { domain: \"legal\", budgetTier: \"premium\" };\n      const result = optimizer.selectArmThompson(context);\n\n      expect(chooseSpy).toHaveBeenCalledWith(context);\n      expect(result.recommendedArm).toBe(\"google\");\n      expect(result.reasoning).toContain(\"Thompson Sampling\");\n    });\n\n    it(\"should indicate exploration needed for low trial counts\", () => {\n      jest.spyOn(mockBandit, \"choose\").mockReturnValue(\"bedrock\");\n      jest.spyOn(mockBandit, \"getStats\").mockReturnValue({\n        bedrock: {\n          wins: 3,\n          trials: 5,\n          costEuro: 0.25,\n          totalLatencyMs: 2500,\n          winRate: 0.6,\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n        google: {\n          wins: 2,\n          trials: 4,\n          costEuro: 0.2,\n          totalLatencyMs: 2000,\n          winRate: 0.5,\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n        meta: {\n          wins: 1,\n          trials: 3,\n          costEuro: 0.15,\n          totalLatencyMs: 1500,\n          winRate: 0.33,\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n      });\n\n      const result = optimizer.selectArmThompson();\n\n      expect(result.explorationNeeded).toBe(true);\n      expect(result.confidence).toBeLessThan(0.8);\n    });\n  });\n\n  describe(\"Hybrid Selection\", () => {\n    it(\"should use UCB for early exploration\", () => {\n      // Mock low total trials\n      jest.spyOn(mockBandit, \"getStats\").mockReturnValue({\n        bedrock: {\n          wins: 2,\n          trials: 3,\n          costEuro: 0.15,\n          totalLatencyMs: 1500,\n          winRate: 0.67,\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n        google: {\n          wins: 1,\n          trials: 2,\n          costEuro: 0.1,\n          totalLatencyMs: 1000,\n          winRate: 0.5,\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n        meta: {\n          wins: 0,\n          trials: 0,\n          costEuro: 0,\n          totalLatencyMs: 0,\n          winRate: 0,\n          avgLatency: 0,\n          avgCost: 0,\n        },\n      });\n\n      const result = optimizer.selectArmHybrid();\n\n      // Should use UCB (exploration) and select unplayed arm\n      expect(result.recommendedArm).toBe(\"meta\");\n      expect(result.explorationNeeded).toBe(true);\n    });\n\n    it(\"should use Thompson Sampling for exploitation\", () => {\n      const chooseSpy = jest\n        .spyOn(mockBandit, \"choose\")\n        .mockReturnValue(\"bedrock\");\n\n      // Mock high total trials (> minTrialsForConfidence * 3)\n      jest.spyOn(mockBandit, \"getStats\").mockReturnValue({\n        bedrock: {\n          wins: 45,\n          trials: 50,\n          costEuro: 2.5,\n          totalLatencyMs: 25000,\n          winRate: 0.9,\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n        google: {\n          wins: 30,\n          trials: 40,\n          costEuro: 2.0,\n          totalLatencyMs: 20000,\n          winRate: 0.75,\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n        meta: {\n          wins: 20,\n          trials: 30,\n          costEuro: 1.5,\n          totalLatencyMs: 15000,\n          winRate: 0.67,\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n      });\n\n      const result = optimizer.selectArmHybrid();\n\n      expect(chooseSpy).toHaveBeenCalled();\n      expect(result.reasoning).toContain(\"Thompson Sampling\");\n    });\n  });\n\n  describe(\"Experiment Integration\", () => {\n    it(\"should use experiment assignment when available\", async () => {\n      mockExperimentManager.getOptimalProvider.mockResolvedValue({\n        provider: \"google\",\n        source: \"experiment\",\n        confidence: 0.9,\n        experimentName: \"test-experiment\",\n      });\n\n      const result = await optimizer.getOptimalArm({\n        experimentName: \"test-experiment\",\n        userId: \"test-user\",\n      });\n\n      expect(result).toEqual({\n        recommendedArm: \"google\",\n        confidence: 0.9,\n        expectedReward: 0.8,\n        explorationNeeded: false,\n        reasoning: \"Experiment assignment: test-experiment\",\n      });\n    });\n\n    it(\"should fall back to bandit when experiment fails\", async () => {\n      mockExperimentManager.getOptimalProvider.mockRejectedValue(\n        new Error(\"Experiment error\")\n      );\n\n      jest.spyOn(mockBandit, \"choose\").mockReturnValue(\"bedrock\");\n      jest.spyOn(mockBandit, \"getStats\").mockReturnValue({\n        bedrock: {\n          wins: 15,\n          trials: 20,\n          costEuro: 1.0,\n          totalLatencyMs: 10000,\n          winRate: 0.75,\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n        google: {\n          wins: 8,\n          trials: 15,\n          costEuro: 0.75,\n          totalLatencyMs: 7500,\n          winRate: 0.53,\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n        meta: {\n          wins: 5,\n          trials: 10,\n          costEuro: 0.5,\n          totalLatencyMs: 5000,\n          winRate: 0.5,\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n      });\n\n      const result = await optimizer.getOptimalArm({\n        userId: \"test-user\",\n      });\n\n      expect(result.recommendedArm).toBe(\"bedrock\");\n      expect(result.reasoning).toMatch(\n        /Thompson Sampling|Exploitation.*confidence/\n      );\n    });\n  });\n\n  describe(\"Outcome Recording\", () => {\n    it(\"should record outcome in both bandit and experiment manager\", async () => {\n      const banditRecordSpy = jest.spyOn(mockBandit, \"record\");\n      mockExperimentManager.recordExperimentOutcome.mockResolvedValue();\n\n      const context = {\n        experimentName: \"test-experiment\",\n        userId: \"test-user\",\n        domain: \"legal\",\n      };\n\n      await optimizer.recordOutcome(context, \"bedrock\", true, 500, 0.05, 0.9);\n\n      expect(banditRecordSpy).toHaveBeenCalledWith(\n        \"bedrock\",\n        true,\n        0.05,\n        500,\n        context\n      );\n      expect(\n        mockExperimentManager.recordExperimentOutcome\n      ).toHaveBeenCalledWith(context, \"bedrock\", {\n        success: true,\n        latencyMs: 500,\n        costEuro: 0.05,\n        qualityScore: 0.9,\n      });\n    });\n\n    it(\"should handle experiment manager errors gracefully\", async () => {\n      const banditRecordSpy = jest.spyOn(mockBandit, \"record\");\n      mockExperimentManager.recordExperimentOutcome.mockRejectedValue(\n        new Error(\"Network error\")\n      );\n\n      await expect(\n        optimizer.recordOutcome(\n          { userId: \"test-user\" },\n          \"google\",\n          false,\n          1000,\n          0.1\n        )\n      ).resolves.not.toThrow();\n\n      expect(banditRecordSpy).toHaveBeenCalled();\n    });\n  });\n\n  describe(\"Contextual Performance Analysis\", () => {\n    it(\"should analyze performance across contexts\", () => {\n      // Mock different contexts with different performance\n      jest\n        .spyOn(mockBandit, \"getStats\")\n        .mockReturnValueOnce({\n          // Legal context - bedrock performs best\n          bedrock: {\n            wins: 18,\n            trials: 20,\n            costEuro: 1.0,\n            totalLatencyMs: 10000,\n            winRate: 0.9,\n            avgLatency: 500,\n            avgCost: 0.05,\n          },\n          google: {\n            wins: 10,\n            trials: 15,\n            costEuro: 0.75,\n            totalLatencyMs: 7500,\n            winRate: 0.67,\n            avgLatency: 500,\n            avgCost: 0.05,\n          },\n          meta: {\n            wins: 5,\n            trials: 10,\n            costEuro: 0.5,\n            totalLatencyMs: 5000,\n            winRate: 0.5,\n            avgLatency: 500,\n            avgCost: 0.05,\n          },\n        })\n        .mockReturnValueOnce({\n          // Culinary context - google performs best\n          bedrock: {\n            wins: 8,\n            trials: 15,\n            costEuro: 0.75,\n            totalLatencyMs: 7500,\n            winRate: 0.53,\n            avgLatency: 500,\n            avgCost: 0.05,\n          },\n          google: {\n            wins: 16,\n            trials: 20,\n            costEuro: 1.0,\n            totalLatencyMs: 10000,\n            winRate: 0.8,\n            avgLatency: 500,\n            avgCost: 0.05,\n          },\n          meta: {\n            wins: 6,\n            trials: 10,\n            costEuro: 0.5,\n            totalLatencyMs: 5000,\n            winRate: 0.6,\n            avgLatency: 500,\n            avgCost: 0.05,\n          },\n        });\n\n      const analysis = optimizer.analyzeContextualPerformance();\n\n      expect(analysis.length).toBeGreaterThanOrEqual(2); // At least two contexts\n      expect(analysis[0]).toMatchObject({\n        context: expect.any(String),\n        bestArm: expect.stringMatching(/bedrock|google|meta/),\n        improvement: expect.any(Number),\n        armPerformance: expect.objectContaining({\n          bedrock: expect.objectContaining({\n            winRate: expect.any(Number),\n            confidence: expect.any(Number),\n          }),\n        }),\n      });\n    });\n  });\n\n  describe(\"Optimization Recommendations\", () => {\n    it(\"should recommend exploration for under-explored arms\", () => {\n      jest.spyOn(mockBandit, \"getStats\").mockReturnValue({\n        bedrock: {\n          wins: 15,\n          trials: 25,\n          costEuro: 1.25,\n          totalLatencyMs: 12500,\n          winRate: 0.6,\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n        google: {\n          wins: 8,\n          trials: 12,\n          costEuro: 0.6,\n          totalLatencyMs: 6000,\n          winRate: 0.67,\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n        meta: {\n          wins: 2,\n          trials: 3,\n          costEuro: 0.15,\n          totalLatencyMs: 1500,\n          winRate: 0.67,\n          avgLatency: 500,\n          avgCost: 0.05,\n        }, // Under-explored\n      });\n\n      const recommendations = optimizer.getOptimizationRecommendations();\n\n      const explorationRec = recommendations.find(\n        (r) => r.type === \"exploration\"\n      );\n      expect(explorationRec).toBeDefined();\n      expect(explorationRec?.priority).toBe(\"high\");\n      expect(explorationRec?.description).toContain(\"meta\");\n    });\n\n    it(\"should recommend exploitation for high-confidence winners\", () => {\n      // Mock contextual performance with high confidence\n      jest.spyOn(optimizer, \"analyzeContextualPerformance\").mockReturnValue([\n        {\n          context: \"legal|premium|tools\",\n          bestArm: \"bedrock\",\n          improvement: 0.5,\n          armPerformance: {\n            bedrock: {\n              winRate: 0.9,\n              avgLatency: 400,\n              avgCost: 0.04,\n              trials: 60,\n              confidence: 0.95,\n            },\n            google: {\n              winRate: 0.6,\n              avgLatency: 500,\n              avgCost: 0.05,\n              trials: 40,\n              confidence: 0.8,\n            },\n            meta: {\n              winRate: 0.4,\n              avgLatency: 600,\n              avgCost: 0.06,\n              trials: 30,\n              confidence: 0.7,\n            },\n          },\n        },\n      ]);\n\n      const recommendations = optimizer.getOptimizationRecommendations();\n\n      const exploitationRec = recommendations.find(\n        (r) => r.type === \"exploitation\"\n      );\n      expect(exploitationRec).toBeDefined();\n      expect(exploitationRec?.priority).toBe(\"low\");\n      expect(exploitationRec?.description).toContain(\"High confidence winners\");\n    });\n\n    it(\"should suggest experiments for promising contexts\", () => {\n      jest.spyOn(optimizer, \"analyzeContextualPerformance\").mockReturnValue([\n        {\n          context: \"culinary|standard|no-tools\",\n          bestArm: \"google\",\n          improvement: 0.3, // Good improvement\n          armPerformance: {\n            bedrock: {\n              winRate: 0.5,\n              avgLatency: 500,\n              avgCost: 0.05,\n              trials: 25,\n              confidence: 0.7,\n            },\n            google: {\n              winRate: 0.8,\n              avgLatency: 450,\n              avgCost: 0.045,\n              trials: 35,\n              confidence: 0.85,\n            },\n            meta: {\n              winRate: 0.4,\n              avgLatency: 550,\n              avgCost: 0.055,\n              trials: 20,\n              confidence: 0.6,\n            },\n          },\n        },\n      ]);\n\n      const recommendations = optimizer.getOptimizationRecommendations();\n\n      const experimentRec = recommendations.find(\n        (r) => r.type === \"experiment\"\n      );\n      expect(experimentRec).toBeDefined();\n      expect(experimentRec?.priority).toBe(\"medium\");\n      expect(experimentRec?.description).toContain(\"Promising contexts\");\n    });\n  });\n\n  describe(\"Configuration Management\", () => {\n    it(\"should get current configuration\", () => {\n      const config = optimizer.getConfig();\n\n      expect(config).toMatchObject({\n        explorationRate: 0.1,\n        confidenceLevel: 0.95,\n        minTrialsForConfidence: 20,\n        autoOptimizationEnabled: false,\n        optimizationInterval: 60,\n      });\n    });\n\n    it(\"should update configuration\", () => {\n      optimizer.updateConfig({\n        explorationRate: 0.2,\n        autoOptimizationEnabled: true,\n      });\n\n      const config = optimizer.getConfig();\n      expect(config.explorationRate).toBe(0.2);\n      expect(config.autoOptimizationEnabled).toBe(true);\n      expect(config.confidenceLevel).toBe(0.95); // Unchanged\n    });\n  });\n\n  describe(\"Health Check\", () => {\n    it(\"should return healthy status with sufficient data\", () => {\n      jest.spyOn(mockBandit, \"getStats\").mockReturnValue({\n        bedrock: {\n          wins: 15,\n          trials: 20,\n          costEuro: 1.0,\n          totalLatencyMs: 10000,\n          winRate: 0.75,\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n        google: {\n          wins: 10,\n          trials: 15,\n          costEuro: 0.75,\n          totalLatencyMs: 7500,\n          winRate: 0.67,\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n        meta: {\n          wins: 8,\n          trials: 12,\n          costEuro: 0.6,\n          totalLatencyMs: 6000,\n          winRate: 0.67,\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n      });\n\n      const health = optimizer.healthCheck();\n\n      expect(health).toMatchObject({\n        status: expect.stringMatching(/healthy|warning/),\n        totalTrials: 47,\n        activeContexts: expect.any(Number),\n        autoOptimizationEnabled: false,\n        recommendations: expect.any(Number),\n      });\n    });\n\n    it(\"should return warning status with insufficient data\", () => {\n      jest.spyOn(mockBandit, \"getStats\").mockReturnValue({\n        bedrock: {\n          wins: 2,\n          trials: 3,\n          costEuro: 0.15,\n          totalLatencyMs: 1500,\n          winRate: 0.67,\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n        google: {\n          wins: 1,\n          trials: 2,\n          costEuro: 0.1,\n          totalLatencyMs: 1000,\n          winRate: 0.5,\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n        meta: {\n          wins: 0,\n          trials: 0,\n          costEuro: 0,\n          totalLatencyMs: 0,\n          winRate: 0,\n          avgLatency: 0,\n          avgCost: 0,\n        },\n      });\n\n      const health = optimizer.healthCheck();\n\n      expect(health.status).toBe(\"warning\");\n      expect(health.totalTrials).toBeLessThan(10);\n    });\n  });\n\n  describe(\"State Management\", () => {\n    it(\"should export state correctly\", () => {\n      const state = optimizer.exportState();\n\n      expect(state).toMatchObject({\n        banditStats: expect.any(Object),\n        config: expect.any(Object),\n        optimizationHistory: expect.any(Array),\n      });\n    });\n\n    it(\"should reset state\", () => {\n      // Add some history first\n      optimizer.recordOutcome({ userId: \"test\" }, \"bedrock\", true, 500, 0.05);\n\n      optimizer.reset();\n\n      const history = optimizer.getOptimizationHistory();\n      expect(history).toHaveLength(0);\n    });\n  });\n});\n\ndescribe(\"BanditUtils\", () => {\n  describe(\"Statistical Significance\", () => {\n    it(\"should calculate significance correctly\", () => {\n      const arm1 = { wins: 80, trials: 100 }; // 80% win rate\n      const arm2 = { wins: 60, trials: 100 }; // 60% win rate\n\n      const result = BanditUtils.calculateSignificance(arm1, arm2);\n\n      expect(result.significant).toBe(true);\n      expect(result.pValue).toBeLessThan(0.05);\n      expect(result.confidenceInterval).toHaveLength(2);\n      expect(result.confidenceInterval[0]).toBeLessThan(\n        result.confidenceInterval[1]\n      );\n    });\n\n    it(\"should handle zero trials\", () => {\n      const arm1 = { wins: 0, trials: 0 };\n      const arm2 = { wins: 10, trials: 20 };\n\n      const result = BanditUtils.calculateSignificance(arm1, arm2);\n\n      expect(result.significant).toBe(false);\n      expect(result.pValue).toBe(1);\n    });\n\n    it(\"should not find significance with similar performance\", () => {\n      const arm1 = { wins: 50, trials: 100 }; // 50% win rate\n      const arm2 = { wins: 52, trials: 100 }; // 52% win rate\n\n      const result = BanditUtils.calculateSignificance(arm1, arm2);\n\n      expect(result.significant).toBe(false);\n      expect(result.pValue).toBeGreaterThan(0.05);\n    });\n  });\n\n  describe(\"Normal CDF\", () => {\n    it(\"should calculate normal CDF correctly\", () => {\n      expect(BanditUtils.normalCDF(0)).toBeCloseTo(0.5, 2);\n      expect(BanditUtils.normalCDF(1.96)).toBeCloseTo(0.975, 2);\n      expect(BanditUtils.normalCDF(-1.96)).toBeCloseTo(0.025, 2);\n    });\n  });\n\n  describe(\"Regret Calculation\", () => {\n    it(\"should calculate regret correctly\", () => {\n      const trueRewards = {\n        bedrock: 0.8,\n        google: 0.6,\n        meta: 0.4,\n      };\n\n      const selections = [\n        { arm: \"bedrock\" as const, reward: 0.8 }, // Optimal choice\n        { arm: \"google\" as const, reward: 0.6 }, // Suboptimal\n        { arm: \"meta\" as const, reward: 0.4 }, // Worst choice\n      ];\n\n      const regret = BanditUtils.calculateRegret(trueRewards, selections);\n\n      // Expected regret: (0 + 0.2 + 0.4) / 3 = 0.2\n      expect(regret).toBeCloseTo(0.2, 2);\n    });\n\n    it(\"should return zero regret for optimal selections\", () => {\n      const trueRewards = {\n        bedrock: 0.8,\n        google: 0.6,\n        meta: 0.4,\n      };\n\n      const selections = [\n        { arm: \"bedrock\" as const, reward: 0.8 },\n        { arm: \"bedrock\" as const, reward: 0.8 },\n        { arm: \"bedrock\" as const, reward: 0.8 },\n      ];\n\n      const regret = BanditUtils.calculateRegret(trueRewards, selections);\n\n      expect(regret).toBe(0);\n    });\n  });\n});\n"],"version":3}
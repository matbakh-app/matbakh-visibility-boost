{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/kms-encryption-service.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/kms-encryption-service.ts"],"sourcesContent":["/**\n * KMS Encryption Service for Direct Bedrock Operations\n *\n * This module provides KMS-based encryption and decryption for sensitive data\n * in direct Bedrock operations, ensuring GDPR compliance and data protection.\n *\n * Features:\n * - Encrypt/decrypt sensitive operation data\n * - Secure PII storage with KMS encryption\n * - Audit trail integration for encryption operations\n * - Key rotation support\n * - Multi-region key management\n */\n\nimport {\n  DecryptCommand,\n  DescribeKeyCommand,\n  EnableKeyRotationCommand,\n  EncryptCommand,\n  GenerateDataKeyCommand,\n  GetKeyRotationStatusCommand,\n  KMSClient,\n  ListAliasesCommand,\n} from \"@aws-sdk/client-kms\";\nimport { AiFeatureFlags } from \"./ai-feature-flags\";\nimport { AuditTrailSystem } from \"./audit-trail-system\";\n\n// KMS Configuration\nexport interface KMSEncryptionConfig {\n  region: string;\n  keyId?: string; // KMS Key ID or ARN\n  keyAlias?: string; // KMS Key Alias (e.g., alias/matbakh-ai)\n  enableKeyRotation: boolean;\n  encryptionContext?: Record<string, string>; // Additional encryption context\n  maxRetries: number;\n  timeout: number;\n}\n\n// Encryption Request\nexport interface EncryptionRequest {\n  plaintext: string | Buffer;\n  encryptionContext?: Record<string, string>;\n  keyId?: string; // Override default key\n}\n\n// Encryption Response\nexport interface EncryptionResponse {\n  ciphertext: string; // Base64-encoded encrypted data\n  keyId: string; // KMS Key ID used for encryption\n  encryptionContext?: Record<string, string>;\n  encryptionAlgorithm: string;\n  timestamp: Date;\n}\n\n// Decryption Request\nexport interface DecryptionRequest {\n  ciphertext: string; // Base64-encoded encrypted data\n  encryptionContext?: Record<string, string>;\n  keyId?: string; // Optional key ID for validation\n}\n\n// Decryption Response\nexport interface DecryptionResponse {\n  plaintext: string;\n  keyId: string; // KMS Key ID used for decryption\n  encryptionContext?: Record<string, string>;\n  timestamp: Date;\n}\n\n// Data Key Generation Request\nexport interface DataKeyRequest {\n  keySpec?: \"AES_256\" | \"AES_128\";\n  encryptionContext?: Record<string, string>;\n}\n\n// Data Key Response\nexport interface DataKeyResponse {\n  plaintextKey: Buffer; // Plaintext data key (use and discard immediately)\n  encryptedKey: string; // Encrypted data key (store for later decryption)\n  keyId: string;\n}\n\n// Key Rotation Status\nexport interface KeyRotationStatus {\n  keyId: string;\n  rotationEnabled: boolean;\n  nextRotationDate?: Date;\n  lastRotationDate?: Date;\n}\n\n// Sensitive Data Types for Encryption\nexport type SensitiveDataType =\n  | \"pii\"\n  | \"credentials\"\n  | \"api_keys\"\n  | \"tokens\"\n  | \"operation_context\"\n  | \"user_data\"\n  | \"audit_data\";\n\n/**\n * KMS Encryption Service for Direct Bedrock Operations\n */\nexport class KMSEncryptionService {\n  private client: KMSClient;\n  private config: KMSEncryptionConfig;\n  private featureFlags: AiFeatureFlags;\n  private auditTrail: AuditTrailSystem;\n  private keyCache: Map<string, { keyId: string; timestamp: Date }>;\n\n  constructor(\n    config: Partial<KMSEncryptionConfig> = {},\n    auditTrail?: AuditTrailSystem\n  ) {\n    this.config = {\n      region: process.env.AWS_REGION || \"eu-central-1\",\n      keyAlias: process.env.KMS_KEY_ALIAS || \"alias/matbakh-ai\",\n      enableKeyRotation: true,\n      maxRetries: 3,\n      timeout: 5000,\n      ...config,\n    };\n\n    // Initialize KMS client\n    this.client = new KMSClient({\n      region: this.config.region,\n      maxAttempts: this.config.maxRetries,\n      requestHandler: {\n        requestTimeout: this.config.timeout,\n      },\n    });\n\n    // Initialize feature flags\n    this.featureFlags = new AiFeatureFlags();\n\n    // Initialize audit trail\n    this.auditTrail =\n      auditTrail ||\n      new AuditTrailSystem({\n        complianceMode: \"strict\",\n        enableIntegrityChecking: true,\n        retentionDays: 2555, // 7 years for GDPR compliance\n      });\n\n    // Initialize key cache\n    this.keyCache = new Map();\n  }\n\n  /**\n   * Encrypt sensitive data using KMS\n   */\n  async encrypt(\n    request: EncryptionRequest,\n    dataType: SensitiveDataType = \"operation_context\"\n  ): Promise<EncryptionResponse> {\n    const startTime = Date.now();\n    const operationId = this.generateOperationId();\n\n    try {\n      // Check if KMS encryption is enabled\n      if (!this.featureFlags.isEnabled(\"kms_encryption_enabled\", true)) {\n        throw new Error(\"KMS encryption is disabled\");\n      }\n\n      // Get key ID (use provided key or default)\n      const keyId = await this.resolveKeyId(request.keyId);\n\n      // Build encryption context\n      const encryptionContext = {\n        ...this.config.encryptionContext,\n        ...request.encryptionContext,\n        dataType,\n        operationId,\n        timestamp: new Date().toISOString(),\n      };\n\n      // Convert plaintext to Buffer if string\n      const plaintext =\n        typeof request.plaintext === \"string\"\n          ? Buffer.from(request.plaintext, \"utf-8\")\n          : request.plaintext;\n\n      // Encrypt data\n      const command = new EncryptCommand({\n        KeyId: keyId,\n        Plaintext: plaintext,\n        EncryptionContext: encryptionContext,\n      });\n\n      const response = await this.client.send(command);\n\n      if (!response.CiphertextBlob) {\n        throw new Error(\"Encryption failed: no ciphertext returned\");\n      }\n\n      // Convert ciphertext to base64\n      const ciphertext = Buffer.from(response.CiphertextBlob).toString(\n        \"base64\"\n      );\n\n      const result: EncryptionResponse = {\n        ciphertext,\n        keyId: response.KeyId || keyId,\n        encryptionContext,\n        encryptionAlgorithm:\n          response.EncryptionAlgorithm || \"SYMMETRIC_DEFAULT\",\n        timestamp: new Date(),\n      };\n\n      // Log encryption operation\n      await this.auditTrail.logEvent({\n        eventType: \"kms_encryption\",\n        requestId: operationId,\n        provider: \"kms\",\n        complianceStatus: \"compliant\",\n        metadata: {\n          dataType,\n          keyId: result.keyId,\n          encryptionAlgorithm: result.encryptionAlgorithm,\n          plaintextSize: plaintext.length,\n          ciphertextSize: ciphertext.length,\n          processingTimeMs: Date.now() - startTime,\n        },\n      });\n\n      return result;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      // Log encryption error\n      await this.auditTrail.logEvent({\n        eventType: \"kms_encryption\",\n        requestId: operationId,\n        provider: \"kms\",\n        complianceStatus: \"violation\",\n        error: {\n          type: \"encryption_error\",\n          message: errorMessage,\n        },\n        metadata: {\n          dataType,\n          processingTimeMs: Date.now() - startTime,\n        },\n      });\n\n      throw new Error(`KMS encryption failed: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Decrypt sensitive data using KMS\n   */\n  async decrypt(\n    request: DecryptionRequest,\n    dataType: SensitiveDataType = \"operation_context\"\n  ): Promise<DecryptionResponse> {\n    const startTime = Date.now();\n    const operationId = this.generateOperationId();\n\n    try {\n      // Check if KMS encryption is enabled\n      if (!this.featureFlags.isEnabled(\"kms_encryption_enabled\", true)) {\n        throw new Error(\"KMS encryption is disabled\");\n      }\n\n      // Convert base64 ciphertext to Buffer\n      const ciphertext = Buffer.from(request.ciphertext, \"base64\");\n\n      // Build encryption context for validation\n      const encryptionContext = request.encryptionContext;\n\n      // Decrypt data\n      const command = new DecryptCommand({\n        CiphertextBlob: ciphertext,\n        EncryptionContext: encryptionContext,\n        ...(request.keyId && { KeyId: request.keyId }),\n      });\n\n      const response = await this.client.send(command);\n\n      if (!response.Plaintext) {\n        throw new Error(\"Decryption failed: no plaintext returned\");\n      }\n\n      // Convert plaintext to string\n      const plaintext = Buffer.from(response.Plaintext).toString(\"utf-8\");\n\n      const result: DecryptionResponse = {\n        plaintext,\n        keyId: response.KeyId || \"unknown\",\n        encryptionContext,\n        timestamp: new Date(),\n      };\n\n      // Log decryption operation\n      await this.auditTrail.logEvent({\n        eventType: \"kms_decryption\",\n        requestId: operationId,\n        provider: \"kms\",\n        complianceStatus: \"compliant\",\n        metadata: {\n          dataType,\n          keyId: result.keyId,\n          ciphertextSize: ciphertext.length,\n          plaintextSize: plaintext.length,\n          processingTimeMs: Date.now() - startTime,\n        },\n      });\n\n      return result;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      // Log decryption error\n      await this.auditTrail.logEvent({\n        eventType: \"kms_decryption\",\n        requestId: operationId,\n        provider: \"kms\",\n        complianceStatus: \"violation\",\n        error: {\n          type: \"decryption_error\",\n          message: errorMessage,\n        },\n        metadata: {\n          dataType,\n          processingTimeMs: Date.now() - startTime,\n        },\n      });\n\n      throw new Error(`KMS decryption failed: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Generate data key for envelope encryption\n   */\n  async generateDataKey(\n    request: DataKeyRequest = {}\n  ): Promise<DataKeyResponse> {\n    const startTime = Date.now();\n    const operationId = this.generateOperationId();\n\n    try {\n      // Check if KMS encryption is enabled\n      if (!this.featureFlags.isEnabled(\"kms_encryption_enabled\", true)) {\n        throw new Error(\"KMS encryption is disabled\");\n      }\n\n      // Get key ID\n      const keyId = await this.resolveKeyId();\n\n      // Build encryption context\n      const encryptionContext = {\n        ...this.config.encryptionContext,\n        ...request.encryptionContext,\n        operationId,\n        timestamp: new Date().toISOString(),\n      };\n\n      // Generate data key\n      const command = new GenerateDataKeyCommand({\n        KeyId: keyId,\n        KeySpec: request.keySpec || \"AES_256\",\n        EncryptionContext: encryptionContext,\n      });\n\n      const response = await this.client.send(command);\n\n      if (!response.Plaintext || !response.CiphertextBlob) {\n        throw new Error(\"Data key generation failed\");\n      }\n\n      const result: DataKeyResponse = {\n        plaintextKey: Buffer.from(response.Plaintext),\n        encryptedKey: Buffer.from(response.CiphertextBlob).toString(\"base64\"),\n        keyId: response.KeyId || keyId,\n      };\n\n      // Log data key generation\n      await this.auditTrail.logEvent({\n        eventType: \"kms_data_key_generation\",\n        requestId: operationId,\n        provider: \"kms\",\n        complianceStatus: \"compliant\",\n        metadata: {\n          keyId: result.keyId,\n          keySpec: request.keySpec || \"AES_256\",\n          processingTimeMs: Date.now() - startTime,\n        },\n      });\n\n      return result;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      // Log data key generation error\n      await this.auditTrail.logEvent({\n        eventType: \"kms_data_key_generation\",\n        requestId: operationId,\n        provider: \"kms\",\n        complianceStatus: \"violation\",\n        error: {\n          type: \"data_key_generation_error\",\n          message: errorMessage,\n        },\n        metadata: {\n          processingTimeMs: Date.now() - startTime,\n        },\n      });\n\n      throw new Error(`KMS data key generation failed: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Get key rotation status\n   */\n  async getKeyRotationStatus(keyId?: string): Promise<KeyRotationStatus> {\n    try {\n      const resolvedKeyId = await this.resolveKeyId(keyId);\n\n      // Get key rotation status\n      const command = new GetKeyRotationStatusCommand({\n        KeyId: resolvedKeyId,\n      });\n\n      const response = await this.client.send(command);\n\n      return {\n        keyId: resolvedKeyId,\n        rotationEnabled: response.KeyRotationEnabled || false,\n        // Note: AWS KMS doesn't provide rotation dates via API\n        // These would need to be tracked separately\n      };\n    } catch (error) {\n      throw new Error(\n        `Failed to get key rotation status: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Enable key rotation\n   */\n  async enableKeyRotation(keyId?: string): Promise<void> {\n    try {\n      const resolvedKeyId = await this.resolveKeyId(keyId);\n\n      const command = new EnableKeyRotationCommand({\n        KeyId: resolvedKeyId,\n      });\n\n      await this.client.send(command);\n\n      // Log key rotation enablement\n      await this.auditTrail.logEvent({\n        eventType: \"kms_key_rotation_enabled\",\n        requestId: this.generateOperationId(),\n        provider: \"kms\",\n        complianceStatus: \"compliant\",\n        metadata: {\n          keyId: resolvedKeyId,\n        },\n      });\n    } catch (error) {\n      throw new Error(\n        `Failed to enable key rotation: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Describe KMS key\n   */\n  async describeKey(keyId?: string): Promise<{\n    keyId: string;\n    arn: string;\n    creationDate?: Date;\n    enabled: boolean;\n    description?: string;\n    keyUsage: string;\n    keyState: string;\n  }> {\n    try {\n      const resolvedKeyId = await this.resolveKeyId(keyId);\n\n      const command = new DescribeKeyCommand({\n        KeyId: resolvedKeyId,\n      });\n\n      const response = await this.client.send(command);\n\n      if (!response.KeyMetadata) {\n        throw new Error(\"Key metadata not found\");\n      }\n\n      return {\n        keyId: response.KeyMetadata.KeyId,\n        arn: response.KeyMetadata.Arn || \"\",\n        creationDate: response.KeyMetadata.CreationDate,\n        enabled: response.KeyMetadata.Enabled || false,\n        description: response.KeyMetadata.Description,\n        keyUsage: response.KeyMetadata.KeyUsage || \"ENCRYPT_DECRYPT\",\n        keyState: response.KeyMetadata.KeyState || \"Unknown\",\n      };\n    } catch (error) {\n      throw new Error(\n        `Failed to describe key: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * List key aliases\n   */\n  async listAliases(): Promise<\n    Array<{ aliasName: string; targetKeyId: string }>\n  > {\n    try {\n      const command = new ListAliasesCommand({});\n      const response = await this.client.send(command);\n\n      return (\n        response.Aliases?.map((alias) => ({\n          aliasName: alias.AliasName || \"\",\n          targetKeyId: alias.TargetKeyId || \"\",\n        })) || []\n      );\n    } catch (error) {\n      throw new Error(\n        `Failed to list aliases: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Encrypt PII data with additional context\n   */\n  async encryptPII(\n    piiData: string,\n    context: {\n      piiType: string;\n      userId?: string;\n      operationId?: string;\n    }\n  ): Promise<EncryptionResponse> {\n    return this.encrypt(\n      {\n        plaintext: piiData,\n        encryptionContext: {\n          piiType: context.piiType,\n          ...(context.userId && { userId: context.userId }),\n          ...(context.operationId && { operationId: context.operationId }),\n        },\n      },\n      \"pii\"\n    );\n  }\n\n  /**\n   * Decrypt PII data with validation\n   */\n  async decryptPII(\n    encryptedPII: string,\n    context: {\n      piiType: string;\n      userId?: string;\n      operationId?: string;\n    }\n  ): Promise<DecryptionResponse> {\n    return this.decrypt(\n      {\n        ciphertext: encryptedPII,\n        encryptionContext: {\n          piiType: context.piiType,\n          ...(context.userId && { userId: context.userId }),\n          ...(context.operationId && { operationId: context.operationId }),\n        },\n      },\n      \"pii\"\n    );\n  }\n\n  /**\n   * Encrypt operation context for audit trail\n   */\n  async encryptOperationContext(\n    context: Record<string, any>,\n    operationId: string\n  ): Promise<EncryptionResponse> {\n    const contextJson = JSON.stringify(context);\n\n    return this.encrypt(\n      {\n        plaintext: contextJson,\n        encryptionContext: {\n          operationId,\n          contextType: \"operation_context\",\n        },\n      },\n      \"operation_context\"\n    );\n  }\n\n  /**\n   * Decrypt operation context from audit trail\n   */\n  async decryptOperationContext(\n    encryptedContext: string,\n    operationId: string\n  ): Promise<Record<string, any>> {\n    const decrypted = await this.decrypt(\n      {\n        ciphertext: encryptedContext,\n        encryptionContext: {\n          operationId,\n          contextType: \"operation_context\",\n        },\n      },\n      \"operation_context\"\n    );\n\n    return JSON.parse(decrypted.plaintext);\n  }\n\n  // Private Methods\n\n  /**\n   * Resolve key ID from alias or use default\n   */\n  private async resolveKeyId(keyId?: string): Promise<string> {\n    // Use provided key ID if available\n    if (keyId) {\n      return keyId;\n    }\n\n    // Use configured key ID if available\n    if (this.config.keyId) {\n      return this.config.keyId;\n    }\n\n    // Use key alias\n    if (this.config.keyAlias) {\n      // Check cache first\n      const cached = this.keyCache.get(this.config.keyAlias);\n      if (cached && Date.now() - cached.timestamp.getTime() < 3600000) {\n        // 1 hour cache\n        return cached.keyId;\n      }\n\n      // Resolve alias to key ID\n      const aliases = await this.listAliases();\n      const alias = aliases.find((a) => a.aliasName === this.config.keyAlias);\n\n      if (!alias) {\n        throw new Error(`Key alias not found: ${this.config.keyAlias}`);\n      }\n\n      // Cache the resolved key ID\n      this.keyCache.set(this.config.keyAlias, {\n        keyId: alias.targetKeyId,\n        timestamp: new Date(),\n      });\n\n      return alias.targetKeyId;\n    }\n\n    throw new Error(\"No KMS key ID or alias configured\");\n  }\n\n  /**\n   * Generate unique operation ID\n   */\n  private generateOperationId(): string {\n    return `kms-${Date.now()}-${Math.random().toString(36).substring(2, 15)}`;\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    this.keyCache.clear();\n  }\n}\n"],"version":3}
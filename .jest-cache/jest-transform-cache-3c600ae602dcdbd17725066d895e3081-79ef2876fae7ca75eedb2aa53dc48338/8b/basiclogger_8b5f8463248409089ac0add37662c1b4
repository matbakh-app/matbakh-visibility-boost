185daf25fad6ca620f12051d49aea150
"use strict";

/**
 * Basic Logger for AI Orchestrator
 *
 * Implements structured logging with different levels and contexts
 * Supports CloudWatch integration and local development
 */
/* istanbul ignore next */
function cov_17hktubx1r() {
  var path = "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/basic-logger.ts";
  var hash = "d3739703dd3d57957f90e3384996b955c909929e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/basic-logger.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 69
        }
      },
      "2": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 39
        }
      },
      "3": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 39
        }
      },
      "4": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 46
        }
      },
      "5": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 44
        }
      },
      "6": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 43
        }
      },
      "7": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 43
        }
      },
      "8": {
        start: {
          line: 41,
          column: 29
        },
        end: {
          line: 46,
          column: 30
        }
      },
      "9": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 49
        }
      },
      "10": {
        start: {
          line: 53,
          column: 29
        },
        end: {
          line: 58,
          column: 30
        }
      },
      "11": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 49
        }
      },
      "12": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 126
        }
      },
      "13": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 131
        }
      },
      "14": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 133
        }
      },
      "15": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 89,
          column: 11
        }
      },
      "16": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 100,
          column: 11
        }
      },
      "17": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 133
        }
      },
      "18": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "19": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 19
        }
      },
      "20": {
        start: {
          line: 115,
          column: 25
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "21": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 129,
          column: 9
        }
      },
      "22": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 50
        }
      },
      "23": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 39
        }
      },
      "24": {
        start: {
          line: 136,
          column: 23
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "25": {
        start: {
          line: 143,
          column: 22
        },
        end: {
          line: 143,
          column: 31
        }
      },
      "26": {
        start: {
          line: 144,
          column: 22
        },
        end: {
          line: 144,
          column: 47
        }
      },
      "27": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 143
        }
      },
      "28": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "29": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 85
        }
      },
      "30": {
        start: {
          line: 154,
          column: 23
        },
        end: {
          line: 160,
          column: 9
        }
      },
      "31": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 54
        }
      },
      "32": {
        start: {
          line: 168,
          column: 25
        },
        end: {
          line: 168,
          column: 107
        }
      },
      "33": {
        start: {
          line: 169,
          column: 28
        },
        end: {
          line: 169,
          column: 71
        }
      },
      "34": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "35": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 28
        }
      },
      "36": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 181,
          column: 9
        }
      },
      "37": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 176,
          column: 30
        }
      },
      "38": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 178,
          column: 31
        }
      },
      "39": {
        start: {
          line: 180,
          column: 16
        },
        end: {
          line: 180,
          column: 31
        }
      },
      "40": {
        start: {
          line: 187,
          column: 28
        },
        end: {
          line: 187,
          column: 79
        }
      },
      "41": {
        start: {
          line: 189,
          column: 28
        },
        end: {
          line: 189,
          column: 61
        }
      },
      "42": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 192,
          column: 10
        }
      },
      "43": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 97
        }
      },
      "44": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 193,
          column: 27
        }
      },
      "45": {
        start: {
          line: 196,
          column: 0
        },
        end: {
          line: 196,
          column: 34
        }
      },
      "46": {
        start: {
          line: 200,
          column: 0
        },
        end: {
          line: 200,
          column: 91
        }
      },
      "47": {
        start: {
          line: 204,
          column: 21
        },
        end: {
          line: 206,
          column: 1
        }
      },
      "48": {
        start: {
          line: 205,
          column: 4
        },
        end: {
          line: 205,
          column: 94
        }
      },
      "49": {
        start: {
          line: 207,
          column: 0
        },
        end: {
          line: 207,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 78
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 28
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 27
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 28
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        loc: {
          start: {
            line: 34,
            column: 27
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 34
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        loc: {
          start: {
            line: 40,
            column: 35
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 40
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        },
        loc: {
          start: {
            line: 52,
            column: 35
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 52
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 40
          },
          end: {
            line: 66,
            column: 5
          }
        },
        line: 64
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        loc: {
          start: {
            line: 70,
            column: 43
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 70
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        },
        loc: {
          start: {
            line: 76,
            column: 47
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 76
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 69
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 82
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        loc: {
          start: {
            line: 94,
            column: 46
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 94
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        },
        loc: {
          start: {
            line: 105,
            column: 46
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 105
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 111,
            column: 5
          }
        },
        loc: {
          start: {
            line: 111,
            column: 33
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 111
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 23
          },
          end: {
            line: 149,
            column: 5
          }
        },
        line: 134
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 153,
            column: 5
          }
        },
        loc: {
          start: {
            line: 153,
            column: 21
          },
          end: {
            line: 162,
            column: 5
          }
        },
        line: 153
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 166,
            column: 4
          },
          end: {
            line: 166,
            column: 5
          }
        },
        loc: {
          start: {
            line: 166,
            column: 21
          },
          end: {
            line: 182,
            column: 5
          }
        },
        line: 166
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 186,
            column: 4
          },
          end: {
            line: 186,
            column: 5
          }
        },
        loc: {
          start: {
            line: 186,
            column: 19
          },
          end: {
            line: 194,
            column: 5
          }
        },
        line: 186
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 190,
            column: 26
          },
          end: {
            line: 190,
            column: 27
          }
        },
        loc: {
          start: {
            line: 190,
            column: 60
          },
          end: {
            line: 192,
            column: 9
          }
        },
        line: 190
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 204,
            column: 21
          },
          end: {
            line: 204,
            column: 22
          }
        },
        loc: {
          start: {
            line: 204,
            column: 51
          },
          end: {
            line: 206,
            column: 1
          }
        },
        line: 204
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 16
          },
          end: {
            line: 14,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 14,
            column: 30
          },
          end: {
            line: 14,
            column: 47
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 14,
            column: 49
          },
          end: {
            line: 14,
            column: 76
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 14,
            column: 63
          },
          end: {
            line: 14,
            column: 76
          }
        }],
        line: 14
      },
      "2": {
        loc: {
          start: {
            line: 41,
            column: 29
          },
          end: {
            line: 46,
            column: 30
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 42,
            column: 14
          },
          end: {
            line: 46,
            column: 20
          }
        }, {
          start: {
            line: 46,
            column: 23
          },
          end: {
            line: 46,
            column: 30
          }
        }],
        line: 41
      },
      "3": {
        loc: {
          start: {
            line: 53,
            column: 29
          },
          end: {
            line: 58,
            column: 30
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 54,
            column: 14
          },
          end: {
            line: 58,
            column: 20
          }
        }, {
          start: {
            line: 58,
            column: 23
          },
          end: {
            line: 58,
            column: 30
          }
        }],
        line: 53
      },
      "4": {
        loc: {
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "5": {
        loc: {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 129,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 129,
            column: 9
          }
        }, {
          start: {
            line: 126,
            column: 13
          },
          end: {
            line: 129,
            column: 9
          }
        }],
        line: 123
      },
      "6": {
        loc: {
          start: {
            line: 144,
            column: 22
          },
          end: {
            line: 144,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 22
          },
          end: {
            line: 144,
            column: 41
          }
        }, {
          start: {
            line: 144,
            column: 45
          },
          end: {
            line: 144,
            column: 47
          }
        }],
        line: 144
      },
      "7": {
        loc: {
          start: {
            line: 145,
            column: 107
          },
          end: {
            line: 145,
            column: 141
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 145,
            column: 123
          },
          end: {
            line: 145,
            column: 136
          }
        }, {
          start: {
            line: 145,
            column: 139
          },
          end: {
            line: 145,
            column: 141
          }
        }],
        line: 145
      },
      "8": {
        loc: {
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "9": {
        loc: {
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 146,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 146,
            column: 61
          },
          end: {
            line: 146,
            column: 67
          }
        }, {
          start: {
            line: 146,
            column: 70
          },
          end: {
            line: 146,
            column: 78
          }
        }],
        line: 146
      },
      "10": {
        loc: {
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 146,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 146,
            column: 41
          }
        }, {
          start: {
            line: 146,
            column: 45
          },
          end: {
            line: 146,
            column: 58
          }
        }],
        line: 146
      },
      "11": {
        loc: {
          start: {
            line: 168,
            column: 25
          },
          end: {
            line: 168,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 168,
            column: 82
          },
          end: {
            line: 168,
            column: 88
          }
        }, {
          start: {
            line: 168,
            column: 91
          },
          end: {
            line: 168,
            column: 107
          }
        }],
        line: 168
      },
      "12": {
        loc: {
          start: {
            line: 168,
            column: 25
          },
          end: {
            line: 168,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 168,
            column: 25
          },
          end: {
            line: 168,
            column: 62
          }
        }, {
          start: {
            line: 168,
            column: 66
          },
          end: {
            line: 168,
            column: 79
          }
        }],
        line: 168
      },
      "13": {
        loc: {
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "14": {
        loc: {
          start: {
            line: 170,
            column: 12
          },
          end: {
            line: 170,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 12
          },
          end: {
            line: 170,
            column: 20
          }
        }, {
          start: {
            line: 170,
            column: 24
          },
          end: {
            line: 170,
            column: 54
          }
        }],
        line: 170
      },
      "15": {
        loc: {
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 175,
            column: 12
          },
          end: {
            line: 176,
            column: 30
          }
        }, {
          start: {
            line: 177,
            column: 12
          },
          end: {
            line: 178,
            column: 31
          }
        }, {
          start: {
            line: 179,
            column: 12
          },
          end: {
            line: 180,
            column: 31
          }
        }],
        line: 174
      },
      "16": {
        loc: {
          start: {
            line: 200,
            column: 52
          },
          end: {
            line: 200,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 200,
            column: 52
          },
          end: {
            line: 200,
            column: 72
          }
        }, {
          start: {
            line: 200,
            column: 76
          },
          end: {
            line: 200,
            column: 89
          }
        }],
        line: 200
      },
      "17": {
        loc: {
          start: {
            line: 205,
            column: 40
          },
          end: {
            line: 205,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 205,
            column: 40
          },
          end: {
            line: 205,
            column: 51
          }
        }, {
          start: {
            line: 205,
            column: 55
          },
          end: {
            line: 205,
            column: 75
          }
        }, {
          start: {
            line: 205,
            column: 79
          },
          end: {
            line: 205,
            column: 92
          }
        }],
        line: 205
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0],
      "16": [0, 0],
      "17": [0, 0, 0]
    },
    inputSourceMap: {
      file: "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/basic-logger.ts",
      mappings: ";AAAA;;;;;GAKG;;;AA2BH;;GAEG;AACH,MAAa,WAAW;IAKtB,YACE,cAAsB,iBAAiB,EACvC,cAAsB,aAAa;QAEnC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;IACxC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,OAAe,EAAE,OAAoB;QACzC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IACtC,CAAC;IAED;;OAEG;IACH,IAAI,CAAC,OAAe,EAAE,OAAoB;QACxC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IACrC,CAAC;IAED;;OAEG;IACH,IAAI,CAAC,OAAe,EAAE,OAAoB;QACxC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IACrC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,OAAe,EAAE,KAAa,EAAE,OAAoB;QACxD,MAAM,YAAY,GAAG,KAAK;YACxB,CAAC,iCACM,OAAO,KACV,KAAK,EAAE;oBACL,IAAI,EAAE,KAAK,CAAC,IAAI;oBAChB,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,KAAK,EAAE,KAAK,CAAC,KAAK;iBACnB,IAEL,CAAC,CAAC,OAAO,CAAC;QAEZ,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;IAC3C,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,OAAe,EAAE,KAAa,EAAE,OAAoB;QACxD,MAAM,YAAY,GAAG,KAAK;YACxB,CAAC,iCACM,OAAO,KACV,KAAK,EAAE;oBACL,IAAI,EAAE,KAAK,CAAC,IAAI;oBAChB,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,KAAK,EAAE,KAAK,CAAC,KAAK;iBACnB,IAEL,CAAC,CAAC,OAAO,CAAC;QAEZ,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;IAC3C,CAAC;IAED;;OAEG;IACH,eAAe,CAAC,SAAiB,EAAE,OAAmB;QACpD,IAAI,CAAC,IAAI,CAAC,oBAAoB,gCAC5B,SAAS,IACN,OAAO,KACV,SAAS,EAAE,eAAe,IAC1B,CAAC;IACL,CAAC;IAED;;OAEG;IACH,kBAAkB,CAAC,SAAiB,EAAE,OAAmB;QACvD,IAAI,CAAC,IAAI,CAAC,sBAAsB,gCAC9B,SAAS,IACN,OAAO,KACV,SAAS,EAAE,kBAAkB,IAC7B,CAAC;IACL,CAAC;IAED;;OAEG;IACH,eAAe,CAAC,SAAiB,EAAE,KAAY,EAAE,OAAmB;QAClE,IAAI,CAAC,KAAK,CAAC,mBAAmB,EAAE,KAAK,gCACnC,SAAS,IACN,OAAO,KACV,SAAS,EAAE,eAAe,IAC1B,CAAC;IACL,CAAC;IAED;;OAEG;IACH,mBAAmB,CACjB,SAAiB,EACjB,YAAoB,EACpB,UAAkB,EAClB,MAAc;QAEd,IAAI,CAAC,IAAI,CAAC,6BAA6B,EAAE;YACvC,SAAS;YACT,YAAY;YACZ,UAAU;YACV,MAAM;YACN,SAAS,EAAE,mBAAmB;SAC/B,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,aAAa,CACX,SAAiB,EACjB,KAA6B,EAC7B,GAAW,EACX,GAAY;QAEZ,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,EAAE,EAAE;YAC3B,SAAS;YACT,QAAQ,EAAE,GAAG;YACb,GAAG;YACH,SAAS,EAAE,SAAS,KAAK,EAAE;SAC5B,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,qBAAqB,CACnB,SAAiB,EACjB,OAMC;QAED,IAAI,CAAC,IAAI,CAAC,qBAAqB,gCAC7B,SAAS,IACN,OAAO,KACV,SAAS,EAAE,qBAAqB,IAChC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,GAAG,CAAC,KAAe,EAAE,OAAe,EAAE,OAAoB;QAChE,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC;YAC3B,OAAO;QACT,CAAC;QAED,MAAM,QAAQ,GAAa;YACzB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,KAAK;YACL,OAAO;YACP,OAAO,kBACL,OAAO,EAAE,IAAI,CAAC,WAAW,EACzB,WAAW,EAAE,IAAI,CAAC,WAAW,IAC1B,OAAO,CACX;SACF,CAAC;QAEF,+CAA+C;QAC/C,0CAA0C;QAC1C,IAAI,IAAI,CAAC,WAAW,KAAK,YAAY,EAAE,CAAC;YACtC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;QACxC,CAAC;aAAM,CAAC;YACN,+BAA+B;YAC/B,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC;IAED;;OAEG;IACK,WAAW,CAAC,KAAe;;QACjC,MAAM,MAAM,GAAG;YACb,KAAK,EAAE,UAAU,EAAE,OAAO;YAC1B,IAAI,EAAE,UAAU,EAAE,QAAQ;YAC1B,IAAI,EAAE,UAAU,EAAE,SAAS;YAC3B,KAAK,EAAE,UAAU,EAAE,MAAM;YACzB,KAAK,EAAE,UAAU,EAAE,UAAU;SAC9B,CAAC;QAEF,MAAM,KAAK,GAAG,SAAS,CAAC;QACxB,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QAExC,OAAO,CAAC,GAAG,CACT,GAAG,KAAK,IAAI,KAAK,CAAC,SAAS,KAAK,KAAK,CAAC,KAAK,CAAC,WAAW,EAAE,GAAG,KAAK,KAC/D,KAAK,CAAC,OACR,EAAE,EACF,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CACnC,CAAC;QAEF,IAAI,MAAA,KAAK,CAAC,OAAO,0CAAE,KAAK,EAAE,CAAC;YACzB,OAAO,CAAC,KAAK,CAAC,GAAG,KAAK,eAAe,KAAK,EAAE,EAAE,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC3E,CAAC;IACH,CAAC;IAED;;OAEG;IACK,SAAS,CAAC,KAAe;QAC/B,MAAM,MAAM,GAA6B;YACvC,KAAK,EAAE,CAAC;YACR,IAAI,EAAE,CAAC;YACP,IAAI,EAAE,CAAC;YACP,KAAK,EAAE,CAAC;YACR,KAAK,EAAE,CAAC;SACT,CAAC;QAEF,OAAO,MAAM,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAChD,CAAC;IAED;;OAEG;IACK,cAAc;;QACpB,MAAM,QAAQ,GAAG,MAAA,OAAO,CAAC,GAAG,CAAC,SAAS,0CAAE,WAAW,EAAc,CAAC;QAClE,MAAM,WAAW,GAAe,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QAE5E,IAAI,QAAQ,IAAI,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;YAC/C,OAAO,QAAQ,CAAC;QAClB,CAAC;QAED,oCAAoC;QACpC,QAAQ,IAAI,CAAC,WAAW,EAAE,CAAC;YACzB,KAAK,YAAY;gBACf,OAAO,MAAM,CAAC;YAChB,KAAK,SAAS;gBACZ,OAAO,OAAO,CAAC;YACjB;gBACE,OAAO,OAAO,CAAC;QACnB,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,OAAmB;QACvB,MAAM,WAAW,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAExE,gDAAgD;QAChD,MAAM,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACtD,WAAW,CAAC,GAAG,GAAG,CAChB,KAAe,EACf,OAAe,EACf,YAAyB,EACzB,EAAE;YACF,WAAW,CAAC,KAAK,EAAE,OAAO,kCAAO,OAAO,GAAK,YAAY,EAAG,CAAC;QAC/D,CAAC,CAAC;QAEF,OAAO,WAAW,CAAC;IACrB,CAAC;CACF;AA9QD,kCA8QC;AAED;;GAEG;AACU,QAAA,MAAM,GAAG,IAAI,WAAW,CACnC,iBAAiB,EACjB,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,aAAa,CACtC,CAAC;AAEF;;GAEG;AACI,MAAM,YAAY,GAAG,CAC1B,WAAmB,EACnB,WAAoB,EACP,EAAE;IACf,OAAO,IAAI,WAAW,CACpB,WAAW,EACX,WAAW,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,aAAa,CACrD,CAAC;AACJ,CAAC,CAAC;AARW,QAAA,YAAY,gBAQvB",
      names: [],
      sources: ["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/basic-logger.ts"],
      sourcesContent: ["/**\n * Basic Logger for AI Orchestrator\n *\n * Implements structured logging with different levels and contexts\n * Supports CloudWatch integration and local development\n */\n\nexport type LogLevel = \"debug\" | \"info\" | \"warn\" | \"error\" | \"fatal\";\n\nexport interface LogContext {\n  requestId?: string;\n  userId?: string;\n  provider?: string;\n  modelId?: string;\n  operation?: string;\n  duration?: number;\n  cost?: number;\n  [key: string]: any;\n}\n\nexport interface LogEntry {\n  timestamp: string;\n  level: LogLevel;\n  message: string;\n  context?: LogContext;\n  error?: {\n    name: string;\n    message: string;\n    stack?: string;\n  };\n}\n\n/**\n * Basic Logger implementation\n */\nexport class BasicLogger {\n  private serviceName: string;\n  private environment: string;\n  private minLevel: LogLevel;\n\n  constructor(\n    serviceName: string = \"ai-orchestrator\",\n    environment: string = \"development\"\n  ) {\n    this.serviceName = serviceName;\n    this.environment = environment;\n    this.minLevel = this.getMinLogLevel();\n  }\n\n  /**\n   * Log debug message\n   */\n  debug(message: string, context?: LogContext): void {\n    this.log(\"debug\", message, context);\n  }\n\n  /**\n   * Log info message\n   */\n  info(message: string, context?: LogContext): void {\n    this.log(\"info\", message, context);\n  }\n\n  /**\n   * Log warning message\n   */\n  warn(message: string, context?: LogContext): void {\n    this.log(\"warn\", message, context);\n  }\n\n  /**\n   * Log error message\n   */\n  error(message: string, error?: Error, context?: LogContext): void {\n    const errorContext = error\n      ? {\n          ...context,\n          error: {\n            name: error.name,\n            message: error.message,\n            stack: error.stack,\n          },\n        }\n      : context;\n\n    this.log(\"error\", message, errorContext);\n  }\n\n  /**\n   * Log fatal message\n   */\n  fatal(message: string, error?: Error, context?: LogContext): void {\n    const errorContext = error\n      ? {\n          ...context,\n          error: {\n            name: error.name,\n            message: error.message,\n            stack: error.stack,\n          },\n        }\n      : context;\n\n    this.log(\"fatal\", message, errorContext);\n  }\n\n  /**\n   * Log AI request start\n   */\n  logRequestStart(requestId: string, context: LogContext): void {\n    this.info(\"AI request started\", {\n      requestId,\n      ...context,\n      operation: \"request_start\",\n    });\n  }\n\n  /**\n   * Log AI request completion\n   */\n  logRequestComplete(requestId: string, context: LogContext): void {\n    this.info(\"AI request completed\", {\n      requestId,\n      ...context,\n      operation: \"request_complete\",\n    });\n  }\n\n  /**\n   * Log AI request error\n   */\n  logRequestError(requestId: string, error: Error, context: LogContext): void {\n    this.error(\"AI request failed\", error, {\n      requestId,\n      ...context,\n      operation: \"request_error\",\n    });\n  }\n\n  /**\n   * Log provider fallback\n   */\n  logProviderFallback(\n    requestId: string,\n    fromProvider: string,\n    toProvider: string,\n    reason: string\n  ): void {\n    this.warn(\"Provider fallback triggered\", {\n      requestId,\n      fromProvider,\n      toProvider,\n      reason,\n      operation: \"provider_fallback\",\n    });\n  }\n\n  /**\n   * Log cache hit/miss\n   */\n  logCacheEvent(\n    requestId: string,\n    event: \"hit\" | \"miss\" | \"set\",\n    key: string,\n    ttl?: number\n  ): void {\n    this.debug(`Cache ${event}`, {\n      requestId,\n      cacheKey: key,\n      ttl,\n      operation: `cache_${event}`,\n    });\n  }\n\n  /**\n   * Log performance metrics\n   */\n  logPerformanceMetrics(\n    requestId: string,\n    metrics: {\n      duration: number;\n      provider: string;\n      modelId: string;\n      cost?: number;\n      tokensUsed?: number;\n    }\n  ): void {\n    this.info(\"Performance metrics\", {\n      requestId,\n      ...metrics,\n      operation: \"performance_metrics\",\n    });\n  }\n\n  /**\n   * Core logging method\n   */\n  private log(level: LogLevel, message: string, context?: LogContext): void {\n    if (!this.shouldLog(level)) {\n      return;\n    }\n\n    const logEntry: LogEntry = {\n      timestamp: new Date().toISOString(),\n      level,\n      message,\n      context: {\n        service: this.serviceName,\n        environment: this.environment,\n        ...context,\n      },\n    };\n\n    // In production, this would send to CloudWatch\n    // For now, use structured console logging\n    if (this.environment === \"production\") {\n      console.log(JSON.stringify(logEntry));\n    } else {\n      // Pretty print for development\n      this.prettyPrint(logEntry);\n    }\n  }\n\n  /**\n   * Pretty print log entry for development\n   */\n  private prettyPrint(entry: LogEntry): void {\n    const colors = {\n      debug: \"\\x1b[36m\", // Cyan\n      info: \"\\x1b[32m\", // Green\n      warn: \"\\x1b[33m\", // Yellow\n      error: \"\\x1b[31m\", // Red\n      fatal: \"\\x1b[35m\", // Magenta\n    };\n\n    const reset = \"\\x1b[0m\";\n    const color = colors[entry.level] || \"\";\n\n    console.log(\n      `${color}[${entry.timestamp}] ${entry.level.toUpperCase()}${reset}: ${\n        entry.message\n      }`,\n      entry.context ? entry.context : \"\"\n    );\n\n    if (entry.context?.error) {\n      console.error(`${color}Error Stack:${reset}`, entry.context.error.stack);\n    }\n  }\n\n  /**\n   * Check if log level should be logged\n   */\n  private shouldLog(level: LogLevel): boolean {\n    const levels: Record<LogLevel, number> = {\n      debug: 0,\n      info: 1,\n      warn: 2,\n      error: 3,\n      fatal: 4,\n    };\n\n    return levels[level] >= levels[this.minLevel];\n  }\n\n  /**\n   * Get minimum log level from environment\n   */\n  private getMinLogLevel(): LogLevel {\n    const envLevel = process.env.LOG_LEVEL?.toLowerCase() as LogLevel;\n    const validLevels: LogLevel[] = [\"debug\", \"info\", \"warn\", \"error\", \"fatal\"];\n\n    if (envLevel && validLevels.includes(envLevel)) {\n      return envLevel;\n    }\n\n    // Default log levels by environment\n    switch (this.environment) {\n      case \"production\":\n        return \"info\";\n      case \"staging\":\n        return \"debug\";\n      default:\n        return \"debug\";\n    }\n  }\n\n  /**\n   * Create child logger with additional context\n   */\n  child(context: LogContext): BasicLogger {\n    const childLogger = new BasicLogger(this.serviceName, this.environment);\n\n    // Override log method to include parent context\n    const originalLog = childLogger.log.bind(childLogger);\n    childLogger.log = (\n      level: LogLevel,\n      message: string,\n      childContext?: LogContext\n    ) => {\n      originalLog(level, message, { ...context, ...childContext });\n    };\n\n    return childLogger;\n  }\n}\n\n/**\n * Default logger instance\n */\nexport const logger = new BasicLogger(\n  \"ai-orchestrator\",\n  process.env.NODE_ENV || \"development\"\n);\n\n/**\n * Create logger for specific service\n */\nexport const createLogger = (\n  serviceName: string,\n  environment?: string\n): BasicLogger => {\n  return new BasicLogger(\n    serviceName,\n    environment || process.env.NODE_ENV || \"development\"\n  );\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d3739703dd3d57957f90e3384996b955c909929e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_17hktubx1r = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_17hktubx1r();
cov_17hktubx1r().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_17hktubx1r().s[1]++;
exports.createLogger = exports.logger = exports.BasicLogger = void 0;
/**
 * Basic Logger implementation
 */
class BasicLogger {
  constructor(serviceName =
  /* istanbul ignore next */
  (cov_17hktubx1r().b[0][0]++, "ai-orchestrator"), environment =
  /* istanbul ignore next */
  (cov_17hktubx1r().b[1][0]++, "development")) {
    /* istanbul ignore next */
    cov_17hktubx1r().f[0]++;
    cov_17hktubx1r().s[2]++;
    this.serviceName = serviceName;
    /* istanbul ignore next */
    cov_17hktubx1r().s[3]++;
    this.environment = environment;
    /* istanbul ignore next */
    cov_17hktubx1r().s[4]++;
    this.minLevel = this.getMinLogLevel();
  }
  /**
   * Log debug message
   */
  debug(message, context) {
    /* istanbul ignore next */
    cov_17hktubx1r().f[1]++;
    cov_17hktubx1r().s[5]++;
    this.log("debug", message, context);
  }
  /**
   * Log info message
   */
  info(message, context) {
    /* istanbul ignore next */
    cov_17hktubx1r().f[2]++;
    cov_17hktubx1r().s[6]++;
    this.log("info", message, context);
  }
  /**
   * Log warning message
   */
  warn(message, context) {
    /* istanbul ignore next */
    cov_17hktubx1r().f[3]++;
    cov_17hktubx1r().s[7]++;
    this.log("warn", message, context);
  }
  /**
   * Log error message
   */
  error(message, error, context) {
    /* istanbul ignore next */
    cov_17hktubx1r().f[4]++;
    const errorContext =
    /* istanbul ignore next */
    (cov_17hktubx1r().s[8]++, error ?
    /* istanbul ignore next */
    (cov_17hktubx1r().b[2][0]++, Object.assign(Object.assign({}, context), {
      error: {
        name: error.name,
        message: error.message,
        stack: error.stack
      }
    })) :
    /* istanbul ignore next */
    (cov_17hktubx1r().b[2][1]++, context));
    /* istanbul ignore next */
    cov_17hktubx1r().s[9]++;
    this.log("error", message, errorContext);
  }
  /**
   * Log fatal message
   */
  fatal(message, error, context) {
    /* istanbul ignore next */
    cov_17hktubx1r().f[5]++;
    const errorContext =
    /* istanbul ignore next */
    (cov_17hktubx1r().s[10]++, error ?
    /* istanbul ignore next */
    (cov_17hktubx1r().b[3][0]++, Object.assign(Object.assign({}, context), {
      error: {
        name: error.name,
        message: error.message,
        stack: error.stack
      }
    })) :
    /* istanbul ignore next */
    (cov_17hktubx1r().b[3][1]++, context));
    /* istanbul ignore next */
    cov_17hktubx1r().s[11]++;
    this.log("fatal", message, errorContext);
  }
  /**
   * Log AI request start
   */
  logRequestStart(requestId, context) {
    /* istanbul ignore next */
    cov_17hktubx1r().f[6]++;
    cov_17hktubx1r().s[12]++;
    this.info("AI request started", Object.assign(Object.assign({
      requestId
    }, context), {
      operation: "request_start"
    }));
  }
  /**
   * Log AI request completion
   */
  logRequestComplete(requestId, context) {
    /* istanbul ignore next */
    cov_17hktubx1r().f[7]++;
    cov_17hktubx1r().s[13]++;
    this.info("AI request completed", Object.assign(Object.assign({
      requestId
    }, context), {
      operation: "request_complete"
    }));
  }
  /**
   * Log AI request error
   */
  logRequestError(requestId, error, context) {
    /* istanbul ignore next */
    cov_17hktubx1r().f[8]++;
    cov_17hktubx1r().s[14]++;
    this.error("AI request failed", error, Object.assign(Object.assign({
      requestId
    }, context), {
      operation: "request_error"
    }));
  }
  /**
   * Log provider fallback
   */
  logProviderFallback(requestId, fromProvider, toProvider, reason) {
    /* istanbul ignore next */
    cov_17hktubx1r().f[9]++;
    cov_17hktubx1r().s[15]++;
    this.warn("Provider fallback triggered", {
      requestId,
      fromProvider,
      toProvider,
      reason,
      operation: "provider_fallback"
    });
  }
  /**
   * Log cache hit/miss
   */
  logCacheEvent(requestId, event, key, ttl) {
    /* istanbul ignore next */
    cov_17hktubx1r().f[10]++;
    cov_17hktubx1r().s[16]++;
    this.debug(`Cache ${event}`, {
      requestId,
      cacheKey: key,
      ttl,
      operation: `cache_${event}`
    });
  }
  /**
   * Log performance metrics
   */
  logPerformanceMetrics(requestId, metrics) {
    /* istanbul ignore next */
    cov_17hktubx1r().f[11]++;
    cov_17hktubx1r().s[17]++;
    this.info("Performance metrics", Object.assign(Object.assign({
      requestId
    }, metrics), {
      operation: "performance_metrics"
    }));
  }
  /**
   * Core logging method
   */
  log(level, message, context) {
    /* istanbul ignore next */
    cov_17hktubx1r().f[12]++;
    cov_17hktubx1r().s[18]++;
    if (!this.shouldLog(level)) {
      /* istanbul ignore next */
      cov_17hktubx1r().b[4][0]++;
      cov_17hktubx1r().s[19]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_17hktubx1r().b[4][1]++;
    }
    const logEntry =
    /* istanbul ignore next */
    (cov_17hktubx1r().s[20]++, {
      timestamp: new Date().toISOString(),
      level,
      message,
      context: Object.assign({
        service: this.serviceName,
        environment: this.environment
      }, context)
    });
    // In production, this would send to CloudWatch
    // For now, use structured console logging
    /* istanbul ignore next */
    cov_17hktubx1r().s[21]++;
    if (this.environment === "production") {
      /* istanbul ignore next */
      cov_17hktubx1r().b[5][0]++;
      cov_17hktubx1r().s[22]++;
      console.log(JSON.stringify(logEntry));
    } else {
      /* istanbul ignore next */
      cov_17hktubx1r().b[5][1]++;
      cov_17hktubx1r().s[23]++;
      // Pretty print for development
      this.prettyPrint(logEntry);
    }
  }
  /**
   * Pretty print log entry for development
   */
  prettyPrint(entry) {
    /* istanbul ignore next */
    cov_17hktubx1r().f[13]++;
    var _a;
    const colors =
    /* istanbul ignore next */
    (cov_17hktubx1r().s[24]++, {
      debug: "\x1b[36m",
      // Cyan
      info: "\x1b[32m",
      // Green
      warn: "\x1b[33m",
      // Yellow
      error: "\x1b[31m",
      // Red
      fatal: "\x1b[35m" // Magenta
    });
    const reset =
    /* istanbul ignore next */
    (cov_17hktubx1r().s[25]++, "\x1b[0m");
    const color =
    /* istanbul ignore next */
    (cov_17hktubx1r().s[26]++,
    /* istanbul ignore next */
    (cov_17hktubx1r().b[6][0]++, colors[entry.level]) ||
    /* istanbul ignore next */
    (cov_17hktubx1r().b[6][1]++, ""));
    /* istanbul ignore next */
    cov_17hktubx1r().s[27]++;
    console.log(`${color}[${entry.timestamp}] ${entry.level.toUpperCase()}${reset}: ${entry.message}`, entry.context ?
    /* istanbul ignore next */
    (cov_17hktubx1r().b[7][0]++, entry.context) :
    /* istanbul ignore next */
    (cov_17hktubx1r().b[7][1]++, ""));
    /* istanbul ignore next */
    cov_17hktubx1r().s[28]++;
    if (
    /* istanbul ignore next */
    (cov_17hktubx1r().b[10][0]++, (_a = entry.context) === null) ||
    /* istanbul ignore next */
    (cov_17hktubx1r().b[10][1]++, _a === void 0) ?
    /* istanbul ignore next */
    (cov_17hktubx1r().b[9][0]++, void 0) :
    /* istanbul ignore next */
    (cov_17hktubx1r().b[9][1]++, _a.error)) {
      /* istanbul ignore next */
      cov_17hktubx1r().b[8][0]++;
      cov_17hktubx1r().s[29]++;
      console.error(`${color}Error Stack:${reset}`, entry.context.error.stack);
    } else
    /* istanbul ignore next */
    {
      cov_17hktubx1r().b[8][1]++;
    }
  }
  /**
   * Check if log level should be logged
   */
  shouldLog(level) {
    /* istanbul ignore next */
    cov_17hktubx1r().f[14]++;
    const levels =
    /* istanbul ignore next */
    (cov_17hktubx1r().s[30]++, {
      debug: 0,
      info: 1,
      warn: 2,
      error: 3,
      fatal: 4
    });
    /* istanbul ignore next */
    cov_17hktubx1r().s[31]++;
    return levels[level] >= levels[this.minLevel];
  }
  /**
   * Get minimum log level from environment
   */
  getMinLogLevel() {
    /* istanbul ignore next */
    cov_17hktubx1r().f[15]++;
    var _a;
    const envLevel =
    /* istanbul ignore next */
    (cov_17hktubx1r().s[32]++,
    /* istanbul ignore next */
    (cov_17hktubx1r().b[12][0]++, (_a = process.env.LOG_LEVEL) === null) ||
    /* istanbul ignore next */
    (cov_17hktubx1r().b[12][1]++, _a === void 0) ?
    /* istanbul ignore next */
    (cov_17hktubx1r().b[11][0]++, void 0) :
    /* istanbul ignore next */
    (cov_17hktubx1r().b[11][1]++, _a.toLowerCase()));
    const validLevels =
    /* istanbul ignore next */
    (cov_17hktubx1r().s[33]++, ["debug", "info", "warn", "error", "fatal"]);
    /* istanbul ignore next */
    cov_17hktubx1r().s[34]++;
    if (
    /* istanbul ignore next */
    (cov_17hktubx1r().b[14][0]++, envLevel) &&
    /* istanbul ignore next */
    (cov_17hktubx1r().b[14][1]++, validLevels.includes(envLevel))) {
      /* istanbul ignore next */
      cov_17hktubx1r().b[13][0]++;
      cov_17hktubx1r().s[35]++;
      return envLevel;
    } else
    /* istanbul ignore next */
    {
      cov_17hktubx1r().b[13][1]++;
    }
    // Default log levels by environment
    cov_17hktubx1r().s[36]++;
    switch (this.environment) {
      case "production":
        /* istanbul ignore next */
        cov_17hktubx1r().b[15][0]++;
        cov_17hktubx1r().s[37]++;
        return "info";
      case "staging":
        /* istanbul ignore next */
        cov_17hktubx1r().b[15][1]++;
        cov_17hktubx1r().s[38]++;
        return "debug";
      default:
        /* istanbul ignore next */
        cov_17hktubx1r().b[15][2]++;
        cov_17hktubx1r().s[39]++;
        return "debug";
    }
  }
  /**
   * Create child logger with additional context
   */
  child(context) {
    /* istanbul ignore next */
    cov_17hktubx1r().f[16]++;
    const childLogger =
    /* istanbul ignore next */
    (cov_17hktubx1r().s[40]++, new BasicLogger(this.serviceName, this.environment));
    // Override log method to include parent context
    const originalLog =
    /* istanbul ignore next */
    (cov_17hktubx1r().s[41]++, childLogger.log.bind(childLogger));
    /* istanbul ignore next */
    cov_17hktubx1r().s[42]++;
    childLogger.log = (level, message, childContext) => {
      /* istanbul ignore next */
      cov_17hktubx1r().f[17]++;
      cov_17hktubx1r().s[43]++;
      originalLog(level, message, Object.assign(Object.assign({}, context), childContext));
    };
    /* istanbul ignore next */
    cov_17hktubx1r().s[44]++;
    return childLogger;
  }
}
/* istanbul ignore next */
cov_17hktubx1r().s[45]++;
exports.BasicLogger = BasicLogger;
/**
 * Default logger instance
 */
/* istanbul ignore next */
cov_17hktubx1r().s[46]++;
exports.logger = new BasicLogger("ai-orchestrator",
/* istanbul ignore next */
(cov_17hktubx1r().b[16][0]++, process.env.NODE_ENV) ||
/* istanbul ignore next */
(cov_17hktubx1r().b[16][1]++, "development"));
/**
 * Create logger for specific service
 */
/* istanbul ignore next */
cov_17hktubx1r().s[47]++;
const createLogger = (serviceName, environment) => {
  /* istanbul ignore next */
  cov_17hktubx1r().f[18]++;
  cov_17hktubx1r().s[48]++;
  return new BasicLogger(serviceName,
  /* istanbul ignore next */
  (cov_17hktubx1r().b[17][0]++, environment) ||
  /* istanbul ignore next */
  (cov_17hktubx1r().b[17][1]++, process.env.NODE_ENV) ||
  /* istanbul ignore next */
  (cov_17hktubx1r().b[17][2]++, "development"));
};
/* istanbul ignore next */
cov_17hktubx1r().s[49]++;
exports.createLogger = createLogger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
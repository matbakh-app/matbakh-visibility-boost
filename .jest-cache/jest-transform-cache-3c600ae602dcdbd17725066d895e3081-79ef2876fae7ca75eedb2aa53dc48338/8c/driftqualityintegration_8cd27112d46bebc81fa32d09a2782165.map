{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/drift-quality-integration.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/drift-quality-integration.ts"],"sourcesContent":["/**\n * Drift Detection and Quality Monitoring Integration Service\n *\n * Provides unified drift detection and quality monitoring for AI models:\n * - Integrates SageMaker Model Monitor with quality assessments\n * - Correlates drift patterns with quality degradation\n * - Provides comprehensive monitoring dashboard data\n * - Automated alerting and remediation recommendations\n */\n\nimport {\n  CloudWatchClient,\n  PutMetricDataCommand,\n} from \"@aws-sdk/client-cloudwatch\";\nimport { SageMakerClient } from \"@aws-sdk/client-sagemaker\";\nimport { DriftAlert, DriftMetrics, DriftMonitor } from \"./drift-monitor\";\nimport {\n  QualityAlert,\n  QualityAssessment,\n  QualityMonitor,\n  QualityTrends,\n} from \"./quality-monitor\";\n\nexport interface IntegratedMonitoringMetrics {\n  timestamp: Date;\n  modelId: string;\n  provider: string;\n\n  // Combined drift and quality metrics\n  driftMetrics: DriftMetrics;\n  qualityAssessment: QualityAssessment;\n\n  // Correlation analysis\n  correlationAnalysis: {\n    driftQualityCorrelation: number; // -1 to 1\n    performanceImpact: number; // 0 to 1\n    userSatisfactionImpact: number; // 0 to 1\n    riskScore: number; // 0 to 1 (combined risk assessment)\n  };\n\n  // Recommendations\n  recommendations: {\n    priority: \"low\" | \"medium\" | \"high\" | \"critical\";\n    actions: Array<{\n      type: \"immediate\" | \"short_term\" | \"long_term\";\n      description: string;\n      impact: \"low\" | \"medium\" | \"high\";\n      effort: \"low\" | \"medium\" | \"high\";\n    }>;\n  };\n}\n\nexport interface MonitoringDashboardData {\n  modelId: string;\n  timeRange: {\n    start: Date;\n    end: Date;\n  };\n\n  // Current status\n  currentStatus: {\n    overallHealth: \"healthy\" | \"warning\" | \"critical\";\n    driftStatus: \"stable\" | \"warning\" | \"critical\";\n    qualityStatus: \"good\" | \"warning\" | \"poor\";\n    performanceStatus: \"optimal\" | \"degraded\" | \"poor\";\n  };\n\n  // Key metrics\n  keyMetrics: {\n    overallScore: number;\n    driftScore: number;\n    qualityScore: number;\n    performanceScore: number;\n    userSatisfactionScore: number;\n  };\n\n  // Trends\n  trends: {\n    drift: Array<{ timestamp: Date; score: number }>;\n    quality: Array<{ timestamp: Date; score: number }>;\n    performance: Array<{ timestamp: Date; latency: number; accuracy: number }>;\n    userSatisfaction: Array<{ timestamp: Date; rating: number }>;\n  };\n\n  // Active alerts\n  activeAlerts: Array<DriftAlert | QualityAlert>;\n\n  // Recommendations\n  topRecommendations: Array<{\n    priority: \"high\" | \"medium\" | \"low\";\n    category: \"drift\" | \"quality\" | \"performance\" | \"user_experience\";\n    description: string;\n    expectedImpact: string;\n  }>;\n}\n\nexport class DriftQualityIntegration {\n  private driftMonitor: DriftMonitor;\n  private qualityMonitor: QualityMonitor;\n  private cloudWatch: CloudWatchClient;\n  private monitoringHistory: Map<string, IntegratedMonitoringMetrics[]> =\n    new Map();\n  private alertCallbacks: Array<\n    (alert: DriftAlert | QualityAlert) => Promise<void>\n  > = [];\n\n  constructor(cloudWatch?: CloudWatchClient, sageMaker?: SageMakerClient) {\n    this.cloudWatch =\n      cloudWatch ||\n      new CloudWatchClient({\n        region: process.env.AWS_REGION || \"eu-central-1\",\n      });\n\n    // Initialize monitors\n    this.driftMonitor = new DriftMonitor(this.cloudWatch, sageMaker);\n    this.qualityMonitor = new QualityMonitor(\n      this.driftMonitor,\n      this.cloudWatch\n    );\n\n    // Register for alerts from both monitors\n    this.driftMonitor.onAlert(this.handleAlert.bind(this));\n    this.qualityMonitor.onAlert(this.handleAlert.bind(this));\n  }\n\n  /**\n   * Initialize monitoring for a model\n   */\n  async initializeModelMonitoring(\n    modelId: string,\n    baselineMetrics: DriftMetrics,\n    sageMakerConfig?: {\n      endpointName: string;\n      baselineDataUri: string;\n    }\n  ): Promise<void> {\n    // Set baseline for drift monitoring\n    await this.driftMonitor.setBaseline(modelId, baselineMetrics);\n\n    // Setup SageMaker monitoring if configured\n    if (sageMakerConfig) {\n      await this.driftMonitor.setupSageMakerMonitor(\n        modelId,\n        sageMakerConfig.endpointName,\n        sageMakerConfig.baselineDataUri\n      );\n    }\n\n    // Initialize monitoring history\n    this.monitoringHistory.set(modelId, []);\n  }\n\n  /**\n   * Monitor AI interaction with integrated drift and quality assessment\n   */\n  async monitorInteraction(\n    modelId: string,\n    provider: string,\n    requestId: string,\n    input: string,\n    output: string,\n    metadata: {\n      latency: number;\n      tokenCount: number;\n      cost: number;\n      userFeedback?: QualityAssessment[\"userFeedback\"];\n    },\n    currentDriftMetrics: DriftMetrics\n  ): Promise<IntegratedMonitoringMetrics> {\n    // Perform drift monitoring\n    const driftAlerts = await this.driftMonitor.monitorDrift(\n      currentDriftMetrics\n    );\n\n    // Perform quality assessment\n    const qualityAssessment = await this.qualityMonitor.assessQuality(\n      modelId,\n      provider,\n      requestId,\n      input,\n      output,\n      metadata\n    );\n\n    // Perform correlation analysis\n    const correlationAnalysis = this.analyzeCorrelations(\n      currentDriftMetrics,\n      qualityAssessment\n    );\n\n    // Generate recommendations\n    const recommendations = this.generateRecommendations(\n      currentDriftMetrics,\n      qualityAssessment,\n      correlationAnalysis,\n      driftAlerts\n    );\n\n    // Create integrated metrics\n    const integratedMetrics: IntegratedMonitoringMetrics = {\n      timestamp: new Date(),\n      modelId,\n      provider,\n      driftMetrics: currentDriftMetrics,\n      qualityAssessment,\n      correlationAnalysis,\n      recommendations,\n    };\n\n    // Store in history\n    const history = this.monitoringHistory.get(modelId) || [];\n    history.push(integratedMetrics);\n\n    // Keep only last 500 entries per model\n    if (history.length > 500) {\n      history.splice(0, history.length - 500);\n    }\n    this.monitoringHistory.set(modelId, history);\n\n    // Publish integrated metrics\n    await this.publishIntegratedMetrics(integratedMetrics);\n\n    return integratedMetrics;\n  }\n\n  /**\n   * Get dashboard data for monitoring interface\n   */\n  async getDashboardData(\n    modelId: string,\n    timeRange: { start: Date; end: Date }\n  ): Promise<MonitoringDashboardData> {\n    const history = this.monitoringHistory.get(modelId) || [];\n    const relevantMetrics = history.filter(\n      (m) => m.timestamp >= timeRange.start && m.timestamp <= timeRange.end\n    );\n\n    if (relevantMetrics.length === 0) {\n      throw new Error(\n        `No monitoring data found for model ${modelId} in the specified time range`\n      );\n    }\n\n    // Calculate current status\n    const latestMetrics = relevantMetrics[relevantMetrics.length - 1];\n    const currentStatus = this.calculateCurrentStatus(latestMetrics);\n\n    // Calculate key metrics\n    const keyMetrics = this.calculateKeyMetrics(relevantMetrics);\n\n    // Extract trends\n    const trends = this.extractTrends(relevantMetrics);\n\n    // Get active alerts (last 24 hours)\n    const activeAlerts = await this.getActiveAlerts(modelId);\n\n    // Generate top recommendations\n    const topRecommendations = this.generateTopRecommendations(relevantMetrics);\n\n    return {\n      modelId,\n      timeRange,\n      currentStatus,\n      keyMetrics,\n      trends,\n      activeAlerts,\n      topRecommendations,\n    };\n  }\n\n  /**\n   * Get quality trends with drift correlation\n   */\n  async getQualityTrendsWithDrift(\n    modelId: string,\n    timeRange: { start: Date; end: Date }\n  ): Promise<QualityTrends & { driftCorrelation: number }> {\n    const qualityTrends = await this.qualityMonitor.analyzeQualityTrends(\n      modelId,\n      timeRange\n    );\n\n    const history = this.monitoringHistory.get(modelId) || [];\n    const relevantMetrics = history.filter(\n      (m) => m.timestamp >= timeRange.start && m.timestamp <= timeRange.end\n    );\n\n    // Calculate overall drift-quality correlation\n    const driftScores = relevantMetrics.map(\n      (m) => m.driftMetrics.dataDrift.score\n    );\n    const qualityScores = relevantMetrics.map(\n      (m) => m.qualityAssessment.overallScore\n    );\n    const driftCorrelation = this.calculateCorrelation(\n      driftScores,\n      qualityScores\n    );\n\n    return {\n      ...qualityTrends,\n      driftCorrelation,\n    };\n  }\n\n  /**\n   * Register alert callback\n   */\n  onAlert(callback: (alert: DriftAlert | QualityAlert) => Promise<void>): void {\n    this.alertCallbacks.push(callback);\n  }\n\n  /**\n   * Analyze correlations between drift and quality metrics\n   */\n  private analyzeCorrelations(\n    driftMetrics: DriftMetrics,\n    qualityAssessment: QualityAssessment\n  ): IntegratedMonitoringMetrics[\"correlationAnalysis\"] {\n    // Calculate drift-quality correlation\n    const driftScore =\n      (driftMetrics.dataDrift.score +\n        driftMetrics.promptDrift.driftScore +\n        driftMetrics.performanceRegression.latency.regressionScore) /\n      3;\n\n    const qualityScore = qualityAssessment.overallScore;\n    const driftQualityCorrelation = -driftScore; // Higher drift typically means lower quality\n\n    // Calculate performance impact\n    const performanceImpact = Math.max(\n      driftMetrics.performanceRegression.latency.regressionScore,\n      driftMetrics.performanceRegression.accuracy.regressionScore,\n      driftMetrics.performanceRegression.errorRate.regressionScore\n    );\n\n    // Calculate user satisfaction impact\n    const userSatisfactionImpact = qualityAssessment.userFeedback\n      ? Math.max(0, (5 - qualityAssessment.userFeedback.rating) / 4)\n      : 0;\n\n    // Calculate combined risk score\n    const riskScore = Math.min(\n      1,\n      driftScore * 0.3 +\n        (1 - qualityScore) * 0.4 +\n        performanceImpact * 0.2 +\n        userSatisfactionImpact * 0.1\n    );\n\n    return {\n      driftQualityCorrelation,\n      performanceImpact,\n      userSatisfactionImpact,\n      riskScore,\n    };\n  }\n\n  /**\n   * Generate integrated recommendations\n   */\n  private generateRecommendations(\n    driftMetrics: DriftMetrics,\n    qualityAssessment: QualityAssessment,\n    correlationAnalysis: IntegratedMonitoringMetrics[\"correlationAnalysis\"],\n    driftAlerts: DriftAlert[]\n  ): IntegratedMonitoringMetrics[\"recommendations\"] {\n    const actions: IntegratedMonitoringMetrics[\"recommendations\"][\"actions\"] =\n      [];\n\n    // Determine priority based on risk score\n    let priority: \"low\" | \"medium\" | \"high\" | \"critical\" = \"low\";\n    if (correlationAnalysis.riskScore >= 0.8) priority = \"critical\";\n    else if (correlationAnalysis.riskScore >= 0.6) priority = \"high\";\n    else if (correlationAnalysis.riskScore >= 0.4) priority = \"medium\";\n\n    // Data drift recommendations\n    if (driftMetrics.dataDrift.score > 0.3) {\n      actions.push({\n        type: \"immediate\",\n        description: \"Review and update training data to address data drift\",\n        impact: \"high\",\n        effort: \"medium\",\n      });\n    }\n\n    // Prompt drift recommendations\n    if (driftMetrics.promptDrift.driftScore > 0.2) {\n      actions.push({\n        type: \"short_term\",\n        description: \"Optimize prompt templates based on usage patterns\",\n        impact: \"medium\",\n        effort: \"low\",\n      });\n    }\n\n    // Performance regression recommendations\n    if (correlationAnalysis.performanceImpact > 0.3) {\n      actions.push({\n        type: \"immediate\",\n        description: \"Investigate and resolve performance bottlenecks\",\n        impact: \"high\",\n        effort: \"medium\",\n      });\n    }\n\n    // Quality improvement recommendations\n    if (qualityAssessment.overallScore < 0.7) {\n      actions.push({\n        type: \"short_term\",\n        description:\n          \"Implement quality improvement measures (fine-tuning, RAG)\",\n        impact: \"high\",\n        effort: \"high\",\n      });\n    }\n\n    // User satisfaction recommendations\n    if (correlationAnalysis.userSatisfactionImpact > 0.3) {\n      actions.push({\n        type: \"short_term\",\n        description: \"Analyze user feedback and improve response relevance\",\n        impact: \"medium\",\n        effort: \"medium\",\n      });\n    }\n\n    return { priority, actions };\n  }\n\n  /**\n   * Calculate current status from latest metrics\n   */\n  private calculateCurrentStatus(\n    metrics: IntegratedMonitoringMetrics\n  ): MonitoringDashboardData[\"currentStatus\"] {\n    const { driftMetrics, qualityAssessment, correlationAnalysis } = metrics;\n\n    // Determine drift status\n    let driftStatus: \"stable\" | \"warning\" | \"critical\" = \"stable\";\n    const maxDriftScore = Math.max(\n      driftMetrics.dataDrift.score,\n      driftMetrics.promptDrift.driftScore\n    );\n    if (maxDriftScore >= 0.5) driftStatus = \"critical\";\n    else if (maxDriftScore >= 0.3) driftStatus = \"warning\";\n\n    // Determine quality status\n    let qualityStatus: \"good\" | \"warning\" | \"poor\" = \"good\";\n    if (qualityAssessment.overallScore <= 0.6) qualityStatus = \"poor\";\n    else if (qualityAssessment.overallScore <= 0.7) qualityStatus = \"warning\";\n\n    // Determine performance status\n    let performanceStatus: \"optimal\" | \"degraded\" | \"poor\" = \"optimal\";\n    if (correlationAnalysis.performanceImpact >= 0.5)\n      performanceStatus = \"poor\";\n    else if (correlationAnalysis.performanceImpact >= 0.3)\n      performanceStatus = \"degraded\";\n\n    // Determine overall health\n    let overallHealth: \"healthy\" | \"warning\" | \"critical\" = \"healthy\";\n    if (\n      driftStatus === \"critical\" ||\n      qualityStatus === \"poor\" ||\n      performanceStatus === \"poor\"\n    ) {\n      overallHealth = \"critical\";\n    } else if (\n      driftStatus === \"warning\" ||\n      qualityStatus === \"warning\" ||\n      performanceStatus === \"degraded\"\n    ) {\n      overallHealth = \"warning\";\n    }\n\n    return {\n      overallHealth,\n      driftStatus,\n      qualityStatus,\n      performanceStatus,\n    };\n  }\n\n  /**\n   * Calculate key metrics from historical data\n   */\n  private calculateKeyMetrics(\n    metrics: IntegratedMonitoringMetrics[]\n  ): MonitoringDashboardData[\"keyMetrics\"] {\n    const latest = metrics[metrics.length - 1];\n\n    return {\n      overallScore: latest.correlationAnalysis.riskScore,\n      driftScore:\n        (latest.driftMetrics.dataDrift.score +\n          latest.driftMetrics.promptDrift.driftScore) /\n        2,\n      qualityScore: latest.qualityAssessment.overallScore,\n      performanceScore: 1 - latest.correlationAnalysis.performanceImpact,\n      userSatisfactionScore: latest.qualityAssessment.userFeedback?.rating || 0,\n    };\n  }\n\n  /**\n   * Extract trends from historical metrics\n   */\n  private extractTrends(\n    metrics: IntegratedMonitoringMetrics[]\n  ): MonitoringDashboardData[\"trends\"] {\n    return {\n      drift: metrics.map((m) => ({\n        timestamp: m.timestamp,\n        score:\n          (m.driftMetrics.dataDrift.score +\n            m.driftMetrics.promptDrift.driftScore) /\n          2,\n      })),\n      quality: metrics.map((m) => ({\n        timestamp: m.timestamp,\n        score: m.qualityAssessment.overallScore,\n      })),\n      performance: metrics.map((m) => ({\n        timestamp: m.timestamp,\n        latency: m.qualityAssessment.performance.latency,\n        accuracy: m.driftMetrics.performanceRegression.accuracy.current,\n      })),\n      userSatisfaction: metrics\n        .filter((m) => m.qualityAssessment.userFeedback)\n        .map((m) => ({\n          timestamp: m.timestamp,\n          rating: m.qualityAssessment.userFeedback!.rating,\n        })),\n    };\n  }\n\n  /**\n   * Get active alerts for a model\n   */\n  private async getActiveAlerts(\n    modelId: string\n  ): Promise<Array<DriftAlert | QualityAlert>> {\n    // In a real implementation, this would query a persistent alert store\n    // For now, return empty array as alerts are handled in real-time\n    return [];\n  }\n\n  /**\n   * Generate top recommendations from historical data\n   */\n  private generateTopRecommendations(\n    metrics: IntegratedMonitoringMetrics[]\n  ): MonitoringDashboardData[\"topRecommendations\"] {\n    const latest = metrics[metrics.length - 1];\n    const recommendations: MonitoringDashboardData[\"topRecommendations\"] = [];\n\n    // Analyze trends to generate recommendations\n    if (metrics.length >= 5) {\n      const recentMetrics = metrics.slice(-5);\n      const qualityTrend = this.calculateTrendDirection(\n        recentMetrics.map((m) => m.qualityAssessment.overallScore)\n      );\n\n      if (qualityTrend === \"declining\") {\n        recommendations.push({\n          priority: \"high\",\n          category: \"quality\",\n          description:\n            \"Quality scores are declining - implement immediate quality improvements\",\n          expectedImpact:\n            \"Prevent further quality degradation and improve user satisfaction\",\n        });\n      }\n    }\n\n    // Add recommendations based on current state\n    if (latest.correlationAnalysis.riskScore > 0.7) {\n      recommendations.push({\n        priority: \"high\",\n        category: \"drift\",\n        description:\n          \"High risk score detected - review model performance and data quality\",\n        expectedImpact: \"Reduce system risk and improve overall stability\",\n      });\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Calculate trend direction from values\n   */\n  private calculateTrendDirection(\n    values: number[]\n  ): \"improving\" | \"stable\" | \"declining\" {\n    if (values.length < 2) return \"stable\";\n\n    const first = values[0];\n    const last = values[values.length - 1];\n    const change = (last - first) / first;\n\n    if (Math.abs(change) < 0.05) return \"stable\";\n    return change > 0 ? \"improving\" : \"declining\";\n  }\n\n  /**\n   * Calculate correlation coefficient\n   */\n  private calculateCorrelation(x: number[], y: number[]): number {\n    if (x.length !== y.length || x.length === 0) return 0;\n\n    const n = x.length;\n    const sumX = x.reduce((a, b) => a + b, 0);\n    const sumY = y.reduce((a, b) => a + b, 0);\n    const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0);\n    const sumX2 = x.reduce((sum, xi) => sum + xi * xi, 0);\n    const sumY2 = y.reduce((sum, yi) => sum + yi * yi, 0);\n\n    const numerator = n * sumXY - sumX * sumY;\n    const denominator = Math.sqrt(\n      (n * sumX2 - sumX * sumX) * (n * sumY2 - sumY * sumY)\n    );\n\n    return denominator === 0 ? 0 : numerator / denominator;\n  }\n\n  /**\n   * Publish integrated metrics to CloudWatch\n   */\n  private async publishIntegratedMetrics(\n    metrics: IntegratedMonitoringMetrics\n  ): Promise<void> {\n    const metricData = [\n      {\n        MetricName: \"RiskScore\",\n        Value: metrics.correlationAnalysis.riskScore,\n        Unit: \"None\",\n        Dimensions: [\n          { Name: \"ModelId\", Value: metrics.modelId },\n          { Name: \"Provider\", Value: metrics.provider },\n        ],\n        Timestamp: metrics.timestamp,\n      },\n      {\n        MetricName: \"DriftQualityCorrelation\",\n        Value: metrics.correlationAnalysis.driftQualityCorrelation,\n        Unit: \"None\",\n        Dimensions: [\n          { Name: \"ModelId\", Value: metrics.modelId },\n          { Name: \"Provider\", Value: metrics.provider },\n        ],\n        Timestamp: metrics.timestamp,\n      },\n      {\n        MetricName: \"PerformanceImpact\",\n        Value: metrics.correlationAnalysis.performanceImpact,\n        Unit: \"None\",\n        Dimensions: [\n          { Name: \"ModelId\", Value: metrics.modelId },\n          { Name: \"Provider\", Value: metrics.provider },\n        ],\n        Timestamp: metrics.timestamp,\n      },\n    ];\n\n    await this.cloudWatch.send(\n      new PutMetricDataCommand({\n        Namespace: \"AI/Integrated\",\n        MetricData: metricData,\n      })\n    );\n  }\n\n  /**\n   * Handle alerts from drift and quality monitors\n   */\n  private async handleAlert(alert: DriftAlert | QualityAlert): Promise<void> {\n    for (const callback of this.alertCallbacks) {\n      try {\n        await callback(alert);\n      } catch (error) {\n        console.error(\"Failed to handle integrated alert:\", error);\n      }\n    }\n  }\n}\n\nexport default DriftQualityIntegration;\n"],"version":3}
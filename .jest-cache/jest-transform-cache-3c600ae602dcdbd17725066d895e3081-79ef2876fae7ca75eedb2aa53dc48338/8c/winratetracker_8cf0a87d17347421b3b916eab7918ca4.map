{"version":3,"names":["cov_2qih99dwnz","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","WinRateTracker","constructor","config","experiments","Map","comparisons","reports","winRateThreshold","significanceThreshold","minSampleSize","reportingConfig","enableDailyReports","enableWeeklyReports","enableMonthlyReports","enableRealTimeAlerts","alertThresholds","winRateDropThreshold","businessImpactThreshold","costIncreaseThreshold","reportRecipients","reportFormat","recordResult","result","experimentId","has","set","get","push","maybeRunComparison","compareResponses","controlResponse","treatmentResponse","userFeedback","comparison","performComparison","getWinRateMetrics","length","controlWins","filter","c","winner","treatmentWins","ties","totalComparisons","controlWinRate","treatmentWinRate","statisticalSignificance","calculateStatisticalSignificance","confidenceInterval","calculateConfidenceInterval","businessImpact","calculateBusinessImpact","recommendedAction","getRecommendedAction","shouldRollback","metrics","revenueLift","shouldPromote","getActiveExperiments","Array","from","keys","generateAutomatedReport","reportType","reportId","Date","now","Math","random","toString","substr","generatedAt","activeExperiments","summary","generateReportSummary","topPerformers","getTopPerformers","alerts","generateAlerts","recommendations","generateRecommendations","trends","generateTrends","report","processRealTimeAlerts","getReports","values","sort","a","getTime","getReport","scheduleAutomatedReporting","console","log","updateReportingConfig","Object","assign","exportReport","format","Error","exportFormat","JSON","stringify","generateHtmlReport","generatePdfReport","getExperimentSummary","results","controlResults","r","variant","treatmentResults","avgControlLatency","reduce","sum","response","latencyMs","avgTreatmentLatency","avgControlCost","costEuro","avgTreatmentCost","totalResults","averageLatency","control","treatment","averageCost","winRateMetrics","quality","compareQuality","latency","compareLatency","cost","compareCost","userSatisfaction","compareUserSatisfaction","weights","compositeScore","confidence","EPS","abs","min","improvementHigherIsBetter","controlLength","_a","text","treatmentLength","_b","optimalLength","controlLengthScore","treatmentLengthScore","safeNorm","n","d","isFinite","v","max","improvementLowerIsBetter","denom","controlLatency","treatmentLatency","controlCost","treatmentCost","matchingTreatment","find","t","requestsMatch","request","req1","req2","prompt","context","domain","locale","p1","p2","pooledP","se","sqrt","z","exp","winRate","sampleSize","controlConversion","businessMetric","treatmentConversion","controlRevenue","treatmentRevenue","conversionLift","costImpact","significance","completedExperiments","promotedExperiments","rolledBackExperiments","totalExperiments","performers","map","recommendation","p","slice","message","toFixed","severity","actionRequired","reason","expectedImpact","action","winRateOverTime","businessImpactOverTime","costEfficiencyOverTime","i","date","totalWinRate","totalBusinessImpact","totalCostEfficiency","validExperiments","impact","efficiency","criticalAlerts","alert","highAlerts","warn","toISOString","toUpperCase","join","performer","rec","exports","createWinRateTracker"],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/win-rate-tracker.ts"],"sourcesContent":["/**\n * Win-Rate Tracker for A/B Testing\n *\n * Implements:\n * - Automated win-rate calculation\n * - Statistical significance testing\n * - Experiment performance tracking\n * - Rollback trigger detection\n * - Business metrics correlation\n */\n\nimport { AiRequest, AiResponse, Provider } from \"./types\";\n\nexport interface ExperimentResult {\n  experimentId: string;\n  variant: \"control\" | \"treatment\";\n  provider: Provider;\n  modelId: string;\n  request: AiRequest;\n  response: AiResponse;\n  userFeedback?: number; // 1-5 rating\n  businessMetric?: number; // Conversion, revenue, etc.\n  timestamp: Date;\n}\n\nexport interface WinRateMetrics {\n  experimentId: string;\n  controlWinRate: number;\n  treatmentWinRate: number;\n  totalComparisons: number;\n  statisticalSignificance: number;\n  confidenceInterval: [number, number];\n  recommendedAction: \"continue\" | \"promote\" | \"rollback\";\n  businessImpact: {\n    conversionLift: number;\n    revenueLift: number;\n    costImpact: number;\n  };\n}\n\nexport interface ComparisonResult {\n  winner: \"control\" | \"treatment\" | \"tie\";\n  confidence: number;\n  metrics: {\n    quality: number;\n    latency: number;\n    cost: number;\n    userSatisfaction: number;\n  };\n}\n\nexport interface AutomatedReport {\n  reportId: string;\n  experimentId: string;\n  generatedAt: Date;\n  reportType: \"daily\" | \"weekly\" | \"monthly\" | \"experiment-complete\";\n  summary: {\n    totalExperiments: number;\n    activeExperiments: number;\n    completedExperiments: number;\n    promotedExperiments: number;\n    rolledBackExperiments: number;\n  };\n  topPerformers: {\n    experimentId: string;\n    winRate: number;\n    businessImpact: number;\n    recommendation: string;\n  }[];\n  alerts: {\n    type:\n      | \"performance-degradation\"\n      | \"statistical-significance\"\n      | \"business-impact\";\n    experimentId: string;\n    message: string;\n    severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n    actionRequired: boolean;\n  }[];\n  recommendations: {\n    experimentId: string;\n    action: \"continue\" | \"promote\" | \"rollback\" | \"investigate\";\n    reason: string;\n    confidence: number;\n    expectedImpact: string;\n  }[];\n  trends: {\n    winRateOverTime: { date: Date; winRate: number }[];\n    businessImpactOverTime: { date: Date; impact: number }[];\n    costEfficiencyOverTime: { date: Date; efficiency: number }[];\n  };\n}\n\nexport interface ReportingConfig {\n  enableDailyReports: boolean;\n  enableWeeklyReports: boolean;\n  enableMonthlyReports: boolean;\n  enableRealTimeAlerts: boolean;\n  alertThresholds: {\n    winRateDropThreshold: number;\n    businessImpactThreshold: number;\n    costIncreaseThreshold: number;\n  };\n  reportRecipients: string[];\n  reportFormat: \"json\" | \"html\" | \"pdf\";\n}\n\n/**\n * Win-Rate Tracker for A/B Testing\n */\nexport class WinRateTracker {\n  private experiments: Map<string, ExperimentResult[]> = new Map();\n  private comparisons: Map<string, ComparisonResult[]> = new Map();\n  private reports: Map<string, AutomatedReport> = new Map();\n  private winRateThreshold: number = 0.85; // 85% win rate target\n  private significanceThreshold: number = 0.95; // 95% confidence\n  private minSampleSize: number = 100;\n  private reportingConfig: ReportingConfig;\n\n  constructor(config?: {\n    winRateThreshold?: number;\n    significanceThreshold?: number;\n    minSampleSize?: number;\n    reportingConfig?: ReportingConfig;\n  }) {\n    if (config) {\n      this.winRateThreshold = config.winRateThreshold || this.winRateThreshold;\n      this.significanceThreshold =\n        config.significanceThreshold || this.significanceThreshold;\n      this.minSampleSize = config.minSampleSize || this.minSampleSize;\n    }\n\n    // Default reporting configuration\n    this.reportingConfig = config?.reportingConfig || {\n      enableDailyReports: true,\n      enableWeeklyReports: true,\n      enableMonthlyReports: true,\n      enableRealTimeAlerts: true,\n      alertThresholds: {\n        winRateDropThreshold: 0.1, // 10% drop\n        businessImpactThreshold: -0.05, // -5% business impact\n        costIncreaseThreshold: 0.2, // 20% cost increase\n      },\n      reportRecipients: [],\n      reportFormat: \"json\",\n    };\n  }\n\n  /**\n   * Record experiment result\n   */\n  recordResult(result: ExperimentResult): void {\n    const { experimentId } = result;\n\n    if (!this.experiments.has(experimentId)) {\n      this.experiments.set(experimentId, []);\n    }\n\n    this.experiments.get(experimentId)!.push(result);\n\n    // Trigger comparison if we have enough data\n    this.maybeRunComparison(experimentId);\n  }\n\n  /**\n   * Compare two responses and determine winner\n   */\n  compareResponses(\n    experimentId: string,\n    controlResponse: AiResponse,\n    treatmentResponse: AiResponse,\n    userFeedback?: { control: number; treatment: number }\n  ): ComparisonResult {\n    const comparison = this.performComparison(\n      controlResponse,\n      treatmentResponse,\n      userFeedback\n    );\n\n    // Store comparison result\n    if (!this.comparisons.has(experimentId)) {\n      this.comparisons.set(experimentId, []);\n    }\n\n    this.comparisons.get(experimentId)!.push(comparison);\n\n    return comparison;\n  }\n\n  /**\n   * Get win-rate metrics for experiment\n   */\n  getWinRateMetrics(experimentId: string): WinRateMetrics | null {\n    const comparisons = this.comparisons.get(experimentId);\n\n    if (!comparisons || comparisons.length < this.minSampleSize) {\n      return null;\n    }\n\n    const controlWins = comparisons.filter(\n      (c) => c.winner === \"control\"\n    ).length;\n    const treatmentWins = comparisons.filter(\n      (c) => c.winner === \"treatment\"\n    ).length;\n    const ties = comparisons.filter((c) => c.winner === \"tie\").length;\n\n    const totalComparisons = comparisons.length;\n    const controlWinRate = controlWins / (totalComparisons - ties);\n    const treatmentWinRate = treatmentWins / (totalComparisons - ties);\n\n    const statisticalSignificance = this.calculateStatisticalSignificance(\n      controlWins,\n      treatmentWins,\n      totalComparisons - ties\n    );\n\n    const confidenceInterval = this.calculateConfidenceInterval(\n      treatmentWinRate,\n      totalComparisons - ties\n    );\n\n    const businessImpact = this.calculateBusinessImpact(experimentId);\n\n    const recommendedAction = this.getRecommendedAction(\n      treatmentWinRate,\n      statisticalSignificance,\n      businessImpact\n    );\n\n    return {\n      experimentId,\n      controlWinRate,\n      treatmentWinRate,\n      totalComparisons,\n      statisticalSignificance,\n      confidenceInterval,\n      recommendedAction,\n      businessImpact,\n    };\n  }\n\n  /**\n   * Check if experiment should be rolled back\n   */\n  shouldRollback(experimentId: string): boolean {\n    const metrics = this.getWinRateMetrics(experimentId);\n\n    if (!metrics) {\n      return false;\n    }\n\n    // Rollback if treatment is significantly worse\n    return (\n      metrics.treatmentWinRate < 0.5 && // Treatment losing\n      metrics.statisticalSignificance > this.significanceThreshold && // Statistically significant\n      metrics.businessImpact.revenueLift < -0.05 // Revenue impact > -5%\n    );\n  }\n\n  /**\n   * Check if experiment should be promoted\n   */\n  shouldPromote(experimentId: string): boolean {\n    const metrics = this.getWinRateMetrics(experimentId);\n\n    if (!metrics) {\n      return false;\n    }\n\n    // Promote if treatment is significantly better\n    return (\n      metrics.treatmentWinRate > this.winRateThreshold && // High win rate\n      metrics.statisticalSignificance > this.significanceThreshold && // Statistically significant\n      metrics.businessImpact.revenueLift > 0.02 // Revenue lift > 2%\n    );\n  }\n\n  /**\n   * Get all active experiments\n   */\n  getActiveExperiments(): string[] {\n    return Array.from(this.experiments.keys());\n  }\n\n  /**\n   * Generate automated report\n   */\n  generateAutomatedReport(\n    reportType: \"daily\" | \"weekly\" | \"monthly\" | \"experiment-complete\",\n    experimentId?: string\n  ): AutomatedReport {\n    const reportId = `report-${Date.now()}-${Math.random()\n      .toString(36)\n      .substr(2, 9)}`;\n    const generatedAt = new Date();\n\n    const activeExperiments = this.getActiveExperiments();\n    const summary = this.generateReportSummary(activeExperiments);\n    const topPerformers = this.getTopPerformers(activeExperiments);\n    const alerts = this.generateAlerts(activeExperiments);\n    const recommendations = this.generateRecommendations(activeExperiments);\n    const trends = this.generateTrends(activeExperiments);\n\n    const report: AutomatedReport = {\n      reportId,\n      experimentId: experimentId || \"all\",\n      generatedAt,\n      reportType,\n      summary,\n      topPerformers,\n      alerts,\n      recommendations,\n      trends,\n    };\n\n    this.reports.set(reportId, report);\n\n    // Trigger real-time alerts if enabled\n    if (this.reportingConfig.enableRealTimeAlerts) {\n      this.processRealTimeAlerts(alerts);\n    }\n\n    return report;\n  }\n\n  /**\n   * Get all generated reports\n   */\n  getReports(): AutomatedReport[] {\n    return Array.from(this.reports.values()).sort(\n      (a, b) => b.generatedAt.getTime() - a.generatedAt.getTime()\n    );\n  }\n\n  /**\n   * Get specific report by ID\n   */\n  getReport(reportId: string): AutomatedReport | null {\n    return this.reports.get(reportId) || null;\n  }\n\n  /**\n   * Schedule automated reporting\n   */\n  scheduleAutomatedReporting(): void {\n    if (this.reportingConfig.enableDailyReports) {\n      // In a real implementation, this would use a scheduler like node-cron\n      console.log(\"Daily reporting scheduled\");\n    }\n\n    if (this.reportingConfig.enableWeeklyReports) {\n      console.log(\"Weekly reporting scheduled\");\n    }\n\n    if (this.reportingConfig.enableMonthlyReports) {\n      console.log(\"Monthly reporting scheduled\");\n    }\n  }\n\n  /**\n   * Update reporting configuration\n   */\n  updateReportingConfig(config: Partial<ReportingConfig>): void {\n    this.reportingConfig = { ...this.reportingConfig, ...config };\n  }\n\n  /**\n   * Export report in specified format\n   */\n  exportReport(reportId: string, format?: \"json\" | \"html\" | \"pdf\"): string {\n    const report = this.getReport(reportId);\n    if (!report) {\n      throw new Error(`Report ${reportId} not found`);\n    }\n\n    const exportFormat = format || this.reportingConfig.reportFormat;\n\n    switch (exportFormat) {\n      case \"json\":\n        return JSON.stringify(report, null, 2);\n      case \"html\":\n        return this.generateHtmlReport(report);\n      case \"pdf\":\n        return this.generatePdfReport(report);\n      default:\n        return JSON.stringify(report, null, 2);\n    }\n  }\n\n  /**\n   * Get experiment summary\n   */\n  getExperimentSummary(experimentId: string): {\n    totalResults: number;\n    controlResults: number;\n    treatmentResults: number;\n    averageLatency: { control: number; treatment: number };\n    averageCost: { control: number; treatment: number };\n    winRateMetrics: WinRateMetrics | null;\n  } | null {\n    const results = this.experiments.get(experimentId);\n\n    if (!results) {\n      return null;\n    }\n\n    const controlResults = results.filter((r) => r.variant === \"control\");\n    const treatmentResults = results.filter((r) => r.variant === \"treatment\");\n\n    const avgControlLatency =\n      controlResults.length > 0\n        ? controlResults.reduce((sum, r) => sum + r.response.latencyMs, 0) /\n          controlResults.length\n        : 0;\n\n    const avgTreatmentLatency =\n      treatmentResults.length > 0\n        ? treatmentResults.reduce((sum, r) => sum + r.response.latencyMs, 0) /\n          treatmentResults.length\n        : 0;\n\n    const avgControlCost =\n      controlResults.length > 0\n        ? controlResults.reduce((sum, r) => sum + r.response.costEuro, 0) /\n          controlResults.length\n        : 0;\n\n    const avgTreatmentCost =\n      treatmentResults.length > 0\n        ? treatmentResults.reduce((sum, r) => sum + r.response.costEuro, 0) /\n          treatmentResults.length\n        : 0;\n\n    return {\n      totalResults: results.length,\n      controlResults: controlResults.length,\n      treatmentResults: treatmentResults.length,\n      averageLatency: {\n        control: avgControlLatency,\n        treatment: avgTreatmentLatency,\n      },\n      averageCost: {\n        control: avgControlCost,\n        treatment: avgTreatmentCost,\n      },\n      winRateMetrics: this.getWinRateMetrics(experimentId),\n    };\n  }\n\n  /**\n   * Perform comparison between responses\n   */\n  private performComparison(\n    controlResponse: AiResponse,\n    treatmentResponse: AiResponse,\n    userFeedback?: { control: number; treatment: number }\n  ): ComparisonResult {\n    const metrics = {\n      quality: this.compareQuality(\n        controlResponse,\n        treatmentResponse,\n        userFeedback\n      ),\n      latency: this.compareLatency(controlResponse, treatmentResponse),\n      cost: this.compareCost(controlResponse, treatmentResponse),\n      userSatisfaction: this.compareUserSatisfaction(userFeedback),\n    };\n\n    // Weighted scoring\n    const weights = {\n      quality: 0.4,\n      latency: 0.2,\n      cost: 0.2,\n      userSatisfaction: 0.2,\n    };\n\n    // Calculate composite score\n    // All metrics now follow the same convention: positive = treatment better, negative = control better\n    const compositeScore =\n      metrics.quality * weights.quality +\n      metrics.latency * weights.latency +\n      metrics.cost * weights.cost +\n      metrics.userSatisfaction * weights.userSatisfaction;\n\n    let winner: \"control\" | \"treatment\" | \"tie\";\n    let confidence: number;\n\n    // Epsilon for \"nearly equal\" to avoid flapping\n    const EPS = 1e-3;\n\n    if (Math.abs(compositeScore) <= EPS) {\n      winner = \"tie\";\n      confidence = 0.5;\n    } else if (compositeScore > 0) {\n      winner = \"treatment\";\n      confidence = Math.min(0.95, 0.5 + Math.abs(compositeScore));\n    } else {\n      winner = \"control\";\n      confidence = Math.min(0.95, 0.5 + Math.abs(compositeScore));\n    }\n\n    return {\n      winner,\n      confidence,\n      metrics,\n    };\n  }\n\n  /**\n   * Compare quality between responses\n   */\n  private compareQuality(\n    controlResponse: AiResponse,\n    treatmentResponse: AiResponse,\n    userFeedback?: { control: number; treatment: number }\n  ): number {\n    // If we have user feedback, use that\n    if (userFeedback) {\n      // Higher feedback is better - positive means treatment is better\n      return this.improvementHigherIsBetter(\n        userFeedback.control,\n        userFeedback.treatment\n      );\n    }\n\n    // Otherwise, use heuristics\n    const controlLength = controlResponse.text?.length || 0;\n    const treatmentLength = treatmentResponse.text?.length || 0;\n\n    // Prefer responses that are not too short or too long\n    const optimalLength = 500;\n    const controlLengthScore =\n      1 - Math.abs(controlLength - optimalLength) / optimalLength;\n    const treatmentLengthScore =\n      1 - Math.abs(treatmentLength - optimalLength) / optimalLength;\n\n    // Higher quality score is better - positive means treatment is better\n    return this.improvementHigherIsBetter(\n      controlLengthScore,\n      treatmentLengthScore\n    );\n  }\n\n  /**\n   * Helper: robust normalization function\n   */\n  private safeNorm(n: number, d: number): number {\n    if (!isFinite(n) || !isFinite(d) || d === 0) return 0;\n    // clamp to [-1, 1] just in case\n    const v = n / d;\n    return Math.max(-1, Math.min(1, v));\n  }\n\n  /**\n   * For metrics where LOWER is better (latency, cost):\n   * positive => treatment better; negative => control better\n   */\n  private improvementLowerIsBetter(control: number, treatment: number): number {\n    const denom = Math.max(Math.abs(control), Math.abs(treatment), 1e-9);\n    return this.safeNorm(control - treatment, denom);\n  }\n\n  /**\n   * For metrics where HIGHER is better (quality, feedback, win rate):\n   * positive => treatment better; negative => control better\n   */\n  private improvementHigherIsBetter(\n    control: number,\n    treatment: number\n  ): number {\n    const denom = Math.max(Math.abs(control), Math.abs(treatment), 1e-9);\n    return this.safeNorm(treatment - control, denom);\n  }\n\n  /**\n   * Compare latency between responses\n   */\n  private compareLatency(\n    controlResponse: AiResponse,\n    treatmentResponse: AiResponse\n  ): number {\n    const controlLatency = controlResponse.latencyMs;\n    const treatmentLatency = treatmentResponse.latencyMs;\n\n    // Lower latency is better - positive means treatment is faster\n    return this.improvementLowerIsBetter(controlLatency, treatmentLatency);\n  }\n\n  /**\n   * Compare cost between responses\n   */\n  private compareCost(\n    controlResponse: AiResponse,\n    treatmentResponse: AiResponse\n  ): number {\n    const controlCost = controlResponse.costEuro;\n    const treatmentCost = treatmentResponse.costEuro;\n\n    // Lower cost is better - positive means treatment is cheaper\n    return this.improvementLowerIsBetter(controlCost, treatmentCost);\n  }\n\n  /**\n   * Compare user satisfaction\n   */\n  private compareUserSatisfaction(userFeedback?: {\n    control: number;\n    treatment: number;\n  }): number {\n    if (!userFeedback) {\n      return 0;\n    }\n\n    // Higher satisfaction is better - positive means treatment is better\n    return this.improvementHigherIsBetter(\n      userFeedback.control,\n      userFeedback.treatment\n    );\n  }\n\n  /**\n   * Maybe run comparison if we have enough data\n   */\n  private maybeRunComparison(experimentId: string): void {\n    const results = this.experiments.get(experimentId)!;\n\n    // Check if we have paired results to compare\n    const controlResults = results.filter((r) => r.variant === \"control\");\n    const treatmentResults = results.filter((r) => r.variant === \"treatment\");\n\n    if (controlResults.length > 0 && treatmentResults.length > 0) {\n      // Find matching requests for comparison\n      for (const control of controlResults) {\n        const matchingTreatment = treatmentResults.find((t) =>\n          this.requestsMatch(control.request, t.request)\n        );\n\n        if (matchingTreatment) {\n          this.compareResponses(\n            experimentId,\n            control.response,\n            matchingTreatment.response,\n            {\n              control: control.userFeedback || 3,\n              treatment: matchingTreatment.userFeedback || 3,\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if two requests match for comparison\n   */\n  private requestsMatch(req1: AiRequest, req2: AiRequest): boolean {\n    return (\n      req1.prompt === req2.prompt &&\n      req1.context.domain === req2.context.domain &&\n      req1.context.locale === req2.context.locale\n    );\n  }\n\n  /**\n   * Calculate statistical significance\n   */\n  private calculateStatisticalSignificance(\n    controlWins: number,\n    treatmentWins: number,\n    totalComparisons: number\n  ): number {\n    // Simple z-test for proportions\n    const p1 = controlWins / totalComparisons;\n    const p2 = treatmentWins / totalComparisons;\n    const pooledP = (controlWins + treatmentWins) / totalComparisons;\n\n    const se = Math.sqrt(pooledP * (1 - pooledP) * (2 / totalComparisons));\n    const z = Math.abs(p1 - p2) / se;\n\n    // Convert z-score to confidence level (approximation)\n    return Math.min(0.99, 1 - Math.exp((-z * z) / 2));\n  }\n\n  /**\n   * Calculate confidence interval\n   */\n  private calculateConfidenceInterval(\n    winRate: number,\n    sampleSize: number\n  ): [number, number] {\n    const z = 1.96; // 95% confidence\n    const se = Math.sqrt((winRate * (1 - winRate)) / sampleSize);\n\n    return [Math.max(0, winRate - z * se), Math.min(1, winRate + z * se)];\n  }\n\n  /**\n   * Calculate business impact\n   */\n  private calculateBusinessImpact(experimentId: string): {\n    conversionLift: number;\n    revenueLift: number;\n    costImpact: number;\n  } {\n    const results = this.experiments.get(experimentId) || [];\n\n    const controlResults = results.filter((r) => r.variant === \"control\");\n    const treatmentResults = results.filter((r) => r.variant === \"treatment\");\n\n    const controlConversion =\n      controlResults.filter((r) => r.businessMetric && r.businessMetric > 0)\n        .length / controlResults.length;\n    const treatmentConversion =\n      treatmentResults.filter((r) => r.businessMetric && r.businessMetric > 0)\n        .length / treatmentResults.length;\n\n    const controlRevenue =\n      controlResults.reduce((sum, r) => sum + (r.businessMetric || 0), 0) /\n      controlResults.length;\n    const treatmentRevenue =\n      treatmentResults.reduce((sum, r) => sum + (r.businessMetric || 0), 0) /\n      treatmentResults.length;\n\n    const controlCost =\n      controlResults.reduce((sum, r) => sum + r.response.costEuro, 0) /\n      controlResults.length;\n    const treatmentCost =\n      treatmentResults.reduce((sum, r) => sum + r.response.costEuro, 0) /\n      treatmentResults.length;\n\n    return {\n      conversionLift:\n        controlConversion > 0\n          ? (treatmentConversion - controlConversion) / controlConversion\n          : 0,\n      revenueLift:\n        controlRevenue > 0\n          ? (treatmentRevenue - controlRevenue) / controlRevenue\n          : 0,\n      costImpact:\n        controlCost > 0 ? (treatmentCost - controlCost) / controlCost : 0,\n    };\n  }\n\n  /**\n   * Get recommended action\n   */\n  private getRecommendedAction(\n    treatmentWinRate: number,\n    significance: number,\n    businessImpact: {\n      conversionLift: number;\n      revenueLift: number;\n      costImpact: number;\n    }\n  ): \"continue\" | \"promote\" | \"rollback\" {\n    if (significance < this.significanceThreshold) {\n      return \"continue\"; // Not enough data yet\n    }\n\n    if (\n      treatmentWinRate > this.winRateThreshold &&\n      businessImpact.revenueLift > 0.02\n    ) {\n      return \"promote\";\n    }\n\n    if (treatmentWinRate < 0.5 && businessImpact.revenueLift < -0.05) {\n      return \"rollback\";\n    }\n\n    return \"continue\";\n  }\n\n  /**\n   * Generate report summary\n   */\n  private generateReportSummary(activeExperiments: string[]): {\n    totalExperiments: number;\n    activeExperiments: number;\n    completedExperiments: number;\n    promotedExperiments: number;\n    rolledBackExperiments: number;\n  } {\n    let completedExperiments = 0;\n    let promotedExperiments = 0;\n    let rolledBackExperiments = 0;\n\n    for (const experimentId of activeExperiments) {\n      const metrics = this.getWinRateMetrics(experimentId);\n      if (metrics) {\n        if (metrics.recommendedAction === \"promote\") {\n          promotedExperiments++;\n          completedExperiments++;\n        } else if (metrics.recommendedAction === \"rollback\") {\n          rolledBackExperiments++;\n          completedExperiments++;\n        }\n      }\n    }\n\n    return {\n      totalExperiments: activeExperiments.length,\n      activeExperiments: activeExperiments.length - completedExperiments,\n      completedExperiments,\n      promotedExperiments,\n      rolledBackExperiments,\n    };\n  }\n\n  /**\n   * Get top performing experiments\n   */\n  private getTopPerformers(activeExperiments: string[]): {\n    experimentId: string;\n    winRate: number;\n    businessImpact: number;\n    recommendation: string;\n  }[] {\n    const performers = activeExperiments\n      .map((experimentId) => {\n        const metrics = this.getWinRateMetrics(experimentId);\n        if (!metrics) return null;\n\n        return {\n          experimentId,\n          winRate: metrics.treatmentWinRate,\n          businessImpact: metrics.businessImpact.revenueLift,\n          recommendation: metrics.recommendedAction,\n        };\n      })\n      .filter((p) => p !== null)\n      .sort((a, b) => b!.winRate - a!.winRate)\n      .slice(0, 5);\n\n    return performers as {\n      experimentId: string;\n      winRate: number;\n      businessImpact: number;\n      recommendation: string;\n    }[];\n  }\n\n  /**\n   * Generate alerts for experiments\n   */\n  private generateAlerts(activeExperiments: string[]): {\n    type:\n      | \"performance-degradation\"\n      | \"statistical-significance\"\n      | \"business-impact\";\n    experimentId: string;\n    message: string;\n    severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n    actionRequired: boolean;\n  }[] {\n    const alerts: {\n      type:\n        | \"performance-degradation\"\n        | \"statistical-significance\"\n        | \"business-impact\";\n      experimentId: string;\n      message: string;\n      severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n      actionRequired: boolean;\n    }[] = [];\n\n    for (const experimentId of activeExperiments) {\n      const metrics = this.getWinRateMetrics(experimentId);\n      if (!metrics) continue;\n\n      // Performance degradation alert\n      if (\n        metrics.treatmentWinRate < 0.5 &&\n        metrics.statisticalSignificance > 0.8\n      ) {\n        alerts.push({\n          type: \"performance-degradation\",\n          experimentId,\n          message: `Treatment performing significantly worse than control (${(\n            metrics.treatmentWinRate * 100\n          ).toFixed(1)}% win rate)`,\n          severity: \"high\",\n          actionRequired: true,\n        });\n      }\n\n      // Statistical significance alert\n      if (metrics.statisticalSignificance > this.significanceThreshold) {\n        alerts.push({\n          type: \"statistical-significance\",\n          experimentId,\n          message: `Experiment has reached statistical significance (${(\n            metrics.statisticalSignificance * 100\n          ).toFixed(1)}%)`,\n          severity: \"medium\",\n          actionRequired: true,\n        });\n      }\n\n      // Business impact alert\n      if (\n        metrics.businessImpact.revenueLift <\n        this.reportingConfig.alertThresholds.businessImpactThreshold\n      ) {\n        alerts.push({\n          type: \"business-impact\",\n          experimentId,\n          message: `Negative business impact detected (${(\n            metrics.businessImpact.revenueLift * 100\n          ).toFixed(1)}% revenue impact)`,\n          severity: \"critical\",\n          actionRequired: true,\n        });\n      }\n    }\n\n    return alerts;\n  }\n\n  /**\n   * Generate recommendations for experiments\n   */\n  private generateRecommendations(activeExperiments: string[]): {\n    experimentId: string;\n    action: \"continue\" | \"promote\" | \"rollback\" | \"investigate\";\n    reason: string;\n    confidence: number;\n    expectedImpact: string;\n  }[] {\n    return activeExperiments\n      .map((experimentId) => {\n        const metrics = this.getWinRateMetrics(experimentId);\n        if (!metrics) return null;\n\n        let reason = \"\";\n        let expectedImpact = \"\";\n        let action: \"continue\" | \"promote\" | \"rollback\" | \"investigate\" =\n          metrics.recommendedAction;\n\n        switch (metrics.recommendedAction) {\n          case \"promote\":\n            reason = `High win rate (${(metrics.treatmentWinRate * 100).toFixed(\n              1\n            )}%) with positive business impact`;\n            expectedImpact = `+${(\n              metrics.businessImpact.revenueLift * 100\n            ).toFixed(1)}% revenue lift`;\n            break;\n          case \"rollback\":\n            reason = `Poor performance with negative business impact`;\n            expectedImpact = `${(\n              metrics.businessImpact.revenueLift * 100\n            ).toFixed(1)}% revenue impact`;\n            break;\n          case \"continue\":\n            if (metrics.statisticalSignificance < this.significanceThreshold) {\n              reason = \"Insufficient data for decision\";\n              expectedImpact = \"Continue collecting data\";\n            } else {\n              reason = \"Marginal improvement, continue monitoring\";\n              expectedImpact = `${(\n                metrics.businessImpact.revenueLift * 100\n              ).toFixed(1)}% revenue impact`;\n            }\n            break;\n        }\n\n        // Add investigate action for anomalies\n        if (\n          metrics.treatmentWinRate > 0.9 &&\n          metrics.businessImpact.revenueLift < 0\n        ) {\n          action = \"investigate\";\n          reason =\n            \"High win rate but negative business impact - investigate metrics\";\n          expectedImpact = \"Potential measurement issue\";\n        }\n\n        return {\n          experimentId,\n          action,\n          reason,\n          confidence: metrics.statisticalSignificance,\n          expectedImpact,\n        };\n      })\n      .filter((r) => r !== null) as {\n      experimentId: string;\n      action: \"continue\" | \"promote\" | \"rollback\" | \"investigate\";\n      reason: string;\n      confidence: number;\n      expectedImpact: string;\n    }[];\n  }\n\n  /**\n   * Generate trends data\n   */\n  private generateTrends(activeExperiments: string[]): {\n    winRateOverTime: { date: Date; winRate: number }[];\n    businessImpactOverTime: { date: Date; impact: number }[];\n    costEfficiencyOverTime: { date: Date; efficiency: number }[];\n  } {\n    // In a real implementation, this would analyze historical data\n    // For now, we'll generate sample trend data\n    const now = new Date();\n    const trends = {\n      winRateOverTime: [] as { date: Date; winRate: number }[],\n      businessImpactOverTime: [] as { date: Date; impact: number }[],\n      costEfficiencyOverTime: [] as { date: Date; efficiency: number }[],\n    };\n\n    // Generate last 30 days of trend data\n    for (let i = 29; i >= 0; i--) {\n      const date = new Date(now.getTime() - i * 24 * 60 * 60 * 1000);\n\n      // Calculate average metrics for active experiments\n      let totalWinRate = 0;\n      let totalBusinessImpact = 0;\n      let totalCostEfficiency = 0;\n      let validExperiments = 0;\n\n      for (const experimentId of activeExperiments) {\n        const metrics = this.getWinRateMetrics(experimentId);\n        if (metrics) {\n          totalWinRate += metrics.treatmentWinRate;\n          totalBusinessImpact += metrics.businessImpact.revenueLift;\n          totalCostEfficiency += 1 - metrics.businessImpact.costImpact;\n          validExperiments++;\n        }\n      }\n\n      if (validExperiments > 0) {\n        trends.winRateOverTime.push({\n          date,\n          winRate: totalWinRate / validExperiments,\n        });\n        trends.businessImpactOverTime.push({\n          date,\n          impact: totalBusinessImpact / validExperiments,\n        });\n        trends.costEfficiencyOverTime.push({\n          date,\n          efficiency: totalCostEfficiency / validExperiments,\n        });\n      }\n    }\n\n    return trends;\n  }\n\n  /**\n   * Process real-time alerts\n   */\n  private processRealTimeAlerts(\n    alerts: {\n      type:\n        | \"performance-degradation\"\n        | \"statistical-significance\"\n        | \"business-impact\";\n      experimentId: string;\n      message: string;\n      severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n      actionRequired: boolean;\n    }[]\n  ): void {\n    // In a real implementation, this would send notifications\n    // via email, Slack, PagerDuty, etc.\n    const criticalAlerts = alerts.filter(\n      (alert) => alert.severity === \"critical\"\n    );\n    const highAlerts = alerts.filter((alert) => alert.severity === \"high\");\n\n    if (criticalAlerts.length > 0) {\n      console.warn(\n        `🚨 ${criticalAlerts.length} critical alerts detected:`,\n        criticalAlerts\n      );\n    }\n\n    if (highAlerts.length > 0) {\n      console.warn(\n        `⚠️ ${highAlerts.length} high-priority alerts detected:`,\n        highAlerts\n      );\n    }\n  }\n\n  /**\n   * Generate HTML report\n   */\n  private generateHtmlReport(report: AutomatedReport): string {\n    return `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Win-Rate Tracking Report - ${report.reportId}</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        .header { background: #f5f5f5; padding: 20px; border-radius: 5px; }\n        .section { margin: 20px 0; }\n        .alert { padding: 10px; margin: 5px 0; border-radius: 3px; }\n        .alert.critical { background: #ffebee; border-left: 4px solid #f44336; }\n        .alert.high { background: #fff3e0; border-left: 4px solid #ff9800; }\n        .alert.medium { background: #e8f5e8; border-left: 4px solid #4caf50; }\n        table { width: 100%; border-collapse: collapse; }\n        th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }\n        th { background-color: #f2f2f2; }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>Win-Rate Tracking Report</h1>\n        <p><strong>Report ID:</strong> ${report.reportId}</p>\n        <p><strong>Generated:</strong> ${report.generatedAt.toISOString()}</p>\n        <p><strong>Type:</strong> ${report.reportType}</p>\n    </div>\n\n    <div class=\"section\">\n        <h2>Summary</h2>\n        <ul>\n            <li>Total Experiments: ${report.summary.totalExperiments}</li>\n            <li>Active Experiments: ${report.summary.activeExperiments}</li>\n            <li>Completed Experiments: ${\n              report.summary.completedExperiments\n            }</li>\n            <li>Promoted Experiments: ${report.summary.promotedExperiments}</li>\n            <li>Rolled Back Experiments: ${\n              report.summary.rolledBackExperiments\n            }</li>\n        </ul>\n    </div>\n\n    <div class=\"section\">\n        <h2>Alerts</h2>\n        ${report.alerts\n          .map(\n            (alert) => `\n            <div class=\"alert ${alert.severity}\">\n                <strong>${alert.type.toUpperCase()}:</strong> ${alert.message}\n                <br><small>Experiment: ${\n                  alert.experimentId\n                } | Action Required: ${\n              alert.actionRequired ? \"Yes\" : \"No\"\n            }</small>\n            </div>\n        `\n          )\n          .join(\"\")}\n    </div>\n\n    <div class=\"section\">\n        <h2>Top Performers</h2>\n        <table>\n            <tr>\n                <th>Experiment ID</th>\n                <th>Win Rate</th>\n                <th>Business Impact</th>\n                <th>Recommendation</th>\n            </tr>\n            ${report.topPerformers\n              .map(\n                (performer) => `\n                <tr>\n                    <td>${performer.experimentId}</td>\n                    <td>${(performer.winRate * 100).toFixed(1)}%</td>\n                    <td>${(performer.businessImpact * 100).toFixed(1)}%</td>\n                    <td>${performer.recommendation}</td>\n                </tr>\n            `\n              )\n              .join(\"\")}\n        </table>\n    </div>\n\n    <div class=\"section\">\n        <h2>Recommendations</h2>\n        <table>\n            <tr>\n                <th>Experiment ID</th>\n                <th>Action</th>\n                <th>Reason</th>\n                <th>Confidence</th>\n                <th>Expected Impact</th>\n            </tr>\n            ${report.recommendations\n              .map(\n                (rec) => `\n                <tr>\n                    <td>${rec.experimentId}</td>\n                    <td>${rec.action}</td>\n                    <td>${rec.reason}</td>\n                    <td>${(rec.confidence * 100).toFixed(1)}%</td>\n                    <td>${rec.expectedImpact}</td>\n                </tr>\n            `\n              )\n              .join(\"\")}\n        </table>\n    </div>\n</body>\n</html>\n    `;\n  }\n\n  /**\n   * Generate PDF report (placeholder)\n   */\n  private generatePdfReport(report: AutomatedReport): string {\n    // In a real implementation, this would use a library like puppeteer or jsPDF\n    return `PDF Report for ${\n      report.reportId\n    } - Generated at ${report.generatedAt.toISOString()}`;\n  }\n}\n\n/**\n * Factory function for creating win-rate tracker\n */\nexport const createWinRateTracker = (config?: {\n  winRateThreshold?: number;\n  significanceThreshold?: number;\n  minSampleSize?: number;\n  reportingConfig?: ReportingConfig;\n}): WinRateTracker => {\n  return new WinRateTracker(config);\n};\n"],"mappings":"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","ignoreList":[]}
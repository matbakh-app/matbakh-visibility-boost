fa15ccfa21027ed8fbeaf19a69d4494c
"use strict";

/**
 * KMS Encryption Service for Direct Bedrock Operations
 *
 * This module provides KMS-based encryption and decryption for sensitive data
 * in direct Bedrock operations, ensuring GDPR compliance and data protection.
 *
 * Features:
 * - Encrypt/decrypt sensitive operation data
 * - Secure PII storage with KMS encryption
 * - Audit trail integration for encryption operations
 * - Key rotation support
 * - Multi-region key management
 */
/* istanbul ignore next */
function cov_v9xtgb5ta() {
  var path = "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/kms-encryption-service.ts";
  var hash = "bb172cf5d9a0cd98c8ae690c5044fac211c59c04";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/kms-encryption-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 15,
          column: 62
        }
      },
      "1": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 16,
          column: 38
        }
      },
      "2": {
        start: {
          line: 17,
          column: 16
        },
        end: {
          line: 17,
          column: 32
        }
      },
      "3": {
        start: {
          line: 18,
          column: 21
        },
        end: {
          line: 18,
          column: 51
        }
      },
      "4": {
        start: {
          line: 19,
          column: 27
        },
        end: {
          line: 19,
          column: 56
        }
      },
      "5": {
        start: {
          line: 20,
          column: 29
        },
        end: {
          line: 20,
          column: 60
        }
      },
      "6": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 212
        }
      },
      "7": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 34,
          column: 11
        }
      },
      "8": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 68
        }
      },
      "9": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 44,
          column: 19
        }
      },
      "10": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 34
        }
      },
      "11": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 124,
          column: 11
        }
      },
      "12": {
        start: {
          line: 53,
          column: 30
        },
        end: {
          line: 53,
          column: 40
        }
      },
      "13": {
        start: {
          line: 54,
          column: 32
        },
        end: {
          line: 54,
          column: 58
        }
      },
      "14": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 123,
          column: 13
        }
      },
      "15": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 59,
          column: 17
        }
      },
      "16": {
        start: {
          line: 58,
          column: 20
        },
        end: {
          line: 58,
          column: 66
        }
      },
      "17": {
        start: {
          line: 61,
          column: 30
        },
        end: {
          line: 61,
          column: 68
        }
      },
      "18": {
        start: {
          line: 63,
          column: 42
        },
        end: {
          line: 64,
          column: 71
        }
      },
      "19": {
        start: {
          line: 66,
          column: 34
        },
        end: {
          line: 68,
          column: 39
        }
      },
      "20": {
        start: {
          line: 70,
          column: 32
        },
        end: {
          line: 74,
          column: 18
        }
      },
      "21": {
        start: {
          line: 75,
          column: 33
        },
        end: {
          line: 75,
          column: 64
        }
      },
      "22": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 78,
          column: 17
        }
      },
      "23": {
        start: {
          line: 77,
          column: 20
        },
        end: {
          line: 77,
          column: 81
        }
      },
      "24": {
        start: {
          line: 80,
          column: 35
        },
        end: {
          line: 80,
          column: 90
        }
      },
      "25": {
        start: {
          line: 81,
          column: 31
        },
        end: {
          line: 87,
          column: 17
        }
      },
      "26": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 102,
          column: 19
        }
      },
      "27": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 103,
          column: 30
        }
      },
      "28": {
        start: {
          line: 106,
          column: 37
        },
        end: {
          line: 106,
          column: 91
        }
      },
      "29": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 121,
          column: 19
        }
      },
      "30": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 74
        }
      },
      "31": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 191,
          column: 11
        }
      },
      "32": {
        start: {
          line: 131,
          column: 30
        },
        end: {
          line: 131,
          column: 40
        }
      },
      "33": {
        start: {
          line: 132,
          column: 32
        },
        end: {
          line: 132,
          column: 58
        }
      },
      "34": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 190,
          column: 13
        }
      },
      "35": {
        start: {
          line: 135,
          column: 16
        },
        end: {
          line: 137,
          column: 17
        }
      },
      "36": {
        start: {
          line: 136,
          column: 20
        },
        end: {
          line: 136,
          column: 66
        }
      },
      "37": {
        start: {
          line: 139,
          column: 35
        },
        end: {
          line: 139,
          column: 76
        }
      },
      "38": {
        start: {
          line: 141,
          column: 42
        },
        end: {
          line: 141,
          column: 67
        }
      },
      "39": {
        start: {
          line: 143,
          column: 32
        },
        end: {
          line: 143,
          column: 193
        }
      },
      "40": {
        start: {
          line: 144,
          column: 33
        },
        end: {
          line: 144,
          column: 64
        }
      },
      "41": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 147,
          column: 17
        }
      },
      "42": {
        start: {
          line: 146,
          column: 20
        },
        end: {
          line: 146,
          column: 80
        }
      },
      "43": {
        start: {
          line: 149,
          column: 34
        },
        end: {
          line: 149,
          column: 83
        }
      },
      "44": {
        start: {
          line: 150,
          column: 31
        },
        end: {
          line: 155,
          column: 17
        }
      },
      "45": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 169,
          column: 19
        }
      },
      "46": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 170,
          column: 30
        }
      },
      "47": {
        start: {
          line: 173,
          column: 37
        },
        end: {
          line: 173,
          column: 91
        }
      },
      "48": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 188,
          column: 19
        }
      },
      "49": {
        start: {
          line: 189,
          column: 16
        },
        end: {
          line: 189,
          column: 74
        }
      },
      "50": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 256,
          column: 11
        }
      },
      "51": {
        start: {
          line: 198,
          column: 30
        },
        end: {
          line: 198,
          column: 40
        }
      },
      "52": {
        start: {
          line: 199,
          column: 32
        },
        end: {
          line: 199,
          column: 58
        }
      },
      "53": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 255,
          column: 13
        }
      },
      "54": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 204,
          column: 17
        }
      },
      "55": {
        start: {
          line: 203,
          column: 20
        },
        end: {
          line: 203,
          column: 66
        }
      },
      "56": {
        start: {
          line: 206,
          column: 30
        },
        end: {
          line: 206,
          column: 55
        }
      },
      "57": {
        start: {
          line: 208,
          column: 42
        },
        end: {
          line: 208,
          column: 201
        }
      },
      "58": {
        start: {
          line: 210,
          column: 32
        },
        end: {
          line: 214,
          column: 18
        }
      },
      "59": {
        start: {
          line: 215,
          column: 33
        },
        end: {
          line: 215,
          column: 64
        }
      },
      "60": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 218,
          column: 17
        }
      },
      "61": {
        start: {
          line: 217,
          column: 20
        },
        end: {
          line: 217,
          column: 66
        }
      },
      "62": {
        start: {
          line: 219,
          column: 31
        },
        end: {
          line: 223,
          column: 17
        }
      },
      "63": {
        start: {
          line: 225,
          column: 16
        },
        end: {
          line: 235,
          column: 19
        }
      },
      "64": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 236,
          column: 30
        }
      },
      "65": {
        start: {
          line: 239,
          column: 37
        },
        end: {
          line: 239,
          column: 91
        }
      },
      "66": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 253,
          column: 19
        }
      },
      "67": {
        start: {
          line: 254,
          column: 16
        },
        end: {
          line: 254,
          column: 83
        }
      },
      "68": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 280,
          column: 11
        }
      },
      "69": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 279,
          column: 13
        }
      },
      "70": {
        start: {
          line: 264,
          column: 38
        },
        end: {
          line: 264,
          column: 68
        }
      },
      "71": {
        start: {
          line: 266,
          column: 32
        },
        end: {
          line: 268,
          column: 18
        }
      },
      "72": {
        start: {
          line: 269,
          column: 33
        },
        end: {
          line: 269,
          column: 64
        }
      },
      "73": {
        start: {
          line: 270,
          column: 16
        },
        end: {
          line: 275,
          column: 18
        }
      },
      "74": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 278,
          column: 128
        }
      },
      "75": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 307,
          column: 11
        }
      },
      "76": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 306,
          column: 13
        }
      },
      "77": {
        start: {
          line: 288,
          column: 38
        },
        end: {
          line: 288,
          column: 68
        }
      },
      "78": {
        start: {
          line: 289,
          column: 32
        },
        end: {
          line: 291,
          column: 18
        }
      },
      "79": {
        start: {
          line: 292,
          column: 16
        },
        end: {
          line: 292,
          column: 48
        }
      },
      "80": {
        start: {
          line: 294,
          column: 16
        },
        end: {
          line: 302,
          column: 19
        }
      },
      "81": {
        start: {
          line: 305,
          column: 16
        },
        end: {
          line: 305,
          column: 124
        }
      },
      "82": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 336,
          column: 11
        }
      },
      "83": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 335,
          column: 13
        }
      },
      "84": {
        start: {
          line: 315,
          column: 38
        },
        end: {
          line: 315,
          column: 68
        }
      },
      "85": {
        start: {
          line: 316,
          column: 32
        },
        end: {
          line: 318,
          column: 18
        }
      },
      "86": {
        start: {
          line: 319,
          column: 33
        },
        end: {
          line: 319,
          column: 64
        }
      },
      "87": {
        start: {
          line: 320,
          column: 16
        },
        end: {
          line: 322,
          column: 17
        }
      },
      "88": {
        start: {
          line: 321,
          column: 20
        },
        end: {
          line: 321,
          column: 62
        }
      },
      "89": {
        start: {
          line: 323,
          column: 16
        },
        end: {
          line: 331,
          column: 18
        }
      },
      "90": {
        start: {
          line: 334,
          column: 16
        },
        end: {
          line: 334,
          column: 117
        }
      },
      "91": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 355,
          column: 11
        }
      },
      "92": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 354,
          column: 13
        }
      },
      "93": {
        start: {
          line: 345,
          column: 32
        },
        end: {
          line: 345,
          column: 71
        }
      },
      "94": {
        start: {
          line: 346,
          column: 33
        },
        end: {
          line: 346,
          column: 64
        }
      },
      "95": {
        start: {
          line: 347,
          column: 16
        },
        end: {
          line: 350,
          column: 28
        }
      },
      "96": {
        start: {
          line: 347,
          column: 105
        },
        end: {
          line: 350,
          column: 17
        }
      },
      "97": {
        start: {
          line: 353,
          column: 16
        },
        end: {
          line: 353,
          column: 117
        }
      },
      "98": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 366,
          column: 11
        }
      },
      "99": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 365,
          column: 22
        }
      },
      "100": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 377,
          column: 11
        }
      },
      "101": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 376,
          column: 22
        }
      },
      "102": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 392,
          column: 11
        }
      },
      "103": {
        start: {
          line: 384,
          column: 32
        },
        end: {
          line: 384,
          column: 55
        }
      },
      "104": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 391,
          column: 36
        }
      },
      "105": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 407,
          column: 11
        }
      },
      "106": {
        start: {
          line: 399,
          column: 30
        },
        end: {
          line: 405,
          column: 35
        }
      },
      "107": {
        start: {
          line: 406,
          column: 12
        },
        end: {
          line: 406,
          column: 51
        }
      },
      "108": {
        start: {
          line: 414,
          column: 8
        },
        end: {
          line: 445,
          column: 11
        }
      },
      "109": {
        start: {
          line: 416,
          column: 12
        },
        end: {
          line: 418,
          column: 13
        }
      },
      "110": {
        start: {
          line: 417,
          column: 16
        },
        end: {
          line: 417,
          column: 29
        }
      },
      "111": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 422,
          column: 13
        }
      },
      "112": {
        start: {
          line: 421,
          column: 16
        },
        end: {
          line: 421,
          column: 41
        }
      },
      "113": {
        start: {
          line: 424,
          column: 12
        },
        end: {
          line: 443,
          column: 13
        }
      },
      "114": {
        start: {
          line: 426,
          column: 31
        },
        end: {
          line: 426,
          column: 70
        }
      },
      "115": {
        start: {
          line: 427,
          column: 16
        },
        end: {
          line: 430,
          column: 17
        }
      },
      "116": {
        start: {
          line: 429,
          column: 20
        },
        end: {
          line: 429,
          column: 40
        }
      },
      "117": {
        start: {
          line: 432,
          column: 32
        },
        end: {
          line: 432,
          column: 56
        }
      },
      "118": {
        start: {
          line: 433,
          column: 30
        },
        end: {
          line: 433,
          column: 87
        }
      },
      "119": {
        start: {
          line: 433,
          column: 50
        },
        end: {
          line: 433,
          column: 86
        }
      },
      "120": {
        start: {
          line: 434,
          column: 16
        },
        end: {
          line: 436,
          column: 17
        }
      },
      "121": {
        start: {
          line: 435,
          column: 20
        },
        end: {
          line: 435,
          column: 84
        }
      },
      "122": {
        start: {
          line: 438,
          column: 16
        },
        end: {
          line: 441,
          column: 19
        }
      },
      "123": {
        start: {
          line: 442,
          column: 16
        },
        end: {
          line: 442,
          column: 41
        }
      },
      "124": {
        start: {
          line: 444,
          column: 12
        },
        end: {
          line: 444,
          column: 65
        }
      },
      "125": {
        start: {
          line: 451,
          column: 8
        },
        end: {
          line: 451,
          column: 82
        }
      },
      "126": {
        start: {
          line: 457,
          column: 8
        },
        end: {
          line: 457,
          column: 30
        }
      },
      "127": {
        start: {
          line: 460,
          column: 0
        },
        end: {
          line: 460,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 41
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 25
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        loc: {
          start: {
            line: 51,
            column: 23
          },
          end: {
            line: 125,
            column: 5
          }
        },
        line: 51
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 52,
            column: 58
          },
          end: {
            line: 52,
            column: 59
          }
        },
        loc: {
          start: {
            line: 52,
            column: 110
          },
          end: {
            line: 124,
            column: 9
          }
        },
        line: 52
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 129,
            column: 5
          }
        },
        loc: {
          start: {
            line: 129,
            column: 23
          },
          end: {
            line: 192,
            column: 5
          }
        },
        line: 129
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 130,
            column: 58
          },
          end: {
            line: 130,
            column: 59
          }
        },
        loc: {
          start: {
            line: 130,
            column: 110
          },
          end: {
            line: 191,
            column: 9
          }
        },
        line: 130
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 196,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        },
        loc: {
          start: {
            line: 196,
            column: 22
          },
          end: {
            line: 257,
            column: 5
          }
        },
        line: 196
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 197,
            column: 58
          },
          end: {
            line: 197,
            column: 59
          }
        },
        loc: {
          start: {
            line: 197,
            column: 83
          },
          end: {
            line: 256,
            column: 9
          }
        },
        line: 197
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 261,
            column: 4
          },
          end: {
            line: 261,
            column: 5
          }
        },
        loc: {
          start: {
            line: 261,
            column: 32
          },
          end: {
            line: 281,
            column: 5
          }
        },
        line: 261
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 262,
            column: 55
          },
          end: {
            line: 262,
            column: 56
          }
        },
        loc: {
          start: {
            line: 262,
            column: 68
          },
          end: {
            line: 280,
            column: 9
          }
        },
        line: 262
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 285,
            column: 4
          },
          end: {
            line: 285,
            column: 5
          }
        },
        loc: {
          start: {
            line: 285,
            column: 29
          },
          end: {
            line: 308,
            column: 5
          }
        },
        line: 285
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 286,
            column: 55
          },
          end: {
            line: 286,
            column: 56
          }
        },
        loc: {
          start: {
            line: 286,
            column: 68
          },
          end: {
            line: 307,
            column: 9
          }
        },
        line: 286
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 312,
            column: 4
          },
          end: {
            line: 312,
            column: 5
          }
        },
        loc: {
          start: {
            line: 312,
            column: 23
          },
          end: {
            line: 337,
            column: 5
          }
        },
        line: 312
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 313,
            column: 55
          },
          end: {
            line: 313,
            column: 56
          }
        },
        loc: {
          start: {
            line: 313,
            column: 68
          },
          end: {
            line: 336,
            column: 9
          }
        },
        line: 313
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 341,
            column: 4
          },
          end: {
            line: 341,
            column: 5
          }
        },
        loc: {
          start: {
            line: 341,
            column: 18
          },
          end: {
            line: 356,
            column: 5
          }
        },
        line: 341
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 342,
            column: 55
          },
          end: {
            line: 342,
            column: 56
          }
        },
        loc: {
          start: {
            line: 342,
            column: 68
          },
          end: {
            line: 355,
            column: 9
          }
        },
        line: 342
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 347,
            column: 93
          },
          end: {
            line: 347,
            column: 94
          }
        },
        loc: {
          start: {
            line: 347,
            column: 105
          },
          end: {
            line: 350,
            column: 17
          }
        },
        line: 347
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 360,
            column: 4
          },
          end: {
            line: 360,
            column: 5
          }
        },
        loc: {
          start: {
            line: 360,
            column: 33
          },
          end: {
            line: 367,
            column: 5
          }
        },
        line: 360
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 361,
            column: 55
          },
          end: {
            line: 361,
            column: 56
          }
        },
        loc: {
          start: {
            line: 361,
            column: 68
          },
          end: {
            line: 366,
            column: 9
          }
        },
        line: 361
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 371,
            column: 4
          },
          end: {
            line: 371,
            column: 5
          }
        },
        loc: {
          start: {
            line: 371,
            column: 38
          },
          end: {
            line: 378,
            column: 5
          }
        },
        line: 371
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 372,
            column: 55
          },
          end: {
            line: 372,
            column: 56
          }
        },
        loc: {
          start: {
            line: 372,
            column: 68
          },
          end: {
            line: 377,
            column: 9
          }
        },
        line: 372
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 382,
            column: 4
          },
          end: {
            line: 382,
            column: 5
          }
        },
        loc: {
          start: {
            line: 382,
            column: 50
          },
          end: {
            line: 393,
            column: 5
          }
        },
        line: 382
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 383,
            column: 55
          },
          end: {
            line: 383,
            column: 56
          }
        },
        loc: {
          start: {
            line: 383,
            column: 68
          },
          end: {
            line: 392,
            column: 9
          }
        },
        line: 383
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 397,
            column: 4
          },
          end: {
            line: 397,
            column: 5
          }
        },
        loc: {
          start: {
            line: 397,
            column: 59
          },
          end: {
            line: 408,
            column: 5
          }
        },
        line: 397
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 398,
            column: 55
          },
          end: {
            line: 398,
            column: 56
          }
        },
        loc: {
          start: {
            line: 398,
            column: 68
          },
          end: {
            line: 407,
            column: 9
          }
        },
        line: 398
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 413,
            column: 4
          },
          end: {
            line: 413,
            column: 5
          }
        },
        loc: {
          start: {
            line: 413,
            column: 24
          },
          end: {
            line: 446,
            column: 5
          }
        },
        line: 413
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 414,
            column: 55
          },
          end: {
            line: 414,
            column: 56
          }
        },
        loc: {
          start: {
            line: 414,
            column: 68
          },
          end: {
            line: 445,
            column: 9
          }
        },
        line: 414
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 433,
            column: 43
          },
          end: {
            line: 433,
            column: 44
          }
        },
        loc: {
          start: {
            line: 433,
            column: 50
          },
          end: {
            line: 433,
            column: 86
          }
        },
        line: 433
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 450,
            column: 4
          },
          end: {
            line: 450,
            column: 5
          }
        },
        loc: {
          start: {
            line: 450,
            column: 26
          },
          end: {
            line: 452,
            column: 5
          }
        },
        line: 450
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 456,
            column: 4
          },
          end: {
            line: 456,
            column: 5
          }
        },
        loc: {
          start: {
            line: 456,
            column: 14
          },
          end: {
            line: 458,
            column: 5
          }
        },
        line: 456
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 16
          },
          end: {
            line: 25,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 25,
            column: 25
          },
          end: {
            line: 25,
            column: 27
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 26,
            column: 46
          },
          end: {
            line: 26,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 46
          },
          end: {
            line: 26,
            column: 68
          }
        }, {
          start: {
            line: 26,
            column: 72
          },
          end: {
            line: 26,
            column: 86
          }
        }],
        line: 26
      },
      "2": {
        loc: {
          start: {
            line: 26,
            column: 98
          },
          end: {
            line: 26,
            column: 145
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 98
          },
          end: {
            line: 26,
            column: 123
          }
        }, {
          start: {
            line: 26,
            column: 127
          },
          end: {
            line: 26,
            column: 145
          }
        }],
        line: 26
      },
      "3": {
        loc: {
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 44,
            column: 18
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 39,
            column: 22
          }
        }, {
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 44,
            column: 18
          }
        }],
        line: 39
      },
      "4": {
        loc: {
          start: {
            line: 52,
            column: 78
          },
          end: {
            line: 52,
            column: 108
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 52,
            column: 89
          },
          end: {
            line: 52,
            column: 108
          }
        }],
        line: 52
      },
      "5": {
        loc: {
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 59,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 59,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "6": {
        loc: {
          start: {
            line: 66,
            column: 34
          },
          end: {
            line: 68,
            column: 39
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 67,
            column: 22
          },
          end: {
            line: 67,
            column: 61
          }
        }, {
          start: {
            line: 68,
            column: 22
          },
          end: {
            line: 68,
            column: 39
          }
        }],
        line: 66
      },
      "7": {
        loc: {
          start: {
            line: 76,
            column: 16
          },
          end: {
            line: 78,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 16
          },
          end: {
            line: 78,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "8": {
        loc: {
          start: {
            line: 83,
            column: 27
          },
          end: {
            line: 83,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 83,
            column: 27
          },
          end: {
            line: 83,
            column: 41
          }
        }, {
          start: {
            line: 83,
            column: 45
          },
          end: {
            line: 83,
            column: 50
          }
        }],
        line: 83
      },
      "9": {
        loc: {
          start: {
            line: 85,
            column: 41
          },
          end: {
            line: 85,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 41
          },
          end: {
            line: 85,
            column: 69
          }
        }, {
          start: {
            line: 85,
            column: 73
          },
          end: {
            line: 85,
            column: 92
          }
        }],
        line: 85
      },
      "10": {
        loc: {
          start: {
            line: 106,
            column: 37
          },
          end: {
            line: 106,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 106,
            column: 62
          },
          end: {
            line: 106,
            column: 75
          }
        }, {
          start: {
            line: 106,
            column: 78
          },
          end: {
            line: 106,
            column: 91
          }
        }],
        line: 106
      },
      "11": {
        loc: {
          start: {
            line: 130,
            column: 78
          },
          end: {
            line: 130,
            column: 108
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 130,
            column: 89
          },
          end: {
            line: 130,
            column: 108
          }
        }],
        line: 130
      },
      "12": {
        loc: {
          start: {
            line: 135,
            column: 16
          },
          end: {
            line: 137,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 16
          },
          end: {
            line: 137,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "13": {
        loc: {
          start: {
            line: 143,
            column: 149
          },
          end: {
            line: 143,
            column: 190
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 143,
            column: 149
          },
          end: {
            line: 143,
            column: 162
          }
        }, {
          start: {
            line: 143,
            column: 166
          },
          end: {
            line: 143,
            column: 190
          }
        }],
        line: 143
      },
      "14": {
        loc: {
          start: {
            line: 145,
            column: 16
          },
          end: {
            line: 147,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 16
          },
          end: {
            line: 147,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "15": {
        loc: {
          start: {
            line: 152,
            column: 27
          },
          end: {
            line: 152,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 152,
            column: 27
          },
          end: {
            line: 152,
            column: 41
          }
        }, {
          start: {
            line: 152,
            column: 45
          },
          end: {
            line: 152,
            column: 54
          }
        }],
        line: 152
      },
      "16": {
        loc: {
          start: {
            line: 173,
            column: 37
          },
          end: {
            line: 173,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 173,
            column: 62
          },
          end: {
            line: 173,
            column: 75
          }
        }, {
          start: {
            line: 173,
            column: 78
          },
          end: {
            line: 173,
            column: 91
          }
        }],
        line: 173
      },
      "17": {
        loc: {
          start: {
            line: 197,
            column: 69
          },
          end: {
            line: 197,
            column: 81
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 197,
            column: 79
          },
          end: {
            line: 197,
            column: 81
          }
        }],
        line: 197
      },
      "18": {
        loc: {
          start: {
            line: 202,
            column: 16
          },
          end: {
            line: 204,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 16
          },
          end: {
            line: 204,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "19": {
        loc: {
          start: {
            line: 212,
            column: 29
          },
          end: {
            line: 212,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 212,
            column: 29
          },
          end: {
            line: 212,
            column: 44
          }
        }, {
          start: {
            line: 212,
            column: 48
          },
          end: {
            line: 212,
            column: 57
          }
        }],
        line: 212
      },
      "20": {
        loc: {
          start: {
            line: 216,
            column: 16
          },
          end: {
            line: 218,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 16
          },
          end: {
            line: 218,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 216
      },
      "21": {
        loc: {
          start: {
            line: 216,
            column: 20
          },
          end: {
            line: 216,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 216,
            column: 20
          },
          end: {
            line: 216,
            column: 39
          }
        }, {
          start: {
            line: 216,
            column: 43
          },
          end: {
            line: 216,
            column: 67
          }
        }],
        line: 216
      },
      "22": {
        loc: {
          start: {
            line: 222,
            column: 27
          },
          end: {
            line: 222,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 222,
            column: 27
          },
          end: {
            line: 222,
            column: 41
          }
        }, {
          start: {
            line: 222,
            column: 45
          },
          end: {
            line: 222,
            column: 50
          }
        }],
        line: 222
      },
      "23": {
        loc: {
          start: {
            line: 232,
            column: 33
          },
          end: {
            line: 232,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 232,
            column: 33
          },
          end: {
            line: 232,
            column: 48
          }
        }, {
          start: {
            line: 232,
            column: 52
          },
          end: {
            line: 232,
            column: 61
          }
        }],
        line: 232
      },
      "24": {
        loc: {
          start: {
            line: 239,
            column: 37
          },
          end: {
            line: 239,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 239,
            column: 62
          },
          end: {
            line: 239,
            column: 75
          }
        }, {
          start: {
            line: 239,
            column: 78
          },
          end: {
            line: 239,
            column: 91
          }
        }],
        line: 239
      },
      "25": {
        loc: {
          start: {
            line: 272,
            column: 37
          },
          end: {
            line: 272,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 272,
            column: 37
          },
          end: {
            line: 272,
            column: 64
          }
        }, {
          start: {
            line: 272,
            column: 68
          },
          end: {
            line: 272,
            column: 73
          }
        }],
        line: 272
      },
      "26": {
        loc: {
          start: {
            line: 278,
            column: 70
          },
          end: {
            line: 278,
            column: 124
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 278,
            column: 95
          },
          end: {
            line: 278,
            column: 108
          }
        }, {
          start: {
            line: 278,
            column: 111
          },
          end: {
            line: 278,
            column: 124
          }
        }],
        line: 278
      },
      "27": {
        loc: {
          start: {
            line: 305,
            column: 66
          },
          end: {
            line: 305,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 305,
            column: 91
          },
          end: {
            line: 305,
            column: 104
          }
        }, {
          start: {
            line: 305,
            column: 107
          },
          end: {
            line: 305,
            column: 120
          }
        }],
        line: 305
      },
      "28": {
        loc: {
          start: {
            line: 320,
            column: 16
          },
          end: {
            line: 322,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 320,
            column: 16
          },
          end: {
            line: 322,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 320
      },
      "29": {
        loc: {
          start: {
            line: 325,
            column: 25
          },
          end: {
            line: 325,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 325,
            column: 25
          },
          end: {
            line: 325,
            column: 49
          }
        }, {
          start: {
            line: 325,
            column: 53
          },
          end: {
            line: 325,
            column: 55
          }
        }],
        line: 325
      },
      "30": {
        loc: {
          start: {
            line: 327,
            column: 29
          },
          end: {
            line: 327,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 327,
            column: 29
          },
          end: {
            line: 327,
            column: 57
          }
        }, {
          start: {
            line: 327,
            column: 61
          },
          end: {
            line: 327,
            column: 66
          }
        }],
        line: 327
      },
      "31": {
        loc: {
          start: {
            line: 329,
            column: 30
          },
          end: {
            line: 329,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 329,
            column: 30
          },
          end: {
            line: 329,
            column: 59
          }
        }, {
          start: {
            line: 329,
            column: 63
          },
          end: {
            line: 329,
            column: 80
          }
        }],
        line: 329
      },
      "32": {
        loc: {
          start: {
            line: 330,
            column: 30
          },
          end: {
            line: 330,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 330,
            column: 30
          },
          end: {
            line: 330,
            column: 59
          }
        }, {
          start: {
            line: 330,
            column: 63
          },
          end: {
            line: 330,
            column: 72
          }
        }],
        line: 330
      },
      "33": {
        loc: {
          start: {
            line: 334,
            column: 59
          },
          end: {
            line: 334,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 334,
            column: 84
          },
          end: {
            line: 334,
            column: 97
          }
        }, {
          start: {
            line: 334,
            column: 100
          },
          end: {
            line: 334,
            column: 113
          }
        }],
        line: 334
      },
      "34": {
        loc: {
          start: {
            line: 347,
            column: 24
          },
          end: {
            line: 350,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 347,
            column: 25
          },
          end: {
            line: 350,
            column: 19
          }
        }, {
          start: {
            line: 350,
            column: 24
          },
          end: {
            line: 350,
            column: 26
          }
        }],
        line: 347
      },
      "35": {
        loc: {
          start: {
            line: 347,
            column: 25
          },
          end: {
            line: 350,
            column: 19
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 347,
            column: 77
          },
          end: {
            line: 347,
            column: 83
          }
        }, {
          start: {
            line: 347,
            column: 86
          },
          end: {
            line: 350,
            column: 19
          }
        }],
        line: 347
      },
      "36": {
        loc: {
          start: {
            line: 347,
            column: 25
          },
          end: {
            line: 347,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 347,
            column: 25
          },
          end: {
            line: 347,
            column: 57
          }
        }, {
          start: {
            line: 347,
            column: 61
          },
          end: {
            line: 347,
            column: 74
          }
        }],
        line: 347
      },
      "37": {
        loc: {
          start: {
            line: 348,
            column: 31
          },
          end: {
            line: 348,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 348,
            column: 31
          },
          end: {
            line: 348,
            column: 46
          }
        }, {
          start: {
            line: 348,
            column: 50
          },
          end: {
            line: 348,
            column: 52
          }
        }],
        line: 348
      },
      "38": {
        loc: {
          start: {
            line: 349,
            column: 33
          },
          end: {
            line: 349,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 349,
            column: 33
          },
          end: {
            line: 349,
            column: 50
          }
        }, {
          start: {
            line: 349,
            column: 54
          },
          end: {
            line: 349,
            column: 56
          }
        }],
        line: 349
      },
      "39": {
        loc: {
          start: {
            line: 353,
            column: 59
          },
          end: {
            line: 353,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 353,
            column: 84
          },
          end: {
            line: 353,
            column: 97
          }
        }, {
          start: {
            line: 353,
            column: 100
          },
          end: {
            line: 353,
            column: 113
          }
        }],
        line: 353
      },
      "40": {
        loc: {
          start: {
            line: 364,
            column: 94
          },
          end: {
            line: 364,
            column: 138
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 364,
            column: 94
          },
          end: {
            line: 364,
            column: 108
          }
        }, {
          start: {
            line: 364,
            column: 112
          },
          end: {
            line: 364,
            column: 138
          }
        }],
        line: 364
      },
      "41": {
        loc: {
          start: {
            line: 364,
            column: 143
          },
          end: {
            line: 364,
            column: 202
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 364,
            column: 143
          },
          end: {
            line: 364,
            column: 162
          }
        }, {
          start: {
            line: 364,
            column: 166
          },
          end: {
            line: 364,
            column: 202
          }
        }],
        line: 364
      },
      "42": {
        loc: {
          start: {
            line: 375,
            column: 94
          },
          end: {
            line: 375,
            column: 138
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 375,
            column: 94
          },
          end: {
            line: 375,
            column: 108
          }
        }, {
          start: {
            line: 375,
            column: 112
          },
          end: {
            line: 375,
            column: 138
          }
        }],
        line: 375
      },
      "43": {
        loc: {
          start: {
            line: 375,
            column: 143
          },
          end: {
            line: 375,
            column: 202
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 375,
            column: 143
          },
          end: {
            line: 375,
            column: 162
          }
        }, {
          start: {
            line: 375,
            column: 166
          },
          end: {
            line: 375,
            column: 202
          }
        }],
        line: 375
      },
      "44": {
        loc: {
          start: {
            line: 416,
            column: 12
          },
          end: {
            line: 418,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 416,
            column: 12
          },
          end: {
            line: 418,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 416
      },
      "45": {
        loc: {
          start: {
            line: 420,
            column: 12
          },
          end: {
            line: 422,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 420,
            column: 12
          },
          end: {
            line: 422,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 420
      },
      "46": {
        loc: {
          start: {
            line: 424,
            column: 12
          },
          end: {
            line: 443,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 424,
            column: 12
          },
          end: {
            line: 443,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 424
      },
      "47": {
        loc: {
          start: {
            line: 427,
            column: 16
          },
          end: {
            line: 430,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 427,
            column: 16
          },
          end: {
            line: 430,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 427
      },
      "48": {
        loc: {
          start: {
            line: 427,
            column: 20
          },
          end: {
            line: 427,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 427,
            column: 20
          },
          end: {
            line: 427,
            column: 26
          }
        }, {
          start: {
            line: 427,
            column: 30
          },
          end: {
            line: 427,
            column: 79
          }
        }],
        line: 427
      },
      "49": {
        loc: {
          start: {
            line: 434,
            column: 16
          },
          end: {
            line: 436,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 434,
            column: 16
          },
          end: {
            line: 436,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 434
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/kms-encryption-service.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/kms-encryption-service.ts"],
      sourcesContent: ["/**\n * KMS Encryption Service for Direct Bedrock Operations\n *\n * This module provides KMS-based encryption and decryption for sensitive data\n * in direct Bedrock operations, ensuring GDPR compliance and data protection.\n *\n * Features:\n * - Encrypt/decrypt sensitive operation data\n * - Secure PII storage with KMS encryption\n * - Audit trail integration for encryption operations\n * - Key rotation support\n * - Multi-region key management\n */\n\nimport {\n  DecryptCommand,\n  DescribeKeyCommand,\n  EnableKeyRotationCommand,\n  EncryptCommand,\n  GenerateDataKeyCommand,\n  GetKeyRotationStatusCommand,\n  KMSClient,\n  ListAliasesCommand,\n} from \"@aws-sdk/client-kms\";\nimport { AiFeatureFlags } from \"./ai-feature-flags\";\nimport { AuditTrailSystem } from \"./audit-trail-system\";\n\n// KMS Configuration\nexport interface KMSEncryptionConfig {\n  region: string;\n  keyId?: string; // KMS Key ID or ARN\n  keyAlias?: string; // KMS Key Alias (e.g., alias/matbakh-ai)\n  enableKeyRotation: boolean;\n  encryptionContext?: Record<string, string>; // Additional encryption context\n  maxRetries: number;\n  timeout: number;\n}\n\n// Encryption Request\nexport interface EncryptionRequest {\n  plaintext: string | Buffer;\n  encryptionContext?: Record<string, string>;\n  keyId?: string; // Override default key\n}\n\n// Encryption Response\nexport interface EncryptionResponse {\n  ciphertext: string; // Base64-encoded encrypted data\n  keyId: string; // KMS Key ID used for encryption\n  encryptionContext?: Record<string, string>;\n  encryptionAlgorithm: string;\n  timestamp: Date;\n}\n\n// Decryption Request\nexport interface DecryptionRequest {\n  ciphertext: string; // Base64-encoded encrypted data\n  encryptionContext?: Record<string, string>;\n  keyId?: string; // Optional key ID for validation\n}\n\n// Decryption Response\nexport interface DecryptionResponse {\n  plaintext: string;\n  keyId: string; // KMS Key ID used for decryption\n  encryptionContext?: Record<string, string>;\n  timestamp: Date;\n}\n\n// Data Key Generation Request\nexport interface DataKeyRequest {\n  keySpec?: \"AES_256\" | \"AES_128\";\n  encryptionContext?: Record<string, string>;\n}\n\n// Data Key Response\nexport interface DataKeyResponse {\n  plaintextKey: Buffer; // Plaintext data key (use and discard immediately)\n  encryptedKey: string; // Encrypted data key (store for later decryption)\n  keyId: string;\n}\n\n// Key Rotation Status\nexport interface KeyRotationStatus {\n  keyId: string;\n  rotationEnabled: boolean;\n  nextRotationDate?: Date;\n  lastRotationDate?: Date;\n}\n\n// Sensitive Data Types for Encryption\nexport type SensitiveDataType =\n  | \"pii\"\n  | \"credentials\"\n  | \"api_keys\"\n  | \"tokens\"\n  | \"operation_context\"\n  | \"user_data\"\n  | \"audit_data\";\n\n/**\n * KMS Encryption Service for Direct Bedrock Operations\n */\nexport class KMSEncryptionService {\n  private client: KMSClient;\n  private config: KMSEncryptionConfig;\n  private featureFlags: AiFeatureFlags;\n  private auditTrail: AuditTrailSystem;\n  private keyCache: Map<string, { keyId: string; timestamp: Date }>;\n\n  constructor(\n    config: Partial<KMSEncryptionConfig> = {},\n    auditTrail?: AuditTrailSystem\n  ) {\n    this.config = {\n      region: process.env.AWS_REGION || \"eu-central-1\",\n      keyAlias: process.env.KMS_KEY_ALIAS || \"alias/matbakh-ai\",\n      enableKeyRotation: true,\n      maxRetries: 3,\n      timeout: 5000,\n      ...config,\n    };\n\n    // Initialize KMS client\n    this.client = new KMSClient({\n      region: this.config.region,\n      maxAttempts: this.config.maxRetries,\n      requestHandler: {\n        requestTimeout: this.config.timeout,\n      },\n    });\n\n    // Initialize feature flags\n    this.featureFlags = new AiFeatureFlags();\n\n    // Initialize audit trail\n    this.auditTrail =\n      auditTrail ||\n      new AuditTrailSystem({\n        complianceMode: \"strict\",\n        enableIntegrityChecking: true,\n        retentionDays: 2555, // 7 years for GDPR compliance\n      });\n\n    // Initialize key cache\n    this.keyCache = new Map();\n  }\n\n  /**\n   * Encrypt sensitive data using KMS\n   */\n  async encrypt(\n    request: EncryptionRequest,\n    dataType: SensitiveDataType = \"operation_context\"\n  ): Promise<EncryptionResponse> {\n    const startTime = Date.now();\n    const operationId = this.generateOperationId();\n\n    try {\n      // Check if KMS encryption is enabled\n      if (!this.featureFlags.isEnabled(\"kms_encryption_enabled\", true)) {\n        throw new Error(\"KMS encryption is disabled\");\n      }\n\n      // Get key ID (use provided key or default)\n      const keyId = await this.resolveKeyId(request.keyId);\n\n      // Build encryption context\n      const encryptionContext = {\n        ...this.config.encryptionContext,\n        ...request.encryptionContext,\n        dataType,\n        operationId,\n        timestamp: new Date().toISOString(),\n      };\n\n      // Convert plaintext to Buffer if string\n      const plaintext =\n        typeof request.plaintext === \"string\"\n          ? Buffer.from(request.plaintext, \"utf-8\")\n          : request.plaintext;\n\n      // Encrypt data\n      const command = new EncryptCommand({\n        KeyId: keyId,\n        Plaintext: plaintext,\n        EncryptionContext: encryptionContext,\n      });\n\n      const response = await this.client.send(command);\n\n      if (!response.CiphertextBlob) {\n        throw new Error(\"Encryption failed: no ciphertext returned\");\n      }\n\n      // Convert ciphertext to base64\n      const ciphertext = Buffer.from(response.CiphertextBlob).toString(\n        \"base64\"\n      );\n\n      const result: EncryptionResponse = {\n        ciphertext,\n        keyId: response.KeyId || keyId,\n        encryptionContext,\n        encryptionAlgorithm:\n          response.EncryptionAlgorithm || \"SYMMETRIC_DEFAULT\",\n        timestamp: new Date(),\n      };\n\n      // Log encryption operation\n      await this.auditTrail.logEvent({\n        eventType: \"kms_encryption\",\n        requestId: operationId,\n        provider: \"kms\",\n        complianceStatus: \"compliant\",\n        metadata: {\n          dataType,\n          keyId: result.keyId,\n          encryptionAlgorithm: result.encryptionAlgorithm,\n          plaintextSize: plaintext.length,\n          ciphertextSize: ciphertext.length,\n          processingTimeMs: Date.now() - startTime,\n        },\n      });\n\n      return result;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      // Log encryption error\n      await this.auditTrail.logEvent({\n        eventType: \"kms_encryption\",\n        requestId: operationId,\n        provider: \"kms\",\n        complianceStatus: \"violation\",\n        error: {\n          type: \"encryption_error\",\n          message: errorMessage,\n        },\n        metadata: {\n          dataType,\n          processingTimeMs: Date.now() - startTime,\n        },\n      });\n\n      throw new Error(`KMS encryption failed: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Decrypt sensitive data using KMS\n   */\n  async decrypt(\n    request: DecryptionRequest,\n    dataType: SensitiveDataType = \"operation_context\"\n  ): Promise<DecryptionResponse> {\n    const startTime = Date.now();\n    const operationId = this.generateOperationId();\n\n    try {\n      // Check if KMS encryption is enabled\n      if (!this.featureFlags.isEnabled(\"kms_encryption_enabled\", true)) {\n        throw new Error(\"KMS encryption is disabled\");\n      }\n\n      // Convert base64 ciphertext to Buffer\n      const ciphertext = Buffer.from(request.ciphertext, \"base64\");\n\n      // Build encryption context for validation\n      const encryptionContext = request.encryptionContext;\n\n      // Decrypt data\n      const command = new DecryptCommand({\n        CiphertextBlob: ciphertext,\n        EncryptionContext: encryptionContext,\n        ...(request.keyId && { KeyId: request.keyId }),\n      });\n\n      const response = await this.client.send(command);\n\n      if (!response.Plaintext) {\n        throw new Error(\"Decryption failed: no plaintext returned\");\n      }\n\n      // Convert plaintext to string\n      const plaintext = Buffer.from(response.Plaintext).toString(\"utf-8\");\n\n      const result: DecryptionResponse = {\n        plaintext,\n        keyId: response.KeyId || \"unknown\",\n        encryptionContext,\n        timestamp: new Date(),\n      };\n\n      // Log decryption operation\n      await this.auditTrail.logEvent({\n        eventType: \"kms_decryption\",\n        requestId: operationId,\n        provider: \"kms\",\n        complianceStatus: \"compliant\",\n        metadata: {\n          dataType,\n          keyId: result.keyId,\n          ciphertextSize: ciphertext.length,\n          plaintextSize: plaintext.length,\n          processingTimeMs: Date.now() - startTime,\n        },\n      });\n\n      return result;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      // Log decryption error\n      await this.auditTrail.logEvent({\n        eventType: \"kms_decryption\",\n        requestId: operationId,\n        provider: \"kms\",\n        complianceStatus: \"violation\",\n        error: {\n          type: \"decryption_error\",\n          message: errorMessage,\n        },\n        metadata: {\n          dataType,\n          processingTimeMs: Date.now() - startTime,\n        },\n      });\n\n      throw new Error(`KMS decryption failed: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Generate data key for envelope encryption\n   */\n  async generateDataKey(\n    request: DataKeyRequest = {}\n  ): Promise<DataKeyResponse> {\n    const startTime = Date.now();\n    const operationId = this.generateOperationId();\n\n    try {\n      // Check if KMS encryption is enabled\n      if (!this.featureFlags.isEnabled(\"kms_encryption_enabled\", true)) {\n        throw new Error(\"KMS encryption is disabled\");\n      }\n\n      // Get key ID\n      const keyId = await this.resolveKeyId();\n\n      // Build encryption context\n      const encryptionContext = {\n        ...this.config.encryptionContext,\n        ...request.encryptionContext,\n        operationId,\n        timestamp: new Date().toISOString(),\n      };\n\n      // Generate data key\n      const command = new GenerateDataKeyCommand({\n        KeyId: keyId,\n        KeySpec: request.keySpec || \"AES_256\",\n        EncryptionContext: encryptionContext,\n      });\n\n      const response = await this.client.send(command);\n\n      if (!response.Plaintext || !response.CiphertextBlob) {\n        throw new Error(\"Data key generation failed\");\n      }\n\n      const result: DataKeyResponse = {\n        plaintextKey: Buffer.from(response.Plaintext),\n        encryptedKey: Buffer.from(response.CiphertextBlob).toString(\"base64\"),\n        keyId: response.KeyId || keyId,\n      };\n\n      // Log data key generation\n      await this.auditTrail.logEvent({\n        eventType: \"kms_data_key_generation\",\n        requestId: operationId,\n        provider: \"kms\",\n        complianceStatus: \"compliant\",\n        metadata: {\n          keyId: result.keyId,\n          keySpec: request.keySpec || \"AES_256\",\n          processingTimeMs: Date.now() - startTime,\n        },\n      });\n\n      return result;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      // Log data key generation error\n      await this.auditTrail.logEvent({\n        eventType: \"kms_data_key_generation\",\n        requestId: operationId,\n        provider: \"kms\",\n        complianceStatus: \"violation\",\n        error: {\n          type: \"data_key_generation_error\",\n          message: errorMessage,\n        },\n        metadata: {\n          processingTimeMs: Date.now() - startTime,\n        },\n      });\n\n      throw new Error(`KMS data key generation failed: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Get key rotation status\n   */\n  async getKeyRotationStatus(keyId?: string): Promise<KeyRotationStatus> {\n    try {\n      const resolvedKeyId = await this.resolveKeyId(keyId);\n\n      // Get key rotation status\n      const command = new GetKeyRotationStatusCommand({\n        KeyId: resolvedKeyId,\n      });\n\n      const response = await this.client.send(command);\n\n      return {\n        keyId: resolvedKeyId,\n        rotationEnabled: response.KeyRotationEnabled || false,\n        // Note: AWS KMS doesn't provide rotation dates via API\n        // These would need to be tracked separately\n      };\n    } catch (error) {\n      throw new Error(\n        `Failed to get key rotation status: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Enable key rotation\n   */\n  async enableKeyRotation(keyId?: string): Promise<void> {\n    try {\n      const resolvedKeyId = await this.resolveKeyId(keyId);\n\n      const command = new EnableKeyRotationCommand({\n        KeyId: resolvedKeyId,\n      });\n\n      await this.client.send(command);\n\n      // Log key rotation enablement\n      await this.auditTrail.logEvent({\n        eventType: \"kms_key_rotation_enabled\",\n        requestId: this.generateOperationId(),\n        provider: \"kms\",\n        complianceStatus: \"compliant\",\n        metadata: {\n          keyId: resolvedKeyId,\n        },\n      });\n    } catch (error) {\n      throw new Error(\n        `Failed to enable key rotation: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Describe KMS key\n   */\n  async describeKey(keyId?: string): Promise<{\n    keyId: string;\n    arn: string;\n    creationDate?: Date;\n    enabled: boolean;\n    description?: string;\n    keyUsage: string;\n    keyState: string;\n  }> {\n    try {\n      const resolvedKeyId = await this.resolveKeyId(keyId);\n\n      const command = new DescribeKeyCommand({\n        KeyId: resolvedKeyId,\n      });\n\n      const response = await this.client.send(command);\n\n      if (!response.KeyMetadata) {\n        throw new Error(\"Key metadata not found\");\n      }\n\n      return {\n        keyId: response.KeyMetadata.KeyId,\n        arn: response.KeyMetadata.Arn || \"\",\n        creationDate: response.KeyMetadata.CreationDate,\n        enabled: response.KeyMetadata.Enabled || false,\n        description: response.KeyMetadata.Description,\n        keyUsage: response.KeyMetadata.KeyUsage || \"ENCRYPT_DECRYPT\",\n        keyState: response.KeyMetadata.KeyState || \"Unknown\",\n      };\n    } catch (error) {\n      throw new Error(\n        `Failed to describe key: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * List key aliases\n   */\n  async listAliases(): Promise<\n    Array<{ aliasName: string; targetKeyId: string }>\n  > {\n    try {\n      const command = new ListAliasesCommand({});\n      const response = await this.client.send(command);\n\n      return (\n        response.Aliases?.map((alias) => ({\n          aliasName: alias.AliasName || \"\",\n          targetKeyId: alias.TargetKeyId || \"\",\n        })) || []\n      );\n    } catch (error) {\n      throw new Error(\n        `Failed to list aliases: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Encrypt PII data with additional context\n   */\n  async encryptPII(\n    piiData: string,\n    context: {\n      piiType: string;\n      userId?: string;\n      operationId?: string;\n    }\n  ): Promise<EncryptionResponse> {\n    return this.encrypt(\n      {\n        plaintext: piiData,\n        encryptionContext: {\n          piiType: context.piiType,\n          ...(context.userId && { userId: context.userId }),\n          ...(context.operationId && { operationId: context.operationId }),\n        },\n      },\n      \"pii\"\n    );\n  }\n\n  /**\n   * Decrypt PII data with validation\n   */\n  async decryptPII(\n    encryptedPII: string,\n    context: {\n      piiType: string;\n      userId?: string;\n      operationId?: string;\n    }\n  ): Promise<DecryptionResponse> {\n    return this.decrypt(\n      {\n        ciphertext: encryptedPII,\n        encryptionContext: {\n          piiType: context.piiType,\n          ...(context.userId && { userId: context.userId }),\n          ...(context.operationId && { operationId: context.operationId }),\n        },\n      },\n      \"pii\"\n    );\n  }\n\n  /**\n   * Encrypt operation context for audit trail\n   */\n  async encryptOperationContext(\n    context: Record<string, any>,\n    operationId: string\n  ): Promise<EncryptionResponse> {\n    const contextJson = JSON.stringify(context);\n\n    return this.encrypt(\n      {\n        plaintext: contextJson,\n        encryptionContext: {\n          operationId,\n          contextType: \"operation_context\",\n        },\n      },\n      \"operation_context\"\n    );\n  }\n\n  /**\n   * Decrypt operation context from audit trail\n   */\n  async decryptOperationContext(\n    encryptedContext: string,\n    operationId: string\n  ): Promise<Record<string, any>> {\n    const decrypted = await this.decrypt(\n      {\n        ciphertext: encryptedContext,\n        encryptionContext: {\n          operationId,\n          contextType: \"operation_context\",\n        },\n      },\n      \"operation_context\"\n    );\n\n    return JSON.parse(decrypted.plaintext);\n  }\n\n  // Private Methods\n\n  /**\n   * Resolve key ID from alias or use default\n   */\n  private async resolveKeyId(keyId?: string): Promise<string> {\n    // Use provided key ID if available\n    if (keyId) {\n      return keyId;\n    }\n\n    // Use configured key ID if available\n    if (this.config.keyId) {\n      return this.config.keyId;\n    }\n\n    // Use key alias\n    if (this.config.keyAlias) {\n      // Check cache first\n      const cached = this.keyCache.get(this.config.keyAlias);\n      if (cached && Date.now() - cached.timestamp.getTime() < 3600000) {\n        // 1 hour cache\n        return cached.keyId;\n      }\n\n      // Resolve alias to key ID\n      const aliases = await this.listAliases();\n      const alias = aliases.find((a) => a.aliasName === this.config.keyAlias);\n\n      if (!alias) {\n        throw new Error(`Key alias not found: ${this.config.keyAlias}`);\n      }\n\n      // Cache the resolved key ID\n      this.keyCache.set(this.config.keyAlias, {\n        keyId: alias.targetKeyId,\n        timestamp: new Date(),\n      });\n\n      return alias.targetKeyId;\n    }\n\n    throw new Error(\"No KMS key ID or alias configured\");\n  }\n\n  /**\n   * Generate unique operation ID\n   */\n  private generateOperationId(): string {\n    return `kms-${Date.now()}-${Math.random().toString(36).substring(2, 15)}`;\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    this.keyCache.clear();\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bb172cf5d9a0cd98c8ae690c5044fac211c59c04"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_v9xtgb5ta = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_v9xtgb5ta();
cov_v9xtgb5ta().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_v9xtgb5ta().s[1]++;
exports.KMSEncryptionService = void 0;
const tslib_1 =
/* istanbul ignore next */
(cov_v9xtgb5ta().s[2]++, require("tslib"));
const client_kms_1 =
/* istanbul ignore next */
(cov_v9xtgb5ta().s[3]++, require("@aws-sdk/client-kms"));
const ai_feature_flags_1 =
/* istanbul ignore next */
(cov_v9xtgb5ta().s[4]++, require("./ai-feature-flags"));
const audit_trail_system_1 =
/* istanbul ignore next */
(cov_v9xtgb5ta().s[5]++, require("./audit-trail-system"));
/**
 * KMS Encryption Service for Direct Bedrock Operations
 */
class KMSEncryptionService {
  constructor(config =
  /* istanbul ignore next */
  (cov_v9xtgb5ta().b[0][0]++, {}), auditTrail) {
    /* istanbul ignore next */
    cov_v9xtgb5ta().f[0]++;
    cov_v9xtgb5ta().s[6]++;
    this.config = Object.assign({
      region:
      /* istanbul ignore next */
      (cov_v9xtgb5ta().b[1][0]++, process.env.AWS_REGION) ||
      /* istanbul ignore next */
      (cov_v9xtgb5ta().b[1][1]++, "eu-central-1"),
      keyAlias:
      /* istanbul ignore next */
      (cov_v9xtgb5ta().b[2][0]++, process.env.KMS_KEY_ALIAS) ||
      /* istanbul ignore next */
      (cov_v9xtgb5ta().b[2][1]++, "alias/matbakh-ai"),
      enableKeyRotation: true,
      maxRetries: 3,
      timeout: 5000
    }, config);
    // Initialize KMS client
    /* istanbul ignore next */
    cov_v9xtgb5ta().s[7]++;
    this.client = new client_kms_1.KMSClient({
      region: this.config.region,
      maxAttempts: this.config.maxRetries,
      requestHandler: {
        requestTimeout: this.config.timeout
      }
    });
    // Initialize feature flags
    /* istanbul ignore next */
    cov_v9xtgb5ta().s[8]++;
    this.featureFlags = new ai_feature_flags_1.AiFeatureFlags();
    // Initialize audit trail
    /* istanbul ignore next */
    cov_v9xtgb5ta().s[9]++;
    this.auditTrail =
    /* istanbul ignore next */
    (cov_v9xtgb5ta().b[3][0]++, auditTrail) ||
    /* istanbul ignore next */
    (cov_v9xtgb5ta().b[3][1]++, new audit_trail_system_1.AuditTrailSystem({
      complianceMode: "strict",
      enableIntegrityChecking: true,
      retentionDays: 2555 // 7 years for GDPR compliance
    }));
    // Initialize key cache
    /* istanbul ignore next */
    cov_v9xtgb5ta().s[10]++;
    this.keyCache = new Map();
  }
  /**
   * Encrypt sensitive data using KMS
   */
  encrypt(request_1) {
    /* istanbul ignore next */
    cov_v9xtgb5ta().f[1]++;
    cov_v9xtgb5ta().s[11]++;
    return tslib_1.__awaiter(this, arguments, void 0, function* (request, dataType =
    /* istanbul ignore next */
    (cov_v9xtgb5ta().b[4][0]++, "operation_context")) {
      /* istanbul ignore next */
      cov_v9xtgb5ta().f[2]++;
      const startTime =
      /* istanbul ignore next */
      (cov_v9xtgb5ta().s[12]++, Date.now());
      const operationId =
      /* istanbul ignore next */
      (cov_v9xtgb5ta().s[13]++, this.generateOperationId());
      /* istanbul ignore next */
      cov_v9xtgb5ta().s[14]++;
      try {
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[15]++;
        // Check if KMS encryption is enabled
        if (!this.featureFlags.isEnabled("kms_encryption_enabled", true)) {
          /* istanbul ignore next */
          cov_v9xtgb5ta().b[5][0]++;
          cov_v9xtgb5ta().s[16]++;
          throw new Error("KMS encryption is disabled");
        } else
        /* istanbul ignore next */
        {
          cov_v9xtgb5ta().b[5][1]++;
        }
        // Get key ID (use provided key or default)
        const keyId =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[17]++, yield this.resolveKeyId(request.keyId));
        // Build encryption context
        const encryptionContext =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[18]++, Object.assign(Object.assign(Object.assign({}, this.config.encryptionContext), request.encryptionContext), {
          dataType,
          operationId,
          timestamp: new Date().toISOString()
        }));
        // Convert plaintext to Buffer if string
        const plaintext =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[19]++, typeof request.plaintext === "string" ?
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[6][0]++, Buffer.from(request.plaintext, "utf-8")) :
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[6][1]++, request.plaintext));
        // Encrypt data
        const command =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[20]++, new client_kms_1.EncryptCommand({
          KeyId: keyId,
          Plaintext: plaintext,
          EncryptionContext: encryptionContext
        }));
        const response =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[21]++, yield this.client.send(command));
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[22]++;
        if (!response.CiphertextBlob) {
          /* istanbul ignore next */
          cov_v9xtgb5ta().b[7][0]++;
          cov_v9xtgb5ta().s[23]++;
          throw new Error("Encryption failed: no ciphertext returned");
        } else
        /* istanbul ignore next */
        {
          cov_v9xtgb5ta().b[7][1]++;
        }
        // Convert ciphertext to base64
        const ciphertext =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[24]++, Buffer.from(response.CiphertextBlob).toString("base64"));
        const result =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[25]++, {
          ciphertext,
          keyId:
          /* istanbul ignore next */
          (cov_v9xtgb5ta().b[8][0]++, response.KeyId) ||
          /* istanbul ignore next */
          (cov_v9xtgb5ta().b[8][1]++, keyId),
          encryptionContext,
          encryptionAlgorithm:
          /* istanbul ignore next */
          (cov_v9xtgb5ta().b[9][0]++, response.EncryptionAlgorithm) ||
          /* istanbul ignore next */
          (cov_v9xtgb5ta().b[9][1]++, "SYMMETRIC_DEFAULT"),
          timestamp: new Date()
        });
        // Log encryption operation
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[26]++;
        yield this.auditTrail.logEvent({
          eventType: "kms_encryption",
          requestId: operationId,
          provider: "kms",
          complianceStatus: "compliant",
          metadata: {
            dataType,
            keyId: result.keyId,
            encryptionAlgorithm: result.encryptionAlgorithm,
            plaintextSize: plaintext.length,
            ciphertextSize: ciphertext.length,
            processingTimeMs: Date.now() - startTime
          }
        });
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[27]++;
        return result;
      } catch (error) {
        const errorMessage =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[28]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[10][0]++, error.message) :
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[10][1]++, String(error)));
        // Log encryption error
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[29]++;
        yield this.auditTrail.logEvent({
          eventType: "kms_encryption",
          requestId: operationId,
          provider: "kms",
          complianceStatus: "violation",
          error: {
            type: "encryption_error",
            message: errorMessage
          },
          metadata: {
            dataType,
            processingTimeMs: Date.now() - startTime
          }
        });
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[30]++;
        throw new Error(`KMS encryption failed: ${errorMessage}`);
      }
    });
  }
  /**
   * Decrypt sensitive data using KMS
   */
  decrypt(request_1) {
    /* istanbul ignore next */
    cov_v9xtgb5ta().f[3]++;
    cov_v9xtgb5ta().s[31]++;
    return tslib_1.__awaiter(this, arguments, void 0, function* (request, dataType =
    /* istanbul ignore next */
    (cov_v9xtgb5ta().b[11][0]++, "operation_context")) {
      /* istanbul ignore next */
      cov_v9xtgb5ta().f[4]++;
      const startTime =
      /* istanbul ignore next */
      (cov_v9xtgb5ta().s[32]++, Date.now());
      const operationId =
      /* istanbul ignore next */
      (cov_v9xtgb5ta().s[33]++, this.generateOperationId());
      /* istanbul ignore next */
      cov_v9xtgb5ta().s[34]++;
      try {
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[35]++;
        // Check if KMS encryption is enabled
        if (!this.featureFlags.isEnabled("kms_encryption_enabled", true)) {
          /* istanbul ignore next */
          cov_v9xtgb5ta().b[12][0]++;
          cov_v9xtgb5ta().s[36]++;
          throw new Error("KMS encryption is disabled");
        } else
        /* istanbul ignore next */
        {
          cov_v9xtgb5ta().b[12][1]++;
        }
        // Convert base64 ciphertext to Buffer
        const ciphertext =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[37]++, Buffer.from(request.ciphertext, "base64"));
        // Build encryption context for validation
        const encryptionContext =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[38]++, request.encryptionContext);
        // Decrypt data
        const command =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[39]++, new client_kms_1.DecryptCommand(Object.assign({
          CiphertextBlob: ciphertext,
          EncryptionContext: encryptionContext
        },
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[13][0]++, request.keyId) &&
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[13][1]++, {
          KeyId: request.keyId
        }))));
        const response =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[40]++, yield this.client.send(command));
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[41]++;
        if (!response.Plaintext) {
          /* istanbul ignore next */
          cov_v9xtgb5ta().b[14][0]++;
          cov_v9xtgb5ta().s[42]++;
          throw new Error("Decryption failed: no plaintext returned");
        } else
        /* istanbul ignore next */
        {
          cov_v9xtgb5ta().b[14][1]++;
        }
        // Convert plaintext to string
        const plaintext =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[43]++, Buffer.from(response.Plaintext).toString("utf-8"));
        const result =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[44]++, {
          plaintext,
          keyId:
          /* istanbul ignore next */
          (cov_v9xtgb5ta().b[15][0]++, response.KeyId) ||
          /* istanbul ignore next */
          (cov_v9xtgb5ta().b[15][1]++, "unknown"),
          encryptionContext,
          timestamp: new Date()
        });
        // Log decryption operation
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[45]++;
        yield this.auditTrail.logEvent({
          eventType: "kms_decryption",
          requestId: operationId,
          provider: "kms",
          complianceStatus: "compliant",
          metadata: {
            dataType,
            keyId: result.keyId,
            ciphertextSize: ciphertext.length,
            plaintextSize: plaintext.length,
            processingTimeMs: Date.now() - startTime
          }
        });
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[46]++;
        return result;
      } catch (error) {
        const errorMessage =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[47]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[16][0]++, error.message) :
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[16][1]++, String(error)));
        // Log decryption error
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[48]++;
        yield this.auditTrail.logEvent({
          eventType: "kms_decryption",
          requestId: operationId,
          provider: "kms",
          complianceStatus: "violation",
          error: {
            type: "decryption_error",
            message: errorMessage
          },
          metadata: {
            dataType,
            processingTimeMs: Date.now() - startTime
          }
        });
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[49]++;
        throw new Error(`KMS decryption failed: ${errorMessage}`);
      }
    });
  }
  /**
   * Generate data key for envelope encryption
   */
  generateDataKey() {
    /* istanbul ignore next */
    cov_v9xtgb5ta().f[5]++;
    cov_v9xtgb5ta().s[50]++;
    return tslib_1.__awaiter(this, arguments, void 0, function* (request =
    /* istanbul ignore next */
    (cov_v9xtgb5ta().b[17][0]++, {})) {
      /* istanbul ignore next */
      cov_v9xtgb5ta().f[6]++;
      const startTime =
      /* istanbul ignore next */
      (cov_v9xtgb5ta().s[51]++, Date.now());
      const operationId =
      /* istanbul ignore next */
      (cov_v9xtgb5ta().s[52]++, this.generateOperationId());
      /* istanbul ignore next */
      cov_v9xtgb5ta().s[53]++;
      try {
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[54]++;
        // Check if KMS encryption is enabled
        if (!this.featureFlags.isEnabled("kms_encryption_enabled", true)) {
          /* istanbul ignore next */
          cov_v9xtgb5ta().b[18][0]++;
          cov_v9xtgb5ta().s[55]++;
          throw new Error("KMS encryption is disabled");
        } else
        /* istanbul ignore next */
        {
          cov_v9xtgb5ta().b[18][1]++;
        }
        // Get key ID
        const keyId =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[56]++, yield this.resolveKeyId());
        // Build encryption context
        const encryptionContext =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[57]++, Object.assign(Object.assign(Object.assign({}, this.config.encryptionContext), request.encryptionContext), {
          operationId,
          timestamp: new Date().toISOString()
        }));
        // Generate data key
        const command =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[58]++, new client_kms_1.GenerateDataKeyCommand({
          KeyId: keyId,
          KeySpec:
          /* istanbul ignore next */
          (cov_v9xtgb5ta().b[19][0]++, request.keySpec) ||
          /* istanbul ignore next */
          (cov_v9xtgb5ta().b[19][1]++, "AES_256"),
          EncryptionContext: encryptionContext
        }));
        const response =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[59]++, yield this.client.send(command));
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[60]++;
        if (
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[21][0]++, !response.Plaintext) ||
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[21][1]++, !response.CiphertextBlob)) {
          /* istanbul ignore next */
          cov_v9xtgb5ta().b[20][0]++;
          cov_v9xtgb5ta().s[61]++;
          throw new Error("Data key generation failed");
        } else
        /* istanbul ignore next */
        {
          cov_v9xtgb5ta().b[20][1]++;
        }
        const result =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[62]++, {
          plaintextKey: Buffer.from(response.Plaintext),
          encryptedKey: Buffer.from(response.CiphertextBlob).toString("base64"),
          keyId:
          /* istanbul ignore next */
          (cov_v9xtgb5ta().b[22][0]++, response.KeyId) ||
          /* istanbul ignore next */
          (cov_v9xtgb5ta().b[22][1]++, keyId)
        });
        // Log data key generation
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[63]++;
        yield this.auditTrail.logEvent({
          eventType: "kms_data_key_generation",
          requestId: operationId,
          provider: "kms",
          complianceStatus: "compliant",
          metadata: {
            keyId: result.keyId,
            keySpec:
            /* istanbul ignore next */
            (cov_v9xtgb5ta().b[23][0]++, request.keySpec) ||
            /* istanbul ignore next */
            (cov_v9xtgb5ta().b[23][1]++, "AES_256"),
            processingTimeMs: Date.now() - startTime
          }
        });
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[64]++;
        return result;
      } catch (error) {
        const errorMessage =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[65]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[24][0]++, error.message) :
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[24][1]++, String(error)));
        // Log data key generation error
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[66]++;
        yield this.auditTrail.logEvent({
          eventType: "kms_data_key_generation",
          requestId: operationId,
          provider: "kms",
          complianceStatus: "violation",
          error: {
            type: "data_key_generation_error",
            message: errorMessage
          },
          metadata: {
            processingTimeMs: Date.now() - startTime
          }
        });
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[67]++;
        throw new Error(`KMS data key generation failed: ${errorMessage}`);
      }
    });
  }
  /**
   * Get key rotation status
   */
  getKeyRotationStatus(keyId) {
    /* istanbul ignore next */
    cov_v9xtgb5ta().f[7]++;
    cov_v9xtgb5ta().s[68]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_v9xtgb5ta().f[8]++;
      cov_v9xtgb5ta().s[69]++;
      try {
        const resolvedKeyId =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[70]++, yield this.resolveKeyId(keyId));
        // Get key rotation status
        const command =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[71]++, new client_kms_1.GetKeyRotationStatusCommand({
          KeyId: resolvedKeyId
        }));
        const response =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[72]++, yield this.client.send(command));
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[73]++;
        return {
          keyId: resolvedKeyId,
          rotationEnabled:
          /* istanbul ignore next */
          (cov_v9xtgb5ta().b[25][0]++, response.KeyRotationEnabled) ||
          /* istanbul ignore next */
          (cov_v9xtgb5ta().b[25][1]++, false)
          // Note: AWS KMS doesn't provide rotation dates via API
          // These would need to be tracked separately
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[74]++;
        throw new Error(`Failed to get key rotation status: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[26][0]++, error.message) :
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[26][1]++, String(error))}`);
      }
    });
  }
  /**
   * Enable key rotation
   */
  enableKeyRotation(keyId) {
    /* istanbul ignore next */
    cov_v9xtgb5ta().f[9]++;
    cov_v9xtgb5ta().s[75]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_v9xtgb5ta().f[10]++;
      cov_v9xtgb5ta().s[76]++;
      try {
        const resolvedKeyId =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[77]++, yield this.resolveKeyId(keyId));
        const command =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[78]++, new client_kms_1.EnableKeyRotationCommand({
          KeyId: resolvedKeyId
        }));
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[79]++;
        yield this.client.send(command);
        // Log key rotation enablement
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[80]++;
        yield this.auditTrail.logEvent({
          eventType: "kms_key_rotation_enabled",
          requestId: this.generateOperationId(),
          provider: "kms",
          complianceStatus: "compliant",
          metadata: {
            keyId: resolvedKeyId
          }
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[81]++;
        throw new Error(`Failed to enable key rotation: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[27][0]++, error.message) :
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[27][1]++, String(error))}`);
      }
    });
  }
  /**
   * Describe KMS key
   */
  describeKey(keyId) {
    /* istanbul ignore next */
    cov_v9xtgb5ta().f[11]++;
    cov_v9xtgb5ta().s[82]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_v9xtgb5ta().f[12]++;
      cov_v9xtgb5ta().s[83]++;
      try {
        const resolvedKeyId =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[84]++, yield this.resolveKeyId(keyId));
        const command =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[85]++, new client_kms_1.DescribeKeyCommand({
          KeyId: resolvedKeyId
        }));
        const response =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[86]++, yield this.client.send(command));
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[87]++;
        if (!response.KeyMetadata) {
          /* istanbul ignore next */
          cov_v9xtgb5ta().b[28][0]++;
          cov_v9xtgb5ta().s[88]++;
          throw new Error("Key metadata not found");
        } else
        /* istanbul ignore next */
        {
          cov_v9xtgb5ta().b[28][1]++;
        }
        cov_v9xtgb5ta().s[89]++;
        return {
          keyId: response.KeyMetadata.KeyId,
          arn:
          /* istanbul ignore next */
          (cov_v9xtgb5ta().b[29][0]++, response.KeyMetadata.Arn) ||
          /* istanbul ignore next */
          (cov_v9xtgb5ta().b[29][1]++, ""),
          creationDate: response.KeyMetadata.CreationDate,
          enabled:
          /* istanbul ignore next */
          (cov_v9xtgb5ta().b[30][0]++, response.KeyMetadata.Enabled) ||
          /* istanbul ignore next */
          (cov_v9xtgb5ta().b[30][1]++, false),
          description: response.KeyMetadata.Description,
          keyUsage:
          /* istanbul ignore next */
          (cov_v9xtgb5ta().b[31][0]++, response.KeyMetadata.KeyUsage) ||
          /* istanbul ignore next */
          (cov_v9xtgb5ta().b[31][1]++, "ENCRYPT_DECRYPT"),
          keyState:
          /* istanbul ignore next */
          (cov_v9xtgb5ta().b[32][0]++, response.KeyMetadata.KeyState) ||
          /* istanbul ignore next */
          (cov_v9xtgb5ta().b[32][1]++, "Unknown")
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[90]++;
        throw new Error(`Failed to describe key: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[33][0]++, error.message) :
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[33][1]++, String(error))}`);
      }
    });
  }
  /**
   * List key aliases
   */
  listAliases() {
    /* istanbul ignore next */
    cov_v9xtgb5ta().f[13]++;
    cov_v9xtgb5ta().s[91]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_v9xtgb5ta().f[14]++;
      var _a;
      /* istanbul ignore next */
      cov_v9xtgb5ta().s[92]++;
      try {
        const command =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[93]++, new client_kms_1.ListAliasesCommand({}));
        const response =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[94]++, yield this.client.send(command));
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[95]++;
        return /* istanbul ignore next */(cov_v9xtgb5ta().b[34][0]++,
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[36][0]++, (_a = response.Aliases) === null) ||
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[36][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[35][0]++, void 0) :
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[35][1]++, _a.map(alias => {
          /* istanbul ignore next */
          cov_v9xtgb5ta().f[15]++;
          cov_v9xtgb5ta().s[96]++;
          return {
            aliasName:
            /* istanbul ignore next */
            (cov_v9xtgb5ta().b[37][0]++, alias.AliasName) ||
            /* istanbul ignore next */
            (cov_v9xtgb5ta().b[37][1]++, ""),
            targetKeyId:
            /* istanbul ignore next */
            (cov_v9xtgb5ta().b[38][0]++, alias.TargetKeyId) ||
            /* istanbul ignore next */
            (cov_v9xtgb5ta().b[38][1]++, "")
          };
        }))) ||
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[34][1]++, []);
      } catch (error) {
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[97]++;
        throw new Error(`Failed to list aliases: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[39][0]++, error.message) :
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[39][1]++, String(error))}`);
      }
    });
  }
  /**
   * Encrypt PII data with additional context
   */
  encryptPII(piiData, context) {
    /* istanbul ignore next */
    cov_v9xtgb5ta().f[16]++;
    cov_v9xtgb5ta().s[98]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_v9xtgb5ta().f[17]++;
      cov_v9xtgb5ta().s[99]++;
      return this.encrypt({
        plaintext: piiData,
        encryptionContext: Object.assign(Object.assign({
          piiType: context.piiType
        },
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[40][0]++, context.userId) &&
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[40][1]++, {
          userId: context.userId
        })),
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[41][0]++, context.operationId) &&
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[41][1]++, {
          operationId: context.operationId
        }))
      }, "pii");
    });
  }
  /**
   * Decrypt PII data with validation
   */
  decryptPII(encryptedPII, context) {
    /* istanbul ignore next */
    cov_v9xtgb5ta().f[18]++;
    cov_v9xtgb5ta().s[100]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_v9xtgb5ta().f[19]++;
      cov_v9xtgb5ta().s[101]++;
      return this.decrypt({
        ciphertext: encryptedPII,
        encryptionContext: Object.assign(Object.assign({
          piiType: context.piiType
        },
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[42][0]++, context.userId) &&
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[42][1]++, {
          userId: context.userId
        })),
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[43][0]++, context.operationId) &&
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[43][1]++, {
          operationId: context.operationId
        }))
      }, "pii");
    });
  }
  /**
   * Encrypt operation context for audit trail
   */
  encryptOperationContext(context, operationId) {
    /* istanbul ignore next */
    cov_v9xtgb5ta().f[20]++;
    cov_v9xtgb5ta().s[102]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_v9xtgb5ta().f[21]++;
      const contextJson =
      /* istanbul ignore next */
      (cov_v9xtgb5ta().s[103]++, JSON.stringify(context));
      /* istanbul ignore next */
      cov_v9xtgb5ta().s[104]++;
      return this.encrypt({
        plaintext: contextJson,
        encryptionContext: {
          operationId,
          contextType: "operation_context"
        }
      }, "operation_context");
    });
  }
  /**
   * Decrypt operation context from audit trail
   */
  decryptOperationContext(encryptedContext, operationId) {
    /* istanbul ignore next */
    cov_v9xtgb5ta().f[22]++;
    cov_v9xtgb5ta().s[105]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_v9xtgb5ta().f[23]++;
      const decrypted =
      /* istanbul ignore next */
      (cov_v9xtgb5ta().s[106]++, yield this.decrypt({
        ciphertext: encryptedContext,
        encryptionContext: {
          operationId,
          contextType: "operation_context"
        }
      }, "operation_context"));
      /* istanbul ignore next */
      cov_v9xtgb5ta().s[107]++;
      return JSON.parse(decrypted.plaintext);
    });
  }
  // Private Methods
  /**
   * Resolve key ID from alias or use default
   */
  resolveKeyId(keyId) {
    /* istanbul ignore next */
    cov_v9xtgb5ta().f[24]++;
    cov_v9xtgb5ta().s[108]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_v9xtgb5ta().f[25]++;
      cov_v9xtgb5ta().s[109]++;
      // Use provided key ID if available
      if (keyId) {
        /* istanbul ignore next */
        cov_v9xtgb5ta().b[44][0]++;
        cov_v9xtgb5ta().s[110]++;
        return keyId;
      } else
      /* istanbul ignore next */
      {
        cov_v9xtgb5ta().b[44][1]++;
      }
      // Use configured key ID if available
      cov_v9xtgb5ta().s[111]++;
      if (this.config.keyId) {
        /* istanbul ignore next */
        cov_v9xtgb5ta().b[45][0]++;
        cov_v9xtgb5ta().s[112]++;
        return this.config.keyId;
      } else
      /* istanbul ignore next */
      {
        cov_v9xtgb5ta().b[45][1]++;
      }
      // Use key alias
      cov_v9xtgb5ta().s[113]++;
      if (this.config.keyAlias) {
        /* istanbul ignore next */
        cov_v9xtgb5ta().b[46][0]++;
        // Check cache first
        const cached =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[114]++, this.keyCache.get(this.config.keyAlias));
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[115]++;
        if (
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[48][0]++, cached) &&
        /* istanbul ignore next */
        (cov_v9xtgb5ta().b[48][1]++, Date.now() - cached.timestamp.getTime() < 3600000)) {
          /* istanbul ignore next */
          cov_v9xtgb5ta().b[47][0]++;
          cov_v9xtgb5ta().s[116]++;
          // 1 hour cache
          return cached.keyId;
        } else
        /* istanbul ignore next */
        {
          cov_v9xtgb5ta().b[47][1]++;
        }
        // Resolve alias to key ID
        const aliases =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[117]++, yield this.listAliases());
        const alias =
        /* istanbul ignore next */
        (cov_v9xtgb5ta().s[118]++, aliases.find(a => {
          /* istanbul ignore next */
          cov_v9xtgb5ta().f[26]++;
          cov_v9xtgb5ta().s[119]++;
          return a.aliasName === this.config.keyAlias;
        }));
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[120]++;
        if (!alias) {
          /* istanbul ignore next */
          cov_v9xtgb5ta().b[49][0]++;
          cov_v9xtgb5ta().s[121]++;
          throw new Error(`Key alias not found: ${this.config.keyAlias}`);
        } else
        /* istanbul ignore next */
        {
          cov_v9xtgb5ta().b[49][1]++;
        }
        // Cache the resolved key ID
        cov_v9xtgb5ta().s[122]++;
        this.keyCache.set(this.config.keyAlias, {
          keyId: alias.targetKeyId,
          timestamp: new Date()
        });
        /* istanbul ignore next */
        cov_v9xtgb5ta().s[123]++;
        return alias.targetKeyId;
      } else
      /* istanbul ignore next */
      {
        cov_v9xtgb5ta().b[46][1]++;
      }
      cov_v9xtgb5ta().s[124]++;
      throw new Error("No KMS key ID or alias configured");
    });
  }
  /**
   * Generate unique operation ID
   */
  generateOperationId() {
    /* istanbul ignore next */
    cov_v9xtgb5ta().f[27]++;
    cov_v9xtgb5ta().s[125]++;
    return `kms-${Date.now()}-${Math.random().toString(36).substring(2, 15)}`;
  }
  /**
   * Cleanup resources
   */
  destroy() {
    /* istanbul ignore next */
    cov_v9xtgb5ta().f[28]++;
    cov_v9xtgb5ta().s[126]++;
    this.keyCache.clear();
  }
}
/* istanbul ignore next */
cov_v9xtgb5ta().s[127]++;
exports.KMSEncryptionService = KMSEncryptionService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
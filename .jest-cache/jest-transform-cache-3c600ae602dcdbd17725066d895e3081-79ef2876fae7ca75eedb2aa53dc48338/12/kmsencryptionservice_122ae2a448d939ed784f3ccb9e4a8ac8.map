{"version":3,"names":["cov_v9xtgb5ta","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","client_kms_1","require","ai_feature_flags_1","audit_trail_system_1","KMSEncryptionService","constructor","config","auditTrail","Object","assign","region","process","env","AWS_REGION","keyAlias","KMS_KEY_ALIAS","enableKeyRotation","maxRetries","timeout","client","KMSClient","maxAttempts","requestHandler","requestTimeout","featureFlags","AiFeatureFlags","AuditTrailSystem","complianceMode","enableIntegrityChecking","retentionDays","keyCache","Map","encrypt","request_1","request","dataType","startTime","Date","now","operationId","generateOperationId","isEnabled","Error","keyId","resolveKeyId","encryptionContext","timestamp","toISOString","plaintext","Buffer","from","command","EncryptCommand","KeyId","Plaintext","EncryptionContext","response","send","CiphertextBlob","ciphertext","toString","result","encryptionAlgorithm","EncryptionAlgorithm","logEvent","eventType","requestId","provider","complianceStatus","metadata","plaintextSize","length","ciphertextSize","processingTimeMs","error","errorMessage","message","String","decrypt","DecryptCommand","generateDataKey","GenerateDataKeyCommand","KeySpec","keySpec","plaintextKey","encryptedKey","getKeyRotationStatus","resolvedKeyId","GetKeyRotationStatusCommand","rotationEnabled","KeyRotationEnabled","EnableKeyRotationCommand","describeKey","DescribeKeyCommand","KeyMetadata","arn","Arn","creationDate","CreationDate","enabled","Enabled","description","Description","keyUsage","KeyUsage","keyState","KeyState","listAliases","ListAliasesCommand","_a","Aliases","map","alias","aliasName","AliasName","targetKeyId","TargetKeyId","encryptPII","piiData","context","piiType","userId","decryptPII","encryptedPII","encryptOperationContext","contextJson","JSON","stringify","contextType","decryptOperationContext","encryptedContext","decrypted","parse","cached","get","getTime","aliases","find","a","set","Math","random","substring","destroy","clear","exports"],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/kms-encryption-service.ts"],"sourcesContent":["/**\n * KMS Encryption Service for Direct Bedrock Operations\n *\n * This module provides KMS-based encryption and decryption for sensitive data\n * in direct Bedrock operations, ensuring GDPR compliance and data protection.\n *\n * Features:\n * - Encrypt/decrypt sensitive operation data\n * - Secure PII storage with KMS encryption\n * - Audit trail integration for encryption operations\n * - Key rotation support\n * - Multi-region key management\n */\n\nimport {\n  DecryptCommand,\n  DescribeKeyCommand,\n  EnableKeyRotationCommand,\n  EncryptCommand,\n  GenerateDataKeyCommand,\n  GetKeyRotationStatusCommand,\n  KMSClient,\n  ListAliasesCommand,\n} from \"@aws-sdk/client-kms\";\nimport { AiFeatureFlags } from \"./ai-feature-flags\";\nimport { AuditTrailSystem } from \"./audit-trail-system\";\n\n// KMS Configuration\nexport interface KMSEncryptionConfig {\n  region: string;\n  keyId?: string; // KMS Key ID or ARN\n  keyAlias?: string; // KMS Key Alias (e.g., alias/matbakh-ai)\n  enableKeyRotation: boolean;\n  encryptionContext?: Record<string, string>; // Additional encryption context\n  maxRetries: number;\n  timeout: number;\n}\n\n// Encryption Request\nexport interface EncryptionRequest {\n  plaintext: string | Buffer;\n  encryptionContext?: Record<string, string>;\n  keyId?: string; // Override default key\n}\n\n// Encryption Response\nexport interface EncryptionResponse {\n  ciphertext: string; // Base64-encoded encrypted data\n  keyId: string; // KMS Key ID used for encryption\n  encryptionContext?: Record<string, string>;\n  encryptionAlgorithm: string;\n  timestamp: Date;\n}\n\n// Decryption Request\nexport interface DecryptionRequest {\n  ciphertext: string; // Base64-encoded encrypted data\n  encryptionContext?: Record<string, string>;\n  keyId?: string; // Optional key ID for validation\n}\n\n// Decryption Response\nexport interface DecryptionResponse {\n  plaintext: string;\n  keyId: string; // KMS Key ID used for decryption\n  encryptionContext?: Record<string, string>;\n  timestamp: Date;\n}\n\n// Data Key Generation Request\nexport interface DataKeyRequest {\n  keySpec?: \"AES_256\" | \"AES_128\";\n  encryptionContext?: Record<string, string>;\n}\n\n// Data Key Response\nexport interface DataKeyResponse {\n  plaintextKey: Buffer; // Plaintext data key (use and discard immediately)\n  encryptedKey: string; // Encrypted data key (store for later decryption)\n  keyId: string;\n}\n\n// Key Rotation Status\nexport interface KeyRotationStatus {\n  keyId: string;\n  rotationEnabled: boolean;\n  nextRotationDate?: Date;\n  lastRotationDate?: Date;\n}\n\n// Sensitive Data Types for Encryption\nexport type SensitiveDataType =\n  | \"pii\"\n  | \"credentials\"\n  | \"api_keys\"\n  | \"tokens\"\n  | \"operation_context\"\n  | \"user_data\"\n  | \"audit_data\";\n\n/**\n * KMS Encryption Service for Direct Bedrock Operations\n */\nexport class KMSEncryptionService {\n  private client: KMSClient;\n  private config: KMSEncryptionConfig;\n  private featureFlags: AiFeatureFlags;\n  private auditTrail: AuditTrailSystem;\n  private keyCache: Map<string, { keyId: string; timestamp: Date }>;\n\n  constructor(\n    config: Partial<KMSEncryptionConfig> = {},\n    auditTrail?: AuditTrailSystem\n  ) {\n    this.config = {\n      region: process.env.AWS_REGION || \"eu-central-1\",\n      keyAlias: process.env.KMS_KEY_ALIAS || \"alias/matbakh-ai\",\n      enableKeyRotation: true,\n      maxRetries: 3,\n      timeout: 5000,\n      ...config,\n    };\n\n    // Initialize KMS client\n    this.client = new KMSClient({\n      region: this.config.region,\n      maxAttempts: this.config.maxRetries,\n      requestHandler: {\n        requestTimeout: this.config.timeout,\n      },\n    });\n\n    // Initialize feature flags\n    this.featureFlags = new AiFeatureFlags();\n\n    // Initialize audit trail\n    this.auditTrail =\n      auditTrail ||\n      new AuditTrailSystem({\n        complianceMode: \"strict\",\n        enableIntegrityChecking: true,\n        retentionDays: 2555, // 7 years for GDPR compliance\n      });\n\n    // Initialize key cache\n    this.keyCache = new Map();\n  }\n\n  /**\n   * Encrypt sensitive data using KMS\n   */\n  async encrypt(\n    request: EncryptionRequest,\n    dataType: SensitiveDataType = \"operation_context\"\n  ): Promise<EncryptionResponse> {\n    const startTime = Date.now();\n    const operationId = this.generateOperationId();\n\n    try {\n      // Check if KMS encryption is enabled\n      if (!this.featureFlags.isEnabled(\"kms_encryption_enabled\", true)) {\n        throw new Error(\"KMS encryption is disabled\");\n      }\n\n      // Get key ID (use provided key or default)\n      const keyId = await this.resolveKeyId(request.keyId);\n\n      // Build encryption context\n      const encryptionContext = {\n        ...this.config.encryptionContext,\n        ...request.encryptionContext,\n        dataType,\n        operationId,\n        timestamp: new Date().toISOString(),\n      };\n\n      // Convert plaintext to Buffer if string\n      const plaintext =\n        typeof request.plaintext === \"string\"\n          ? Buffer.from(request.plaintext, \"utf-8\")\n          : request.plaintext;\n\n      // Encrypt data\n      const command = new EncryptCommand({\n        KeyId: keyId,\n        Plaintext: plaintext,\n        EncryptionContext: encryptionContext,\n      });\n\n      const response = await this.client.send(command);\n\n      if (!response.CiphertextBlob) {\n        throw new Error(\"Encryption failed: no ciphertext returned\");\n      }\n\n      // Convert ciphertext to base64\n      const ciphertext = Buffer.from(response.CiphertextBlob).toString(\n        \"base64\"\n      );\n\n      const result: EncryptionResponse = {\n        ciphertext,\n        keyId: response.KeyId || keyId,\n        encryptionContext,\n        encryptionAlgorithm:\n          response.EncryptionAlgorithm || \"SYMMETRIC_DEFAULT\",\n        timestamp: new Date(),\n      };\n\n      // Log encryption operation\n      await this.auditTrail.logEvent({\n        eventType: \"kms_encryption\",\n        requestId: operationId,\n        provider: \"kms\",\n        complianceStatus: \"compliant\",\n        metadata: {\n          dataType,\n          keyId: result.keyId,\n          encryptionAlgorithm: result.encryptionAlgorithm,\n          plaintextSize: plaintext.length,\n          ciphertextSize: ciphertext.length,\n          processingTimeMs: Date.now() - startTime,\n        },\n      });\n\n      return result;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      // Log encryption error\n      await this.auditTrail.logEvent({\n        eventType: \"kms_encryption\",\n        requestId: operationId,\n        provider: \"kms\",\n        complianceStatus: \"violation\",\n        error: {\n          type: \"encryption_error\",\n          message: errorMessage,\n        },\n        metadata: {\n          dataType,\n          processingTimeMs: Date.now() - startTime,\n        },\n      });\n\n      throw new Error(`KMS encryption failed: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Decrypt sensitive data using KMS\n   */\n  async decrypt(\n    request: DecryptionRequest,\n    dataType: SensitiveDataType = \"operation_context\"\n  ): Promise<DecryptionResponse> {\n    const startTime = Date.now();\n    const operationId = this.generateOperationId();\n\n    try {\n      // Check if KMS encryption is enabled\n      if (!this.featureFlags.isEnabled(\"kms_encryption_enabled\", true)) {\n        throw new Error(\"KMS encryption is disabled\");\n      }\n\n      // Convert base64 ciphertext to Buffer\n      const ciphertext = Buffer.from(request.ciphertext, \"base64\");\n\n      // Build encryption context for validation\n      const encryptionContext = request.encryptionContext;\n\n      // Decrypt data\n      const command = new DecryptCommand({\n        CiphertextBlob: ciphertext,\n        EncryptionContext: encryptionContext,\n        ...(request.keyId && { KeyId: request.keyId }),\n      });\n\n      const response = await this.client.send(command);\n\n      if (!response.Plaintext) {\n        throw new Error(\"Decryption failed: no plaintext returned\");\n      }\n\n      // Convert plaintext to string\n      const plaintext = Buffer.from(response.Plaintext).toString(\"utf-8\");\n\n      const result: DecryptionResponse = {\n        plaintext,\n        keyId: response.KeyId || \"unknown\",\n        encryptionContext,\n        timestamp: new Date(),\n      };\n\n      // Log decryption operation\n      await this.auditTrail.logEvent({\n        eventType: \"kms_decryption\",\n        requestId: operationId,\n        provider: \"kms\",\n        complianceStatus: \"compliant\",\n        metadata: {\n          dataType,\n          keyId: result.keyId,\n          ciphertextSize: ciphertext.length,\n          plaintextSize: plaintext.length,\n          processingTimeMs: Date.now() - startTime,\n        },\n      });\n\n      return result;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      // Log decryption error\n      await this.auditTrail.logEvent({\n        eventType: \"kms_decryption\",\n        requestId: operationId,\n        provider: \"kms\",\n        complianceStatus: \"violation\",\n        error: {\n          type: \"decryption_error\",\n          message: errorMessage,\n        },\n        metadata: {\n          dataType,\n          processingTimeMs: Date.now() - startTime,\n        },\n      });\n\n      throw new Error(`KMS decryption failed: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Generate data key for envelope encryption\n   */\n  async generateDataKey(\n    request: DataKeyRequest = {}\n  ): Promise<DataKeyResponse> {\n    const startTime = Date.now();\n    const operationId = this.generateOperationId();\n\n    try {\n      // Check if KMS encryption is enabled\n      if (!this.featureFlags.isEnabled(\"kms_encryption_enabled\", true)) {\n        throw new Error(\"KMS encryption is disabled\");\n      }\n\n      // Get key ID\n      const keyId = await this.resolveKeyId();\n\n      // Build encryption context\n      const encryptionContext = {\n        ...this.config.encryptionContext,\n        ...request.encryptionContext,\n        operationId,\n        timestamp: new Date().toISOString(),\n      };\n\n      // Generate data key\n      const command = new GenerateDataKeyCommand({\n        KeyId: keyId,\n        KeySpec: request.keySpec || \"AES_256\",\n        EncryptionContext: encryptionContext,\n      });\n\n      const response = await this.client.send(command);\n\n      if (!response.Plaintext || !response.CiphertextBlob) {\n        throw new Error(\"Data key generation failed\");\n      }\n\n      const result: DataKeyResponse = {\n        plaintextKey: Buffer.from(response.Plaintext),\n        encryptedKey: Buffer.from(response.CiphertextBlob).toString(\"base64\"),\n        keyId: response.KeyId || keyId,\n      };\n\n      // Log data key generation\n      await this.auditTrail.logEvent({\n        eventType: \"kms_data_key_generation\",\n        requestId: operationId,\n        provider: \"kms\",\n        complianceStatus: \"compliant\",\n        metadata: {\n          keyId: result.keyId,\n          keySpec: request.keySpec || \"AES_256\",\n          processingTimeMs: Date.now() - startTime,\n        },\n      });\n\n      return result;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      // Log data key generation error\n      await this.auditTrail.logEvent({\n        eventType: \"kms_data_key_generation\",\n        requestId: operationId,\n        provider: \"kms\",\n        complianceStatus: \"violation\",\n        error: {\n          type: \"data_key_generation_error\",\n          message: errorMessage,\n        },\n        metadata: {\n          processingTimeMs: Date.now() - startTime,\n        },\n      });\n\n      throw new Error(`KMS data key generation failed: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Get key rotation status\n   */\n  async getKeyRotationStatus(keyId?: string): Promise<KeyRotationStatus> {\n    try {\n      const resolvedKeyId = await this.resolveKeyId(keyId);\n\n      // Get key rotation status\n      const command = new GetKeyRotationStatusCommand({\n        KeyId: resolvedKeyId,\n      });\n\n      const response = await this.client.send(command);\n\n      return {\n        keyId: resolvedKeyId,\n        rotationEnabled: response.KeyRotationEnabled || false,\n        // Note: AWS KMS doesn't provide rotation dates via API\n        // These would need to be tracked separately\n      };\n    } catch (error) {\n      throw new Error(\n        `Failed to get key rotation status: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Enable key rotation\n   */\n  async enableKeyRotation(keyId?: string): Promise<void> {\n    try {\n      const resolvedKeyId = await this.resolveKeyId(keyId);\n\n      const command = new EnableKeyRotationCommand({\n        KeyId: resolvedKeyId,\n      });\n\n      await this.client.send(command);\n\n      // Log key rotation enablement\n      await this.auditTrail.logEvent({\n        eventType: \"kms_key_rotation_enabled\",\n        requestId: this.generateOperationId(),\n        provider: \"kms\",\n        complianceStatus: \"compliant\",\n        metadata: {\n          keyId: resolvedKeyId,\n        },\n      });\n    } catch (error) {\n      throw new Error(\n        `Failed to enable key rotation: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Describe KMS key\n   */\n  async describeKey(keyId?: string): Promise<{\n    keyId: string;\n    arn: string;\n    creationDate?: Date;\n    enabled: boolean;\n    description?: string;\n    keyUsage: string;\n    keyState: string;\n  }> {\n    try {\n      const resolvedKeyId = await this.resolveKeyId(keyId);\n\n      const command = new DescribeKeyCommand({\n        KeyId: resolvedKeyId,\n      });\n\n      const response = await this.client.send(command);\n\n      if (!response.KeyMetadata) {\n        throw new Error(\"Key metadata not found\");\n      }\n\n      return {\n        keyId: response.KeyMetadata.KeyId,\n        arn: response.KeyMetadata.Arn || \"\",\n        creationDate: response.KeyMetadata.CreationDate,\n        enabled: response.KeyMetadata.Enabled || false,\n        description: response.KeyMetadata.Description,\n        keyUsage: response.KeyMetadata.KeyUsage || \"ENCRYPT_DECRYPT\",\n        keyState: response.KeyMetadata.KeyState || \"Unknown\",\n      };\n    } catch (error) {\n      throw new Error(\n        `Failed to describe key: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * List key aliases\n   */\n  async listAliases(): Promise<\n    Array<{ aliasName: string; targetKeyId: string }>\n  > {\n    try {\n      const command = new ListAliasesCommand({});\n      const response = await this.client.send(command);\n\n      return (\n        response.Aliases?.map((alias) => ({\n          aliasName: alias.AliasName || \"\",\n          targetKeyId: alias.TargetKeyId || \"\",\n        })) || []\n      );\n    } catch (error) {\n      throw new Error(\n        `Failed to list aliases: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Encrypt PII data with additional context\n   */\n  async encryptPII(\n    piiData: string,\n    context: {\n      piiType: string;\n      userId?: string;\n      operationId?: string;\n    }\n  ): Promise<EncryptionResponse> {\n    return this.encrypt(\n      {\n        plaintext: piiData,\n        encryptionContext: {\n          piiType: context.piiType,\n          ...(context.userId && { userId: context.userId }),\n          ...(context.operationId && { operationId: context.operationId }),\n        },\n      },\n      \"pii\"\n    );\n  }\n\n  /**\n   * Decrypt PII data with validation\n   */\n  async decryptPII(\n    encryptedPII: string,\n    context: {\n      piiType: string;\n      userId?: string;\n      operationId?: string;\n    }\n  ): Promise<DecryptionResponse> {\n    return this.decrypt(\n      {\n        ciphertext: encryptedPII,\n        encryptionContext: {\n          piiType: context.piiType,\n          ...(context.userId && { userId: context.userId }),\n          ...(context.operationId && { operationId: context.operationId }),\n        },\n      },\n      \"pii\"\n    );\n  }\n\n  /**\n   * Encrypt operation context for audit trail\n   */\n  async encryptOperationContext(\n    context: Record<string, any>,\n    operationId: string\n  ): Promise<EncryptionResponse> {\n    const contextJson = JSON.stringify(context);\n\n    return this.encrypt(\n      {\n        plaintext: contextJson,\n        encryptionContext: {\n          operationId,\n          contextType: \"operation_context\",\n        },\n      },\n      \"operation_context\"\n    );\n  }\n\n  /**\n   * Decrypt operation context from audit trail\n   */\n  async decryptOperationContext(\n    encryptedContext: string,\n    operationId: string\n  ): Promise<Record<string, any>> {\n    const decrypted = await this.decrypt(\n      {\n        ciphertext: encryptedContext,\n        encryptionContext: {\n          operationId,\n          contextType: \"operation_context\",\n        },\n      },\n      \"operation_context\"\n    );\n\n    return JSON.parse(decrypted.plaintext);\n  }\n\n  // Private Methods\n\n  /**\n   * Resolve key ID from alias or use default\n   */\n  private async resolveKeyId(keyId?: string): Promise<string> {\n    // Use provided key ID if available\n    if (keyId) {\n      return keyId;\n    }\n\n    // Use configured key ID if available\n    if (this.config.keyId) {\n      return this.config.keyId;\n    }\n\n    // Use key alias\n    if (this.config.keyAlias) {\n      // Check cache first\n      const cached = this.keyCache.get(this.config.keyAlias);\n      if (cached && Date.now() - cached.timestamp.getTime() < 3600000) {\n        // 1 hour cache\n        return cached.keyId;\n      }\n\n      // Resolve alias to key ID\n      const aliases = await this.listAliases();\n      const alias = aliases.find((a) => a.aliasName === this.config.keyAlias);\n\n      if (!alias) {\n        throw new Error(`Key alias not found: ${this.config.keyAlias}`);\n      }\n\n      // Cache the resolved key ID\n      this.keyCache.set(this.config.keyAlias, {\n        keyId: alias.targetKeyId,\n        timestamp: new Date(),\n      });\n\n      return alias.targetKeyId;\n    }\n\n    throw new Error(\"No KMS key ID or alias configured\");\n  }\n\n  /**\n   * Generate unique operation ID\n   */\n  private generateOperationId(): string {\n    return `kms-${Date.now()}-${Math.random().toString(36).substring(2, 15)}`;\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    this.keyCache.clear();\n  }\n}\n"],"mappings":"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","ignoreList":[]}
051c7c4ff96a8ffc1b8465632e08b52a
"use strict";

/* istanbul ignore next */
function cov_1wxhfghwg1() {
  var path = "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/adapters/meta-adapter.ts";
  var hash = "39b8c0f228d8eaff62dd82c368ed05a56c547351";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/adapters/meta-adapter.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 29
        }
      },
      "2": {
        start: {
          line: 4,
          column: 28
        },
        end: {
          line: 4,
          column: 58
        }
      },
      "3": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 10,
          column: 29
        }
      },
      "4": {
        start: {
          line: 10,
          column: 12
        },
        end: {
          line: 10,
          column: 29
        }
      },
      "5": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 17,
          column: 12
        }
      },
      "6": {
        start: {
          line: 12,
          column: 36
        },
        end: {
          line: 17,
          column: 9
        }
      },
      "7": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 22,
          column: 29
        }
      },
      "8": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 29
        }
      },
      "9": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 29,
          column: 12
        }
      },
      "10": {
        start: {
          line: 24,
          column: 36
        },
        end: {
          line: 29,
          column: 9
        }
      },
      "11": {
        start: {
          line: 32,
          column: 55
        },
        end: {
          line: 32,
          column: 60
        }
      },
      "12": {
        start: {
          line: 34,
          column: 29
        },
        end: {
          line: 34,
          column: 35
        }
      },
      "13": {
        start: {
          line: 35,
          column: 27
        },
        end: {
          line: 35,
          column: 50
        }
      },
      "14": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "15": {
        start: {
          line: 37,
          column: 37
        },
        end: {
          line: 37,
          column: 74
        }
      },
      "16": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 82
        }
      },
      "17": {
        start: {
          line: 41,
          column: 24
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "18": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "19": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 51,
          column: 115
        }
      },
      "20": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 23
        }
      },
      "21": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "22": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 48
        }
      },
      "23": {
        start: {
          line: 59,
          column: 23
        },
        end: {
          line: 59,
          column: 25
        }
      },
      "24": {
        start: {
          line: 60,
          column: 29
        },
        end: {
          line: 60,
          column: 52
        }
      },
      "25": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 79,
          column: 13
        }
      },
      "26": {
        start: {
          line: 63,
          column: 29
        },
        end: {
          line: 63,
          column: 94
        }
      },
      "27": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 68
        }
      },
      "28": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 68,
          column: 18
        }
      },
      "29": {
        start: {
          line: 70,
          column: 17
        },
        end: {
          line: 79,
          column: 13
        }
      },
      "30": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 43
        }
      },
      "31": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 73,
          column: 55
        }
      },
      "32": {
        start: {
          line: 75,
          column: 17
        },
        end: {
          line: 79,
          column: 13
        }
      },
      "33": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 77,
          column: 28
        }
      },
      "34": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 78,
          column: 55
        }
      },
      "35": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 85,
          column: 14
        }
      },
      "36": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 44
        }
      },
      "37": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 45
        }
      },
      "38": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 104,
          column: 10
        }
      },
      "39": {
        start: {
          line: 109,
          column: 23
        },
        end: {
          line: 109,
          column: 51
        }
      },
      "40": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 44
        }
      },
      "41": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 18
        }
      },
      "42": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 22
        }
      },
      "43": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 21
        }
      },
      "44": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 143,
          column: 24
        }
      },
      "45": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 141,
          column: 13
        }
      },
      "46": {
        start: {
          line: 133,
          column: 29
        },
        end: {
          line: 133,
          column: 42
        }
      },
      "47": {
        start: {
          line: 134,
          column: 31
        },
        end: {
          line: 134,
          column: 81
        }
      },
      "48": {
        start: {
          line: 135,
          column: 16
        },
        end: {
          line: 135,
          column: 72
        }
      },
      "49": {
        start: {
          line: 139,
          column: 31
        },
        end: {
          line: 139,
          column: 76
        }
      },
      "50": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 140,
          column: 92
        }
      },
      "51": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 70
        }
      },
      "52": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 160,
          column: 9
        }
      },
      "53": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 29
        }
      },
      "54": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 157,
          column: 29
        }
      },
      "55": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 29
        }
      },
      "56": {
        start: {
          line: 163,
          column: 0
        },
        end: {
          line: 163,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 20
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 25
          },
          end: {
            line: 12,
            column: 26
          }
        },
        loc: {
          start: {
            line: 12,
            column: 36
          },
          end: {
            line: 17,
            column: 9
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 29
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 24,
            column: 25
          },
          end: {
            line: 24,
            column: 26
          }
        },
        loc: {
          start: {
            line: 24,
            column: 36
          },
          end: {
            line: 29,
            column: 9
          }
        },
        line: 24
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 24
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 31
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        },
        loc: {
          start: {
            line: 55,
            column: 24
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 55
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        loc: {
          start: {
            line: 91,
            column: 33
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 91
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        },
        loc: {
          start: {
            line: 95,
            column: 24
          },
          end: {
            line: 105,
            column: 5
          }
        },
        line: 95
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 107,
            column: 5
          }
        },
        loc: {
          start: {
            line: 107,
            column: 25
          },
          end: {
            line: 111,
            column: 5
          }
        },
        line: 107
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 113,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        loc: {
          start: {
            line: 113,
            column: 39
          },
          end: {
            line: 118,
            column: 5
          }
        },
        line: 113
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        },
        loc: {
          start: {
            line: 119,
            column: 22
          },
          end: {
            line: 121,
            column: 5
          }
        },
        line: 119
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        },
        loc: {
          start: {
            line: 123,
            column: 33
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 123
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 128,
            column: 4
          },
          end: {
            line: 128,
            column: 5
          }
        },
        loc: {
          start: {
            line: 128,
            column: 32
          },
          end: {
            line: 144,
            column: 5
          }
        },
        line: 128
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 130,
            column: 17
          },
          end: {
            line: 130,
            column: 18
          }
        },
        loc: {
          start: {
            line: 130,
            column: 27
          },
          end: {
            line: 142,
            column: 9
          }
        },
        line: 130
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 146,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        },
        loc: {
          start: {
            line: 146,
            column: 28
          },
          end: {
            line: 148,
            column: 5
          }
        },
        line: 146
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 150,
            column: 4
          },
          end: {
            line: 150,
            column: 5
          }
        },
        loc: {
          start: {
            line: 150,
            column: 29
          },
          end: {
            line: 161,
            column: 5
          }
        },
        line: 150
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 10,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 10,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 9
      },
      "1": {
        loc: {
          start: {
            line: 9,
            column: 14
          },
          end: {
            line: 9,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 9,
            column: 51
          },
          end: {
            line: 9,
            column: 57
          }
        }, {
          start: {
            line: 9,
            column: 60
          },
          end: {
            line: 9,
            column: 72
          }
        }],
        line: 9
      },
      "2": {
        loc: {
          start: {
            line: 9,
            column: 14
          },
          end: {
            line: 9,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 9,
            column: 14
          },
          end: {
            line: 9,
            column: 28
          }
        }, {
          start: {
            line: 9,
            column: 32
          },
          end: {
            line: 9,
            column: 48
          }
        }],
        line: 9
      },
      "3": {
        loc: {
          start: {
            line: 14,
            column: 25
          },
          end: {
            line: 14,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 25
          },
          end: {
            line: 14,
            column: 41
          }
        }, {
          start: {
            line: 14,
            column: 45
          },
          end: {
            line: 14,
            column: 47
          }
        }],
        line: 14
      },
      "4": {
        loc: {
          start: {
            line: 15,
            column: 24
          },
          end: {
            line: 15,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 24
          },
          end: {
            line: 15,
            column: 39
          }
        }, {
          start: {
            line: 15,
            column: 43
          },
          end: {
            line: 15,
            column: 45
          }
        }],
        line: 15
      },
      "5": {
        loc: {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 22,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 22,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "6": {
        loc: {
          start: {
            line: 21,
            column: 14
          },
          end: {
            line: 21,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 21,
            column: 51
          },
          end: {
            line: 21,
            column: 57
          }
        }, {
          start: {
            line: 21,
            column: 60
          },
          end: {
            line: 21,
            column: 72
          }
        }],
        line: 21
      },
      "7": {
        loc: {
          start: {
            line: 21,
            column: 14
          },
          end: {
            line: 21,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 14
          },
          end: {
            line: 21,
            column: 28
          }
        }, {
          start: {
            line: 21,
            column: 32
          },
          end: {
            line: 21,
            column: 48
          }
        }],
        line: 21
      },
      "8": {
        loc: {
          start: {
            line: 26,
            column: 25
          },
          end: {
            line: 26,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 25
          },
          end: {
            line: 26,
            column: 50
          }
        }, {
          start: {
            line: 26,
            column: 54
          },
          end: {
            line: 26,
            column: 56
          }
        }],
        line: 26
      },
      "9": {
        loc: {
          start: {
            line: 35,
            column: 27
          },
          end: {
            line: 35,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 27
          },
          end: {
            line: 35,
            column: 32
          }
        }, {
          start: {
            line: 35,
            column: 36
          },
          end: {
            line: 35,
            column: 50
          }
        }],
        line: 35
      },
      "10": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "11": {
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 36,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 36,
            column: 59
          },
          end: {
            line: 36,
            column: 65
          }
        }, {
          start: {
            line: 36,
            column: 68
          },
          end: {
            line: 36,
            column: 85
          }
        }],
        line: 36
      },
      "12": {
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 36,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 36,
            column: 31
          }
        }, {
          start: {
            line: 36,
            column: 35
          },
          end: {
            line: 36,
            column: 56
          }
        }],
        line: 36
      },
      "13": {
        loc: {
          start: {
            line: 44,
            column: 25
          },
          end: {
            line: 44,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 25
          },
          end: {
            line: 44,
            column: 34
          }
        }, {
          start: {
            line: 44,
            column: 38
          },
          end: {
            line: 44,
            column: 42
          }
        }],
        line: 44
      },
      "14": {
        loc: {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "15": {
        loc: {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 49,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 48,
            column: 53
          }
        }, {
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 49,
            column: 49
          }
        }],
        line: 48
      },
      "16": {
        loc: {
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        }, {
          start: {
            line: 70,
            column: 17
          },
          end: {
            line: 79,
            column: 13
          }
        }],
        line: 61
      },
      "17": {
        loc: {
          start: {
            line: 63,
            column: 29
          },
          end: {
            line: 63,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 63,
            column: 61
          },
          end: {
            line: 63,
            column: 82
          }
        }, {
          start: {
            line: 63,
            column: 85
          },
          end: {
            line: 63,
            column: 94
          }
        }],
        line: 63
      },
      "18": {
        loc: {
          start: {
            line: 64,
            column: 23
          },
          end: {
            line: 64,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 23
          },
          end: {
            line: 64,
            column: 38
          }
        }, {
          start: {
            line: 64,
            column: 42
          },
          end: {
            line: 64,
            column: 61
          }
        }, {
          start: {
            line: 64,
            column: 65
          },
          end: {
            line: 64,
            column: 67
          }
        }],
        line: 64
      },
      "19": {
        loc: {
          start: {
            line: 66,
            column: 27
          },
          end: {
            line: 66,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 66,
            column: 27
          },
          end: {
            line: 66,
            column: 50
          }
        }, {
          start: {
            line: 66,
            column: 54
          },
          end: {
            line: 66,
            column: 55
          }
        }],
        line: 66
      },
      "20": {
        loc: {
          start: {
            line: 67,
            column: 28
          },
          end: {
            line: 67,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 28
          },
          end: {
            line: 67,
            column: 55
          }
        }, {
          start: {
            line: 67,
            column: 59
          },
          end: {
            line: 67,
            column: 60
          }
        }],
        line: 67
      },
      "21": {
        loc: {
          start: {
            line: 70,
            column: 17
          },
          end: {
            line: 79,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 17
          },
          end: {
            line: 79,
            column: 13
          }
        }, {
          start: {
            line: 75,
            column: 17
          },
          end: {
            line: 79,
            column: 13
          }
        }],
        line: 70
      },
      "22": {
        loc: {
          start: {
            line: 75,
            column: 17
          },
          end: {
            line: 79,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 17
          },
          end: {
            line: 79,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "23": {
        loc: {
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 141,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 141,
            column: 13
          }
        }, {
          start: {
            line: 137,
            column: 17
          },
          end: {
            line: 141,
            column: 13
          }
        }],
        line: 131
      },
      "24": {
        loc: {
          start: {
            line: 139,
            column: 43
          },
          end: {
            line: 139,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 139,
            column: 43
          },
          end: {
            line: 139,
            column: 58
          }
        }, {
          start: {
            line: 139,
            column: 62
          },
          end: {
            line: 139,
            column: 64
          }
        }],
        line: 139
      },
      "25": {
        loc: {
          start: {
            line: 140,
            column: 53
          },
          end: {
            line: 140,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 140,
            column: 53
          },
          end: {
            line: 140,
            column: 69
          }
        }, {
          start: {
            line: 140,
            column: 73
          },
          end: {
            line: 140,
            column: 89
          }
        }],
        line: 140
      },
      "26": {
        loc: {
          start: {
            line: 147,
            column: 15
          },
          end: {
            line: 147,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 147,
            column: 15
          },
          end: {
            line: 147,
            column: 19
          }
        }, {
          start: {
            line: 147,
            column: 23
          },
          end: {
            line: 147,
            column: 47
          }
        }, {
          start: {
            line: 147,
            column: 51
          },
          end: {
            line: 147,
            column: 69
          }
        }],
        line: 147
      },
      "27": {
        loc: {
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 160,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 152,
            column: 12
          },
          end: {
            line: 152,
            column: 25
          }
        }, {
          start: {
            line: 153,
            column: 12
          },
          end: {
            line: 153,
            column: 24
          }
        }, {
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 155,
            column: 29
          }
        }, {
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 157,
            column: 29
          }
        }, {
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 159,
            column: 29
          }
        }],
        line: 151
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0, 0],
      "27": [0, 0, 0, 0, 0]
    },
    inputSourceMap: {
      file: "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/adapters/meta-adapter.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/adapters/meta-adapter.ts"],
      sourcesContent: ["import { ProviderResponse, RouteDecision, ToolSpec } from \"../types\";\nimport { BaseAdapter } from \"./tool-call-adapter\";\n\nexport class MetaAdapter extends BaseAdapter {\n  mapTools(tools?: ToolSpec[]) {\n    // Meta/Llama models have limited tool support\n    // For now, we'll format tools as structured prompts\n    if (!tools?.length) return undefined;\n\n    // Convert tools to structured prompt format for Llama\n    return tools.map((tool) => ({\n      name: tool.name,\n      description: tool.description || \"\",\n      parameters: tool.parameters || {},\n      format: \"structured_prompt\", // Custom format for Llama\n    }));\n  }\n\n  // Enhanced mapping from unified schema to Meta format\n  override fromUnifiedSchema(tools?: UnifiedToolSpec[]): any | undefined {\n    if (!tools?.length) return undefined;\n\n    // Convert unified tools to Meta/Llama format\n    return tools.map((tool) => ({\n      name: tool.function.name,\n      description: tool.function.description || \"\",\n      parameters: tool.function.parameters.properties,\n      format: \"structured_prompt\",\n    }));\n  }\n\n  buildRequest(input: {\n    prompt: string;\n    decision: RouteDecision;\n    streaming?: boolean;\n    maxTokens?: number;\n    tools?: ToolSpec[] | UnifiedToolSpec[];\n  }) {\n    const { prompt, decision, maxTokens, tools } = input;\n\n    // Handle tools by embedding them in the prompt (Llama doesn't support structured tools)\n    let enhancedPrompt = prompt;\n    const toolsToUse = tools || decision.tools;\n    if (toolsToUse?.length) {\n      const toolDescriptions = this.formatToolsForPrompt(toolsToUse);\n      enhancedPrompt = `${prompt}\\n\\nAvailable tools:\\n${toolDescriptions}`;\n    }\n\n    // Format for Llama models (via Bedrock or direct endpoint)\n    const request: any = {\n      prompt: this.formatPromptForLlama(enhancedPrompt),\n      temperature: decision.temperature,\n      max_gen_len: maxTokens || 1024,\n      top_p: 0.9,\n    };\n\n    // Add system prompt for different domains\n    if (\n      prompt.toLowerCase().includes(\"culinary\") ||\n      prompt.toLowerCase().includes(\"food\")\n    ) {\n      request.system_prompt =\n        \"You are a knowledgeable culinary expert. Provide detailed, practical cooking advice and recipes.\";\n    }\n\n    return request;\n  }\n\n  parseResponse(resp: any): ProviderResponse {\n    try {\n      this.validateResponse(resp, \"Meta\");\n\n      // Handle different response formats (Bedrock vs direct)\n      let text = \"\";\n      let tokensUsed = { input: 0, output: 0 };\n\n      if (resp.body) {\n        // Bedrock format\n        const body =\n          typeof resp.body === \"string\" ? JSON.parse(resp.body) : resp.body;\n        text = body.generation || body.generated_text || \"\";\n        tokensUsed = {\n          input: body.prompt_token_count || 0,\n          output: body.generation_token_count || 0,\n        };\n      } else if (resp.generated_text) {\n        // Direct endpoint format\n        text = resp.generated_text;\n        tokensUsed = this.estimateTokens(text);\n      } else if (typeof resp === \"string\") {\n        // Simple string response\n        text = resp;\n        tokensUsed = this.estimateTokens(text);\n      }\n\n      return {\n        text,\n        toolCalls: [], // Llama doesn't support structured tool calls yet\n        raw: resp,\n        tokensUsed,\n      };\n    } catch (error) {\n      this.handleError(error, \"Meta\");\n    }\n  }\n\n  private formatPromptForLlama(prompt: string): string {\n    // Format prompt for Llama models with proper instruction format\n    return `<s>[INST] ${prompt} [/INST]`;\n  }\n\n  getProviderConfig() {\n    return {\n      maxContextTokens: 32768, // Llama 3 70B context window\n      supportsStreaming: false, // Limited streaming support\n      supportsTools: false, // No structured tool calling\n      supportsJsonMode: false, // Limited JSON mode support\n      supportsVision: false, // No vision support\n      rateLimitRpm: 100, // Conservative rate limit\n      fallbackProvider: \"bedrock\", // Fallback to Bedrock if Meta fails\n    };\n  }\n\n  // Meta-specific token estimation\n  override estimateTokens(text: string): { input: number; output: number } {\n    // Llama tokenizer typically uses ~4.2 characters per token\n    const tokens = Math.ceil(text.length / 4.2);\n    return { input: tokens, output: 0 };\n  }\n\n  // Implementation of abstract methods\n  protected extractToolCallsFromResponse(resp: any): Array<{\n    id?: string;\n    name: string;\n    arguments: any;\n    confidence?: number;\n  }> {\n    // Meta/Llama doesn't support structured tool calls\n    // We could implement text parsing for tool-like responses here\n    // For now, return empty array\n    return [];\n  }\n\n  protected getProviderName(): string {\n    return \"meta\";\n  }\n\n  // Enhanced tool feature support for Meta (limited)\n  override supportsToolFeature(\n    feature: \"parallel_calls\" | \"streaming\" | \"json_schema\" | \"complex_types\"\n  ): boolean {\n    // Meta/Llama has very limited tool support\n    return false;\n  }\n\n  // Helper method to format tools for prompt inclusion\n  private formatToolsForPrompt(tools: (ToolSpec | UnifiedToolSpec)[]): string {\n    return tools\n      .map((tool) => {\n        if (\"function\" in tool) {\n          // UnifiedToolSpec\n          const func = tool.function;\n          const params = Object.keys(func.parameters.properties).join(\", \");\n          return `- ${func.name}(${params}): ${func.description}`;\n        } else {\n          // ToolSpec\n          const params = Object.keys(tool.parameters || {}).join(\", \");\n          return `- ${tool.name}(${params}): ${\n            tool.description || \"No description\"\n          }`;\n        }\n      })\n      .join(\"\\n\");\n  }\n\n  // Helper method to check if tools are in unified format\n  private isUnifiedToolSpec(tool: any): tool is UnifiedToolSpec {\n    return tool && typeof tool === \"object\" && \"function\" in tool;\n  }\n\n  // Check if model supports the requested features (legacy method for compatibility)\n  supportsFeature(feature: \"tools\" | \"streaming\" | \"json\" | \"vision\"): boolean {\n    switch (feature) {\n      case \"tools\":\n      case \"json\":\n      case \"vision\":\n        return false;\n      case \"streaming\":\n        return false; // Limited support\n      default:\n        return false;\n    }\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "39b8c0f228d8eaff62dd82c368ed05a56c547351"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1wxhfghwg1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1wxhfghwg1();
cov_1wxhfghwg1().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1wxhfghwg1().s[1]++;
exports.MetaAdapter = void 0;
const tool_call_adapter_1 =
/* istanbul ignore next */
(cov_1wxhfghwg1().s[2]++, require("./tool-call-adapter"));
class MetaAdapter extends
/* istanbul ignore next */
(tool_call_adapter_1.BaseAdapter) {
  mapTools(tools) {
    /* istanbul ignore next */
    cov_1wxhfghwg1().f[0]++;
    cov_1wxhfghwg1().s[3]++;
    // Meta/Llama models have limited tool support
    // For now, we'll format tools as structured prompts
    if (!(
    /* istanbul ignore next */
    (cov_1wxhfghwg1().b[2][0]++, tools === null) ||
    /* istanbul ignore next */
    (cov_1wxhfghwg1().b[2][1]++, tools === void 0) ?
    /* istanbul ignore next */
    (cov_1wxhfghwg1().b[1][0]++, void 0) :
    /* istanbul ignore next */
    (cov_1wxhfghwg1().b[1][1]++, tools.length))) {
      /* istanbul ignore next */
      cov_1wxhfghwg1().b[0][0]++;
      cov_1wxhfghwg1().s[4]++;
      return undefined;
    } else
    /* istanbul ignore next */
    {
      cov_1wxhfghwg1().b[0][1]++;
    }
    // Convert tools to structured prompt format for Llama
    cov_1wxhfghwg1().s[5]++;
    return tools.map(tool => {
      /* istanbul ignore next */
      cov_1wxhfghwg1().f[1]++;
      cov_1wxhfghwg1().s[6]++;
      return {
        name: tool.name,
        description:
        /* istanbul ignore next */
        (cov_1wxhfghwg1().b[3][0]++, tool.description) ||
        /* istanbul ignore next */
        (cov_1wxhfghwg1().b[3][1]++, ""),
        parameters:
        /* istanbul ignore next */
        (cov_1wxhfghwg1().b[4][0]++, tool.parameters) ||
        /* istanbul ignore next */
        (cov_1wxhfghwg1().b[4][1]++, {}),
        format: "structured_prompt" // Custom format for Llama
      };
    });
  }
  // Enhanced mapping from unified schema to Meta format
  fromUnifiedSchema(tools) {
    /* istanbul ignore next */
    cov_1wxhfghwg1().f[2]++;
    cov_1wxhfghwg1().s[7]++;
    if (!(
    /* istanbul ignore next */
    (cov_1wxhfghwg1().b[7][0]++, tools === null) ||
    /* istanbul ignore next */
    (cov_1wxhfghwg1().b[7][1]++, tools === void 0) ?
    /* istanbul ignore next */
    (cov_1wxhfghwg1().b[6][0]++, void 0) :
    /* istanbul ignore next */
    (cov_1wxhfghwg1().b[6][1]++, tools.length))) {
      /* istanbul ignore next */
      cov_1wxhfghwg1().b[5][0]++;
      cov_1wxhfghwg1().s[8]++;
      return undefined;
    } else
    /* istanbul ignore next */
    {
      cov_1wxhfghwg1().b[5][1]++;
    }
    // Convert unified tools to Meta/Llama format
    cov_1wxhfghwg1().s[9]++;
    return tools.map(tool => {
      /* istanbul ignore next */
      cov_1wxhfghwg1().f[3]++;
      cov_1wxhfghwg1().s[10]++;
      return {
        name: tool.function.name,
        description:
        /* istanbul ignore next */
        (cov_1wxhfghwg1().b[8][0]++, tool.function.description) ||
        /* istanbul ignore next */
        (cov_1wxhfghwg1().b[8][1]++, ""),
        parameters: tool.function.parameters.properties,
        format: "structured_prompt"
      };
    });
  }
  buildRequest(input) {
    /* istanbul ignore next */
    cov_1wxhfghwg1().f[4]++;
    const {
      prompt,
      decision,
      maxTokens,
      tools
    } =
    /* istanbul ignore next */
    (cov_1wxhfghwg1().s[11]++, input);
    // Handle tools by embedding them in the prompt (Llama doesn't support structured tools)
    let enhancedPrompt =
    /* istanbul ignore next */
    (cov_1wxhfghwg1().s[12]++, prompt);
    const toolsToUse =
    /* istanbul ignore next */
    (cov_1wxhfghwg1().s[13]++,
    /* istanbul ignore next */
    (cov_1wxhfghwg1().b[9][0]++, tools) ||
    /* istanbul ignore next */
    (cov_1wxhfghwg1().b[9][1]++, decision.tools));
    /* istanbul ignore next */
    cov_1wxhfghwg1().s[14]++;
    if (
    /* istanbul ignore next */
    (cov_1wxhfghwg1().b[12][0]++, toolsToUse === null) ||
    /* istanbul ignore next */
    (cov_1wxhfghwg1().b[12][1]++, toolsToUse === void 0) ?
    /* istanbul ignore next */
    (cov_1wxhfghwg1().b[11][0]++, void 0) :
    /* istanbul ignore next */
    (cov_1wxhfghwg1().b[11][1]++, toolsToUse.length)) {
      /* istanbul ignore next */
      cov_1wxhfghwg1().b[10][0]++;
      const toolDescriptions =
      /* istanbul ignore next */
      (cov_1wxhfghwg1().s[15]++, this.formatToolsForPrompt(toolsToUse));
      /* istanbul ignore next */
      cov_1wxhfghwg1().s[16]++;
      enhancedPrompt = `${prompt}\n\nAvailable tools:\n${toolDescriptions}`;
    } else
    /* istanbul ignore next */
    {
      cov_1wxhfghwg1().b[10][1]++;
    }
    // Format for Llama models (via Bedrock or direct endpoint)
    const request =
    /* istanbul ignore next */
    (cov_1wxhfghwg1().s[17]++, {
      prompt: this.formatPromptForLlama(enhancedPrompt),
      temperature: decision.temperature,
      max_gen_len:
      /* istanbul ignore next */
      (cov_1wxhfghwg1().b[13][0]++, maxTokens) ||
      /* istanbul ignore next */
      (cov_1wxhfghwg1().b[13][1]++, 1024),
      top_p: 0.9
    });
    // Add system prompt for different domains
    /* istanbul ignore next */
    cov_1wxhfghwg1().s[18]++;
    if (
    /* istanbul ignore next */
    (cov_1wxhfghwg1().b[15][0]++, prompt.toLowerCase().includes("culinary")) ||
    /* istanbul ignore next */
    (cov_1wxhfghwg1().b[15][1]++, prompt.toLowerCase().includes("food"))) {
      /* istanbul ignore next */
      cov_1wxhfghwg1().b[14][0]++;
      cov_1wxhfghwg1().s[19]++;
      request.system_prompt = "You are a knowledgeable culinary expert. Provide detailed, practical cooking advice and recipes.";
    } else
    /* istanbul ignore next */
    {
      cov_1wxhfghwg1().b[14][1]++;
    }
    cov_1wxhfghwg1().s[20]++;
    return request;
  }
  parseResponse(resp) {
    /* istanbul ignore next */
    cov_1wxhfghwg1().f[5]++;
    cov_1wxhfghwg1().s[21]++;
    try {
      /* istanbul ignore next */
      cov_1wxhfghwg1().s[22]++;
      this.validateResponse(resp, "Meta");
      // Handle different response formats (Bedrock vs direct)
      let text =
      /* istanbul ignore next */
      (cov_1wxhfghwg1().s[23]++, "");
      let tokensUsed =
      /* istanbul ignore next */
      (cov_1wxhfghwg1().s[24]++, {
        input: 0,
        output: 0
      });
      /* istanbul ignore next */
      cov_1wxhfghwg1().s[25]++;
      if (resp.body) {
        /* istanbul ignore next */
        cov_1wxhfghwg1().b[16][0]++;
        // Bedrock format
        const body =
        /* istanbul ignore next */
        (cov_1wxhfghwg1().s[26]++, typeof resp.body === "string" ?
        /* istanbul ignore next */
        (cov_1wxhfghwg1().b[17][0]++, JSON.parse(resp.body)) :
        /* istanbul ignore next */
        (cov_1wxhfghwg1().b[17][1]++, resp.body));
        /* istanbul ignore next */
        cov_1wxhfghwg1().s[27]++;
        text =
        /* istanbul ignore next */
        (cov_1wxhfghwg1().b[18][0]++, body.generation) ||
        /* istanbul ignore next */
        (cov_1wxhfghwg1().b[18][1]++, body.generated_text) ||
        /* istanbul ignore next */
        (cov_1wxhfghwg1().b[18][2]++, "");
        /* istanbul ignore next */
        cov_1wxhfghwg1().s[28]++;
        tokensUsed = {
          input:
          /* istanbul ignore next */
          (cov_1wxhfghwg1().b[19][0]++, body.prompt_token_count) ||
          /* istanbul ignore next */
          (cov_1wxhfghwg1().b[19][1]++, 0),
          output:
          /* istanbul ignore next */
          (cov_1wxhfghwg1().b[20][0]++, body.generation_token_count) ||
          /* istanbul ignore next */
          (cov_1wxhfghwg1().b[20][1]++, 0)
        };
      } else {
        /* istanbul ignore next */
        cov_1wxhfghwg1().b[16][1]++;
        cov_1wxhfghwg1().s[29]++;
        if (resp.generated_text) {
          /* istanbul ignore next */
          cov_1wxhfghwg1().b[21][0]++;
          cov_1wxhfghwg1().s[30]++;
          // Direct endpoint format
          text = resp.generated_text;
          /* istanbul ignore next */
          cov_1wxhfghwg1().s[31]++;
          tokensUsed = this.estimateTokens(text);
        } else {
          /* istanbul ignore next */
          cov_1wxhfghwg1().b[21][1]++;
          cov_1wxhfghwg1().s[32]++;
          if (typeof resp === "string") {
            /* istanbul ignore next */
            cov_1wxhfghwg1().b[22][0]++;
            cov_1wxhfghwg1().s[33]++;
            // Simple string response
            text = resp;
            /* istanbul ignore next */
            cov_1wxhfghwg1().s[34]++;
            tokensUsed = this.estimateTokens(text);
          } else
          /* istanbul ignore next */
          {
            cov_1wxhfghwg1().b[22][1]++;
          }
        }
      }
      /* istanbul ignore next */
      cov_1wxhfghwg1().s[35]++;
      return {
        text,
        toolCalls: [],
        // Llama doesn't support structured tool calls yet
        raw: resp,
        tokensUsed
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1wxhfghwg1().s[36]++;
      this.handleError(error, "Meta");
    }
  }
  formatPromptForLlama(prompt) {
    /* istanbul ignore next */
    cov_1wxhfghwg1().f[6]++;
    cov_1wxhfghwg1().s[37]++;
    // Format prompt for Llama models with proper instruction format
    return `<s>[INST] ${prompt} [/INST]`;
  }
  getProviderConfig() {
    /* istanbul ignore next */
    cov_1wxhfghwg1().f[7]++;
    cov_1wxhfghwg1().s[38]++;
    return {
      maxContextTokens: 32768,
      // Llama 3 70B context window
      supportsStreaming: false,
      // Limited streaming support
      supportsTools: false,
      // No structured tool calling
      supportsJsonMode: false,
      // Limited JSON mode support
      supportsVision: false,
      // No vision support
      rateLimitRpm: 100,
      // Conservative rate limit
      fallbackProvider: "bedrock" // Fallback to Bedrock if Meta fails
    };
  }
  // Meta-specific token estimation
  estimateTokens(text) {
    /* istanbul ignore next */
    cov_1wxhfghwg1().f[8]++;
    // Llama tokenizer typically uses ~4.2 characters per token
    const tokens =
    /* istanbul ignore next */
    (cov_1wxhfghwg1().s[39]++, Math.ceil(text.length / 4.2));
    /* istanbul ignore next */
    cov_1wxhfghwg1().s[40]++;
    return {
      input: tokens,
      output: 0
    };
  }
  // Implementation of abstract methods
  extractToolCallsFromResponse(resp) {
    /* istanbul ignore next */
    cov_1wxhfghwg1().f[9]++;
    cov_1wxhfghwg1().s[41]++;
    // Meta/Llama doesn't support structured tool calls
    // We could implement text parsing for tool-like responses here
    // For now, return empty array
    return [];
  }
  getProviderName() {
    /* istanbul ignore next */
    cov_1wxhfghwg1().f[10]++;
    cov_1wxhfghwg1().s[42]++;
    return "meta";
  }
  // Enhanced tool feature support for Meta (limited)
  supportsToolFeature(feature) {
    /* istanbul ignore next */
    cov_1wxhfghwg1().f[11]++;
    cov_1wxhfghwg1().s[43]++;
    // Meta/Llama has very limited tool support
    return false;
  }
  // Helper method to format tools for prompt inclusion
  formatToolsForPrompt(tools) {
    /* istanbul ignore next */
    cov_1wxhfghwg1().f[12]++;
    cov_1wxhfghwg1().s[44]++;
    return tools.map(tool => {
      /* istanbul ignore next */
      cov_1wxhfghwg1().f[13]++;
      cov_1wxhfghwg1().s[45]++;
      if ("function" in tool) {
        /* istanbul ignore next */
        cov_1wxhfghwg1().b[23][0]++;
        // UnifiedToolSpec
        const func =
        /* istanbul ignore next */
        (cov_1wxhfghwg1().s[46]++, tool.function);
        const params =
        /* istanbul ignore next */
        (cov_1wxhfghwg1().s[47]++, Object.keys(func.parameters.properties).join(", "));
        /* istanbul ignore next */
        cov_1wxhfghwg1().s[48]++;
        return `- ${func.name}(${params}): ${func.description}`;
      } else {
        /* istanbul ignore next */
        cov_1wxhfghwg1().b[23][1]++;
        // ToolSpec
        const params =
        /* istanbul ignore next */
        (cov_1wxhfghwg1().s[49]++, Object.keys(
        /* istanbul ignore next */
        (cov_1wxhfghwg1().b[24][0]++, tool.parameters) ||
        /* istanbul ignore next */
        (cov_1wxhfghwg1().b[24][1]++, {})).join(", "));
        /* istanbul ignore next */
        cov_1wxhfghwg1().s[50]++;
        return `- ${tool.name}(${params}): ${
        /* istanbul ignore next */
        (cov_1wxhfghwg1().b[25][0]++, tool.description) ||
        /* istanbul ignore next */
        (cov_1wxhfghwg1().b[25][1]++, "No description")}`;
      }
    }).join("\n");
  }
  // Helper method to check if tools are in unified format
  isUnifiedToolSpec(tool) {
    /* istanbul ignore next */
    cov_1wxhfghwg1().f[14]++;
    cov_1wxhfghwg1().s[51]++;
    return /* istanbul ignore next */(cov_1wxhfghwg1().b[26][0]++, tool) &&
    /* istanbul ignore next */
    (cov_1wxhfghwg1().b[26][1]++, typeof tool === "object") &&
    /* istanbul ignore next */
    (cov_1wxhfghwg1().b[26][2]++, "function" in tool);
  }
  // Check if model supports the requested features (legacy method for compatibility)
  supportsFeature(feature) {
    /* istanbul ignore next */
    cov_1wxhfghwg1().f[15]++;
    cov_1wxhfghwg1().s[52]++;
    switch (feature) {
      case "tools":
        /* istanbul ignore next */
        cov_1wxhfghwg1().b[27][0]++;
      case "json":
        /* istanbul ignore next */
        cov_1wxhfghwg1().b[27][1]++;
      case "vision":
        /* istanbul ignore next */
        cov_1wxhfghwg1().b[27][2]++;
        cov_1wxhfghwg1().s[53]++;
        return false;
      case "streaming":
        /* istanbul ignore next */
        cov_1wxhfghwg1().b[27][3]++;
        cov_1wxhfghwg1().s[54]++;
        return false;
      // Limited support
      default:
        /* istanbul ignore next */
        cov_1wxhfghwg1().b[27][4]++;
        cov_1wxhfghwg1().s[55]++;
        return false;
    }
  }
}
/* istanbul ignore next */
cov_1wxhfghwg1().s[56]++;
exports.MetaAdapter = MetaAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
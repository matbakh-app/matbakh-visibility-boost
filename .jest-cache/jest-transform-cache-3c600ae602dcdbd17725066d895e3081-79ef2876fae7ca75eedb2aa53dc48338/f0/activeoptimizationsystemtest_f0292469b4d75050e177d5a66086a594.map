{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/__tests__/active-optimization-system.test.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/__tests__/active-optimization-system.test.ts"],"sourcesContent":["/**\n * Tests for Active Optimization System\n */\n\nimport {\n  ActiveOptimizationSystem,\n  getOptimizationSystem,\n  initializeOptimizationSystem,\n  shutdownOptimizationSystem,\n} from \"../active-optimization-system\";\nimport { BanditOptimizer } from \"../bandit-optimizer\";\nimport { EvidentlyExperimentManager } from \"../evidently-experiments\";\n\n// Mock dependencies\njest.mock(\"../evidently-experiments\");\njest.mock(\"../bandit-optimizer\");\n\nconst mockExperimentManager = {\n  initializeProject: jest.fn(),\n  createAIExperiment: jest.fn(),\n  startExperiment: jest.fn(),\n  stopExperiment: jest.fn(),\n  listActiveExperiments: jest.fn(),\n  analyzeExperimentResults: jest.fn(),\n  getOptimalProvider: jest.fn(),\n  recordExperimentOutcome: jest.fn(),\n  healthCheck: jest.fn(),\n};\n\nconst mockBanditOptimizer = {\n  getOptimalArm: jest.fn(),\n  recordOutcome: jest.fn(),\n  getOptimizationRecommendations: jest.fn(),\n  getBanditStats: jest.fn(),\n  analyzeContextualPerformance: jest.fn(),\n  healthCheck: jest.fn(),\n  getConfig: jest.fn(),\n  updateConfig: jest.fn(),\n  exportState: jest.fn(),\n};\n\nconst MockEvidentlyExperimentManager =\n  EvidentlyExperimentManager as jest.MockedClass<\n    typeof EvidentlyExperimentManager\n  >;\nconst MockBanditOptimizer = BanditOptimizer as jest.MockedClass<\n  typeof BanditOptimizer\n>;\n\ndescribe(\"ActiveOptimizationSystem\", () => {\n  let system: ActiveOptimizationSystem;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.useFakeTimers();\n\n    MockEvidentlyExperimentManager.mockImplementation(\n      () => mockExperimentManager as any\n    );\n    MockBanditOptimizer.mockImplementation(() => mockBanditOptimizer as any);\n\n    // Setup default mock returns\n    mockExperimentManager.initializeProject.mockResolvedValue(undefined);\n    mockExperimentManager.createAIExperiment.mockResolvedValue(undefined);\n    mockExperimentManager.startExperiment.mockResolvedValue(undefined);\n    mockExperimentManager.listActiveExperiments.mockResolvedValue([]);\n    mockExperimentManager.healthCheck.mockResolvedValue({\n      connected: true,\n      projectExists: true,\n      activeExperiments: 0,\n      banditStats: {},\n    });\n\n    mockBanditOptimizer.getOptimalArm.mockResolvedValue({\n      recommendedArm: \"bedrock\",\n      confidence: 0.8,\n      expectedReward: 0.7,\n      explorationNeeded: false,\n      reasoning: \"Test selection\",\n    });\n\n    mockBanditOptimizer.recordOutcome.mockResolvedValue(undefined);\n    mockBanditOptimizer.getOptimizationRecommendations.mockReturnValue([]);\n    mockBanditOptimizer.getBanditStats.mockReturnValue({\n      bedrock: {\n        wins: 10,\n        trials: 15,\n        costEuro: 0.75,\n        totalLatencyMs: 7500,\n        winRate: 0.67,\n        avgLatency: 500,\n        avgCost: 0.05,\n      },\n      google: {\n        wins: 8,\n        trials: 12,\n        costEuro: 0.6,\n        totalLatencyMs: 6000,\n        winRate: 0.67,\n        avgLatency: 500,\n        avgCost: 0.05,\n      },\n      meta: {\n        wins: 5,\n        trials: 10,\n        costEuro: 0.5,\n        totalLatencyMs: 5000,\n        winRate: 0.5,\n        avgLatency: 500,\n        avgCost: 0.05,\n      },\n    });\n    mockBanditOptimizer.analyzeContextualPerformance.mockReturnValue([]);\n    mockBanditOptimizer.healthCheck.mockReturnValue({\n      status: \"healthy\",\n      totalTrials: 37,\n      activeContexts: 3,\n      autoOptimizationEnabled: true,\n      recommendations: 0,\n    });\n    mockBanditOptimizer.getConfig.mockReturnValue({\n      explorationRate: 0.15,\n      confidenceLevel: 0.95,\n      minTrialsForConfidence: 30,\n      autoOptimizationEnabled: true,\n      optimizationInterval: 60,\n    });\n    mockBanditOptimizer.exportState.mockReturnValue({\n      banditStats: {},\n      config: {},\n      optimizationHistory: [],\n    });\n\n    system = new ActiveOptimizationSystem({\n      autoExperimentEnabled: true,\n      experimentDuration: 7, // 1 week for testing\n      minTrafficForExperiment: 50,\n    });\n  });\n\n  afterEach(() => {\n    jest.useRealTimers();\n  });\n\n  describe(\"System Lifecycle\", () => {\n    it(\"should start successfully\", async () => {\n      await system.start();\n\n      expect(mockExperimentManager.initializeProject).toHaveBeenCalled();\n      expect(mockExperimentManager.createAIExperiment).toHaveBeenCalledTimes(2); // Two initial experiments\n      expect(mockExperimentManager.startExperiment).toHaveBeenCalledTimes(2);\n    });\n\n    it(\"should not start twice\", async () => {\n      await system.start();\n\n      // Try to start again\n      await system.start();\n\n      // Should only initialize once\n      expect(mockExperimentManager.initializeProject).toHaveBeenCalledTimes(1);\n    });\n\n    it(\"should stop successfully\", async () => {\n      mockExperimentManager.listActiveExperiments.mockResolvedValue([\n        \"test-experiment\",\n      ]);\n\n      await system.start();\n      await system.stop();\n\n      expect(mockExperimentManager.stopExperiment).toHaveBeenCalledWith(\n        \"test-experiment\",\n        \"System shutdown\"\n      );\n    });\n\n    it(\"should handle start errors gracefully\", async () => {\n      mockExperimentManager.initializeProject.mockRejectedValue(\n        new Error(\"AWS error\")\n      );\n\n      await expect(system.start()).rejects.toThrow(\"AWS error\");\n    });\n  });\n\n  describe(\"Provider Selection\", () => {\n    it(\"should get optimal provider successfully\", async () => {\n      const result = await system.getOptimalProvider({\n        userId: \"test-user\",\n        domain: \"legal\",\n      });\n\n      expect(result.provider).toBeDefined();\n      expect(result.source).toBe(\"traffic_allocation\"); // Now uses traffic allocation by default\n      expect(result.confidence).toBeGreaterThan(0);\n      expect(result.allocationProbability).toBeDefined();\n    });\n\n    it(\"should fall back to default on error\", async () => {\n      // Disable traffic allocation to test error fallback\n      system.updateConfig({ autoTrafficAllocationEnabled: false });\n\n      mockBanditOptimizer.getOptimalArm.mockRejectedValue(\n        new Error(\"Bandit error\")\n      );\n\n      const result = await system.getOptimalProvider({\n        userId: \"test-user\",\n      });\n\n      expect(result).toEqual({\n        provider: \"bedrock\",\n        source: \"default\",\n        confidence: 0.5,\n      });\n    });\n\n    it(\"should identify experiment source correctly\", async () => {\n      // Mock experiment manager to return experiment result\n      mockExperimentManager.getOptimalProvider.mockResolvedValue({\n        provider: \"bedrock\",\n        source: \"experiment\",\n        confidence: 0.9,\n        experimentName: \"test-experiment\",\n      });\n\n      const result = await system.getOptimalProvider({\n        experimentName: \"test-experiment\",\n        userId: \"test-user\",\n      });\n\n      expect(result.source).toBe(\"experiment\");\n      expect(result.experimentName).toBe(\"test-experiment\");\n    });\n\n    it(\"should use traffic allocation when enabled\", async () => {\n      // Mock experiment manager to not return experiment result\n      mockExperimentManager.getOptimalProvider.mockResolvedValue({\n        provider: \"bedrock\",\n        source: \"bandit\", // Not experiment\n        confidence: 0.8,\n      });\n\n      const result = await system.getOptimalProvider({\n        userId: \"test-user\",\n      });\n\n      expect(result.source).toBe(\"traffic_allocation\");\n      expect(result.allocationProbability).toBeDefined();\n      expect(result.allocationProbability).toBeGreaterThan(0);\n      expect(result.allocationProbability).toBeLessThanOrEqual(1);\n    });\n\n    it(\"should return current traffic allocation\", async () => {\n      const allocation = system.getCurrentTrafficAllocation();\n\n      expect(allocation).toMatchObject({\n        bedrock: expect.any(Number),\n        google: expect.any(Number),\n        meta: expect.any(Number),\n      });\n\n      // Should sum to approximately 1\n      const sum = Object.values(allocation).reduce((a, b) => a + b, 0);\n      expect(sum).toBeCloseTo(1, 2);\n    });\n  });\n\n  describe(\"Outcome Recording\", () => {\n    it(\"should record outcome successfully\", async () => {\n      await system.recordOutcome(\n        { userId: \"test-user\", domain: \"legal\" },\n        \"bedrock\",\n        {\n          success: true,\n          latencyMs: 500,\n          costEuro: 0.05,\n          qualityScore: 0.9,\n        }\n      );\n\n      expect(mockBanditOptimizer.recordOutcome).toHaveBeenCalledWith(\n        { userId: \"test-user\", domain: \"legal\" },\n        \"bedrock\",\n        true,\n        500,\n        0.05,\n        0.9\n      );\n    });\n\n    it(\"should handle recording errors gracefully\", async () => {\n      mockBanditOptimizer.recordOutcome.mockRejectedValue(\n        new Error(\"Recording error\")\n      );\n\n      await expect(\n        system.recordOutcome({ userId: \"test-user\" }, \"google\", {\n          success: false,\n          latencyMs: 1000,\n          costEuro: 0.1,\n        })\n      ).resolves.not.toThrow();\n    });\n\n    it(\"should trigger performance alerts for high latency\", async () => {\n      await system.recordOutcome({ userId: \"test-user\" }, \"bedrock\", {\n        success: true,\n        latencyMs: 3000, // Above threshold\n        costEuro: 0.05,\n      });\n\n      const events = system.getEventHistory();\n      const alertEvent = events.find((e) => e.type === \"performance_alert\");\n\n      expect(alertEvent).toBeDefined();\n      expect(\n        alertEvent?.details.alerts.some((alert: string) =>\n          alert.includes(\"High latency\")\n        )\n      ).toBe(true);\n    });\n\n    it(\"should trigger performance alerts for high cost\", async () => {\n      await system.recordOutcome({ userId: \"test-user\" }, \"google\", {\n        success: true,\n        latencyMs: 500,\n        costEuro: 0.15, // Above threshold\n      });\n\n      const events = system.getEventHistory();\n      const alertEvent = events.find((e) => e.type === \"performance_alert\");\n\n      expect(alertEvent).toBeDefined();\n      expect(\n        alertEvent?.details.alerts.some((alert: string) =>\n          alert.includes(\"High cost\")\n        )\n      ).toBe(true);\n    });\n  });\n\n  describe(\"Metrics and Monitoring\", () => {\n    it(\"should return current metrics\", async () => {\n      await system.start();\n\n      const metrics = system.getMetrics();\n\n      expect(metrics).toMatchObject({\n        totalRequests: expect.any(Number),\n        experimentsActive: expect.any(Number),\n        banditPerformance: expect.objectContaining({\n          bestArm: expect.any(String),\n          confidence: expect.any(Number),\n          winRate: expect.any(Number),\n        }),\n        systemHealth: expect.stringMatching(/healthy|warning|error/),\n        lastOptimization: expect.any(Date),\n        lastTrafficAllocation: expect.any(Date),\n        currentTrafficAllocation: expect.objectContaining({\n          bedrock: expect.any(Number),\n          google: expect.any(Number),\n          meta: expect.any(Number),\n        }),\n        recommendations: expect.any(Array),\n      });\n    });\n\n    it(\"should return event history\", async () => {\n      await system.start();\n\n      const history = system.getEventHistory();\n\n      expect(Array.isArray(history)).toBe(true);\n      expect(history.length).toBeGreaterThan(0);\n      expect(history[0]).toMatchObject({\n        timestamp: expect.any(Date),\n        type: expect.any(String),\n        details: expect.any(Object),\n        impact: expect.stringMatching(/low|medium|high/),\n      });\n    });\n\n    it(\"should limit event history size\", async () => {\n      // Add many events\n      for (let i = 0; i < 1100; i++) {\n        await system.recordOutcome({ userId: `user-${i}` }, \"bedrock\", {\n          success: true,\n          latencyMs: 500,\n          costEuro: 0.05,\n        });\n      }\n\n      const history = system.getEventHistory();\n      expect(history.length).toBeLessThanOrEqual(1000);\n    });\n  });\n\n  describe(\"Health Status\", () => {\n    it(\"should return healthy status when all components are working\", async () => {\n      const health = await system.getHealthStatus();\n\n      expect(health).toMatchObject({\n        system: \"warning\", // System is warning because optimization is not running\n        components: {\n          experiments: \"healthy\",\n          bandit: \"healthy\",\n          optimization: \"warning\", // Not running yet\n        },\n        details: expect.any(Object),\n      });\n    });\n\n    it(\"should return error status when experiments fail\", async () => {\n      mockExperimentManager.healthCheck.mockResolvedValue({\n        connected: false,\n        projectExists: false,\n        activeExperiments: 0,\n        banditStats: {},\n      });\n\n      const health = await system.getHealthStatus();\n\n      expect(health.system).toBe(\"error\");\n      expect(health.components.experiments).toBe(\"error\");\n    });\n\n    it(\"should return warning status when bandit has issues\", async () => {\n      mockBanditOptimizer.healthCheck.mockReturnValue({\n        status: \"warning\",\n        totalTrials: 5, // Low trials\n        activeContexts: 1,\n        autoOptimizationEnabled: true,\n        recommendations: 2,\n      });\n\n      const health = await system.getHealthStatus();\n\n      expect(health.components.bandit).toBe(\"warning\");\n    });\n  });\n\n  describe(\"Optimization Cycle\", () => {\n    it(\"should run optimization cycle\", async () => {\n      await system.start();\n\n      // Trigger optimization cycle\n      await system.forceOptimization();\n\n      expect(\n        mockBanditOptimizer.getOptimizationRecommendations\n      ).toHaveBeenCalled();\n      expect(mockExperimentManager.listActiveExperiments).toHaveBeenCalled();\n    });\n\n    it(\"should apply high priority recommendations\", async () => {\n      mockBanditOptimizer.getOptimizationRecommendations.mockReturnValue([\n        {\n          type: \"exploration\",\n          priority: \"high\",\n          description: \"Need more exploration\",\n          action: \"Increase exploration rate\",\n        },\n      ]);\n\n      await system.start();\n      await system.forceOptimization();\n\n      expect(mockBanditOptimizer.updateConfig).toHaveBeenCalledWith({\n        explorationRate: expect.any(Number),\n      });\n    });\n\n    it(\"should auto-stop experiments with high confidence\", async () => {\n      mockExperimentManager.listActiveExperiments.mockResolvedValue([\n        \"test-experiment\",\n      ]);\n      mockExperimentManager.analyzeExperimentResults.mockResolvedValue({\n        experimentName: \"test-experiment\",\n        status: \"RUNNING\",\n        recommendation: {\n          winningTreatment: \"bedrock-focused\",\n          confidence: 0.96, // Above threshold\n          expectedImprovement: 0.2,\n        },\n      });\n\n      await system.start();\n      await system.forceOptimization();\n\n      expect(mockExperimentManager.stopExperiment).toHaveBeenCalledWith(\n        \"test-experiment\",\n        expect.stringContaining(\"Auto-stop: High confidence winner\")\n      );\n    });\n\n    it(\"should handle optimization cycle errors\", async () => {\n      mockBanditOptimizer.getOptimizationRecommendations.mockImplementation(\n        () => {\n          throw new Error(\"Optimization error\");\n        }\n      );\n\n      await system.start();\n      await system.forceOptimization();\n\n      const metrics = system.getMetrics();\n      expect(metrics.systemHealth).toBe(\"error\");\n    });\n  });\n\n  describe(\"Configuration Management\", () => {\n    it(\"should get current configuration\", () => {\n      const config = system.getConfig();\n\n      expect(config).toMatchObject({\n        projectName: expect.any(String),\n        region: expect.any(String),\n        autoExperimentEnabled: expect.any(Boolean),\n        experimentDuration: expect.any(Number),\n        minTrafficForExperiment: expect.any(Number),\n        significanceThreshold: expect.any(Number),\n        autoStopEnabled: expect.any(Boolean),\n        performanceThresholds: expect.any(Object),\n      });\n    });\n\n    it(\"should update configuration\", () => {\n      system.updateConfig({\n        experimentDuration: 21,\n        minTrafficForExperiment: 200,\n      });\n\n      const config = system.getConfig();\n      expect(config.experimentDuration).toBe(21);\n      expect(config.minTrafficForExperiment).toBe(200);\n\n      const events = system.getEventHistory();\n      const configEvent = events.find(\n        (e) =>\n          e.type === \"auto_optimization\" &&\n          e.details.action === \"config_updated\"\n      );\n      expect(configEvent).toBeDefined();\n    });\n  });\n\n  describe(\"State Management\", () => {\n    it(\"should export state correctly\", () => {\n      const state = system.exportState();\n\n      expect(state).toMatchObject({\n        config: expect.any(Object),\n        metrics: expect.any(Object),\n        banditState: expect.any(Object),\n        eventHistory: expect.any(Array),\n      });\n    });\n  });\n\n  describe(\"Traffic Allocation\", () => {\n    it(\"should update traffic allocation automatically\", async () => {\n      // Just test that the force update works, which is simpler\n      await system.forceTrafficAllocationUpdate();\n\n      const events = system.getEventHistory();\n      const allocationEvent = events.find(\n        (e) => e.type === \"traffic_allocation_updated\"\n      );\n\n      expect(allocationEvent).toBeDefined();\n      expect(allocationEvent?.details.reason).toBe(\n        \"automatic_performance_optimization\"\n      );\n    });\n\n    it(\"should force traffic allocation update\", async () => {\n      await system.forceTrafficAllocationUpdate();\n\n      const events = system.getEventHistory();\n      const allocationEvent = events.find(\n        (e) => e.type === \"traffic_allocation_updated\"\n      );\n\n      expect(allocationEvent).toBeDefined();\n      expect(allocationEvent?.details.reason).toBe(\n        \"automatic_performance_optimization\"\n      );\n    });\n\n    it(\"should maintain minimum allocation for each arm\", async () => {\n      await system.forceTrafficAllocationUpdate();\n\n      const allocation = system.getCurrentTrafficAllocation();\n\n      // Each arm should have at least 5% allocation\n      Object.values(allocation).forEach((value) => {\n        expect(value).toBeGreaterThanOrEqual(0.05);\n      });\n    });\n\n    it(\"should allocate more traffic to better performing arms\", async () => {\n      // Mock better performance for bedrock\n      mockBanditOptimizer.getBanditStats.mockReturnValue({\n        bedrock: {\n          wins: 18,\n          trials: 20,\n          costEuro: 0.4,\n          totalLatencyMs: 4000,\n          winRate: 0.9, // Very high win rate\n          avgLatency: 200, // Low latency\n          avgCost: 0.02, // Low cost\n        },\n        google: {\n          wins: 5,\n          trials: 20,\n          costEuro: 1.0,\n          totalLatencyMs: 10000,\n          winRate: 0.25, // Low win rate\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n        meta: {\n          wins: 5,\n          trials: 20,\n          costEuro: 1.0,\n          totalLatencyMs: 10000,\n          winRate: 0.25, // Low win rate\n          avgLatency: 500,\n          avgCost: 0.05,\n        },\n      });\n\n      await system.forceTrafficAllocationUpdate();\n\n      const allocation = system.getCurrentTrafficAllocation();\n\n      // Bedrock should get the highest allocation\n      expect(allocation.bedrock).toBeGreaterThan(allocation.google);\n      expect(allocation.bedrock).toBeGreaterThan(allocation.meta);\n    });\n  });\n\n  describe(\"Automatic Optimization\", () => {\n    it(\"should start optimization loop on system start\", async () => {\n      await system.start();\n\n      // Just test that the force optimization works, which is simpler\n      await system.forceOptimization();\n\n      expect(\n        mockBanditOptimizer.getOptimizationRecommendations\n      ).toHaveBeenCalled();\n    });\n\n    it(\"should check for new experiments when traffic is sufficient\", async () => {\n      // Mock sufficient traffic\n      const metrics = system.getMetrics();\n      metrics.totalRequests = 200; // Above minTrafficForExperiment\n\n      mockBanditOptimizer.analyzeContextualPerformance.mockReturnValue([\n        {\n          context: \"legal|premium|tools\",\n          bestArm: \"bedrock\",\n          improvement: 0.3, // Good improvement\n          armPerformance: {\n            bedrock: {\n              winRate: 0.8,\n              avgLatency: 400,\n              avgCost: 0.04,\n              trials: 60,\n              confidence: 0.9,\n            },\n            google: {\n              winRate: 0.6,\n              avgLatency: 500,\n              avgCost: 0.05,\n              trials: 40,\n              confidence: 0.8,\n            },\n            meta: {\n              winRate: 0.4,\n              avgLatency: 600,\n              avgCost: 0.06,\n              trials: 30,\n              confidence: 0.7,\n            },\n          },\n        },\n      ]);\n\n      await system.start();\n      await system.forceOptimization();\n\n      // Should log promising contexts\n      const events = system.getEventHistory();\n      expect(events.some((e) => e.type === \"auto_optimization\")).toBe(true);\n    });\n  });\n});\n\ndescribe(\"Global Optimization System\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    MockEvidentlyExperimentManager.mockImplementation(\n      () => mockExperimentManager as any\n    );\n    MockBanditOptimizer.mockImplementation(() => mockBanditOptimizer as any);\n\n    // Setup default mocks\n    mockExperimentManager.initializeProject.mockResolvedValue(undefined);\n    mockExperimentManager.createAIExperiment.mockResolvedValue(undefined);\n    mockExperimentManager.startExperiment.mockResolvedValue(undefined);\n    mockExperimentManager.listActiveExperiments.mockResolvedValue([]);\n    mockExperimentManager.healthCheck.mockResolvedValue({\n      connected: true,\n      projectExists: true,\n      activeExperiments: 0,\n      banditStats: {},\n    });\n\n    mockBanditOptimizer.getOptimalArm.mockResolvedValue({\n      recommendedArm: \"bedrock\",\n      confidence: 0.8,\n      expectedReward: 0.7,\n      explorationNeeded: false,\n      reasoning: \"Test selection\",\n    });\n    mockBanditOptimizer.recordOutcome.mockResolvedValue(undefined);\n    mockBanditOptimizer.getOptimizationRecommendations.mockReturnValue([]);\n    mockBanditOptimizer.getBanditStats.mockReturnValue({\n      bedrock: {\n        wins: 10,\n        trials: 15,\n        costEuro: 0.75,\n        totalLatencyMs: 7500,\n        winRate: 0.67,\n        avgLatency: 500,\n        avgCost: 0.05,\n      },\n      google: {\n        wins: 8,\n        trials: 12,\n        costEuro: 0.6,\n        totalLatencyMs: 6000,\n        winRate: 0.67,\n        avgLatency: 500,\n        avgCost: 0.05,\n      },\n      meta: {\n        wins: 5,\n        trials: 10,\n        costEuro: 0.5,\n        totalLatencyMs: 5000,\n        winRate: 0.5,\n        avgLatency: 500,\n        avgCost: 0.05,\n      },\n    });\n    mockBanditOptimizer.healthCheck.mockReturnValue({\n      status: \"healthy\",\n      totalTrials: 37,\n      activeContexts: 3,\n      autoOptimizationEnabled: true,\n      recommendations: 0,\n    });\n    mockBanditOptimizer.getConfig.mockReturnValue({\n      explorationRate: 0.15,\n      confidenceLevel: 0.95,\n      minTrialsForConfidence: 30,\n      autoOptimizationEnabled: true,\n      optimizationInterval: 60,\n    });\n    mockBanditOptimizer.exportState.mockReturnValue({\n      banditStats: {},\n      config: {},\n      optimizationHistory: [],\n    });\n  });\n\n  afterEach(async () => {\n    await shutdownOptimizationSystem();\n  });\n\n  it(\"should create singleton instance\", () => {\n    const system1 = getOptimizationSystem();\n    const system2 = getOptimizationSystem();\n\n    expect(system1).toBe(system2);\n  });\n\n  it(\"should initialize and start system\", async () => {\n    const system = await initializeOptimizationSystem({\n      projectName: \"test-project\",\n      autoExperimentEnabled: true,\n    });\n\n    expect(system).toBeInstanceOf(ActiveOptimizationSystem);\n    expect(mockExperimentManager.initializeProject).toHaveBeenCalled();\n  });\n\n  it(\"should not start system twice\", async () => {\n    await initializeOptimizationSystem();\n    await initializeOptimizationSystem(); // Second call\n\n    expect(mockExperimentManager.initializeProject).toHaveBeenCalledTimes(1);\n  });\n\n  it(\"should shutdown system\", async () => {\n    mockExperimentManager.listActiveExperiments.mockResolvedValue([\n      \"test-experiment\",\n    ]);\n\n    await initializeOptimizationSystem();\n    await shutdownOptimizationSystem();\n\n    expect(mockExperimentManager.stopExperiment).toHaveBeenCalledWith(\n      \"test-experiment\",\n      \"System shutdown\"\n    );\n  });\n});\n"],"version":3}
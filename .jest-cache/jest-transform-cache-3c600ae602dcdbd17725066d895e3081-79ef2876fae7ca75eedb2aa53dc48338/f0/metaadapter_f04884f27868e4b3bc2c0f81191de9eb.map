{"version":3,"names":["cov_1wxhfghwg1","actualCoverage","s","tool_call_adapter_1","require","MetaAdapter","BaseAdapter","mapTools","tools","f","b","length","undefined","map","tool","name","description","parameters","format","fromUnifiedSchema","function","properties","buildRequest","input","prompt","decision","maxTokens","enhancedPrompt","toolsToUse","toolDescriptions","formatToolsForPrompt","request","formatPromptForLlama","temperature","max_gen_len","top_p","toLowerCase","includes","system_prompt","parseResponse","resp","validateResponse","text","tokensUsed","output","body","JSON","parse","generation","generated_text","prompt_token_count","generation_token_count","estimateTokens","toolCalls","raw","error","handleError","getProviderConfig","maxContextTokens","supportsStreaming","supportsTools","supportsJsonMode","supportsVision","rateLimitRpm","fallbackProvider","tokens","Math","ceil","extractToolCallsFromResponse","getProviderName","supportsToolFeature","feature","func","params","Object","keys","join","isUnifiedToolSpec","supportsFeature","exports"],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/adapters/meta-adapter.ts"],"sourcesContent":["import { ProviderResponse, RouteDecision, ToolSpec } from \"../types\";\nimport { BaseAdapter } from \"./tool-call-adapter\";\n\nexport class MetaAdapter extends BaseAdapter {\n  mapTools(tools?: ToolSpec[]) {\n    // Meta/Llama models have limited tool support\n    // For now, we'll format tools as structured prompts\n    if (!tools?.length) return undefined;\n\n    // Convert tools to structured prompt format for Llama\n    return tools.map((tool) => ({\n      name: tool.name,\n      description: tool.description || \"\",\n      parameters: tool.parameters || {},\n      format: \"structured_prompt\", // Custom format for Llama\n    }));\n  }\n\n  // Enhanced mapping from unified schema to Meta format\n  override fromUnifiedSchema(tools?: UnifiedToolSpec[]): any | undefined {\n    if (!tools?.length) return undefined;\n\n    // Convert unified tools to Meta/Llama format\n    return tools.map((tool) => ({\n      name: tool.function.name,\n      description: tool.function.description || \"\",\n      parameters: tool.function.parameters.properties,\n      format: \"structured_prompt\",\n    }));\n  }\n\n  buildRequest(input: {\n    prompt: string;\n    decision: RouteDecision;\n    streaming?: boolean;\n    maxTokens?: number;\n    tools?: ToolSpec[] | UnifiedToolSpec[];\n  }) {\n    const { prompt, decision, maxTokens, tools } = input;\n\n    // Handle tools by embedding them in the prompt (Llama doesn't support structured tools)\n    let enhancedPrompt = prompt;\n    const toolsToUse = tools || decision.tools;\n    if (toolsToUse?.length) {\n      const toolDescriptions = this.formatToolsForPrompt(toolsToUse);\n      enhancedPrompt = `${prompt}\\n\\nAvailable tools:\\n${toolDescriptions}`;\n    }\n\n    // Format for Llama models (via Bedrock or direct endpoint)\n    const request: any = {\n      prompt: this.formatPromptForLlama(enhancedPrompt),\n      temperature: decision.temperature,\n      max_gen_len: maxTokens || 1024,\n      top_p: 0.9,\n    };\n\n    // Add system prompt for different domains\n    if (\n      prompt.toLowerCase().includes(\"culinary\") ||\n      prompt.toLowerCase().includes(\"food\")\n    ) {\n      request.system_prompt =\n        \"You are a knowledgeable culinary expert. Provide detailed, practical cooking advice and recipes.\";\n    }\n\n    return request;\n  }\n\n  parseResponse(resp: any): ProviderResponse {\n    try {\n      this.validateResponse(resp, \"Meta\");\n\n      // Handle different response formats (Bedrock vs direct)\n      let text = \"\";\n      let tokensUsed = { input: 0, output: 0 };\n\n      if (resp.body) {\n        // Bedrock format\n        const body =\n          typeof resp.body === \"string\" ? JSON.parse(resp.body) : resp.body;\n        text = body.generation || body.generated_text || \"\";\n        tokensUsed = {\n          input: body.prompt_token_count || 0,\n          output: body.generation_token_count || 0,\n        };\n      } else if (resp.generated_text) {\n        // Direct endpoint format\n        text = resp.generated_text;\n        tokensUsed = this.estimateTokens(text);\n      } else if (typeof resp === \"string\") {\n        // Simple string response\n        text = resp;\n        tokensUsed = this.estimateTokens(text);\n      }\n\n      return {\n        text,\n        toolCalls: [], // Llama doesn't support structured tool calls yet\n        raw: resp,\n        tokensUsed,\n      };\n    } catch (error) {\n      this.handleError(error, \"Meta\");\n    }\n  }\n\n  private formatPromptForLlama(prompt: string): string {\n    // Format prompt for Llama models with proper instruction format\n    return `<s>[INST] ${prompt} [/INST]`;\n  }\n\n  getProviderConfig() {\n    return {\n      maxContextTokens: 32768, // Llama 3 70B context window\n      supportsStreaming: false, // Limited streaming support\n      supportsTools: false, // No structured tool calling\n      supportsJsonMode: false, // Limited JSON mode support\n      supportsVision: false, // No vision support\n      rateLimitRpm: 100, // Conservative rate limit\n      fallbackProvider: \"bedrock\", // Fallback to Bedrock if Meta fails\n    };\n  }\n\n  // Meta-specific token estimation\n  override estimateTokens(text: string): { input: number; output: number } {\n    // Llama tokenizer typically uses ~4.2 characters per token\n    const tokens = Math.ceil(text.length / 4.2);\n    return { input: tokens, output: 0 };\n  }\n\n  // Implementation of abstract methods\n  protected extractToolCallsFromResponse(resp: any): Array<{\n    id?: string;\n    name: string;\n    arguments: any;\n    confidence?: number;\n  }> {\n    // Meta/Llama doesn't support structured tool calls\n    // We could implement text parsing for tool-like responses here\n    // For now, return empty array\n    return [];\n  }\n\n  protected getProviderName(): string {\n    return \"meta\";\n  }\n\n  // Enhanced tool feature support for Meta (limited)\n  override supportsToolFeature(\n    feature: \"parallel_calls\" | \"streaming\" | \"json_schema\" | \"complex_types\"\n  ): boolean {\n    // Meta/Llama has very limited tool support\n    return false;\n  }\n\n  // Helper method to format tools for prompt inclusion\n  private formatToolsForPrompt(tools: (ToolSpec | UnifiedToolSpec)[]): string {\n    return tools\n      .map((tool) => {\n        if (\"function\" in tool) {\n          // UnifiedToolSpec\n          const func = tool.function;\n          const params = Object.keys(func.parameters.properties).join(\", \");\n          return `- ${func.name}(${params}): ${func.description}`;\n        } else {\n          // ToolSpec\n          const params = Object.keys(tool.parameters || {}).join(\", \");\n          return `- ${tool.name}(${params}): ${\n            tool.description || \"No description\"\n          }`;\n        }\n      })\n      .join(\"\\n\");\n  }\n\n  // Helper method to check if tools are in unified format\n  private isUnifiedToolSpec(tool: any): tool is UnifiedToolSpec {\n    return tool && typeof tool === \"object\" && \"function\" in tool;\n  }\n\n  // Check if model supports the requested features (legacy method for compatibility)\n  supportsFeature(feature: \"tools\" | \"streaming\" | \"json\" | \"vision\"): boolean {\n    switch (feature) {\n      case \"tools\":\n      case \"json\":\n      case \"vision\":\n        return false;\n      case \"streaming\":\n        return false; // Limited support\n      default:\n        return false;\n    }\n  }\n}\n"],"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","ignoreList":[]}
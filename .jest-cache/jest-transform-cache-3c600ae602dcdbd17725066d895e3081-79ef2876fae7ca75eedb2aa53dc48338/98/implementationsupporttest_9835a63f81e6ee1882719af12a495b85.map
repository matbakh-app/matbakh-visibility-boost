{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/__tests__/implementation-support.test.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/__tests__/implementation-support.test.ts"],"sourcesContent":["/**\n * Implementation Support Tests\n *\n * Comprehensive test suite for Implementation Support System covering\n * gap detection, remediation suggestions, auto-resolution, and backlog analysis.\n */\n\nimport { DirectBedrockClient } from \"../direct-bedrock-client\";\nimport {\n  ImplementationGap,\n  ImplementationSupport,\n  ImplementationSupportConfig,\n  RemediationSuggestion,\n} from \"../implementation-support\";\nimport { IntelligentRouter } from \"../intelligent-router\";\n\n// Mock dependencies\njest.mock(\"../ai-feature-flags\");\njest.mock(\"../direct-bedrock-client\");\njest.mock(\"../intelligent-router\");\n\ndescribe(\"ImplementationSupport\", () => {\n  let implementationSupport: ImplementationSupport;\n  let mockDirectBedrockClient: jest.Mocked<DirectBedrockClient>;\n  let mockIntelligentRouter: jest.Mocked<IntelligentRouter>;\n  let mockConfig: ImplementationSupportConfig;\n\n  beforeEach(() => {\n    // Create mocks\n    mockDirectBedrockClient = {\n      executeSupportOperation: jest.fn(),\n      getHealthStatus: jest.fn(),\n      isAvailable: jest.fn(),\n      destroy: jest.fn(),\n    } as any;\n\n    mockIntelligentRouter = {\n      executeSupportOperation: jest.fn(),\n      makeRoutingDecision: jest.fn(),\n      checkRouteHealth: jest.fn(),\n      destroy: jest.fn(),\n    } as any;\n\n    mockConfig = {\n      scanInterval: 1000, // 1 second for testing\n      autoResolutionEnabled: true,\n      maxAutoResolutionAttempts: 2,\n      analysisTimeout: 5000,\n      backlogAnalysisInterval: 2000,\n      enableContinuousMonitoring: false, // Disable for testing\n      riskThreshold: \"medium\",\n      testingRequired: false, // Disable for testing\n    };\n\n    // Mock feature flags to be enabled\n    const mockFeatureFlags = require(\"../ai-feature-flags\").AiFeatureFlags;\n    mockFeatureFlags.prototype.isEnabled = jest.fn().mockReturnValue(true);\n\n    implementationSupport = new ImplementationSupport(\n      mockDirectBedrockClient,\n      mockIntelligentRouter,\n      mockConfig\n    );\n  });\n\n  afterEach(() => {\n    implementationSupport.destroy();\n    jest.clearAllMocks();\n  });\n\n  describe(\"Constructor\", () => {\n    it(\"should initialize with default configuration\", () => {\n      const defaultSupport = new ImplementationSupport(\n        mockDirectBedrockClient,\n        mockIntelligentRouter\n      );\n\n      expect(defaultSupport).toBeDefined();\n      expect(defaultSupport.getMetrics().totalGapsDetected).toBe(0);\n\n      defaultSupport.destroy();\n    });\n\n    it(\"should merge custom configuration with defaults\", () => {\n      const customConfig = { scanInterval: 5000 };\n      const customSupport = new ImplementationSupport(\n        mockDirectBedrockClient,\n        mockIntelligentRouter,\n        customConfig\n      );\n\n      expect(customSupport).toBeDefined();\n      customSupport.destroy();\n    });\n  });\n\n  describe(\"detectImplementationGaps\", () => {\n    it(\"should detect implementation gaps\", async () => {\n      mockIntelligentRouter.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: JSON.stringify({\n          gaps: [\n            {\n              type: \"missing_implementation\",\n              severity: \"high\",\n              title: \"Missing user authentication\",\n              description: \"User authentication module is not implemented\",\n              affectedModules: [\"auth\", \"user\"],\n              businessImpact: \"Users cannot log in\",\n              estimatedEffort: \"medium\",\n              confidence: 0.9,\n              technicalDetails: {\n                missingComponents: [\"AuthService\", \"LoginForm\"],\n              },\n            },\n            {\n              type: \"performance_issue\",\n              severity: \"medium\",\n              title: \"Slow database queries\",\n              description: \"Database queries are not optimized\",\n              affectedModules: [\"database\"],\n              businessImpact: \"Poor user experience\",\n              estimatedEffort: \"low\",\n              confidence: 0.8,\n              technicalDetails: {\n                performanceMetrics: { queryTime: 2000 },\n              },\n            },\n          ],\n        }),\n        operationId: \"gap-detection\",\n        latencyMs: 200,\n        timestamp: new Date(),\n      });\n\n      const gaps = await implementationSupport.detectImplementationGaps();\n\n      expect(gaps).toHaveLength(2);\n      expect(gaps[0].type).toBe(\"missing_implementation\");\n      expect(gaps[0].severity).toBe(\"high\");\n      expect(gaps[0].title).toBe(\"Missing user authentication\");\n      expect(gaps[1].type).toBe(\"performance_issue\");\n      expect(gaps[1].severity).toBe(\"medium\");\n\n      expect(\n        mockIntelligentRouter.executeSupportOperation\n      ).toHaveBeenCalledWith(\n        expect.objectContaining({\n          operation: \"implementation\",\n          priority: \"high\",\n        })\n      );\n    });\n\n    it(\"should detect gaps for specific modules\", async () => {\n      mockIntelligentRouter.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: JSON.stringify({ gaps: [] }),\n        operationId: \"gap-detection\",\n        latencyMs: 100,\n        timestamp: new Date(),\n      });\n\n      const gaps = await implementationSupport.detectImplementationGaps([\n        \"auth\",\n        \"user\",\n      ]);\n\n      expect(gaps).toEqual([]);\n      expect(\n        mockIntelligentRouter.executeSupportOperation\n      ).toHaveBeenCalledWith(\n        expect.objectContaining({\n          context: expect.objectContaining({\n            metadata: expect.objectContaining({\n              modules: [\"auth\", \"user\"],\n            }),\n          }),\n        })\n      );\n    });\n\n    it(\"should handle detection errors gracefully\", async () => {\n      mockIntelligentRouter.executeSupportOperation.mockRejectedValue(\n        new Error(\"Detection failed\")\n      );\n\n      const gaps = await implementationSupport.detectImplementationGaps();\n\n      expect(gaps).toEqual([]);\n    });\n\n    it(\"should skip detection when feature is disabled\", async () => {\n      const mockFeatureFlags = require(\"../ai-feature-flags\").AiFeatureFlags;\n      mockFeatureFlags.prototype.isEnabled = jest.fn().mockReturnValue(false);\n\n      const disabledSupport = new ImplementationSupport(\n        mockDirectBedrockClient,\n        mockIntelligentRouter,\n        mockConfig\n      );\n\n      const gaps = await disabledSupport.detectImplementationGaps();\n\n      expect(gaps).toEqual([]);\n      expect(\n        mockIntelligentRouter.executeSupportOperation\n      ).not.toHaveBeenCalled();\n\n      disabledSupport.destroy();\n    });\n  });\n\n  describe(\"generateRemediationSuggestions\", () => {\n    const mockGap: ImplementationGap = {\n      gapId: \"gap-123\",\n      type: \"missing_implementation\",\n      severity: \"high\",\n      title: \"Missing authentication\",\n      description: \"Authentication module not implemented\",\n      affectedModules: [\"auth\"],\n      detectedAt: new Date(),\n      lastUpdated: new Date(),\n      status: \"detected\",\n      confidence: 0.9,\n      estimatedEffort: \"medium\",\n      businessImpact: \"Users cannot authenticate\",\n      technicalDetails: {\n        missingComponents: [\"AuthService\"],\n      },\n    };\n\n    it(\"should generate remediation suggestions\", async () => {\n      mockIntelligentRouter.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: JSON.stringify({\n          suggestions: [\n            {\n              type: \"code_fix\",\n              priority: \"high\",\n              title: \"Implement AuthService\",\n              description: \"Create authentication service with login/logout\",\n              implementation: {\n                steps: [\"Create AuthService class\", \"Implement login method\"],\n                codeChanges: [\n                  {\n                    file: \"src/services/AuthService.ts\",\n                    changes: \"export class AuthService { login() {} }\",\n                    explanation: \"Basic auth service implementation\",\n                  },\n                ],\n              },\n              estimatedTime: \"4 hours\",\n              riskLevel: \"low\",\n              testingRequired: true,\n              autoResolvable: true,\n            },\n          ],\n        }),\n        operationId: \"remediation\",\n        latencyMs: 300,\n        timestamp: new Date(),\n      });\n\n      const suggestions =\n        await implementationSupport.generateRemediationSuggestions(mockGap);\n\n      expect(suggestions).toHaveLength(1);\n      expect(suggestions[0].type).toBe(\"code_fix\");\n      expect(suggestions[0].priority).toBe(\"high\");\n      expect(suggestions[0].title).toBe(\"Implement AuthService\");\n      expect(suggestions[0].autoResolvable).toBe(true);\n      expect(suggestions[0].implementation.codeChanges).toHaveLength(1);\n\n      // Check that gap status was updated\n      const gaps = implementationSupport.getDetectedGaps();\n      const updatedGap = gaps.find((g) => g.gapId === mockGap.gapId);\n      expect(updatedGap?.status).toBe(\"remediation_suggested\");\n    });\n\n    it(\"should handle critical gaps with higher priority\", async () => {\n      const criticalGap: ImplementationGap = {\n        ...mockGap,\n        severity: \"critical\",\n      };\n\n      mockIntelligentRouter.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: JSON.stringify({\n          suggestions: [\n            {\n              type: \"code_fix\",\n              priority: \"urgent\",\n              title: \"Critical fix\",\n              description: \"Urgent security fix\",\n              implementation: { steps: [\"Fix security issue\"] },\n              estimatedTime: \"1 hour\",\n              riskLevel: \"high\",\n              testingRequired: true,\n              autoResolvable: false,\n            },\n          ],\n        }),\n        operationId: \"critical-remediation\",\n        latencyMs: 150,\n        timestamp: new Date(),\n      });\n\n      const suggestions =\n        await implementationSupport.generateRemediationSuggestions(criticalGap);\n\n      expect(suggestions).toHaveLength(1);\n      expect(suggestions[0].priority).toBe(\"urgent\");\n      expect(\n        mockIntelligentRouter.executeSupportOperation\n      ).toHaveBeenCalledWith(\n        expect.objectContaining({\n          priority: \"critical\",\n        })\n      );\n    });\n\n    it(\"should handle suggestion generation errors\", async () => {\n      mockIntelligentRouter.executeSupportOperation.mockRejectedValue(\n        new Error(\"Suggestion generation failed\")\n      );\n\n      const suggestions =\n        await implementationSupport.generateRemediationSuggestions(mockGap);\n\n      expect(suggestions).toEqual([]);\n    });\n  });\n\n  describe(\"attemptAutoResolution\", () => {\n    const mockGap: ImplementationGap = {\n      gapId: \"gap-auto\",\n      type: \"missing_implementation\",\n      severity: \"medium\",\n      title: \"Missing component\",\n      description: \"Component not implemented\",\n      affectedModules: [\"components\"],\n      detectedAt: new Date(),\n      lastUpdated: new Date(),\n      status: \"remediation_suggested\",\n      confidence: 0.8,\n      estimatedEffort: \"low\",\n      businessImpact: \"Minor functionality missing\",\n      technicalDetails: {},\n    };\n\n    const mockSuggestion: RemediationSuggestion = {\n      suggestionId: \"suggestion-auto\",\n      gapId: \"gap-auto\",\n      type: \"code_fix\",\n      priority: \"medium\",\n      title: \"Add missing component\",\n      description: \"Create the missing component\",\n      implementation: {\n        steps: [\"Create component file\"],\n        codeChanges: [\n          {\n            file: \"src/components/MissingComponent.tsx\",\n            changes:\n              \"export const MissingComponent = () => <div>Component</div>;\",\n            explanation: \"Basic component implementation\",\n          },\n        ],\n      },\n      estimatedTime: \"1 hour\",\n      riskLevel: \"low\",\n      testingRequired: false,\n      createdAt: new Date(),\n      autoResolvable: true,\n    };\n\n    it(\"should successfully auto-resolve implementation gap\", async () => {\n      const result = await implementationSupport.attemptAutoResolution(\n        mockGap,\n        mockSuggestion\n      );\n\n      expect(result.status).toBe(\"success\");\n      expect(result.gapId).toBe(mockGap.gapId);\n      expect(result.suggestionId).toBe(mockSuggestion.suggestionId);\n      expect(result.appliedChanges.filesModified).toContain(\n        \"src/components/MissingComponent.tsx\"\n      );\n      expect(result.rollbackAvailable).toBe(true);\n\n      // Check that gap status was updated\n      const gaps = implementationSupport.getDetectedGaps();\n      const resolvedGap = gaps.find((g) => g.gapId === mockGap.gapId);\n      expect(resolvedGap?.status).toBe(\"resolved\");\n\n      // Check metrics\n      const metrics = implementationSupport.getMetrics();\n      expect(metrics.autoResolutionsAttempted).toBe(1);\n      expect(metrics.autoResolutionsSuccessful).toBe(1);\n      expect(metrics.gapsResolved).toBe(1);\n    });\n\n    it(\"should fail auto-resolution for non-auto-resolvable suggestions\", async () => {\n      const nonAutoSuggestion: RemediationSuggestion = {\n        ...mockSuggestion,\n        autoResolvable: false,\n      };\n\n      const result = await implementationSupport.attemptAutoResolution(\n        mockGap,\n        nonAutoSuggestion\n      );\n\n      expect(result.status).toBe(\"failed\");\n      expect(result.error).toContain(\"not auto-resolvable\");\n\n      // Check that gap status was updated to failed\n      const gaps = implementationSupport.getDetectedGaps();\n      const failedGap = gaps.find((g) => g.gapId === mockGap.gapId);\n      expect(failedGap?.status).toBe(\"failed\");\n    });\n\n    it(\"should fail auto-resolution for high-risk suggestions\", async () => {\n      const highRiskSuggestion: RemediationSuggestion = {\n        ...mockSuggestion,\n        riskLevel: \"high\",\n      };\n\n      const result = await implementationSupport.attemptAutoResolution(\n        mockGap,\n        highRiskSuggestion\n      );\n\n      expect(result.status).toBe(\"failed\");\n      expect(result.error).toContain(\"risk level exceeds threshold\");\n    });\n\n    it(\"should fail auto-resolution when disabled\", async () => {\n      const disabledConfig = { ...mockConfig, autoResolutionEnabled: false };\n      const disabledSupport = new ImplementationSupport(\n        mockDirectBedrockClient,\n        mockIntelligentRouter,\n        disabledConfig\n      );\n\n      const result = await disabledSupport.attemptAutoResolution(\n        mockGap,\n        mockSuggestion\n      );\n\n      expect(result.status).toBe(\"failed\");\n      expect(result.error).toContain(\"Auto-resolution is disabled\");\n\n      disabledSupport.destroy();\n    });\n\n    it(\"should handle configuration changes\", async () => {\n      const suggestionWithConfig: RemediationSuggestion = {\n        ...mockSuggestion,\n        implementation: {\n          ...mockSuggestion.implementation,\n          configurationChanges: [\n            {\n              file: \"config.json\",\n              changes: { feature: \"enabled\" },\n              explanation: \"Enable feature\",\n            },\n          ],\n        },\n      };\n\n      const result = await implementationSupport.attemptAutoResolution(\n        mockGap,\n        suggestionWithConfig\n      );\n\n      expect(result.status).toBe(\"success\");\n      expect(result.appliedChanges.configurationsChanged).toContain(\n        \"config.json\"\n      );\n    });\n\n    it(\"should handle dependency updates\", async () => {\n      const suggestionWithDeps: RemediationSuggestion = {\n        ...mockSuggestion,\n        implementation: {\n          ...mockSuggestion.implementation,\n          dependencies: {\n            add: [\"new-package\"],\n            update: { \"existing-package\": \"^2.0.0\" },\n          },\n        },\n      };\n\n      const result = await implementationSupport.attemptAutoResolution(\n        mockGap,\n        suggestionWithDeps\n      );\n\n      expect(result.status).toBe(\"success\");\n      expect(result.appliedChanges.dependenciesUpdated).toContain(\n        \"package.json\"\n      );\n    });\n  });\n\n  describe(\"analyzeBacklog\", () => {\n    beforeEach(async () => {\n      // Add some gaps to analyze\n      mockIntelligentRouter.executeSupportOperation.mockResolvedValueOnce({\n        success: true,\n        text: JSON.stringify({\n          gaps: [\n            {\n              type: \"missing_implementation\",\n              severity: \"high\",\n              title: \"Missing auth\",\n              description: \"Auth not implemented\",\n              affectedModules: [\"auth\"],\n              businessImpact: \"Users cannot login\",\n              estimatedEffort: \"medium\",\n              confidence: 0.9,\n              technicalDetails: {},\n            },\n            {\n              type: \"performance_issue\",\n              severity: \"medium\",\n              title: \"Slow queries\",\n              description: \"Database queries are slow\",\n              affectedModules: [\"database\"],\n              businessImpact: \"Poor performance\",\n              estimatedEffort: \"low\",\n              confidence: 0.8,\n              technicalDetails: {},\n            },\n          ],\n        }),\n        operationId: \"gap-detection\",\n        latencyMs: 200,\n        timestamp: new Date(),\n      });\n\n      await implementationSupport.detectImplementationGaps();\n    });\n\n    it(\"should analyze backlog and provide recommendations\", async () => {\n      mockIntelligentRouter.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: JSON.stringify({\n          prioritizedGaps: [\"gap-1\", \"gap-2\"],\n          suggestedSprints: [\n            {\n              sprintNumber: 1,\n              duration: \"2 weeks\",\n              gaps: [\"gap-1\"],\n              estimatedEffort: \"20 hours\",\n              businessValue: \"High - enables user authentication\",\n            },\n            {\n              sprintNumber: 2,\n              duration: \"1 week\",\n              gaps: [\"gap-2\"],\n              estimatedEffort: \"8 hours\",\n              businessValue: \"Medium - improves performance\",\n            },\n          ],\n          recommendations: {\n            immediate: [\"Fix authentication issues\"],\n            shortTerm: [\"Optimize database queries\"],\n            longTerm: [\"Redesign authentication system\"],\n          },\n          riskAssessment: {\n            highRiskGaps: [\"gap-1\"],\n            blockers: [\"Missing auth service\"],\n            dependencies: { \"gap-2\": [\"gap-1\"] },\n          },\n        }),\n        operationId: \"backlog-analysis\",\n        latencyMs: 500,\n        timestamp: new Date(),\n      });\n\n      const analysis = await implementationSupport.analyzeBacklog();\n\n      expect(analysis).toBeDefined();\n      expect(analysis.totalGaps).toBeGreaterThan(0);\n      expect(analysis.suggestedSprints).toHaveLength(2);\n      expect(analysis.recommendations.immediate).toContain(\n        \"Fix authentication issues\"\n      );\n      expect(analysis.riskAssessment.highRiskGaps).toContain(\"gap-1\");\n\n      // Check metrics\n      const metrics = implementationSupport.getMetrics();\n      expect(metrics.backlogAnalysesPerformed).toBe(1);\n    });\n\n    it(\"should handle empty backlog\", async () => {\n      // Create support with no gaps\n      const emptySupport = new ImplementationSupport(\n        mockDirectBedrockClient,\n        mockIntelligentRouter,\n        mockConfig\n      );\n\n      const analysis = await emptySupport.analyzeBacklog();\n\n      expect(analysis.totalGaps).toBe(0);\n      expect(analysis.prioritizedGaps).toEqual([]);\n      expect(analysis.suggestedSprints).toEqual([]);\n\n      emptySupport.destroy();\n    });\n\n    it(\"should handle backlog analysis errors\", async () => {\n      mockIntelligentRouter.executeSupportOperation.mockRejectedValue(\n        new Error(\"Backlog analysis failed\")\n      );\n\n      const analysis = await implementationSupport.analyzeBacklog();\n\n      expect(analysis.totalGaps).toBe(0);\n      expect(analysis.prioritizedGaps).toEqual([]);\n    });\n  });\n\n  describe(\"Health Status and Metrics\", () => {\n    it(\"should return health status\", () => {\n      const health = implementationSupport.getHealthStatus();\n\n      expect(health).toBeDefined();\n      expect(health.isHealthy).toBeDefined();\n      expect(health.totalGaps).toBeDefined();\n      expect(health.resolvedGaps).toBeDefined();\n      expect(health.resolutionRate).toBeDefined();\n      expect(health.metrics).toBeDefined();\n    });\n\n    it(\"should return metrics\", () => {\n      const metrics = implementationSupport.getMetrics();\n\n      expect(metrics).toBeDefined();\n      expect(metrics.totalGapsDetected).toBeDefined();\n      expect(metrics.gapsResolved).toBeDefined();\n      expect(metrics.autoResolutionsAttempted).toBeDefined();\n      expect(metrics.detectedGapsCount).toBeDefined();\n    });\n\n    it(\"should calculate health based on resolution rate\", async () => {\n      // Add and resolve some gaps\n      mockIntelligentRouter.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: JSON.stringify({\n          gaps: [\n            {\n              type: \"missing_implementation\",\n              severity: \"medium\",\n              title: \"Test gap\",\n              description: \"Test description\",\n              affectedModules: [\"test\"],\n              businessImpact: \"Test impact\",\n              estimatedEffort: \"low\",\n              confidence: 0.8,\n              technicalDetails: {},\n            },\n          ],\n        }),\n        operationId: \"test\",\n        latencyMs: 100,\n        timestamp: new Date(),\n      });\n\n      await implementationSupport.detectImplementationGaps();\n\n      const healthBefore = implementationSupport.getHealthStatus();\n      expect(healthBefore.resolutionRate).toBe(0); // No gaps resolved yet\n\n      // Simulate resolving the gap\n      const gaps = implementationSupport.getDetectedGaps();\n      if (gaps.length > 0) {\n        gaps[0].status = \"resolved\";\n      }\n\n      const healthAfter = implementationSupport.getHealthStatus();\n      expect(healthAfter.resolutionRate).toBeGreaterThan(0);\n    });\n  });\n\n  describe(\"Gap Management\", () => {\n    beforeEach(async () => {\n      mockIntelligentRouter.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: JSON.stringify({\n          gaps: [\n            {\n              type: \"missing_implementation\",\n              severity: \"high\",\n              title: \"High severity gap\",\n              description: \"High severity description\",\n              affectedModules: [\"module1\"],\n              businessImpact: \"High impact\",\n              estimatedEffort: \"medium\",\n              confidence: 0.9,\n              technicalDetails: {},\n            },\n            {\n              type: \"performance_issue\",\n              severity: \"low\",\n              title: \"Low severity gap\",\n              description: \"Low severity description\",\n              affectedModules: [\"module2\"],\n              businessImpact: \"Low impact\",\n              estimatedEffort: \"low\",\n              confidence: 0.7,\n              technicalDetails: {},\n            },\n          ],\n        }),\n        operationId: \"gap-detection\",\n        latencyMs: 200,\n        timestamp: new Date(),\n      });\n\n      await implementationSupport.detectImplementationGaps();\n    });\n\n    it(\"should get all detected gaps\", () => {\n      const gaps = implementationSupport.getDetectedGaps();\n\n      expect(gaps).toHaveLength(2);\n      expect(gaps.some((g) => g.severity === \"high\")).toBe(true);\n      expect(gaps.some((g) => g.severity === \"low\")).toBe(true);\n    });\n\n    it(\"should filter gaps by severity\", () => {\n      const highSeverityGaps = implementationSupport.getGapsBySeverity(\"high\");\n      const lowSeverityGaps = implementationSupport.getGapsBySeverity(\"low\");\n\n      expect(highSeverityGaps).toHaveLength(1);\n      expect(highSeverityGaps[0].severity).toBe(\"high\");\n      expect(lowSeverityGaps).toHaveLength(1);\n      expect(lowSeverityGaps[0].severity).toBe(\"low\");\n    });\n\n    it(\"should get suggestions for specific gap\", async () => {\n      const gaps = implementationSupport.getDetectedGaps();\n      const testGap = gaps[0];\n\n      // Generate suggestions for the gap\n      mockIntelligentRouter.executeSupportOperation.mockResolvedValue({\n        success: true,\n        text: JSON.stringify({\n          suggestions: [\n            {\n              type: \"code_fix\",\n              priority: \"high\",\n              title: \"Fix implementation\",\n              description: \"Implement missing functionality\",\n              implementation: { steps: [\"Step 1\"] },\n              estimatedTime: \"2 hours\",\n              riskLevel: \"low\",\n              testingRequired: false,\n              autoResolvable: true,\n            },\n          ],\n        }),\n        operationId: \"suggestions\",\n        latencyMs: 300,\n        timestamp: new Date(),\n      });\n\n      await implementationSupport.generateRemediationSuggestions(testGap);\n\n      const suggestions = implementationSupport.getSuggestionsForGap(\n        testGap.gapId\n      );\n      expect(suggestions).toHaveLength(1);\n      expect(suggestions[0].gapId).toBe(testGap.gapId);\n    });\n  });\n\n  describe(\"Resource Management\", () => {\n    it(\"should cleanup resources on destroy\", () => {\n      const metrics = implementationSupport.getMetrics();\n      expect(metrics.detectedGapsCount).toBeGreaterThanOrEqual(0);\n\n      implementationSupport.destroy();\n\n      // After destroy, data should be cleared\n      const postDestroyMetrics = implementationSupport.getMetrics();\n      expect(postDestroyMetrics.detectedGapsCount).toBe(0);\n    });\n\n    it(\"should handle multiple destroy calls safely\", () => {\n      expect(() => {\n        implementationSupport.destroy();\n        implementationSupport.destroy();\n      }).not.toThrow();\n    });\n  });\n\n  describe(\"Configuration Validation\", () => {\n    it(\"should work with minimal configuration\", () => {\n      const minimalSupport = new ImplementationSupport(\n        mockDirectBedrockClient,\n        mockIntelligentRouter,\n        { scanInterval: 1000 }\n      );\n\n      expect(minimalSupport).toBeDefined();\n      expect(minimalSupport.getHealthStatus()).toBeDefined();\n\n      minimalSupport.destroy();\n    });\n\n    it(\"should handle invalid configuration gracefully\", () => {\n      const invalidConfig = {\n        scanInterval: -1000,\n        maxAutoResolutionAttempts: -1,\n      } as any;\n\n      expect(() => {\n        const invalidSupport = new ImplementationSupport(\n          mockDirectBedrockClient,\n          mockIntelligentRouter,\n          invalidConfig\n        );\n        invalidSupport.destroy();\n      }).not.toThrow();\n    });\n  });\n});\n"],"version":3}
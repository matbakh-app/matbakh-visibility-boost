{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/__tests__/hybrid-routing-audit-trail-integrity.test.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/__tests__/hybrid-routing-audit-trail-integrity.test.ts"],"sourcesContent":["/**\n * Hybrid Routing Audit Trail Integrity Validation Tests\n *\n * Comprehensive test suite for validating audit trail integrity\n * specifically for hybrid routing operations (Direct Bedrock + MCP)\n */\n\nimport { AuditEvent, AuditTrailSystem } from \"../audit-trail-system\";\nimport { BedrockSupportManager } from \"../bedrock-support-manager\";\nimport { DirectBedrockClient } from \"../direct-bedrock-client\";\nimport { IntelligentRouter } from \"../intelligent-router\";\nimport { MCPRouter } from \"../mcp-router\";\n\n// Mock console.log to capture audit logs\nconst mockConsoleLog = jest.fn();\nconst originalConsoleLog = console.log;\n\ndescribe(\"Hybrid Routing Audit Trail Integrity\", () => {\n  let auditTrail: AuditTrailSystem;\n  let supportManager: BedrockSupportManager;\n  let intelligentRouter: IntelligentRouter;\n  let directBedrockClient: DirectBedrockClient;\n  let mcpRouter: MCPRouter;\n\n  beforeEach(() => {\n    // Initialize audit trail with strict integrity checking\n    auditTrail = new AuditTrailSystem({\n      enableAuditTrail: true,\n      enableIntegrityChecking: true,\n      enablePIILogging: true,\n      retentionDays: 90,\n      complianceMode: \"strict\",\n      encryptionEnabled: true,\n      anonymizationEnabled: false, // Disable for testing\n    });\n\n    // Mock components\n    supportManager = {\n      activate: jest.fn(),\n      runInfrastructureAudit: jest.fn(),\n      enableMetaMonitoring: jest.fn(),\n      provideFallbackSupport: jest.fn(),\n    } as any;\n\n    intelligentRouter = {\n      makeRoutingDecision: jest.fn(),\n      executeSupportOperation: jest.fn(),\n      checkRouteHealth: jest.fn(),\n    } as any;\n\n    directBedrockClient = {\n      analyze: jest.fn(),\n      emergencySupport: jest.fn(),\n      detectPii: jest.fn(),\n    } as any;\n\n    mcpRouter = {\n      route: jest.fn(),\n      checkHealth: jest.fn(),\n    } as any;\n\n    console.log = mockConsoleLog;\n    mockConsoleLog.mockClear();\n  });\n\n  afterEach(() => {\n    console.log = originalConsoleLog;\n  });\n\n  describe(\"Hybrid Routing Decision Audit Trail\", () => {\n    it(\"should maintain audit trail integrity for routing decisions\", async () => {\n      const requestId = \"hybrid-routing-test-001\";\n      const correlationId = \"corr-001\";\n\n      // Log routing decision\n      await auditTrail.logHybridRoutingDecision(\n        requestId,\n        {\n          selectedRoute: \"direct\",\n          reason: \"Emergency operation requires <5s latency\",\n          fallbackAvailable: true,\n          estimatedLatency: 3000,\n          correlationId,\n          primaryRouteHealth: true,\n          fallbackRouteHealth: true,\n        },\n        \"emergency_operations\",\n        \"critical\"\n      );\n\n      // Log direct Bedrock operation\n      await auditTrail.logDirectBedrockOperation(\n        requestId,\n        \"emergency_operations\",\n        \"critical\",\n        2800,\n        true,\n        { input: 50, output: 25 },\n        0.03,\n        undefined,\n        false,\n        {\n          gdprCompliant: true,\n          piiRedacted: false,\n          auditLogged: true,\n        }\n      );\n\n      // Verify audit trail integrity\n      const auditLogCalls = mockConsoleLog.mock.calls.filter((call) =>\n        call[0].includes(\"AUDIT:\")\n      );\n\n      expect(auditLogCalls).toHaveLength(2);\n\n      const routingEvent = JSON.parse(\n        auditLogCalls[0][0].replace(\"AUDIT: \", \"\")\n      );\n      const operationEvent = JSON.parse(\n        auditLogCalls[1][0].replace(\"AUDIT: \", \"\")\n      );\n\n      // Verify event chain integrity\n      expect(operationEvent.previousEventHash).toBe(routingEvent.eventHash);\n      expect(routingEvent.eventHash).toBeDefined();\n      expect(operationEvent.eventHash).toBeDefined();\n\n      // Verify routing decision audit\n      expect(routingEvent).toMatchObject({\n        eventType: \"hybrid_routing_decision\",\n        requestId,\n        operation: \"hybrid_routing\",\n        complianceStatus: \"compliant\",\n        routingDecision: {\n          selectedRoute: \"direct\",\n          reason: \"Emergency operation requires <5s latency\",\n          fallbackAvailable: true,\n          estimatedLatency: 3000,\n          correlationId,\n        },\n        metadata: {\n          operationType: \"emergency_operations\",\n          priority: \"critical\",\n          selectedRoute: \"direct\",\n        },\n      });\n\n      // Verify operation audit\n      expect(operationEvent).toMatchObject({\n        eventType: \"direct_bedrock_operation\",\n        requestId,\n        provider: \"bedrock\",\n        operation: \"emergency_operations\",\n        latencyMs: 2800,\n        complianceStatus: \"compliant\",\n        metadata: {\n          operationType: \"emergency_operations\",\n          priority: \"critical\",\n          routingPath: \"direct_bedrock\",\n          success: true,\n          gdprCompliant: true,\n        },\n      });\n    });\n\n    it(\"should validate audit trail integrity for MCP routing operations\", async () => {\n      const requestId = \"mcp-routing-test-001\";\n\n      // Log routing decision for MCP\n      await auditTrail.logHybridRoutingDecision(\n        requestId,\n        {\n          selectedRoute: \"mcp\",\n          reason: \"Standard operation, MCP available\",\n          fallbackAvailable: true,\n          estimatedLatency: 15000,\n          correlationId: \"corr-002\",\n          primaryRouteHealth: true,\n          fallbackRouteHealth: true,\n        },\n        \"standard_analysis\",\n        \"medium\"\n      );\n\n      // Log MCP routing operation\n      await auditTrail.logMCPRoutingOperation(\n        requestId,\n        \"standard_analysis\",\n        \"medium\",\n        12500,\n        true,\n        5,\n        0\n      );\n\n      // Verify audit trail integrity\n      const auditLogCalls = mockConsoleLog.mock.calls.filter((call) =>\n        call[0].includes(\"AUDIT:\")\n      );\n\n      expect(auditLogCalls).toHaveLength(2);\n\n      const events = auditLogCalls.map((call) =>\n        JSON.parse(call[0].replace(\"AUDIT: \", \"\"))\n      );\n\n      // Verify chain integrity\n      expect(events[1].previousEventHash).toBe(events[0].eventHash);\n\n      // Verify MCP operation audit\n      expect(events[1]).toMatchObject({\n        eventType: \"mcp_routing_operation\",\n        requestId,\n        provider: \"bedrock\",\n        operation: \"standard_analysis\",\n        latencyMs: 12500,\n        complianceStatus: \"compliant\",\n        metadata: {\n          operationType: \"standard_analysis\",\n          priority: \"medium\",\n          routingPath: \"mcp_integration\",\n          success: true,\n          queueSize: 5,\n          retryCount: 0,\n        },\n      });\n    });\n\n    it(\"should maintain integrity during intelligent routing fallback\", async () => {\n      const requestId = \"fallback-test-001\";\n\n      // Log initial routing decision\n      await auditTrail.logHybridRoutingDecision(\n        requestId,\n        {\n          selectedRoute: \"direct\",\n          reason: \"Critical operation priority\",\n          fallbackAvailable: true,\n          estimatedLatency: 8000,\n          correlationId: \"corr-003\",\n          primaryRouteHealth: true,\n          fallbackRouteHealth: true,\n        },\n        \"infrastructure_audit\",\n        \"high\"\n      );\n\n      // Log fallback event\n      await auditTrail.logIntelligentRoutingFallback(\n        requestId,\n        \"direct\",\n        \"mcp\",\n        \"Direct Bedrock timeout after 10s\",\n        \"infrastructure_audit\",\n        \"Request timeout: exceeded 10s limit\"\n      );\n\n      // Log successful MCP operation after fallback\n      await auditTrail.logMCPRoutingOperation(\n        requestId,\n        \"infrastructure_audit\",\n        \"high\",\n        18000,\n        true,\n        2,\n        1\n      );\n\n      // Verify audit trail integrity\n      const auditLogCalls = mockConsoleLog.mock.calls.filter((call) =>\n        call[0].includes(\"AUDIT:\")\n      );\n\n      expect(auditLogCalls).toHaveLength(3);\n\n      const events = auditLogCalls.map((call) =>\n        JSON.parse(call[0].replace(\"AUDIT: \", \"\"))\n      );\n\n      // Verify complete chain integrity\n      expect(events[1].previousEventHash).toBe(events[0].eventHash);\n      expect(events[2].previousEventHash).toBe(events[1].eventHash);\n\n      // Verify fallback event\n      expect(events[1]).toMatchObject({\n        eventType: \"intelligent_routing_fallback\",\n        requestId,\n        operation: \"routing_fallback\",\n        complianceStatus: \"warning\",\n        error: {\n          type: \"primary_route_error\",\n          message: \"Request timeout: exceeded 10s limit\",\n        },\n        metadata: {\n          fromRoute: \"direct\",\n          toRoute: \"mcp\",\n          fallbackReason: \"Direct Bedrock timeout after 10s\",\n          operationType: \"infrastructure_audit\",\n        },\n      });\n    });\n  });\n\n  describe(\"Route Health Monitoring Audit Trail\", () => {\n    it(\"should maintain audit trail integrity for route health checks\", async () => {\n      // Log health checks for both routes\n      await auditTrail.logRouteHealthCheck(\"direct\", true, 2500, 0.98, 0);\n\n      await auditTrail.logRouteHealthCheck(\n        \"mcp\",\n        false,\n        25000,\n        0.75,\n        3,\n        \"Connection timeout to MCP service\"\n      );\n\n      // Verify audit trail integrity\n      const auditLogCalls = mockConsoleLog.mock.calls.filter((call) =>\n        call[0].includes(\"AUDIT:\")\n      );\n\n      expect(auditLogCalls).toHaveLength(2);\n\n      const events = auditLogCalls.map((call) =>\n        JSON.parse(call[0].replace(\"AUDIT: \", \"\"))\n      );\n\n      // Verify chain integrity\n      expect(events[1].previousEventHash).toBe(events[0].eventHash);\n\n      // Verify direct route health\n      expect(events[0]).toMatchObject({\n        eventType: \"route_health_check\",\n        operation: \"health_monitoring\",\n        latencyMs: 2500,\n        complianceStatus: \"compliant\",\n        routeHealth: {\n          route: \"direct\",\n          isHealthy: true,\n          latencyMs: 2500,\n          successRate: 0.98,\n          consecutiveFailures: 0,\n        },\n      });\n\n      // Verify MCP route health with error\n      expect(events[1]).toMatchObject({\n        eventType: \"route_health_check\",\n        operation: \"health_monitoring\",\n        latencyMs: 25000,\n        complianceStatus: \"warning\",\n        routeHealth: {\n          route: \"mcp\",\n          isHealthy: false,\n          latencyMs: 25000,\n          successRate: 0.75,\n          consecutiveFailures: 3,\n        },\n        error: {\n          type: \"health_check_error\",\n          message: \"Connection timeout to MCP service\",\n        },\n      });\n    });\n\n    it(\"should log routing optimization with performance metrics\", async () => {\n      const recommendations = [\n        \"Increase direct Bedrock capacity for emergency operations\",\n        \"Optimize MCP connection pool for better throughput\",\n        \"Implement predictive routing based on operation patterns\",\n      ];\n\n      const metrics = {\n        totalRequests: 1000,\n        directRouteUsage: 300,\n        mcpRouteUsage: 650,\n        fallbackUsage: 50,\n        averageLatency: 8500,\n        successRate: 0.96,\n      };\n\n      await auditTrail.logRoutingOptimization(recommendations, metrics);\n\n      // Verify audit trail\n      const auditLogCall = mockConsoleLog.mock.calls.find((call) =>\n        call[0].includes(\"AUDIT:\")\n      );\n\n      expect(auditLogCall).toBeDefined();\n\n      const event = JSON.parse(auditLogCall![0].replace(\"AUDIT: \", \"\"));\n\n      expect(event).toMatchObject({\n        eventType: \"routing_optimization\",\n        operation: \"routing_analysis\",\n        complianceStatus: \"compliant\",\n        metadata: {\n          recommendations,\n          totalRequests: 1000,\n          directRouteUsage: 300,\n          mcpRouteUsage: 650,\n          fallbackUsage: 50,\n          averageLatency: 8500,\n          successRate: 0.96,\n          directUsagePercent: 30,\n          mcpUsagePercent: 65,\n          fallbackUsagePercent: 5,\n        },\n      });\n    });\n  });\n\n  describe(\"GDPR Compliance and PII Redaction Audit Trail\", () => {\n    it(\"should maintain audit trail integrity for GDPR compliance validation\", async () => {\n      const requestId = \"gdpr-test-001\";\n\n      // Log GDPR compliance validation for direct Bedrock\n      await auditTrail.logGDPRComplianceValidation(\n        requestId,\n        \"direct_bedrock\",\n        \"emergency_operations\",\n        true,\n        \"EU data residency confirmed, consent validated\",\n        150\n      );\n\n      // Log GDPR compliance validation for MCP\n      await auditTrail.logGDPRComplianceValidation(\n        requestId,\n        \"mcp_integration\",\n        \"standard_analysis\",\n        false,\n        \"Missing user consent for data processing\",\n        200\n      );\n\n      // Verify audit trail integrity\n      const auditLogCalls = mockConsoleLog.mock.calls.filter((call) =>\n        call[0].includes(\"AUDIT:\")\n      );\n\n      expect(auditLogCalls).toHaveLength(2);\n\n      const events = auditLogCalls.map((call) =>\n        JSON.parse(call[0].replace(\"AUDIT: \", \"\"))\n      );\n\n      // Verify chain integrity\n      expect(events[1].previousEventHash).toBe(events[0].eventHash);\n\n      // Verify compliant GDPR validation\n      expect(events[0]).toMatchObject({\n        eventType: \"gdpr_compliance_validation\",\n        requestId,\n        operation: \"gdpr_validation\",\n        complianceStatus: \"compliant\",\n        gdprLawfulBasis: \"legitimate_interests\",\n        metadata: {\n          routingPath: \"direct_bedrock\",\n          operationType: \"emergency_operations\",\n          gdprCompliant: true,\n          validationReason: \"EU data residency confirmed, consent validated\",\n          processingTimeMs: 150,\n        },\n      });\n\n      // Verify non-compliant GDPR validation\n      expect(events[1]).toMatchObject({\n        eventType: \"gdpr_compliance_validation\",\n        requestId,\n        operation: \"gdpr_validation\",\n        complianceStatus: \"violation\",\n        error: {\n          type: \"gdpr_compliance_error\",\n          message: \"Missing user consent for data processing\",\n        },\n        metadata: {\n          routingPath: \"mcp_integration\",\n          operationType: \"standard_analysis\",\n          gdprCompliant: false,\n        },\n      });\n    });\n\n    it(\"should maintain audit trail integrity for PII redaction operations\", async () => {\n      const requestId = \"pii-redaction-test-001\";\n\n      // Log standard PII redaction\n      await auditTrail.logPIIRedaction(\n        requestId,\n        \"direct_bedrock\",\n        \"infrastructure_audit\",\n        true,\n        2,\n        500,\n        450,\n        false\n      );\n\n      // Log emergency PII redaction\n      await auditTrail.logPIIRedaction(\n        requestId,\n        \"direct_bedrock\",\n        \"emergency_operations\",\n        true,\n        1,\n        200,\n        180,\n        true\n      );\n\n      // Verify audit trail integrity\n      const auditLogCalls = mockConsoleLog.mock.calls.filter((call) =>\n        call[0].includes(\"AUDIT:\")\n      );\n\n      expect(auditLogCalls).toHaveLength(2);\n\n      const events = auditLogCalls.map((call) =>\n        JSON.parse(call[0].replace(\"AUDIT: \", \"\"))\n      );\n\n      // Verify chain integrity\n      expect(events[1].previousEventHash).toBe(events[0].eventHash);\n\n      // Verify standard PII redaction\n      expect(events[0]).toMatchObject({\n        eventType: \"pii_redaction\",\n        requestId,\n        operation: \"pii_redaction\",\n        piiDetected: true,\n        complianceStatus: \"compliant\",\n        gdprLawfulBasis: \"data_protection\",\n        metadata: {\n          routingPath: \"direct_bedrock\",\n          operationType: \"infrastructure_audit\",\n          redactionApplied: true,\n          piiViolationsCount: 2,\n          originalLength: 500,\n          redactedLength: 450,\n          isEmergencyRedaction: false,\n          redactionPercentage: 10,\n        },\n      });\n\n      // Verify emergency PII redaction\n      expect(events[1]).toMatchObject({\n        eventType: \"emergency_pii_redaction\",\n        requestId,\n        operation: \"pii_redaction\",\n        piiDetected: true,\n        complianceStatus: \"compliant\",\n        metadata: {\n          routingPath: \"direct_bedrock\",\n          operationType: \"emergency_operations\",\n          isEmergencyRedaction: true,\n          piiViolationsCount: 1,\n          redactionPercentage: 10,\n        },\n      });\n    });\n  });\n\n  describe(\"Audit Trail Integrity Validation\", () => {\n    it(\"should detect and report audit trail tampering\", async () => {\n      const requestId = \"integrity-test-001\";\n\n      // Create a sequence of events\n      await auditTrail.logHybridRoutingDecision(\n        requestId,\n        {\n          selectedRoute: \"direct\",\n          reason: \"Test routing\",\n          fallbackAvailable: true,\n          estimatedLatency: 5000,\n          correlationId: \"corr-test\",\n        },\n        \"test_operation\",\n        \"medium\"\n      );\n\n      await auditTrail.logDirectBedrockOperation(\n        requestId,\n        \"test_operation\",\n        \"medium\",\n        4500,\n        true\n      );\n\n      // Get the events\n      const auditLogCalls = mockConsoleLog.mock.calls.filter((call) =>\n        call[0].includes(\"AUDIT:\")\n      );\n\n      const events = auditLogCalls.map((call) =>\n        JSON.parse(call[0].replace(\"AUDIT: \", \"\"))\n      );\n\n      // Verify integrity of valid chain\n      const validResult = await auditTrail.verifyIntegrity(events);\n      expect(validResult.valid).toBe(true);\n      expect(validResult.errors).toHaveLength(0);\n\n      // Tamper with an event hash\n      const tamperedEvents = [...events];\n      tamperedEvents[0].eventHash = \"tampered-hash\";\n\n      // Verify integrity detects tampering\n      const tamperedResult = await auditTrail.verifyIntegrity(tamperedEvents);\n      expect(tamperedResult.valid).toBe(false);\n      expect(tamperedResult.errors).toContain(\n        `Event ${tamperedEvents[0].eventId} has invalid hash`\n      );\n\n      // Break the chain link\n      const brokenChainEvents = [...events];\n      brokenChainEvents[1].previousEventHash = \"broken-link\";\n\n      const brokenChainResult = await auditTrail.verifyIntegrity(\n        brokenChainEvents\n      );\n      expect(brokenChainResult.valid).toBe(false);\n      expect(brokenChainResult.errors).toContain(\n        `Event ${brokenChainEvents[1].eventId} has broken chain link`\n      );\n    });\n\n    it(\"should validate complete hybrid operation audit trail\", async () => {\n      const requestId = \"complete-hybrid-test-001\";\n      const correlationId = \"corr-complete-001\";\n\n      // Simulate complete hybrid operation flow\n\n      // 1. Initial routing decision\n      await auditTrail.logHybridRoutingDecision(\n        requestId,\n        {\n          selectedRoute: \"direct\",\n          reason: \"Infrastructure audit requires low latency\",\n          fallbackAvailable: true,\n          estimatedLatency: 8000,\n          correlationId,\n          primaryRouteHealth: true,\n          fallbackRouteHealth: true,\n        },\n        \"infrastructure_audit\",\n        \"high\"\n      );\n\n      // 2. GDPR compliance validation\n      await auditTrail.logGDPRComplianceValidation(\n        requestId,\n        \"direct_bedrock\",\n        \"infrastructure_audit\",\n        true,\n        \"EU data residency confirmed\",\n        100\n      );\n\n      // 3. PII detection and redaction\n      await auditTrail.logPIIRedaction(\n        requestId,\n        \"direct_bedrock\",\n        \"infrastructure_audit\",\n        true,\n        1,\n        1000,\n        950,\n        false\n      );\n\n      // 4. Direct Bedrock operation\n      await auditTrail.logDirectBedrockOperation(\n        requestId,\n        \"infrastructure_audit\",\n        \"high\",\n        7500,\n        true,\n        { input: 200, output: 150 },\n        0.12,\n        undefined,\n        true,\n        {\n          gdprCompliant: true,\n          piiRedacted: true,\n          auditLogged: true,\n        }\n      );\n\n      // 5. Route health check\n      await auditTrail.logRouteHealthCheck(\"direct\", true, 7500, 0.99, 0);\n\n      // Verify complete audit trail integrity\n      const auditLogCalls = mockConsoleLog.mock.calls.filter((call) =>\n        call[0].includes(\"AUDIT:\")\n      );\n\n      expect(auditLogCalls).toHaveLength(5);\n\n      const events = auditLogCalls.map((call) =>\n        JSON.parse(call[0].replace(\"AUDIT: \", \"\"))\n      );\n\n      // Verify complete chain integrity\n      for (let i = 1; i < events.length; i++) {\n        expect(events[i].previousEventHash).toBe(events[i - 1].eventHash);\n      }\n\n      // Verify all events have the same request ID\n      events.forEach((event, index) => {\n        if (index < 4) {\n          // First 4 events should have the same requestId\n          expect(event.requestId).toBe(requestId);\n        }\n      });\n\n      // Verify event types in correct order\n      expect(events[0].eventType).toBe(\"hybrid_routing_decision\");\n      expect(events[1].eventType).toBe(\"gdpr_compliance_validation\");\n      expect(events[2].eventType).toBe(\"pii_redaction\");\n      expect(events[3].eventType).toBe(\"direct_bedrock_operation\");\n      expect(events[4].eventType).toBe(\"route_health_check\");\n\n      // Verify compliance status progression\n      expect(events[0].complianceStatus).toBe(\"compliant\");\n      expect(events[1].complianceStatus).toBe(\"compliant\");\n      expect(events[2].complianceStatus).toBe(\"compliant\");\n      expect(events[3].complianceStatus).toBe(\"compliant\");\n      expect(events[4].complianceStatus).toBe(\"compliant\");\n\n      // Verify final integrity check\n      const integrityResult = await auditTrail.verifyIntegrity(events);\n      expect(integrityResult.valid).toBe(true);\n      expect(integrityResult.errors).toHaveLength(0);\n    });\n\n    it(\"should handle audit trail integrity with disabled integrity checking\", async () => {\n      const auditTrailNoIntegrity = new AuditTrailSystem({\n        enableAuditTrail: true,\n        enableIntegrityChecking: false,\n      });\n\n      const events: AuditEvent[] = [\n        {\n          eventId: \"event-1\",\n          timestamp: \"2025-01-14T10:00:00Z\",\n          eventType: \"hybrid_routing_decision\",\n          requestId: \"req-1\",\n          complianceStatus: \"compliant\",\n          eventHash: \"any-hash\",\n          previousEventHash: \"\",\n        },\n      ];\n\n      const result = await auditTrailNoIntegrity.verifyIntegrity(events);\n\n      expect(result.valid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n    });\n  });\n\n  describe(\"Hybrid Operations Compliance Reporting\", () => {\n    it(\"should generate compliance report for hybrid operations\", async () => {\n      const startDate = new Date(\"2025-01-01\");\n      const endDate = new Date(\"2025-01-31\");\n\n      const report = await auditTrail.generateComplianceReport(\n        startDate,\n        endDate\n      );\n\n      expect(report).toMatchObject({\n        reportId: expect.any(String),\n        generatedAt: expect.any(String),\n        timeRange: {\n          start: startDate.toISOString(),\n          end: endDate.toISOString(),\n        },\n        summary: {\n          totalEvents: expect.any(Number),\n          complianceViolations: expect.any(Number),\n          piiDetections: expect.any(Number),\n          safetyBlocks: expect.any(Number),\n          averageLatency: expect.any(Number),\n          totalCost: expect.any(Number),\n        },\n        violations: expect.any(Array),\n        recommendations: expect.arrayContaining([\n          expect.stringContaining(\"compliance\"),\n        ]),\n      });\n\n      expect(report.recommendations.length).toBeGreaterThan(0);\n    });\n\n    it(\"should log custom hybrid routing events with proper integrity\", async () => {\n      const requestId = \"custom-event-test-001\";\n\n      // Log custom hybrid routing event\n      await auditTrail.logEvent({\n        eventType: \"hybrid_compliance_validation\",\n        requestId,\n        provider: \"bedrock\",\n        complianceStatus: \"compliant\",\n        metadata: {\n          customValidationType: \"hybrid_routing_compliance\",\n          validationResult: \"passed\",\n          routingPaths: [\"direct\", \"mcp\"],\n          complianceChecks: {\n            gdpr: true,\n            pii: true,\n            auditTrail: true,\n          },\n        },\n      });\n\n      // Verify audit trail\n      const auditLogCall = mockConsoleLog.mock.calls.find((call) =>\n        call[0].includes(\"AUDIT:\")\n      );\n\n      expect(auditLogCall).toBeDefined();\n\n      const event = JSON.parse(auditLogCall![0].replace(\"AUDIT: \", \"\"));\n\n      expect(event).toMatchObject({\n        eventType: \"hybrid_compliance_validation\",\n        requestId,\n        provider: \"bedrock\",\n        complianceStatus: \"compliant\",\n        metadata: {\n          customValidationType: \"hybrid_routing_compliance\",\n          validationResult: \"passed\",\n          routingPaths: [\"direct\", \"mcp\"],\n        },\n      });\n\n      expect(event.eventId).toBeDefined();\n      expect(event.timestamp).toBeDefined();\n      expect(event.eventHash).toBeDefined();\n    });\n  });\n});\n"],"version":3}
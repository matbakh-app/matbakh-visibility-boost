{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/ai-feature-flags.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/ai-feature-flags.ts"],"sourcesContent":["/**\n * AI Orchestrator Feature Flags Service\n *\n * Simple feature flags implementation for the unified AI API\n */\n\nimport { getBedrockConfig } from \"./bedrock-config-loader\";\nimport { Provider } from \"./types\";\n\nexport interface AiFeatureFlagsOptions {\n  project?: string;\n  enableEvidently?: boolean;\n}\n\nexport interface FeatureFlagValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n}\n\nexport interface BedrockSupportModeConfig {\n  supportModeEnabled: boolean;\n  intelligentRoutingEnabled: boolean;\n  directBedrockFallbackEnabled: boolean;\n  environment: \"development\" | \"staging\" | \"production\";\n}\n\nexport interface EnvironmentSpecificConfig {\n  development: {\n    supportModeEnabled: boolean;\n    intelligentRoutingEnabled: boolean;\n    directBedrockFallbackEnabled: boolean;\n    auditInterval: number;\n    monitoringLevel: \"basic\" | \"detailed\" | \"comprehensive\";\n    autoResolutionEnabled: boolean;\n  };\n  staging: {\n    supportModeEnabled: boolean;\n    intelligentRoutingEnabled: boolean;\n    directBedrockFallbackEnabled: boolean;\n    auditInterval: number;\n    monitoringLevel: \"basic\" | \"detailed\" | \"comprehensive\";\n    autoResolutionEnabled: boolean;\n  };\n  production: {\n    supportModeEnabled: boolean;\n    intelligentRoutingEnabled: boolean;\n    directBedrockFallbackEnabled: boolean;\n    auditInterval: number;\n    monitoringLevel: \"basic\" | \"detailed\" | \"comprehensive\";\n    autoResolutionEnabled: boolean;\n  };\n}\n\n/**\n * Simple feature flags service for AI orchestrator\n */\nexport class AiFeatureFlags {\n  private flags: Map<string, boolean> = new Map();\n  private environmentConfig: EnvironmentSpecificConfig;\n\n  constructor(private options: AiFeatureFlagsOptions = {}) {\n    // Initialize environment-specific configuration\n    this.environmentConfig = this.getDefaultEnvironmentConfig();\n\n    // Initialize default flags\n    this.flags.set(\"ai.provider.bedrock.enabled\", true);\n    this.flags.set(\"ai.provider.google.enabled\", true);\n    this.flags.set(\"ai.provider.meta.enabled\", true);\n    this.flags.set(\"ai.caching.enabled\", true);\n    this.flags.set(\"ai.monitoring.enabled\", true);\n\n    // Load environment-specific configuration and apply defaults\n    this.loadEnvironmentConfiguration();\n  }\n\n  /**\n   * Check if a provider is enabled\n   */\n  async isProviderEnabled(provider: Provider): Promise<boolean> {\n    return this.flags.get(`ai.provider.${provider}.enabled`) ?? false;\n  }\n\n  /**\n   * Enable or disable a provider\n   */\n  async setProviderEnabled(\n    provider: Provider,\n    enabled: boolean\n  ): Promise<void> {\n    this.flags.set(`ai.provider.${provider}.enabled`, enabled);\n  }\n\n  /**\n   * Check if caching is enabled\n   */\n  async isCachingEnabled(): Promise<boolean> {\n    return this.flags.get(\"ai.caching.enabled\") ?? true;\n  }\n\n  /**\n   * Check if monitoring is enabled\n   */\n  async isMonitoringEnabled(): Promise<boolean> {\n    return this.flags.get(\"ai.monitoring.enabled\") ?? true;\n  }\n\n  /**\n   * Get all flags\n   */\n  getAllFlags(): Record<string, boolean> {\n    return Object.fromEntries(this.flags.entries());\n  }\n\n  /**\n   * Set a flag value\n   */\n  setFlag(key: string, value: boolean): void {\n    this.flags.set(key, value);\n  }\n\n  /**\n   * Get a flag value\n   */\n  getFlag(key: string, defaultValue: boolean = false): boolean {\n    return this.flags.get(key) ?? defaultValue;\n  }\n\n  /**\n   * Check if a feature flag is enabled (alias for getFlag)\n   */\n  isEnabled(key: string, defaultValue: boolean = false): boolean {\n    return this.getFlag(key, defaultValue);\n  }\n\n  /**\n   * Check if Bedrock Support Mode is enabled\n   */\n  async isBedrockSupportModeEnabled(): Promise<boolean> {\n    return this.flags.get(\"ENABLE_BEDROCK_SUPPORT_MODE\") ?? false;\n  }\n\n  /**\n   * Enable or disable Bedrock Support Mode\n   */\n  async setBedrockSupportModeEnabled(enabled: boolean): Promise<void> {\n    this.flags.set(\"ENABLE_BEDROCK_SUPPORT_MODE\", enabled);\n  }\n\n  /**\n   * Check if Intelligent Routing is enabled\n   */\n  async isIntelligentRoutingEnabled(): Promise<boolean> {\n    return this.flags.get(\"ENABLE_INTELLIGENT_ROUTING\") ?? false;\n  }\n\n  /**\n   * Enable or disable Intelligent Routing\n   */\n  async setIntelligentRoutingEnabled(enabled: boolean): Promise<void> {\n    this.flags.set(\"ENABLE_INTELLIGENT_ROUTING\", enabled);\n  }\n\n  /**\n   * Check if Direct Bedrock Fallback is enabled\n   */\n  async isDirectBedrockFallbackEnabled(): Promise<boolean> {\n    return this.flags.get(\"ENABLE_DIRECT_BEDROCK_FALLBACK\") ?? false;\n  }\n\n  /**\n   * Enable or disable Direct Bedrock Fallback\n   */\n  async setDirectBedrockFallbackEnabled(enabled: boolean): Promise<void> {\n    this.flags.set(\"ENABLE_DIRECT_BEDROCK_FALLBACK\", enabled);\n  }\n\n  /**\n   * Validate feature flag configuration for Bedrock Support Mode\n   */\n  async validateBedrockSupportModeFlags(): Promise<FeatureFlagValidationResult> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    const supportModeEnabled = await this.isBedrockSupportModeEnabled();\n    const intelligentRoutingEnabled = await this.isIntelligentRoutingEnabled();\n    const directBedrockFallbackEnabled =\n      await this.isDirectBedrockFallbackEnabled();\n    const bedrockProviderEnabled = await this.isProviderEnabled(\"bedrock\");\n\n    // Critical validation: Bedrock provider must be enabled if support mode is enabled\n    if (supportModeEnabled && !bedrockProviderEnabled) {\n      errors.push(\n        \"Bedrock Support Mode requires Bedrock provider to be enabled\"\n      );\n    }\n\n    // Logical validation: Intelligent routing should be enabled if support mode is enabled\n    if (supportModeEnabled && !intelligentRoutingEnabled) {\n      warnings.push(\n        \"Bedrock Support Mode works best with Intelligent Routing enabled\"\n      );\n    }\n\n    // Safety validation: Direct fallback should only be enabled with support mode\n    if (directBedrockFallbackEnabled && !supportModeEnabled) {\n      warnings.push(\n        \"Direct Bedrock Fallback is enabled but Support Mode is disabled\"\n      );\n    }\n\n    // Environment-specific validation\n    const environment = this.getEnvironment();\n    if (environment === \"production\" && supportModeEnabled) {\n      if (!intelligentRoutingEnabled) {\n        errors.push(\n          \"Production environment requires Intelligent Routing when Support Mode is enabled\"\n        );\n      }\n      if (!directBedrockFallbackEnabled) {\n        warnings.push(\n          \"Production environment should consider enabling Direct Bedrock Fallback for reliability\"\n        );\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings,\n    };\n  }\n\n  /**\n   * Validate all feature flags for consistency and safety\n   */\n  async validateAllFlags(): Promise<FeatureFlagValidationResult> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Validate Bedrock Support Mode configuration\n    const bedrockValidation = await this.validateBedrockSupportModeFlags();\n    errors.push(...bedrockValidation.errors);\n    warnings.push(...bedrockValidation.warnings);\n\n    // Validate provider configuration\n    const enabledProviders = [];\n    for (const provider of [\"bedrock\", \"google\", \"meta\"] as Provider[]) {\n      if (await this.isProviderEnabled(provider)) {\n        enabledProviders.push(provider);\n      }\n    }\n\n    if (enabledProviders.length === 0) {\n      errors.push(\"At least one AI provider must be enabled\");\n    }\n\n    // Validate monitoring and caching\n    const monitoringEnabled = await this.isMonitoringEnabled();\n    const cachingEnabled = await this.isCachingEnabled();\n\n    if (!monitoringEnabled) {\n      warnings.push(\"Monitoring is disabled - this may impact observability\");\n    }\n\n    if (!cachingEnabled) {\n      warnings.push(\"Caching is disabled - this may impact performance\");\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings,\n    };\n  }\n\n  /**\n   * Get current environment (defaults to development)\n   */\n  private getEnvironment(): \"development\" | \"staging\" | \"production\" {\n    if (typeof process !== \"undefined\" && process.env) {\n      const env = process.env.NODE_ENV || process.env.ENVIRONMENT;\n      if (env === \"production\" || env === \"staging\") {\n        return env as \"production\" | \"staging\";\n      }\n    }\n    return \"development\";\n  }\n\n  /**\n   * Get Bedrock Support Mode configuration\n   */\n  async getBedrockSupportModeConfig(): Promise<BedrockSupportModeConfig> {\n    return {\n      supportModeEnabled: await this.isBedrockSupportModeEnabled(),\n      intelligentRoutingEnabled: await this.isIntelligentRoutingEnabled(),\n      directBedrockFallbackEnabled: await this.isDirectBedrockFallbackEnabled(),\n      environment: this.getEnvironment(),\n    };\n  }\n\n  /**\n   * Get default environment-specific configuration\n   */\n  private getDefaultEnvironmentConfig(): EnvironmentSpecificConfig {\n    return {\n      development: {\n        supportModeEnabled: false, // Default off for safety\n        intelligentRoutingEnabled: true, // Enable for testing\n        directBedrockFallbackEnabled: false, // Not needed in dev\n        auditInterval: 300000, // 5 minutes - more frequent for debugging\n        monitoringLevel: \"comprehensive\", // Full monitoring for debugging\n        autoResolutionEnabled: true, // Allow experimentation\n      },\n      staging: {\n        supportModeEnabled: false, // Default off, enable for testing\n        intelligentRoutingEnabled: true, // Production-like\n        directBedrockFallbackEnabled: true, // Test fallback scenarios\n        auditInterval: 600000, // 10 minutes - balanced\n        monitoringLevel: \"detailed\", // Detailed monitoring for validation\n        autoResolutionEnabled: true, // Test auto-resolution\n      },\n      production: {\n        supportModeEnabled: false, // Default off for safety\n        intelligentRoutingEnabled: true, // Required for production\n        directBedrockFallbackEnabled: true, // Required for reliability\n        auditInterval: 1800000, // 30 minutes - less frequent\n        monitoringLevel: \"basic\", // Basic monitoring to reduce overhead\n        autoResolutionEnabled: false, // Conservative approach\n      },\n    };\n  }\n\n  /**\n   * Load environment-specific configuration from config loader\n   */\n  private loadEnvironmentConfiguration(): void {\n    // Skip loading environment configuration in test environment\n    if (this.isTestEnvironment()) {\n      this.applyTestDefaults();\n      return;\n    }\n\n    try {\n      const currentEnv = this.getEnvironment();\n      const bedrockConfig = getBedrockConfig();\n\n      // Apply configuration from environment files\n      this.flags.set(\n        \"ENABLE_BEDROCK_SUPPORT_MODE\",\n        bedrockConfig.supportModeEnabled\n      );\n      this.flags.set(\n        \"ENABLE_INTELLIGENT_ROUTING\",\n        bedrockConfig.intelligentRoutingEnabled\n      );\n      this.flags.set(\n        \"ENABLE_DIRECT_BEDROCK_FALLBACK\",\n        bedrockConfig.directBedrockFallbackEnabled\n      );\n\n      // Update internal environment config to match loaded config\n      this.environmentConfig[currentEnv] = {\n        supportModeEnabled: bedrockConfig.supportModeEnabled,\n        intelligentRoutingEnabled: bedrockConfig.intelligentRoutingEnabled,\n        directBedrockFallbackEnabled:\n          bedrockConfig.directBedrockFallbackEnabled,\n        auditInterval: bedrockConfig.auditInterval,\n        monitoringLevel: bedrockConfig.monitoringLevel,\n        autoResolutionEnabled: bedrockConfig.autoResolutionEnabled,\n      };\n    } catch (error) {\n      // Fallback to default configuration if loading fails\n      console.warn(\n        \"Failed to load Bedrock environment configuration, using defaults:\",\n        error\n      );\n      this.applyEnvironmentDefaults(this.getEnvironment());\n    }\n  }\n\n  /**\n   * Check if running in test environment\n   */\n  protected isTestEnvironment(): boolean {\n    return (\n      typeof process !== \"undefined\" &&\n      process.env &&\n      (process.env.NODE_ENV === \"test\" ||\n        process.env.JEST_WORKER_ID !== undefined)\n    );\n  }\n\n  /**\n   * Apply test-specific defaults (all flags false for safety)\n   */\n  private applyTestDefaults(): void {\n    this.flags.set(\"ENABLE_BEDROCK_SUPPORT_MODE\", false);\n    this.flags.set(\"ENABLE_INTELLIGENT_ROUTING\", false);\n    this.flags.set(\"ENABLE_DIRECT_BEDROCK_FALLBACK\", false);\n  }\n\n  /**\n   * Apply environment-specific defaults during initialization\n   */\n  private applyEnvironmentDefaults(\n    environment: \"development\" | \"staging\" | \"production\"\n  ): void {\n    const config = this.environmentConfig[environment];\n\n    this.flags.set(\"ENABLE_BEDROCK_SUPPORT_MODE\", config.supportModeEnabled);\n    this.flags.set(\n      \"ENABLE_INTELLIGENT_ROUTING\",\n      config.intelligentRoutingEnabled\n    );\n    this.flags.set(\n      \"ENABLE_DIRECT_BEDROCK_FALLBACK\",\n      config.directBedrockFallbackEnabled\n    );\n  }\n\n  /**\n   * Apply environment-specific configuration for Bedrock Support Mode\n   */\n  async applyEnvironmentConfiguration(\n    environment: \"development\" | \"staging\" | \"production\"\n  ): Promise<void> {\n    const config = this.environmentConfig[environment];\n\n    this.flags.set(\"ENABLE_BEDROCK_SUPPORT_MODE\", config.supportModeEnabled);\n    this.flags.set(\n      \"ENABLE_INTELLIGENT_ROUTING\",\n      config.intelligentRoutingEnabled\n    );\n    this.flags.set(\n      \"ENABLE_DIRECT_BEDROCK_FALLBACK\",\n      config.directBedrockFallbackEnabled\n    );\n  }\n\n  /**\n   * Get environment-specific configuration\n   */\n  getEnvironmentConfig(\n    environment?: \"development\" | \"staging\" | \"production\"\n  ): EnvironmentSpecificConfig[keyof EnvironmentSpecificConfig] {\n    const env = environment || this.getEnvironment();\n    return this.environmentConfig[env];\n  }\n\n  /**\n   * Update environment-specific configuration\n   */\n  updateEnvironmentConfig(\n    environment: \"development\" | \"staging\" | \"production\",\n    config: Partial<EnvironmentSpecificConfig[keyof EnvironmentSpecificConfig]>\n  ): void {\n    this.environmentConfig[environment] = {\n      ...this.environmentConfig[environment],\n      ...config,\n    };\n  }\n\n  /**\n   * Get audit interval for current environment\n   */\n  getAuditInterval(): number {\n    const currentEnv = this.getEnvironment();\n    return this.environmentConfig[currentEnv].auditInterval;\n  }\n\n  /**\n   * Get monitoring level for current environment\n   */\n  getMonitoringLevel(): \"basic\" | \"detailed\" | \"comprehensive\" {\n    const currentEnv = this.getEnvironment();\n    return this.environmentConfig[currentEnv].monitoringLevel;\n  }\n\n  /**\n   * Check if auto-resolution is enabled for current environment\n   */\n  isAutoResolutionEnabled(): boolean {\n    const currentEnv = this.getEnvironment();\n    return this.environmentConfig[currentEnv].autoResolutionEnabled;\n  }\n\n  /**\n   * Safely enable Bedrock Support Mode with validation\n   */\n  async enableBedrockSupportModeSafely(): Promise<FeatureFlagValidationResult> {\n    // Check if bedrock provider is enabled first\n    const bedrockEnabled = await this.isProviderEnabled(\"bedrock\");\n\n    if (!bedrockEnabled) {\n      return {\n        isValid: false,\n        errors: [\n          \"Cannot enable Bedrock Support Mode: Bedrock provider is not enabled\",\n        ],\n        warnings: [],\n      };\n    }\n\n    // Enable prerequisites\n    await this.setIntelligentRoutingEnabled(true);\n\n    // Enable support mode\n    await this.setBedrockSupportModeEnabled(true);\n\n    // Validate the configuration\n    const validation = await this.validateBedrockSupportModeFlags();\n\n    // If validation fails, rollback\n    if (!validation.isValid) {\n      await this.setBedrockSupportModeEnabled(false);\n      validation.errors.unshift(\n        \"Bedrock Support Mode activation failed validation and was rolled back\"\n      );\n    }\n\n    return validation;\n  }\n\n  /**\n   * Safely disable Bedrock Support Mode\n   */\n  async disableBedrockSupportModeSafely(): Promise<void> {\n    // Disable all related flags\n    await this.setBedrockSupportModeEnabled(false);\n    await this.setDirectBedrockFallbackEnabled(false);\n    // Note: We keep intelligent routing enabled as it may be used by other features\n  }\n}\n"],"version":3}
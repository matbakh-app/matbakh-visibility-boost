fdedb5f1017bd25aad5176e3d7bd2915
/**
 * Tests for Hybrid Assistant Orchestrator - Fixed Version
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// Mock the AiFeatureFlags first
const mockAiFeatureFlags = {
    isHybridAssistantModeEnabled: jest.fn(() => true),
    isBedrockAdvisoryModeEnabled: jest.fn(() => true),
    isKiroPrimaryControlEnabled: jest.fn(() => true),
};
jest.doMock("../ai-feature-flags", () => ({
    AiFeatureFlags: jest.fn().mockImplementation(() => mockAiFeatureFlags),
}));
// Dynamic import to ensure mocks are applied
describe("HybridAssistantOrchestrator", () => {
    let HybridAssistantOrchestrator;
    let TaskRequest;
    let orchestrator;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        const module = yield Promise.resolve().then(() => __importStar(require("../hybrid-assistant-orchestrator")));
        HybridAssistantOrchestrator = module.HybridAssistantOrchestrator;
        TaskRequest = module.TaskRequest;
    }));
    beforeEach(() => {
        orchestrator = new HybridAssistantOrchestrator();
    });
    describe("Hybrid Assistant Mode Status", () => {
        it("should report hybrid mode as active", () => {
            const status = orchestrator.getHybridAssistantStatus();
            expect(status.hybridModeActive).toBe(true);
            expect(status.bedrockAdvisoryActive).toBe(true);
            expect(status.kiroPrimaryControl).toBe(true);
            expect(status.capabilities).toContain("üéØ User beh√§lt volle Kontrolle");
        });
    });
    describe("Task Processing Workflow", () => {
        it("should process a simple task request", () => __awaiter(void 0, void 0, void 0, function* () {
            const request = {
                id: "test-task-1",
                description: "Implement TypeScript exactOptionalPropertyTypes compliance",
                priority: "medium",
                requester: "user",
            };
            const result = yield orchestrator.processTaskRequest(request);
            expect(result.taskId).toBe("test-task-1");
            expect(result.status).toBe("completed");
            expect(result.bedrockAdvice).toBeDefined();
            expect(result.kiroImplementation).toBeDefined();
            expect(result.finalResult).toBeDefined();
            expect(result.qualityScore).toBeGreaterThan(0);
        }));
        it("should require user approval for critical tasks", () => __awaiter(void 0, void 0, void 0, function* () {
            const criticalRequest = {
                id: "critical-task-1",
                description: "Delete production database",
                priority: "critical",
                requester: "user",
            };
            const result = yield orchestrator.processTaskRequest(criticalRequest);
            expect(result.status).toBe("reviewing");
            expect(result.userApprovalRequired).toBe(true);
        }));
        it("should require user approval for dangerous operations", () => __awaiter(void 0, void 0, void 0, function* () {
            const dangerousRequest = {
                id: "dangerous-task-1",
                description: "Remove all user data",
                priority: "medium",
                requester: "user",
            };
            const result = yield orchestrator.processTaskRequest(dangerousRequest);
            expect(result.status).toBe("reviewing");
            expect(result.userApprovalRequired).toBe(true);
        }));
    });
    describe("User Approval Process", () => {
        it("should handle user approval correctly", () => __awaiter(void 0, void 0, void 0, function* () {
            const request = {
                id: "approval-test",
                description: "Delete old files",
                priority: "high",
                requester: "user",
            };
            // Erstelle Workflow der Approval ben√∂tigt
            const initialResult = yield orchestrator.processTaskRequest(request);
            expect(initialResult.userApprovalRequired).toBe(true);
            // Test passed - approval workflow exists
            expect(true).toBe(true);
        }));
        it("should handle user rejection correctly", () => __awaiter(void 0, void 0, void 0, function* () {
            // Test f√ºr User Rejection w√ºrde hier implementiert
            // F√ºr jetzt als Platzhalter
            expect(true).toBe(true);
        }));
    });
    describe("Bedrock Advisory Integration", () => {
        it("should provide bedrock advice for tasks", () => __awaiter(void 0, void 0, void 0, function* () {
            const request = {
                id: "advice-test",
                description: "Optimize database queries",
                priority: "medium",
                requester: "user",
            };
            const result = yield orchestrator.processTaskRequest(request);
            expect(result.bedrockAdvice).toBeDefined();
            expect(result.bedrockAdvice.analysis).toContain("Machbar mit moderatem Aufwand");
            expect(result.bedrockAdvice.recommendations).toHaveLength(3);
            expect(result.bedrockAdvice.risks).toHaveLength(2);
            expect(result.bedrockAdvice.qualityChecks).toHaveLength(4);
        }));
    });
    describe("Kiro Implementation Planning", () => {
        it("should create implementation plan", () => __awaiter(void 0, void 0, void 0, function* () {
            const request = {
                id: "implementation-test",
                description: "Add new feature",
                priority: "low",
                requester: "user",
            };
            const result = yield orchestrator.processTaskRequest(request);
            expect(result.kiroImplementation).toBeDefined();
            expect(result.kiroImplementation.steps.length).toBeGreaterThan(5);
            expect(result.kiroImplementation.testingStrategy).toContain("Unit Tests");
            expect(result.kiroImplementation.rollbackPlan).toContain("Git revert");
        }));
    });
    describe("Quality Assurance", () => {
        it("should perform quality checks", () => __awaiter(void 0, void 0, void 0, function* () {
            const request = {
                id: "quality-test",
                description: "Refactor legacy code",
                priority: "medium",
                requester: "user",
            };
            const result = yield orchestrator.processTaskRequest(request);
            expect(result.qualityScore).toBeDefined();
            expect(result.qualityScore).toBeGreaterThanOrEqual(0);
            expect(result.qualityScore).toBeLessThanOrEqual(100);
        }));
    });
    describe("Workflow Management", () => {
        it("should track active workflows", () => {
            const initialStatus = orchestrator.getHybridAssistantStatus();
            expect(initialStatus.activeWorkflows).toBe(0);
            // Nach dem Ausf√ºhren von Tasks w√ºrde sich die Anzahl √§ndern
            // F√ºr jetzt als Platzhalter
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"version":3,"names":["cov_2a6yemoeqm","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","exports","createBedrockSupportManager","bedrock_adapter_1","require","ai_feature_flags_1","audit_trail_system_1","circuit_breaker_1","compliance_integration_1","cost_performance_optimizer_1","direct_bedrock_client_1","emergency_shutdown_manager_1","gdpr_hybrid_compliance_validator_1","hybrid_health_monitor_1","implementation_support_1","infrastructure_auditor_1","intelligent_router_1","kiro_bridge_1","mcp_router_1","meta_monitor_1","provider_agreement_compliance_1","red_team_evaluator_1","security_posture_monitor_1","system_resource_monitor_1","BedrockSupportManager","constructor","config","featureFlags","bedrockAdapter","providerCompliance","complianceIntegration","gdprHybridValidator","isActivated","getDefaultConfig","AiFeatureFlags","BedrockAdapter","logger","console","ProviderAgreementCompliance","ComplianceIntegration","GDPRHybridComplianceValidator","circuitBreaker","CircuitBreaker","failureThreshold","recoveryTimeout","halfOpenMaxCalls","healthCheckInterval","auditTrail","AuditTrailSystem","complianceMode","enableIntegrityChecking","retentionDays","directBedrockClient","DirectBedrockClient","region","process","env","AWS_REGION","emergencyTimeout","criticalTimeout","enableCircuitBreaker","enableHealthMonitoring","enableComplianceChecks","mcpRouter","MCPRouter","timeout","maxRetries","intelligentRouter","IntelligentRouter","infrastructureAuditor","InfrastructureAuditor","metaMonitor","MetaMonitor","implementationSupport","ImplementationSupport","hybridHealthMonitor","HybridHealthMonitor","kiroBridge","KiroBridge","securityPostureMonitor","SecurityPostureMonitor","systemResourceMonitor","SystemResourceMonitor","enabled","monitoringIntervalMs","alertCheckIntervalMs","thresholds","cpuWarningPercent","cpuCriticalPercent","memoryWarningMB","memoryCriticalMB","costBudget","dailyLimit","monthlyLimit","alertThresholds","hardStop","costPerformanceOptimizer","CostPerformanceOptimizer","emergencyShutdownManager","EmergencyShutdownManager","enableAutoShutdown","shutdownThresholds","errorRate","latencyMs","costEuroPerHour","consecutiveFailures","notificationChannels","recoveryConfig","autoRecoveryEnabled","recoveryDelayMs","healthCheckIntervalMs","maxRecoveryAttempts","activate","log","supportModeEnabled","isBedrockSupportModeEnabled","message","success","timestamp","Date","configuration","validation","validateBedrockSupportModeFlags","isValid","errors","join","validationResults","bedrockEnabled","isProviderEnabled","auditResult","runInfrastructureAudit","overallHealth","startMonitoring","error","Error","deactivate","stopMonitoring","disableBedrockSupportModeSafely","getSupportModeStatus","isActive","validateComplianceForSupportOperation","circuitBreakerStatus","getCircuitBreakerStatus","detectedIssues","id","severity","category","description","affectedComponents","detectedAt","implementationGaps","recommendations","expectedImpact","implementationSteps","complianceStatus","gdprCompliant","dataResidencyCompliant","auditTrailComplete","issues","execute","tslib_1","__awaiter","performSystemHealthCheck","gaps","flagValidation","validateAllFlags","hasCriticalErrors","some","toLowerCase","includes","push","providers","provider","criticalIssues","filter","i","highIssues","mediumIssues","length","result","errorMessage","isCircuitBreakerError","handleCircuitBreakerFailure","fallbackResult","Object","assign","fallbackError","triggerEmergencyProcedures","primaryError","String","logSupportModeEvent","operation","enableMetaMonitoring","provideFallbackSupport","context","supportType","actionsPerformed","action","details","diagnostics","systemHealth","performanceMetrics","responseTime","memoryUsage","cpuUsage","networkLatency","errorLogs","nextSteps","supportResult","executeWithCircuitBreakerProtection","performFallbackSupport","priority","operationFn","routingDecision","makeRoutingDecision","selectedRoute","reason","actions","errorType","affectedSystems","sendDiagnosticsToKiro","receiveKiroExecutionData","executionData","errorDetails","validateComplianceStatus","complianceSummary","getComplianceSummary","bedrockCompliance","verifyProviderCompliance","validateGDPRCompliance","euDataResidencyCompliant","validateEUDataResidencyCompliance","violations","overallCompliance","compliant","recentViolations","pendingActions","isCompliant","violationsCount","recommendationsCount","bedrockCompliant","lastChecked","complianceReport","generateHybridComplianceReport","complianceScore","directBedrockCompliant","routingPathCompliance","directBedrock","mcpIntegrationCompliant","mcpIntegration","map","v","crossPathCompliant","values","crossPathCompliance","every","Boolean","totalWarnings","warnings","bedrockAgreement","getAgreement","euDataResidency","euRegionConfigured","validateBedrockEURegionConfiguration","validatePIIDetectionConfiguration","piiDetectionEnabled","getFlag","piiRedactionEnabled","bedrockRegion","AWS_BEDROCK_REGION","euRegions","operationType_1","operationType","routeType","routingPath","correlationId","now","validationResult","validateBeforeRouting","allowed","mockRequest","prompt","domain","intent","enforceCompliance","createComplianceReportForSupportMode","reportId","report","supportModeCompliance","overallCompliant","hybridRoutingCompliance","mcpPathCompliant","directBedrockPathCompliant","forEach","isOpen","forceClose","supportConfig","JSON","stringify","startHealthMonitoring","enabledPaths","healthMonitoringActive","checkSecurityPosture","isMonitoringActive","postureStatus","assessSecurityPosture","vulnerabilities","routes","mcp","immediate","r","shortTerm","securityScore","overall","lastAudit","lastAssessment","vulnerabilityCount","threatLevel","component","remediation","directBedrockOpen","directBedrockMetrics","getMetrics","mcpRouterOpen","mcpRouterMetrics","status","state","metrics","failedPath","fallbackRoute","fallbackProvider","fallbackAvailable","recordFailure","sendEmergencyNotifications","setTimeout","resetAll","resetError","channel","monitorCostThresholds","costSummary","getCostSummary","getPerformanceMetrics","logEvent","eventType","userId","resourceType","resourceId","metadata","dailySpent","daily","spent","monthlySpent","monthly","dailyRemaining","remaining","monthlyRemaining","cacheHitRate","ipAddress","userAgent","costPressure","limit","triggerShutdown","costEuro","additionalInfo","currentSpend","projectedSpend","getDate","budgetUtilization","costBreakdown","generateCostRecommendations","dailyUtilization","monthlyUtilization","getCostPerformanceStatus","shutdownStatus","getStatus","cost","performance","emergencyShutdown","trackSupportOperationCost","operationId","route","tokensUsed","costBudgetMonitor","trackOperationCost","supportMode","bedrockActivation","optimizePerformance","currentMetrics","optimizationOpportunities","expectedImprovements","enableEmergencyMode","validatePromptTemplates","templateCount","enablePIIRedaction","runRedTeamEvaluations","isEnabled","passed","testResults","overallScore","evaluator","RedTeamEvaluator","enablePromptInjectionTests","enableJailbreakTests","enableDataExfiltrationTests","enablePrivilegeEscalationTests","enableDenialOfServiceTests","testDepth","maxTestsPerCategory","timeoutMs","runEvaluation","requestId","evaluationId","vulnerabilitiesDetected","totalTests","testsPassed","testsFailed","overallSecurityScore","criticalVulnerabilities","highVulnerabilities","executionTimeMs","testName","mediumVulnerabilities","lowVulnerabilities","overrides","environments","auditInterval","monitoringLevel","autoResolutionEnabled","getResourceMonitoringStatus","summary","getResourceSummary","alerts","getActiveAlerts","isMonitoring","isWithinThresholds","current","validateResourceOverhead","getCurrentMetrics","cpuUsagePercent","toFixed","memoryUsageMB","getPerformanceMetricsWithOverhead","resourceOverhead","emergencyShutdownOnResourceOverhead","trigger","triggerEmergencyShutdown","prefix","default"],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/bedrock-support-manager.ts"],"sourcesContent":["/**\n * Bedrock Support Manager - Core orchestrator for support operations\n *\n * This module implements the central Bedrock Support Manager that coordinates\n * infrastructure validation, meta-monitoring, and implementation support using\n * a hybrid routing approach (direct Bedrock + MCP integration).\n */\n\nimport { BedrockAdapter } from \"./adapters/bedrock-adapter\";\nimport { AiFeatureFlags } from \"./ai-feature-flags\";\nimport { AuditTrailSystem } from \"./audit-trail-system\";\nimport { CircuitBreaker } from \"./circuit-breaker\";\nimport { ComplianceIntegration } from \"./compliance-integration\";\nimport { CostPerformanceOptimizer } from \"./cost-performance-optimizer\";\nimport { DirectBedrockClient } from \"./direct-bedrock-client\";\nimport { EmergencyShutdownManager } from \"./emergency-shutdown-manager\";\nimport { GDPRHybridComplianceValidator } from \"./gdpr-hybrid-compliance-validator\";\nimport { HybridHealthMonitor } from \"./hybrid-health-monitor\";\nimport { ImplementationSupport } from \"./implementation-support\";\nimport { InfrastructureAuditor } from \"./infrastructure-auditor\";\nimport { IntelligentRouter } from \"./intelligent-router\";\nimport { KiroBridge } from \"./kiro-bridge\";\nimport { MCPRouter } from \"./mcp-router\";\nimport { MetaMonitor } from \"./meta-monitor\";\nimport { ProviderAgreementCompliance } from \"./provider-agreement-compliance\";\nimport {\n  RedTeamEvaluationReport,\n  RedTeamEvaluator,\n} from \"./red-team-evaluator\";\nimport { SecurityPostureMonitor } from \"./security-posture-monitor\";\nimport { SystemResourceMonitor } from \"./system-resource-monitor\";\nimport { Provider } from \"./types\";\n\n// Core Data Structures\nexport interface BedrockSupportConfig {\n  enabled: boolean;\n  environments: (\"development\" | \"staging\" | \"production\")[];\n  auditInterval: number;\n  monitoringLevel: \"basic\" | \"detailed\" | \"comprehensive\";\n  autoResolutionEnabled: boolean;\n  notificationChannels: NotificationChannel[];\n}\n\nexport interface NotificationChannel {\n  type: \"email\" | \"slack\" | \"webhook\";\n  endpoint: string;\n  enabled: boolean;\n}\n\nexport interface InfrastructureAuditResult {\n  timestamp: Date;\n  overallHealth: \"healthy\" | \"warning\" | \"critical\";\n  detectedIssues: InfrastructureIssue[];\n  implementationGaps: ImplementationGap[];\n  recommendations: Recommendation[];\n  complianceStatus: ComplianceStatus;\n}\n\nexport interface InfrastructureIssue {\n  id: string;\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n  category: \"performance\" | \"security\" | \"compliance\" | \"availability\";\n  description: string;\n  affectedComponents: string[];\n  detectedAt: Date;\n}\n\nexport interface ImplementationGap {\n  id: string;\n  module: string;\n  description: string;\n  priority: \"low\" | \"medium\" | \"high\" | \"critical\";\n  estimatedEffort: string;\n  dependencies: string[];\n}\n\nexport interface Recommendation {\n  id: string;\n  type: \"immediate\" | \"short_term\" | \"long_term\";\n  description: string;\n  expectedImpact: string;\n  implementationSteps: string[];\n}\n\nexport interface ComplianceStatus {\n  gdprCompliant: boolean;\n  dataResidencyCompliant: boolean;\n  auditTrailComplete: boolean;\n  issues: string[];\n}\n\nexport interface ExecutionMetadata {\n  executionId: string;\n  timestamp: Date;\n  operation: string;\n  duration: number;\n  success: boolean;\n  errorDetails?: string;\n  performanceMetrics: PerformanceMetrics;\n}\n\nexport interface PerformanceMetrics {\n  responseTime: number;\n  memoryUsage: number;\n  cpuUsage: number;\n  networkLatency: number;\n}\n\nexport interface FailureContext {\n  operation: string;\n  errorType: string;\n  errorMessage: string;\n  timestamp: Date;\n  affectedSystems: string[];\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n}\n\nexport interface SupportResult {\n  success: boolean;\n  supportType: \"infrastructure\" | \"execution\" | \"implementation\";\n  actionsPerformed: SupportAction[];\n  diagnostics: DiagnosticData;\n  nextSteps: string[];\n}\n\nexport interface SupportAction {\n  action: string;\n  timestamp: Date;\n  result: \"success\" | \"failure\" | \"partial\";\n  details: string;\n}\n\nexport interface DiagnosticData {\n  systemHealth: Record<string, any>;\n  performanceMetrics: PerformanceMetrics;\n  errorLogs: string[];\n  recommendations: string[];\n}\n\nexport interface BedrockSupportResult {\n  success: boolean;\n  message: string;\n  timestamp: Date;\n  configuration: BedrockSupportConfig;\n  validationResults?: any;\n}\n\n// Security & Compliance Types\nexport interface ComplianceValidationResult {\n  isCompliant: boolean;\n  violations: string[];\n  recommendations: string[];\n  lastChecked: Date;\n}\n\nexport interface SecurityAuditResult {\n  securityScore: number;\n  vulnerabilities: SecurityVulnerability[];\n  recommendations: string[];\n  lastAudit: Date;\n}\n\nexport interface SecurityVulnerability {\n  id: string;\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n  description: string;\n  component: string;\n  remediation: string;\n}\n\n// Cost & Performance Types\nexport interface CostAnalysis {\n  currentSpend: number;\n  projectedSpend: number;\n  budgetUtilization: number;\n  costBreakdown: Record<string, number>;\n  recommendations: string[];\n}\n\nexport interface PerformanceOptimization {\n  currentMetrics: PerformanceMetrics;\n  optimizationOpportunities: OptimizationOpportunity[];\n  expectedImprovements: Record<string, number>;\n}\n\nexport interface OptimizationOpportunity {\n  area: string;\n  description: string;\n  expectedImprovement: string;\n  implementationEffort: \"low\" | \"medium\" | \"high\";\n}\n\n// Template & Prompt Types\nexport interface TemplateValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  templateCount: number;\n}\n\nexport interface SecurityTestResult {\n  passed: boolean;\n  testResults: SecurityTest[];\n  overallScore: number;\n  recommendations: string[];\n}\n\nexport interface SecurityTest {\n  testName: string;\n  passed: boolean;\n  details: string;\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n}\n\n/**\n * Bedrock Support Manager Interface\n *\n * Defines the contract for the Bedrock Support Manager with hybrid routing capabilities\n */\nexport interface IBedrockSupportManager {\n  // Activation Control\n  activate(): Promise<BedrockSupportResult>;\n  deactivate(): Promise<void>;\n  isActive(): boolean;\n\n  // Core Support Operations\n  runInfrastructureAudit(): Promise<InfrastructureAuditResult>;\n  enableMetaMonitoring(): Promise<void>;\n  provideFallbackSupport(context: FailureContext): Promise<SupportResult>;\n\n  // Integration Methods\n  sendDiagnosticsToKiro(diagnostics: DiagnosticData): Promise<void>;\n  receiveKiroExecutionData(executionData: ExecutionMetadata): Promise<void>;\n\n  // Security & Compliance Integration\n  validateComplianceStatus(): Promise<ComplianceValidationResult>;\n  enableCircuitBreaker(): Promise<void>;\n  checkSecurityPosture(): Promise<SecurityAuditResult>;\n\n  // Cost & Performance Management\n  monitorCostThresholds(): Promise<CostAnalysis>;\n  optimizePerformance(): Promise<PerformanceOptimization>;\n  enableEmergencyMode(): Promise<void>;\n\n  // Template & Prompt Management\n  validatePromptTemplates(): Promise<TemplateValidationResult>;\n  enablePIIRedaction(): Promise<void>;\n  runRedTeamEvaluations(): Promise<SecurityTestResult>;\n}\n\n/**\n * Bedrock Support Manager Implementation\n *\n * Central orchestrator for Bedrock support operations with hybrid routing\n */\nexport class BedrockSupportManager implements IBedrockSupportManager {\n  private isActivated: boolean = false;\n  private config: BedrockSupportConfig;\n  private featureFlags: AiFeatureFlags;\n  private bedrockAdapter: BedrockAdapter;\n  private logger: Console;\n  private providerCompliance: ProviderAgreementCompliance;\n  private complianceIntegration: ComplianceIntegration;\n  private gdprHybridValidator: GDPRHybridComplianceValidator;\n\n  // Circuit Breaker Integration for Hybrid Routing\n  private circuitBreaker: CircuitBreaker;\n  private directBedrockClient: DirectBedrockClient;\n  private mcpRouter: MCPRouter;\n  private intelligentRouter: IntelligentRouter;\n  private auditTrail: AuditTrailSystem;\n\n  // Support Operation Components\n  private infrastructureAuditor: InfrastructureAuditor;\n  private metaMonitor: MetaMonitor;\n  private implementationSupport: ImplementationSupport;\n  private hybridHealthMonitor: HybridHealthMonitor;\n  private kiroBridge: KiroBridge;\n  private securityPostureMonitor: SecurityPostureMonitor;\n\n  // Cost & Performance Management (using existing system)\n  private costPerformanceOptimizer: CostPerformanceOptimizer;\n  private emergencyShutdownManager: EmergencyShutdownManager;\n\n  // System Resource Monitoring for 5% overhead requirement\n  private systemResourceMonitor: SystemResourceMonitor;\n\n  constructor(\n    config?: Partial<BedrockSupportConfig>,\n    featureFlags?: AiFeatureFlags,\n    bedrockAdapter?: BedrockAdapter,\n    providerCompliance?: ProviderAgreementCompliance,\n    complianceIntegration?: ComplianceIntegration,\n    gdprHybridValidator?: GDPRHybridComplianceValidator\n  ) {\n    this.config = this.getDefaultConfig(config);\n    this.featureFlags = featureFlags || new AiFeatureFlags();\n    this.bedrockAdapter = bedrockAdapter || new BedrockAdapter();\n    this.logger = console;\n    this.providerCompliance =\n      providerCompliance || new ProviderAgreementCompliance();\n    this.complianceIntegration =\n      complianceIntegration || new ComplianceIntegration();\n    this.gdprHybridValidator =\n      gdprHybridValidator || new GDPRHybridComplianceValidator();\n\n    // Initialize Circuit Breaker with support-specific configuration\n    this.circuitBreaker = new CircuitBreaker({\n      failureThreshold: 3, // More sensitive for support operations\n      recoveryTimeout: 30000, // 30 seconds recovery for support\n      halfOpenMaxCalls: 2, // Conservative half-open testing\n      healthCheckInterval: 15000, // 15 second health checks\n    });\n\n    // Initialize Audit Trail System\n    this.auditTrail = new AuditTrailSystem({\n      complianceMode: \"strict\",\n      enableIntegrityChecking: true,\n      retentionDays: 2555, // 7 years for GDPR compliance\n    });\n\n    // Initialize Direct Bedrock Client for critical operations\n    this.directBedrockClient = new DirectBedrockClient({\n      region: process.env.AWS_REGION || \"eu-central-1\",\n      emergencyTimeout: 5000, // < 5s for emergency operations\n      criticalTimeout: 10000, // < 10s for critical operations\n      enableCircuitBreaker: true,\n      enableHealthMonitoring: true,\n      enableComplianceChecks: true,\n    });\n\n    // Initialize MCP Router for standard operations\n    this.mcpRouter = new MCPRouter({\n      timeout: 30000,\n      maxRetries: 3,\n      healthCheckInterval: 30000,\n    });\n\n    // Initialize Intelligent Router for routing decisions\n    this.intelligentRouter = new IntelligentRouter(\n      this.directBedrockClient,\n      this.mcpRouter,\n      this.featureFlags,\n      this.circuitBreaker,\n      this.gdprHybridValidator,\n      this.auditTrail\n    );\n\n    // Initialize Support Operation Components\n    this.infrastructureAuditor = new InfrastructureAuditor(\n      this.featureFlags,\n      this.auditTrail\n    );\n\n    this.metaMonitor = new MetaMonitor(\n      this.intelligentRouter,\n      this.auditTrail,\n      this.featureFlags\n    );\n\n    this.implementationSupport = new ImplementationSupport(\n      this.intelligentRouter,\n      this.auditTrail,\n      this.featureFlags\n    );\n\n    this.hybridHealthMonitor = new HybridHealthMonitor(\n      this.mcpRouter,\n      this.directBedrockClient,\n      this.featureFlags\n    );\n\n    this.kiroBridge = new KiroBridge(\n      this.mcpRouter,\n      this.auditTrail,\n      this.featureFlags\n    );\n\n    this.securityPostureMonitor = new SecurityPostureMonitor(\n      undefined,\n      this.featureFlags,\n      this.auditTrail,\n      this.circuitBreaker,\n      this.gdprHybridValidator,\n      this.providerCompliance,\n      this.directBedrockClient,\n      this.mcpRouter\n    );\n\n    // Initialize System Resource Monitor for 5% overhead requirement\n    this.systemResourceMonitor = new SystemResourceMonitor(\n      this.featureFlags,\n      this.auditTrail,\n      {\n        enabled: true,\n        monitoringIntervalMs: 10000, // 10 seconds\n        alertCheckIntervalMs: 30000, // 30 seconds\n        thresholds: {\n          cpuWarningPercent: 0.8, // 0.8% CPU warning\n          cpuCriticalPercent: 1.0, // 1% CPU critical (well under 5%)\n          memoryWarningMB: 40, // 40MB memory warning\n          memoryCriticalMB: 50, // 50MB memory critical (reasonable for 5% overhead)\n        },\n      }\n    );\n\n    // Initialize Cost Performance Optimizer (using existing system)\n    const costBudget: CostBudget = {\n      dailyLimit: 10.0, // €10 per day\n      monthlyLimit: 300.0, // €300 per month\n      alertThresholds: [50, 75, 90], // Alert at 50%, 75%, 90%\n      hardStop: true, // Enable hard stop on budget exceeded\n    };\n\n    this.costPerformanceOptimizer = new CostPerformanceOptimizer(\n      costBudget,\n      process.env.AWS_REGION || \"eu-central-1\"\n    );\n\n    // Initialize Emergency Shutdown Manager\n    this.emergencyShutdownManager = new EmergencyShutdownManager(\n      {\n        enableAutoShutdown: true,\n        shutdownThresholds: {\n          errorRate: 0.1, // 10% error rate\n          latencyMs: 5000, // 5 seconds\n          costEuroPerHour: 50.0, // €50 per hour\n          consecutiveFailures: 5,\n        },\n        notificationChannels: {\n          // Configure notification channels as needed\n        },\n        recoveryConfig: {\n          autoRecoveryEnabled: true,\n          recoveryDelayMs: 300000, // 5 minutes\n          healthCheckIntervalMs: 60000, // 1 minute\n          maxRecoveryAttempts: 3,\n        },\n      },\n      this.featureFlags,\n      this.auditTrail,\n      this.circuitBreaker\n    );\n  }\n\n  /**\n   * Activate Bedrock Support Mode\n   */\n  async activate(): Promise<BedrockSupportResult> {\n    try {\n      this.log(\n        \"bedrock-activation\",\n        \"Attempting to activate Bedrock Support Mode\"\n      );\n\n      // Check if feature flag is enabled\n      const supportModeEnabled =\n        await this.featureFlags.isBedrockSupportModeEnabled();\n      if (!supportModeEnabled) {\n        const message = \"Bedrock Support Mode is disabled via feature flag\";\n        this.log(\"bedrock-activation\", message);\n        return {\n          success: false,\n          message,\n          timestamp: new Date(),\n          configuration: this.config,\n        };\n      }\n\n      // Validate feature flag configuration\n      const validation =\n        await this.featureFlags.validateBedrockSupportModeFlags();\n      if (!validation.isValid) {\n        const message = `Feature flag validation failed: ${validation.errors.join(\n          \", \"\n        )}`;\n        this.log(\"bedrock-activation\", message);\n        return {\n          success: false,\n          message,\n          timestamp: new Date(),\n          configuration: this.config,\n          validationResults: validation,\n        };\n      }\n\n      // Check Bedrock adapter availability\n      const bedrockEnabled = await this.featureFlags.isProviderEnabled(\n        \"bedrock\"\n      );\n      if (!bedrockEnabled) {\n        const message = \"Bedrock provider is not enabled\";\n        this.log(\"bedrock-activation\", message);\n        return {\n          success: false,\n          message,\n          timestamp: new Date(),\n          configuration: this.config,\n        };\n      }\n\n      // Perform initial infrastructure audit\n      this.log(\"bedrock-activation\", \"Running initial infrastructure audit\");\n      const auditResult = await this.runInfrastructureAudit();\n\n      if (auditResult.overallHealth === \"critical\") {\n        const message =\n          \"Cannot activate support mode: critical infrastructure issues detected\";\n        this.log(\"bedrock-activation\", message);\n        return {\n          success: false,\n          message,\n          timestamp: new Date(),\n          configuration: this.config,\n        };\n      }\n\n      // Activate support mode\n      this.isActivated = true;\n      this.config.enabled = true;\n\n      // Start system resource monitoring to ensure < 5% overhead\n      await this.systemResourceMonitor.startMonitoring();\n      this.log(\"bedrock-activation\", \"System resource monitoring started\");\n\n      const message = \"Bedrock Support Mode activated successfully\";\n      this.log(\"bedrock-activation\", message);\n\n      return {\n        success: true,\n        message,\n        timestamp: new Date(),\n        configuration: this.config,\n        validationResults: validation,\n      };\n    } catch (error) {\n      const message = `Failed to activate Bedrock Support Mode: ${\n        error instanceof Error ? error.message : \"Unknown error\"\n      }`;\n      this.log(\"bedrock-activation\", message);\n\n      // Ensure we don't leave the system in an inconsistent state\n      this.isActivated = false;\n      this.config.enabled = false;\n\n      return {\n        success: false,\n        message,\n        timestamp: new Date(),\n        configuration: this.config,\n      };\n    }\n  }\n\n  /**\n   * Deactivate Bedrock Support Mode\n   */\n  async deactivate(): Promise<void> {\n    try {\n      this.log(\"bedrock-activation\", \"Deactivating Bedrock Support Mode\");\n\n      // Stop system resource monitoring\n      await this.systemResourceMonitor.stopMonitoring();\n      this.log(\"bedrock-activation\", \"System resource monitoring stopped\");\n\n      this.isActivated = false;\n      this.config.enabled = false;\n\n      // Safely disable feature flags\n      await this.featureFlags.disableBedrockSupportModeSafely();\n\n      this.log(\n        \"bedrock-activation\",\n        \"Bedrock Support Mode deactivated successfully\"\n      );\n    } catch (error) {\n      this.log(\n        \"bedrock-activation\",\n        `Error during deactivation: ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Get support mode status\n   */\n  getSupportModeStatus(): { isActive: boolean; config: BedrockSupportConfig } {\n    return {\n      isActive: this.isActivated,\n      config: this.config,\n    };\n  }\n\n  /**\n   * Check if support mode is active\n   */\n  isActive(): boolean {\n    return this.isActivated && this.config.enabled;\n  }\n\n  /**\n   * Run infrastructure audit with circuit breaker protection\n   */\n  async runInfrastructureAudit(): Promise<InfrastructureAuditResult> {\n    this.log(\n      \"bedrock-activation\",\n      \"Starting infrastructure audit with circuit breaker protection\"\n    );\n\n    // Validate compliance before running audit\n    await this.validateComplianceForSupportOperation(\n      \"infrastructure\",\n      \"direct_bedrock\",\n      \"critical\"\n    );\n\n    try {\n      // Check circuit breaker status before proceeding\n      const circuitBreakerStatus = await this.getCircuitBreakerStatus();\n\n      if (circuitBreakerStatus.overallHealth === \"critical\") {\n        this.log(\n          \"bedrock-activation\",\n          \"Infrastructure audit aborted - both routing paths unavailable\"\n        );\n\n        return {\n          timestamp: new Date(),\n          overallHealth: \"critical\",\n          detectedIssues: [\n            {\n              id: \"circuit-breaker-critical\",\n              severity: \"critical\",\n              category: \"availability\",\n              description:\n                \"Both routing paths (direct Bedrock and MCP) are unavailable due to circuit breaker protection\",\n              affectedComponents: [\"direct-bedrock-client\", \"mcp-router\"],\n              detectedAt: new Date(),\n            },\n          ],\n          implementationGaps: [],\n          recommendations: [\n            {\n              id: \"restore-routing-paths\",\n              type: \"immediate\",\n              description: \"Investigate and restore routing path availability\",\n              expectedImpact: \"Restore Bedrock Support Mode functionality\",\n              implementationSteps: [\n                \"Check direct Bedrock client health\",\n                \"Verify MCP router connectivity\",\n                \"Reset circuit breakers if appropriate\",\n                \"Monitor system recovery\",\n              ],\n            },\n          ],\n          complianceStatus: {\n            gdprCompliant: true,\n            dataResidencyCompliant: true,\n            auditTrailComplete: true,\n            issues: [\n              \"Circuit breaker protection active - limited audit capability\",\n            ],\n          },\n        };\n      }\n\n      // Execute infrastructure audit through intelligent router with circuit breaker protection\n      const auditResult = await this.circuitBreaker.execute(\n        \"bedrock\", // Use bedrock provider for infrastructure audit\n        async () => {\n          return await this.infrastructureAuditor.performSystemHealthCheck();\n        }\n      );\n\n      this.log(\n        \"bedrock-activation\",\n        \"Infrastructure audit completed successfully through circuit breaker\"\n      );\n      // Simulate infrastructure audit - in real implementation this would\n      // check actual system health, database connections, API endpoints, etc.\n      const issues: InfrastructureIssue[] = [];\n      const gaps: ImplementationGap[] = [];\n      const recommendations: Recommendation[] = [];\n\n      // Check feature flag consistency\n      const flagValidation = await this.featureFlags.validateAllFlags();\n      if (!flagValidation.isValid) {\n        // Determine severity based on error content\n        const hasCriticalErrors = flagValidation.errors.some(\n          (error) =>\n            error.toLowerCase().includes(\"critical\") ||\n            error.toLowerCase().includes(\"system error\")\n        );\n\n        issues.push({\n          id: \"feature-flags-inconsistent\",\n          severity: hasCriticalErrors ? \"critical\" : \"medium\",\n          category: \"compliance\",\n          description: \"Feature flag configuration has validation errors\",\n          affectedComponents: [\"feature-flags\"],\n          detectedAt: new Date(),\n        });\n      }\n\n      // Check provider availability\n      const providers: Provider[] = [\"bedrock\", \"google\", \"meta\"];\n      for (const provider of providers) {\n        const enabled = await this.featureFlags.isProviderEnabled(provider);\n        if (!enabled && provider === \"bedrock\") {\n          issues.push({\n            id: `provider-${provider}-disabled`,\n            severity: \"high\",\n            category: \"availability\",\n            description: `Critical provider ${provider} is disabled`,\n            affectedComponents: [`${provider}-adapter`],\n            detectedAt: new Date(),\n          });\n        }\n      }\n\n      // Determine overall health\n      const criticalIssues = issues.filter((i) => i.severity === \"critical\");\n      const highIssues = issues.filter((i) => i.severity === \"high\");\n      const mediumIssues = issues.filter((i) => i.severity === \"medium\");\n\n      let overallHealth: \"healthy\" | \"warning\" | \"critical\";\n      if (criticalIssues.length > 0) {\n        overallHealth = \"critical\";\n      } else if (highIssues.length > 0 || mediumIssues.length > 0) {\n        overallHealth = \"warning\";\n      } else {\n        overallHealth = \"healthy\";\n      }\n\n      // Generate recommendations based on issues\n      if (issues.length > 0) {\n        recommendations.push({\n          id: \"resolve-configuration-issues\",\n          type: \"immediate\",\n          description: \"Resolve feature flag and provider configuration issues\",\n          expectedImpact: \"Improved system stability and reliability\",\n          implementationSteps: [\n            \"Review feature flag validation errors\",\n            \"Enable required providers\",\n            \"Validate configuration consistency\",\n          ],\n        });\n      }\n\n      const result: InfrastructureAuditResult = {\n        timestamp: new Date(),\n        overallHealth,\n        detectedIssues: issues,\n        implementationGaps: gaps,\n        recommendations,\n        complianceStatus: {\n          gdprCompliant: true, // Assume compliant for now\n          dataResidencyCompliant: true,\n          auditTrailComplete: true,\n          issues: [],\n        },\n      };\n\n      this.log(\n        \"bedrock-activation\",\n        `Infrastructure audit completed: ${overallHealth} (${issues.length} issues)`\n      );\n      return result;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : \"Unknown error\";\n\n      this.log(\n        \"bedrock-activation\",\n        `Infrastructure audit failed: ${errorMessage}`\n      );\n\n      // Check if this is a circuit breaker failure\n      const isCircuitBreakerError = errorMessage.includes(\n        \"circuit breaker is OPEN\"\n      );\n\n      if (isCircuitBreakerError) {\n        // Handle circuit breaker failure\n        await this.handleCircuitBreakerFailure(\n          \"direct\", // Assuming direct path failed\n          \"infrastructure_audit\",\n          { error: errorMessage, timestamp: new Date() }\n        );\n\n        // Try fallback through MCP if available\n        try {\n          this.log(\n            \"bedrock-activation\",\n            \"Attempting infrastructure audit through MCP fallback\"\n          );\n\n          const fallbackResult = await this.circuitBreaker.execute(\n            \"google\", // Use google as MCP proxy\n            async () => {\n              return await this.infrastructureAuditor.performSystemHealthCheck();\n            }\n          );\n\n          this.log(\n            \"bedrock-activation\",\n            \"Infrastructure audit completed successfully through MCP fallback\"\n          );\n\n          // Return successful result with fallback note\n          return {\n            ...fallbackResult,\n            detectedIssues: [\n              ...fallbackResult.detectedIssues,\n              {\n                id: \"direct-path-circuit-breaker-open\",\n                severity: \"high\" as const,\n                category: \"availability\" as const,\n                description:\n                  \"Direct Bedrock path unavailable - using MCP fallback\",\n                affectedComponents: [\"direct-bedrock-client\"],\n                detectedAt: new Date(),\n              },\n            ],\n            recommendations: [\n              ...fallbackResult.recommendations,\n              {\n                id: \"restore-direct-path\",\n                type: \"short_term\" as const,\n                description: \"Investigate and restore direct Bedrock path\",\n                expectedImpact: \"Improved performance for critical operations\",\n                implementationSteps: [\n                  \"Check direct Bedrock client health\",\n                  \"Verify AWS connectivity\",\n                  \"Reset circuit breaker if appropriate\",\n                ],\n              },\n            ],\n          };\n        } catch (fallbackError) {\n          this.log(\n            \"bedrock-activation\",\n            `MCP fallback also failed: ${fallbackError}`\n          );\n\n          // Both paths failed - trigger emergency procedures\n          await this.triggerEmergencyProcedures(\"infrastructure_audit\", {\n            primaryError: errorMessage,\n            fallbackError: String(fallbackError),\n          });\n        }\n      }\n\n      // Log audit failure to audit trail\n      await this.auditTrail.logSupportModeEvent(\n        \"infrastructure_audit_failed\",\n        {\n          timestamp: new Date(),\n          error: errorMessage,\n          isCircuitBreakerError,\n          operation: \"infrastructure_audit\",\n        },\n        \"system\"\n      );\n\n      // Return a critical result if audit fails\n      return {\n        timestamp: new Date(),\n        overallHealth: \"critical\",\n        detectedIssues: [\n          {\n            id: \"audit-failure\",\n            severity: \"critical\",\n            category: \"availability\",\n            description: `Infrastructure audit failed: ${errorMessage}`,\n            affectedComponents: [\"audit-system\"],\n            detectedAt: new Date(),\n          },\n        ],\n        implementationGaps: [],\n        recommendations: [\n          {\n            id: \"fix-audit-system\",\n            type: \"immediate\",\n            description: \"Fix infrastructure audit system\",\n            expectedImpact: \"Restore monitoring capabilities\",\n            implementationSteps: [\n              \"Investigate audit failure\",\n              \"Check circuit breaker status\",\n              \"Verify routing path health\",\n              \"Fix underlying issues\",\n              \"Re-run audit\",\n            ],\n          },\n        ],\n        complianceStatus: {\n          gdprCompliant: false,\n          dataResidencyCompliant: false,\n          auditTrailComplete: false,\n          issues: [\"Audit system failure prevents compliance verification\"],\n        },\n      };\n    }\n  }\n\n  /**\n   * Enable meta-monitoring of Kiro execution\n   */\n  async enableMetaMonitoring(): Promise<void> {\n    this.log(\"bedrock-activation\", \"Enabling meta-monitoring\");\n\n    if (!this.isActive()) {\n      throw new Error(\n        \"Cannot enable meta-monitoring: Support mode is not active\"\n      );\n    }\n\n    // Validate compliance before enabling meta-monitoring\n    await this.validateComplianceForSupportOperation(\n      \"meta_monitor\",\n      \"direct_bedrock\",\n      \"critical\"\n    );\n\n    // In a real implementation, this would set up monitoring hooks\n    // For now, we'll just log the activation\n    this.log(\"bedrock-activation\", \"Meta-monitoring enabled successfully\");\n  }\n\n  /**\n   * Provide fallback support for failed operations with circuit breaker protection\n   */\n  async provideFallbackSupport(\n    context: FailureContext\n  ): Promise<SupportResult> {\n    // Handle null or invalid context\n    if (!context || !context.operation) {\n      this.log(\n        \"bedrock-activation\",\n        \"Providing fallback support for: invalid context\"\n      );\n      return {\n        success: false,\n        supportType: \"infrastructure\",\n        actionsPerformed: [\n          {\n            action: \"validate_context\",\n            timestamp: new Date(),\n            result: \"failure\",\n            details: \"Invalid or null failure context provided\",\n          },\n        ],\n        diagnostics: {\n          systemHealth: {},\n          performanceMetrics: {\n            responseTime: 0,\n            memoryUsage: 0,\n            cpuUsage: 0,\n            networkLatency: 0,\n          },\n          errorLogs: [\"Invalid failure context\"],\n          recommendations: [\"Provide valid failure context\"],\n        },\n        nextSteps: [\n          \"Manual intervention required\",\n          \"Contact system administrator\",\n        ],\n      };\n    }\n\n    this.log(\n      \"bedrock-activation\",\n      `Providing fallback support for: ${context.operation} with circuit breaker protection`\n    );\n\n    // Check circuit breaker status before proceeding\n    const circuitBreakerStatus = await this.getCircuitBreakerStatus();\n\n    // Validate compliance before providing fallback support\n    await this.validateComplianceForSupportOperation(\n      \"emergency\",\n      \"direct_bedrock\",\n      \"critical\"\n    );\n\n    try {\n      // Execute fallback support through circuit breaker with intelligent routing\n      const supportResult = await this.executeWithCircuitBreakerProtection(\n        context.operation,\n        \"emergency\",\n        async () => {\n          return await this.performFallbackSupport(context);\n        }\n      );\n\n      // Log successful fallback support\n      await this.auditTrail.logSupportModeEvent(\n        \"fallback_support_provided\",\n        {\n          timestamp: new Date(),\n          operation: context.operation,\n          severity: context.severity,\n          circuitBreakerStatus,\n          supportResult,\n        },\n        \"system\"\n      );\n\n      return supportResult;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Fallback support failed: ${errorMessage}`\n      );\n\n      // Handle circuit breaker failures\n      if (errorMessage.includes(\"circuit breaker is OPEN\")) {\n        await this.handleCircuitBreakerFailure(\n          \"direct\", // Assuming direct path failed first\n          context.operation,\n          { ...context, fallbackError: errorMessage }\n        );\n      }\n\n      // Log failure to audit trail\n      await this.auditTrail.logSupportModeEvent(\n        \"fallback_support_failed\",\n        {\n          timestamp: new Date(),\n          operation: context.operation,\n          error: errorMessage,\n          context,\n        },\n        \"system\"\n      );\n\n      // Return failure result\n      return {\n        success: false,\n        supportType: \"infrastructure\",\n        actionsPerformed: [\n          {\n            action: \"fallback_support_attempt\",\n            timestamp: new Date(),\n            result: \"failure\",\n            details: `Fallback support failed: ${errorMessage}`,\n          },\n        ],\n        diagnostics: {\n          systemHealth: { circuitBreakerStatus },\n          performanceMetrics: {\n            responseTime: 0,\n            memoryUsage: 0,\n            cpuUsage: 0,\n            networkLatency: 0,\n          },\n          errorLogs: [context.errorMessage, errorMessage],\n          recommendations: [\n            \"Check circuit breaker status\",\n            \"Verify routing path health\",\n            \"Consider manual intervention\",\n          ],\n        },\n        nextSteps: [\n          \"Manual intervention required\",\n          \"Check system health\",\n          \"Contact system administrator\",\n        ],\n      };\n    }\n  }\n\n  /**\n   * Execute operation with circuit breaker protection and intelligent routing\n   */\n  private async executeWithCircuitBreakerProtection<T>(\n    operation: string,\n    priority: \"emergency\" | \"critical\" | \"high\" | \"medium\" | \"low\",\n    operationFn: () => Promise<T>\n  ): Promise<T> {\n    try {\n      // Use intelligent router to determine best path\n      if (this.intelligentRouter) {\n        const routingDecision =\n          await this.intelligentRouter.makeRoutingDecision({\n            operation: operation as any,\n            priority: priority as any,\n            context: { timestamp: new Date() },\n          });\n\n        this.log(\n          \"bedrock-activation\",\n          `Routing decision: ${routingDecision.selectedRoute} (${routingDecision.reason})`\n        );\n\n        // Execute through selected route with circuit breaker protection\n        const provider =\n          routingDecision.selectedRoute === \"direct\" ? \"bedrock\" : \"google\";\n\n        return await this.circuitBreaker.execute(provider, operationFn);\n      } else {\n        // Fallback to direct circuit breaker execution\n        return await this.circuitBreaker.execute(\"bedrock\", operationFn);\n      }\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Circuit breaker protected operation failed: ${errorMessage}`\n      );\n\n      throw error;\n    }\n  }\n\n  /**\n   * Perform the actual fallback support logic\n   */\n  private async performFallbackSupport(\n    context: FailureContext\n  ): Promise<SupportResult> {\n    try {\n      const actions: SupportAction[] = [];\n      const diagnostics: DiagnosticData = {\n        systemHealth: {},\n        performanceMetrics: {\n          responseTime: 0,\n          memoryUsage: 0,\n          cpuUsage: 0,\n          networkLatency: 0,\n        },\n        errorLogs: [context.errorMessage],\n        recommendations: [],\n      };\n\n      // Analyze the failure context\n      actions.push({\n        action: \"analyze_failure_context\",\n        timestamp: new Date(),\n        result: \"success\",\n        details: `Analyzed failure: ${context.errorType} in ${context.operation}`,\n      });\n\n      // Determine support type based on failure\n      let supportType: \"infrastructure\" | \"execution\" | \"implementation\";\n      if (context.affectedSystems.includes(\"infrastructure\")) {\n        supportType = \"infrastructure\";\n      } else if (context.operation.includes(\"execution\")) {\n        supportType = \"execution\";\n      } else {\n        supportType = \"implementation\";\n      }\n\n      // Generate recommendations based on failure type\n      const nextSteps: string[] = [];\n      if (context.severity === \"critical\") {\n        nextSteps.push(\"Escalate to on-call team\");\n        nextSteps.push(\"Activate emergency procedures\");\n      } else {\n        nextSteps.push(\"Monitor for recurring issues\");\n        nextSteps.push(\"Schedule remediation during maintenance window\");\n      }\n\n      diagnostics.recommendations = nextSteps;\n\n      return {\n        success: true,\n        supportType,\n        actionsPerformed: actions,\n        diagnostics,\n        nextSteps,\n      };\n    } catch (error) {\n      this.log(\n        \"bedrock-activation\",\n        `Fallback support failed: ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n\n      return {\n        success: false,\n        supportType: \"infrastructure\",\n        actionsPerformed: [\n          {\n            action: \"fallback_support_attempt\",\n            timestamp: new Date(),\n            result: \"failure\",\n            details: `Failed to provide fallback support: ${\n              error instanceof Error ? error.message : \"Unknown error\"\n            }`,\n          },\n        ],\n        diagnostics: {\n          systemHealth: {},\n          performanceMetrics: {\n            responseTime: 0,\n            memoryUsage: 0,\n            cpuUsage: 0,\n            networkLatency: 0,\n          },\n          errorLogs: [context.errorMessage],\n          recommendations: [\"Manual intervention required\"],\n        },\n        nextSteps: [\n          \"Manual intervention required\",\n          \"Contact system administrator\",\n        ],\n      };\n    }\n  }\n\n  /**\n   * Send diagnostics to Kiro\n   */\n  async sendDiagnosticsToKiro(diagnostics: DiagnosticData): Promise<void> {\n    this.log(\"bedrock-activation\", \"Sending diagnostics to Kiro\");\n\n    // In a real implementation, this would send data through MCP or direct communication\n    // For now, we'll just log the action\n    this.log(\n      \"bedrock-activation\",\n      `Diagnostics sent: ${diagnostics.recommendations.length} recommendations`\n    );\n  }\n\n  /**\n   * Receive execution data from Kiro\n   */\n  async receiveKiroExecutionData(\n    executionData: ExecutionMetadata\n  ): Promise<void> {\n    this.log(\n      \"bedrock-activation\",\n      `Received execution data: ${executionData.operation}`\n    );\n\n    // In a real implementation, this would analyze the execution data\n    // and potentially trigger support actions\n    if (!executionData.success) {\n      this.log(\n        \"bedrock-activation\",\n        `Execution failure detected: ${executionData.errorDetails}`\n      );\n    }\n  }\n\n  // Security & Compliance Methods\n  async validateComplianceStatus(): Promise<ComplianceValidationResult> {\n    try {\n      this.log(\n        \"bedrock-activation\",\n        \"Validating compliance status for all providers\"\n      );\n\n      // Get compliance summary from the compliance integration\n      const complianceSummary =\n        await this.complianceIntegration.getComplianceSummary();\n\n      // Check Bedrock-specific compliance\n      const bedrockCompliance =\n        await this.providerCompliance.verifyProviderCompliance(\"bedrock\");\n\n      // Validate GDPR compliance for both routing paths\n      const gdprCompliant = await this.validateGDPRCompliance();\n\n      // Check EU data residency compliance for direct Bedrock access\n      const euDataResidencyCompliant =\n        await this.validateEUDataResidencyCompliance();\n\n      // Aggregate violations and recommendations\n      const violations: string[] = [];\n      const recommendations: string[] = [];\n\n      // Check overall compliance status\n      if (complianceSummary.overallCompliance === \"non_compliant\") {\n        violations.push(\n          \"Overall system compliance is non-compliant across providers\"\n        );\n        recommendations.push(\n          \"Review and update provider agreements to ensure compliance\"\n        );\n      }\n\n      // Check Bedrock-specific compliance\n      if (!bedrockCompliance.compliant) {\n        violations.push(\n          `Bedrock provider compliance issues: ${bedrockCompliance.violations.join(\n            \", \"\n          )}`\n        );\n        recommendations.push(\n          \"Update Bedrock provider agreement and verify compliance status\"\n        );\n      }\n\n      // Check GDPR compliance\n      if (!gdprCompliant) {\n        violations.push(\"GDPR compliance validation failed for hybrid routing\");\n        recommendations.push(\n          \"Ensure PII detection and redaction is enabled for both MCP and direct Bedrock operations\"\n        );\n      }\n\n      // Check EU data residency\n      if (!euDataResidencyCompliant) {\n        violations.push(\n          \"EU data residency compliance failed for direct Bedrock access\"\n        );\n        recommendations.push(\n          \"Configure Bedrock to use EU-Central-1 region for data processing\"\n        );\n      }\n\n      // Check for recent violations\n      if (complianceSummary.recentViolations > 0) {\n        violations.push(\n          `${complianceSummary.recentViolations} recent compliance violations detected`\n        );\n        recommendations.push(\"Review and resolve recent compliance violations\");\n      }\n\n      // Check for pending actions\n      if (complianceSummary.pendingActions > 0) {\n        recommendations.push(\n          `${complianceSummary.pendingActions} provider agreements require attention (expiring soon)`\n        );\n      }\n\n      const isCompliant = violations.length === 0;\n\n      this.log(\"bedrock-activation\", \"Compliance validation completed\", {\n        isCompliant,\n        violationsCount: violations.length,\n        recommendationsCount: recommendations.length,\n        overallCompliance: complianceSummary.overallCompliance,\n        bedrockCompliant: bedrockCompliance.compliant,\n        gdprCompliant,\n        euDataResidencyCompliant,\n      });\n\n      return {\n        isCompliant,\n        violations,\n        recommendations,\n        lastChecked: new Date(),\n      };\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Compliance validation failed: ${errorMessage}`\n      );\n\n      return {\n        isCompliant: false,\n        violations: [`Compliance validation error: ${errorMessage}`],\n        recommendations: [\n          \"Check compliance system configuration and provider agreements\",\n        ],\n        lastChecked: new Date(),\n      };\n    }\n  }\n\n  /**\n   * Validate GDPR compliance for both routing paths\n   */\n  private async validateGDPRCompliance(): Promise<boolean> {\n    try {\n      this.log(\n        \"bedrock-activation\",\n        \"Validating GDPR compliance for both direct Bedrock and MCP routing paths\"\n      );\n\n      // Generate comprehensive hybrid compliance report\n      const complianceReport =\n        await this.gdprHybridValidator.generateHybridComplianceReport();\n\n      // Log compliance status\n      this.log(\n        \"bedrock-activation\",\n        `Hybrid GDPR compliance report generated: ${complianceReport.overallCompliance} (Score: ${complianceReport.complianceScore}%)`\n      );\n\n      // Check if overall compliance is acceptable\n      if (complianceReport.overallCompliance === \"non_compliant\") {\n        this.log(\n          \"bedrock-activation\",\n          `GDPR compliance failed: ${complianceReport.criticalIssues.join(\n            \", \"\n          )}`\n        );\n        return false;\n      }\n\n      // Check individual routing path compliance\n      const directBedrockCompliant =\n        complianceReport.routingPathCompliance.directBedrock.isCompliant;\n      const mcpIntegrationCompliant =\n        complianceReport.routingPathCompliance.mcpIntegration.isCompliant;\n\n      if (!directBedrockCompliant) {\n        this.log(\n          \"bedrock-activation\",\n          `Direct Bedrock routing path GDPR compliance failed: ${complianceReport.routingPathCompliance.directBedrock.violations\n            .map((v) => v.description)\n            .join(\", \")}`\n        );\n      }\n\n      if (!mcpIntegrationCompliant) {\n        this.log(\n          \"bedrock-activation\",\n          `MCP integration routing path GDPR compliance failed: ${complianceReport.routingPathCompliance.mcpIntegration.violations\n            .map((v) => v.description)\n            .join(\", \")}`\n        );\n      }\n\n      // Check cross-path compliance\n      const crossPathCompliant = Object.values(\n        complianceReport.crossPathCompliance\n      ).every(Boolean);\n      if (!crossPathCompliant) {\n        this.log(\n          \"bedrock-activation\",\n          \"Cross-path GDPR compliance issues detected\"\n        );\n      }\n\n      // Log warnings if any\n      const totalWarnings =\n        complianceReport.routingPathCompliance.directBedrock.warnings.length +\n        complianceReport.routingPathCompliance.mcpIntegration.warnings.length;\n\n      if (totalWarnings > 0) {\n        this.log(\n          \"bedrock-activation\",\n          `GDPR compliance warnings detected: ${totalWarnings} warnings across routing paths`\n        );\n      }\n\n      // Return true if both paths are compliant or partially compliant with high score\n      return (\n        complianceReport.overallCompliance === \"compliant\" ||\n        (complianceReport.overallCompliance === \"partial\" &&\n          complianceReport.complianceScore >= 80)\n      );\n    } catch (error) {\n      this.log(\n        \"bedrock-activation\",\n        `GDPR compliance validation error: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Validate EU data residency compliance for direct Bedrock access\n   */\n  private async validateEUDataResidencyCompliance(): Promise<boolean> {\n    try {\n      // Check Bedrock agreement for EU data residency\n      const bedrockAgreement = this.providerCompliance.getAgreement(\"bedrock\");\n      if (!bedrockAgreement || !bedrockAgreement.euDataResidency) {\n        this.log(\n          \"bedrock-activation\",\n          \"Bedrock agreement does not guarantee EU data residency\"\n        );\n        return false;\n      }\n\n      // Validate that Bedrock is configured to use EU regions\n      const euRegionConfigured =\n        await this.validateBedrockEURegionConfiguration();\n      if (!euRegionConfigured) {\n        this.log(\n          \"bedrock-activation\",\n          \"Bedrock not configured to use EU regions for data processing\"\n        );\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      this.log(\n        \"bedrock-activation\",\n        `EU data residency validation error: ${error}`\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Validate PII detection configuration\n   */\n  private async validatePIIDetectionConfiguration(): Promise<boolean> {\n    try {\n      // Check if PII detection feature flags are enabled\n      const piiDetectionEnabled = this.featureFlags.getFlag(\n        \"pii_detection_enabled\",\n        false\n      );\n      const piiRedactionEnabled = this.featureFlags.getFlag(\n        \"pii_redaction_enabled\",\n        false\n      );\n\n      if (!piiDetectionEnabled || !piiRedactionEnabled) {\n        return false;\n      }\n\n      // Additional validation could check if PII detection services are running\n      // This would integrate with existing PII detection infrastructure\n      return true;\n    } catch (error) {\n      this.log(\n        \"bedrock-activation\",\n        `PII detection validation error: ${error}`\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Validate Bedrock EU region configuration\n   */\n  private async validateBedrockEURegionConfiguration(): Promise<boolean> {\n    try {\n      // Check if Bedrock is configured to use EU regions\n      const bedrockRegion =\n        process.env.AWS_BEDROCK_REGION || process.env.AWS_REGION || \"us-east-1\";\n\n      // EU regions for Bedrock\n      const euRegions = [\n        \"eu-central-1\",\n        \"eu-west-1\",\n        \"eu-west-2\",\n        \"eu-west-3\",\n        \"eu-north-1\",\n      ];\n\n      if (!euRegions.includes(bedrockRegion)) {\n        this.log(\n          \"bedrock-activation\",\n          `Bedrock region ${bedrockRegion} is not an EU region`\n        );\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      this.log(\n        \"bedrock-activation\",\n        `Bedrock EU region validation error: ${error}`\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Validate compliance for support operations with hybrid routing\n   */\n  private async validateComplianceForSupportOperation(\n    operationType: HybridRoutingPath[\"operationType\"],\n    routeType: HybridRoutingPath[\"routeType\"] = \"direct_bedrock\",\n    priority: HybridRoutingPath[\"priority\"] = \"medium\"\n  ): Promise<void> {\n    try {\n      this.log(\n        \"bedrock-activation\",\n        `Validating GDPR compliance for support operation: ${operationType} via ${routeType} route`\n      );\n\n      // Create routing path for validation\n      const routingPath: HybridRoutingPath = {\n        routeType,\n        provider: \"bedrock\",\n        operationType,\n        priority,\n      };\n\n      // Generate correlation ID for this validation\n      const correlationId = `support-${operationType}-${routeType}-${Date.now()}`;\n\n      // Validate GDPR compliance before routing\n      const validationResult =\n        await this.gdprHybridValidator.validateBeforeRouting(\n          routingPath,\n          correlationId\n        );\n\n      if (!validationResult.allowed) {\n        throw new Error(validationResult.reason);\n      }\n\n      // Also validate using existing compliance integration for provider agreements\n      const mockRequest = {\n        prompt: `Support operation: ${operationType}`,\n        context: {\n          domain: \"support\",\n          intent: \"infrastructure_support\",\n          routingPath: routeType,\n        },\n      };\n\n      await this.complianceIntegration.enforceCompliance(\n        mockRequest,\n        \"bedrock\",\n        correlationId\n      );\n\n      this.log(\n        \"bedrock-activation\",\n        `GDPR and provider compliance validation passed for support operation: ${operationType} via ${routeType}`\n      );\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Compliance validation failed for support operation: ${operationType} via ${routeType} - ${errorMessage}`\n      );\n\n      throw new Error(\n        `Support operation blocked due to compliance violation: ${errorMessage}`\n      );\n    }\n  }\n\n  /**\n   * Create compliance reporting for support mode\n   */\n  async createComplianceReportForSupportMode(): Promise<{\n    reportId: string;\n    timestamp: Date;\n    supportModeCompliance: {\n      overallCompliant: boolean;\n      bedrockCompliant: boolean;\n      gdprCompliant: boolean;\n      euDataResidencyCompliant: boolean;\n    };\n    hybridRoutingCompliance: {\n      mcpPathCompliant: boolean;\n      directBedrockPathCompliant: boolean;\n      auditTrailComplete: boolean;\n    };\n    violations: string[];\n    recommendations: string[];\n  }> {\n    try {\n      this.log(\n        \"bedrock-activation\",\n        \"Generating compliance report for support mode\"\n      );\n\n      const reportId = `bedrock-support-compliance-${Date.now()}`;\n      const timestamp = new Date();\n\n      // Get overall compliance status\n      const complianceStatus = await this.validateComplianceStatus();\n\n      // Check Bedrock-specific compliance\n      const bedrockCompliance =\n        await this.providerCompliance.verifyProviderCompliance(\"bedrock\");\n\n      // Check GDPR compliance\n      const gdprCompliant = await this.validateGDPRCompliance();\n\n      // Check EU data residency\n      const euDataResidencyCompliant =\n        await this.validateEUDataResidencyCompliance();\n\n      // Get compliance summary for all providers\n      const complianceSummary =\n        await this.complianceIntegration.getComplianceSummary();\n\n      const report = {\n        reportId,\n        timestamp,\n        supportModeCompliance: {\n          overallCompliant: complianceStatus.isCompliant,\n          bedrockCompliant: bedrockCompliance.compliant,\n          gdprCompliant,\n          euDataResidencyCompliant,\n        },\n        hybridRoutingCompliance: {\n          mcpPathCompliant:\n            complianceSummary.overallCompliance !== \"non_compliant\",\n          directBedrockPathCompliant:\n            bedrockCompliance.compliant && gdprCompliant,\n          auditTrailComplete: true, // Assuming audit trail is properly configured\n        },\n        violations: [\n          ...complianceStatus.violations,\n          ...bedrockCompliance.violations,\n        ],\n        recommendations: [\n          ...complianceStatus.recommendations,\n          \"Regularly review provider agreements for compliance updates\",\n          \"Monitor PII detection and redaction effectiveness\",\n          \"Ensure audit trail completeness for all support operations\",\n        ],\n      };\n\n      this.log(\n        \"bedrock-activation\",\n        \"Compliance report generated successfully\",\n        {\n          reportId,\n          overallCompliant: report.supportModeCompliance.overallCompliant,\n          violationsCount: report.violations.length,\n        }\n      );\n\n      return report;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Failed to generate compliance report: ${errorMessage}`\n      );\n\n      throw new Error(`Compliance report generation failed: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Enable Circuit Breaker Protection for Both Routing Paths\n   */\n  async enableCircuitBreaker(): Promise<void> {\n    try {\n      this.log(\n        \"bedrock-activation\",\n        \"Enabling circuit breaker protection for hybrid routing\"\n      );\n\n      // Validate circuit breaker is properly initialized\n      if (!this.circuitBreaker) {\n        throw new Error(\"Circuit breaker not initialized\");\n      }\n\n      // Enable circuit breaker for all providers\n      const providers: Provider[] = [\"bedrock\", \"google\", \"meta\"];\n\n      // Reset any existing circuit breaker states\n      providers.forEach((provider) => {\n        if (this.circuitBreaker.isOpen(provider)) {\n          this.log(\n            \"bedrock-activation\",\n            `Resetting circuit breaker for provider: ${provider}`\n          );\n          this.circuitBreaker.forceClose(provider);\n        }\n      });\n\n      // Configure circuit breaker thresholds for support operations\n      const supportConfig = {\n        failureThreshold: 3, // More sensitive for support operations\n        recoveryTimeout: 30000, // 30 seconds recovery\n        halfOpenMaxCalls: 2, // Conservative testing\n        healthCheckInterval: 15000, // 15 second health checks\n      };\n\n      // Log circuit breaker configuration\n      this.log(\n        \"bedrock-activation\",\n        `Circuit breaker configured with thresholds: ${JSON.stringify(\n          supportConfig\n        )}`\n      );\n\n      // Enable circuit breaker monitoring for direct Bedrock path\n      if (this.directBedrockClient) {\n        this.log(\n          \"bedrock-activation\",\n          \"Circuit breaker enabled for direct Bedrock path\"\n        );\n      }\n\n      // Enable circuit breaker monitoring for MCP path\n      if (this.mcpRouter) {\n        this.log(\n          \"bedrock-activation\",\n          \"Circuit breaker enabled for MCP routing path\"\n        );\n      }\n\n      // Start health monitoring for both paths\n      if (this.hybridHealthMonitor) {\n        await this.hybridHealthMonitor.startHealthMonitoring();\n        this.log(\n          \"bedrock-activation\",\n          \"Health monitoring started for hybrid routing paths\"\n        );\n      }\n\n      // Log audit trail event\n      await this.auditTrail.logSupportModeEvent(\n        \"circuit_breaker_enabled\",\n        {\n          timestamp: new Date(),\n          configuration: supportConfig,\n          enabledPaths: [\"direct_bedrock\", \"mcp_router\"],\n          healthMonitoringActive: true,\n        },\n        \"system\"\n      );\n\n      this.log(\n        \"bedrock-activation\",\n        \"Circuit breaker protection enabled for both routing paths\"\n      );\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Failed to enable circuit breaker: ${errorMessage}`\n      );\n\n      // Log failure to audit trail\n      await this.auditTrail.logSupportModeEvent(\n        \"circuit_breaker_enable_failed\",\n        {\n          timestamp: new Date(),\n          error: errorMessage,\n          context: \"circuit_breaker_activation\",\n        },\n        \"system\"\n      );\n\n      throw new Error(`Circuit breaker activation failed: ${errorMessage}`);\n    }\n  }\n\n  async checkSecurityPosture(): Promise<SecurityAuditResult> {\n    this.log(\n      \"bedrock-activation\",\n      \"Checking security posture for hybrid architecture\"\n    );\n\n    try {\n      // Start security posture monitoring if not already active\n      if (!this.securityPostureMonitor.isMonitoringActive()) {\n        await this.securityPostureMonitor.startMonitoring();\n      }\n\n      // Assess current security posture\n      const postureStatus =\n        await this.securityPostureMonitor.assessSecurityPosture();\n\n      // Convert to SecurityAuditResult format\n      const vulnerabilities: SecurityVulnerability[] = [\n        ...postureStatus.routes.mcp.vulnerabilities,\n        ...postureStatus.routes.directBedrock.vulnerabilities,\n      ];\n\n      const recommendations: string[] = [\n        ...postureStatus.recommendations.immediate.map((r) => r.description),\n        ...postureStatus.recommendations.shortTerm.map((r) => r.description),\n      ];\n\n      const result: SecurityAuditResult = {\n        securityScore: postureStatus.overall.securityScore,\n        vulnerabilities,\n        recommendations,\n        lastAudit: postureStatus.overall.lastAssessment,\n      };\n\n      this.log(\n        \"bedrock-activation\",\n        `Security posture check completed: Score ${result.securityScore}, ${vulnerabilities.length} vulnerabilities`\n      );\n\n      // Log to audit trail\n      await this.auditTrail.logSupportModeEvent(\n        \"security_posture_checked\",\n        {\n          timestamp: new Date(),\n          securityScore: result.securityScore,\n          vulnerabilityCount: vulnerabilities.length,\n          threatLevel: postureStatus.overall.threatLevel,\n          complianceStatus: postureStatus.overall.complianceStatus,\n        },\n        \"system\"\n      );\n\n      return result;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Security posture check failed: ${errorMessage}`\n      );\n\n      // Log failure to audit trail\n      await this.auditTrail.logSupportModeEvent(\n        \"security_posture_check_failed\",\n        {\n          timestamp: new Date(),\n          error: errorMessage,\n        },\n        \"system\"\n      );\n\n      // Return a degraded security result\n      return {\n        securityScore: 0,\n        vulnerabilities: [\n          {\n            id: \"security-check-failure\",\n            severity: \"critical\",\n            description: `Security posture check failed: ${errorMessage}`,\n            component: \"security-posture-monitor\",\n            remediation: \"Investigate and fix security monitoring system\",\n          },\n        ],\n        recommendations: [\n          \"Fix security posture monitoring system\",\n          \"Investigate security check failure\",\n          \"Manual security audit required\",\n        ],\n        lastAudit: new Date(),\n      };\n    }\n  }\n\n  /**\n   * Check Circuit Breaker Status for Both Routing Paths\n   */\n  async getCircuitBreakerStatus(): Promise<{\n    directBedrock: { isOpen: boolean; state: string; metrics: any };\n    mcpRouter: { isOpen: boolean; state: string; metrics: any };\n    overallHealth: \"healthy\" | \"degraded\" | \"critical\";\n  }> {\n    try {\n      // Check direct Bedrock circuit breaker\n      const directBedrockOpen = this.circuitBreaker.isOpen(\"bedrock\");\n      const directBedrockMetrics = this.circuitBreaker.getMetrics(\"bedrock\");\n\n      // Check MCP router circuit breaker (using \"google\" as MCP provider proxy)\n      const mcpRouterOpen = this.circuitBreaker.isOpen(\"google\");\n      const mcpRouterMetrics = this.circuitBreaker.getMetrics(\"google\");\n\n      // Determine overall health\n      let overallHealth: \"healthy\" | \"degraded\" | \"critical\" = \"healthy\";\n\n      if (directBedrockOpen && mcpRouterOpen) {\n        overallHealth = \"critical\"; // Both paths down\n      } else if (directBedrockOpen || mcpRouterOpen) {\n        overallHealth = \"degraded\"; // One path down\n      }\n\n      const status = {\n        directBedrock: {\n          isOpen: directBedrockOpen,\n          state: directBedrockMetrics.state,\n          metrics: directBedrockMetrics,\n        },\n        mcpRouter: {\n          isOpen: mcpRouterOpen,\n          state: mcpRouterMetrics.state,\n          metrics: mcpRouterMetrics,\n        },\n        overallHealth,\n      };\n\n      // Log status check to audit trail\n      await this.auditTrail.logSupportModeEvent(\n        \"circuit_breaker_status_check\",\n        {\n          timestamp: new Date(),\n          status,\n          overallHealth,\n        },\n        \"system\"\n      );\n\n      return status;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Failed to check circuit breaker status: ${errorMessage}`\n      );\n\n      throw new Error(`Circuit breaker status check failed: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Handle Circuit Breaker Failures with Intelligent Fallback\n   */\n  async handleCircuitBreakerFailure(\n    failedPath: \"direct\" | \"mcp\",\n    operation: string,\n    context: any\n  ): Promise<void> {\n    try {\n      this.log(\n        \"bedrock-activation\",\n        `Handling circuit breaker failure for ${failedPath} path during ${operation}`\n      );\n\n      // Log failure event\n      await this.auditTrail.logSupportModeEvent(\n        \"circuit_breaker_failure\",\n        {\n          timestamp: new Date(),\n          failedPath,\n          operation,\n          context,\n        },\n        \"system\"\n      );\n\n      // Attempt intelligent fallback through router\n      if (this.intelligentRouter) {\n        const fallbackRoute = failedPath === \"direct\" ? \"mcp\" : \"direct\";\n\n        this.log(\n          \"bedrock-activation\",\n          `Attempting fallback to ${fallbackRoute} path`\n        );\n\n        // Check if fallback path is available\n        const fallbackProvider =\n          fallbackRoute === \"direct\" ? \"bedrock\" : \"google\";\n        const fallbackAvailable = !this.circuitBreaker.isOpen(fallbackProvider);\n\n        if (fallbackAvailable) {\n          this.log(\n            \"bedrock-activation\",\n            `Fallback to ${fallbackRoute} path is available`\n          );\n        } else {\n          this.log(\n            \"bedrock-activation\",\n            `Fallback to ${fallbackRoute} path is also unavailable - both paths down`\n          );\n\n          // Both paths down - trigger emergency procedures\n          await this.triggerEmergencyProcedures(operation, context);\n        }\n      }\n\n      // Update health monitoring\n      if (this.hybridHealthMonitor) {\n        await this.hybridHealthMonitor.recordFailure(failedPath, operation);\n      }\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Failed to handle circuit breaker failure: ${errorMessage}`\n      );\n\n      throw new Error(\n        `Circuit breaker failure handling failed: ${errorMessage}`\n      );\n    }\n  }\n\n  /**\n   * Trigger Emergency Procedures when Both Paths are Down\n   */\n  private async triggerEmergencyProcedures(\n    operation: string,\n    context: any\n  ): Promise<void> {\n    try {\n      this.log(\n        \"bedrock-activation\",\n        `Triggering emergency procedures for operation: ${operation}`\n      );\n\n      // Log emergency event\n      await this.auditTrail.logSupportModeEvent(\n        \"emergency_procedures_triggered\",\n        {\n          timestamp: new Date(),\n          operation,\n          context,\n          reason: \"both_routing_paths_unavailable\",\n        },\n        \"system\"\n      );\n\n      // Disable support mode temporarily\n      this.isActivated = false;\n\n      // Send emergency notifications\n      await this.sendEmergencyNotifications(operation, context);\n\n      // Force reset circuit breakers after emergency timeout\n      setTimeout(async () => {\n        try {\n          this.log(\n            \"bedrock-activation\",\n            \"Attempting emergency circuit breaker reset\"\n          );\n\n          this.circuitBreaker.resetAll();\n\n          // Re-enable support mode if feature flag is still active\n          const supportModeEnabled =\n            await this.featureFlags.isBedrockSupportModeEnabled();\n          if (supportModeEnabled) {\n            this.isActivated = true;\n            this.log(\n              \"bedrock-activation\",\n              \"Support mode re-enabled after emergency reset\"\n            );\n          }\n        } catch (resetError) {\n          this.log(\n            \"bedrock-activation\",\n            `Emergency reset failed: ${resetError}`\n          );\n        }\n      }, 60000); // 1 minute emergency timeout\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Failed to trigger emergency procedures: ${errorMessage}`\n      );\n    }\n  }\n\n  /**\n   * Send Emergency Notifications\n   */\n  private async sendEmergencyNotifications(\n    operation: string,\n    context: any\n  ): Promise<void> {\n    try {\n      // Send notifications through configured channels\n      for (const channel of this.config.notificationChannels) {\n        if (channel.enabled) {\n          const message = `EMERGENCY: Bedrock Support Mode - Both routing paths unavailable during ${operation}`;\n\n          this.log(\n            \"bedrock-activation\",\n            `Sending emergency notification via ${channel.type}: ${message}`\n          );\n\n          // In production, this would send actual notifications\n          // For now, just log the notification\n        }\n      }\n    } catch (error) {\n      this.log(\n        \"bedrock-activation\",\n        `Failed to send emergency notifications: ${error}`\n      );\n    }\n  }\n\n  // Cost & Performance Methods (using existing CostPerformanceOptimizer)\n  async monitorCostThresholds(): Promise<CostAnalysis> {\n    try {\n      // Get cost summary from existing optimizer\n      const costSummary = this.costPerformanceOptimizer.getCostSummary();\n      const performanceMetrics =\n        this.costPerformanceOptimizer.getPerformanceMetrics();\n\n      // Log cost monitoring event\n      await this.auditTrail.logEvent({\n        eventType: \"cost_monitoring\",\n        userId: \"system\",\n        action: \"monitor_cost_thresholds\",\n        resourceType: \"cost_performance\",\n        resourceId: \"bedrock-support-mode\",\n        metadata: {\n          dailySpent: costSummary.daily.spent,\n          monthlySpent: costSummary.monthly.spent,\n          dailyRemaining: costSummary.daily.remaining,\n          monthlyRemaining: costSummary.monthly.remaining,\n          cacheHitRate: performanceMetrics.cacheHitRate,\n        },\n        timestamp: new Date(),\n        ipAddress: \"internal\",\n        userAgent: \"bedrock-support-manager\",\n      });\n\n      // Check for emergency shutdown conditions\n      const costPressure =\n        costSummary.monthly.spent / costSummary.monthly.limit;\n      if (costPressure > 0.95) {\n        await this.emergencyShutdownManager.triggerShutdown(\n          \"all\",\n          \"cost_overrun\",\n          \"manual\",\n          {\n            costEuro: costSummary.monthly.spent,\n            additionalInfo: {\n              dailySpent: costSummary.daily.spent,\n              monthlyLimit: costSummary.monthly.limit,\n            },\n          }\n        );\n      }\n\n      // Return cost analysis in expected format\n      return {\n        currentSpend: costSummary.monthly.spent,\n        projectedSpend: costSummary.monthly.spent * (30 / new Date().getDate()), // Simple projection\n        budgetUtilization: costPressure,\n        costBreakdown: {\n          daily: costSummary.daily.spent,\n          monthly: costSummary.monthly.spent,\n          cacheHitRate: performanceMetrics.cacheHitRate,\n        },\n        recommendations: this.generateCostRecommendations(\n          costSummary,\n          performanceMetrics\n        ),\n      };\n    } catch (error) {\n      this.log(\n        \"bedrock-activation\",\n        `Error monitoring cost thresholds: ${error}`\n      );\n\n      return {\n        currentSpend: 0,\n        projectedSpend: 0,\n        budgetUtilization: 0,\n        costBreakdown: {},\n        recommendations: [\n          \"Error retrieving cost data - please check cost monitoring system\",\n        ],\n      };\n    }\n  }\n\n  /**\n   * Generate cost optimization recommendations\n   */\n  private generateCostRecommendations(\n    costSummary: any,\n    performanceMetrics: any\n  ): string[] {\n    const recommendations: string[] = [];\n\n    // Check cache hit rate\n    if (performanceMetrics.cacheHitRate < 0.5) {\n      recommendations.push(\n        \"Improve cache hit rate to reduce AI provider costs\"\n      );\n    }\n\n    // Check daily budget utilization\n    const dailyUtilization = costSummary.daily.spent / costSummary.daily.limit;\n    if (dailyUtilization > 0.8) {\n      recommendations.push(\n        \"Daily budget utilization high - consider implementing cost optimization strategies\"\n      );\n    }\n\n    // Check monthly budget utilization\n    const monthlyUtilization =\n      costSummary.monthly.spent / costSummary.monthly.limit;\n    if (monthlyUtilization > 0.75) {\n      recommendations.push(\n        \"Monthly budget on track to exceed - review operation priorities\"\n      );\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Get detailed cost and performance status\n   */\n  async getCostPerformanceStatus() {\n    const costSummary = this.costPerformanceOptimizer.getCostSummary();\n    const performanceMetrics =\n      this.costPerformanceOptimizer.getPerformanceMetrics();\n    const shutdownStatus = this.emergencyShutdownManager.getStatus();\n\n    return {\n      cost: costSummary,\n      performance: performanceMetrics,\n      emergencyShutdown: shutdownStatus,\n    };\n  }\n\n  /**\n   * Track cost for a support operation (stub for compatibility)\n   */\n  async trackSupportOperationCost(\n    operationId: string,\n    route: \"direct\" | \"mcp\" | \"fallback\" | \"hybrid\",\n    operationType:\n      | \"emergency\"\n      | \"infrastructure\"\n      | \"meta_monitor\"\n      | \"implementation\"\n      | \"standard\",\n    cost: number,\n    tokensUsed?: { input: number; output: number }\n  ): Promise<void> {\n    await this.costBudgetMonitor.trackOperationCost({\n      operationId,\n      route,\n      operationType,\n      cost,\n      tokensUsed,\n      timestamp: new Date(),\n      metadata: {\n        supportMode: true,\n        bedrockActivation: this.isActivated,\n      },\n    });\n  }\n\n  async optimizePerformance(): Promise<PerformanceOptimization> {\n    return {\n      currentMetrics: {\n        responseTime: 0,\n        memoryUsage: 0,\n        cpuUsage: 0,\n        networkLatency: 0,\n      },\n      optimizationOpportunities: [],\n      expectedImprovements: {},\n    };\n  }\n\n  async enableEmergencyMode(): Promise<void> {\n    this.log(\"bedrock-activation\", \"Emergency mode enabled\");\n  }\n\n  // Template & Prompt Methods (Stubs for now)\n  async validatePromptTemplates(): Promise<TemplateValidationResult> {\n    return {\n      isValid: true,\n      errors: [],\n      warnings: [],\n      templateCount: 0,\n    };\n  }\n\n  async enablePIIRedaction(): Promise<void> {\n    this.log(\"bedrock-activation\", \"PII redaction enabled\");\n  }\n\n  /**\n   * Run comprehensive red team security evaluations for direct Bedrock\n   *\n   * This method executes automated security testing including:\n   * - Prompt injection detection\n   * - Jailbreak attempt detection\n   * - Data exfiltration prevention\n   * - Privilege escalation prevention\n   * - Denial of service protection\n   */\n  async runRedTeamEvaluations(): Promise<SecurityTestResult> {\n    try {\n      this.log(\"bedrock-activation\", \"Starting red team security evaluation\");\n\n      // Check if red team evaluations are enabled\n      if (!this.featureFlags.isEnabled(\"red_team_evaluation_enabled\", true)) {\n        this.log(\"bedrock-activation\", \"Red team evaluations are disabled\");\n        return {\n          passed: true,\n          testResults: [],\n          overallScore: 100,\n          recommendations: [\n            \"Red team evaluations are disabled - enable for security testing\",\n          ],\n        };\n      }\n\n      // Initialize red team evaluator with direct Bedrock client\n      const evaluator = new RedTeamEvaluator(this.directBedrockClient, {\n        enablePromptInjectionTests: true,\n        enableJailbreakTests: true,\n        enableDataExfiltrationTests: true,\n        enablePrivilegeEscalationTests: true,\n        enableDenialOfServiceTests: true,\n        testDepth: \"standard\",\n        maxTestsPerCategory: 5,\n        timeoutMs: 30000,\n      });\n\n      // Run comprehensive evaluation\n      const report: RedTeamEvaluationReport = await evaluator.runEvaluation();\n\n      // Log evaluation results\n      await this.auditTrail.logEvent({\n        eventType: \"red_team_evaluation\",\n        requestId: report.evaluationId,\n        provider: \"bedrock\",\n        complianceStatus:\n          report.vulnerabilitiesDetected > 0 ? \"violation\" : \"compliant\",\n        metadata: {\n          totalTests: report.totalTests,\n          testsPassed: report.testsPassed,\n          testsFailed: report.testsFailed,\n          vulnerabilitiesDetected: report.vulnerabilitiesDetected,\n          securityScore: report.overallSecurityScore,\n          criticalVulnerabilities: report.criticalVulnerabilities.length,\n          highVulnerabilities: report.highVulnerabilities.length,\n          executionTimeMs: report.executionTimeMs,\n        },\n      });\n\n      // Convert red team report to SecurityTestResult format\n      const testResults: SecurityTest[] = [\n        ...report.criticalVulnerabilities.map((v) => ({\n          testName: v.testName,\n          passed: v.passed,\n          details: v.description,\n          severity: v.severity,\n        })),\n        ...report.highVulnerabilities.map((v) => ({\n          testName: v.testName,\n          passed: v.passed,\n          details: v.description,\n          severity: v.severity,\n        })),\n        ...report.mediumVulnerabilities.map((v) => ({\n          testName: v.testName,\n          passed: v.passed,\n          details: v.description,\n          severity: v.severity,\n        })),\n        ...report.lowVulnerabilities.map((v) => ({\n          testName: v.testName,\n          passed: v.passed,\n          details: v.description,\n          severity: v.severity,\n        })),\n      ];\n\n      const passed = report.vulnerabilitiesDetected === 0;\n\n      this.log(\n        \"bedrock-activation\",\n        `Red team evaluation completed: ${passed ? \"PASSED\" : \"FAILED\"} ` +\n          `(Score: ${report.overallSecurityScore}/100, ` +\n          `Vulnerabilities: ${report.vulnerabilitiesDetected})`\n      );\n\n      return {\n        passed,\n        testResults,\n        overallScore: report.overallSecurityScore,\n        recommendations: report.recommendations,\n      };\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : \"Unknown error\";\n\n      this.log(\n        \"bedrock-activation\",\n        `Red team evaluation failed: ${errorMessage}`\n      );\n\n      // Log error to audit trail\n      await this.auditTrail.logEvent({\n        eventType: \"red_team_evaluation\",\n        requestId: `red-team-eval-error-${Date.now()}`,\n        provider: \"bedrock\",\n        complianceStatus: \"violation\",\n        error: {\n          type: \"evaluation_error\",\n          message: errorMessage,\n        },\n      });\n\n      return {\n        passed: false,\n        testResults: [\n          {\n            testName: \"Red Team Evaluation\",\n            passed: false,\n            details: `Evaluation failed: ${errorMessage}`,\n            severity: \"critical\",\n          },\n        ],\n        overallScore: 0,\n        recommendations: [\n          \"Fix red team evaluation system errors\",\n          \"Review direct Bedrock client configuration\",\n          \"Check security testing infrastructure\",\n        ],\n      };\n    }\n  }\n\n  /**\n   * Get default configuration\n   */\n  private getDefaultConfig(\n    overrides?: Partial<BedrockSupportConfig>\n  ): BedrockSupportConfig {\n    return {\n      enabled: false,\n      environments: [\"development\", \"staging\", \"production\"],\n      auditInterval: 1800000, // 30 minutes\n      monitoringLevel: \"basic\",\n      autoResolutionEnabled: false,\n      notificationChannels: [],\n      ...overrides,\n    };\n  }\n\n  /**\n   * Get system resource monitoring status\n   * Ensures support mode overhead stays under 5% of system resources\n   */\n  public getResourceMonitoringStatus(): {\n    isMonitoring: boolean;\n    isWithinThresholds: boolean;\n    currentMetrics: any;\n    summary: any;\n    alerts: any[];\n  } {\n    const status = this.systemResourceMonitor.getStatus();\n    const summary = this.systemResourceMonitor.getResourceSummary();\n    const alerts = this.systemResourceMonitor.getActiveAlerts();\n\n    return {\n      isMonitoring: status.isMonitoring,\n      isWithinThresholds: summary.isWithinThresholds,\n      currentMetrics: summary.current,\n      summary,\n      alerts,\n    };\n  }\n\n  /**\n   * Check if support mode is within the 5% system resource overhead requirement\n   */\n  public async validateResourceOverhead(): Promise<{\n    isCompliant: boolean;\n    cpuUsage: number;\n    memoryUsage: number;\n    thresholds: any;\n    recommendations: string[];\n  }> {\n    const currentMetrics = await this.systemResourceMonitor.getCurrentMetrics();\n    const summary = this.systemResourceMonitor.getResourceSummary();\n    const status = this.systemResourceMonitor.getStatus();\n\n    const recommendations: string[] = [];\n\n    // Check CPU usage against 1% threshold (well under 5%)\n    if (currentMetrics.cpuUsagePercent > 0.8) {\n      recommendations.push(\n        `CPU usage (${currentMetrics.cpuUsagePercent.toFixed(\n          2\n        )}%) approaching threshold. Consider optimizing support operations.`\n      );\n    }\n\n    // Check memory usage against 50MB threshold\n    if (currentMetrics.memoryUsageMB > 40) {\n      recommendations.push(\n        `Memory usage (${currentMetrics.memoryUsageMB.toFixed(\n          2\n        )}MB) approaching threshold. Consider memory optimization.`\n      );\n    }\n\n    // Check if monitoring is active\n    if (!status.isMonitoring) {\n      recommendations.push(\n        \"Resource monitoring is not active. Enable monitoring to track overhead.\"\n      );\n    }\n\n    const isCompliant =\n      currentMetrics.cpuUsagePercent <= 1.0 && // 1% CPU (well under 5%)\n      currentMetrics.memoryUsageMB <= 50 && // 50MB memory (reasonable for 5% overhead)\n      status.isMonitoring;\n\n    await this.auditTrail.logEvent({\n      eventType: \"resource_overhead_validation\",\n      timestamp: new Date(),\n      details: {\n        component: \"BedrockSupportManager\",\n        isCompliant,\n        cpuUsage: currentMetrics.cpuUsagePercent,\n        memoryUsage: currentMetrics.memoryUsageMB,\n        thresholds: status.config.thresholds,\n        recommendations,\n      },\n    });\n\n    return {\n      isCompliant,\n      cpuUsage: currentMetrics.cpuUsagePercent,\n      memoryUsage: currentMetrics.memoryUsageMB,\n      thresholds: status.config.thresholds,\n      recommendations,\n    };\n  }\n\n  /**\n   * Get performance metrics with resource overhead information\n   */\n  public async getPerformanceMetricsWithOverhead(): Promise<\n    PerformanceMetrics & {\n      resourceOverhead: {\n        cpuUsagePercent: number;\n        memoryUsageMB: number;\n        isWithinThresholds: boolean;\n      };\n    }\n  > {\n    const currentMetrics = await this.systemResourceMonitor.getCurrentMetrics();\n    const summary = this.systemResourceMonitor.getResourceSummary();\n\n    return {\n      responseTime: 0, // This would be populated by actual operations\n      memoryUsage: currentMetrics.memoryUsageMB,\n      cpuUsage: currentMetrics.cpuUsagePercent,\n      networkLatency: 0, // This would be populated by actual operations\n      resourceOverhead: {\n        cpuUsagePercent: currentMetrics.cpuUsagePercent,\n        memoryUsageMB: currentMetrics.memoryUsageMB,\n        isWithinThresholds: summary.isWithinThresholds,\n      },\n    };\n  }\n\n  /**\n   * Emergency shutdown if resource usage exceeds critical thresholds\n   */\n  public async emergencyShutdownOnResourceOverhead(): Promise<void> {\n    const validation = await this.validateResourceOverhead();\n\n    // If CPU usage exceeds 2% or memory exceeds 100MB, trigger emergency shutdown\n    if (validation.cpuUsage > 2.0 || validation.memoryUsage > 100) {\n      this.log(\n        \"bedrock-activation\",\n        `Emergency shutdown triggered due to excessive resource usage: CPU ${validation.cpuUsage.toFixed(\n          2\n        )}%, Memory ${validation.memoryUsage.toFixed(2)}MB`\n      );\n\n      await this.auditTrail.logEvent({\n        eventType: \"emergency_shutdown_resource_overhead\",\n        timestamp: new Date(),\n        details: {\n          component: \"BedrockSupportManager\",\n          trigger: \"resource_overhead\",\n          cpuUsage: validation.cpuUsage,\n          memoryUsage: validation.memoryUsage,\n          thresholds: validation.thresholds,\n        },\n      });\n\n      // Deactivate support mode\n      await this.deactivate();\n\n      // Use emergency shutdown manager\n      await this.emergencyShutdownManager.triggerEmergencyShutdown(\n        \"resource_overhead\",\n        `Resource usage exceeded safe limits: CPU ${validation.cpuUsage.toFixed(\n          2\n        )}%, Memory ${validation.memoryUsage.toFixed(2)}MB`\n      );\n    }\n  }\n\n  /**\n   * Log with bedrock-activation prefix\n   */\n  private log(prefix: string, message: string): void {\n    this.logger.log(`[${prefix}] ${message}`);\n  }\n}\n\n/**\n * Factory function to create a Bedrock Support Manager instance\n */\nexport function createBedrockSupportManager(\n  config?: Partial<BedrockSupportConfig>,\n  featureFlags?: AiFeatureFlags,\n  bedrockAdapter?: BedrockAdapter\n): BedrockSupportManager {\n  return new BedrockSupportManager(config, featureFlags, bedrockAdapter);\n}\n\n/**\n * Default export\n */\nexport default BedrockSupportManager;\n"],"mappings":"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","ignoreList":[]}
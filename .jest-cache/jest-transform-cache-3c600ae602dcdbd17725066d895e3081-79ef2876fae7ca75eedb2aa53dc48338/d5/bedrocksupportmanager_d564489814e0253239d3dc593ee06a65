93b3897b3a9d21590572f539648a5b41
"use strict";

/**
 * Bedrock Support Manager - Core orchestrator for support operations
 *
 * This module implements the central Bedrock Support Manager that coordinates
 * infrastructure validation, meta-monitoring, and implementation support using
 * a hybrid routing approach (direct Bedrock + MCP integration).
 */
/* istanbul ignore next */
function cov_2a6yemoeqm() {
  var path = "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/bedrock-support-manager.ts";
  var hash = "799bab7856347f1513c6a7f31659081205d70baa";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/bedrock-support-manager.ts",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 62
        }
      },
      "1": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 39
        }
      },
      "2": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 66
        }
      },
      "3": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 32
        }
      },
      "4": {
        start: {
          line: 13,
          column: 26
        },
        end: {
          line: 13,
          column: 63
        }
      },
      "5": {
        start: {
          line: 14,
          column: 27
        },
        end: {
          line: 14,
          column: 56
        }
      },
      "6": {
        start: {
          line: 15,
          column: 29
        },
        end: {
          line: 15,
          column: 60
        }
      },
      "7": {
        start: {
          line: 16,
          column: 26
        },
        end: {
          line: 16,
          column: 54
        }
      },
      "8": {
        start: {
          line: 17,
          column: 33
        },
        end: {
          line: 17,
          column: 68
        }
      },
      "9": {
        start: {
          line: 18,
          column: 37
        },
        end: {
          line: 18,
          column: 76
        }
      },
      "10": {
        start: {
          line: 19,
          column: 32
        },
        end: {
          line: 19,
          column: 66
        }
      },
      "11": {
        start: {
          line: 20,
          column: 37
        },
        end: {
          line: 20,
          column: 76
        }
      },
      "12": {
        start: {
          line: 21,
          column: 43
        },
        end: {
          line: 21,
          column: 88
        }
      },
      "13": {
        start: {
          line: 22,
          column: 32
        },
        end: {
          line: 22,
          column: 66
        }
      },
      "14": {
        start: {
          line: 23,
          column: 33
        },
        end: {
          line: 23,
          column: 68
        }
      },
      "15": {
        start: {
          line: 24,
          column: 33
        },
        end: {
          line: 24,
          column: 68
        }
      },
      "16": {
        start: {
          line: 25,
          column: 29
        },
        end: {
          line: 25,
          column: 60
        }
      },
      "17": {
        start: {
          line: 26,
          column: 22
        },
        end: {
          line: 26,
          column: 46
        }
      },
      "18": {
        start: {
          line: 27,
          column: 21
        },
        end: {
          line: 27,
          column: 44
        }
      },
      "19": {
        start: {
          line: 28,
          column: 23
        },
        end: {
          line: 28,
          column: 48
        }
      },
      "20": {
        start: {
          line: 29,
          column: 40
        },
        end: {
          line: 29,
          column: 82
        }
      },
      "21": {
        start: {
          line: 30,
          column: 29
        },
        end: {
          line: 30,
          column: 60
        }
      },
      "22": {
        start: {
          line: 31,
          column: 35
        },
        end: {
          line: 31,
          column: 72
        }
      },
      "23": {
        start: {
          line: 32,
          column: 34
        },
        end: {
          line: 32,
          column: 70
        }
      },
      "24": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 33
        }
      },
      "25": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 52
        }
      },
      "26": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 84
        }
      },
      "27": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 87
        }
      },
      "28": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 30
        }
      },
      "29": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 46,
          column: 100
        }
      },
      "30": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 48,
          column: 90
        }
      },
      "31": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 50,
          column: 106
        }
      },
      "32": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 57,
          column: 11
        }
      },
      "33": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 63,
          column: 11
        }
      },
      "34": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 72,
          column: 11
        }
      },
      "35": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 78,
          column: 11
        }
      },
      "36": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 201
        }
      },
      "37": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 124
        }
      },
      "38": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 118
        }
      },
      "39": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 148
        }
      },
      "40": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 144
        }
      },
      "41": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 107
        }
      },
      "42": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 253
        }
      },
      "43": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 99,
          column: 11
        }
      },
      "44": {
        start: {
          line: 101,
          column: 27
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "45": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 152
        }
      },
      "46": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 126,
          column: 68
        }
      },
      "47": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 214,
          column: 11
        }
      },
      "48": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 213,
          column: 13
        }
      },
      "49": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 134,
          column: 94
        }
      },
      "50": {
        start: {
          line: 136,
          column: 43
        },
        end: {
          line: 136,
          column: 96
        }
      },
      "51": {
        start: {
          line: 137,
          column: 16
        },
        end: {
          line: 146,
          column: 17
        }
      },
      "52": {
        start: {
          line: 138,
          column: 36
        },
        end: {
          line: 138,
          column: 87
        }
      },
      "53": {
        start: {
          line: 139,
          column: 20
        },
        end: {
          line: 139,
          column: 60
        }
      },
      "54": {
        start: {
          line: 140,
          column: 20
        },
        end: {
          line: 145,
          column: 22
        }
      },
      "55": {
        start: {
          line: 148,
          column: 35
        },
        end: {
          line: 148,
          column: 92
        }
      },
      "56": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 159,
          column: 17
        }
      },
      "57": {
        start: {
          line: 150,
          column: 36
        },
        end: {
          line: 150,
          column: 101
        }
      },
      "58": {
        start: {
          line: 151,
          column: 20
        },
        end: {
          line: 151,
          column: 60
        }
      },
      "59": {
        start: {
          line: 152,
          column: 20
        },
        end: {
          line: 158,
          column: 22
        }
      },
      "60": {
        start: {
          line: 161,
          column: 39
        },
        end: {
          line: 161,
          column: 91
        }
      },
      "61": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 171,
          column: 17
        }
      },
      "62": {
        start: {
          line: 163,
          column: 36
        },
        end: {
          line: 163,
          column: 69
        }
      },
      "63": {
        start: {
          line: 164,
          column: 20
        },
        end: {
          line: 164,
          column: 60
        }
      },
      "64": {
        start: {
          line: 165,
          column: 20
        },
        end: {
          line: 170,
          column: 22
        }
      },
      "65": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 173,
          column: 87
        }
      },
      "66": {
        start: {
          line: 174,
          column: 36
        },
        end: {
          line: 174,
          column: 71
        }
      },
      "67": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 184,
          column: 17
        }
      },
      "68": {
        start: {
          line: 176,
          column: 36
        },
        end: {
          line: 176,
          column: 107
        }
      },
      "69": {
        start: {
          line: 177,
          column: 20
        },
        end: {
          line: 177,
          column: 60
        }
      },
      "70": {
        start: {
          line: 178,
          column: 20
        },
        end: {
          line: 183,
          column: 22
        }
      },
      "71": {
        start: {
          line: 186,
          column: 16
        },
        end: {
          line: 186,
          column: 40
        }
      },
      "72": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 187,
          column: 43
        }
      },
      "73": {
        start: {
          line: 189,
          column: 16
        },
        end: {
          line: 189,
          column: 67
        }
      },
      "74": {
        start: {
          line: 190,
          column: 16
        },
        end: {
          line: 190,
          column: 85
        }
      },
      "75": {
        start: {
          line: 191,
          column: 32
        },
        end: {
          line: 191,
          column: 77
        }
      },
      "76": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 192,
          column: 56
        }
      },
      "77": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 199,
          column: 18
        }
      },
      "78": {
        start: {
          line: 202,
          column: 32
        },
        end: {
          line: 202,
          column: 134
        }
      },
      "79": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 203,
          column: 56
        }
      },
      "80": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 205,
          column: 41
        }
      },
      "81": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 206,
          column: 44
        }
      },
      "82": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 212,
          column: 18
        }
      },
      "83": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 236,
          column: 11
        }
      },
      "84": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 235,
          column: 13
        }
      },
      "85": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 222,
          column: 84
        }
      },
      "86": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 224,
          column: 66
        }
      },
      "87": {
        start: {
          line: 225,
          column: 16
        },
        end: {
          line: 225,
          column: 85
        }
      },
      "88": {
        start: {
          line: 226,
          column: 16
        },
        end: {
          line: 226,
          column: 41
        }
      },
      "89": {
        start: {
          line: 227,
          column: 16
        },
        end: {
          line: 227,
          column: 44
        }
      },
      "90": {
        start: {
          line: 229,
          column: 16
        },
        end: {
          line: 229,
          column: 74
        }
      },
      "91": {
        start: {
          line: 230,
          column: 16
        },
        end: {
          line: 230,
          column: 96
        }
      },
      "92": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 233,
          column: 137
        }
      },
      "93": {
        start: {
          line: 234,
          column: 16
        },
        end: {
          line: 234,
          column: 28
        }
      },
      "94": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 245,
          column: 10
        }
      },
      "95": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 251,
          column: 55
        }
      },
      "96": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 486,
          column: 11
        }
      },
      "97": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 108
        }
      },
      "98": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 109
        }
      },
      "99": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 485,
          column: 13
        }
      },
      "100": {
        start: {
          line: 263,
          column: 45
        },
        end: {
          line: 263,
          column: 81
        }
      },
      "101": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 303,
          column: 17
        }
      },
      "102": {
        start: {
          line: 265,
          column: 20
        },
        end: {
          line: 265,
          column: 116
        }
      },
      "103": {
        start: {
          line: 266,
          column: 20
        },
        end: {
          line: 302,
          column: 22
        }
      },
      "104": {
        start: {
          line: 305,
          column: 36
        },
        end: {
          line: 308,
          column: 19
        }
      },
      "105": {
        start: {
          line: 306,
          column: 22
        },
        end: {
          line: 308,
          column: 18
        }
      },
      "106": {
        start: {
          line: 307,
          column: 20
        },
        end: {
          line: 307,
          column: 87
        }
      },
      "107": {
        start: {
          line: 309,
          column: 16
        },
        end: {
          line: 309,
          column: 118
        }
      },
      "108": {
        start: {
          line: 312,
          column: 31
        },
        end: {
          line: 312,
          column: 33
        }
      },
      "109": {
        start: {
          line: 313,
          column: 29
        },
        end: {
          line: 313,
          column: 31
        }
      },
      "110": {
        start: {
          line: 314,
          column: 40
        },
        end: {
          line: 314,
          column: 42
        }
      },
      "111": {
        start: {
          line: 316,
          column: 39
        },
        end: {
          line: 316,
          column: 81
        }
      },
      "112": {
        start: {
          line: 317,
          column: 16
        },
        end: {
          line: 329,
          column: 17
        }
      },
      "113": {
        start: {
          line: 319,
          column: 46
        },
        end: {
          line: 320,
          column: 69
        }
      },
      "114": {
        start: {
          line: 319,
          column: 84
        },
        end: {
          line: 320,
          column: 68
        }
      },
      "115": {
        start: {
          line: 321,
          column: 20
        },
        end: {
          line: 328,
          column: 23
        }
      },
      "116": {
        start: {
          line: 331,
          column: 34
        },
        end: {
          line: 331,
          column: 63
        }
      },
      "117": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 344,
          column: 17
        }
      },
      "118": {
        start: {
          line: 333,
          column: 36
        },
        end: {
          line: 333,
          column: 87
        }
      },
      "119": {
        start: {
          line: 334,
          column: 20
        },
        end: {
          line: 343,
          column: 21
        }
      },
      "120": {
        start: {
          line: 335,
          column: 24
        },
        end: {
          line: 342,
          column: 27
        }
      },
      "121": {
        start: {
          line: 346,
          column: 39
        },
        end: {
          line: 346,
          column: 86
        }
      },
      "122": {
        start: {
          line: 346,
          column: 60
        },
        end: {
          line: 346,
          column: 85
        }
      },
      "123": {
        start: {
          line: 347,
          column: 35
        },
        end: {
          line: 347,
          column: 78
        }
      },
      "124": {
        start: {
          line: 347,
          column: 56
        },
        end: {
          line: 347,
          column: 77
        }
      },
      "125": {
        start: {
          line: 348,
          column: 37
        },
        end: {
          line: 348,
          column: 82
        }
      },
      "126": {
        start: {
          line: 348,
          column: 58
        },
        end: {
          line: 348,
          column: 81
        }
      },
      "127": {
        start: {
          line: 350,
          column: 16
        },
        end: {
          line: 358,
          column: 17
        }
      },
      "128": {
        start: {
          line: 351,
          column: 20
        },
        end: {
          line: 351,
          column: 47
        }
      },
      "129": {
        start: {
          line: 353,
          column: 21
        },
        end: {
          line: 358,
          column: 17
        }
      },
      "130": {
        start: {
          line: 354,
          column: 20
        },
        end: {
          line: 354,
          column: 46
        }
      },
      "131": {
        start: {
          line: 357,
          column: 20
        },
        end: {
          line: 357,
          column: 46
        }
      },
      "132": {
        start: {
          line: 360,
          column: 16
        },
        end: {
          line: 372,
          column: 17
        }
      },
      "133": {
        start: {
          line: 361,
          column: 20
        },
        end: {
          line: 371,
          column: 23
        }
      },
      "134": {
        start: {
          line: 373,
          column: 31
        },
        end: {
          line: 385,
          column: 17
        }
      },
      "135": {
        start: {
          line: 386,
          column: 16
        },
        end: {
          line: 386,
          column: 125
        }
      },
      "136": {
        start: {
          line: 387,
          column: 16
        },
        end: {
          line: 387,
          column: 30
        }
      },
      "137": {
        start: {
          line: 390,
          column: 37
        },
        end: {
          line: 390,
          column: 93
        }
      },
      "138": {
        start: {
          line: 391,
          column: 16
        },
        end: {
          line: 391,
          column: 95
        }
      },
      "139": {
        start: {
          line: 393,
          column: 46
        },
        end: {
          line: 393,
          column: 94
        }
      },
      "140": {
        start: {
          line: 394,
          column: 16
        },
        end: {
          line: 440,
          column: 17
        }
      },
      "141": {
        start: {
          line: 396,
          column: 20
        },
        end: {
          line: 397,
          column: 92
        }
      },
      "142": {
        start: {
          line: 399,
          column: 20
        },
        end: {
          line: 439,
          column: 21
        }
      },
      "143": {
        start: {
          line: 400,
          column: 24
        },
        end: {
          line: 400,
          column: 111
        }
      },
      "144": {
        start: {
          line: 401,
          column: 47
        },
        end: {
          line: 404,
          column: 27
        }
      },
      "145": {
        start: {
          line: 402,
          column: 30
        },
        end: {
          line: 404,
          column: 26
        }
      },
      "146": {
        start: {
          line: 403,
          column: 28
        },
        end: {
          line: 403,
          column: 95
        }
      },
      "147": {
        start: {
          line: 405,
          column: 24
        },
        end: {
          line: 405,
          column: 123
        }
      },
      "148": {
        start: {
          line: 407,
          column: 24
        },
        end: {
          line: 430,
          column: 33
        }
      },
      "149": {
        start: {
          line: 433,
          column: 24
        },
        end: {
          line: 433,
          column: 101
        }
      },
      "150": {
        start: {
          line: 435,
          column: 24
        },
        end: {
          line: 438,
          column: 27
        }
      },
      "151": {
        start: {
          line: 442,
          column: 16
        },
        end: {
          line: 447,
          column: 29
        }
      },
      "152": {
        start: {
          line: 449,
          column: 16
        },
        end: {
          line: 484,
          column: 18
        }
      },
      "153": {
        start: {
          line: 492,
          column: 8
        },
        end: {
          line: 502,
          column: 11
        }
      },
      "154": {
        start: {
          line: 493,
          column: 12
        },
        end: {
          line: 493,
          column: 71
        }
      },
      "155": {
        start: {
          line: 494,
          column: 12
        },
        end: {
          line: 496,
          column: 13
        }
      },
      "156": {
        start: {
          line: 495,
          column: 16
        },
        end: {
          line: 495,
          column: 93
        }
      },
      "157": {
        start: {
          line: 498,
          column: 12
        },
        end: {
          line: 498,
          column: 107
        }
      },
      "158": {
        start: {
          line: 501,
          column: 12
        },
        end: {
          line: 501,
          column: 83
        }
      },
      "159": {
        start: {
          line: 508,
          column: 8
        },
        end: {
          line: 609,
          column: 11
        }
      },
      "160": {
        start: {
          line: 510,
          column: 12
        },
        end: {
          line: 539,
          column: 13
        }
      },
      "161": {
        start: {
          line: 511,
          column: 16
        },
        end: {
          line: 511,
          column: 98
        }
      },
      "162": {
        start: {
          line: 512,
          column: 16
        },
        end: {
          line: 538,
          column: 18
        }
      },
      "163": {
        start: {
          line: 540,
          column: 12
        },
        end: {
          line: 540,
          column: 131
        }
      },
      "164": {
        start: {
          line: 542,
          column: 41
        },
        end: {
          line: 542,
          column: 77
        }
      },
      "165": {
        start: {
          line: 544,
          column: 12
        },
        end: {
          line: 544,
          column: 104
        }
      },
      "166": {
        start: {
          line: 545,
          column: 12
        },
        end: {
          line: 608,
          column: 13
        }
      },
      "167": {
        start: {
          line: 547,
          column: 38
        },
        end: {
          line: 549,
          column: 19
        }
      },
      "168": {
        start: {
          line: 547,
          column: 123
        },
        end: {
          line: 549,
          column: 18
        }
      },
      "169": {
        start: {
          line: 548,
          column: 20
        },
        end: {
          line: 548,
          column: 70
        }
      },
      "170": {
        start: {
          line: 551,
          column: 16
        },
        end: {
          line: 557,
          column: 29
        }
      },
      "171": {
        start: {
          line: 558,
          column: 16
        },
        end: {
          line: 558,
          column: 37
        }
      },
      "172": {
        start: {
          line: 561,
          column: 37
        },
        end: {
          line: 561,
          column: 91
        }
      },
      "173": {
        start: {
          line: 562,
          column: 16
        },
        end: {
          line: 562,
          column: 91
        }
      },
      "174": {
        start: {
          line: 564,
          column: 16
        },
        end: {
          line: 567,
          column: 17
        }
      },
      "175": {
        start: {
          line: 565,
          column: 20
        },
        end: {
          line: 566,
          column: 115
        }
      },
      "176": {
        start: {
          line: 569,
          column: 16
        },
        end: {
          line: 574,
          column: 29
        }
      },
      "177": {
        start: {
          line: 576,
          column: 16
        },
        end: {
          line: 607,
          column: 18
        }
      },
      "178": {
        start: {
          line: 615,
          column: 8
        },
        end: {
          line: 639,
          column: 11
        }
      },
      "179": {
        start: {
          line: 616,
          column: 12
        },
        end: {
          line: 638,
          column: 13
        }
      },
      "180": {
        start: {
          line: 618,
          column: 16
        },
        end: {
          line: 632,
          column: 17
        }
      },
      "181": {
        start: {
          line: 619,
          column: 44
        },
        end: {
          line: 623,
          column: 22
        }
      },
      "182": {
        start: {
          line: 624,
          column: 20
        },
        end: {
          line: 624,
          column: 133
        }
      },
      "183": {
        start: {
          line: 626,
          column: 37
        },
        end: {
          line: 626,
          column: 102
        }
      },
      "184": {
        start: {
          line: 627,
          column: 20
        },
        end: {
          line: 627,
          column: 84
        }
      },
      "185": {
        start: {
          line: 631,
          column: 20
        },
        end: {
          line: 631,
          column: 85
        }
      },
      "186": {
        start: {
          line: 635,
          column: 37
        },
        end: {
          line: 635,
          column: 91
        }
      },
      "187": {
        start: {
          line: 636,
          column: 16
        },
        end: {
          line: 636,
          column: 110
        }
      },
      "188": {
        start: {
          line: 637,
          column: 16
        },
        end: {
          line: 637,
          column: 28
        }
      },
      "189": {
        start: {
          line: 645,
          column: 8
        },
        end: {
          line: 726,
          column: 11
        }
      },
      "190": {
        start: {
          line: 646,
          column: 12
        },
        end: {
          line: 725,
          column: 13
        }
      },
      "191": {
        start: {
          line: 647,
          column: 32
        },
        end: {
          line: 647,
          column: 34
        }
      },
      "192": {
        start: {
          line: 648,
          column: 36
        },
        end: {
          line: 658,
          column: 17
        }
      },
      "193": {
        start: {
          line: 660,
          column: 16
        },
        end: {
          line: 665,
          column: 19
        }
      },
      "194": {
        start: {
          line: 668,
          column: 16
        },
        end: {
          line: 676,
          column: 17
        }
      },
      "195": {
        start: {
          line: 669,
          column: 20
        },
        end: {
          line: 669,
          column: 51
        }
      },
      "196": {
        start: {
          line: 671,
          column: 21
        },
        end: {
          line: 676,
          column: 17
        }
      },
      "197": {
        start: {
          line: 672,
          column: 20
        },
        end: {
          line: 672,
          column: 46
        }
      },
      "198": {
        start: {
          line: 675,
          column: 20
        },
        end: {
          line: 675,
          column: 51
        }
      },
      "199": {
        start: {
          line: 678,
          column: 34
        },
        end: {
          line: 678,
          column: 36
        }
      },
      "200": {
        start: {
          line: 679,
          column: 16
        },
        end: {
          line: 686,
          column: 17
        }
      },
      "201": {
        start: {
          line: 680,
          column: 20
        },
        end: {
          line: 680,
          column: 63
        }
      },
      "202": {
        start: {
          line: 681,
          column: 20
        },
        end: {
          line: 681,
          column: 68
        }
      },
      "203": {
        start: {
          line: 684,
          column: 20
        },
        end: {
          line: 684,
          column: 67
        }
      },
      "204": {
        start: {
          line: 685,
          column: 20
        },
        end: {
          line: 685,
          column: 85
        }
      },
      "205": {
        start: {
          line: 687,
          column: 16
        },
        end: {
          line: 687,
          column: 56
        }
      },
      "206": {
        start: {
          line: 688,
          column: 16
        },
        end: {
          line: 694,
          column: 18
        }
      },
      "207": {
        start: {
          line: 697,
          column: 16
        },
        end: {
          line: 697,
          column: 135
        }
      },
      "208": {
        start: {
          line: 698,
          column: 16
        },
        end: {
          line: 724,
          column: 18
        }
      },
      "209": {
        start: {
          line: 732,
          column: 8
        },
        end: {
          line: 737,
          column: 11
        }
      },
      "210": {
        start: {
          line: 733,
          column: 12
        },
        end: {
          line: 733,
          column: 74
        }
      },
      "211": {
        start: {
          line: 736,
          column: 12
        },
        end: {
          line: 736,
          column: 118
        }
      },
      "212": {
        start: {
          line: 743,
          column: 8
        },
        end: {
          line: 750,
          column: 11
        }
      },
      "213": {
        start: {
          line: 744,
          column: 12
        },
        end: {
          line: 744,
          column: 98
        }
      },
      "214": {
        start: {
          line: 747,
          column: 12
        },
        end: {
          line: 749,
          column: 13
        }
      },
      "215": {
        start: {
          line: 748,
          column: 16
        },
        end: {
          line: 748,
          column: 108
        }
      },
      "216": {
        start: {
          line: 754,
          column: 8
        },
        end: {
          line: 826,
          column: 11
        }
      },
      "217": {
        start: {
          line: 755,
          column: 12
        },
        end: {
          line: 825,
          column: 13
        }
      },
      "218": {
        start: {
          line: 756,
          column: 16
        },
        end: {
          line: 756,
          column: 97
        }
      },
      "219": {
        start: {
          line: 758,
          column: 42
        },
        end: {
          line: 758,
          column: 97
        }
      },
      "220": {
        start: {
          line: 760,
          column: 42
        },
        end: {
          line: 760,
          column: 107
        }
      },
      "221": {
        start: {
          line: 762,
          column: 38
        },
        end: {
          line: 762,
          column: 73
        }
      },
      "222": {
        start: {
          line: 764,
          column: 49
        },
        end: {
          line: 764,
          column: 95
        }
      },
      "223": {
        start: {
          line: 766,
          column: 35
        },
        end: {
          line: 766,
          column: 37
        }
      },
      "224": {
        start: {
          line: 767,
          column: 40
        },
        end: {
          line: 767,
          column: 42
        }
      },
      "225": {
        start: {
          line: 769,
          column: 16
        },
        end: {
          line: 772,
          column: 17
        }
      },
      "226": {
        start: {
          line: 770,
          column: 20
        },
        end: {
          line: 770,
          column: 99
        }
      },
      "227": {
        start: {
          line: 771,
          column: 20
        },
        end: {
          line: 771,
          column: 103
        }
      },
      "228": {
        start: {
          line: 774,
          column: 16
        },
        end: {
          line: 777,
          column: 17
        }
      },
      "229": {
        start: {
          line: 775,
          column: 20
        },
        end: {
          line: 775,
          column: 118
        }
      },
      "230": {
        start: {
          line: 776,
          column: 20
        },
        end: {
          line: 776,
          column: 107
        }
      },
      "231": {
        start: {
          line: 779,
          column: 16
        },
        end: {
          line: 782,
          column: 17
        }
      },
      "232": {
        start: {
          line: 780,
          column: 20
        },
        end: {
          line: 780,
          column: 92
        }
      },
      "233": {
        start: {
          line: 781,
          column: 20
        },
        end: {
          line: 781,
          column: 133
        }
      },
      "234": {
        start: {
          line: 784,
          column: 16
        },
        end: {
          line: 787,
          column: 17
        }
      },
      "235": {
        start: {
          line: 785,
          column: 20
        },
        end: {
          line: 785,
          column: 101
        }
      },
      "236": {
        start: {
          line: 786,
          column: 20
        },
        end: {
          line: 786,
          column: 109
        }
      },
      "237": {
        start: {
          line: 789,
          column: 16
        },
        end: {
          line: 792,
          column: 17
        }
      },
      "238": {
        start: {
          line: 790,
          column: 20
        },
        end: {
          line: 790,
          column: 115
        }
      },
      "239": {
        start: {
          line: 791,
          column: 20
        },
        end: {
          line: 791,
          column: 92
        }
      },
      "240": {
        start: {
          line: 794,
          column: 16
        },
        end: {
          line: 796,
          column: 17
        }
      },
      "241": {
        start: {
          line: 795,
          column: 20
        },
        end: {
          line: 795,
          column: 134
        }
      },
      "242": {
        start: {
          line: 797,
          column: 36
        },
        end: {
          line: 797,
          column: 59
        }
      },
      "243": {
        start: {
          line: 798,
          column: 16
        },
        end: {
          line: 806,
          column: 19
        }
      },
      "244": {
        start: {
          line: 807,
          column: 16
        },
        end: {
          line: 812,
          column: 18
        }
      },
      "245": {
        start: {
          line: 815,
          column: 37
        },
        end: {
          line: 815,
          column: 91
        }
      },
      "246": {
        start: {
          line: 816,
          column: 16
        },
        end: {
          line: 816,
          column: 96
        }
      },
      "247": {
        start: {
          line: 817,
          column: 16
        },
        end: {
          line: 824,
          column: 18
        }
      },
      "248": {
        start: {
          line: 832,
          column: 8
        },
        end: {
          line: 877,
          column: 11
        }
      },
      "249": {
        start: {
          line: 833,
          column: 12
        },
        end: {
          line: 876,
          column: 13
        }
      },
      "250": {
        start: {
          line: 834,
          column: 16
        },
        end: {
          line: 834,
          column: 123
        }
      },
      "251": {
        start: {
          line: 836,
          column: 41
        },
        end: {
          line: 836,
          column: 104
        }
      },
      "252": {
        start: {
          line: 838,
          column: 16
        },
        end: {
          line: 838,
          column: 175
        }
      },
      "253": {
        start: {
          line: 840,
          column: 16
        },
        end: {
          line: 843,
          column: 17
        }
      },
      "254": {
        start: {
          line: 841,
          column: 20
        },
        end: {
          line: 841,
          column: 124
        }
      },
      "255": {
        start: {
          line: 842,
          column: 20
        },
        end: {
          line: 842,
          column: 33
        }
      },
      "256": {
        start: {
          line: 845,
          column: 47
        },
        end: {
          line: 845,
          column: 111
        }
      },
      "257": {
        start: {
          line: 846,
          column: 48
        },
        end: {
          line: 846,
          column: 113
        }
      },
      "258": {
        start: {
          line: 847,
          column: 16
        },
        end: {
          line: 851,
          column: 17
        }
      },
      "259": {
        start: {
          line: 848,
          column: 20
        },
        end: {
          line: 850,
          column: 39
        }
      },
      "260": {
        start: {
          line: 849,
          column: 36
        },
        end: {
          line: 849,
          column: 49
        }
      },
      "261": {
        start: {
          line: 852,
          column: 16
        },
        end: {
          line: 856,
          column: 17
        }
      },
      "262": {
        start: {
          line: 853,
          column: 20
        },
        end: {
          line: 855,
          column: 39
        }
      },
      "263": {
        start: {
          line: 854,
          column: 36
        },
        end: {
          line: 854,
          column: 49
        }
      },
      "264": {
        start: {
          line: 858,
          column: 43
        },
        end: {
          line: 858,
          column: 109
        }
      },
      "265": {
        start: {
          line: 859,
          column: 16
        },
        end: {
          line: 861,
          column: 17
        }
      },
      "266": {
        start: {
          line: 860,
          column: 20
        },
        end: {
          line: 860,
          column: 97
        }
      },
      "267": {
        start: {
          line: 863,
          column: 38
        },
        end: {
          line: 864,
          column: 89
        }
      },
      "268": {
        start: {
          line: 865,
          column: 16
        },
        end: {
          line: 867,
          column: 17
        }
      },
      "269": {
        start: {
          line: 866,
          column: 20
        },
        end: {
          line: 866,
          column: 136
        }
      },
      "270": {
        start: {
          line: 869,
          column: 16
        },
        end: {
          line: 871,
          column: 65
        }
      },
      "271": {
        start: {
          line: 874,
          column: 16
        },
        end: {
          line: 874,
          column: 142
        }
      },
      "272": {
        start: {
          line: 875,
          column: 16
        },
        end: {
          line: 875,
          column: 29
        }
      },
      "273": {
        start: {
          line: 883,
          column: 8
        },
        end: {
          line: 903,
          column: 11
        }
      },
      "274": {
        start: {
          line: 884,
          column: 12
        },
        end: {
          line: 902,
          column: 13
        }
      },
      "275": {
        start: {
          line: 886,
          column: 41
        },
        end: {
          line: 886,
          column: 88
        }
      },
      "276": {
        start: {
          line: 887,
          column: 16
        },
        end: {
          line: 890,
          column: 17
        }
      },
      "277": {
        start: {
          line: 888,
          column: 20
        },
        end: {
          line: 888,
          column: 109
        }
      },
      "278": {
        start: {
          line: 889,
          column: 20
        },
        end: {
          line: 889,
          column: 33
        }
      },
      "279": {
        start: {
          line: 892,
          column: 43
        },
        end: {
          line: 892,
          column: 92
        }
      },
      "280": {
        start: {
          line: 893,
          column: 16
        },
        end: {
          line: 896,
          column: 17
        }
      },
      "281": {
        start: {
          line: 894,
          column: 20
        },
        end: {
          line: 894,
          column: 115
        }
      },
      "282": {
        start: {
          line: 895,
          column: 20
        },
        end: {
          line: 895,
          column: 33
        }
      },
      "283": {
        start: {
          line: 897,
          column: 16
        },
        end: {
          line: 897,
          column: 28
        }
      },
      "284": {
        start: {
          line: 900,
          column: 16
        },
        end: {
          line: 900,
          column: 95
        }
      },
      "285": {
        start: {
          line: 901,
          column: 16
        },
        end: {
          line: 901,
          column: 29
        }
      },
      "286": {
        start: {
          line: 909,
          column: 8
        },
        end: {
          line: 925,
          column: 11
        }
      },
      "287": {
        start: {
          line: 910,
          column: 12
        },
        end: {
          line: 924,
          column: 13
        }
      },
      "288": {
        start: {
          line: 912,
          column: 44
        },
        end: {
          line: 912,
          column: 101
        }
      },
      "289": {
        start: {
          line: 913,
          column: 44
        },
        end: {
          line: 913,
          column: 101
        }
      },
      "290": {
        start: {
          line: 914,
          column: 16
        },
        end: {
          line: 916,
          column: 17
        }
      },
      "291": {
        start: {
          line: 915,
          column: 20
        },
        end: {
          line: 915,
          column: 33
        }
      },
      "292": {
        start: {
          line: 919,
          column: 16
        },
        end: {
          line: 919,
          column: 28
        }
      },
      "293": {
        start: {
          line: 922,
          column: 16
        },
        end: {
          line: 922,
          column: 91
        }
      },
      "294": {
        start: {
          line: 923,
          column: 16
        },
        end: {
          line: 923,
          column: 29
        }
      },
      "295": {
        start: {
          line: 931,
          column: 8
        },
        end: {
          line: 953,
          column: 11
        }
      },
      "296": {
        start: {
          line: 932,
          column: 12
        },
        end: {
          line: 952,
          column: 13
        }
      },
      "297": {
        start: {
          line: 934,
          column: 38
        },
        end: {
          line: 934,
          column: 109
        }
      },
      "298": {
        start: {
          line: 936,
          column: 34
        },
        end: {
          line: 942,
          column: 17
        }
      },
      "299": {
        start: {
          line: 943,
          column: 16
        },
        end: {
          line: 946,
          column: 17
        }
      },
      "300": {
        start: {
          line: 944,
          column: 20
        },
        end: {
          line: 944,
          column: 106
        }
      },
      "301": {
        start: {
          line: 945,
          column: 20
        },
        end: {
          line: 945,
          column: 33
        }
      },
      "302": {
        start: {
          line: 947,
          column: 16
        },
        end: {
          line: 947,
          column: 28
        }
      },
      "303": {
        start: {
          line: 950,
          column: 16
        },
        end: {
          line: 950,
          column: 95
        }
      },
      "304": {
        start: {
          line: 951,
          column: 16
        },
        end: {
          line: 951,
          column: 29
        }
      },
      "305": {
        start: {
          line: 959,
          column: 8
        },
        end: {
          line: 993,
          column: 11
        }
      },
      "306": {
        start: {
          line: 960,
          column: 12
        },
        end: {
          line: 992,
          column: 13
        }
      },
      "307": {
        start: {
          line: 961,
          column: 16
        },
        end: {
          line: 961,
          column: 140
        }
      },
      "308": {
        start: {
          line: 963,
          column: 36
        },
        end: {
          line: 968,
          column: 17
        }
      },
      "309": {
        start: {
          line: 970,
          column: 38
        },
        end: {
          line: 970,
          column: 91
        }
      },
      "310": {
        start: {
          line: 972,
          column: 41
        },
        end: {
          line: 972,
          column: 121
        }
      },
      "311": {
        start: {
          line: 973,
          column: 16
        },
        end: {
          line: 975,
          column: 17
        }
      },
      "312": {
        start: {
          line: 974,
          column: 20
        },
        end: {
          line: 974,
          column: 61
        }
      },
      "313": {
        start: {
          line: 977,
          column: 36
        },
        end: {
          line: 984,
          column: 17
        }
      },
      "314": {
        start: {
          line: 985,
          column: 16
        },
        end: {
          line: 985,
          column: 106
        }
      },
      "315": {
        start: {
          line: 986,
          column: 16
        },
        end: {
          line: 986,
          column: 154
        }
      },
      "316": {
        start: {
          line: 989,
          column: 37
        },
        end: {
          line: 989,
          column: 91
        }
      },
      "317": {
        start: {
          line: 990,
          column: 16
        },
        end: {
          line: 990,
          column: 154
        }
      },
      "318": {
        start: {
          line: 991,
          column: 16
        },
        end: {
          line: 991,
          column: 106
        }
      },
      "319": {
        start: {
          line: 999,
          column: 8
        },
        end: {
          line: 1051,
          column: 11
        }
      },
      "320": {
        start: {
          line: 1000,
          column: 12
        },
        end: {
          line: 1050,
          column: 13
        }
      },
      "321": {
        start: {
          line: 1001,
          column: 16
        },
        end: {
          line: 1001,
          column: 96
        }
      },
      "322": {
        start: {
          line: 1002,
          column: 33
        },
        end: {
          line: 1002,
          column: 75
        }
      },
      "323": {
        start: {
          line: 1003,
          column: 34
        },
        end: {
          line: 1003,
          column: 44
        }
      },
      "324": {
        start: {
          line: 1005,
          column: 41
        },
        end: {
          line: 1005,
          column: 78
        }
      },
      "325": {
        start: {
          line: 1007,
          column: 42
        },
        end: {
          line: 1007,
          column: 107
        }
      },
      "326": {
        start: {
          line: 1009,
          column: 38
        },
        end: {
          line: 1009,
          column: 73
        }
      },
      "327": {
        start: {
          line: 1011,
          column: 49
        },
        end: {
          line: 1011,
          column: 95
        }
      },
      "328": {
        start: {
          line: 1013,
          column: 42
        },
        end: {
          line: 1013,
          column: 97
        }
      },
      "329": {
        start: {
          line: 1014,
          column: 31
        },
        end: {
          line: 1038,
          column: 17
        }
      },
      "330": {
        start: {
          line: 1039,
          column: 16
        },
        end: {
          line: 1043,
          column: 19
        }
      },
      "331": {
        start: {
          line: 1044,
          column: 16
        },
        end: {
          line: 1044,
          column: 30
        }
      },
      "332": {
        start: {
          line: 1047,
          column: 37
        },
        end: {
          line: 1047,
          column: 91
        }
      },
      "333": {
        start: {
          line: 1048,
          column: 16
        },
        end: {
          line: 1048,
          column: 104
        }
      },
      "334": {
        start: {
          line: 1049,
          column: 16
        },
        end: {
          line: 1049,
          column: 88
        }
      },
      "335": {
        start: {
          line: 1057,
          column: 8
        },
        end: {
          line: 1115,
          column: 11
        }
      },
      "336": {
        start: {
          line: 1058,
          column: 12
        },
        end: {
          line: 1114,
          column: 13
        }
      },
      "337": {
        start: {
          line: 1059,
          column: 16
        },
        end: {
          line: 1059,
          column: 105
        }
      },
      "338": {
        start: {
          line: 1061,
          column: 16
        },
        end: {
          line: 1063,
          column: 17
        }
      },
      "339": {
        start: {
          line: 1062,
          column: 20
        },
        end: {
          line: 1062,
          column: 71
        }
      },
      "340": {
        start: {
          line: 1065,
          column: 34
        },
        end: {
          line: 1065,
          column: 63
        }
      },
      "341": {
        start: {
          line: 1067,
          column: 16
        },
        end: {
          line: 1072,
          column: 19
        }
      },
      "342": {
        start: {
          line: 1068,
          column: 20
        },
        end: {
          line: 1071,
          column: 21
        }
      },
      "343": {
        start: {
          line: 1069,
          column: 24
        },
        end: {
          line: 1069,
          column: 110
        }
      },
      "344": {
        start: {
          line: 1070,
          column: 24
        },
        end: {
          line: 1070,
          column: 65
        }
      },
      "345": {
        start: {
          line: 1074,
          column: 38
        },
        end: {
          line: 1079,
          column: 17
        }
      },
      "346": {
        start: {
          line: 1081,
          column: 16
        },
        end: {
          line: 1081,
          column: 127
        }
      },
      "347": {
        start: {
          line: 1083,
          column: 16
        },
        end: {
          line: 1085,
          column: 17
        }
      },
      "348": {
        start: {
          line: 1084,
          column: 20
        },
        end: {
          line: 1084,
          column: 102
        }
      },
      "349": {
        start: {
          line: 1087,
          column: 16
        },
        end: {
          line: 1089,
          column: 17
        }
      },
      "350": {
        start: {
          line: 1088,
          column: 20
        },
        end: {
          line: 1088,
          column: 99
        }
      },
      "351": {
        start: {
          line: 1091,
          column: 16
        },
        end: {
          line: 1094,
          column: 17
        }
      },
      "352": {
        start: {
          line: 1092,
          column: 20
        },
        end: {
          line: 1092,
          column: 75
        }
      },
      "353": {
        start: {
          line: 1093,
          column: 20
        },
        end: {
          line: 1093,
          column: 105
        }
      },
      "354": {
        start: {
          line: 1096,
          column: 16
        },
        end: {
          line: 1101,
          column: 29
        }
      },
      "355": {
        start: {
          line: 1102,
          column: 16
        },
        end: {
          line: 1102,
          column: 108
        }
      },
      "356": {
        start: {
          line: 1105,
          column: 37
        },
        end: {
          line: 1105,
          column: 91
        }
      },
      "357": {
        start: {
          line: 1106,
          column: 16
        },
        end: {
          line: 1106,
          column: 100
        }
      },
      "358": {
        start: {
          line: 1108,
          column: 16
        },
        end: {
          line: 1112,
          column: 29
        }
      },
      "359": {
        start: {
          line: 1113,
          column: 16
        },
        end: {
          line: 1113,
          column: 86
        }
      },
      "360": {
        start: {
          line: 1118,
          column: 8
        },
        end: {
          line: 1181,
          column: 11
        }
      },
      "361": {
        start: {
          line: 1119,
          column: 12
        },
        end: {
          line: 1119,
          column: 96
        }
      },
      "362": {
        start: {
          line: 1120,
          column: 12
        },
        end: {
          line: 1180,
          column: 13
        }
      },
      "363": {
        start: {
          line: 1122,
          column: 16
        },
        end: {
          line: 1124,
          column: 17
        }
      },
      "364": {
        start: {
          line: 1123,
          column: 20
        },
        end: {
          line: 1123,
          column: 72
        }
      },
      "365": {
        start: {
          line: 1126,
          column: 38
        },
        end: {
          line: 1126,
          column: 95
        }
      },
      "366": {
        start: {
          line: 1128,
          column: 40
        },
        end: {
          line: 1131,
          column: 17
        }
      },
      "367": {
        start: {
          line: 1132,
          column: 40
        },
        end: {
          line: 1135,
          column: 17
        }
      },
      "368": {
        start: {
          line: 1133,
          column: 74
        },
        end: {
          line: 1133,
          column: 87
        }
      },
      "369": {
        start: {
          line: 1134,
          column: 74
        },
        end: {
          line: 1134,
          column: 87
        }
      },
      "370": {
        start: {
          line: 1136,
          column: 31
        },
        end: {
          line: 1141,
          column: 17
        }
      },
      "371": {
        start: {
          line: 1142,
          column: 16
        },
        end: {
          line: 1142,
          column: 157
        }
      },
      "372": {
        start: {
          line: 1144,
          column: 16
        },
        end: {
          line: 1150,
          column: 29
        }
      },
      "373": {
        start: {
          line: 1151,
          column: 16
        },
        end: {
          line: 1151,
          column: 30
        }
      },
      "374": {
        start: {
          line: 1154,
          column: 37
        },
        end: {
          line: 1154,
          column: 91
        }
      },
      "375": {
        start: {
          line: 1155,
          column: 16
        },
        end: {
          line: 1155,
          column: 97
        }
      },
      "376": {
        start: {
          line: 1157,
          column: 16
        },
        end: {
          line: 1160,
          column: 29
        }
      },
      "377": {
        start: {
          line: 1162,
          column: 16
        },
        end: {
          line: 1179,
          column: 18
        }
      },
      "378": {
        start: {
          line: 1187,
          column: 8
        },
        end: {
          line: 1229,
          column: 11
        }
      },
      "379": {
        start: {
          line: 1188,
          column: 12
        },
        end: {
          line: 1228,
          column: 13
        }
      },
      "380": {
        start: {
          line: 1190,
          column: 42
        },
        end: {
          line: 1190,
          column: 79
        }
      },
      "381": {
        start: {
          line: 1191,
          column: 45
        },
        end: {
          line: 1191,
          column: 86
        }
      },
      "382": {
        start: {
          line: 1193,
          column: 38
        },
        end: {
          line: 1193,
          column: 74
        }
      },
      "383": {
        start: {
          line: 1194,
          column: 41
        },
        end: {
          line: 1194,
          column: 81
        }
      },
      "384": {
        start: {
          line: 1196,
          column: 36
        },
        end: {
          line: 1196,
          column: 45
        }
      },
      "385": {
        start: {
          line: 1197,
          column: 16
        },
        end: {
          line: 1202,
          column: 17
        }
      },
      "386": {
        start: {
          line: 1198,
          column: 20
        },
        end: {
          line: 1198,
          column: 47
        }
      },
      "387": {
        start: {
          line: 1200,
          column: 21
        },
        end: {
          line: 1202,
          column: 17
        }
      },
      "388": {
        start: {
          line: 1201,
          column: 20
        },
        end: {
          line: 1201,
          column: 47
        }
      },
      "389": {
        start: {
          line: 1203,
          column: 31
        },
        end: {
          line: 1215,
          column: 17
        }
      },
      "390": {
        start: {
          line: 1217,
          column: 16
        },
        end: {
          line: 1221,
          column: 29
        }
      },
      "391": {
        start: {
          line: 1222,
          column: 16
        },
        end: {
          line: 1222,
          column: 30
        }
      },
      "392": {
        start: {
          line: 1225,
          column: 37
        },
        end: {
          line: 1225,
          column: 91
        }
      },
      "393": {
        start: {
          line: 1226,
          column: 16
        },
        end: {
          line: 1226,
          column: 106
        }
      },
      "394": {
        start: {
          line: 1227,
          column: 16
        },
        end: {
          line: 1227,
          column: 88
        }
      },
      "395": {
        start: {
          line: 1235,
          column: 8
        },
        end: {
          line: 1271,
          column: 11
        }
      },
      "396": {
        start: {
          line: 1236,
          column: 12
        },
        end: {
          line: 1270,
          column: 13
        }
      },
      "397": {
        start: {
          line: 1237,
          column: 16
        },
        end: {
          line: 1237,
          column: 126
        }
      },
      "398": {
        start: {
          line: 1239,
          column: 16
        },
        end: {
          line: 1244,
          column: 29
        }
      },
      "399": {
        start: {
          line: 1246,
          column: 16
        },
        end: {
          line: 1260,
          column: 17
        }
      },
      "400": {
        start: {
          line: 1247,
          column: 42
        },
        end: {
          line: 1247,
          column: 84
        }
      },
      "401": {
        start: {
          line: 1248,
          column: 20
        },
        end: {
          line: 1248,
          column: 99
        }
      },
      "402": {
        start: {
          line: 1250,
          column: 45
        },
        end: {
          line: 1250,
          column: 94
        }
      },
      "403": {
        start: {
          line: 1251,
          column: 46
        },
        end: {
          line: 1251,
          column: 91
        }
      },
      "404": {
        start: {
          line: 1252,
          column: 20
        },
        end: {
          line: 1259,
          column: 21
        }
      },
      "405": {
        start: {
          line: 1253,
          column: 24
        },
        end: {
          line: 1253,
          column: 105
        }
      },
      "406": {
        start: {
          line: 1256,
          column: 24
        },
        end: {
          line: 1256,
          column: 130
        }
      },
      "407": {
        start: {
          line: 1258,
          column: 24
        },
        end: {
          line: 1258,
          column: 82
        }
      },
      "408": {
        start: {
          line: 1262,
          column: 16
        },
        end: {
          line: 1264,
          column: 17
        }
      },
      "409": {
        start: {
          line: 1263,
          column: 20
        },
        end: {
          line: 1263,
          column: 88
        }
      },
      "410": {
        start: {
          line: 1267,
          column: 37
        },
        end: {
          line: 1267,
          column: 91
        }
      },
      "411": {
        start: {
          line: 1268,
          column: 16
        },
        end: {
          line: 1268,
          column: 108
        }
      },
      "412": {
        start: {
          line: 1269,
          column: 16
        },
        end: {
          line: 1269,
          column: 92
        }
      },
      "413": {
        start: {
          line: 1277,
          column: 8
        },
        end: {
          line: 1312,
          column: 11
        }
      },
      "414": {
        start: {
          line: 1278,
          column: 12
        },
        end: {
          line: 1311,
          column: 13
        }
      },
      "415": {
        start: {
          line: 1279,
          column: 16
        },
        end: {
          line: 1279,
          column: 110
        }
      },
      "416": {
        start: {
          line: 1281,
          column: 16
        },
        end: {
          line: 1286,
          column: 29
        }
      },
      "417": {
        start: {
          line: 1288,
          column: 16
        },
        end: {
          line: 1288,
          column: 41
        }
      },
      "418": {
        start: {
          line: 1290,
          column: 16
        },
        end: {
          line: 1290,
          column: 74
        }
      },
      "419": {
        start: {
          line: 1292,
          column: 16
        },
        end: {
          line: 1306,
          column: 27
        }
      },
      "420": {
        start: {
          line: 1292,
          column: 33
        },
        end: {
          line: 1306,
          column: 18
        }
      },
      "421": {
        start: {
          line: 1293,
          column: 20
        },
        end: {
          line: 1305,
          column: 21
        }
      },
      "422": {
        start: {
          line: 1294,
          column: 24
        },
        end: {
          line: 1294,
          column: 101
        }
      },
      "423": {
        start: {
          line: 1295,
          column: 24
        },
        end: {
          line: 1295,
          column: 55
        }
      },
      "424": {
        start: {
          line: 1297,
          column: 51
        },
        end: {
          line: 1297,
          column: 104
        }
      },
      "425": {
        start: {
          line: 1298,
          column: 24
        },
        end: {
          line: 1301,
          column: 25
        }
      },
      "426": {
        start: {
          line: 1299,
          column: 28
        },
        end: {
          line: 1299,
          column: 52
        }
      },
      "427": {
        start: {
          line: 1300,
          column: 28
        },
        end: {
          line: 1300,
          column: 108
        }
      },
      "428": {
        start: {
          line: 1304,
          column: 24
        },
        end: {
          line: 1304,
          column: 96
        }
      },
      "429": {
        start: {
          line: 1309,
          column: 37
        },
        end: {
          line: 1309,
          column: 91
        }
      },
      "430": {
        start: {
          line: 1310,
          column: 16
        },
        end: {
          line: 1310,
          column: 106
        }
      },
      "431": {
        start: {
          line: 1318,
          column: 8
        },
        end: {
          line: 1333,
          column: 11
        }
      },
      "432": {
        start: {
          line: 1319,
          column: 12
        },
        end: {
          line: 1332,
          column: 13
        }
      },
      "433": {
        start: {
          line: 1321,
          column: 16
        },
        end: {
          line: 1328,
          column: 17
        }
      },
      "434": {
        start: {
          line: 1322,
          column: 20
        },
        end: {
          line: 1327,
          column: 21
        }
      },
      "435": {
        start: {
          line: 1323,
          column: 40
        },
        end: {
          line: 1323,
          column: 126
        }
      },
      "436": {
        start: {
          line: 1324,
          column: 24
        },
        end: {
          line: 1324,
          column: 121
        }
      },
      "437": {
        start: {
          line: 1331,
          column: 16
        },
        end: {
          line: 1331,
          column: 99
        }
      },
      "438": {
        start: {
          line: 1337,
          column: 8
        },
        end: {
          line: 1396,
          column: 11
        }
      },
      "439": {
        start: {
          line: 1338,
          column: 12
        },
        end: {
          line: 1395,
          column: 13
        }
      },
      "440": {
        start: {
          line: 1340,
          column: 36
        },
        end: {
          line: 1340,
          column: 82
        }
      },
      "441": {
        start: {
          line: 1341,
          column: 43
        },
        end: {
          line: 1341,
          column: 96
        }
      },
      "442": {
        start: {
          line: 1343,
          column: 16
        },
        end: {
          line: 1359,
          column: 19
        }
      },
      "443": {
        start: {
          line: 1361,
          column: 37
        },
        end: {
          line: 1361,
          column: 90
        }
      },
      "444": {
        start: {
          line: 1362,
          column: 16
        },
        end: {
          line: 1370,
          column: 17
        }
      },
      "445": {
        start: {
          line: 1363,
          column: 20
        },
        end: {
          line: 1369,
          column: 23
        }
      },
      "446": {
        start: {
          line: 1372,
          column: 16
        },
        end: {
          line: 1382,
          column: 18
        }
      },
      "447": {
        start: {
          line: 1385,
          column: 16
        },
        end: {
          line: 1385,
          column: 93
        }
      },
      "448": {
        start: {
          line: 1386,
          column: 16
        },
        end: {
          line: 1394,
          column: 18
        }
      },
      "449": {
        start: {
          line: 1402,
          column: 32
        },
        end: {
          line: 1402,
          column: 34
        }
      },
      "450": {
        start: {
          line: 1404,
          column: 8
        },
        end: {
          line: 1406,
          column: 9
        }
      },
      "451": {
        start: {
          line: 1405,
          column: 12
        },
        end: {
          line: 1405,
          column: 87
        }
      },
      "452": {
        start: {
          line: 1408,
          column: 33
        },
        end: {
          line: 1408,
          column: 82
        }
      },
      "453": {
        start: {
          line: 1409,
          column: 8
        },
        end: {
          line: 1411,
          column: 9
        }
      },
      "454": {
        start: {
          line: 1410,
          column: 12
        },
        end: {
          line: 1410,
          column: 119
        }
      },
      "455": {
        start: {
          line: 1413,
          column: 35
        },
        end: {
          line: 1413,
          column: 88
        }
      },
      "456": {
        start: {
          line: 1414,
          column: 8
        },
        end: {
          line: 1416,
          column: 9
        }
      },
      "457": {
        start: {
          line: 1415,
          column: 12
        },
        end: {
          line: 1415,
          column: 100
        }
      },
      "458": {
        start: {
          line: 1417,
          column: 8
        },
        end: {
          line: 1417,
          column: 31
        }
      },
      "459": {
        start: {
          line: 1423,
          column: 8
        },
        end: {
          line: 1432,
          column: 11
        }
      },
      "460": {
        start: {
          line: 1424,
          column: 32
        },
        end: {
          line: 1424,
          column: 78
        }
      },
      "461": {
        start: {
          line: 1425,
          column: 39
        },
        end: {
          line: 1425,
          column: 92
        }
      },
      "462": {
        start: {
          line: 1426,
          column: 35
        },
        end: {
          line: 1426,
          column: 76
        }
      },
      "463": {
        start: {
          line: 1427,
          column: 12
        },
        end: {
          line: 1431,
          column: 14
        }
      },
      "464": {
        start: {
          line: 1438,
          column: 8
        },
        end: {
          line: 1451,
          column: 11
        }
      },
      "465": {
        start: {
          line: 1439,
          column: 12
        },
        end: {
          line: 1450,
          column: 15
        }
      },
      "466": {
        start: {
          line: 1454,
          column: 8
        },
        end: {
          line: 1465,
          column: 11
        }
      },
      "467": {
        start: {
          line: 1455,
          column: 12
        },
        end: {
          line: 1464,
          column: 14
        }
      },
      "468": {
        start: {
          line: 1468,
          column: 8
        },
        end: {
          line: 1470,
          column: 11
        }
      },
      "469": {
        start: {
          line: 1469,
          column: 12
        },
        end: {
          line: 1469,
          column: 69
        }
      },
      "470": {
        start: {
          line: 1474,
          column: 8
        },
        end: {
          line: 1481,
          column: 11
        }
      },
      "471": {
        start: {
          line: 1475,
          column: 12
        },
        end: {
          line: 1480,
          column: 14
        }
      },
      "472": {
        start: {
          line: 1484,
          column: 8
        },
        end: {
          line: 1486,
          column: 11
        }
      },
      "473": {
        start: {
          line: 1485,
          column: 12
        },
        end: {
          line: 1485,
          column: 68
        }
      },
      "474": {
        start: {
          line: 1499,
          column: 8
        },
        end: {
          line: 1614,
          column: 11
        }
      },
      "475": {
        start: {
          line: 1500,
          column: 12
        },
        end: {
          line: 1613,
          column: 13
        }
      },
      "476": {
        start: {
          line: 1501,
          column: 16
        },
        end: {
          line: 1501,
          column: 88
        }
      },
      "477": {
        start: {
          line: 1503,
          column: 16
        },
        end: {
          line: 1513,
          column: 17
        }
      },
      "478": {
        start: {
          line: 1504,
          column: 20
        },
        end: {
          line: 1504,
          column: 88
        }
      },
      "479": {
        start: {
          line: 1505,
          column: 20
        },
        end: {
          line: 1512,
          column: 22
        }
      },
      "480": {
        start: {
          line: 1515,
          column: 34
        },
        end: {
          line: 1524,
          column: 18
        }
      },
      "481": {
        start: {
          line: 1526,
          column: 31
        },
        end: {
          line: 1526,
          column: 62
        }
      },
      "482": {
        start: {
          line: 1528,
          column: 16
        },
        end: {
          line: 1543,
          column: 19
        }
      },
      "483": {
        start: {
          line: 1545,
          column: 36
        },
        end: {
          line: 1570,
          column: 17
        }
      },
      "484": {
        start: {
          line: 1546,
          column: 66
        },
        end: {
          line: 1551,
          column: 21
        }
      },
      "485": {
        start: {
          line: 1552,
          column: 62
        },
        end: {
          line: 1557,
          column: 21
        }
      },
      "486": {
        start: {
          line: 1558,
          column: 64
        },
        end: {
          line: 1563,
          column: 21
        }
      },
      "487": {
        start: {
          line: 1564,
          column: 61
        },
        end: {
          line: 1569,
          column: 21
        }
      },
      "488": {
        start: {
          line: 1571,
          column: 31
        },
        end: {
          line: 1571,
          column: 67
        }
      },
      "489": {
        start: {
          line: 1572,
          column: 16
        },
        end: {
          line: 1574,
          column: 75
        }
      },
      "490": {
        start: {
          line: 1575,
          column: 16
        },
        end: {
          line: 1580,
          column: 18
        }
      },
      "491": {
        start: {
          line: 1583,
          column: 37
        },
        end: {
          line: 1583,
          column: 93
        }
      },
      "492": {
        start: {
          line: 1584,
          column: 16
        },
        end: {
          line: 1584,
          column: 94
        }
      },
      "493": {
        start: {
          line: 1586,
          column: 16
        },
        end: {
          line: 1595,
          column: 19
        }
      },
      "494": {
        start: {
          line: 1596,
          column: 16
        },
        end: {
          line: 1612,
          column: 18
        }
      },
      "495": {
        start: {
          line: 1620,
          column: 8
        },
        end: {
          line: 1620,
          column: 222
        }
      },
      "496": {
        start: {
          line: 1627,
          column: 23
        },
        end: {
          line: 1627,
          column: 61
        }
      },
      "497": {
        start: {
          line: 1628,
          column: 24
        },
        end: {
          line: 1628,
          column: 71
        }
      },
      "498": {
        start: {
          line: 1629,
          column: 23
        },
        end: {
          line: 1629,
          column: 67
        }
      },
      "499": {
        start: {
          line: 1630,
          column: 8
        },
        end: {
          line: 1636,
          column: 10
        }
      },
      "500": {
        start: {
          line: 1642,
          column: 8
        },
        end: {
          line: 1681,
          column: 11
        }
      },
      "501": {
        start: {
          line: 1643,
          column: 35
        },
        end: {
          line: 1643,
          column: 87
        }
      },
      "502": {
        start: {
          line: 1644,
          column: 28
        },
        end: {
          line: 1644,
          column: 75
        }
      },
      "503": {
        start: {
          line: 1645,
          column: 27
        },
        end: {
          line: 1645,
          column: 65
        }
      },
      "504": {
        start: {
          line: 1646,
          column: 36
        },
        end: {
          line: 1646,
          column: 38
        }
      },
      "505": {
        start: {
          line: 1648,
          column: 12
        },
        end: {
          line: 1650,
          column: 13
        }
      },
      "506": {
        start: {
          line: 1649,
          column: 16
        },
        end: {
          line: 1649,
          column: 161
        }
      },
      "507": {
        start: {
          line: 1652,
          column: 12
        },
        end: {
          line: 1654,
          column: 13
        }
      },
      "508": {
        start: {
          line: 1653,
          column: 16
        },
        end: {
          line: 1653,
          column: 153
        }
      },
      "509": {
        start: {
          line: 1656,
          column: 12
        },
        end: {
          line: 1658,
          column: 13
        }
      },
      "510": {
        start: {
          line: 1657,
          column: 16
        },
        end: {
          line: 1657,
          column: 112
        }
      },
      "511": {
        start: {
          line: 1659,
          column: 32
        },
        end: {
          line: 1661,
          column: 35
        }
      },
      "512": {
        start: {
          line: 1662,
          column: 12
        },
        end: {
          line: 1673,
          column: 15
        }
      },
      "513": {
        start: {
          line: 1674,
          column: 12
        },
        end: {
          line: 1680,
          column: 14
        }
      },
      "514": {
        start: {
          line: 1687,
          column: 8
        },
        end: {
          line: 1701,
          column: 11
        }
      },
      "515": {
        start: {
          line: 1688,
          column: 35
        },
        end: {
          line: 1688,
          column: 87
        }
      },
      "516": {
        start: {
          line: 1689,
          column: 28
        },
        end: {
          line: 1689,
          column: 75
        }
      },
      "517": {
        start: {
          line: 1690,
          column: 12
        },
        end: {
          line: 1700,
          column: 14
        }
      },
      "518": {
        start: {
          line: 1707,
          column: 8
        },
        end: {
          line: 1728,
          column: 11
        }
      },
      "519": {
        start: {
          line: 1708,
          column: 31
        },
        end: {
          line: 1708,
          column: 68
        }
      },
      "520": {
        start: {
          line: 1710,
          column: 12
        },
        end: {
          line: 1727,
          column: 13
        }
      },
      "521": {
        start: {
          line: 1711,
          column: 16
        },
        end: {
          line: 1711,
          column: 198
        }
      },
      "522": {
        start: {
          line: 1712,
          column: 16
        },
        end: {
          line: 1722,
          column: 19
        }
      },
      "523": {
        start: {
          line: 1724,
          column: 16
        },
        end: {
          line: 1724,
          column: 40
        }
      },
      "524": {
        start: {
          line: 1726,
          column: 16
        },
        end: {
          line: 1726,
          column: 224
        }
      },
      "525": {
        start: {
          line: 1734,
          column: 8
        },
        end: {
          line: 1734,
          column: 50
        }
      },
      "526": {
        start: {
          line: 1737,
          column: 0
        },
        end: {
          line: 1737,
          column: 54
        }
      },
      "527": {
        start: {
          line: 1742,
          column: 4
        },
        end: {
          line: 1742,
          column: 75
        }
      },
      "528": {
        start: {
          line: 1747,
          column: 0
        },
        end: {
          line: 1747,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 118
          },
          end: {
            line: 127,
            column: 5
          }
        },
        line: 39
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 131,
            column: 5
          }
        },
        loc: {
          start: {
            line: 131,
            column: 15
          },
          end: {
            line: 215,
            column: 5
          }
        },
        line: 131
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 132,
            column: 55
          },
          end: {
            line: 132,
            column: 56
          }
        },
        loc: {
          start: {
            line: 132,
            column: 68
          },
          end: {
            line: 214,
            column: 9
          }
        },
        line: 132
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 219,
            column: 4
          },
          end: {
            line: 219,
            column: 5
          }
        },
        loc: {
          start: {
            line: 219,
            column: 17
          },
          end: {
            line: 237,
            column: 5
          }
        },
        line: 219
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 220,
            column: 55
          },
          end: {
            line: 220,
            column: 56
          }
        },
        loc: {
          start: {
            line: 220,
            column: 68
          },
          end: {
            line: 236,
            column: 9
          }
        },
        line: 220
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 241,
            column: 4
          },
          end: {
            line: 241,
            column: 5
          }
        },
        loc: {
          start: {
            line: 241,
            column: 27
          },
          end: {
            line: 246,
            column: 5
          }
        },
        line: 241
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 250,
            column: 4
          },
          end: {
            line: 250,
            column: 5
          }
        },
        loc: {
          start: {
            line: 250,
            column: 15
          },
          end: {
            line: 252,
            column: 5
          }
        },
        line: 250
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 256,
            column: 4
          },
          end: {
            line: 256,
            column: 5
          }
        },
        loc: {
          start: {
            line: 256,
            column: 29
          },
          end: {
            line: 487,
            column: 5
          }
        },
        line: 256
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 257,
            column: 55
          },
          end: {
            line: 257,
            column: 56
          }
        },
        loc: {
          start: {
            line: 257,
            column: 68
          },
          end: {
            line: 486,
            column: 9
          }
        },
        line: 257
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 306,
            column: 16
          },
          end: {
            line: 306,
            column: 17
          }
        },
        loc: {
          start: {
            line: 306,
            column: 22
          },
          end: {
            line: 308,
            column: 18
          }
        },
        line: 306
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 306,
            column: 62
          },
          end: {
            line: 306,
            column: 63
          }
        },
        loc: {
          start: {
            line: 306,
            column: 75
          },
          end: {
            line: 308,
            column: 17
          }
        },
        line: 306
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 319,
            column: 73
          },
          end: {
            line: 319,
            column: 74
          }
        },
        loc: {
          start: {
            line: 319,
            column: 84
          },
          end: {
            line: 320,
            column: 68
          }
        },
        line: 319
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 346,
            column: 53
          },
          end: {
            line: 346,
            column: 54
          }
        },
        loc: {
          start: {
            line: 346,
            column: 60
          },
          end: {
            line: 346,
            column: 85
          }
        },
        line: 346
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 347,
            column: 49
          },
          end: {
            line: 347,
            column: 50
          }
        },
        loc: {
          start: {
            line: 347,
            column: 56
          },
          end: {
            line: 347,
            column: 77
          }
        },
        line: 347
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 348,
            column: 51
          },
          end: {
            line: 348,
            column: 52
          }
        },
        loc: {
          start: {
            line: 348,
            column: 58
          },
          end: {
            line: 348,
            column: 81
          }
        },
        line: 348
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 402,
            column: 24
          },
          end: {
            line: 402,
            column: 25
          }
        },
        loc: {
          start: {
            line: 402,
            column: 30
          },
          end: {
            line: 404,
            column: 26
          }
        },
        line: 402
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 402,
            column: 70
          },
          end: {
            line: 402,
            column: 71
          }
        },
        loc: {
          start: {
            line: 402,
            column: 83
          },
          end: {
            line: 404,
            column: 25
          }
        },
        line: 402
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 491,
            column: 4
          },
          end: {
            line: 491,
            column: 5
          }
        },
        loc: {
          start: {
            line: 491,
            column: 27
          },
          end: {
            line: 503,
            column: 5
          }
        },
        line: 491
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 492,
            column: 55
          },
          end: {
            line: 492,
            column: 56
          }
        },
        loc: {
          start: {
            line: 492,
            column: 68
          },
          end: {
            line: 502,
            column: 9
          }
        },
        line: 492
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 507,
            column: 4
          },
          end: {
            line: 507,
            column: 5
          }
        },
        loc: {
          start: {
            line: 507,
            column: 36
          },
          end: {
            line: 610,
            column: 5
          }
        },
        line: 507
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 508,
            column: 55
          },
          end: {
            line: 508,
            column: 56
          }
        },
        loc: {
          start: {
            line: 508,
            column: 68
          },
          end: {
            line: 609,
            column: 9
          }
        },
        line: 508
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 547,
            column: 117
          },
          end: {
            line: 547,
            column: 118
          }
        },
        loc: {
          start: {
            line: 547,
            column: 123
          },
          end: {
            line: 549,
            column: 18
          }
        },
        line: 547
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 547,
            column: 163
          },
          end: {
            line: 547,
            column: 164
          }
        },
        loc: {
          start: {
            line: 547,
            column: 176
          },
          end: {
            line: 549,
            column: 17
          }
        },
        line: 547
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 614,
            column: 4
          },
          end: {
            line: 614,
            column: 5
          }
        },
        loc: {
          start: {
            line: 614,
            column: 74
          },
          end: {
            line: 640,
            column: 5
          }
        },
        line: 614
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 615,
            column: 55
          },
          end: {
            line: 615,
            column: 56
          }
        },
        loc: {
          start: {
            line: 615,
            column: 68
          },
          end: {
            line: 639,
            column: 9
          }
        },
        line: 615
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 644,
            column: 4
          },
          end: {
            line: 644,
            column: 5
          }
        },
        loc: {
          start: {
            line: 644,
            column: 36
          },
          end: {
            line: 727,
            column: 5
          }
        },
        line: 644
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 645,
            column: 55
          },
          end: {
            line: 645,
            column: 56
          }
        },
        loc: {
          start: {
            line: 645,
            column: 68
          },
          end: {
            line: 726,
            column: 9
          }
        },
        line: 645
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 731,
            column: 4
          },
          end: {
            line: 731,
            column: 5
          }
        },
        loc: {
          start: {
            line: 731,
            column: 39
          },
          end: {
            line: 738,
            column: 5
          }
        },
        line: 731
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 732,
            column: 55
          },
          end: {
            line: 732,
            column: 56
          }
        },
        loc: {
          start: {
            line: 732,
            column: 68
          },
          end: {
            line: 737,
            column: 9
          }
        },
        line: 732
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 742,
            column: 4
          },
          end: {
            line: 742,
            column: 5
          }
        },
        loc: {
          start: {
            line: 742,
            column: 44
          },
          end: {
            line: 751,
            column: 5
          }
        },
        line: 742
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 743,
            column: 55
          },
          end: {
            line: 743,
            column: 56
          }
        },
        loc: {
          start: {
            line: 743,
            column: 68
          },
          end: {
            line: 750,
            column: 9
          }
        },
        line: 743
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 753,
            column: 4
          },
          end: {
            line: 753,
            column: 5
          }
        },
        loc: {
          start: {
            line: 753,
            column: 31
          },
          end: {
            line: 827,
            column: 5
          }
        },
        line: 753
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 754,
            column: 55
          },
          end: {
            line: 754,
            column: 56
          }
        },
        loc: {
          start: {
            line: 754,
            column: 68
          },
          end: {
            line: 826,
            column: 9
          }
        },
        line: 754
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 831,
            column: 4
          },
          end: {
            line: 831,
            column: 5
          }
        },
        loc: {
          start: {
            line: 831,
            column: 29
          },
          end: {
            line: 878,
            column: 5
          }
        },
        line: 831
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 832,
            column: 55
          },
          end: {
            line: 832,
            column: 56
          }
        },
        loc: {
          start: {
            line: 832,
            column: 68
          },
          end: {
            line: 877,
            column: 9
          }
        },
        line: 832
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 849,
            column: 29
          },
          end: {
            line: 849,
            column: 30
          }
        },
        loc: {
          start: {
            line: 849,
            column: 36
          },
          end: {
            line: 849,
            column: 49
          }
        },
        line: 849
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 854,
            column: 29
          },
          end: {
            line: 854,
            column: 30
          }
        },
        loc: {
          start: {
            line: 854,
            column: 36
          },
          end: {
            line: 854,
            column: 49
          }
        },
        line: 854
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 882,
            column: 4
          },
          end: {
            line: 882,
            column: 5
          }
        },
        loc: {
          start: {
            line: 882,
            column: 40
          },
          end: {
            line: 904,
            column: 5
          }
        },
        line: 882
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 883,
            column: 55
          },
          end: {
            line: 883,
            column: 56
          }
        },
        loc: {
          start: {
            line: 883,
            column: 68
          },
          end: {
            line: 903,
            column: 9
          }
        },
        line: 883
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 908,
            column: 4
          },
          end: {
            line: 908,
            column: 5
          }
        },
        loc: {
          start: {
            line: 908,
            column: 40
          },
          end: {
            line: 926,
            column: 5
          }
        },
        line: 908
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 909,
            column: 55
          },
          end: {
            line: 909,
            column: 56
          }
        },
        loc: {
          start: {
            line: 909,
            column: 68
          },
          end: {
            line: 925,
            column: 9
          }
        },
        line: 909
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 930,
            column: 4
          },
          end: {
            line: 930,
            column: 5
          }
        },
        loc: {
          start: {
            line: 930,
            column: 43
          },
          end: {
            line: 954,
            column: 5
          }
        },
        line: 930
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 931,
            column: 55
          },
          end: {
            line: 931,
            column: 56
          }
        },
        loc: {
          start: {
            line: 931,
            column: 68
          },
          end: {
            line: 953,
            column: 9
          }
        },
        line: 931
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 958,
            column: 4
          },
          end: {
            line: 958,
            column: 5
          }
        },
        loc: {
          start: {
            line: 958,
            column: 59
          },
          end: {
            line: 994,
            column: 5
          }
        },
        line: 958
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 959,
            column: 58
          },
          end: {
            line: 959,
            column: 59
          }
        },
        loc: {
          start: {
            line: 959,
            column: 135
          },
          end: {
            line: 993,
            column: 9
          }
        },
        line: 959
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 998,
            column: 4
          },
          end: {
            line: 998,
            column: 5
          }
        },
        loc: {
          start: {
            line: 998,
            column: 43
          },
          end: {
            line: 1052,
            column: 5
          }
        },
        line: 998
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 999,
            column: 55
          },
          end: {
            line: 999,
            column: 56
          }
        },
        loc: {
          start: {
            line: 999,
            column: 68
          },
          end: {
            line: 1051,
            column: 9
          }
        },
        line: 999
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 1056,
            column: 4
          },
          end: {
            line: 1056,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1056,
            column: 27
          },
          end: {
            line: 1116,
            column: 5
          }
        },
        line: 1056
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 1057,
            column: 55
          },
          end: {
            line: 1057,
            column: 56
          }
        },
        loc: {
          start: {
            line: 1057,
            column: 68
          },
          end: {
            line: 1115,
            column: 9
          }
        },
        line: 1057
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 1067,
            column: 34
          },
          end: {
            line: 1067,
            column: 35
          }
        },
        loc: {
          start: {
            line: 1067,
            column: 48
          },
          end: {
            line: 1072,
            column: 17
          }
        },
        line: 1067
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 1117,
            column: 4
          },
          end: {
            line: 1117,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1117,
            column: 27
          },
          end: {
            line: 1182,
            column: 5
          }
        },
        line: 1117
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 1118,
            column: 55
          },
          end: {
            line: 1118,
            column: 56
          }
        },
        loc: {
          start: {
            line: 1118,
            column: 68
          },
          end: {
            line: 1181,
            column: 9
          }
        },
        line: 1118
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 1133,
            column: 67
          },
          end: {
            line: 1133,
            column: 68
          }
        },
        loc: {
          start: {
            line: 1133,
            column: 74
          },
          end: {
            line: 1133,
            column: 87
          }
        },
        line: 1133
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 1134,
            column: 67
          },
          end: {
            line: 1134,
            column: 68
          }
        },
        loc: {
          start: {
            line: 1134,
            column: 74
          },
          end: {
            line: 1134,
            column: 87
          }
        },
        line: 1134
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 1186,
            column: 4
          },
          end: {
            line: 1186,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1186,
            column: 30
          },
          end: {
            line: 1230,
            column: 5
          }
        },
        line: 1186
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 1187,
            column: 55
          },
          end: {
            line: 1187,
            column: 56
          }
        },
        loc: {
          start: {
            line: 1187,
            column: 68
          },
          end: {
            line: 1229,
            column: 9
          }
        },
        line: 1187
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 1234,
            column: 4
          },
          end: {
            line: 1234,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1234,
            column: 64
          },
          end: {
            line: 1272,
            column: 5
          }
        },
        line: 1234
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 1235,
            column: 55
          },
          end: {
            line: 1235,
            column: 56
          }
        },
        loc: {
          start: {
            line: 1235,
            column: 68
          },
          end: {
            line: 1271,
            column: 9
          }
        },
        line: 1235
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 1276,
            column: 4
          },
          end: {
            line: 1276,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1276,
            column: 51
          },
          end: {
            line: 1313,
            column: 5
          }
        },
        line: 1276
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 1277,
            column: 55
          },
          end: {
            line: 1277,
            column: 56
          }
        },
        loc: {
          start: {
            line: 1277,
            column: 68
          },
          end: {
            line: 1312,
            column: 9
          }
        },
        line: 1277
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 1292,
            column: 27
          },
          end: {
            line: 1292,
            column: 28
          }
        },
        loc: {
          start: {
            line: 1292,
            column: 33
          },
          end: {
            line: 1306,
            column: 18
          }
        },
        line: 1292
      },
      "61": {
        name: "(anonymous_61)",
        decl: {
          start: {
            line: 1292,
            column: 73
          },
          end: {
            line: 1292,
            column: 74
          }
        },
        loc: {
          start: {
            line: 1292,
            column: 86
          },
          end: {
            line: 1306,
            column: 17
          }
        },
        line: 1292
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 1317,
            column: 4
          },
          end: {
            line: 1317,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1317,
            column: 51
          },
          end: {
            line: 1334,
            column: 5
          }
        },
        line: 1317
      },
      "63": {
        name: "(anonymous_63)",
        decl: {
          start: {
            line: 1318,
            column: 55
          },
          end: {
            line: 1318,
            column: 56
          }
        },
        loc: {
          start: {
            line: 1318,
            column: 68
          },
          end: {
            line: 1333,
            column: 9
          }
        },
        line: 1318
      },
      "64": {
        name: "(anonymous_64)",
        decl: {
          start: {
            line: 1336,
            column: 4
          },
          end: {
            line: 1336,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1336,
            column: 28
          },
          end: {
            line: 1397,
            column: 5
          }
        },
        line: 1336
      },
      "65": {
        name: "(anonymous_65)",
        decl: {
          start: {
            line: 1337,
            column: 55
          },
          end: {
            line: 1337,
            column: 56
          }
        },
        loc: {
          start: {
            line: 1337,
            column: 68
          },
          end: {
            line: 1396,
            column: 9
          }
        },
        line: 1337
      },
      "66": {
        name: "(anonymous_66)",
        decl: {
          start: {
            line: 1401,
            column: 4
          },
          end: {
            line: 1401,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1401,
            column: 65
          },
          end: {
            line: 1418,
            column: 5
          }
        },
        line: 1401
      },
      "67": {
        name: "(anonymous_67)",
        decl: {
          start: {
            line: 1422,
            column: 4
          },
          end: {
            line: 1422,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1422,
            column: 31
          },
          end: {
            line: 1433,
            column: 5
          }
        },
        line: 1422
      },
      "68": {
        name: "(anonymous_68)",
        decl: {
          start: {
            line: 1423,
            column: 55
          },
          end: {
            line: 1423,
            column: 56
          }
        },
        loc: {
          start: {
            line: 1423,
            column: 68
          },
          end: {
            line: 1432,
            column: 9
          }
        },
        line: 1423
      },
      "69": {
        name: "(anonymous_69)",
        decl: {
          start: {
            line: 1437,
            column: 4
          },
          end: {
            line: 1437,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1437,
            column: 83
          },
          end: {
            line: 1452,
            column: 5
          }
        },
        line: 1437
      },
      "70": {
        name: "(anonymous_70)",
        decl: {
          start: {
            line: 1438,
            column: 55
          },
          end: {
            line: 1438,
            column: 56
          }
        },
        loc: {
          start: {
            line: 1438,
            column: 68
          },
          end: {
            line: 1451,
            column: 9
          }
        },
        line: 1438
      },
      "71": {
        name: "(anonymous_71)",
        decl: {
          start: {
            line: 1453,
            column: 4
          },
          end: {
            line: 1453,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1453,
            column: 26
          },
          end: {
            line: 1466,
            column: 5
          }
        },
        line: 1453
      },
      "72": {
        name: "(anonymous_72)",
        decl: {
          start: {
            line: 1454,
            column: 55
          },
          end: {
            line: 1454,
            column: 56
          }
        },
        loc: {
          start: {
            line: 1454,
            column: 68
          },
          end: {
            line: 1465,
            column: 9
          }
        },
        line: 1454
      },
      "73": {
        name: "(anonymous_73)",
        decl: {
          start: {
            line: 1467,
            column: 4
          },
          end: {
            line: 1467,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1467,
            column: 26
          },
          end: {
            line: 1471,
            column: 5
          }
        },
        line: 1467
      },
      "74": {
        name: "(anonymous_74)",
        decl: {
          start: {
            line: 1468,
            column: 55
          },
          end: {
            line: 1468,
            column: 56
          }
        },
        loc: {
          start: {
            line: 1468,
            column: 68
          },
          end: {
            line: 1470,
            column: 9
          }
        },
        line: 1468
      },
      "75": {
        name: "(anonymous_75)",
        decl: {
          start: {
            line: 1473,
            column: 4
          },
          end: {
            line: 1473,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1473,
            column: 30
          },
          end: {
            line: 1482,
            column: 5
          }
        },
        line: 1473
      },
      "76": {
        name: "(anonymous_76)",
        decl: {
          start: {
            line: 1474,
            column: 55
          },
          end: {
            line: 1474,
            column: 56
          }
        },
        loc: {
          start: {
            line: 1474,
            column: 68
          },
          end: {
            line: 1481,
            column: 9
          }
        },
        line: 1474
      },
      "77": {
        name: "(anonymous_77)",
        decl: {
          start: {
            line: 1483,
            column: 4
          },
          end: {
            line: 1483,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1483,
            column: 25
          },
          end: {
            line: 1487,
            column: 5
          }
        },
        line: 1483
      },
      "78": {
        name: "(anonymous_78)",
        decl: {
          start: {
            line: 1484,
            column: 55
          },
          end: {
            line: 1484,
            column: 56
          }
        },
        loc: {
          start: {
            line: 1484,
            column: 68
          },
          end: {
            line: 1486,
            column: 9
          }
        },
        line: 1484
      },
      "79": {
        name: "(anonymous_79)",
        decl: {
          start: {
            line: 1498,
            column: 4
          },
          end: {
            line: 1498,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1498,
            column: 28
          },
          end: {
            line: 1615,
            column: 5
          }
        },
        line: 1498
      },
      "80": {
        name: "(anonymous_80)",
        decl: {
          start: {
            line: 1499,
            column: 55
          },
          end: {
            line: 1499,
            column: 56
          }
        },
        loc: {
          start: {
            line: 1499,
            column: 68
          },
          end: {
            line: 1614,
            column: 9
          }
        },
        line: 1499
      },
      "81": {
        name: "(anonymous_81)",
        decl: {
          start: {
            line: 1546,
            column: 58
          },
          end: {
            line: 1546,
            column: 59
          }
        },
        loc: {
          start: {
            line: 1546,
            column: 66
          },
          end: {
            line: 1551,
            column: 21
          }
        },
        line: 1546
      },
      "82": {
        name: "(anonymous_82)",
        decl: {
          start: {
            line: 1552,
            column: 54
          },
          end: {
            line: 1552,
            column: 55
          }
        },
        loc: {
          start: {
            line: 1552,
            column: 62
          },
          end: {
            line: 1557,
            column: 21
          }
        },
        line: 1552
      },
      "83": {
        name: "(anonymous_83)",
        decl: {
          start: {
            line: 1558,
            column: 56
          },
          end: {
            line: 1558,
            column: 57
          }
        },
        loc: {
          start: {
            line: 1558,
            column: 64
          },
          end: {
            line: 1563,
            column: 21
          }
        },
        line: 1558
      },
      "84": {
        name: "(anonymous_84)",
        decl: {
          start: {
            line: 1564,
            column: 53
          },
          end: {
            line: 1564,
            column: 54
          }
        },
        loc: {
          start: {
            line: 1564,
            column: 61
          },
          end: {
            line: 1569,
            column: 21
          }
        },
        line: 1564
      },
      "85": {
        name: "(anonymous_85)",
        decl: {
          start: {
            line: 1619,
            column: 4
          },
          end: {
            line: 1619,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1619,
            column: 32
          },
          end: {
            line: 1621,
            column: 5
          }
        },
        line: 1619
      },
      "86": {
        name: "(anonymous_86)",
        decl: {
          start: {
            line: 1626,
            column: 4
          },
          end: {
            line: 1626,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1626,
            column: 34
          },
          end: {
            line: 1637,
            column: 5
          }
        },
        line: 1626
      },
      "87": {
        name: "(anonymous_87)",
        decl: {
          start: {
            line: 1641,
            column: 4
          },
          end: {
            line: 1641,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1641,
            column: 31
          },
          end: {
            line: 1682,
            column: 5
          }
        },
        line: 1641
      },
      "88": {
        name: "(anonymous_88)",
        decl: {
          start: {
            line: 1642,
            column: 55
          },
          end: {
            line: 1642,
            column: 56
          }
        },
        loc: {
          start: {
            line: 1642,
            column: 68
          },
          end: {
            line: 1681,
            column: 9
          }
        },
        line: 1642
      },
      "89": {
        name: "(anonymous_89)",
        decl: {
          start: {
            line: 1686,
            column: 4
          },
          end: {
            line: 1686,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1686,
            column: 40
          },
          end: {
            line: 1702,
            column: 5
          }
        },
        line: 1686
      },
      "90": {
        name: "(anonymous_90)",
        decl: {
          start: {
            line: 1687,
            column: 55
          },
          end: {
            line: 1687,
            column: 56
          }
        },
        loc: {
          start: {
            line: 1687,
            column: 68
          },
          end: {
            line: 1701,
            column: 9
          }
        },
        line: 1687
      },
      "91": {
        name: "(anonymous_91)",
        decl: {
          start: {
            line: 1706,
            column: 4
          },
          end: {
            line: 1706,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1706,
            column: 42
          },
          end: {
            line: 1729,
            column: 5
          }
        },
        line: 1706
      },
      "92": {
        name: "(anonymous_92)",
        decl: {
          start: {
            line: 1707,
            column: 55
          },
          end: {
            line: 1707,
            column: 56
          }
        },
        loc: {
          start: {
            line: 1707,
            column: 68
          },
          end: {
            line: 1728,
            column: 9
          }
        },
        line: 1707
      },
      "93": {
        name: "(anonymous_93)",
        decl: {
          start: {
            line: 1733,
            column: 4
          },
          end: {
            line: 1733,
            column: 5
          }
        },
        loc: {
          start: {
            line: 1733,
            column: 25
          },
          end: {
            line: 1735,
            column: 5
          }
        },
        line: 1733
      },
      "94": {
        name: "createBedrockSupportManager",
        decl: {
          start: {
            line: 1741,
            column: 9
          },
          end: {
            line: 1741,
            column: 36
          }
        },
        loc: {
          start: {
            line: 1741,
            column: 75
          },
          end: {
            line: 1743,
            column: 1
          }
        },
        line: 1741
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 42,
            column: 28
          },
          end: {
            line: 42,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 28
          },
          end: {
            line: 42,
            column: 40
          }
        }, {
          start: {
            line: 42,
            column: 44
          },
          end: {
            line: 42,
            column: 83
          }
        }],
        line: 42
      },
      "1": {
        loc: {
          start: {
            line: 43,
            column: 30
          },
          end: {
            line: 43,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 30
          },
          end: {
            line: 43,
            column: 44
          }
        }, {
          start: {
            line: 43,
            column: 48
          },
          end: {
            line: 43,
            column: 86
          }
        }],
        line: 43
      },
      "2": {
        loc: {
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 46,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 46,
            column: 30
          }
        }, {
          start: {
            line: 46,
            column: 34
          },
          end: {
            line: 46,
            column: 99
          }
        }],
        line: 46
      },
      "3": {
        loc: {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 48,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 48,
            column: 33
          }
        }, {
          start: {
            line: 48,
            column: 37
          },
          end: {
            line: 48,
            column: 89
          }
        }],
        line: 48
      },
      "4": {
        loc: {
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 50,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 50,
            column: 31
          }
        }, {
          start: {
            line: 50,
            column: 35
          },
          end: {
            line: 50,
            column: 105
          }
        }],
        line: 50
      },
      "5": {
        loc: {
          start: {
            line: 66,
            column: 20
          },
          end: {
            line: 66,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 66,
            column: 20
          },
          end: {
            line: 66,
            column: 42
          }
        }, {
          start: {
            line: 66,
            column: 46
          },
          end: {
            line: 66,
            column: 60
          }
        }],
        line: 66
      },
      "6": {
        loc: {
          start: {
            line: 107,
            column: 110
          },
          end: {
            line: 107,
            column: 150
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 110
          },
          end: {
            line: 107,
            column: 132
          }
        }, {
          start: {
            line: 107,
            column: 136
          },
          end: {
            line: 107,
            column: 150
          }
        }],
        line: 107
      },
      "7": {
        loc: {
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 146,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 146,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "8": {
        loc: {
          start: {
            line: 149,
            column: 16
          },
          end: {
            line: 159,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 16
          },
          end: {
            line: 159,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "9": {
        loc: {
          start: {
            line: 162,
            column: 16
          },
          end: {
            line: 171,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 16
          },
          end: {
            line: 171,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "10": {
        loc: {
          start: {
            line: 175,
            column: 16
          },
          end: {
            line: 184,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 16
          },
          end: {
            line: 184,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "11": {
        loc: {
          start: {
            line: 202,
            column: 76
          },
          end: {
            line: 202,
            column: 132
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 202,
            column: 101
          },
          end: {
            line: 202,
            column: 114
          }
        }, {
          start: {
            line: 202,
            column: 117
          },
          end: {
            line: 202,
            column: 132
          }
        }],
        line: 202
      },
      "12": {
        loc: {
          start: {
            line: 233,
            column: 77
          },
          end: {
            line: 233,
            column: 133
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 233,
            column: 102
          },
          end: {
            line: 233,
            column: 115
          }
        }, {
          start: {
            line: 233,
            column: 118
          },
          end: {
            line: 233,
            column: 133
          }
        }],
        line: 233
      },
      "13": {
        loc: {
          start: {
            line: 251,
            column: 15
          },
          end: {
            line: 251,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 251,
            column: 15
          },
          end: {
            line: 251,
            column: 31
          }
        }, {
          start: {
            line: 251,
            column: 35
          },
          end: {
            line: 251,
            column: 54
          }
        }],
        line: 251
      },
      "14": {
        loc: {
          start: {
            line: 264,
            column: 16
          },
          end: {
            line: 303,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 16
          },
          end: {
            line: 303,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 264
      },
      "15": {
        loc: {
          start: {
            line: 317,
            column: 16
          },
          end: {
            line: 329,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 317,
            column: 16
          },
          end: {
            line: 329,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 317
      },
      "16": {
        loc: {
          start: {
            line: 319,
            column: 84
          },
          end: {
            line: 320,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 319,
            column: 84
          },
          end: {
            line: 319,
            column: 124
          }
        }, {
          start: {
            line: 320,
            column: 24
          },
          end: {
            line: 320,
            column: 68
          }
        }],
        line: 319
      },
      "17": {
        loc: {
          start: {
            line: 323,
            column: 34
          },
          end: {
            line: 323,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 323,
            column: 54
          },
          end: {
            line: 323,
            column: 64
          }
        }, {
          start: {
            line: 323,
            column: 67
          },
          end: {
            line: 323,
            column: 75
          }
        }],
        line: 323
      },
      "18": {
        loc: {
          start: {
            line: 334,
            column: 20
          },
          end: {
            line: 343,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 334,
            column: 20
          },
          end: {
            line: 343,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 334
      },
      "19": {
        loc: {
          start: {
            line: 334,
            column: 24
          },
          end: {
            line: 334,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 334,
            column: 24
          },
          end: {
            line: 334,
            column: 32
          }
        }, {
          start: {
            line: 334,
            column: 36
          },
          end: {
            line: 334,
            column: 58
          }
        }],
        line: 334
      },
      "20": {
        loc: {
          start: {
            line: 350,
            column: 16
          },
          end: {
            line: 358,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 350,
            column: 16
          },
          end: {
            line: 358,
            column: 17
          }
        }, {
          start: {
            line: 353,
            column: 21
          },
          end: {
            line: 358,
            column: 17
          }
        }],
        line: 350
      },
      "21": {
        loc: {
          start: {
            line: 353,
            column: 21
          },
          end: {
            line: 358,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 353,
            column: 21
          },
          end: {
            line: 358,
            column: 17
          }
        }, {
          start: {
            line: 356,
            column: 21
          },
          end: {
            line: 358,
            column: 17
          }
        }],
        line: 353
      },
      "22": {
        loc: {
          start: {
            line: 353,
            column: 25
          },
          end: {
            line: 353,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 353,
            column: 25
          },
          end: {
            line: 353,
            column: 46
          }
        }, {
          start: {
            line: 353,
            column: 50
          },
          end: {
            line: 353,
            column: 73
          }
        }],
        line: 353
      },
      "23": {
        loc: {
          start: {
            line: 360,
            column: 16
          },
          end: {
            line: 372,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 360,
            column: 16
          },
          end: {
            line: 372,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 360
      },
      "24": {
        loc: {
          start: {
            line: 390,
            column: 37
          },
          end: {
            line: 390,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 390,
            column: 62
          },
          end: {
            line: 390,
            column: 75
          }
        }, {
          start: {
            line: 390,
            column: 78
          },
          end: {
            line: 390,
            column: 93
          }
        }],
        line: 390
      },
      "25": {
        loc: {
          start: {
            line: 394,
            column: 16
          },
          end: {
            line: 440,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 394,
            column: 16
          },
          end: {
            line: 440,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 394
      },
      "26": {
        loc: {
          start: {
            line: 494,
            column: 12
          },
          end: {
            line: 496,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 494,
            column: 12
          },
          end: {
            line: 496,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 494
      },
      "27": {
        loc: {
          start: {
            line: 510,
            column: 12
          },
          end: {
            line: 539,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 510,
            column: 12
          },
          end: {
            line: 539,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 510
      },
      "28": {
        loc: {
          start: {
            line: 510,
            column: 16
          },
          end: {
            line: 510,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 510,
            column: 16
          },
          end: {
            line: 510,
            column: 24
          }
        }, {
          start: {
            line: 510,
            column: 28
          },
          end: {
            line: 510,
            column: 46
          }
        }],
        line: 510
      },
      "29": {
        loc: {
          start: {
            line: 561,
            column: 37
          },
          end: {
            line: 561,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 561,
            column: 62
          },
          end: {
            line: 561,
            column: 75
          }
        }, {
          start: {
            line: 561,
            column: 78
          },
          end: {
            line: 561,
            column: 91
          }
        }],
        line: 561
      },
      "30": {
        loc: {
          start: {
            line: 564,
            column: 16
          },
          end: {
            line: 567,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 564,
            column: 16
          },
          end: {
            line: 567,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 564
      },
      "31": {
        loc: {
          start: {
            line: 618,
            column: 16
          },
          end: {
            line: 632,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 618,
            column: 16
          },
          end: {
            line: 632,
            column: 17
          }
        }, {
          start: {
            line: 629,
            column: 21
          },
          end: {
            line: 632,
            column: 17
          }
        }],
        line: 618
      },
      "32": {
        loc: {
          start: {
            line: 626,
            column: 37
          },
          end: {
            line: 626,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 626,
            column: 82
          },
          end: {
            line: 626,
            column: 91
          }
        }, {
          start: {
            line: 626,
            column: 94
          },
          end: {
            line: 626,
            column: 102
          }
        }],
        line: 626
      },
      "33": {
        loc: {
          start: {
            line: 635,
            column: 37
          },
          end: {
            line: 635,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 635,
            column: 62
          },
          end: {
            line: 635,
            column: 75
          }
        }, {
          start: {
            line: 635,
            column: 78
          },
          end: {
            line: 635,
            column: 91
          }
        }],
        line: 635
      },
      "34": {
        loc: {
          start: {
            line: 668,
            column: 16
          },
          end: {
            line: 676,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 668,
            column: 16
          },
          end: {
            line: 676,
            column: 17
          }
        }, {
          start: {
            line: 671,
            column: 21
          },
          end: {
            line: 676,
            column: 17
          }
        }],
        line: 668
      },
      "35": {
        loc: {
          start: {
            line: 671,
            column: 21
          },
          end: {
            line: 676,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 671,
            column: 21
          },
          end: {
            line: 676,
            column: 17
          }
        }, {
          start: {
            line: 674,
            column: 21
          },
          end: {
            line: 676,
            column: 17
          }
        }],
        line: 671
      },
      "36": {
        loc: {
          start: {
            line: 679,
            column: 16
          },
          end: {
            line: 686,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 679,
            column: 16
          },
          end: {
            line: 686,
            column: 17
          }
        }, {
          start: {
            line: 683,
            column: 21
          },
          end: {
            line: 686,
            column: 17
          }
        }],
        line: 679
      },
      "37": {
        loc: {
          start: {
            line: 697,
            column: 75
          },
          end: {
            line: 697,
            column: 131
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 697,
            column: 100
          },
          end: {
            line: 697,
            column: 113
          }
        }, {
          start: {
            line: 697,
            column: 116
          },
          end: {
            line: 697,
            column: 131
          }
        }],
        line: 697
      },
      "38": {
        loc: {
          start: {
            line: 706,
            column: 76
          },
          end: {
            line: 706,
            column: 132
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 706,
            column: 101
          },
          end: {
            line: 706,
            column: 114
          }
        }, {
          start: {
            line: 706,
            column: 117
          },
          end: {
            line: 706,
            column: 132
          }
        }],
        line: 706
      },
      "39": {
        loc: {
          start: {
            line: 747,
            column: 12
          },
          end: {
            line: 749,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 747,
            column: 12
          },
          end: {
            line: 749,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 747
      },
      "40": {
        loc: {
          start: {
            line: 769,
            column: 16
          },
          end: {
            line: 772,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 769,
            column: 16
          },
          end: {
            line: 772,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 769
      },
      "41": {
        loc: {
          start: {
            line: 774,
            column: 16
          },
          end: {
            line: 777,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 774,
            column: 16
          },
          end: {
            line: 777,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 774
      },
      "42": {
        loc: {
          start: {
            line: 779,
            column: 16
          },
          end: {
            line: 782,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 779,
            column: 16
          },
          end: {
            line: 782,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 779
      },
      "43": {
        loc: {
          start: {
            line: 784,
            column: 16
          },
          end: {
            line: 787,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 784,
            column: 16
          },
          end: {
            line: 787,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 784
      },
      "44": {
        loc: {
          start: {
            line: 789,
            column: 16
          },
          end: {
            line: 792,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 789,
            column: 16
          },
          end: {
            line: 792,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 789
      },
      "45": {
        loc: {
          start: {
            line: 794,
            column: 16
          },
          end: {
            line: 796,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 794,
            column: 16
          },
          end: {
            line: 796,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 794
      },
      "46": {
        loc: {
          start: {
            line: 815,
            column: 37
          },
          end: {
            line: 815,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 815,
            column: 62
          },
          end: {
            line: 815,
            column: 75
          }
        }, {
          start: {
            line: 815,
            column: 78
          },
          end: {
            line: 815,
            column: 91
          }
        }],
        line: 815
      },
      "47": {
        loc: {
          start: {
            line: 840,
            column: 16
          },
          end: {
            line: 843,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 840,
            column: 16
          },
          end: {
            line: 843,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 840
      },
      "48": {
        loc: {
          start: {
            line: 847,
            column: 16
          },
          end: {
            line: 851,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 847,
            column: 16
          },
          end: {
            line: 851,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 847
      },
      "49": {
        loc: {
          start: {
            line: 852,
            column: 16
          },
          end: {
            line: 856,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 852,
            column: 16
          },
          end: {
            line: 856,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 852
      },
      "50": {
        loc: {
          start: {
            line: 859,
            column: 16
          },
          end: {
            line: 861,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 859,
            column: 16
          },
          end: {
            line: 861,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 859
      },
      "51": {
        loc: {
          start: {
            line: 865,
            column: 16
          },
          end: {
            line: 867,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 865,
            column: 16
          },
          end: {
            line: 867,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 865
      },
      "52": {
        loc: {
          start: {
            line: 869,
            column: 24
          },
          end: {
            line: 871,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 869,
            column: 24
          },
          end: {
            line: 869,
            column: 74
          }
        }, {
          start: {
            line: 870,
            column: 21
          },
          end: {
            line: 870,
            column: 69
          }
        }, {
          start: {
            line: 871,
            column: 24
          },
          end: {
            line: 871,
            column: 62
          }
        }],
        line: 869
      },
      "53": {
        loc: {
          start: {
            line: 874,
            column: 84
          },
          end: {
            line: 874,
            column: 138
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 874,
            column: 109
          },
          end: {
            line: 874,
            column: 122
          }
        }, {
          start: {
            line: 874,
            column: 125
          },
          end: {
            line: 874,
            column: 138
          }
        }],
        line: 874
      },
      "54": {
        loc: {
          start: {
            line: 887,
            column: 16
          },
          end: {
            line: 890,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 887,
            column: 16
          },
          end: {
            line: 890,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 887
      },
      "55": {
        loc: {
          start: {
            line: 887,
            column: 20
          },
          end: {
            line: 887,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 887,
            column: 20
          },
          end: {
            line: 887,
            column: 37
          }
        }, {
          start: {
            line: 887,
            column: 41
          },
          end: {
            line: 887,
            column: 74
          }
        }],
        line: 887
      },
      "56": {
        loc: {
          start: {
            line: 893,
            column: 16
          },
          end: {
            line: 896,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 893,
            column: 16
          },
          end: {
            line: 896,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 893
      },
      "57": {
        loc: {
          start: {
            line: 914,
            column: 16
          },
          end: {
            line: 916,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 914,
            column: 16
          },
          end: {
            line: 916,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 914
      },
      "58": {
        loc: {
          start: {
            line: 914,
            column: 20
          },
          end: {
            line: 914,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 914,
            column: 20
          },
          end: {
            line: 914,
            column: 40
          }
        }, {
          start: {
            line: 914,
            column: 44
          },
          end: {
            line: 914,
            column: 64
          }
        }],
        line: 914
      },
      "59": {
        loc: {
          start: {
            line: 934,
            column: 38
          },
          end: {
            line: 934,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 934,
            column: 38
          },
          end: {
            line: 934,
            column: 68
          }
        }, {
          start: {
            line: 934,
            column: 72
          },
          end: {
            line: 934,
            column: 94
          }
        }, {
          start: {
            line: 934,
            column: 98
          },
          end: {
            line: 934,
            column: 109
          }
        }],
        line: 934
      },
      "60": {
        loc: {
          start: {
            line: 943,
            column: 16
          },
          end: {
            line: 946,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 943,
            column: 16
          },
          end: {
            line: 946,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 943
      },
      "61": {
        loc: {
          start: {
            line: 959,
            column: 84
          },
          end: {
            line: 959,
            column: 112
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 959,
            column: 96
          },
          end: {
            line: 959,
            column: 112
          }
        }],
        line: 959
      },
      "62": {
        loc: {
          start: {
            line: 959,
            column: 114
          },
          end: {
            line: 959,
            column: 133
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 959,
            column: 125
          },
          end: {
            line: 959,
            column: 133
          }
        }],
        line: 959
      },
      "63": {
        loc: {
          start: {
            line: 973,
            column: 16
          },
          end: {
            line: 975,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 973,
            column: 16
          },
          end: {
            line: 975,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 973
      },
      "64": {
        loc: {
          start: {
            line: 989,
            column: 37
          },
          end: {
            line: 989,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 989,
            column: 62
          },
          end: {
            line: 989,
            column: 75
          }
        }, {
          start: {
            line: 989,
            column: 78
          },
          end: {
            line: 989,
            column: 91
          }
        }],
        line: 989
      },
      "65": {
        loc: {
          start: {
            line: 1025,
            column: 52
          },
          end: {
            line: 1025,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1025,
            column: 52
          },
          end: {
            line: 1025,
            column: 79
          }
        }, {
          start: {
            line: 1025,
            column: 83
          },
          end: {
            line: 1025,
            column: 96
          }
        }],
        line: 1025
      },
      "66": {
        loc: {
          start: {
            line: 1047,
            column: 37
          },
          end: {
            line: 1047,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1047,
            column: 62
          },
          end: {
            line: 1047,
            column: 75
          }
        }, {
          start: {
            line: 1047,
            column: 78
          },
          end: {
            line: 1047,
            column: 91
          }
        }],
        line: 1047
      },
      "67": {
        loc: {
          start: {
            line: 1061,
            column: 16
          },
          end: {
            line: 1063,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1061,
            column: 16
          },
          end: {
            line: 1063,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1061
      },
      "68": {
        loc: {
          start: {
            line: 1068,
            column: 20
          },
          end: {
            line: 1071,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1068,
            column: 20
          },
          end: {
            line: 1071,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1068
      },
      "69": {
        loc: {
          start: {
            line: 1083,
            column: 16
          },
          end: {
            line: 1085,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1083,
            column: 16
          },
          end: {
            line: 1085,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1083
      },
      "70": {
        loc: {
          start: {
            line: 1087,
            column: 16
          },
          end: {
            line: 1089,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1087,
            column: 16
          },
          end: {
            line: 1089,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1087
      },
      "71": {
        loc: {
          start: {
            line: 1091,
            column: 16
          },
          end: {
            line: 1094,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1091,
            column: 16
          },
          end: {
            line: 1094,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1091
      },
      "72": {
        loc: {
          start: {
            line: 1105,
            column: 37
          },
          end: {
            line: 1105,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1105,
            column: 62
          },
          end: {
            line: 1105,
            column: 75
          }
        }, {
          start: {
            line: 1105,
            column: 78
          },
          end: {
            line: 1105,
            column: 91
          }
        }],
        line: 1105
      },
      "73": {
        loc: {
          start: {
            line: 1122,
            column: 16
          },
          end: {
            line: 1124,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1122,
            column: 16
          },
          end: {
            line: 1124,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1122
      },
      "74": {
        loc: {
          start: {
            line: 1154,
            column: 37
          },
          end: {
            line: 1154,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1154,
            column: 62
          },
          end: {
            line: 1154,
            column: 75
          }
        }, {
          start: {
            line: 1154,
            column: 78
          },
          end: {
            line: 1154,
            column: 91
          }
        }],
        line: 1154
      },
      "75": {
        loc: {
          start: {
            line: 1197,
            column: 16
          },
          end: {
            line: 1202,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1197,
            column: 16
          },
          end: {
            line: 1202,
            column: 17
          }
        }, {
          start: {
            line: 1200,
            column: 21
          },
          end: {
            line: 1202,
            column: 17
          }
        }],
        line: 1197
      },
      "76": {
        loc: {
          start: {
            line: 1197,
            column: 20
          },
          end: {
            line: 1197,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1197,
            column: 20
          },
          end: {
            line: 1197,
            column: 37
          }
        }, {
          start: {
            line: 1197,
            column: 41
          },
          end: {
            line: 1197,
            column: 54
          }
        }],
        line: 1197
      },
      "77": {
        loc: {
          start: {
            line: 1200,
            column: 21
          },
          end: {
            line: 1202,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1200,
            column: 21
          },
          end: {
            line: 1202,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1200
      },
      "78": {
        loc: {
          start: {
            line: 1200,
            column: 25
          },
          end: {
            line: 1200,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1200,
            column: 25
          },
          end: {
            line: 1200,
            column: 42
          }
        }, {
          start: {
            line: 1200,
            column: 46
          },
          end: {
            line: 1200,
            column: 59
          }
        }],
        line: 1200
      },
      "79": {
        loc: {
          start: {
            line: 1225,
            column: 37
          },
          end: {
            line: 1225,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1225,
            column: 62
          },
          end: {
            line: 1225,
            column: 75
          }
        }, {
          start: {
            line: 1225,
            column: 78
          },
          end: {
            line: 1225,
            column: 91
          }
        }],
        line: 1225
      },
      "80": {
        loc: {
          start: {
            line: 1246,
            column: 16
          },
          end: {
            line: 1260,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1246,
            column: 16
          },
          end: {
            line: 1260,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1246
      },
      "81": {
        loc: {
          start: {
            line: 1247,
            column: 42
          },
          end: {
            line: 1247,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1247,
            column: 68
          },
          end: {
            line: 1247,
            column: 73
          }
        }, {
          start: {
            line: 1247,
            column: 76
          },
          end: {
            line: 1247,
            column: 84
          }
        }],
        line: 1247
      },
      "82": {
        loc: {
          start: {
            line: 1250,
            column: 45
          },
          end: {
            line: 1250,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1250,
            column: 74
          },
          end: {
            line: 1250,
            column: 83
          }
        }, {
          start: {
            line: 1250,
            column: 86
          },
          end: {
            line: 1250,
            column: 94
          }
        }],
        line: 1250
      },
      "83": {
        loc: {
          start: {
            line: 1252,
            column: 20
          },
          end: {
            line: 1259,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1252,
            column: 20
          },
          end: {
            line: 1259,
            column: 21
          }
        }, {
          start: {
            line: 1255,
            column: 25
          },
          end: {
            line: 1259,
            column: 21
          }
        }],
        line: 1252
      },
      "84": {
        loc: {
          start: {
            line: 1262,
            column: 16
          },
          end: {
            line: 1264,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1262,
            column: 16
          },
          end: {
            line: 1264,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1262
      },
      "85": {
        loc: {
          start: {
            line: 1267,
            column: 37
          },
          end: {
            line: 1267,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1267,
            column: 62
          },
          end: {
            line: 1267,
            column: 75
          }
        }, {
          start: {
            line: 1267,
            column: 78
          },
          end: {
            line: 1267,
            column: 91
          }
        }],
        line: 1267
      },
      "86": {
        loc: {
          start: {
            line: 1298,
            column: 24
          },
          end: {
            line: 1301,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1298,
            column: 24
          },
          end: {
            line: 1301,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1298
      },
      "87": {
        loc: {
          start: {
            line: 1309,
            column: 37
          },
          end: {
            line: 1309,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1309,
            column: 62
          },
          end: {
            line: 1309,
            column: 75
          }
        }, {
          start: {
            line: 1309,
            column: 78
          },
          end: {
            line: 1309,
            column: 91
          }
        }],
        line: 1309
      },
      "88": {
        loc: {
          start: {
            line: 1322,
            column: 20
          },
          end: {
            line: 1327,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1322,
            column: 20
          },
          end: {
            line: 1327,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1322
      },
      "89": {
        loc: {
          start: {
            line: 1362,
            column: 16
          },
          end: {
            line: 1370,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1362,
            column: 16
          },
          end: {
            line: 1370,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1362
      },
      "90": {
        loc: {
          start: {
            line: 1404,
            column: 8
          },
          end: {
            line: 1406,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1404,
            column: 8
          },
          end: {
            line: 1406,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1404
      },
      "91": {
        loc: {
          start: {
            line: 1409,
            column: 8
          },
          end: {
            line: 1411,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1409,
            column: 8
          },
          end: {
            line: 1411,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1409
      },
      "92": {
        loc: {
          start: {
            line: 1414,
            column: 8
          },
          end: {
            line: 1416,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1414,
            column: 8
          },
          end: {
            line: 1416,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1414
      },
      "93": {
        loc: {
          start: {
            line: 1503,
            column: 16
          },
          end: {
            line: 1513,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1503,
            column: 16
          },
          end: {
            line: 1513,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1503
      },
      "94": {
        loc: {
          start: {
            line: 1532,
            column: 38
          },
          end: {
            line: 1532,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1532,
            column: 75
          },
          end: {
            line: 1532,
            column: 86
          }
        }, {
          start: {
            line: 1532,
            column: 89
          },
          end: {
            line: 1532,
            column: 100
          }
        }],
        line: 1532
      },
      "95": {
        loc: {
          start: {
            line: 1572,
            column: 81
          },
          end: {
            line: 1572,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1572,
            column: 90
          },
          end: {
            line: 1572,
            column: 98
          }
        }, {
          start: {
            line: 1572,
            column: 101
          },
          end: {
            line: 1572,
            column: 109
          }
        }],
        line: 1572
      },
      "96": {
        loc: {
          start: {
            line: 1583,
            column: 37
          },
          end: {
            line: 1583,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1583,
            column: 62
          },
          end: {
            line: 1583,
            column: 75
          }
        }, {
          start: {
            line: 1583,
            column: 78
          },
          end: {
            line: 1583,
            column: 93
          }
        }],
        line: 1583
      },
      "97": {
        loc: {
          start: {
            line: 1648,
            column: 12
          },
          end: {
            line: 1650,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1648,
            column: 12
          },
          end: {
            line: 1650,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1648
      },
      "98": {
        loc: {
          start: {
            line: 1652,
            column: 12
          },
          end: {
            line: 1654,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1652,
            column: 12
          },
          end: {
            line: 1654,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1652
      },
      "99": {
        loc: {
          start: {
            line: 1656,
            column: 12
          },
          end: {
            line: 1658,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1656,
            column: 12
          },
          end: {
            line: 1658,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1656
      },
      "100": {
        loc: {
          start: {
            line: 1659,
            column: 32
          },
          end: {
            line: 1661,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1659,
            column: 32
          },
          end: {
            line: 1659,
            column: 69
          }
        }, {
          start: {
            line: 1660,
            column: 16
          },
          end: {
            line: 1660,
            column: 50
          }
        }, {
          start: {
            line: 1661,
            column: 16
          },
          end: {
            line: 1661,
            column: 35
          }
        }],
        line: 1659
      },
      "101": {
        loc: {
          start: {
            line: 1710,
            column: 12
          },
          end: {
            line: 1727,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1710,
            column: 12
          },
          end: {
            line: 1727,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1710
      },
      "102": {
        loc: {
          start: {
            line: 1710,
            column: 16
          },
          end: {
            line: 1710,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1710,
            column: 16
          },
          end: {
            line: 1710,
            column: 41
          }
        }, {
          start: {
            line: 1710,
            column: 45
          },
          end: {
            line: 1710,
            column: 73
          }
        }],
        line: 1710
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0,
      "323": 0,
      "324": 0,
      "325": 0,
      "326": 0,
      "327": 0,
      "328": 0,
      "329": 0,
      "330": 0,
      "331": 0,
      "332": 0,
      "333": 0,
      "334": 0,
      "335": 0,
      "336": 0,
      "337": 0,
      "338": 0,
      "339": 0,
      "340": 0,
      "341": 0,
      "342": 0,
      "343": 0,
      "344": 0,
      "345": 0,
      "346": 0,
      "347": 0,
      "348": 0,
      "349": 0,
      "350": 0,
      "351": 0,
      "352": 0,
      "353": 0,
      "354": 0,
      "355": 0,
      "356": 0,
      "357": 0,
      "358": 0,
      "359": 0,
      "360": 0,
      "361": 0,
      "362": 0,
      "363": 0,
      "364": 0,
      "365": 0,
      "366": 0,
      "367": 0,
      "368": 0,
      "369": 0,
      "370": 0,
      "371": 0,
      "372": 0,
      "373": 0,
      "374": 0,
      "375": 0,
      "376": 0,
      "377": 0,
      "378": 0,
      "379": 0,
      "380": 0,
      "381": 0,
      "382": 0,
      "383": 0,
      "384": 0,
      "385": 0,
      "386": 0,
      "387": 0,
      "388": 0,
      "389": 0,
      "390": 0,
      "391": 0,
      "392": 0,
      "393": 0,
      "394": 0,
      "395": 0,
      "396": 0,
      "397": 0,
      "398": 0,
      "399": 0,
      "400": 0,
      "401": 0,
      "402": 0,
      "403": 0,
      "404": 0,
      "405": 0,
      "406": 0,
      "407": 0,
      "408": 0,
      "409": 0,
      "410": 0,
      "411": 0,
      "412": 0,
      "413": 0,
      "414": 0,
      "415": 0,
      "416": 0,
      "417": 0,
      "418": 0,
      "419": 0,
      "420": 0,
      "421": 0,
      "422": 0,
      "423": 0,
      "424": 0,
      "425": 0,
      "426": 0,
      "427": 0,
      "428": 0,
      "429": 0,
      "430": 0,
      "431": 0,
      "432": 0,
      "433": 0,
      "434": 0,
      "435": 0,
      "436": 0,
      "437": 0,
      "438": 0,
      "439": 0,
      "440": 0,
      "441": 0,
      "442": 0,
      "443": 0,
      "444": 0,
      "445": 0,
      "446": 0,
      "447": 0,
      "448": 0,
      "449": 0,
      "450": 0,
      "451": 0,
      "452": 0,
      "453": 0,
      "454": 0,
      "455": 0,
      "456": 0,
      "457": 0,
      "458": 0,
      "459": 0,
      "460": 0,
      "461": 0,
      "462": 0,
      "463": 0,
      "464": 0,
      "465": 0,
      "466": 0,
      "467": 0,
      "468": 0,
      "469": 0,
      "470": 0,
      "471": 0,
      "472": 0,
      "473": 0,
      "474": 0,
      "475": 0,
      "476": 0,
      "477": 0,
      "478": 0,
      "479": 0,
      "480": 0,
      "481": 0,
      "482": 0,
      "483": 0,
      "484": 0,
      "485": 0,
      "486": 0,
      "487": 0,
      "488": 0,
      "489": 0,
      "490": 0,
      "491": 0,
      "492": 0,
      "493": 0,
      "494": 0,
      "495": 0,
      "496": 0,
      "497": 0,
      "498": 0,
      "499": 0,
      "500": 0,
      "501": 0,
      "502": 0,
      "503": 0,
      "504": 0,
      "505": 0,
      "506": 0,
      "507": 0,
      "508": 0,
      "509": 0,
      "510": 0,
      "511": 0,
      "512": 0,
      "513": 0,
      "514": 0,
      "515": 0,
      "516": 0,
      "517": 0,
      "518": 0,
      "519": 0,
      "520": 0,
      "521": 0,
      "522": 0,
      "523": 0,
      "524": 0,
      "525": 0,
      "526": 0,
      "527": 0,
      "528": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0, 0],
      "60": [0, 0],
      "61": [0],
      "62": [0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0],
      "90": [0, 0],
      "91": [0, 0],
      "92": [0, 0],
      "93": [0, 0],
      "94": [0, 0],
      "95": [0, 0],
      "96": [0, 0],
      "97": [0, 0],
      "98": [0, 0],
      "99": [0, 0],
      "100": [0, 0, 0],
      "101": [0, 0],
      "102": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/bedrock-support-manager.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/bedrock-support-manager.ts"],
      sourcesContent: ["/**\n * Bedrock Support Manager - Core orchestrator for support operations\n *\n * This module implements the central Bedrock Support Manager that coordinates\n * infrastructure validation, meta-monitoring, and implementation support using\n * a hybrid routing approach (direct Bedrock + MCP integration).\n */\n\nimport { BedrockAdapter } from \"./adapters/bedrock-adapter\";\nimport { AiFeatureFlags } from \"./ai-feature-flags\";\nimport { AuditTrailSystem } from \"./audit-trail-system\";\nimport { CircuitBreaker } from \"./circuit-breaker\";\nimport { ComplianceIntegration } from \"./compliance-integration\";\nimport { CostPerformanceOptimizer } from \"./cost-performance-optimizer\";\nimport { DirectBedrockClient } from \"./direct-bedrock-client\";\nimport { EmergencyShutdownManager } from \"./emergency-shutdown-manager\";\nimport { GDPRHybridComplianceValidator } from \"./gdpr-hybrid-compliance-validator\";\nimport { HybridHealthMonitor } from \"./hybrid-health-monitor\";\nimport { ImplementationSupport } from \"./implementation-support\";\nimport { InfrastructureAuditor } from \"./infrastructure-auditor\";\nimport { IntelligentRouter } from \"./intelligent-router\";\nimport { KiroBridge } from \"./kiro-bridge\";\nimport { MCPRouter } from \"./mcp-router\";\nimport { MetaMonitor } from \"./meta-monitor\";\nimport { ProviderAgreementCompliance } from \"./provider-agreement-compliance\";\nimport {\n  RedTeamEvaluationReport,\n  RedTeamEvaluator,\n} from \"./red-team-evaluator\";\nimport { SecurityPostureMonitor } from \"./security-posture-monitor\";\nimport { SystemResourceMonitor } from \"./system-resource-monitor\";\nimport { Provider } from \"./types\";\n\n// Core Data Structures\nexport interface BedrockSupportConfig {\n  enabled: boolean;\n  environments: (\"development\" | \"staging\" | \"production\")[];\n  auditInterval: number;\n  monitoringLevel: \"basic\" | \"detailed\" | \"comprehensive\";\n  autoResolutionEnabled: boolean;\n  notificationChannels: NotificationChannel[];\n}\n\nexport interface NotificationChannel {\n  type: \"email\" | \"slack\" | \"webhook\";\n  endpoint: string;\n  enabled: boolean;\n}\n\nexport interface InfrastructureAuditResult {\n  timestamp: Date;\n  overallHealth: \"healthy\" | \"warning\" | \"critical\";\n  detectedIssues: InfrastructureIssue[];\n  implementationGaps: ImplementationGap[];\n  recommendations: Recommendation[];\n  complianceStatus: ComplianceStatus;\n}\n\nexport interface InfrastructureIssue {\n  id: string;\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n  category: \"performance\" | \"security\" | \"compliance\" | \"availability\";\n  description: string;\n  affectedComponents: string[];\n  detectedAt: Date;\n}\n\nexport interface ImplementationGap {\n  id: string;\n  module: string;\n  description: string;\n  priority: \"low\" | \"medium\" | \"high\" | \"critical\";\n  estimatedEffort: string;\n  dependencies: string[];\n}\n\nexport interface Recommendation {\n  id: string;\n  type: \"immediate\" | \"short_term\" | \"long_term\";\n  description: string;\n  expectedImpact: string;\n  implementationSteps: string[];\n}\n\nexport interface ComplianceStatus {\n  gdprCompliant: boolean;\n  dataResidencyCompliant: boolean;\n  auditTrailComplete: boolean;\n  issues: string[];\n}\n\nexport interface ExecutionMetadata {\n  executionId: string;\n  timestamp: Date;\n  operation: string;\n  duration: number;\n  success: boolean;\n  errorDetails?: string;\n  performanceMetrics: PerformanceMetrics;\n}\n\nexport interface PerformanceMetrics {\n  responseTime: number;\n  memoryUsage: number;\n  cpuUsage: number;\n  networkLatency: number;\n}\n\nexport interface FailureContext {\n  operation: string;\n  errorType: string;\n  errorMessage: string;\n  timestamp: Date;\n  affectedSystems: string[];\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n}\n\nexport interface SupportResult {\n  success: boolean;\n  supportType: \"infrastructure\" | \"execution\" | \"implementation\";\n  actionsPerformed: SupportAction[];\n  diagnostics: DiagnosticData;\n  nextSteps: string[];\n}\n\nexport interface SupportAction {\n  action: string;\n  timestamp: Date;\n  result: \"success\" | \"failure\" | \"partial\";\n  details: string;\n}\n\nexport interface DiagnosticData {\n  systemHealth: Record<string, any>;\n  performanceMetrics: PerformanceMetrics;\n  errorLogs: string[];\n  recommendations: string[];\n}\n\nexport interface BedrockSupportResult {\n  success: boolean;\n  message: string;\n  timestamp: Date;\n  configuration: BedrockSupportConfig;\n  validationResults?: any;\n}\n\n// Security & Compliance Types\nexport interface ComplianceValidationResult {\n  isCompliant: boolean;\n  violations: string[];\n  recommendations: string[];\n  lastChecked: Date;\n}\n\nexport interface SecurityAuditResult {\n  securityScore: number;\n  vulnerabilities: SecurityVulnerability[];\n  recommendations: string[];\n  lastAudit: Date;\n}\n\nexport interface SecurityVulnerability {\n  id: string;\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n  description: string;\n  component: string;\n  remediation: string;\n}\n\n// Cost & Performance Types\nexport interface CostAnalysis {\n  currentSpend: number;\n  projectedSpend: number;\n  budgetUtilization: number;\n  costBreakdown: Record<string, number>;\n  recommendations: string[];\n}\n\nexport interface PerformanceOptimization {\n  currentMetrics: PerformanceMetrics;\n  optimizationOpportunities: OptimizationOpportunity[];\n  expectedImprovements: Record<string, number>;\n}\n\nexport interface OptimizationOpportunity {\n  area: string;\n  description: string;\n  expectedImprovement: string;\n  implementationEffort: \"low\" | \"medium\" | \"high\";\n}\n\n// Template & Prompt Types\nexport interface TemplateValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  templateCount: number;\n}\n\nexport interface SecurityTestResult {\n  passed: boolean;\n  testResults: SecurityTest[];\n  overallScore: number;\n  recommendations: string[];\n}\n\nexport interface SecurityTest {\n  testName: string;\n  passed: boolean;\n  details: string;\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n}\n\n/**\n * Bedrock Support Manager Interface\n *\n * Defines the contract for the Bedrock Support Manager with hybrid routing capabilities\n */\nexport interface IBedrockSupportManager {\n  // Activation Control\n  activate(): Promise<BedrockSupportResult>;\n  deactivate(): Promise<void>;\n  isActive(): boolean;\n\n  // Core Support Operations\n  runInfrastructureAudit(): Promise<InfrastructureAuditResult>;\n  enableMetaMonitoring(): Promise<void>;\n  provideFallbackSupport(context: FailureContext): Promise<SupportResult>;\n\n  // Integration Methods\n  sendDiagnosticsToKiro(diagnostics: DiagnosticData): Promise<void>;\n  receiveKiroExecutionData(executionData: ExecutionMetadata): Promise<void>;\n\n  // Security & Compliance Integration\n  validateComplianceStatus(): Promise<ComplianceValidationResult>;\n  enableCircuitBreaker(): Promise<void>;\n  checkSecurityPosture(): Promise<SecurityAuditResult>;\n\n  // Cost & Performance Management\n  monitorCostThresholds(): Promise<CostAnalysis>;\n  optimizePerformance(): Promise<PerformanceOptimization>;\n  enableEmergencyMode(): Promise<void>;\n\n  // Template & Prompt Management\n  validatePromptTemplates(): Promise<TemplateValidationResult>;\n  enablePIIRedaction(): Promise<void>;\n  runRedTeamEvaluations(): Promise<SecurityTestResult>;\n}\n\n/**\n * Bedrock Support Manager Implementation\n *\n * Central orchestrator for Bedrock support operations with hybrid routing\n */\nexport class BedrockSupportManager implements IBedrockSupportManager {\n  private isActivated: boolean = false;\n  private config: BedrockSupportConfig;\n  private featureFlags: AiFeatureFlags;\n  private bedrockAdapter: BedrockAdapter;\n  private logger: Console;\n  private providerCompliance: ProviderAgreementCompliance;\n  private complianceIntegration: ComplianceIntegration;\n  private gdprHybridValidator: GDPRHybridComplianceValidator;\n\n  // Circuit Breaker Integration for Hybrid Routing\n  private circuitBreaker: CircuitBreaker;\n  private directBedrockClient: DirectBedrockClient;\n  private mcpRouter: MCPRouter;\n  private intelligentRouter: IntelligentRouter;\n  private auditTrail: AuditTrailSystem;\n\n  // Support Operation Components\n  private infrastructureAuditor: InfrastructureAuditor;\n  private metaMonitor: MetaMonitor;\n  private implementationSupport: ImplementationSupport;\n  private hybridHealthMonitor: HybridHealthMonitor;\n  private kiroBridge: KiroBridge;\n  private securityPostureMonitor: SecurityPostureMonitor;\n\n  // Cost & Performance Management (using existing system)\n  private costPerformanceOptimizer: CostPerformanceOptimizer;\n  private emergencyShutdownManager: EmergencyShutdownManager;\n\n  // System Resource Monitoring for 5% overhead requirement\n  private systemResourceMonitor: SystemResourceMonitor;\n\n  constructor(\n    config?: Partial<BedrockSupportConfig>,\n    featureFlags?: AiFeatureFlags,\n    bedrockAdapter?: BedrockAdapter,\n    providerCompliance?: ProviderAgreementCompliance,\n    complianceIntegration?: ComplianceIntegration,\n    gdprHybridValidator?: GDPRHybridComplianceValidator\n  ) {\n    this.config = this.getDefaultConfig(config);\n    this.featureFlags = featureFlags || new AiFeatureFlags();\n    this.bedrockAdapter = bedrockAdapter || new BedrockAdapter();\n    this.logger = console;\n    this.providerCompliance =\n      providerCompliance || new ProviderAgreementCompliance();\n    this.complianceIntegration =\n      complianceIntegration || new ComplianceIntegration();\n    this.gdprHybridValidator =\n      gdprHybridValidator || new GDPRHybridComplianceValidator();\n\n    // Initialize Circuit Breaker with support-specific configuration\n    this.circuitBreaker = new CircuitBreaker({\n      failureThreshold: 3, // More sensitive for support operations\n      recoveryTimeout: 30000, // 30 seconds recovery for support\n      halfOpenMaxCalls: 2, // Conservative half-open testing\n      healthCheckInterval: 15000, // 15 second health checks\n    });\n\n    // Initialize Audit Trail System\n    this.auditTrail = new AuditTrailSystem({\n      complianceMode: \"strict\",\n      enableIntegrityChecking: true,\n      retentionDays: 2555, // 7 years for GDPR compliance\n    });\n\n    // Initialize Direct Bedrock Client for critical operations\n    this.directBedrockClient = new DirectBedrockClient({\n      region: process.env.AWS_REGION || \"eu-central-1\",\n      emergencyTimeout: 5000, // < 5s for emergency operations\n      criticalTimeout: 10000, // < 10s for critical operations\n      enableCircuitBreaker: true,\n      enableHealthMonitoring: true,\n      enableComplianceChecks: true,\n    });\n\n    // Initialize MCP Router for standard operations\n    this.mcpRouter = new MCPRouter({\n      timeout: 30000,\n      maxRetries: 3,\n      healthCheckInterval: 30000,\n    });\n\n    // Initialize Intelligent Router for routing decisions\n    this.intelligentRouter = new IntelligentRouter(\n      this.directBedrockClient,\n      this.mcpRouter,\n      this.featureFlags,\n      this.circuitBreaker,\n      this.gdprHybridValidator,\n      this.auditTrail\n    );\n\n    // Initialize Support Operation Components\n    this.infrastructureAuditor = new InfrastructureAuditor(\n      this.featureFlags,\n      this.auditTrail\n    );\n\n    this.metaMonitor = new MetaMonitor(\n      this.intelligentRouter,\n      this.auditTrail,\n      this.featureFlags\n    );\n\n    this.implementationSupport = new ImplementationSupport(\n      this.intelligentRouter,\n      this.auditTrail,\n      this.featureFlags\n    );\n\n    this.hybridHealthMonitor = new HybridHealthMonitor(\n      this.mcpRouter,\n      this.directBedrockClient,\n      this.featureFlags\n    );\n\n    this.kiroBridge = new KiroBridge(\n      this.mcpRouter,\n      this.auditTrail,\n      this.featureFlags\n    );\n\n    this.securityPostureMonitor = new SecurityPostureMonitor(\n      undefined,\n      this.featureFlags,\n      this.auditTrail,\n      this.circuitBreaker,\n      this.gdprHybridValidator,\n      this.providerCompliance,\n      this.directBedrockClient,\n      this.mcpRouter\n    );\n\n    // Initialize System Resource Monitor for 5% overhead requirement\n    this.systemResourceMonitor = new SystemResourceMonitor(\n      this.featureFlags,\n      this.auditTrail,\n      {\n        enabled: true,\n        monitoringIntervalMs: 10000, // 10 seconds\n        alertCheckIntervalMs: 30000, // 30 seconds\n        thresholds: {\n          cpuWarningPercent: 0.8, // 0.8% CPU warning\n          cpuCriticalPercent: 1.0, // 1% CPU critical (well under 5%)\n          memoryWarningMB: 40, // 40MB memory warning\n          memoryCriticalMB: 50, // 50MB memory critical (reasonable for 5% overhead)\n        },\n      }\n    );\n\n    // Initialize Cost Performance Optimizer (using existing system)\n    const costBudget: CostBudget = {\n      dailyLimit: 10.0, // \u20AC10 per day\n      monthlyLimit: 300.0, // \u20AC300 per month\n      alertThresholds: [50, 75, 90], // Alert at 50%, 75%, 90%\n      hardStop: true, // Enable hard stop on budget exceeded\n    };\n\n    this.costPerformanceOptimizer = new CostPerformanceOptimizer(\n      costBudget,\n      process.env.AWS_REGION || \"eu-central-1\"\n    );\n\n    // Initialize Emergency Shutdown Manager\n    this.emergencyShutdownManager = new EmergencyShutdownManager(\n      {\n        enableAutoShutdown: true,\n        shutdownThresholds: {\n          errorRate: 0.1, // 10% error rate\n          latencyMs: 5000, // 5 seconds\n          costEuroPerHour: 50.0, // \u20AC50 per hour\n          consecutiveFailures: 5,\n        },\n        notificationChannels: {\n          // Configure notification channels as needed\n        },\n        recoveryConfig: {\n          autoRecoveryEnabled: true,\n          recoveryDelayMs: 300000, // 5 minutes\n          healthCheckIntervalMs: 60000, // 1 minute\n          maxRecoveryAttempts: 3,\n        },\n      },\n      this.featureFlags,\n      this.auditTrail,\n      this.circuitBreaker\n    );\n  }\n\n  /**\n   * Activate Bedrock Support Mode\n   */\n  async activate(): Promise<BedrockSupportResult> {\n    try {\n      this.log(\n        \"bedrock-activation\",\n        \"Attempting to activate Bedrock Support Mode\"\n      );\n\n      // Check if feature flag is enabled\n      const supportModeEnabled =\n        await this.featureFlags.isBedrockSupportModeEnabled();\n      if (!supportModeEnabled) {\n        const message = \"Bedrock Support Mode is disabled via feature flag\";\n        this.log(\"bedrock-activation\", message);\n        return {\n          success: false,\n          message,\n          timestamp: new Date(),\n          configuration: this.config,\n        };\n      }\n\n      // Validate feature flag configuration\n      const validation =\n        await this.featureFlags.validateBedrockSupportModeFlags();\n      if (!validation.isValid) {\n        const message = `Feature flag validation failed: ${validation.errors.join(\n          \", \"\n        )}`;\n        this.log(\"bedrock-activation\", message);\n        return {\n          success: false,\n          message,\n          timestamp: new Date(),\n          configuration: this.config,\n          validationResults: validation,\n        };\n      }\n\n      // Check Bedrock adapter availability\n      const bedrockEnabled = await this.featureFlags.isProviderEnabled(\n        \"bedrock\"\n      );\n      if (!bedrockEnabled) {\n        const message = \"Bedrock provider is not enabled\";\n        this.log(\"bedrock-activation\", message);\n        return {\n          success: false,\n          message,\n          timestamp: new Date(),\n          configuration: this.config,\n        };\n      }\n\n      // Perform initial infrastructure audit\n      this.log(\"bedrock-activation\", \"Running initial infrastructure audit\");\n      const auditResult = await this.runInfrastructureAudit();\n\n      if (auditResult.overallHealth === \"critical\") {\n        const message =\n          \"Cannot activate support mode: critical infrastructure issues detected\";\n        this.log(\"bedrock-activation\", message);\n        return {\n          success: false,\n          message,\n          timestamp: new Date(),\n          configuration: this.config,\n        };\n      }\n\n      // Activate support mode\n      this.isActivated = true;\n      this.config.enabled = true;\n\n      // Start system resource monitoring to ensure < 5% overhead\n      await this.systemResourceMonitor.startMonitoring();\n      this.log(\"bedrock-activation\", \"System resource monitoring started\");\n\n      const message = \"Bedrock Support Mode activated successfully\";\n      this.log(\"bedrock-activation\", message);\n\n      return {\n        success: true,\n        message,\n        timestamp: new Date(),\n        configuration: this.config,\n        validationResults: validation,\n      };\n    } catch (error) {\n      const message = `Failed to activate Bedrock Support Mode: ${\n        error instanceof Error ? error.message : \"Unknown error\"\n      }`;\n      this.log(\"bedrock-activation\", message);\n\n      // Ensure we don't leave the system in an inconsistent state\n      this.isActivated = false;\n      this.config.enabled = false;\n\n      return {\n        success: false,\n        message,\n        timestamp: new Date(),\n        configuration: this.config,\n      };\n    }\n  }\n\n  /**\n   * Deactivate Bedrock Support Mode\n   */\n  async deactivate(): Promise<void> {\n    try {\n      this.log(\"bedrock-activation\", \"Deactivating Bedrock Support Mode\");\n\n      // Stop system resource monitoring\n      await this.systemResourceMonitor.stopMonitoring();\n      this.log(\"bedrock-activation\", \"System resource monitoring stopped\");\n\n      this.isActivated = false;\n      this.config.enabled = false;\n\n      // Safely disable feature flags\n      await this.featureFlags.disableBedrockSupportModeSafely();\n\n      this.log(\n        \"bedrock-activation\",\n        \"Bedrock Support Mode deactivated successfully\"\n      );\n    } catch (error) {\n      this.log(\n        \"bedrock-activation\",\n        `Error during deactivation: ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Get support mode status\n   */\n  getSupportModeStatus(): { isActive: boolean; config: BedrockSupportConfig } {\n    return {\n      isActive: this.isActivated,\n      config: this.config,\n    };\n  }\n\n  /**\n   * Check if support mode is active\n   */\n  isActive(): boolean {\n    return this.isActivated && this.config.enabled;\n  }\n\n  /**\n   * Run infrastructure audit with circuit breaker protection\n   */\n  async runInfrastructureAudit(): Promise<InfrastructureAuditResult> {\n    this.log(\n      \"bedrock-activation\",\n      \"Starting infrastructure audit with circuit breaker protection\"\n    );\n\n    // Validate compliance before running audit\n    await this.validateComplianceForSupportOperation(\n      \"infrastructure\",\n      \"direct_bedrock\",\n      \"critical\"\n    );\n\n    try {\n      // Check circuit breaker status before proceeding\n      const circuitBreakerStatus = await this.getCircuitBreakerStatus();\n\n      if (circuitBreakerStatus.overallHealth === \"critical\") {\n        this.log(\n          \"bedrock-activation\",\n          \"Infrastructure audit aborted - both routing paths unavailable\"\n        );\n\n        return {\n          timestamp: new Date(),\n          overallHealth: \"critical\",\n          detectedIssues: [\n            {\n              id: \"circuit-breaker-critical\",\n              severity: \"critical\",\n              category: \"availability\",\n              description:\n                \"Both routing paths (direct Bedrock and MCP) are unavailable due to circuit breaker protection\",\n              affectedComponents: [\"direct-bedrock-client\", \"mcp-router\"],\n              detectedAt: new Date(),\n            },\n          ],\n          implementationGaps: [],\n          recommendations: [\n            {\n              id: \"restore-routing-paths\",\n              type: \"immediate\",\n              description: \"Investigate and restore routing path availability\",\n              expectedImpact: \"Restore Bedrock Support Mode functionality\",\n              implementationSteps: [\n                \"Check direct Bedrock client health\",\n                \"Verify MCP router connectivity\",\n                \"Reset circuit breakers if appropriate\",\n                \"Monitor system recovery\",\n              ],\n            },\n          ],\n          complianceStatus: {\n            gdprCompliant: true,\n            dataResidencyCompliant: true,\n            auditTrailComplete: true,\n            issues: [\n              \"Circuit breaker protection active - limited audit capability\",\n            ],\n          },\n        };\n      }\n\n      // Execute infrastructure audit through intelligent router with circuit breaker protection\n      const auditResult = await this.circuitBreaker.execute(\n        \"bedrock\", // Use bedrock provider for infrastructure audit\n        async () => {\n          return await this.infrastructureAuditor.performSystemHealthCheck();\n        }\n      );\n\n      this.log(\n        \"bedrock-activation\",\n        \"Infrastructure audit completed successfully through circuit breaker\"\n      );\n      // Simulate infrastructure audit - in real implementation this would\n      // check actual system health, database connections, API endpoints, etc.\n      const issues: InfrastructureIssue[] = [];\n      const gaps: ImplementationGap[] = [];\n      const recommendations: Recommendation[] = [];\n\n      // Check feature flag consistency\n      const flagValidation = await this.featureFlags.validateAllFlags();\n      if (!flagValidation.isValid) {\n        // Determine severity based on error content\n        const hasCriticalErrors = flagValidation.errors.some(\n          (error) =>\n            error.toLowerCase().includes(\"critical\") ||\n            error.toLowerCase().includes(\"system error\")\n        );\n\n        issues.push({\n          id: \"feature-flags-inconsistent\",\n          severity: hasCriticalErrors ? \"critical\" : \"medium\",\n          category: \"compliance\",\n          description: \"Feature flag configuration has validation errors\",\n          affectedComponents: [\"feature-flags\"],\n          detectedAt: new Date(),\n        });\n      }\n\n      // Check provider availability\n      const providers: Provider[] = [\"bedrock\", \"google\", \"meta\"];\n      for (const provider of providers) {\n        const enabled = await this.featureFlags.isProviderEnabled(provider);\n        if (!enabled && provider === \"bedrock\") {\n          issues.push({\n            id: `provider-${provider}-disabled`,\n            severity: \"high\",\n            category: \"availability\",\n            description: `Critical provider ${provider} is disabled`,\n            affectedComponents: [`${provider}-adapter`],\n            detectedAt: new Date(),\n          });\n        }\n      }\n\n      // Determine overall health\n      const criticalIssues = issues.filter((i) => i.severity === \"critical\");\n      const highIssues = issues.filter((i) => i.severity === \"high\");\n      const mediumIssues = issues.filter((i) => i.severity === \"medium\");\n\n      let overallHealth: \"healthy\" | \"warning\" | \"critical\";\n      if (criticalIssues.length > 0) {\n        overallHealth = \"critical\";\n      } else if (highIssues.length > 0 || mediumIssues.length > 0) {\n        overallHealth = \"warning\";\n      } else {\n        overallHealth = \"healthy\";\n      }\n\n      // Generate recommendations based on issues\n      if (issues.length > 0) {\n        recommendations.push({\n          id: \"resolve-configuration-issues\",\n          type: \"immediate\",\n          description: \"Resolve feature flag and provider configuration issues\",\n          expectedImpact: \"Improved system stability and reliability\",\n          implementationSteps: [\n            \"Review feature flag validation errors\",\n            \"Enable required providers\",\n            \"Validate configuration consistency\",\n          ],\n        });\n      }\n\n      const result: InfrastructureAuditResult = {\n        timestamp: new Date(),\n        overallHealth,\n        detectedIssues: issues,\n        implementationGaps: gaps,\n        recommendations,\n        complianceStatus: {\n          gdprCompliant: true, // Assume compliant for now\n          dataResidencyCompliant: true,\n          auditTrailComplete: true,\n          issues: [],\n        },\n      };\n\n      this.log(\n        \"bedrock-activation\",\n        `Infrastructure audit completed: ${overallHealth} (${issues.length} issues)`\n      );\n      return result;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : \"Unknown error\";\n\n      this.log(\n        \"bedrock-activation\",\n        `Infrastructure audit failed: ${errorMessage}`\n      );\n\n      // Check if this is a circuit breaker failure\n      const isCircuitBreakerError = errorMessage.includes(\n        \"circuit breaker is OPEN\"\n      );\n\n      if (isCircuitBreakerError) {\n        // Handle circuit breaker failure\n        await this.handleCircuitBreakerFailure(\n          \"direct\", // Assuming direct path failed\n          \"infrastructure_audit\",\n          { error: errorMessage, timestamp: new Date() }\n        );\n\n        // Try fallback through MCP if available\n        try {\n          this.log(\n            \"bedrock-activation\",\n            \"Attempting infrastructure audit through MCP fallback\"\n          );\n\n          const fallbackResult = await this.circuitBreaker.execute(\n            \"google\", // Use google as MCP proxy\n            async () => {\n              return await this.infrastructureAuditor.performSystemHealthCheck();\n            }\n          );\n\n          this.log(\n            \"bedrock-activation\",\n            \"Infrastructure audit completed successfully through MCP fallback\"\n          );\n\n          // Return successful result with fallback note\n          return {\n            ...fallbackResult,\n            detectedIssues: [\n              ...fallbackResult.detectedIssues,\n              {\n                id: \"direct-path-circuit-breaker-open\",\n                severity: \"high\" as const,\n                category: \"availability\" as const,\n                description:\n                  \"Direct Bedrock path unavailable - using MCP fallback\",\n                affectedComponents: [\"direct-bedrock-client\"],\n                detectedAt: new Date(),\n              },\n            ],\n            recommendations: [\n              ...fallbackResult.recommendations,\n              {\n                id: \"restore-direct-path\",\n                type: \"short_term\" as const,\n                description: \"Investigate and restore direct Bedrock path\",\n                expectedImpact: \"Improved performance for critical operations\",\n                implementationSteps: [\n                  \"Check direct Bedrock client health\",\n                  \"Verify AWS connectivity\",\n                  \"Reset circuit breaker if appropriate\",\n                ],\n              },\n            ],\n          };\n        } catch (fallbackError) {\n          this.log(\n            \"bedrock-activation\",\n            `MCP fallback also failed: ${fallbackError}`\n          );\n\n          // Both paths failed - trigger emergency procedures\n          await this.triggerEmergencyProcedures(\"infrastructure_audit\", {\n            primaryError: errorMessage,\n            fallbackError: String(fallbackError),\n          });\n        }\n      }\n\n      // Log audit failure to audit trail\n      await this.auditTrail.logSupportModeEvent(\n        \"infrastructure_audit_failed\",\n        {\n          timestamp: new Date(),\n          error: errorMessage,\n          isCircuitBreakerError,\n          operation: \"infrastructure_audit\",\n        },\n        \"system\"\n      );\n\n      // Return a critical result if audit fails\n      return {\n        timestamp: new Date(),\n        overallHealth: \"critical\",\n        detectedIssues: [\n          {\n            id: \"audit-failure\",\n            severity: \"critical\",\n            category: \"availability\",\n            description: `Infrastructure audit failed: ${errorMessage}`,\n            affectedComponents: [\"audit-system\"],\n            detectedAt: new Date(),\n          },\n        ],\n        implementationGaps: [],\n        recommendations: [\n          {\n            id: \"fix-audit-system\",\n            type: \"immediate\",\n            description: \"Fix infrastructure audit system\",\n            expectedImpact: \"Restore monitoring capabilities\",\n            implementationSteps: [\n              \"Investigate audit failure\",\n              \"Check circuit breaker status\",\n              \"Verify routing path health\",\n              \"Fix underlying issues\",\n              \"Re-run audit\",\n            ],\n          },\n        ],\n        complianceStatus: {\n          gdprCompliant: false,\n          dataResidencyCompliant: false,\n          auditTrailComplete: false,\n          issues: [\"Audit system failure prevents compliance verification\"],\n        },\n      };\n    }\n  }\n\n  /**\n   * Enable meta-monitoring of Kiro execution\n   */\n  async enableMetaMonitoring(): Promise<void> {\n    this.log(\"bedrock-activation\", \"Enabling meta-monitoring\");\n\n    if (!this.isActive()) {\n      throw new Error(\n        \"Cannot enable meta-monitoring: Support mode is not active\"\n      );\n    }\n\n    // Validate compliance before enabling meta-monitoring\n    await this.validateComplianceForSupportOperation(\n      \"meta_monitor\",\n      \"direct_bedrock\",\n      \"critical\"\n    );\n\n    // In a real implementation, this would set up monitoring hooks\n    // For now, we'll just log the activation\n    this.log(\"bedrock-activation\", \"Meta-monitoring enabled successfully\");\n  }\n\n  /**\n   * Provide fallback support for failed operations with circuit breaker protection\n   */\n  async provideFallbackSupport(\n    context: FailureContext\n  ): Promise<SupportResult> {\n    // Handle null or invalid context\n    if (!context || !context.operation) {\n      this.log(\n        \"bedrock-activation\",\n        \"Providing fallback support for: invalid context\"\n      );\n      return {\n        success: false,\n        supportType: \"infrastructure\",\n        actionsPerformed: [\n          {\n            action: \"validate_context\",\n            timestamp: new Date(),\n            result: \"failure\",\n            details: \"Invalid or null failure context provided\",\n          },\n        ],\n        diagnostics: {\n          systemHealth: {},\n          performanceMetrics: {\n            responseTime: 0,\n            memoryUsage: 0,\n            cpuUsage: 0,\n            networkLatency: 0,\n          },\n          errorLogs: [\"Invalid failure context\"],\n          recommendations: [\"Provide valid failure context\"],\n        },\n        nextSteps: [\n          \"Manual intervention required\",\n          \"Contact system administrator\",\n        ],\n      };\n    }\n\n    this.log(\n      \"bedrock-activation\",\n      `Providing fallback support for: ${context.operation} with circuit breaker protection`\n    );\n\n    // Check circuit breaker status before proceeding\n    const circuitBreakerStatus = await this.getCircuitBreakerStatus();\n\n    // Validate compliance before providing fallback support\n    await this.validateComplianceForSupportOperation(\n      \"emergency\",\n      \"direct_bedrock\",\n      \"critical\"\n    );\n\n    try {\n      // Execute fallback support through circuit breaker with intelligent routing\n      const supportResult = await this.executeWithCircuitBreakerProtection(\n        context.operation,\n        \"emergency\",\n        async () => {\n          return await this.performFallbackSupport(context);\n        }\n      );\n\n      // Log successful fallback support\n      await this.auditTrail.logSupportModeEvent(\n        \"fallback_support_provided\",\n        {\n          timestamp: new Date(),\n          operation: context.operation,\n          severity: context.severity,\n          circuitBreakerStatus,\n          supportResult,\n        },\n        \"system\"\n      );\n\n      return supportResult;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Fallback support failed: ${errorMessage}`\n      );\n\n      // Handle circuit breaker failures\n      if (errorMessage.includes(\"circuit breaker is OPEN\")) {\n        await this.handleCircuitBreakerFailure(\n          \"direct\", // Assuming direct path failed first\n          context.operation,\n          { ...context, fallbackError: errorMessage }\n        );\n      }\n\n      // Log failure to audit trail\n      await this.auditTrail.logSupportModeEvent(\n        \"fallback_support_failed\",\n        {\n          timestamp: new Date(),\n          operation: context.operation,\n          error: errorMessage,\n          context,\n        },\n        \"system\"\n      );\n\n      // Return failure result\n      return {\n        success: false,\n        supportType: \"infrastructure\",\n        actionsPerformed: [\n          {\n            action: \"fallback_support_attempt\",\n            timestamp: new Date(),\n            result: \"failure\",\n            details: `Fallback support failed: ${errorMessage}`,\n          },\n        ],\n        diagnostics: {\n          systemHealth: { circuitBreakerStatus },\n          performanceMetrics: {\n            responseTime: 0,\n            memoryUsage: 0,\n            cpuUsage: 0,\n            networkLatency: 0,\n          },\n          errorLogs: [context.errorMessage, errorMessage],\n          recommendations: [\n            \"Check circuit breaker status\",\n            \"Verify routing path health\",\n            \"Consider manual intervention\",\n          ],\n        },\n        nextSteps: [\n          \"Manual intervention required\",\n          \"Check system health\",\n          \"Contact system administrator\",\n        ],\n      };\n    }\n  }\n\n  /**\n   * Execute operation with circuit breaker protection and intelligent routing\n   */\n  private async executeWithCircuitBreakerProtection<T>(\n    operation: string,\n    priority: \"emergency\" | \"critical\" | \"high\" | \"medium\" | \"low\",\n    operationFn: () => Promise<T>\n  ): Promise<T> {\n    try {\n      // Use intelligent router to determine best path\n      if (this.intelligentRouter) {\n        const routingDecision =\n          await this.intelligentRouter.makeRoutingDecision({\n            operation: operation as any,\n            priority: priority as any,\n            context: { timestamp: new Date() },\n          });\n\n        this.log(\n          \"bedrock-activation\",\n          `Routing decision: ${routingDecision.selectedRoute} (${routingDecision.reason})`\n        );\n\n        // Execute through selected route with circuit breaker protection\n        const provider =\n          routingDecision.selectedRoute === \"direct\" ? \"bedrock\" : \"google\";\n\n        return await this.circuitBreaker.execute(provider, operationFn);\n      } else {\n        // Fallback to direct circuit breaker execution\n        return await this.circuitBreaker.execute(\"bedrock\", operationFn);\n      }\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Circuit breaker protected operation failed: ${errorMessage}`\n      );\n\n      throw error;\n    }\n  }\n\n  /**\n   * Perform the actual fallback support logic\n   */\n  private async performFallbackSupport(\n    context: FailureContext\n  ): Promise<SupportResult> {\n    try {\n      const actions: SupportAction[] = [];\n      const diagnostics: DiagnosticData = {\n        systemHealth: {},\n        performanceMetrics: {\n          responseTime: 0,\n          memoryUsage: 0,\n          cpuUsage: 0,\n          networkLatency: 0,\n        },\n        errorLogs: [context.errorMessage],\n        recommendations: [],\n      };\n\n      // Analyze the failure context\n      actions.push({\n        action: \"analyze_failure_context\",\n        timestamp: new Date(),\n        result: \"success\",\n        details: `Analyzed failure: ${context.errorType} in ${context.operation}`,\n      });\n\n      // Determine support type based on failure\n      let supportType: \"infrastructure\" | \"execution\" | \"implementation\";\n      if (context.affectedSystems.includes(\"infrastructure\")) {\n        supportType = \"infrastructure\";\n      } else if (context.operation.includes(\"execution\")) {\n        supportType = \"execution\";\n      } else {\n        supportType = \"implementation\";\n      }\n\n      // Generate recommendations based on failure type\n      const nextSteps: string[] = [];\n      if (context.severity === \"critical\") {\n        nextSteps.push(\"Escalate to on-call team\");\n        nextSteps.push(\"Activate emergency procedures\");\n      } else {\n        nextSteps.push(\"Monitor for recurring issues\");\n        nextSteps.push(\"Schedule remediation during maintenance window\");\n      }\n\n      diagnostics.recommendations = nextSteps;\n\n      return {\n        success: true,\n        supportType,\n        actionsPerformed: actions,\n        diagnostics,\n        nextSteps,\n      };\n    } catch (error) {\n      this.log(\n        \"bedrock-activation\",\n        `Fallback support failed: ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n\n      return {\n        success: false,\n        supportType: \"infrastructure\",\n        actionsPerformed: [\n          {\n            action: \"fallback_support_attempt\",\n            timestamp: new Date(),\n            result: \"failure\",\n            details: `Failed to provide fallback support: ${\n              error instanceof Error ? error.message : \"Unknown error\"\n            }`,\n          },\n        ],\n        diagnostics: {\n          systemHealth: {},\n          performanceMetrics: {\n            responseTime: 0,\n            memoryUsage: 0,\n            cpuUsage: 0,\n            networkLatency: 0,\n          },\n          errorLogs: [context.errorMessage],\n          recommendations: [\"Manual intervention required\"],\n        },\n        nextSteps: [\n          \"Manual intervention required\",\n          \"Contact system administrator\",\n        ],\n      };\n    }\n  }\n\n  /**\n   * Send diagnostics to Kiro\n   */\n  async sendDiagnosticsToKiro(diagnostics: DiagnosticData): Promise<void> {\n    this.log(\"bedrock-activation\", \"Sending diagnostics to Kiro\");\n\n    // In a real implementation, this would send data through MCP or direct communication\n    // For now, we'll just log the action\n    this.log(\n      \"bedrock-activation\",\n      `Diagnostics sent: ${diagnostics.recommendations.length} recommendations`\n    );\n  }\n\n  /**\n   * Receive execution data from Kiro\n   */\n  async receiveKiroExecutionData(\n    executionData: ExecutionMetadata\n  ): Promise<void> {\n    this.log(\n      \"bedrock-activation\",\n      `Received execution data: ${executionData.operation}`\n    );\n\n    // In a real implementation, this would analyze the execution data\n    // and potentially trigger support actions\n    if (!executionData.success) {\n      this.log(\n        \"bedrock-activation\",\n        `Execution failure detected: ${executionData.errorDetails}`\n      );\n    }\n  }\n\n  // Security & Compliance Methods\n  async validateComplianceStatus(): Promise<ComplianceValidationResult> {\n    try {\n      this.log(\n        \"bedrock-activation\",\n        \"Validating compliance status for all providers\"\n      );\n\n      // Get compliance summary from the compliance integration\n      const complianceSummary =\n        await this.complianceIntegration.getComplianceSummary();\n\n      // Check Bedrock-specific compliance\n      const bedrockCompliance =\n        await this.providerCompliance.verifyProviderCompliance(\"bedrock\");\n\n      // Validate GDPR compliance for both routing paths\n      const gdprCompliant = await this.validateGDPRCompliance();\n\n      // Check EU data residency compliance for direct Bedrock access\n      const euDataResidencyCompliant =\n        await this.validateEUDataResidencyCompliance();\n\n      // Aggregate violations and recommendations\n      const violations: string[] = [];\n      const recommendations: string[] = [];\n\n      // Check overall compliance status\n      if (complianceSummary.overallCompliance === \"non_compliant\") {\n        violations.push(\n          \"Overall system compliance is non-compliant across providers\"\n        );\n        recommendations.push(\n          \"Review and update provider agreements to ensure compliance\"\n        );\n      }\n\n      // Check Bedrock-specific compliance\n      if (!bedrockCompliance.compliant) {\n        violations.push(\n          `Bedrock provider compliance issues: ${bedrockCompliance.violations.join(\n            \", \"\n          )}`\n        );\n        recommendations.push(\n          \"Update Bedrock provider agreement and verify compliance status\"\n        );\n      }\n\n      // Check GDPR compliance\n      if (!gdprCompliant) {\n        violations.push(\"GDPR compliance validation failed for hybrid routing\");\n        recommendations.push(\n          \"Ensure PII detection and redaction is enabled for both MCP and direct Bedrock operations\"\n        );\n      }\n\n      // Check EU data residency\n      if (!euDataResidencyCompliant) {\n        violations.push(\n          \"EU data residency compliance failed for direct Bedrock access\"\n        );\n        recommendations.push(\n          \"Configure Bedrock to use EU-Central-1 region for data processing\"\n        );\n      }\n\n      // Check for recent violations\n      if (complianceSummary.recentViolations > 0) {\n        violations.push(\n          `${complianceSummary.recentViolations} recent compliance violations detected`\n        );\n        recommendations.push(\"Review and resolve recent compliance violations\");\n      }\n\n      // Check for pending actions\n      if (complianceSummary.pendingActions > 0) {\n        recommendations.push(\n          `${complianceSummary.pendingActions} provider agreements require attention (expiring soon)`\n        );\n      }\n\n      const isCompliant = violations.length === 0;\n\n      this.log(\"bedrock-activation\", \"Compliance validation completed\", {\n        isCompliant,\n        violationsCount: violations.length,\n        recommendationsCount: recommendations.length,\n        overallCompliance: complianceSummary.overallCompliance,\n        bedrockCompliant: bedrockCompliance.compliant,\n        gdprCompliant,\n        euDataResidencyCompliant,\n      });\n\n      return {\n        isCompliant,\n        violations,\n        recommendations,\n        lastChecked: new Date(),\n      };\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Compliance validation failed: ${errorMessage}`\n      );\n\n      return {\n        isCompliant: false,\n        violations: [`Compliance validation error: ${errorMessage}`],\n        recommendations: [\n          \"Check compliance system configuration and provider agreements\",\n        ],\n        lastChecked: new Date(),\n      };\n    }\n  }\n\n  /**\n   * Validate GDPR compliance for both routing paths\n   */\n  private async validateGDPRCompliance(): Promise<boolean> {\n    try {\n      this.log(\n        \"bedrock-activation\",\n        \"Validating GDPR compliance for both direct Bedrock and MCP routing paths\"\n      );\n\n      // Generate comprehensive hybrid compliance report\n      const complianceReport =\n        await this.gdprHybridValidator.generateHybridComplianceReport();\n\n      // Log compliance status\n      this.log(\n        \"bedrock-activation\",\n        `Hybrid GDPR compliance report generated: ${complianceReport.overallCompliance} (Score: ${complianceReport.complianceScore}%)`\n      );\n\n      // Check if overall compliance is acceptable\n      if (complianceReport.overallCompliance === \"non_compliant\") {\n        this.log(\n          \"bedrock-activation\",\n          `GDPR compliance failed: ${complianceReport.criticalIssues.join(\n            \", \"\n          )}`\n        );\n        return false;\n      }\n\n      // Check individual routing path compliance\n      const directBedrockCompliant =\n        complianceReport.routingPathCompliance.directBedrock.isCompliant;\n      const mcpIntegrationCompliant =\n        complianceReport.routingPathCompliance.mcpIntegration.isCompliant;\n\n      if (!directBedrockCompliant) {\n        this.log(\n          \"bedrock-activation\",\n          `Direct Bedrock routing path GDPR compliance failed: ${complianceReport.routingPathCompliance.directBedrock.violations\n            .map((v) => v.description)\n            .join(\", \")}`\n        );\n      }\n\n      if (!mcpIntegrationCompliant) {\n        this.log(\n          \"bedrock-activation\",\n          `MCP integration routing path GDPR compliance failed: ${complianceReport.routingPathCompliance.mcpIntegration.violations\n            .map((v) => v.description)\n            .join(\", \")}`\n        );\n      }\n\n      // Check cross-path compliance\n      const crossPathCompliant = Object.values(\n        complianceReport.crossPathCompliance\n      ).every(Boolean);\n      if (!crossPathCompliant) {\n        this.log(\n          \"bedrock-activation\",\n          \"Cross-path GDPR compliance issues detected\"\n        );\n      }\n\n      // Log warnings if any\n      const totalWarnings =\n        complianceReport.routingPathCompliance.directBedrock.warnings.length +\n        complianceReport.routingPathCompliance.mcpIntegration.warnings.length;\n\n      if (totalWarnings > 0) {\n        this.log(\n          \"bedrock-activation\",\n          `GDPR compliance warnings detected: ${totalWarnings} warnings across routing paths`\n        );\n      }\n\n      // Return true if both paths are compliant or partially compliant with high score\n      return (\n        complianceReport.overallCompliance === \"compliant\" ||\n        (complianceReport.overallCompliance === \"partial\" &&\n          complianceReport.complianceScore >= 80)\n      );\n    } catch (error) {\n      this.log(\n        \"bedrock-activation\",\n        `GDPR compliance validation error: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Validate EU data residency compliance for direct Bedrock access\n   */\n  private async validateEUDataResidencyCompliance(): Promise<boolean> {\n    try {\n      // Check Bedrock agreement for EU data residency\n      const bedrockAgreement = this.providerCompliance.getAgreement(\"bedrock\");\n      if (!bedrockAgreement || !bedrockAgreement.euDataResidency) {\n        this.log(\n          \"bedrock-activation\",\n          \"Bedrock agreement does not guarantee EU data residency\"\n        );\n        return false;\n      }\n\n      // Validate that Bedrock is configured to use EU regions\n      const euRegionConfigured =\n        await this.validateBedrockEURegionConfiguration();\n      if (!euRegionConfigured) {\n        this.log(\n          \"bedrock-activation\",\n          \"Bedrock not configured to use EU regions for data processing\"\n        );\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      this.log(\n        \"bedrock-activation\",\n        `EU data residency validation error: ${error}`\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Validate PII detection configuration\n   */\n  private async validatePIIDetectionConfiguration(): Promise<boolean> {\n    try {\n      // Check if PII detection feature flags are enabled\n      const piiDetectionEnabled = this.featureFlags.getFlag(\n        \"pii_detection_enabled\",\n        false\n      );\n      const piiRedactionEnabled = this.featureFlags.getFlag(\n        \"pii_redaction_enabled\",\n        false\n      );\n\n      if (!piiDetectionEnabled || !piiRedactionEnabled) {\n        return false;\n      }\n\n      // Additional validation could check if PII detection services are running\n      // This would integrate with existing PII detection infrastructure\n      return true;\n    } catch (error) {\n      this.log(\n        \"bedrock-activation\",\n        `PII detection validation error: ${error}`\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Validate Bedrock EU region configuration\n   */\n  private async validateBedrockEURegionConfiguration(): Promise<boolean> {\n    try {\n      // Check if Bedrock is configured to use EU regions\n      const bedrockRegion =\n        process.env.AWS_BEDROCK_REGION || process.env.AWS_REGION || \"us-east-1\";\n\n      // EU regions for Bedrock\n      const euRegions = [\n        \"eu-central-1\",\n        \"eu-west-1\",\n        \"eu-west-2\",\n        \"eu-west-3\",\n        \"eu-north-1\",\n      ];\n\n      if (!euRegions.includes(bedrockRegion)) {\n        this.log(\n          \"bedrock-activation\",\n          `Bedrock region ${bedrockRegion} is not an EU region`\n        );\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      this.log(\n        \"bedrock-activation\",\n        `Bedrock EU region validation error: ${error}`\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Validate compliance for support operations with hybrid routing\n   */\n  private async validateComplianceForSupportOperation(\n    operationType: HybridRoutingPath[\"operationType\"],\n    routeType: HybridRoutingPath[\"routeType\"] = \"direct_bedrock\",\n    priority: HybridRoutingPath[\"priority\"] = \"medium\"\n  ): Promise<void> {\n    try {\n      this.log(\n        \"bedrock-activation\",\n        `Validating GDPR compliance for support operation: ${operationType} via ${routeType} route`\n      );\n\n      // Create routing path for validation\n      const routingPath: HybridRoutingPath = {\n        routeType,\n        provider: \"bedrock\",\n        operationType,\n        priority,\n      };\n\n      // Generate correlation ID for this validation\n      const correlationId = `support-${operationType}-${routeType}-${Date.now()}`;\n\n      // Validate GDPR compliance before routing\n      const validationResult =\n        await this.gdprHybridValidator.validateBeforeRouting(\n          routingPath,\n          correlationId\n        );\n\n      if (!validationResult.allowed) {\n        throw new Error(validationResult.reason);\n      }\n\n      // Also validate using existing compliance integration for provider agreements\n      const mockRequest = {\n        prompt: `Support operation: ${operationType}`,\n        context: {\n          domain: \"support\",\n          intent: \"infrastructure_support\",\n          routingPath: routeType,\n        },\n      };\n\n      await this.complianceIntegration.enforceCompliance(\n        mockRequest,\n        \"bedrock\",\n        correlationId\n      );\n\n      this.log(\n        \"bedrock-activation\",\n        `GDPR and provider compliance validation passed for support operation: ${operationType} via ${routeType}`\n      );\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Compliance validation failed for support operation: ${operationType} via ${routeType} - ${errorMessage}`\n      );\n\n      throw new Error(\n        `Support operation blocked due to compliance violation: ${errorMessage}`\n      );\n    }\n  }\n\n  /**\n   * Create compliance reporting for support mode\n   */\n  async createComplianceReportForSupportMode(): Promise<{\n    reportId: string;\n    timestamp: Date;\n    supportModeCompliance: {\n      overallCompliant: boolean;\n      bedrockCompliant: boolean;\n      gdprCompliant: boolean;\n      euDataResidencyCompliant: boolean;\n    };\n    hybridRoutingCompliance: {\n      mcpPathCompliant: boolean;\n      directBedrockPathCompliant: boolean;\n      auditTrailComplete: boolean;\n    };\n    violations: string[];\n    recommendations: string[];\n  }> {\n    try {\n      this.log(\n        \"bedrock-activation\",\n        \"Generating compliance report for support mode\"\n      );\n\n      const reportId = `bedrock-support-compliance-${Date.now()}`;\n      const timestamp = new Date();\n\n      // Get overall compliance status\n      const complianceStatus = await this.validateComplianceStatus();\n\n      // Check Bedrock-specific compliance\n      const bedrockCompliance =\n        await this.providerCompliance.verifyProviderCompliance(\"bedrock\");\n\n      // Check GDPR compliance\n      const gdprCompliant = await this.validateGDPRCompliance();\n\n      // Check EU data residency\n      const euDataResidencyCompliant =\n        await this.validateEUDataResidencyCompliance();\n\n      // Get compliance summary for all providers\n      const complianceSummary =\n        await this.complianceIntegration.getComplianceSummary();\n\n      const report = {\n        reportId,\n        timestamp,\n        supportModeCompliance: {\n          overallCompliant: complianceStatus.isCompliant,\n          bedrockCompliant: bedrockCompliance.compliant,\n          gdprCompliant,\n          euDataResidencyCompliant,\n        },\n        hybridRoutingCompliance: {\n          mcpPathCompliant:\n            complianceSummary.overallCompliance !== \"non_compliant\",\n          directBedrockPathCompliant:\n            bedrockCompliance.compliant && gdprCompliant,\n          auditTrailComplete: true, // Assuming audit trail is properly configured\n        },\n        violations: [\n          ...complianceStatus.violations,\n          ...bedrockCompliance.violations,\n        ],\n        recommendations: [\n          ...complianceStatus.recommendations,\n          \"Regularly review provider agreements for compliance updates\",\n          \"Monitor PII detection and redaction effectiveness\",\n          \"Ensure audit trail completeness for all support operations\",\n        ],\n      };\n\n      this.log(\n        \"bedrock-activation\",\n        \"Compliance report generated successfully\",\n        {\n          reportId,\n          overallCompliant: report.supportModeCompliance.overallCompliant,\n          violationsCount: report.violations.length,\n        }\n      );\n\n      return report;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Failed to generate compliance report: ${errorMessage}`\n      );\n\n      throw new Error(`Compliance report generation failed: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Enable Circuit Breaker Protection for Both Routing Paths\n   */\n  async enableCircuitBreaker(): Promise<void> {\n    try {\n      this.log(\n        \"bedrock-activation\",\n        \"Enabling circuit breaker protection for hybrid routing\"\n      );\n\n      // Validate circuit breaker is properly initialized\n      if (!this.circuitBreaker) {\n        throw new Error(\"Circuit breaker not initialized\");\n      }\n\n      // Enable circuit breaker for all providers\n      const providers: Provider[] = [\"bedrock\", \"google\", \"meta\"];\n\n      // Reset any existing circuit breaker states\n      providers.forEach((provider) => {\n        if (this.circuitBreaker.isOpen(provider)) {\n          this.log(\n            \"bedrock-activation\",\n            `Resetting circuit breaker for provider: ${provider}`\n          );\n          this.circuitBreaker.forceClose(provider);\n        }\n      });\n\n      // Configure circuit breaker thresholds for support operations\n      const supportConfig = {\n        failureThreshold: 3, // More sensitive for support operations\n        recoveryTimeout: 30000, // 30 seconds recovery\n        halfOpenMaxCalls: 2, // Conservative testing\n        healthCheckInterval: 15000, // 15 second health checks\n      };\n\n      // Log circuit breaker configuration\n      this.log(\n        \"bedrock-activation\",\n        `Circuit breaker configured with thresholds: ${JSON.stringify(\n          supportConfig\n        )}`\n      );\n\n      // Enable circuit breaker monitoring for direct Bedrock path\n      if (this.directBedrockClient) {\n        this.log(\n          \"bedrock-activation\",\n          \"Circuit breaker enabled for direct Bedrock path\"\n        );\n      }\n\n      // Enable circuit breaker monitoring for MCP path\n      if (this.mcpRouter) {\n        this.log(\n          \"bedrock-activation\",\n          \"Circuit breaker enabled for MCP routing path\"\n        );\n      }\n\n      // Start health monitoring for both paths\n      if (this.hybridHealthMonitor) {\n        await this.hybridHealthMonitor.startHealthMonitoring();\n        this.log(\n          \"bedrock-activation\",\n          \"Health monitoring started for hybrid routing paths\"\n        );\n      }\n\n      // Log audit trail event\n      await this.auditTrail.logSupportModeEvent(\n        \"circuit_breaker_enabled\",\n        {\n          timestamp: new Date(),\n          configuration: supportConfig,\n          enabledPaths: [\"direct_bedrock\", \"mcp_router\"],\n          healthMonitoringActive: true,\n        },\n        \"system\"\n      );\n\n      this.log(\n        \"bedrock-activation\",\n        \"Circuit breaker protection enabled for both routing paths\"\n      );\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Failed to enable circuit breaker: ${errorMessage}`\n      );\n\n      // Log failure to audit trail\n      await this.auditTrail.logSupportModeEvent(\n        \"circuit_breaker_enable_failed\",\n        {\n          timestamp: new Date(),\n          error: errorMessage,\n          context: \"circuit_breaker_activation\",\n        },\n        \"system\"\n      );\n\n      throw new Error(`Circuit breaker activation failed: ${errorMessage}`);\n    }\n  }\n\n  async checkSecurityPosture(): Promise<SecurityAuditResult> {\n    this.log(\n      \"bedrock-activation\",\n      \"Checking security posture for hybrid architecture\"\n    );\n\n    try {\n      // Start security posture monitoring if not already active\n      if (!this.securityPostureMonitor.isMonitoringActive()) {\n        await this.securityPostureMonitor.startMonitoring();\n      }\n\n      // Assess current security posture\n      const postureStatus =\n        await this.securityPostureMonitor.assessSecurityPosture();\n\n      // Convert to SecurityAuditResult format\n      const vulnerabilities: SecurityVulnerability[] = [\n        ...postureStatus.routes.mcp.vulnerabilities,\n        ...postureStatus.routes.directBedrock.vulnerabilities,\n      ];\n\n      const recommendations: string[] = [\n        ...postureStatus.recommendations.immediate.map((r) => r.description),\n        ...postureStatus.recommendations.shortTerm.map((r) => r.description),\n      ];\n\n      const result: SecurityAuditResult = {\n        securityScore: postureStatus.overall.securityScore,\n        vulnerabilities,\n        recommendations,\n        lastAudit: postureStatus.overall.lastAssessment,\n      };\n\n      this.log(\n        \"bedrock-activation\",\n        `Security posture check completed: Score ${result.securityScore}, ${vulnerabilities.length} vulnerabilities`\n      );\n\n      // Log to audit trail\n      await this.auditTrail.logSupportModeEvent(\n        \"security_posture_checked\",\n        {\n          timestamp: new Date(),\n          securityScore: result.securityScore,\n          vulnerabilityCount: vulnerabilities.length,\n          threatLevel: postureStatus.overall.threatLevel,\n          complianceStatus: postureStatus.overall.complianceStatus,\n        },\n        \"system\"\n      );\n\n      return result;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Security posture check failed: ${errorMessage}`\n      );\n\n      // Log failure to audit trail\n      await this.auditTrail.logSupportModeEvent(\n        \"security_posture_check_failed\",\n        {\n          timestamp: new Date(),\n          error: errorMessage,\n        },\n        \"system\"\n      );\n\n      // Return a degraded security result\n      return {\n        securityScore: 0,\n        vulnerabilities: [\n          {\n            id: \"security-check-failure\",\n            severity: \"critical\",\n            description: `Security posture check failed: ${errorMessage}`,\n            component: \"security-posture-monitor\",\n            remediation: \"Investigate and fix security monitoring system\",\n          },\n        ],\n        recommendations: [\n          \"Fix security posture monitoring system\",\n          \"Investigate security check failure\",\n          \"Manual security audit required\",\n        ],\n        lastAudit: new Date(),\n      };\n    }\n  }\n\n  /**\n   * Check Circuit Breaker Status for Both Routing Paths\n   */\n  async getCircuitBreakerStatus(): Promise<{\n    directBedrock: { isOpen: boolean; state: string; metrics: any };\n    mcpRouter: { isOpen: boolean; state: string; metrics: any };\n    overallHealth: \"healthy\" | \"degraded\" | \"critical\";\n  }> {\n    try {\n      // Check direct Bedrock circuit breaker\n      const directBedrockOpen = this.circuitBreaker.isOpen(\"bedrock\");\n      const directBedrockMetrics = this.circuitBreaker.getMetrics(\"bedrock\");\n\n      // Check MCP router circuit breaker (using \"google\" as MCP provider proxy)\n      const mcpRouterOpen = this.circuitBreaker.isOpen(\"google\");\n      const mcpRouterMetrics = this.circuitBreaker.getMetrics(\"google\");\n\n      // Determine overall health\n      let overallHealth: \"healthy\" | \"degraded\" | \"critical\" = \"healthy\";\n\n      if (directBedrockOpen && mcpRouterOpen) {\n        overallHealth = \"critical\"; // Both paths down\n      } else if (directBedrockOpen || mcpRouterOpen) {\n        overallHealth = \"degraded\"; // One path down\n      }\n\n      const status = {\n        directBedrock: {\n          isOpen: directBedrockOpen,\n          state: directBedrockMetrics.state,\n          metrics: directBedrockMetrics,\n        },\n        mcpRouter: {\n          isOpen: mcpRouterOpen,\n          state: mcpRouterMetrics.state,\n          metrics: mcpRouterMetrics,\n        },\n        overallHealth,\n      };\n\n      // Log status check to audit trail\n      await this.auditTrail.logSupportModeEvent(\n        \"circuit_breaker_status_check\",\n        {\n          timestamp: new Date(),\n          status,\n          overallHealth,\n        },\n        \"system\"\n      );\n\n      return status;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Failed to check circuit breaker status: ${errorMessage}`\n      );\n\n      throw new Error(`Circuit breaker status check failed: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Handle Circuit Breaker Failures with Intelligent Fallback\n   */\n  async handleCircuitBreakerFailure(\n    failedPath: \"direct\" | \"mcp\",\n    operation: string,\n    context: any\n  ): Promise<void> {\n    try {\n      this.log(\n        \"bedrock-activation\",\n        `Handling circuit breaker failure for ${failedPath} path during ${operation}`\n      );\n\n      // Log failure event\n      await this.auditTrail.logSupportModeEvent(\n        \"circuit_breaker_failure\",\n        {\n          timestamp: new Date(),\n          failedPath,\n          operation,\n          context,\n        },\n        \"system\"\n      );\n\n      // Attempt intelligent fallback through router\n      if (this.intelligentRouter) {\n        const fallbackRoute = failedPath === \"direct\" ? \"mcp\" : \"direct\";\n\n        this.log(\n          \"bedrock-activation\",\n          `Attempting fallback to ${fallbackRoute} path`\n        );\n\n        // Check if fallback path is available\n        const fallbackProvider =\n          fallbackRoute === \"direct\" ? \"bedrock\" : \"google\";\n        const fallbackAvailable = !this.circuitBreaker.isOpen(fallbackProvider);\n\n        if (fallbackAvailable) {\n          this.log(\n            \"bedrock-activation\",\n            `Fallback to ${fallbackRoute} path is available`\n          );\n        } else {\n          this.log(\n            \"bedrock-activation\",\n            `Fallback to ${fallbackRoute} path is also unavailable - both paths down`\n          );\n\n          // Both paths down - trigger emergency procedures\n          await this.triggerEmergencyProcedures(operation, context);\n        }\n      }\n\n      // Update health monitoring\n      if (this.hybridHealthMonitor) {\n        await this.hybridHealthMonitor.recordFailure(failedPath, operation);\n      }\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Failed to handle circuit breaker failure: ${errorMessage}`\n      );\n\n      throw new Error(\n        `Circuit breaker failure handling failed: ${errorMessage}`\n      );\n    }\n  }\n\n  /**\n   * Trigger Emergency Procedures when Both Paths are Down\n   */\n  private async triggerEmergencyProcedures(\n    operation: string,\n    context: any\n  ): Promise<void> {\n    try {\n      this.log(\n        \"bedrock-activation\",\n        `Triggering emergency procedures for operation: ${operation}`\n      );\n\n      // Log emergency event\n      await this.auditTrail.logSupportModeEvent(\n        \"emergency_procedures_triggered\",\n        {\n          timestamp: new Date(),\n          operation,\n          context,\n          reason: \"both_routing_paths_unavailable\",\n        },\n        \"system\"\n      );\n\n      // Disable support mode temporarily\n      this.isActivated = false;\n\n      // Send emergency notifications\n      await this.sendEmergencyNotifications(operation, context);\n\n      // Force reset circuit breakers after emergency timeout\n      setTimeout(async () => {\n        try {\n          this.log(\n            \"bedrock-activation\",\n            \"Attempting emergency circuit breaker reset\"\n          );\n\n          this.circuitBreaker.resetAll();\n\n          // Re-enable support mode if feature flag is still active\n          const supportModeEnabled =\n            await this.featureFlags.isBedrockSupportModeEnabled();\n          if (supportModeEnabled) {\n            this.isActivated = true;\n            this.log(\n              \"bedrock-activation\",\n              \"Support mode re-enabled after emergency reset\"\n            );\n          }\n        } catch (resetError) {\n          this.log(\n            \"bedrock-activation\",\n            `Emergency reset failed: ${resetError}`\n          );\n        }\n      }, 60000); // 1 minute emergency timeout\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      this.log(\n        \"bedrock-activation\",\n        `Failed to trigger emergency procedures: ${errorMessage}`\n      );\n    }\n  }\n\n  /**\n   * Send Emergency Notifications\n   */\n  private async sendEmergencyNotifications(\n    operation: string,\n    context: any\n  ): Promise<void> {\n    try {\n      // Send notifications through configured channels\n      for (const channel of this.config.notificationChannels) {\n        if (channel.enabled) {\n          const message = `EMERGENCY: Bedrock Support Mode - Both routing paths unavailable during ${operation}`;\n\n          this.log(\n            \"bedrock-activation\",\n            `Sending emergency notification via ${channel.type}: ${message}`\n          );\n\n          // In production, this would send actual notifications\n          // For now, just log the notification\n        }\n      }\n    } catch (error) {\n      this.log(\n        \"bedrock-activation\",\n        `Failed to send emergency notifications: ${error}`\n      );\n    }\n  }\n\n  // Cost & Performance Methods (using existing CostPerformanceOptimizer)\n  async monitorCostThresholds(): Promise<CostAnalysis> {\n    try {\n      // Get cost summary from existing optimizer\n      const costSummary = this.costPerformanceOptimizer.getCostSummary();\n      const performanceMetrics =\n        this.costPerformanceOptimizer.getPerformanceMetrics();\n\n      // Log cost monitoring event\n      await this.auditTrail.logEvent({\n        eventType: \"cost_monitoring\",\n        userId: \"system\",\n        action: \"monitor_cost_thresholds\",\n        resourceType: \"cost_performance\",\n        resourceId: \"bedrock-support-mode\",\n        metadata: {\n          dailySpent: costSummary.daily.spent,\n          monthlySpent: costSummary.monthly.spent,\n          dailyRemaining: costSummary.daily.remaining,\n          monthlyRemaining: costSummary.monthly.remaining,\n          cacheHitRate: performanceMetrics.cacheHitRate,\n        },\n        timestamp: new Date(),\n        ipAddress: \"internal\",\n        userAgent: \"bedrock-support-manager\",\n      });\n\n      // Check for emergency shutdown conditions\n      const costPressure =\n        costSummary.monthly.spent / costSummary.monthly.limit;\n      if (costPressure > 0.95) {\n        await this.emergencyShutdownManager.triggerShutdown(\n          \"all\",\n          \"cost_overrun\",\n          \"manual\",\n          {\n            costEuro: costSummary.monthly.spent,\n            additionalInfo: {\n              dailySpent: costSummary.daily.spent,\n              monthlyLimit: costSummary.monthly.limit,\n            },\n          }\n        );\n      }\n\n      // Return cost analysis in expected format\n      return {\n        currentSpend: costSummary.monthly.spent,\n        projectedSpend: costSummary.monthly.spent * (30 / new Date().getDate()), // Simple projection\n        budgetUtilization: costPressure,\n        costBreakdown: {\n          daily: costSummary.daily.spent,\n          monthly: costSummary.monthly.spent,\n          cacheHitRate: performanceMetrics.cacheHitRate,\n        },\n        recommendations: this.generateCostRecommendations(\n          costSummary,\n          performanceMetrics\n        ),\n      };\n    } catch (error) {\n      this.log(\n        \"bedrock-activation\",\n        `Error monitoring cost thresholds: ${error}`\n      );\n\n      return {\n        currentSpend: 0,\n        projectedSpend: 0,\n        budgetUtilization: 0,\n        costBreakdown: {},\n        recommendations: [\n          \"Error retrieving cost data - please check cost monitoring system\",\n        ],\n      };\n    }\n  }\n\n  /**\n   * Generate cost optimization recommendations\n   */\n  private generateCostRecommendations(\n    costSummary: any,\n    performanceMetrics: any\n  ): string[] {\n    const recommendations: string[] = [];\n\n    // Check cache hit rate\n    if (performanceMetrics.cacheHitRate < 0.5) {\n      recommendations.push(\n        \"Improve cache hit rate to reduce AI provider costs\"\n      );\n    }\n\n    // Check daily budget utilization\n    const dailyUtilization = costSummary.daily.spent / costSummary.daily.limit;\n    if (dailyUtilization > 0.8) {\n      recommendations.push(\n        \"Daily budget utilization high - consider implementing cost optimization strategies\"\n      );\n    }\n\n    // Check monthly budget utilization\n    const monthlyUtilization =\n      costSummary.monthly.spent / costSummary.monthly.limit;\n    if (monthlyUtilization > 0.75) {\n      recommendations.push(\n        \"Monthly budget on track to exceed - review operation priorities\"\n      );\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Get detailed cost and performance status\n   */\n  async getCostPerformanceStatus() {\n    const costSummary = this.costPerformanceOptimizer.getCostSummary();\n    const performanceMetrics =\n      this.costPerformanceOptimizer.getPerformanceMetrics();\n    const shutdownStatus = this.emergencyShutdownManager.getStatus();\n\n    return {\n      cost: costSummary,\n      performance: performanceMetrics,\n      emergencyShutdown: shutdownStatus,\n    };\n  }\n\n  /**\n   * Track cost for a support operation (stub for compatibility)\n   */\n  async trackSupportOperationCost(\n    operationId: string,\n    route: \"direct\" | \"mcp\" | \"fallback\" | \"hybrid\",\n    operationType:\n      | \"emergency\"\n      | \"infrastructure\"\n      | \"meta_monitor\"\n      | \"implementation\"\n      | \"standard\",\n    cost: number,\n    tokensUsed?: { input: number; output: number }\n  ): Promise<void> {\n    await this.costBudgetMonitor.trackOperationCost({\n      operationId,\n      route,\n      operationType,\n      cost,\n      tokensUsed,\n      timestamp: new Date(),\n      metadata: {\n        supportMode: true,\n        bedrockActivation: this.isActivated,\n      },\n    });\n  }\n\n  async optimizePerformance(): Promise<PerformanceOptimization> {\n    return {\n      currentMetrics: {\n        responseTime: 0,\n        memoryUsage: 0,\n        cpuUsage: 0,\n        networkLatency: 0,\n      },\n      optimizationOpportunities: [],\n      expectedImprovements: {},\n    };\n  }\n\n  async enableEmergencyMode(): Promise<void> {\n    this.log(\"bedrock-activation\", \"Emergency mode enabled\");\n  }\n\n  // Template & Prompt Methods (Stubs for now)\n  async validatePromptTemplates(): Promise<TemplateValidationResult> {\n    return {\n      isValid: true,\n      errors: [],\n      warnings: [],\n      templateCount: 0,\n    };\n  }\n\n  async enablePIIRedaction(): Promise<void> {\n    this.log(\"bedrock-activation\", \"PII redaction enabled\");\n  }\n\n  /**\n   * Run comprehensive red team security evaluations for direct Bedrock\n   *\n   * This method executes automated security testing including:\n   * - Prompt injection detection\n   * - Jailbreak attempt detection\n   * - Data exfiltration prevention\n   * - Privilege escalation prevention\n   * - Denial of service protection\n   */\n  async runRedTeamEvaluations(): Promise<SecurityTestResult> {\n    try {\n      this.log(\"bedrock-activation\", \"Starting red team security evaluation\");\n\n      // Check if red team evaluations are enabled\n      if (!this.featureFlags.isEnabled(\"red_team_evaluation_enabled\", true)) {\n        this.log(\"bedrock-activation\", \"Red team evaluations are disabled\");\n        return {\n          passed: true,\n          testResults: [],\n          overallScore: 100,\n          recommendations: [\n            \"Red team evaluations are disabled - enable for security testing\",\n          ],\n        };\n      }\n\n      // Initialize red team evaluator with direct Bedrock client\n      const evaluator = new RedTeamEvaluator(this.directBedrockClient, {\n        enablePromptInjectionTests: true,\n        enableJailbreakTests: true,\n        enableDataExfiltrationTests: true,\n        enablePrivilegeEscalationTests: true,\n        enableDenialOfServiceTests: true,\n        testDepth: \"standard\",\n        maxTestsPerCategory: 5,\n        timeoutMs: 30000,\n      });\n\n      // Run comprehensive evaluation\n      const report: RedTeamEvaluationReport = await evaluator.runEvaluation();\n\n      // Log evaluation results\n      await this.auditTrail.logEvent({\n        eventType: \"red_team_evaluation\",\n        requestId: report.evaluationId,\n        provider: \"bedrock\",\n        complianceStatus:\n          report.vulnerabilitiesDetected > 0 ? \"violation\" : \"compliant\",\n        metadata: {\n          totalTests: report.totalTests,\n          testsPassed: report.testsPassed,\n          testsFailed: report.testsFailed,\n          vulnerabilitiesDetected: report.vulnerabilitiesDetected,\n          securityScore: report.overallSecurityScore,\n          criticalVulnerabilities: report.criticalVulnerabilities.length,\n          highVulnerabilities: report.highVulnerabilities.length,\n          executionTimeMs: report.executionTimeMs,\n        },\n      });\n\n      // Convert red team report to SecurityTestResult format\n      const testResults: SecurityTest[] = [\n        ...report.criticalVulnerabilities.map((v) => ({\n          testName: v.testName,\n          passed: v.passed,\n          details: v.description,\n          severity: v.severity,\n        })),\n        ...report.highVulnerabilities.map((v) => ({\n          testName: v.testName,\n          passed: v.passed,\n          details: v.description,\n          severity: v.severity,\n        })),\n        ...report.mediumVulnerabilities.map((v) => ({\n          testName: v.testName,\n          passed: v.passed,\n          details: v.description,\n          severity: v.severity,\n        })),\n        ...report.lowVulnerabilities.map((v) => ({\n          testName: v.testName,\n          passed: v.passed,\n          details: v.description,\n          severity: v.severity,\n        })),\n      ];\n\n      const passed = report.vulnerabilitiesDetected === 0;\n\n      this.log(\n        \"bedrock-activation\",\n        `Red team evaluation completed: ${passed ? \"PASSED\" : \"FAILED\"} ` +\n          `(Score: ${report.overallSecurityScore}/100, ` +\n          `Vulnerabilities: ${report.vulnerabilitiesDetected})`\n      );\n\n      return {\n        passed,\n        testResults,\n        overallScore: report.overallSecurityScore,\n        recommendations: report.recommendations,\n      };\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : \"Unknown error\";\n\n      this.log(\n        \"bedrock-activation\",\n        `Red team evaluation failed: ${errorMessage}`\n      );\n\n      // Log error to audit trail\n      await this.auditTrail.logEvent({\n        eventType: \"red_team_evaluation\",\n        requestId: `red-team-eval-error-${Date.now()}`,\n        provider: \"bedrock\",\n        complianceStatus: \"violation\",\n        error: {\n          type: \"evaluation_error\",\n          message: errorMessage,\n        },\n      });\n\n      return {\n        passed: false,\n        testResults: [\n          {\n            testName: \"Red Team Evaluation\",\n            passed: false,\n            details: `Evaluation failed: ${errorMessage}`,\n            severity: \"critical\",\n          },\n        ],\n        overallScore: 0,\n        recommendations: [\n          \"Fix red team evaluation system errors\",\n          \"Review direct Bedrock client configuration\",\n          \"Check security testing infrastructure\",\n        ],\n      };\n    }\n  }\n\n  /**\n   * Get default configuration\n   */\n  private getDefaultConfig(\n    overrides?: Partial<BedrockSupportConfig>\n  ): BedrockSupportConfig {\n    return {\n      enabled: false,\n      environments: [\"development\", \"staging\", \"production\"],\n      auditInterval: 1800000, // 30 minutes\n      monitoringLevel: \"basic\",\n      autoResolutionEnabled: false,\n      notificationChannels: [],\n      ...overrides,\n    };\n  }\n\n  /**\n   * Get system resource monitoring status\n   * Ensures support mode overhead stays under 5% of system resources\n   */\n  public getResourceMonitoringStatus(): {\n    isMonitoring: boolean;\n    isWithinThresholds: boolean;\n    currentMetrics: any;\n    summary: any;\n    alerts: any[];\n  } {\n    const status = this.systemResourceMonitor.getStatus();\n    const summary = this.systemResourceMonitor.getResourceSummary();\n    const alerts = this.systemResourceMonitor.getActiveAlerts();\n\n    return {\n      isMonitoring: status.isMonitoring,\n      isWithinThresholds: summary.isWithinThresholds,\n      currentMetrics: summary.current,\n      summary,\n      alerts,\n    };\n  }\n\n  /**\n   * Check if support mode is within the 5% system resource overhead requirement\n   */\n  public async validateResourceOverhead(): Promise<{\n    isCompliant: boolean;\n    cpuUsage: number;\n    memoryUsage: number;\n    thresholds: any;\n    recommendations: string[];\n  }> {\n    const currentMetrics = await this.systemResourceMonitor.getCurrentMetrics();\n    const summary = this.systemResourceMonitor.getResourceSummary();\n    const status = this.systemResourceMonitor.getStatus();\n\n    const recommendations: string[] = [];\n\n    // Check CPU usage against 1% threshold (well under 5%)\n    if (currentMetrics.cpuUsagePercent > 0.8) {\n      recommendations.push(\n        `CPU usage (${currentMetrics.cpuUsagePercent.toFixed(\n          2\n        )}%) approaching threshold. Consider optimizing support operations.`\n      );\n    }\n\n    // Check memory usage against 50MB threshold\n    if (currentMetrics.memoryUsageMB > 40) {\n      recommendations.push(\n        `Memory usage (${currentMetrics.memoryUsageMB.toFixed(\n          2\n        )}MB) approaching threshold. Consider memory optimization.`\n      );\n    }\n\n    // Check if monitoring is active\n    if (!status.isMonitoring) {\n      recommendations.push(\n        \"Resource monitoring is not active. Enable monitoring to track overhead.\"\n      );\n    }\n\n    const isCompliant =\n      currentMetrics.cpuUsagePercent <= 1.0 && // 1% CPU (well under 5%)\n      currentMetrics.memoryUsageMB <= 50 && // 50MB memory (reasonable for 5% overhead)\n      status.isMonitoring;\n\n    await this.auditTrail.logEvent({\n      eventType: \"resource_overhead_validation\",\n      timestamp: new Date(),\n      details: {\n        component: \"BedrockSupportManager\",\n        isCompliant,\n        cpuUsage: currentMetrics.cpuUsagePercent,\n        memoryUsage: currentMetrics.memoryUsageMB,\n        thresholds: status.config.thresholds,\n        recommendations,\n      },\n    });\n\n    return {\n      isCompliant,\n      cpuUsage: currentMetrics.cpuUsagePercent,\n      memoryUsage: currentMetrics.memoryUsageMB,\n      thresholds: status.config.thresholds,\n      recommendations,\n    };\n  }\n\n  /**\n   * Get performance metrics with resource overhead information\n   */\n  public async getPerformanceMetricsWithOverhead(): Promise<\n    PerformanceMetrics & {\n      resourceOverhead: {\n        cpuUsagePercent: number;\n        memoryUsageMB: number;\n        isWithinThresholds: boolean;\n      };\n    }\n  > {\n    const currentMetrics = await this.systemResourceMonitor.getCurrentMetrics();\n    const summary = this.systemResourceMonitor.getResourceSummary();\n\n    return {\n      responseTime: 0, // This would be populated by actual operations\n      memoryUsage: currentMetrics.memoryUsageMB,\n      cpuUsage: currentMetrics.cpuUsagePercent,\n      networkLatency: 0, // This would be populated by actual operations\n      resourceOverhead: {\n        cpuUsagePercent: currentMetrics.cpuUsagePercent,\n        memoryUsageMB: currentMetrics.memoryUsageMB,\n        isWithinThresholds: summary.isWithinThresholds,\n      },\n    };\n  }\n\n  /**\n   * Emergency shutdown if resource usage exceeds critical thresholds\n   */\n  public async emergencyShutdownOnResourceOverhead(): Promise<void> {\n    const validation = await this.validateResourceOverhead();\n\n    // If CPU usage exceeds 2% or memory exceeds 100MB, trigger emergency shutdown\n    if (validation.cpuUsage > 2.0 || validation.memoryUsage > 100) {\n      this.log(\n        \"bedrock-activation\",\n        `Emergency shutdown triggered due to excessive resource usage: CPU ${validation.cpuUsage.toFixed(\n          2\n        )}%, Memory ${validation.memoryUsage.toFixed(2)}MB`\n      );\n\n      await this.auditTrail.logEvent({\n        eventType: \"emergency_shutdown_resource_overhead\",\n        timestamp: new Date(),\n        details: {\n          component: \"BedrockSupportManager\",\n          trigger: \"resource_overhead\",\n          cpuUsage: validation.cpuUsage,\n          memoryUsage: validation.memoryUsage,\n          thresholds: validation.thresholds,\n        },\n      });\n\n      // Deactivate support mode\n      await this.deactivate();\n\n      // Use emergency shutdown manager\n      await this.emergencyShutdownManager.triggerEmergencyShutdown(\n        \"resource_overhead\",\n        `Resource usage exceeded safe limits: CPU ${validation.cpuUsage.toFixed(\n          2\n        )}%, Memory ${validation.memoryUsage.toFixed(2)}MB`\n      );\n    }\n  }\n\n  /**\n   * Log with bedrock-activation prefix\n   */\n  private log(prefix: string, message: string): void {\n    this.logger.log(`[${prefix}] ${message}`);\n  }\n}\n\n/**\n * Factory function to create a Bedrock Support Manager instance\n */\nexport function createBedrockSupportManager(\n  config?: Partial<BedrockSupportConfig>,\n  featureFlags?: AiFeatureFlags,\n  bedrockAdapter?: BedrockAdapter\n): BedrockSupportManager {\n  return new BedrockSupportManager(config, featureFlags, bedrockAdapter);\n}\n\n/**\n * Default export\n */\nexport default BedrockSupportManager;\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "799bab7856347f1513c6a7f31659081205d70baa"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2a6yemoeqm = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2a6yemoeqm();
cov_2a6yemoeqm().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2a6yemoeqm().s[1]++;
exports.BedrockSupportManager = void 0;
/* istanbul ignore next */
cov_2a6yemoeqm().s[2]++;
exports.createBedrockSupportManager = createBedrockSupportManager;
const tslib_1 =
/* istanbul ignore next */
(cov_2a6yemoeqm().s[3]++, require("tslib"));
const bedrock_adapter_1 =
/* istanbul ignore next */
(cov_2a6yemoeqm().s[4]++, require("./adapters/bedrock-adapter"));
const ai_feature_flags_1 =
/* istanbul ignore next */
(cov_2a6yemoeqm().s[5]++, require("./ai-feature-flags"));
const audit_trail_system_1 =
/* istanbul ignore next */
(cov_2a6yemoeqm().s[6]++, require("./audit-trail-system"));
const circuit_breaker_1 =
/* istanbul ignore next */
(cov_2a6yemoeqm().s[7]++, require("./circuit-breaker"));
const compliance_integration_1 =
/* istanbul ignore next */
(cov_2a6yemoeqm().s[8]++, require("./compliance-integration"));
const cost_performance_optimizer_1 =
/* istanbul ignore next */
(cov_2a6yemoeqm().s[9]++, require("./cost-performance-optimizer"));
const direct_bedrock_client_1 =
/* istanbul ignore next */
(cov_2a6yemoeqm().s[10]++, require("./direct-bedrock-client"));
const emergency_shutdown_manager_1 =
/* istanbul ignore next */
(cov_2a6yemoeqm().s[11]++, require("./emergency-shutdown-manager"));
const gdpr_hybrid_compliance_validator_1 =
/* istanbul ignore next */
(cov_2a6yemoeqm().s[12]++, require("./gdpr-hybrid-compliance-validator"));
const hybrid_health_monitor_1 =
/* istanbul ignore next */
(cov_2a6yemoeqm().s[13]++, require("./hybrid-health-monitor"));
const implementation_support_1 =
/* istanbul ignore next */
(cov_2a6yemoeqm().s[14]++, require("./implementation-support"));
const infrastructure_auditor_1 =
/* istanbul ignore next */
(cov_2a6yemoeqm().s[15]++, require("./infrastructure-auditor"));
const intelligent_router_1 =
/* istanbul ignore next */
(cov_2a6yemoeqm().s[16]++, require("./intelligent-router"));
const kiro_bridge_1 =
/* istanbul ignore next */
(cov_2a6yemoeqm().s[17]++, require("./kiro-bridge"));
const mcp_router_1 =
/* istanbul ignore next */
(cov_2a6yemoeqm().s[18]++, require("./mcp-router"));
const meta_monitor_1 =
/* istanbul ignore next */
(cov_2a6yemoeqm().s[19]++, require("./meta-monitor"));
const provider_agreement_compliance_1 =
/* istanbul ignore next */
(cov_2a6yemoeqm().s[20]++, require("./provider-agreement-compliance"));
const red_team_evaluator_1 =
/* istanbul ignore next */
(cov_2a6yemoeqm().s[21]++, require("./red-team-evaluator"));
const security_posture_monitor_1 =
/* istanbul ignore next */
(cov_2a6yemoeqm().s[22]++, require("./security-posture-monitor"));
const system_resource_monitor_1 =
/* istanbul ignore next */
(cov_2a6yemoeqm().s[23]++, require("./system-resource-monitor"));
/**
 * Bedrock Support Manager Implementation
 *
 * Central orchestrator for Bedrock support operations with hybrid routing
 */
class BedrockSupportManager {
  constructor(config, featureFlags, bedrockAdapter, providerCompliance, complianceIntegration, gdprHybridValidator) {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[0]++;
    cov_2a6yemoeqm().s[24]++;
    this.isActivated = false;
    /* istanbul ignore next */
    cov_2a6yemoeqm().s[25]++;
    this.config = this.getDefaultConfig(config);
    /* istanbul ignore next */
    cov_2a6yemoeqm().s[26]++;
    this.featureFlags =
    /* istanbul ignore next */
    (cov_2a6yemoeqm().b[0][0]++, featureFlags) ||
    /* istanbul ignore next */
    (cov_2a6yemoeqm().b[0][1]++, new ai_feature_flags_1.AiFeatureFlags());
    /* istanbul ignore next */
    cov_2a6yemoeqm().s[27]++;
    this.bedrockAdapter =
    /* istanbul ignore next */
    (cov_2a6yemoeqm().b[1][0]++, bedrockAdapter) ||
    /* istanbul ignore next */
    (cov_2a6yemoeqm().b[1][1]++, new bedrock_adapter_1.BedrockAdapter());
    /* istanbul ignore next */
    cov_2a6yemoeqm().s[28]++;
    this.logger = console;
    /* istanbul ignore next */
    cov_2a6yemoeqm().s[29]++;
    this.providerCompliance =
    /* istanbul ignore next */
    (cov_2a6yemoeqm().b[2][0]++, providerCompliance) ||
    /* istanbul ignore next */
    (cov_2a6yemoeqm().b[2][1]++, new provider_agreement_compliance_1.ProviderAgreementCompliance());
    /* istanbul ignore next */
    cov_2a6yemoeqm().s[30]++;
    this.complianceIntegration =
    /* istanbul ignore next */
    (cov_2a6yemoeqm().b[3][0]++, complianceIntegration) ||
    /* istanbul ignore next */
    (cov_2a6yemoeqm().b[3][1]++, new compliance_integration_1.ComplianceIntegration());
    /* istanbul ignore next */
    cov_2a6yemoeqm().s[31]++;
    this.gdprHybridValidator =
    /* istanbul ignore next */
    (cov_2a6yemoeqm().b[4][0]++, gdprHybridValidator) ||
    /* istanbul ignore next */
    (cov_2a6yemoeqm().b[4][1]++, new gdpr_hybrid_compliance_validator_1.GDPRHybridComplianceValidator());
    // Initialize Circuit Breaker with support-specific configuration
    /* istanbul ignore next */
    cov_2a6yemoeqm().s[32]++;
    this.circuitBreaker = new circuit_breaker_1.CircuitBreaker({
      failureThreshold: 3,
      // More sensitive for support operations
      recoveryTimeout: 30000,
      // 30 seconds recovery for support
      halfOpenMaxCalls: 2,
      // Conservative half-open testing
      healthCheckInterval: 15000 // 15 second health checks
    });
    // Initialize Audit Trail System
    /* istanbul ignore next */
    cov_2a6yemoeqm().s[33]++;
    this.auditTrail = new audit_trail_system_1.AuditTrailSystem({
      complianceMode: "strict",
      enableIntegrityChecking: true,
      retentionDays: 2555 // 7 years for GDPR compliance
    });
    // Initialize Direct Bedrock Client for critical operations
    /* istanbul ignore next */
    cov_2a6yemoeqm().s[34]++;
    this.directBedrockClient = new direct_bedrock_client_1.DirectBedrockClient({
      region:
      /* istanbul ignore next */
      (cov_2a6yemoeqm().b[5][0]++, process.env.AWS_REGION) ||
      /* istanbul ignore next */
      (cov_2a6yemoeqm().b[5][1]++, "eu-central-1"),
      emergencyTimeout: 5000,
      // < 5s for emergency operations
      criticalTimeout: 10000,
      // < 10s for critical operations
      enableCircuitBreaker: true,
      enableHealthMonitoring: true,
      enableComplianceChecks: true
    });
    // Initialize MCP Router for standard operations
    /* istanbul ignore next */
    cov_2a6yemoeqm().s[35]++;
    this.mcpRouter = new mcp_router_1.MCPRouter({
      timeout: 30000,
      maxRetries: 3,
      healthCheckInterval: 30000
    });
    // Initialize Intelligent Router for routing decisions
    /* istanbul ignore next */
    cov_2a6yemoeqm().s[36]++;
    this.intelligentRouter = new intelligent_router_1.IntelligentRouter(this.directBedrockClient, this.mcpRouter, this.featureFlags, this.circuitBreaker, this.gdprHybridValidator, this.auditTrail);
    // Initialize Support Operation Components
    /* istanbul ignore next */
    cov_2a6yemoeqm().s[37]++;
    this.infrastructureAuditor = new infrastructure_auditor_1.InfrastructureAuditor(this.featureFlags, this.auditTrail);
    /* istanbul ignore next */
    cov_2a6yemoeqm().s[38]++;
    this.metaMonitor = new meta_monitor_1.MetaMonitor(this.intelligentRouter, this.auditTrail, this.featureFlags);
    /* istanbul ignore next */
    cov_2a6yemoeqm().s[39]++;
    this.implementationSupport = new implementation_support_1.ImplementationSupport(this.intelligentRouter, this.auditTrail, this.featureFlags);
    /* istanbul ignore next */
    cov_2a6yemoeqm().s[40]++;
    this.hybridHealthMonitor = new hybrid_health_monitor_1.HybridHealthMonitor(this.mcpRouter, this.directBedrockClient, this.featureFlags);
    /* istanbul ignore next */
    cov_2a6yemoeqm().s[41]++;
    this.kiroBridge = new kiro_bridge_1.KiroBridge(this.mcpRouter, this.auditTrail, this.featureFlags);
    /* istanbul ignore next */
    cov_2a6yemoeqm().s[42]++;
    this.securityPostureMonitor = new security_posture_monitor_1.SecurityPostureMonitor(undefined, this.featureFlags, this.auditTrail, this.circuitBreaker, this.gdprHybridValidator, this.providerCompliance, this.directBedrockClient, this.mcpRouter);
    // Initialize System Resource Monitor for 5% overhead requirement
    /* istanbul ignore next */
    cov_2a6yemoeqm().s[43]++;
    this.systemResourceMonitor = new system_resource_monitor_1.SystemResourceMonitor(this.featureFlags, this.auditTrail, {
      enabled: true,
      monitoringIntervalMs: 10000,
      // 10 seconds
      alertCheckIntervalMs: 30000,
      // 30 seconds
      thresholds: {
        cpuWarningPercent: 0.8,
        // 0.8% CPU warning
        cpuCriticalPercent: 1.0,
        // 1% CPU critical (well under 5%)
        memoryWarningMB: 40,
        // 40MB memory warning
        memoryCriticalMB: 50 // 50MB memory critical (reasonable for 5% overhead)
      }
    });
    // Initialize Cost Performance Optimizer (using existing system)
    const costBudget =
    /* istanbul ignore next */
    (cov_2a6yemoeqm().s[44]++, {
      dailyLimit: 10.0,
      // €10 per day
      monthlyLimit: 300.0,
      // €300 per month
      alertThresholds: [50, 75, 90],
      // Alert at 50%, 75%, 90%
      hardStop: true // Enable hard stop on budget exceeded
    });
    /* istanbul ignore next */
    cov_2a6yemoeqm().s[45]++;
    this.costPerformanceOptimizer = new cost_performance_optimizer_1.CostPerformanceOptimizer(costBudget,
    /* istanbul ignore next */
    (cov_2a6yemoeqm().b[6][0]++, process.env.AWS_REGION) ||
    /* istanbul ignore next */
    (cov_2a6yemoeqm().b[6][1]++, "eu-central-1"));
    // Initialize Emergency Shutdown Manager
    /* istanbul ignore next */
    cov_2a6yemoeqm().s[46]++;
    this.emergencyShutdownManager = new emergency_shutdown_manager_1.EmergencyShutdownManager({
      enableAutoShutdown: true,
      shutdownThresholds: {
        errorRate: 0.1,
        // 10% error rate
        latencyMs: 5000,
        // 5 seconds
        costEuroPerHour: 50.0,
        // €50 per hour
        consecutiveFailures: 5
      },
      notificationChannels: {
        // Configure notification channels as needed
      },
      recoveryConfig: {
        autoRecoveryEnabled: true,
        recoveryDelayMs: 300000,
        // 5 minutes
        healthCheckIntervalMs: 60000,
        // 1 minute
        maxRecoveryAttempts: 3
      }
    }, this.featureFlags, this.auditTrail, this.circuitBreaker);
  }
  /**
   * Activate Bedrock Support Mode
   */
  activate() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[1]++;
    cov_2a6yemoeqm().s[47]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[2]++;
      cov_2a6yemoeqm().s[48]++;
      try {
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[49]++;
        this.log("bedrock-activation", "Attempting to activate Bedrock Support Mode");
        // Check if feature flag is enabled
        const supportModeEnabled =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[50]++, yield this.featureFlags.isBedrockSupportModeEnabled());
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[51]++;
        if (!supportModeEnabled) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[7][0]++;
          const message =
          /* istanbul ignore next */
          (cov_2a6yemoeqm().s[52]++, "Bedrock Support Mode is disabled via feature flag");
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[53]++;
          this.log("bedrock-activation", message);
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[54]++;
          return {
            success: false,
            message,
            timestamp: new Date(),
            configuration: this.config
          };
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[7][1]++;
        }
        // Validate feature flag configuration
        const validation =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[55]++, yield this.featureFlags.validateBedrockSupportModeFlags());
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[56]++;
        if (!validation.isValid) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[8][0]++;
          const message =
          /* istanbul ignore next */
          (cov_2a6yemoeqm().s[57]++, `Feature flag validation failed: ${validation.errors.join(", ")}`);
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[58]++;
          this.log("bedrock-activation", message);
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[59]++;
          return {
            success: false,
            message,
            timestamp: new Date(),
            configuration: this.config,
            validationResults: validation
          };
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[8][1]++;
        }
        // Check Bedrock adapter availability
        const bedrockEnabled =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[60]++, yield this.featureFlags.isProviderEnabled("bedrock"));
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[61]++;
        if (!bedrockEnabled) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[9][0]++;
          const message =
          /* istanbul ignore next */
          (cov_2a6yemoeqm().s[62]++, "Bedrock provider is not enabled");
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[63]++;
          this.log("bedrock-activation", message);
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[64]++;
          return {
            success: false,
            message,
            timestamp: new Date(),
            configuration: this.config
          };
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[9][1]++;
        }
        // Perform initial infrastructure audit
        cov_2a6yemoeqm().s[65]++;
        this.log("bedrock-activation", "Running initial infrastructure audit");
        const auditResult =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[66]++, yield this.runInfrastructureAudit());
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[67]++;
        if (auditResult.overallHealth === "critical") {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[10][0]++;
          const message =
          /* istanbul ignore next */
          (cov_2a6yemoeqm().s[68]++, "Cannot activate support mode: critical infrastructure issues detected");
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[69]++;
          this.log("bedrock-activation", message);
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[70]++;
          return {
            success: false,
            message,
            timestamp: new Date(),
            configuration: this.config
          };
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[10][1]++;
        }
        // Activate support mode
        cov_2a6yemoeqm().s[71]++;
        this.isActivated = true;
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[72]++;
        this.config.enabled = true;
        // Start system resource monitoring to ensure < 5% overhead
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[73]++;
        yield this.systemResourceMonitor.startMonitoring();
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[74]++;
        this.log("bedrock-activation", "System resource monitoring started");
        const message =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[75]++, "Bedrock Support Mode activated successfully");
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[76]++;
        this.log("bedrock-activation", message);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[77]++;
        return {
          success: true,
          message,
          timestamp: new Date(),
          configuration: this.config,
          validationResults: validation
        };
      } catch (error) {
        const message =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[78]++, `Failed to activate Bedrock Support Mode: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[11][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[11][1]++, "Unknown error")}`);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[79]++;
        this.log("bedrock-activation", message);
        // Ensure we don't leave the system in an inconsistent state
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[80]++;
        this.isActivated = false;
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[81]++;
        this.config.enabled = false;
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[82]++;
        return {
          success: false,
          message,
          timestamp: new Date(),
          configuration: this.config
        };
      }
    });
  }
  /**
   * Deactivate Bedrock Support Mode
   */
  deactivate() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[3]++;
    cov_2a6yemoeqm().s[83]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[4]++;
      cov_2a6yemoeqm().s[84]++;
      try {
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[85]++;
        this.log("bedrock-activation", "Deactivating Bedrock Support Mode");
        // Stop system resource monitoring
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[86]++;
        yield this.systemResourceMonitor.stopMonitoring();
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[87]++;
        this.log("bedrock-activation", "System resource monitoring stopped");
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[88]++;
        this.isActivated = false;
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[89]++;
        this.config.enabled = false;
        // Safely disable feature flags
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[90]++;
        yield this.featureFlags.disableBedrockSupportModeSafely();
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[91]++;
        this.log("bedrock-activation", "Bedrock Support Mode deactivated successfully");
      } catch (error) {
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[92]++;
        this.log("bedrock-activation", `Error during deactivation: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[12][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[12][1]++, "Unknown error")}`);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[93]++;
        throw error;
      }
    });
  }
  /**
   * Get support mode status
   */
  getSupportModeStatus() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[5]++;
    cov_2a6yemoeqm().s[94]++;
    return {
      isActive: this.isActivated,
      config: this.config
    };
  }
  /**
   * Check if support mode is active
   */
  isActive() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[6]++;
    cov_2a6yemoeqm().s[95]++;
    return /* istanbul ignore next */(cov_2a6yemoeqm().b[13][0]++, this.isActivated) &&
    /* istanbul ignore next */
    (cov_2a6yemoeqm().b[13][1]++, this.config.enabled);
  }
  /**
   * Run infrastructure audit with circuit breaker protection
   */
  runInfrastructureAudit() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[7]++;
    cov_2a6yemoeqm().s[96]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[8]++;
      cov_2a6yemoeqm().s[97]++;
      this.log("bedrock-activation", "Starting infrastructure audit with circuit breaker protection");
      // Validate compliance before running audit
      /* istanbul ignore next */
      cov_2a6yemoeqm().s[98]++;
      yield this.validateComplianceForSupportOperation("infrastructure", "direct_bedrock", "critical");
      /* istanbul ignore next */
      cov_2a6yemoeqm().s[99]++;
      try {
        // Check circuit breaker status before proceeding
        const circuitBreakerStatus =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[100]++, yield this.getCircuitBreakerStatus());
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[101]++;
        if (circuitBreakerStatus.overallHealth === "critical") {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[14][0]++;
          cov_2a6yemoeqm().s[102]++;
          this.log("bedrock-activation", "Infrastructure audit aborted - both routing paths unavailable");
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[103]++;
          return {
            timestamp: new Date(),
            overallHealth: "critical",
            detectedIssues: [{
              id: "circuit-breaker-critical",
              severity: "critical",
              category: "availability",
              description: "Both routing paths (direct Bedrock and MCP) are unavailable due to circuit breaker protection",
              affectedComponents: ["direct-bedrock-client", "mcp-router"],
              detectedAt: new Date()
            }],
            implementationGaps: [],
            recommendations: [{
              id: "restore-routing-paths",
              type: "immediate",
              description: "Investigate and restore routing path availability",
              expectedImpact: "Restore Bedrock Support Mode functionality",
              implementationSteps: ["Check direct Bedrock client health", "Verify MCP router connectivity", "Reset circuit breakers if appropriate", "Monitor system recovery"]
            }],
            complianceStatus: {
              gdprCompliant: true,
              dataResidencyCompliant: true,
              auditTrailComplete: true,
              issues: ["Circuit breaker protection active - limited audit capability"]
            }
          };
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[14][1]++;
        }
        // Execute infrastructure audit through intelligent router with circuit breaker protection
        const auditResult =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[104]++, yield this.circuitBreaker.execute("bedrock",
        // Use bedrock provider for infrastructure audit
        () => {
          /* istanbul ignore next */
          cov_2a6yemoeqm().f[9]++;
          cov_2a6yemoeqm().s[105]++;
          return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /* istanbul ignore next */
            cov_2a6yemoeqm().f[10]++;
            cov_2a6yemoeqm().s[106]++;
            return yield this.infrastructureAuditor.performSystemHealthCheck();
          });
        }));
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[107]++;
        this.log("bedrock-activation", "Infrastructure audit completed successfully through circuit breaker");
        // Simulate infrastructure audit - in real implementation this would
        // check actual system health, database connections, API endpoints, etc.
        const issues =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[108]++, []);
        const gaps =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[109]++, []);
        const recommendations =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[110]++, []);
        // Check feature flag consistency
        const flagValidation =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[111]++, yield this.featureFlags.validateAllFlags());
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[112]++;
        if (!flagValidation.isValid) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[15][0]++;
          // Determine severity based on error content
          const hasCriticalErrors =
          /* istanbul ignore next */
          (cov_2a6yemoeqm().s[113]++, flagValidation.errors.some(error => {
            /* istanbul ignore next */
            cov_2a6yemoeqm().f[11]++;
            cov_2a6yemoeqm().s[114]++;
            return /* istanbul ignore next */(cov_2a6yemoeqm().b[16][0]++, error.toLowerCase().includes("critical")) ||
            /* istanbul ignore next */
            (cov_2a6yemoeqm().b[16][1]++, error.toLowerCase().includes("system error"));
          }));
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[115]++;
          issues.push({
            id: "feature-flags-inconsistent",
            severity: hasCriticalErrors ?
            /* istanbul ignore next */
            (cov_2a6yemoeqm().b[17][0]++, "critical") :
            /* istanbul ignore next */
            (cov_2a6yemoeqm().b[17][1]++, "medium"),
            category: "compliance",
            description: "Feature flag configuration has validation errors",
            affectedComponents: ["feature-flags"],
            detectedAt: new Date()
          });
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[15][1]++;
        }
        // Check provider availability
        const providers =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[116]++, ["bedrock", "google", "meta"]);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[117]++;
        for (const provider of providers) {
          const enabled =
          /* istanbul ignore next */
          (cov_2a6yemoeqm().s[118]++, yield this.featureFlags.isProviderEnabled(provider));
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[119]++;
          if (
          /* istanbul ignore next */
          (cov_2a6yemoeqm().b[19][0]++, !enabled) &&
          /* istanbul ignore next */
          (cov_2a6yemoeqm().b[19][1]++, provider === "bedrock")) {
            /* istanbul ignore next */
            cov_2a6yemoeqm().b[18][0]++;
            cov_2a6yemoeqm().s[120]++;
            issues.push({
              id: `provider-${provider}-disabled`,
              severity: "high",
              category: "availability",
              description: `Critical provider ${provider} is disabled`,
              affectedComponents: [`${provider}-adapter`],
              detectedAt: new Date()
            });
          } else
          /* istanbul ignore next */
          {
            cov_2a6yemoeqm().b[18][1]++;
          }
        }
        // Determine overall health
        const criticalIssues =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[121]++, issues.filter(i => {
          /* istanbul ignore next */
          cov_2a6yemoeqm().f[12]++;
          cov_2a6yemoeqm().s[122]++;
          return i.severity === "critical";
        }));
        const highIssues =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[123]++, issues.filter(i => {
          /* istanbul ignore next */
          cov_2a6yemoeqm().f[13]++;
          cov_2a6yemoeqm().s[124]++;
          return i.severity === "high";
        }));
        const mediumIssues =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[125]++, issues.filter(i => {
          /* istanbul ignore next */
          cov_2a6yemoeqm().f[14]++;
          cov_2a6yemoeqm().s[126]++;
          return i.severity === "medium";
        }));
        let overallHealth;
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[127]++;
        if (criticalIssues.length > 0) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[20][0]++;
          cov_2a6yemoeqm().s[128]++;
          overallHealth = "critical";
        } else {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[20][1]++;
          cov_2a6yemoeqm().s[129]++;
          if (
          /* istanbul ignore next */
          (cov_2a6yemoeqm().b[22][0]++, highIssues.length > 0) ||
          /* istanbul ignore next */
          (cov_2a6yemoeqm().b[22][1]++, mediumIssues.length > 0)) {
            /* istanbul ignore next */
            cov_2a6yemoeqm().b[21][0]++;
            cov_2a6yemoeqm().s[130]++;
            overallHealth = "warning";
          } else {
            /* istanbul ignore next */
            cov_2a6yemoeqm().b[21][1]++;
            cov_2a6yemoeqm().s[131]++;
            overallHealth = "healthy";
          }
        }
        // Generate recommendations based on issues
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[132]++;
        if (issues.length > 0) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[23][0]++;
          cov_2a6yemoeqm().s[133]++;
          recommendations.push({
            id: "resolve-configuration-issues",
            type: "immediate",
            description: "Resolve feature flag and provider configuration issues",
            expectedImpact: "Improved system stability and reliability",
            implementationSteps: ["Review feature flag validation errors", "Enable required providers", "Validate configuration consistency"]
          });
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[23][1]++;
        }
        const result =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[134]++, {
          timestamp: new Date(),
          overallHealth,
          detectedIssues: issues,
          implementationGaps: gaps,
          recommendations,
          complianceStatus: {
            gdprCompliant: true,
            // Assume compliant for now
            dataResidencyCompliant: true,
            auditTrailComplete: true,
            issues: []
          }
        });
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[135]++;
        this.log("bedrock-activation", `Infrastructure audit completed: ${overallHealth} (${issues.length} issues)`);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[136]++;
        return result;
      } catch (error) {
        const errorMessage =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[137]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[24][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[24][1]++, "Unknown error"));
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[138]++;
        this.log("bedrock-activation", `Infrastructure audit failed: ${errorMessage}`);
        // Check if this is a circuit breaker failure
        const isCircuitBreakerError =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[139]++, errorMessage.includes("circuit breaker is OPEN"));
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[140]++;
        if (isCircuitBreakerError) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[25][0]++;
          cov_2a6yemoeqm().s[141]++;
          // Handle circuit breaker failure
          yield this.handleCircuitBreakerFailure("direct",
          // Assuming direct path failed
          "infrastructure_audit", {
            error: errorMessage,
            timestamp: new Date()
          });
          // Try fallback through MCP if available
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[142]++;
          try {
            /* istanbul ignore next */
            cov_2a6yemoeqm().s[143]++;
            this.log("bedrock-activation", "Attempting infrastructure audit through MCP fallback");
            const fallbackResult =
            /* istanbul ignore next */
            (cov_2a6yemoeqm().s[144]++, yield this.circuitBreaker.execute("google",
            // Use google as MCP proxy
            () => {
              /* istanbul ignore next */
              cov_2a6yemoeqm().f[15]++;
              cov_2a6yemoeqm().s[145]++;
              return tslib_1.__awaiter(this, void 0, void 0, function* () {
                /* istanbul ignore next */
                cov_2a6yemoeqm().f[16]++;
                cov_2a6yemoeqm().s[146]++;
                return yield this.infrastructureAuditor.performSystemHealthCheck();
              });
            }));
            /* istanbul ignore next */
            cov_2a6yemoeqm().s[147]++;
            this.log("bedrock-activation", "Infrastructure audit completed successfully through MCP fallback");
            // Return successful result with fallback note
            /* istanbul ignore next */
            cov_2a6yemoeqm().s[148]++;
            return Object.assign(Object.assign({}, fallbackResult), {
              detectedIssues: [...fallbackResult.detectedIssues, {
                id: "direct-path-circuit-breaker-open",
                severity: "high",
                category: "availability",
                description: "Direct Bedrock path unavailable - using MCP fallback",
                affectedComponents: ["direct-bedrock-client"],
                detectedAt: new Date()
              }],
              recommendations: [...fallbackResult.recommendations, {
                id: "restore-direct-path",
                type: "short_term",
                description: "Investigate and restore direct Bedrock path",
                expectedImpact: "Improved performance for critical operations",
                implementationSteps: ["Check direct Bedrock client health", "Verify AWS connectivity", "Reset circuit breaker if appropriate"]
              }]
            });
          } catch (fallbackError) {
            /* istanbul ignore next */
            cov_2a6yemoeqm().s[149]++;
            this.log("bedrock-activation", `MCP fallback also failed: ${fallbackError}`);
            // Both paths failed - trigger emergency procedures
            /* istanbul ignore next */
            cov_2a6yemoeqm().s[150]++;
            yield this.triggerEmergencyProcedures("infrastructure_audit", {
              primaryError: errorMessage,
              fallbackError: String(fallbackError)
            });
          }
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[25][1]++;
        }
        // Log audit failure to audit trail
        cov_2a6yemoeqm().s[151]++;
        yield this.auditTrail.logSupportModeEvent("infrastructure_audit_failed", {
          timestamp: new Date(),
          error: errorMessage,
          isCircuitBreakerError,
          operation: "infrastructure_audit"
        }, "system");
        // Return a critical result if audit fails
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[152]++;
        return {
          timestamp: new Date(),
          overallHealth: "critical",
          detectedIssues: [{
            id: "audit-failure",
            severity: "critical",
            category: "availability",
            description: `Infrastructure audit failed: ${errorMessage}`,
            affectedComponents: ["audit-system"],
            detectedAt: new Date()
          }],
          implementationGaps: [],
          recommendations: [{
            id: "fix-audit-system",
            type: "immediate",
            description: "Fix infrastructure audit system",
            expectedImpact: "Restore monitoring capabilities",
            implementationSteps: ["Investigate audit failure", "Check circuit breaker status", "Verify routing path health", "Fix underlying issues", "Re-run audit"]
          }],
          complianceStatus: {
            gdprCompliant: false,
            dataResidencyCompliant: false,
            auditTrailComplete: false,
            issues: ["Audit system failure prevents compliance verification"]
          }
        };
      }
    });
  }
  /**
   * Enable meta-monitoring of Kiro execution
   */
  enableMetaMonitoring() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[17]++;
    cov_2a6yemoeqm().s[153]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[18]++;
      cov_2a6yemoeqm().s[154]++;
      this.log("bedrock-activation", "Enabling meta-monitoring");
      /* istanbul ignore next */
      cov_2a6yemoeqm().s[155]++;
      if (!this.isActive()) {
        /* istanbul ignore next */
        cov_2a6yemoeqm().b[26][0]++;
        cov_2a6yemoeqm().s[156]++;
        throw new Error("Cannot enable meta-monitoring: Support mode is not active");
      } else
      /* istanbul ignore next */
      {
        cov_2a6yemoeqm().b[26][1]++;
      }
      // Validate compliance before enabling meta-monitoring
      cov_2a6yemoeqm().s[157]++;
      yield this.validateComplianceForSupportOperation("meta_monitor", "direct_bedrock", "critical");
      // In a real implementation, this would set up monitoring hooks
      // For now, we'll just log the activation
      /* istanbul ignore next */
      cov_2a6yemoeqm().s[158]++;
      this.log("bedrock-activation", "Meta-monitoring enabled successfully");
    });
  }
  /**
   * Provide fallback support for failed operations with circuit breaker protection
   */
  provideFallbackSupport(context) {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[19]++;
    cov_2a6yemoeqm().s[159]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[20]++;
      cov_2a6yemoeqm().s[160]++;
      // Handle null or invalid context
      if (
      /* istanbul ignore next */
      (cov_2a6yemoeqm().b[28][0]++, !context) ||
      /* istanbul ignore next */
      (cov_2a6yemoeqm().b[28][1]++, !context.operation)) {
        /* istanbul ignore next */
        cov_2a6yemoeqm().b[27][0]++;
        cov_2a6yemoeqm().s[161]++;
        this.log("bedrock-activation", "Providing fallback support for: invalid context");
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[162]++;
        return {
          success: false,
          supportType: "infrastructure",
          actionsPerformed: [{
            action: "validate_context",
            timestamp: new Date(),
            result: "failure",
            details: "Invalid or null failure context provided"
          }],
          diagnostics: {
            systemHealth: {},
            performanceMetrics: {
              responseTime: 0,
              memoryUsage: 0,
              cpuUsage: 0,
              networkLatency: 0
            },
            errorLogs: ["Invalid failure context"],
            recommendations: ["Provide valid failure context"]
          },
          nextSteps: ["Manual intervention required", "Contact system administrator"]
        };
      } else
      /* istanbul ignore next */
      {
        cov_2a6yemoeqm().b[27][1]++;
      }
      cov_2a6yemoeqm().s[163]++;
      this.log("bedrock-activation", `Providing fallback support for: ${context.operation} with circuit breaker protection`);
      // Check circuit breaker status before proceeding
      const circuitBreakerStatus =
      /* istanbul ignore next */
      (cov_2a6yemoeqm().s[164]++, yield this.getCircuitBreakerStatus());
      // Validate compliance before providing fallback support
      /* istanbul ignore next */
      cov_2a6yemoeqm().s[165]++;
      yield this.validateComplianceForSupportOperation("emergency", "direct_bedrock", "critical");
      /* istanbul ignore next */
      cov_2a6yemoeqm().s[166]++;
      try {
        // Execute fallback support through circuit breaker with intelligent routing
        const supportResult =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[167]++, yield this.executeWithCircuitBreakerProtection(context.operation, "emergency", () => {
          /* istanbul ignore next */
          cov_2a6yemoeqm().f[21]++;
          cov_2a6yemoeqm().s[168]++;
          return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /* istanbul ignore next */
            cov_2a6yemoeqm().f[22]++;
            cov_2a6yemoeqm().s[169]++;
            return yield this.performFallbackSupport(context);
          });
        }));
        // Log successful fallback support
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[170]++;
        yield this.auditTrail.logSupportModeEvent("fallback_support_provided", {
          timestamp: new Date(),
          operation: context.operation,
          severity: context.severity,
          circuitBreakerStatus,
          supportResult
        }, "system");
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[171]++;
        return supportResult;
      } catch (error) {
        const errorMessage =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[172]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[29][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[29][1]++, String(error)));
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[173]++;
        this.log("bedrock-activation", `Fallback support failed: ${errorMessage}`);
        // Handle circuit breaker failures
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[174]++;
        if (errorMessage.includes("circuit breaker is OPEN")) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[30][0]++;
          cov_2a6yemoeqm().s[175]++;
          yield this.handleCircuitBreakerFailure("direct",
          // Assuming direct path failed first
          context.operation, Object.assign(Object.assign({}, context), {
            fallbackError: errorMessage
          }));
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[30][1]++;
        }
        // Log failure to audit trail
        cov_2a6yemoeqm().s[176]++;
        yield this.auditTrail.logSupportModeEvent("fallback_support_failed", {
          timestamp: new Date(),
          operation: context.operation,
          error: errorMessage,
          context
        }, "system");
        // Return failure result
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[177]++;
        return {
          success: false,
          supportType: "infrastructure",
          actionsPerformed: [{
            action: "fallback_support_attempt",
            timestamp: new Date(),
            result: "failure",
            details: `Fallback support failed: ${errorMessage}`
          }],
          diagnostics: {
            systemHealth: {
              circuitBreakerStatus
            },
            performanceMetrics: {
              responseTime: 0,
              memoryUsage: 0,
              cpuUsage: 0,
              networkLatency: 0
            },
            errorLogs: [context.errorMessage, errorMessage],
            recommendations: ["Check circuit breaker status", "Verify routing path health", "Consider manual intervention"]
          },
          nextSteps: ["Manual intervention required", "Check system health", "Contact system administrator"]
        };
      }
    });
  }
  /**
   * Execute operation with circuit breaker protection and intelligent routing
   */
  executeWithCircuitBreakerProtection(operation, priority, operationFn) {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[23]++;
    cov_2a6yemoeqm().s[178]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[24]++;
      cov_2a6yemoeqm().s[179]++;
      try {
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[180]++;
        // Use intelligent router to determine best path
        if (this.intelligentRouter) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[31][0]++;
          const routingDecision =
          /* istanbul ignore next */
          (cov_2a6yemoeqm().s[181]++, yield this.intelligentRouter.makeRoutingDecision({
            operation: operation,
            priority: priority,
            context: {
              timestamp: new Date()
            }
          }));
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[182]++;
          this.log("bedrock-activation", `Routing decision: ${routingDecision.selectedRoute} (${routingDecision.reason})`);
          // Execute through selected route with circuit breaker protection
          const provider =
          /* istanbul ignore next */
          (cov_2a6yemoeqm().s[183]++, routingDecision.selectedRoute === "direct" ?
          /* istanbul ignore next */
          (cov_2a6yemoeqm().b[32][0]++, "bedrock") :
          /* istanbul ignore next */
          (cov_2a6yemoeqm().b[32][1]++, "google"));
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[184]++;
          return yield this.circuitBreaker.execute(provider, operationFn);
        } else {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[31][1]++;
          cov_2a6yemoeqm().s[185]++;
          // Fallback to direct circuit breaker execution
          return yield this.circuitBreaker.execute("bedrock", operationFn);
        }
      } catch (error) {
        const errorMessage =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[186]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[33][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[33][1]++, String(error)));
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[187]++;
        this.log("bedrock-activation", `Circuit breaker protected operation failed: ${errorMessage}`);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[188]++;
        throw error;
      }
    });
  }
  /**
   * Perform the actual fallback support logic
   */
  performFallbackSupport(context) {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[25]++;
    cov_2a6yemoeqm().s[189]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[26]++;
      cov_2a6yemoeqm().s[190]++;
      try {
        const actions =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[191]++, []);
        const diagnostics =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[192]++, {
          systemHealth: {},
          performanceMetrics: {
            responseTime: 0,
            memoryUsage: 0,
            cpuUsage: 0,
            networkLatency: 0
          },
          errorLogs: [context.errorMessage],
          recommendations: []
        });
        // Analyze the failure context
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[193]++;
        actions.push({
          action: "analyze_failure_context",
          timestamp: new Date(),
          result: "success",
          details: `Analyzed failure: ${context.errorType} in ${context.operation}`
        });
        // Determine support type based on failure
        let supportType;
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[194]++;
        if (context.affectedSystems.includes("infrastructure")) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[34][0]++;
          cov_2a6yemoeqm().s[195]++;
          supportType = "infrastructure";
        } else {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[34][1]++;
          cov_2a6yemoeqm().s[196]++;
          if (context.operation.includes("execution")) {
            /* istanbul ignore next */
            cov_2a6yemoeqm().b[35][0]++;
            cov_2a6yemoeqm().s[197]++;
            supportType = "execution";
          } else {
            /* istanbul ignore next */
            cov_2a6yemoeqm().b[35][1]++;
            cov_2a6yemoeqm().s[198]++;
            supportType = "implementation";
          }
        }
        // Generate recommendations based on failure type
        const nextSteps =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[199]++, []);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[200]++;
        if (context.severity === "critical") {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[36][0]++;
          cov_2a6yemoeqm().s[201]++;
          nextSteps.push("Escalate to on-call team");
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[202]++;
          nextSteps.push("Activate emergency procedures");
        } else {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[36][1]++;
          cov_2a6yemoeqm().s[203]++;
          nextSteps.push("Monitor for recurring issues");
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[204]++;
          nextSteps.push("Schedule remediation during maintenance window");
        }
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[205]++;
        diagnostics.recommendations = nextSteps;
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[206]++;
        return {
          success: true,
          supportType,
          actionsPerformed: actions,
          diagnostics,
          nextSteps
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[207]++;
        this.log("bedrock-activation", `Fallback support failed: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[37][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[37][1]++, "Unknown error")}`);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[208]++;
        return {
          success: false,
          supportType: "infrastructure",
          actionsPerformed: [{
            action: "fallback_support_attempt",
            timestamp: new Date(),
            result: "failure",
            details: `Failed to provide fallback support: ${error instanceof Error ?
            /* istanbul ignore next */
            (cov_2a6yemoeqm().b[38][0]++, error.message) :
            /* istanbul ignore next */
            (cov_2a6yemoeqm().b[38][1]++, "Unknown error")}`
          }],
          diagnostics: {
            systemHealth: {},
            performanceMetrics: {
              responseTime: 0,
              memoryUsage: 0,
              cpuUsage: 0,
              networkLatency: 0
            },
            errorLogs: [context.errorMessage],
            recommendations: ["Manual intervention required"]
          },
          nextSteps: ["Manual intervention required", "Contact system administrator"]
        };
      }
    });
  }
  /**
   * Send diagnostics to Kiro
   */
  sendDiagnosticsToKiro(diagnostics) {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[27]++;
    cov_2a6yemoeqm().s[209]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[28]++;
      cov_2a6yemoeqm().s[210]++;
      this.log("bedrock-activation", "Sending diagnostics to Kiro");
      // In a real implementation, this would send data through MCP or direct communication
      // For now, we'll just log the action
      /* istanbul ignore next */
      cov_2a6yemoeqm().s[211]++;
      this.log("bedrock-activation", `Diagnostics sent: ${diagnostics.recommendations.length} recommendations`);
    });
  }
  /**
   * Receive execution data from Kiro
   */
  receiveKiroExecutionData(executionData) {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[29]++;
    cov_2a6yemoeqm().s[212]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[30]++;
      cov_2a6yemoeqm().s[213]++;
      this.log("bedrock-activation", `Received execution data: ${executionData.operation}`);
      // In a real implementation, this would analyze the execution data
      // and potentially trigger support actions
      /* istanbul ignore next */
      cov_2a6yemoeqm().s[214]++;
      if (!executionData.success) {
        /* istanbul ignore next */
        cov_2a6yemoeqm().b[39][0]++;
        cov_2a6yemoeqm().s[215]++;
        this.log("bedrock-activation", `Execution failure detected: ${executionData.errorDetails}`);
      } else
      /* istanbul ignore next */
      {
        cov_2a6yemoeqm().b[39][1]++;
      }
    });
  }
  // Security & Compliance Methods
  validateComplianceStatus() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[31]++;
    cov_2a6yemoeqm().s[216]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[32]++;
      cov_2a6yemoeqm().s[217]++;
      try {
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[218]++;
        this.log("bedrock-activation", "Validating compliance status for all providers");
        // Get compliance summary from the compliance integration
        const complianceSummary =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[219]++, yield this.complianceIntegration.getComplianceSummary());
        // Check Bedrock-specific compliance
        const bedrockCompliance =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[220]++, yield this.providerCompliance.verifyProviderCompliance("bedrock"));
        // Validate GDPR compliance for both routing paths
        const gdprCompliant =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[221]++, yield this.validateGDPRCompliance());
        // Check EU data residency compliance for direct Bedrock access
        const euDataResidencyCompliant =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[222]++, yield this.validateEUDataResidencyCompliance());
        // Aggregate violations and recommendations
        const violations =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[223]++, []);
        const recommendations =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[224]++, []);
        // Check overall compliance status
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[225]++;
        if (complianceSummary.overallCompliance === "non_compliant") {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[40][0]++;
          cov_2a6yemoeqm().s[226]++;
          violations.push("Overall system compliance is non-compliant across providers");
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[227]++;
          recommendations.push("Review and update provider agreements to ensure compliance");
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[40][1]++;
        }
        // Check Bedrock-specific compliance
        cov_2a6yemoeqm().s[228]++;
        if (!bedrockCompliance.compliant) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[41][0]++;
          cov_2a6yemoeqm().s[229]++;
          violations.push(`Bedrock provider compliance issues: ${bedrockCompliance.violations.join(", ")}`);
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[230]++;
          recommendations.push("Update Bedrock provider agreement and verify compliance status");
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[41][1]++;
        }
        // Check GDPR compliance
        cov_2a6yemoeqm().s[231]++;
        if (!gdprCompliant) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[42][0]++;
          cov_2a6yemoeqm().s[232]++;
          violations.push("GDPR compliance validation failed for hybrid routing");
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[233]++;
          recommendations.push("Ensure PII detection and redaction is enabled for both MCP and direct Bedrock operations");
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[42][1]++;
        }
        // Check EU data residency
        cov_2a6yemoeqm().s[234]++;
        if (!euDataResidencyCompliant) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[43][0]++;
          cov_2a6yemoeqm().s[235]++;
          violations.push("EU data residency compliance failed for direct Bedrock access");
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[236]++;
          recommendations.push("Configure Bedrock to use EU-Central-1 region for data processing");
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[43][1]++;
        }
        // Check for recent violations
        cov_2a6yemoeqm().s[237]++;
        if (complianceSummary.recentViolations > 0) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[44][0]++;
          cov_2a6yemoeqm().s[238]++;
          violations.push(`${complianceSummary.recentViolations} recent compliance violations detected`);
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[239]++;
          recommendations.push("Review and resolve recent compliance violations");
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[44][1]++;
        }
        // Check for pending actions
        cov_2a6yemoeqm().s[240]++;
        if (complianceSummary.pendingActions > 0) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[45][0]++;
          cov_2a6yemoeqm().s[241]++;
          recommendations.push(`${complianceSummary.pendingActions} provider agreements require attention (expiring soon)`);
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[45][1]++;
        }
        const isCompliant =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[242]++, violations.length === 0);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[243]++;
        this.log("bedrock-activation", "Compliance validation completed", {
          isCompliant,
          violationsCount: violations.length,
          recommendationsCount: recommendations.length,
          overallCompliance: complianceSummary.overallCompliance,
          bedrockCompliant: bedrockCompliance.compliant,
          gdprCompliant,
          euDataResidencyCompliant
        });
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[244]++;
        return {
          isCompliant,
          violations,
          recommendations,
          lastChecked: new Date()
        };
      } catch (error) {
        const errorMessage =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[245]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[46][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[46][1]++, String(error)));
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[246]++;
        this.log("bedrock-activation", `Compliance validation failed: ${errorMessage}`);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[247]++;
        return {
          isCompliant: false,
          violations: [`Compliance validation error: ${errorMessage}`],
          recommendations: ["Check compliance system configuration and provider agreements"],
          lastChecked: new Date()
        };
      }
    });
  }
  /**
   * Validate GDPR compliance for both routing paths
   */
  validateGDPRCompliance() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[33]++;
    cov_2a6yemoeqm().s[248]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[34]++;
      cov_2a6yemoeqm().s[249]++;
      try {
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[250]++;
        this.log("bedrock-activation", "Validating GDPR compliance for both direct Bedrock and MCP routing paths");
        // Generate comprehensive hybrid compliance report
        const complianceReport =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[251]++, yield this.gdprHybridValidator.generateHybridComplianceReport());
        // Log compliance status
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[252]++;
        this.log("bedrock-activation", `Hybrid GDPR compliance report generated: ${complianceReport.overallCompliance} (Score: ${complianceReport.complianceScore}%)`);
        // Check if overall compliance is acceptable
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[253]++;
        if (complianceReport.overallCompliance === "non_compliant") {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[47][0]++;
          cov_2a6yemoeqm().s[254]++;
          this.log("bedrock-activation", `GDPR compliance failed: ${complianceReport.criticalIssues.join(", ")}`);
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[255]++;
          return false;
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[47][1]++;
        }
        // Check individual routing path compliance
        const directBedrockCompliant =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[256]++, complianceReport.routingPathCompliance.directBedrock.isCompliant);
        const mcpIntegrationCompliant =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[257]++, complianceReport.routingPathCompliance.mcpIntegration.isCompliant);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[258]++;
        if (!directBedrockCompliant) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[48][0]++;
          cov_2a6yemoeqm().s[259]++;
          this.log("bedrock-activation", `Direct Bedrock routing path GDPR compliance failed: ${complianceReport.routingPathCompliance.directBedrock.violations.map(v => {
            /* istanbul ignore next */
            cov_2a6yemoeqm().f[35]++;
            cov_2a6yemoeqm().s[260]++;
            return v.description;
          }).join(", ")}`);
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[48][1]++;
        }
        cov_2a6yemoeqm().s[261]++;
        if (!mcpIntegrationCompliant) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[49][0]++;
          cov_2a6yemoeqm().s[262]++;
          this.log("bedrock-activation", `MCP integration routing path GDPR compliance failed: ${complianceReport.routingPathCompliance.mcpIntegration.violations.map(v => {
            /* istanbul ignore next */
            cov_2a6yemoeqm().f[36]++;
            cov_2a6yemoeqm().s[263]++;
            return v.description;
          }).join(", ")}`);
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[49][1]++;
        }
        // Check cross-path compliance
        const crossPathCompliant =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[264]++, Object.values(complianceReport.crossPathCompliance).every(Boolean));
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[265]++;
        if (!crossPathCompliant) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[50][0]++;
          cov_2a6yemoeqm().s[266]++;
          this.log("bedrock-activation", "Cross-path GDPR compliance issues detected");
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[50][1]++;
        }
        // Log warnings if any
        const totalWarnings =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[267]++, complianceReport.routingPathCompliance.directBedrock.warnings.length + complianceReport.routingPathCompliance.mcpIntegration.warnings.length);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[268]++;
        if (totalWarnings > 0) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[51][0]++;
          cov_2a6yemoeqm().s[269]++;
          this.log("bedrock-activation", `GDPR compliance warnings detected: ${totalWarnings} warnings across routing paths`);
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[51][1]++;
        }
        // Return true if both paths are compliant or partially compliant with high score
        cov_2a6yemoeqm().s[270]++;
        return /* istanbul ignore next */(cov_2a6yemoeqm().b[52][0]++, complianceReport.overallCompliance === "compliant") ||
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[52][1]++, complianceReport.overallCompliance === "partial") &&
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[52][2]++, complianceReport.complianceScore >= 80);
      } catch (error) {
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[271]++;
        this.log("bedrock-activation", `GDPR compliance validation error: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[53][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[53][1]++, String(error))}`);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[272]++;
        return false;
      }
    });
  }
  /**
   * Validate EU data residency compliance for direct Bedrock access
   */
  validateEUDataResidencyCompliance() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[37]++;
    cov_2a6yemoeqm().s[273]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[38]++;
      cov_2a6yemoeqm().s[274]++;
      try {
        // Check Bedrock agreement for EU data residency
        const bedrockAgreement =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[275]++, this.providerCompliance.getAgreement("bedrock"));
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[276]++;
        if (
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[55][0]++, !bedrockAgreement) ||
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[55][1]++, !bedrockAgreement.euDataResidency)) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[54][0]++;
          cov_2a6yemoeqm().s[277]++;
          this.log("bedrock-activation", "Bedrock agreement does not guarantee EU data residency");
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[278]++;
          return false;
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[54][1]++;
        }
        // Validate that Bedrock is configured to use EU regions
        const euRegionConfigured =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[279]++, yield this.validateBedrockEURegionConfiguration());
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[280]++;
        if (!euRegionConfigured) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[56][0]++;
          cov_2a6yemoeqm().s[281]++;
          this.log("bedrock-activation", "Bedrock not configured to use EU regions for data processing");
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[282]++;
          return false;
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[56][1]++;
        }
        cov_2a6yemoeqm().s[283]++;
        return true;
      } catch (error) {
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[284]++;
        this.log("bedrock-activation", `EU data residency validation error: ${error}`);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[285]++;
        return false;
      }
    });
  }
  /**
   * Validate PII detection configuration
   */
  validatePIIDetectionConfiguration() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[39]++;
    cov_2a6yemoeqm().s[286]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[40]++;
      cov_2a6yemoeqm().s[287]++;
      try {
        // Check if PII detection feature flags are enabled
        const piiDetectionEnabled =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[288]++, this.featureFlags.getFlag("pii_detection_enabled", false));
        const piiRedactionEnabled =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[289]++, this.featureFlags.getFlag("pii_redaction_enabled", false));
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[290]++;
        if (
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[58][0]++, !piiDetectionEnabled) ||
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[58][1]++, !piiRedactionEnabled)) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[57][0]++;
          cov_2a6yemoeqm().s[291]++;
          return false;
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[57][1]++;
        }
        // Additional validation could check if PII detection services are running
        // This would integrate with existing PII detection infrastructure
        cov_2a6yemoeqm().s[292]++;
        return true;
      } catch (error) {
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[293]++;
        this.log("bedrock-activation", `PII detection validation error: ${error}`);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[294]++;
        return false;
      }
    });
  }
  /**
   * Validate Bedrock EU region configuration
   */
  validateBedrockEURegionConfiguration() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[41]++;
    cov_2a6yemoeqm().s[295]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[42]++;
      cov_2a6yemoeqm().s[296]++;
      try {
        // Check if Bedrock is configured to use EU regions
        const bedrockRegion =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[297]++,
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[59][0]++, process.env.AWS_BEDROCK_REGION) ||
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[59][1]++, process.env.AWS_REGION) ||
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[59][2]++, "us-east-1"));
        // EU regions for Bedrock
        const euRegions =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[298]++, ["eu-central-1", "eu-west-1", "eu-west-2", "eu-west-3", "eu-north-1"]);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[299]++;
        if (!euRegions.includes(bedrockRegion)) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[60][0]++;
          cov_2a6yemoeqm().s[300]++;
          this.log("bedrock-activation", `Bedrock region ${bedrockRegion} is not an EU region`);
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[301]++;
          return false;
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[60][1]++;
        }
        cov_2a6yemoeqm().s[302]++;
        return true;
      } catch (error) {
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[303]++;
        this.log("bedrock-activation", `Bedrock EU region validation error: ${error}`);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[304]++;
        return false;
      }
    });
  }
  /**
   * Validate compliance for support operations with hybrid routing
   */
  validateComplianceForSupportOperation(operationType_1) {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[43]++;
    cov_2a6yemoeqm().s[305]++;
    return tslib_1.__awaiter(this, arguments, void 0, function* (operationType, routeType =
    /* istanbul ignore next */
    (cov_2a6yemoeqm().b[61][0]++, "direct_bedrock"), priority =
    /* istanbul ignore next */
    (cov_2a6yemoeqm().b[62][0]++, "medium")) {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[44]++;
      cov_2a6yemoeqm().s[306]++;
      try {
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[307]++;
        this.log("bedrock-activation", `Validating GDPR compliance for support operation: ${operationType} via ${routeType} route`);
        // Create routing path for validation
        const routingPath =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[308]++, {
          routeType,
          provider: "bedrock",
          operationType,
          priority
        });
        // Generate correlation ID for this validation
        const correlationId =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[309]++, `support-${operationType}-${routeType}-${Date.now()}`);
        // Validate GDPR compliance before routing
        const validationResult =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[310]++, yield this.gdprHybridValidator.validateBeforeRouting(routingPath, correlationId));
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[311]++;
        if (!validationResult.allowed) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[63][0]++;
          cov_2a6yemoeqm().s[312]++;
          throw new Error(validationResult.reason);
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[63][1]++;
        }
        // Also validate using existing compliance integration for provider agreements
        const mockRequest =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[313]++, {
          prompt: `Support operation: ${operationType}`,
          context: {
            domain: "support",
            intent: "infrastructure_support",
            routingPath: routeType
          }
        });
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[314]++;
        yield this.complianceIntegration.enforceCompliance(mockRequest, "bedrock", correlationId);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[315]++;
        this.log("bedrock-activation", `GDPR and provider compliance validation passed for support operation: ${operationType} via ${routeType}`);
      } catch (error) {
        const errorMessage =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[316]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[64][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[64][1]++, String(error)));
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[317]++;
        this.log("bedrock-activation", `Compliance validation failed for support operation: ${operationType} via ${routeType} - ${errorMessage}`);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[318]++;
        throw new Error(`Support operation blocked due to compliance violation: ${errorMessage}`);
      }
    });
  }
  /**
   * Create compliance reporting for support mode
   */
  createComplianceReportForSupportMode() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[45]++;
    cov_2a6yemoeqm().s[319]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[46]++;
      cov_2a6yemoeqm().s[320]++;
      try {
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[321]++;
        this.log("bedrock-activation", "Generating compliance report for support mode");
        const reportId =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[322]++, `bedrock-support-compliance-${Date.now()}`);
        const timestamp =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[323]++, new Date());
        // Get overall compliance status
        const complianceStatus =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[324]++, yield this.validateComplianceStatus());
        // Check Bedrock-specific compliance
        const bedrockCompliance =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[325]++, yield this.providerCompliance.verifyProviderCompliance("bedrock"));
        // Check GDPR compliance
        const gdprCompliant =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[326]++, yield this.validateGDPRCompliance());
        // Check EU data residency
        const euDataResidencyCompliant =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[327]++, yield this.validateEUDataResidencyCompliance());
        // Get compliance summary for all providers
        const complianceSummary =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[328]++, yield this.complianceIntegration.getComplianceSummary());
        const report =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[329]++, {
          reportId,
          timestamp,
          supportModeCompliance: {
            overallCompliant: complianceStatus.isCompliant,
            bedrockCompliant: bedrockCompliance.compliant,
            gdprCompliant,
            euDataResidencyCompliant
          },
          hybridRoutingCompliance: {
            mcpPathCompliant: complianceSummary.overallCompliance !== "non_compliant",
            directBedrockPathCompliant:
            /* istanbul ignore next */
            (cov_2a6yemoeqm().b[65][0]++, bedrockCompliance.compliant) &&
            /* istanbul ignore next */
            (cov_2a6yemoeqm().b[65][1]++, gdprCompliant),
            auditTrailComplete: true // Assuming audit trail is properly configured
          },
          violations: [...complianceStatus.violations, ...bedrockCompliance.violations],
          recommendations: [...complianceStatus.recommendations, "Regularly review provider agreements for compliance updates", "Monitor PII detection and redaction effectiveness", "Ensure audit trail completeness for all support operations"]
        });
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[330]++;
        this.log("bedrock-activation", "Compliance report generated successfully", {
          reportId,
          overallCompliant: report.supportModeCompliance.overallCompliant,
          violationsCount: report.violations.length
        });
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[331]++;
        return report;
      } catch (error) {
        const errorMessage =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[332]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[66][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[66][1]++, String(error)));
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[333]++;
        this.log("bedrock-activation", `Failed to generate compliance report: ${errorMessage}`);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[334]++;
        throw new Error(`Compliance report generation failed: ${errorMessage}`);
      }
    });
  }
  /**
   * Enable Circuit Breaker Protection for Both Routing Paths
   */
  enableCircuitBreaker() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[47]++;
    cov_2a6yemoeqm().s[335]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[48]++;
      cov_2a6yemoeqm().s[336]++;
      try {
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[337]++;
        this.log("bedrock-activation", "Enabling circuit breaker protection for hybrid routing");
        // Validate circuit breaker is properly initialized
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[338]++;
        if (!this.circuitBreaker) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[67][0]++;
          cov_2a6yemoeqm().s[339]++;
          throw new Error("Circuit breaker not initialized");
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[67][1]++;
        }
        // Enable circuit breaker for all providers
        const providers =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[340]++, ["bedrock", "google", "meta"]);
        // Reset any existing circuit breaker states
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[341]++;
        providers.forEach(provider => {
          /* istanbul ignore next */
          cov_2a6yemoeqm().f[49]++;
          cov_2a6yemoeqm().s[342]++;
          if (this.circuitBreaker.isOpen(provider)) {
            /* istanbul ignore next */
            cov_2a6yemoeqm().b[68][0]++;
            cov_2a6yemoeqm().s[343]++;
            this.log("bedrock-activation", `Resetting circuit breaker for provider: ${provider}`);
            /* istanbul ignore next */
            cov_2a6yemoeqm().s[344]++;
            this.circuitBreaker.forceClose(provider);
          } else
          /* istanbul ignore next */
          {
            cov_2a6yemoeqm().b[68][1]++;
          }
        });
        // Configure circuit breaker thresholds for support operations
        const supportConfig =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[345]++, {
          failureThreshold: 3,
          // More sensitive for support operations
          recoveryTimeout: 30000,
          // 30 seconds recovery
          halfOpenMaxCalls: 2,
          // Conservative testing
          healthCheckInterval: 15000 // 15 second health checks
        });
        // Log circuit breaker configuration
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[346]++;
        this.log("bedrock-activation", `Circuit breaker configured with thresholds: ${JSON.stringify(supportConfig)}`);
        // Enable circuit breaker monitoring for direct Bedrock path
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[347]++;
        if (this.directBedrockClient) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[69][0]++;
          cov_2a6yemoeqm().s[348]++;
          this.log("bedrock-activation", "Circuit breaker enabled for direct Bedrock path");
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[69][1]++;
        }
        // Enable circuit breaker monitoring for MCP path
        cov_2a6yemoeqm().s[349]++;
        if (this.mcpRouter) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[70][0]++;
          cov_2a6yemoeqm().s[350]++;
          this.log("bedrock-activation", "Circuit breaker enabled for MCP routing path");
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[70][1]++;
        }
        // Start health monitoring for both paths
        cov_2a6yemoeqm().s[351]++;
        if (this.hybridHealthMonitor) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[71][0]++;
          cov_2a6yemoeqm().s[352]++;
          yield this.hybridHealthMonitor.startHealthMonitoring();
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[353]++;
          this.log("bedrock-activation", "Health monitoring started for hybrid routing paths");
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[71][1]++;
        }
        // Log audit trail event
        cov_2a6yemoeqm().s[354]++;
        yield this.auditTrail.logSupportModeEvent("circuit_breaker_enabled", {
          timestamp: new Date(),
          configuration: supportConfig,
          enabledPaths: ["direct_bedrock", "mcp_router"],
          healthMonitoringActive: true
        }, "system");
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[355]++;
        this.log("bedrock-activation", "Circuit breaker protection enabled for both routing paths");
      } catch (error) {
        const errorMessage =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[356]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[72][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[72][1]++, String(error)));
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[357]++;
        this.log("bedrock-activation", `Failed to enable circuit breaker: ${errorMessage}`);
        // Log failure to audit trail
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[358]++;
        yield this.auditTrail.logSupportModeEvent("circuit_breaker_enable_failed", {
          timestamp: new Date(),
          error: errorMessage,
          context: "circuit_breaker_activation"
        }, "system");
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[359]++;
        throw new Error(`Circuit breaker activation failed: ${errorMessage}`);
      }
    });
  }
  checkSecurityPosture() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[50]++;
    cov_2a6yemoeqm().s[360]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[51]++;
      cov_2a6yemoeqm().s[361]++;
      this.log("bedrock-activation", "Checking security posture for hybrid architecture");
      /* istanbul ignore next */
      cov_2a6yemoeqm().s[362]++;
      try {
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[363]++;
        // Start security posture monitoring if not already active
        if (!this.securityPostureMonitor.isMonitoringActive()) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[73][0]++;
          cov_2a6yemoeqm().s[364]++;
          yield this.securityPostureMonitor.startMonitoring();
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[73][1]++;
        }
        // Assess current security posture
        const postureStatus =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[365]++, yield this.securityPostureMonitor.assessSecurityPosture());
        // Convert to SecurityAuditResult format
        const vulnerabilities =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[366]++, [...postureStatus.routes.mcp.vulnerabilities, ...postureStatus.routes.directBedrock.vulnerabilities]);
        const recommendations =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[367]++, [...postureStatus.recommendations.immediate.map(r => {
          /* istanbul ignore next */
          cov_2a6yemoeqm().f[52]++;
          cov_2a6yemoeqm().s[368]++;
          return r.description;
        }), ...postureStatus.recommendations.shortTerm.map(r => {
          /* istanbul ignore next */
          cov_2a6yemoeqm().f[53]++;
          cov_2a6yemoeqm().s[369]++;
          return r.description;
        })]);
        const result =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[370]++, {
          securityScore: postureStatus.overall.securityScore,
          vulnerabilities,
          recommendations,
          lastAudit: postureStatus.overall.lastAssessment
        });
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[371]++;
        this.log("bedrock-activation", `Security posture check completed: Score ${result.securityScore}, ${vulnerabilities.length} vulnerabilities`);
        // Log to audit trail
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[372]++;
        yield this.auditTrail.logSupportModeEvent("security_posture_checked", {
          timestamp: new Date(),
          securityScore: result.securityScore,
          vulnerabilityCount: vulnerabilities.length,
          threatLevel: postureStatus.overall.threatLevel,
          complianceStatus: postureStatus.overall.complianceStatus
        }, "system");
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[373]++;
        return result;
      } catch (error) {
        const errorMessage =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[374]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[74][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[74][1]++, String(error)));
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[375]++;
        this.log("bedrock-activation", `Security posture check failed: ${errorMessage}`);
        // Log failure to audit trail
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[376]++;
        yield this.auditTrail.logSupportModeEvent("security_posture_check_failed", {
          timestamp: new Date(),
          error: errorMessage
        }, "system");
        // Return a degraded security result
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[377]++;
        return {
          securityScore: 0,
          vulnerabilities: [{
            id: "security-check-failure",
            severity: "critical",
            description: `Security posture check failed: ${errorMessage}`,
            component: "security-posture-monitor",
            remediation: "Investigate and fix security monitoring system"
          }],
          recommendations: ["Fix security posture monitoring system", "Investigate security check failure", "Manual security audit required"],
          lastAudit: new Date()
        };
      }
    });
  }
  /**
   * Check Circuit Breaker Status for Both Routing Paths
   */
  getCircuitBreakerStatus() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[54]++;
    cov_2a6yemoeqm().s[378]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[55]++;
      cov_2a6yemoeqm().s[379]++;
      try {
        // Check direct Bedrock circuit breaker
        const directBedrockOpen =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[380]++, this.circuitBreaker.isOpen("bedrock"));
        const directBedrockMetrics =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[381]++, this.circuitBreaker.getMetrics("bedrock"));
        // Check MCP router circuit breaker (using "google" as MCP provider proxy)
        const mcpRouterOpen =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[382]++, this.circuitBreaker.isOpen("google"));
        const mcpRouterMetrics =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[383]++, this.circuitBreaker.getMetrics("google"));
        // Determine overall health
        let overallHealth =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[384]++, "healthy");
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[385]++;
        if (
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[76][0]++, directBedrockOpen) &&
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[76][1]++, mcpRouterOpen)) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[75][0]++;
          cov_2a6yemoeqm().s[386]++;
          overallHealth = "critical"; // Both paths down
        } else {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[75][1]++;
          cov_2a6yemoeqm().s[387]++;
          if (
          /* istanbul ignore next */
          (cov_2a6yemoeqm().b[78][0]++, directBedrockOpen) ||
          /* istanbul ignore next */
          (cov_2a6yemoeqm().b[78][1]++, mcpRouterOpen)) {
            /* istanbul ignore next */
            cov_2a6yemoeqm().b[77][0]++;
            cov_2a6yemoeqm().s[388]++;
            overallHealth = "degraded"; // One path down
          } else
          /* istanbul ignore next */
          {
            cov_2a6yemoeqm().b[77][1]++;
          }
        }
        const status =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[389]++, {
          directBedrock: {
            isOpen: directBedrockOpen,
            state: directBedrockMetrics.state,
            metrics: directBedrockMetrics
          },
          mcpRouter: {
            isOpen: mcpRouterOpen,
            state: mcpRouterMetrics.state,
            metrics: mcpRouterMetrics
          },
          overallHealth
        });
        // Log status check to audit trail
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[390]++;
        yield this.auditTrail.logSupportModeEvent("circuit_breaker_status_check", {
          timestamp: new Date(),
          status,
          overallHealth
        }, "system");
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[391]++;
        return status;
      } catch (error) {
        const errorMessage =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[392]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[79][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[79][1]++, String(error)));
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[393]++;
        this.log("bedrock-activation", `Failed to check circuit breaker status: ${errorMessage}`);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[394]++;
        throw new Error(`Circuit breaker status check failed: ${errorMessage}`);
      }
    });
  }
  /**
   * Handle Circuit Breaker Failures with Intelligent Fallback
   */
  handleCircuitBreakerFailure(failedPath, operation, context) {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[56]++;
    cov_2a6yemoeqm().s[395]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[57]++;
      cov_2a6yemoeqm().s[396]++;
      try {
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[397]++;
        this.log("bedrock-activation", `Handling circuit breaker failure for ${failedPath} path during ${operation}`);
        // Log failure event
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[398]++;
        yield this.auditTrail.logSupportModeEvent("circuit_breaker_failure", {
          timestamp: new Date(),
          failedPath,
          operation,
          context
        }, "system");
        // Attempt intelligent fallback through router
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[399]++;
        if (this.intelligentRouter) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[80][0]++;
          const fallbackRoute =
          /* istanbul ignore next */
          (cov_2a6yemoeqm().s[400]++, failedPath === "direct" ?
          /* istanbul ignore next */
          (cov_2a6yemoeqm().b[81][0]++, "mcp") :
          /* istanbul ignore next */
          (cov_2a6yemoeqm().b[81][1]++, "direct"));
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[401]++;
          this.log("bedrock-activation", `Attempting fallback to ${fallbackRoute} path`);
          // Check if fallback path is available
          const fallbackProvider =
          /* istanbul ignore next */
          (cov_2a6yemoeqm().s[402]++, fallbackRoute === "direct" ?
          /* istanbul ignore next */
          (cov_2a6yemoeqm().b[82][0]++, "bedrock") :
          /* istanbul ignore next */
          (cov_2a6yemoeqm().b[82][1]++, "google"));
          const fallbackAvailable =
          /* istanbul ignore next */
          (cov_2a6yemoeqm().s[403]++, !this.circuitBreaker.isOpen(fallbackProvider));
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[404]++;
          if (fallbackAvailable) {
            /* istanbul ignore next */
            cov_2a6yemoeqm().b[83][0]++;
            cov_2a6yemoeqm().s[405]++;
            this.log("bedrock-activation", `Fallback to ${fallbackRoute} path is available`);
          } else {
            /* istanbul ignore next */
            cov_2a6yemoeqm().b[83][1]++;
            cov_2a6yemoeqm().s[406]++;
            this.log("bedrock-activation", `Fallback to ${fallbackRoute} path is also unavailable - both paths down`);
            // Both paths down - trigger emergency procedures
            /* istanbul ignore next */
            cov_2a6yemoeqm().s[407]++;
            yield this.triggerEmergencyProcedures(operation, context);
          }
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[80][1]++;
        }
        // Update health monitoring
        cov_2a6yemoeqm().s[408]++;
        if (this.hybridHealthMonitor) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[84][0]++;
          cov_2a6yemoeqm().s[409]++;
          yield this.hybridHealthMonitor.recordFailure(failedPath, operation);
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[84][1]++;
        }
      } catch (error) {
        const errorMessage =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[410]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[85][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[85][1]++, String(error)));
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[411]++;
        this.log("bedrock-activation", `Failed to handle circuit breaker failure: ${errorMessage}`);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[412]++;
        throw new Error(`Circuit breaker failure handling failed: ${errorMessage}`);
      }
    });
  }
  /**
   * Trigger Emergency Procedures when Both Paths are Down
   */
  triggerEmergencyProcedures(operation, context) {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[58]++;
    cov_2a6yemoeqm().s[413]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[59]++;
      cov_2a6yemoeqm().s[414]++;
      try {
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[415]++;
        this.log("bedrock-activation", `Triggering emergency procedures for operation: ${operation}`);
        // Log emergency event
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[416]++;
        yield this.auditTrail.logSupportModeEvent("emergency_procedures_triggered", {
          timestamp: new Date(),
          operation,
          context,
          reason: "both_routing_paths_unavailable"
        }, "system");
        // Disable support mode temporarily
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[417]++;
        this.isActivated = false;
        // Send emergency notifications
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[418]++;
        yield this.sendEmergencyNotifications(operation, context);
        // Force reset circuit breakers after emergency timeout
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[419]++;
        setTimeout(() => {
          /* istanbul ignore next */
          cov_2a6yemoeqm().f[60]++;
          cov_2a6yemoeqm().s[420]++;
          return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /* istanbul ignore next */
            cov_2a6yemoeqm().f[61]++;
            cov_2a6yemoeqm().s[421]++;
            try {
              /* istanbul ignore next */
              cov_2a6yemoeqm().s[422]++;
              this.log("bedrock-activation", "Attempting emergency circuit breaker reset");
              /* istanbul ignore next */
              cov_2a6yemoeqm().s[423]++;
              this.circuitBreaker.resetAll();
              // Re-enable support mode if feature flag is still active
              const supportModeEnabled =
              /* istanbul ignore next */
              (cov_2a6yemoeqm().s[424]++, yield this.featureFlags.isBedrockSupportModeEnabled());
              /* istanbul ignore next */
              cov_2a6yemoeqm().s[425]++;
              if (supportModeEnabled) {
                /* istanbul ignore next */
                cov_2a6yemoeqm().b[86][0]++;
                cov_2a6yemoeqm().s[426]++;
                this.isActivated = true;
                /* istanbul ignore next */
                cov_2a6yemoeqm().s[427]++;
                this.log("bedrock-activation", "Support mode re-enabled after emergency reset");
              } else
              /* istanbul ignore next */
              {
                cov_2a6yemoeqm().b[86][1]++;
              }
            } catch (resetError) {
              /* istanbul ignore next */
              cov_2a6yemoeqm().s[428]++;
              this.log("bedrock-activation", `Emergency reset failed: ${resetError}`);
            }
          });
        }, 60000); // 1 minute emergency timeout
      } catch (error) {
        const errorMessage =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[429]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[87][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[87][1]++, String(error)));
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[430]++;
        this.log("bedrock-activation", `Failed to trigger emergency procedures: ${errorMessage}`);
      }
    });
  }
  /**
   * Send Emergency Notifications
   */
  sendEmergencyNotifications(operation, context) {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[62]++;
    cov_2a6yemoeqm().s[431]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[63]++;
      cov_2a6yemoeqm().s[432]++;
      try {
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[433]++;
        // Send notifications through configured channels
        for (const channel of this.config.notificationChannels) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[434]++;
          if (channel.enabled) {
            /* istanbul ignore next */
            cov_2a6yemoeqm().b[88][0]++;
            const message =
            /* istanbul ignore next */
            (cov_2a6yemoeqm().s[435]++, `EMERGENCY: Bedrock Support Mode - Both routing paths unavailable during ${operation}`);
            /* istanbul ignore next */
            cov_2a6yemoeqm().s[436]++;
            this.log("bedrock-activation", `Sending emergency notification via ${channel.type}: ${message}`);
            // In production, this would send actual notifications
            // For now, just log the notification
          } else
          /* istanbul ignore next */
          {
            cov_2a6yemoeqm().b[88][1]++;
          }
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[437]++;
        this.log("bedrock-activation", `Failed to send emergency notifications: ${error}`);
      }
    });
  }
  // Cost & Performance Methods (using existing CostPerformanceOptimizer)
  monitorCostThresholds() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[64]++;
    cov_2a6yemoeqm().s[438]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[65]++;
      cov_2a6yemoeqm().s[439]++;
      try {
        // Get cost summary from existing optimizer
        const costSummary =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[440]++, this.costPerformanceOptimizer.getCostSummary());
        const performanceMetrics =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[441]++, this.costPerformanceOptimizer.getPerformanceMetrics());
        // Log cost monitoring event
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[442]++;
        yield this.auditTrail.logEvent({
          eventType: "cost_monitoring",
          userId: "system",
          action: "monitor_cost_thresholds",
          resourceType: "cost_performance",
          resourceId: "bedrock-support-mode",
          metadata: {
            dailySpent: costSummary.daily.spent,
            monthlySpent: costSummary.monthly.spent,
            dailyRemaining: costSummary.daily.remaining,
            monthlyRemaining: costSummary.monthly.remaining,
            cacheHitRate: performanceMetrics.cacheHitRate
          },
          timestamp: new Date(),
          ipAddress: "internal",
          userAgent: "bedrock-support-manager"
        });
        // Check for emergency shutdown conditions
        const costPressure =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[443]++, costSummary.monthly.spent / costSummary.monthly.limit);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[444]++;
        if (costPressure > 0.95) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[89][0]++;
          cov_2a6yemoeqm().s[445]++;
          yield this.emergencyShutdownManager.triggerShutdown("all", "cost_overrun", "manual", {
            costEuro: costSummary.monthly.spent,
            additionalInfo: {
              dailySpent: costSummary.daily.spent,
              monthlyLimit: costSummary.monthly.limit
            }
          });
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[89][1]++;
        }
        // Return cost analysis in expected format
        cov_2a6yemoeqm().s[446]++;
        return {
          currentSpend: costSummary.monthly.spent,
          projectedSpend: costSummary.monthly.spent * (30 / new Date().getDate()),
          // Simple projection
          budgetUtilization: costPressure,
          costBreakdown: {
            daily: costSummary.daily.spent,
            monthly: costSummary.monthly.spent,
            cacheHitRate: performanceMetrics.cacheHitRate
          },
          recommendations: this.generateCostRecommendations(costSummary, performanceMetrics)
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[447]++;
        this.log("bedrock-activation", `Error monitoring cost thresholds: ${error}`);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[448]++;
        return {
          currentSpend: 0,
          projectedSpend: 0,
          budgetUtilization: 0,
          costBreakdown: {},
          recommendations: ["Error retrieving cost data - please check cost monitoring system"]
        };
      }
    });
  }
  /**
   * Generate cost optimization recommendations
   */
  generateCostRecommendations(costSummary, performanceMetrics) {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[66]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_2a6yemoeqm().s[449]++, []);
    // Check cache hit rate
    /* istanbul ignore next */
    cov_2a6yemoeqm().s[450]++;
    if (performanceMetrics.cacheHitRate < 0.5) {
      /* istanbul ignore next */
      cov_2a6yemoeqm().b[90][0]++;
      cov_2a6yemoeqm().s[451]++;
      recommendations.push("Improve cache hit rate to reduce AI provider costs");
    } else
    /* istanbul ignore next */
    {
      cov_2a6yemoeqm().b[90][1]++;
    }
    // Check daily budget utilization
    const dailyUtilization =
    /* istanbul ignore next */
    (cov_2a6yemoeqm().s[452]++, costSummary.daily.spent / costSummary.daily.limit);
    /* istanbul ignore next */
    cov_2a6yemoeqm().s[453]++;
    if (dailyUtilization > 0.8) {
      /* istanbul ignore next */
      cov_2a6yemoeqm().b[91][0]++;
      cov_2a6yemoeqm().s[454]++;
      recommendations.push("Daily budget utilization high - consider implementing cost optimization strategies");
    } else
    /* istanbul ignore next */
    {
      cov_2a6yemoeqm().b[91][1]++;
    }
    // Check monthly budget utilization
    const monthlyUtilization =
    /* istanbul ignore next */
    (cov_2a6yemoeqm().s[455]++, costSummary.monthly.spent / costSummary.monthly.limit);
    /* istanbul ignore next */
    cov_2a6yemoeqm().s[456]++;
    if (monthlyUtilization > 0.75) {
      /* istanbul ignore next */
      cov_2a6yemoeqm().b[92][0]++;
      cov_2a6yemoeqm().s[457]++;
      recommendations.push("Monthly budget on track to exceed - review operation priorities");
    } else
    /* istanbul ignore next */
    {
      cov_2a6yemoeqm().b[92][1]++;
    }
    cov_2a6yemoeqm().s[458]++;
    return recommendations;
  }
  /**
   * Get detailed cost and performance status
   */
  getCostPerformanceStatus() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[67]++;
    cov_2a6yemoeqm().s[459]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[68]++;
      const costSummary =
      /* istanbul ignore next */
      (cov_2a6yemoeqm().s[460]++, this.costPerformanceOptimizer.getCostSummary());
      const performanceMetrics =
      /* istanbul ignore next */
      (cov_2a6yemoeqm().s[461]++, this.costPerformanceOptimizer.getPerformanceMetrics());
      const shutdownStatus =
      /* istanbul ignore next */
      (cov_2a6yemoeqm().s[462]++, this.emergencyShutdownManager.getStatus());
      /* istanbul ignore next */
      cov_2a6yemoeqm().s[463]++;
      return {
        cost: costSummary,
        performance: performanceMetrics,
        emergencyShutdown: shutdownStatus
      };
    });
  }
  /**
   * Track cost for a support operation (stub for compatibility)
   */
  trackSupportOperationCost(operationId, route, operationType, cost, tokensUsed) {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[69]++;
    cov_2a6yemoeqm().s[464]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[70]++;
      cov_2a6yemoeqm().s[465]++;
      yield this.costBudgetMonitor.trackOperationCost({
        operationId,
        route,
        operationType,
        cost,
        tokensUsed,
        timestamp: new Date(),
        metadata: {
          supportMode: true,
          bedrockActivation: this.isActivated
        }
      });
    });
  }
  optimizePerformance() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[71]++;
    cov_2a6yemoeqm().s[466]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[72]++;
      cov_2a6yemoeqm().s[467]++;
      return {
        currentMetrics: {
          responseTime: 0,
          memoryUsage: 0,
          cpuUsage: 0,
          networkLatency: 0
        },
        optimizationOpportunities: [],
        expectedImprovements: {}
      };
    });
  }
  enableEmergencyMode() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[73]++;
    cov_2a6yemoeqm().s[468]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[74]++;
      cov_2a6yemoeqm().s[469]++;
      this.log("bedrock-activation", "Emergency mode enabled");
    });
  }
  // Template & Prompt Methods (Stubs for now)
  validatePromptTemplates() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[75]++;
    cov_2a6yemoeqm().s[470]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[76]++;
      cov_2a6yemoeqm().s[471]++;
      return {
        isValid: true,
        errors: [],
        warnings: [],
        templateCount: 0
      };
    });
  }
  enablePIIRedaction() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[77]++;
    cov_2a6yemoeqm().s[472]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[78]++;
      cov_2a6yemoeqm().s[473]++;
      this.log("bedrock-activation", "PII redaction enabled");
    });
  }
  /**
   * Run comprehensive red team security evaluations for direct Bedrock
   *
   * This method executes automated security testing including:
   * - Prompt injection detection
   * - Jailbreak attempt detection
   * - Data exfiltration prevention
   * - Privilege escalation prevention
   * - Denial of service protection
   */
  runRedTeamEvaluations() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[79]++;
    cov_2a6yemoeqm().s[474]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[80]++;
      cov_2a6yemoeqm().s[475]++;
      try {
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[476]++;
        this.log("bedrock-activation", "Starting red team security evaluation");
        // Check if red team evaluations are enabled
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[477]++;
        if (!this.featureFlags.isEnabled("red_team_evaluation_enabled", true)) {
          /* istanbul ignore next */
          cov_2a6yemoeqm().b[93][0]++;
          cov_2a6yemoeqm().s[478]++;
          this.log("bedrock-activation", "Red team evaluations are disabled");
          /* istanbul ignore next */
          cov_2a6yemoeqm().s[479]++;
          return {
            passed: true,
            testResults: [],
            overallScore: 100,
            recommendations: ["Red team evaluations are disabled - enable for security testing"]
          };
        } else
        /* istanbul ignore next */
        {
          cov_2a6yemoeqm().b[93][1]++;
        }
        // Initialize red team evaluator with direct Bedrock client
        const evaluator =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[480]++, new red_team_evaluator_1.RedTeamEvaluator(this.directBedrockClient, {
          enablePromptInjectionTests: true,
          enableJailbreakTests: true,
          enableDataExfiltrationTests: true,
          enablePrivilegeEscalationTests: true,
          enableDenialOfServiceTests: true,
          testDepth: "standard",
          maxTestsPerCategory: 5,
          timeoutMs: 30000
        }));
        // Run comprehensive evaluation
        const report =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[481]++, yield evaluator.runEvaluation());
        // Log evaluation results
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[482]++;
        yield this.auditTrail.logEvent({
          eventType: "red_team_evaluation",
          requestId: report.evaluationId,
          provider: "bedrock",
          complianceStatus: report.vulnerabilitiesDetected > 0 ?
          /* istanbul ignore next */
          (cov_2a6yemoeqm().b[94][0]++, "violation") :
          /* istanbul ignore next */
          (cov_2a6yemoeqm().b[94][1]++, "compliant"),
          metadata: {
            totalTests: report.totalTests,
            testsPassed: report.testsPassed,
            testsFailed: report.testsFailed,
            vulnerabilitiesDetected: report.vulnerabilitiesDetected,
            securityScore: report.overallSecurityScore,
            criticalVulnerabilities: report.criticalVulnerabilities.length,
            highVulnerabilities: report.highVulnerabilities.length,
            executionTimeMs: report.executionTimeMs
          }
        });
        // Convert red team report to SecurityTestResult format
        const testResults =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[483]++, [...report.criticalVulnerabilities.map(v => {
          /* istanbul ignore next */
          cov_2a6yemoeqm().f[81]++;
          cov_2a6yemoeqm().s[484]++;
          return {
            testName: v.testName,
            passed: v.passed,
            details: v.description,
            severity: v.severity
          };
        }), ...report.highVulnerabilities.map(v => {
          /* istanbul ignore next */
          cov_2a6yemoeqm().f[82]++;
          cov_2a6yemoeqm().s[485]++;
          return {
            testName: v.testName,
            passed: v.passed,
            details: v.description,
            severity: v.severity
          };
        }), ...report.mediumVulnerabilities.map(v => {
          /* istanbul ignore next */
          cov_2a6yemoeqm().f[83]++;
          cov_2a6yemoeqm().s[486]++;
          return {
            testName: v.testName,
            passed: v.passed,
            details: v.description,
            severity: v.severity
          };
        }), ...report.lowVulnerabilities.map(v => {
          /* istanbul ignore next */
          cov_2a6yemoeqm().f[84]++;
          cov_2a6yemoeqm().s[487]++;
          return {
            testName: v.testName,
            passed: v.passed,
            details: v.description,
            severity: v.severity
          };
        })]);
        const passed =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[488]++, report.vulnerabilitiesDetected === 0);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[489]++;
        this.log("bedrock-activation", `Red team evaluation completed: ${passed ?
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[95][0]++, "PASSED") :
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[95][1]++, "FAILED")} ` + `(Score: ${report.overallSecurityScore}/100, ` + `Vulnerabilities: ${report.vulnerabilitiesDetected})`);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[490]++;
        return {
          passed,
          testResults,
          overallScore: report.overallSecurityScore,
          recommendations: report.recommendations
        };
      } catch (error) {
        const errorMessage =
        /* istanbul ignore next */
        (cov_2a6yemoeqm().s[491]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[96][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2a6yemoeqm().b[96][1]++, "Unknown error"));
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[492]++;
        this.log("bedrock-activation", `Red team evaluation failed: ${errorMessage}`);
        // Log error to audit trail
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[493]++;
        yield this.auditTrail.logEvent({
          eventType: "red_team_evaluation",
          requestId: `red-team-eval-error-${Date.now()}`,
          provider: "bedrock",
          complianceStatus: "violation",
          error: {
            type: "evaluation_error",
            message: errorMessage
          }
        });
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[494]++;
        return {
          passed: false,
          testResults: [{
            testName: "Red Team Evaluation",
            passed: false,
            details: `Evaluation failed: ${errorMessage}`,
            severity: "critical"
          }],
          overallScore: 0,
          recommendations: ["Fix red team evaluation system errors", "Review direct Bedrock client configuration", "Check security testing infrastructure"]
        };
      }
    });
  }
  /**
   * Get default configuration
   */
  getDefaultConfig(overrides) {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[85]++;
    cov_2a6yemoeqm().s[495]++;
    return Object.assign({
      enabled: false,
      environments: ["development", "staging", "production"],
      auditInterval: 1800000,
      monitoringLevel: "basic",
      autoResolutionEnabled: false,
      notificationChannels: []
    }, overrides);
  }
  /**
   * Get system resource monitoring status
   * Ensures support mode overhead stays under 5% of system resources
   */
  getResourceMonitoringStatus() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[86]++;
    const status =
    /* istanbul ignore next */
    (cov_2a6yemoeqm().s[496]++, this.systemResourceMonitor.getStatus());
    const summary =
    /* istanbul ignore next */
    (cov_2a6yemoeqm().s[497]++, this.systemResourceMonitor.getResourceSummary());
    const alerts =
    /* istanbul ignore next */
    (cov_2a6yemoeqm().s[498]++, this.systemResourceMonitor.getActiveAlerts());
    /* istanbul ignore next */
    cov_2a6yemoeqm().s[499]++;
    return {
      isMonitoring: status.isMonitoring,
      isWithinThresholds: summary.isWithinThresholds,
      currentMetrics: summary.current,
      summary,
      alerts
    };
  }
  /**
   * Check if support mode is within the 5% system resource overhead requirement
   */
  validateResourceOverhead() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[87]++;
    cov_2a6yemoeqm().s[500]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[88]++;
      const currentMetrics =
      /* istanbul ignore next */
      (cov_2a6yemoeqm().s[501]++, yield this.systemResourceMonitor.getCurrentMetrics());
      const summary =
      /* istanbul ignore next */
      (cov_2a6yemoeqm().s[502]++, this.systemResourceMonitor.getResourceSummary());
      const status =
      /* istanbul ignore next */
      (cov_2a6yemoeqm().s[503]++, this.systemResourceMonitor.getStatus());
      const recommendations =
      /* istanbul ignore next */
      (cov_2a6yemoeqm().s[504]++, []);
      // Check CPU usage against 1% threshold (well under 5%)
      /* istanbul ignore next */
      cov_2a6yemoeqm().s[505]++;
      if (currentMetrics.cpuUsagePercent > 0.8) {
        /* istanbul ignore next */
        cov_2a6yemoeqm().b[97][0]++;
        cov_2a6yemoeqm().s[506]++;
        recommendations.push(`CPU usage (${currentMetrics.cpuUsagePercent.toFixed(2)}%) approaching threshold. Consider optimizing support operations.`);
      } else
      /* istanbul ignore next */
      {
        cov_2a6yemoeqm().b[97][1]++;
      }
      // Check memory usage against 50MB threshold
      cov_2a6yemoeqm().s[507]++;
      if (currentMetrics.memoryUsageMB > 40) {
        /* istanbul ignore next */
        cov_2a6yemoeqm().b[98][0]++;
        cov_2a6yemoeqm().s[508]++;
        recommendations.push(`Memory usage (${currentMetrics.memoryUsageMB.toFixed(2)}MB) approaching threshold. Consider memory optimization.`);
      } else
      /* istanbul ignore next */
      {
        cov_2a6yemoeqm().b[98][1]++;
      }
      // Check if monitoring is active
      cov_2a6yemoeqm().s[509]++;
      if (!status.isMonitoring) {
        /* istanbul ignore next */
        cov_2a6yemoeqm().b[99][0]++;
        cov_2a6yemoeqm().s[510]++;
        recommendations.push("Resource monitoring is not active. Enable monitoring to track overhead.");
      } else
      /* istanbul ignore next */
      {
        cov_2a6yemoeqm().b[99][1]++;
      }
      const isCompliant =
      /* istanbul ignore next */
      (cov_2a6yemoeqm().s[511]++,
      /* istanbul ignore next */
      (cov_2a6yemoeqm().b[100][0]++, currentMetrics.cpuUsagePercent <= 1.0) &&
      /* istanbul ignore next */
      (cov_2a6yemoeqm().b[100][1]++,
      // 1% CPU (well under 5%)
      currentMetrics.memoryUsageMB <= 50) &&
      /* istanbul ignore next */
      (cov_2a6yemoeqm().b[100][2]++,
      // 50MB memory (reasonable for 5% overhead)
      status.isMonitoring));
      /* istanbul ignore next */
      cov_2a6yemoeqm().s[512]++;
      yield this.auditTrail.logEvent({
        eventType: "resource_overhead_validation",
        timestamp: new Date(),
        details: {
          component: "BedrockSupportManager",
          isCompliant,
          cpuUsage: currentMetrics.cpuUsagePercent,
          memoryUsage: currentMetrics.memoryUsageMB,
          thresholds: status.config.thresholds,
          recommendations
        }
      });
      /* istanbul ignore next */
      cov_2a6yemoeqm().s[513]++;
      return {
        isCompliant,
        cpuUsage: currentMetrics.cpuUsagePercent,
        memoryUsage: currentMetrics.memoryUsageMB,
        thresholds: status.config.thresholds,
        recommendations
      };
    });
  }
  /**
   * Get performance metrics with resource overhead information
   */
  getPerformanceMetricsWithOverhead() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[89]++;
    cov_2a6yemoeqm().s[514]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[90]++;
      const currentMetrics =
      /* istanbul ignore next */
      (cov_2a6yemoeqm().s[515]++, yield this.systemResourceMonitor.getCurrentMetrics());
      const summary =
      /* istanbul ignore next */
      (cov_2a6yemoeqm().s[516]++, this.systemResourceMonitor.getResourceSummary());
      /* istanbul ignore next */
      cov_2a6yemoeqm().s[517]++;
      return {
        responseTime: 0,
        // This would be populated by actual operations
        memoryUsage: currentMetrics.memoryUsageMB,
        cpuUsage: currentMetrics.cpuUsagePercent,
        networkLatency: 0,
        // This would be populated by actual operations
        resourceOverhead: {
          cpuUsagePercent: currentMetrics.cpuUsagePercent,
          memoryUsageMB: currentMetrics.memoryUsageMB,
          isWithinThresholds: summary.isWithinThresholds
        }
      };
    });
  }
  /**
   * Emergency shutdown if resource usage exceeds critical thresholds
   */
  emergencyShutdownOnResourceOverhead() {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[91]++;
    cov_2a6yemoeqm().s[518]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_2a6yemoeqm().f[92]++;
      const validation =
      /* istanbul ignore next */
      (cov_2a6yemoeqm().s[519]++, yield this.validateResourceOverhead());
      // If CPU usage exceeds 2% or memory exceeds 100MB, trigger emergency shutdown
      /* istanbul ignore next */
      cov_2a6yemoeqm().s[520]++;
      if (
      /* istanbul ignore next */
      (cov_2a6yemoeqm().b[102][0]++, validation.cpuUsage > 2.0) ||
      /* istanbul ignore next */
      (cov_2a6yemoeqm().b[102][1]++, validation.memoryUsage > 100)) {
        /* istanbul ignore next */
        cov_2a6yemoeqm().b[101][0]++;
        cov_2a6yemoeqm().s[521]++;
        this.log("bedrock-activation", `Emergency shutdown triggered due to excessive resource usage: CPU ${validation.cpuUsage.toFixed(2)}%, Memory ${validation.memoryUsage.toFixed(2)}MB`);
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[522]++;
        yield this.auditTrail.logEvent({
          eventType: "emergency_shutdown_resource_overhead",
          timestamp: new Date(),
          details: {
            component: "BedrockSupportManager",
            trigger: "resource_overhead",
            cpuUsage: validation.cpuUsage,
            memoryUsage: validation.memoryUsage,
            thresholds: validation.thresholds
          }
        });
        // Deactivate support mode
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[523]++;
        yield this.deactivate();
        // Use emergency shutdown manager
        /* istanbul ignore next */
        cov_2a6yemoeqm().s[524]++;
        yield this.emergencyShutdownManager.triggerEmergencyShutdown("resource_overhead", `Resource usage exceeded safe limits: CPU ${validation.cpuUsage.toFixed(2)}%, Memory ${validation.memoryUsage.toFixed(2)}MB`);
      } else
      /* istanbul ignore next */
      {
        cov_2a6yemoeqm().b[101][1]++;
      }
    });
  }
  /**
   * Log with bedrock-activation prefix
   */
  log(prefix, message) {
    /* istanbul ignore next */
    cov_2a6yemoeqm().f[93]++;
    cov_2a6yemoeqm().s[525]++;
    this.logger.log(`[${prefix}] ${message}`);
  }
}
/* istanbul ignore next */
cov_2a6yemoeqm().s[526]++;
exports.BedrockSupportManager = BedrockSupportManager;
/**
 * Factory function to create a Bedrock Support Manager instance
 */
function createBedrockSupportManager(config, featureFlags, bedrockAdapter) {
  /* istanbul ignore next */
  cov_2a6yemoeqm().f[94]++;
  cov_2a6yemoeqm().s[527]++;
  return new BedrockSupportManager(config, featureFlags, bedrockAdapter);
}
/**
 * Default export
 */
/* istanbul ignore next */
cov_2a6yemoeqm().s[528]++;
exports.default = BedrockSupportManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMmE2eWVtb2VxbSIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwidHlwZSIsImxvY2F0aW9ucyIsInVuZGVmaW5lZCIsInMiLCJmIiwiYiIsImlucHV0U291cmNlTWFwIiwiZmlsZSIsIm1hcHBpbmdzIiwibmFtZXMiLCJzb3VyY2VzIiwic291cmNlc0NvbnRlbnQiLCJ2ZXJzaW9uIiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsImV4cG9ydHMiLCJjcmVhdGVCZWRyb2NrU3VwcG9ydE1hbmFnZXIiLCJiZWRyb2NrX2FkYXB0ZXJfMSIsInJlcXVpcmUiLCJhaV9mZWF0dXJlX2ZsYWdzXzEiLCJhdWRpdF90cmFpbF9zeXN0ZW1fMSIsImNpcmN1aXRfYnJlYWtlcl8xIiwiY29tcGxpYW5jZV9pbnRlZ3JhdGlvbl8xIiwiY29zdF9wZXJmb3JtYW5jZV9vcHRpbWl6ZXJfMSIsImRpcmVjdF9iZWRyb2NrX2NsaWVudF8xIiwiZW1lcmdlbmN5X3NodXRkb3duX21hbmFnZXJfMSIsImdkcHJfaHlicmlkX2NvbXBsaWFuY2VfdmFsaWRhdG9yXzEiLCJoeWJyaWRfaGVhbHRoX21vbml0b3JfMSIsImltcGxlbWVudGF0aW9uX3N1cHBvcnRfMSIsImluZnJhc3RydWN0dXJlX2F1ZGl0b3JfMSIsImludGVsbGlnZW50X3JvdXRlcl8xIiwia2lyb19icmlkZ2VfMSIsIm1jcF9yb3V0ZXJfMSIsIm1ldGFfbW9uaXRvcl8xIiwicHJvdmlkZXJfYWdyZWVtZW50X2NvbXBsaWFuY2VfMSIsInJlZF90ZWFtX2V2YWx1YXRvcl8xIiwic2VjdXJpdHlfcG9zdHVyZV9tb25pdG9yXzEiLCJzeXN0ZW1fcmVzb3VyY2VfbW9uaXRvcl8xIiwiQmVkcm9ja1N1cHBvcnRNYW5hZ2VyIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJmZWF0dXJlRmxhZ3MiLCJiZWRyb2NrQWRhcHRlciIsInByb3ZpZGVyQ29tcGxpYW5jZSIsImNvbXBsaWFuY2VJbnRlZ3JhdGlvbiIsImdkcHJIeWJyaWRWYWxpZGF0b3IiLCJpc0FjdGl2YXRlZCIsImdldERlZmF1bHRDb25maWciLCJBaUZlYXR1cmVGbGFncyIsIkJlZHJvY2tBZGFwdGVyIiwibG9nZ2VyIiwiY29uc29sZSIsIlByb3ZpZGVyQWdyZWVtZW50Q29tcGxpYW5jZSIsIkNvbXBsaWFuY2VJbnRlZ3JhdGlvbiIsIkdEUFJIeWJyaWRDb21wbGlhbmNlVmFsaWRhdG9yIiwiY2lyY3VpdEJyZWFrZXIiLCJDaXJjdWl0QnJlYWtlciIsImZhaWx1cmVUaHJlc2hvbGQiLCJyZWNvdmVyeVRpbWVvdXQiLCJoYWxmT3Blbk1heENhbGxzIiwiaGVhbHRoQ2hlY2tJbnRlcnZhbCIsImF1ZGl0VHJhaWwiLCJBdWRpdFRyYWlsU3lzdGVtIiwiY29tcGxpYW5jZU1vZGUiLCJlbmFibGVJbnRlZ3JpdHlDaGVja2luZyIsInJldGVudGlvbkRheXMiLCJkaXJlY3RCZWRyb2NrQ2xpZW50IiwiRGlyZWN0QmVkcm9ja0NsaWVudCIsInJlZ2lvbiIsInByb2Nlc3MiLCJlbnYiLCJBV1NfUkVHSU9OIiwiZW1lcmdlbmN5VGltZW91dCIsImNyaXRpY2FsVGltZW91dCIsImVuYWJsZUNpcmN1aXRCcmVha2VyIiwiZW5hYmxlSGVhbHRoTW9uaXRvcmluZyIsImVuYWJsZUNvbXBsaWFuY2VDaGVja3MiLCJtY3BSb3V0ZXIiLCJNQ1BSb3V0ZXIiLCJ0aW1lb3V0IiwibWF4UmV0cmllcyIsImludGVsbGlnZW50Um91dGVyIiwiSW50ZWxsaWdlbnRSb3V0ZXIiLCJpbmZyYXN0cnVjdHVyZUF1ZGl0b3IiLCJJbmZyYXN0cnVjdHVyZUF1ZGl0b3IiLCJtZXRhTW9uaXRvciIsIk1ldGFNb25pdG9yIiwiaW1wbGVtZW50YXRpb25TdXBwb3J0IiwiSW1wbGVtZW50YXRpb25TdXBwb3J0IiwiaHlicmlkSGVhbHRoTW9uaXRvciIsIkh5YnJpZEhlYWx0aE1vbml0b3IiLCJraXJvQnJpZGdlIiwiS2lyb0JyaWRnZSIsInNlY3VyaXR5UG9zdHVyZU1vbml0b3IiLCJTZWN1cml0eVBvc3R1cmVNb25pdG9yIiwic3lzdGVtUmVzb3VyY2VNb25pdG9yIiwiU3lzdGVtUmVzb3VyY2VNb25pdG9yIiwiZW5hYmxlZCIsIm1vbml0b3JpbmdJbnRlcnZhbE1zIiwiYWxlcnRDaGVja0ludGVydmFsTXMiLCJ0aHJlc2hvbGRzIiwiY3B1V2FybmluZ1BlcmNlbnQiLCJjcHVDcml0aWNhbFBlcmNlbnQiLCJtZW1vcnlXYXJuaW5nTUIiLCJtZW1vcnlDcml0aWNhbE1CIiwiY29zdEJ1ZGdldCIsImRhaWx5TGltaXQiLCJtb250aGx5TGltaXQiLCJhbGVydFRocmVzaG9sZHMiLCJoYXJkU3RvcCIsImNvc3RQZXJmb3JtYW5jZU9wdGltaXplciIsIkNvc3RQZXJmb3JtYW5jZU9wdGltaXplciIsImVtZXJnZW5jeVNodXRkb3duTWFuYWdlciIsIkVtZXJnZW5jeVNodXRkb3duTWFuYWdlciIsImVuYWJsZUF1dG9TaHV0ZG93biIsInNodXRkb3duVGhyZXNob2xkcyIsImVycm9yUmF0ZSIsImxhdGVuY3lNcyIsImNvc3RFdXJvUGVySG91ciIsImNvbnNlY3V0aXZlRmFpbHVyZXMiLCJub3RpZmljYXRpb25DaGFubmVscyIsInJlY292ZXJ5Q29uZmlnIiwiYXV0b1JlY292ZXJ5RW5hYmxlZCIsInJlY292ZXJ5RGVsYXlNcyIsImhlYWx0aENoZWNrSW50ZXJ2YWxNcyIsIm1heFJlY292ZXJ5QXR0ZW1wdHMiLCJhY3RpdmF0ZSIsImxvZyIsInN1cHBvcnRNb2RlRW5hYmxlZCIsImlzQmVkcm9ja1N1cHBvcnRNb2RlRW5hYmxlZCIsIm1lc3NhZ2UiLCJzdWNjZXNzIiwidGltZXN0YW1wIiwiRGF0ZSIsImNvbmZpZ3VyYXRpb24iLCJ2YWxpZGF0aW9uIiwidmFsaWRhdGVCZWRyb2NrU3VwcG9ydE1vZGVGbGFncyIsImlzVmFsaWQiLCJlcnJvcnMiLCJqb2luIiwidmFsaWRhdGlvblJlc3VsdHMiLCJiZWRyb2NrRW5hYmxlZCIsImlzUHJvdmlkZXJFbmFibGVkIiwiYXVkaXRSZXN1bHQiLCJydW5JbmZyYXN0cnVjdHVyZUF1ZGl0Iiwib3ZlcmFsbEhlYWx0aCIsInN0YXJ0TW9uaXRvcmluZyIsImVycm9yIiwiRXJyb3IiLCJkZWFjdGl2YXRlIiwic3RvcE1vbml0b3JpbmciLCJkaXNhYmxlQmVkcm9ja1N1cHBvcnRNb2RlU2FmZWx5IiwiZ2V0U3VwcG9ydE1vZGVTdGF0dXMiLCJpc0FjdGl2ZSIsInZhbGlkYXRlQ29tcGxpYW5jZUZvclN1cHBvcnRPcGVyYXRpb24iLCJjaXJjdWl0QnJlYWtlclN0YXR1cyIsImdldENpcmN1aXRCcmVha2VyU3RhdHVzIiwiZGV0ZWN0ZWRJc3N1ZXMiLCJpZCIsInNldmVyaXR5IiwiY2F0ZWdvcnkiLCJkZXNjcmlwdGlvbiIsImFmZmVjdGVkQ29tcG9uZW50cyIsImRldGVjdGVkQXQiLCJpbXBsZW1lbnRhdGlvbkdhcHMiLCJyZWNvbW1lbmRhdGlvbnMiLCJleHBlY3RlZEltcGFjdCIsImltcGxlbWVudGF0aW9uU3RlcHMiLCJjb21wbGlhbmNlU3RhdHVzIiwiZ2RwckNvbXBsaWFudCIsImRhdGFSZXNpZGVuY3lDb21wbGlhbnQiLCJhdWRpdFRyYWlsQ29tcGxldGUiLCJpc3N1ZXMiLCJleGVjdXRlIiwidHNsaWJfMSIsIl9fYXdhaXRlciIsInBlcmZvcm1TeXN0ZW1IZWFsdGhDaGVjayIsImdhcHMiLCJmbGFnVmFsaWRhdGlvbiIsInZhbGlkYXRlQWxsRmxhZ3MiLCJoYXNDcml0aWNhbEVycm9ycyIsInNvbWUiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwicHVzaCIsInByb3ZpZGVycyIsInByb3ZpZGVyIiwiY3JpdGljYWxJc3N1ZXMiLCJmaWx0ZXIiLCJpIiwiaGlnaElzc3VlcyIsIm1lZGl1bUlzc3VlcyIsImxlbmd0aCIsInJlc3VsdCIsImVycm9yTWVzc2FnZSIsImlzQ2lyY3VpdEJyZWFrZXJFcnJvciIsImhhbmRsZUNpcmN1aXRCcmVha2VyRmFpbHVyZSIsImZhbGxiYWNrUmVzdWx0IiwiT2JqZWN0IiwiYXNzaWduIiwiZmFsbGJhY2tFcnJvciIsInRyaWdnZXJFbWVyZ2VuY3lQcm9jZWR1cmVzIiwicHJpbWFyeUVycm9yIiwiU3RyaW5nIiwibG9nU3VwcG9ydE1vZGVFdmVudCIsIm9wZXJhdGlvbiIsImVuYWJsZU1ldGFNb25pdG9yaW5nIiwicHJvdmlkZUZhbGxiYWNrU3VwcG9ydCIsImNvbnRleHQiLCJzdXBwb3J0VHlwZSIsImFjdGlvbnNQZXJmb3JtZWQiLCJhY3Rpb24iLCJkZXRhaWxzIiwiZGlhZ25vc3RpY3MiLCJzeXN0ZW1IZWFsdGgiLCJwZXJmb3JtYW5jZU1ldHJpY3MiLCJyZXNwb25zZVRpbWUiLCJtZW1vcnlVc2FnZSIsImNwdVVzYWdlIiwibmV0d29ya0xhdGVuY3kiLCJlcnJvckxvZ3MiLCJuZXh0U3RlcHMiLCJzdXBwb3J0UmVzdWx0IiwiZXhlY3V0ZVdpdGhDaXJjdWl0QnJlYWtlclByb3RlY3Rpb24iLCJwZXJmb3JtRmFsbGJhY2tTdXBwb3J0IiwicHJpb3JpdHkiLCJvcGVyYXRpb25GbiIsInJvdXRpbmdEZWNpc2lvbiIsIm1ha2VSb3V0aW5nRGVjaXNpb24iLCJzZWxlY3RlZFJvdXRlIiwicmVhc29uIiwiYWN0aW9ucyIsImVycm9yVHlwZSIsImFmZmVjdGVkU3lzdGVtcyIsInNlbmREaWFnbm9zdGljc1RvS2lybyIsInJlY2VpdmVLaXJvRXhlY3V0aW9uRGF0YSIsImV4ZWN1dGlvbkRhdGEiLCJlcnJvckRldGFpbHMiLCJ2YWxpZGF0ZUNvbXBsaWFuY2VTdGF0dXMiLCJjb21wbGlhbmNlU3VtbWFyeSIsImdldENvbXBsaWFuY2VTdW1tYXJ5IiwiYmVkcm9ja0NvbXBsaWFuY2UiLCJ2ZXJpZnlQcm92aWRlckNvbXBsaWFuY2UiLCJ2YWxpZGF0ZUdEUFJDb21wbGlhbmNlIiwiZXVEYXRhUmVzaWRlbmN5Q29tcGxpYW50IiwidmFsaWRhdGVFVURhdGFSZXNpZGVuY3lDb21wbGlhbmNlIiwidmlvbGF0aW9ucyIsIm92ZXJhbGxDb21wbGlhbmNlIiwiY29tcGxpYW50IiwicmVjZW50VmlvbGF0aW9ucyIsInBlbmRpbmdBY3Rpb25zIiwiaXNDb21wbGlhbnQiLCJ2aW9sYXRpb25zQ291bnQiLCJyZWNvbW1lbmRhdGlvbnNDb3VudCIsImJlZHJvY2tDb21wbGlhbnQiLCJsYXN0Q2hlY2tlZCIsImNvbXBsaWFuY2VSZXBvcnQiLCJnZW5lcmF0ZUh5YnJpZENvbXBsaWFuY2VSZXBvcnQiLCJjb21wbGlhbmNlU2NvcmUiLCJkaXJlY3RCZWRyb2NrQ29tcGxpYW50Iiwicm91dGluZ1BhdGhDb21wbGlhbmNlIiwiZGlyZWN0QmVkcm9jayIsIm1jcEludGVncmF0aW9uQ29tcGxpYW50IiwibWNwSW50ZWdyYXRpb24iLCJtYXAiLCJ2IiwiY3Jvc3NQYXRoQ29tcGxpYW50IiwidmFsdWVzIiwiY3Jvc3NQYXRoQ29tcGxpYW5jZSIsImV2ZXJ5IiwiQm9vbGVhbiIsInRvdGFsV2FybmluZ3MiLCJ3YXJuaW5ncyIsImJlZHJvY2tBZ3JlZW1lbnQiLCJnZXRBZ3JlZW1lbnQiLCJldURhdGFSZXNpZGVuY3kiLCJldVJlZ2lvbkNvbmZpZ3VyZWQiLCJ2YWxpZGF0ZUJlZHJvY2tFVVJlZ2lvbkNvbmZpZ3VyYXRpb24iLCJ2YWxpZGF0ZVBJSURldGVjdGlvbkNvbmZpZ3VyYXRpb24iLCJwaWlEZXRlY3Rpb25FbmFibGVkIiwiZ2V0RmxhZyIsInBpaVJlZGFjdGlvbkVuYWJsZWQiLCJiZWRyb2NrUmVnaW9uIiwiQVdTX0JFRFJPQ0tfUkVHSU9OIiwiZXVSZWdpb25zIiwib3BlcmF0aW9uVHlwZV8xIiwib3BlcmF0aW9uVHlwZSIsInJvdXRlVHlwZSIsInJvdXRpbmdQYXRoIiwiY29ycmVsYXRpb25JZCIsIm5vdyIsInZhbGlkYXRpb25SZXN1bHQiLCJ2YWxpZGF0ZUJlZm9yZVJvdXRpbmciLCJhbGxvd2VkIiwibW9ja1JlcXVlc3QiLCJwcm9tcHQiLCJkb21haW4iLCJpbnRlbnQiLCJlbmZvcmNlQ29tcGxpYW5jZSIsImNyZWF0ZUNvbXBsaWFuY2VSZXBvcnRGb3JTdXBwb3J0TW9kZSIsInJlcG9ydElkIiwicmVwb3J0Iiwic3VwcG9ydE1vZGVDb21wbGlhbmNlIiwib3ZlcmFsbENvbXBsaWFudCIsImh5YnJpZFJvdXRpbmdDb21wbGlhbmNlIiwibWNwUGF0aENvbXBsaWFudCIsImRpcmVjdEJlZHJvY2tQYXRoQ29tcGxpYW50IiwiZm9yRWFjaCIsImlzT3BlbiIsImZvcmNlQ2xvc2UiLCJzdXBwb3J0Q29uZmlnIiwiSlNPTiIsInN0cmluZ2lmeSIsInN0YXJ0SGVhbHRoTW9uaXRvcmluZyIsImVuYWJsZWRQYXRocyIsImhlYWx0aE1vbml0b3JpbmdBY3RpdmUiLCJjaGVja1NlY3VyaXR5UG9zdHVyZSIsImlzTW9uaXRvcmluZ0FjdGl2ZSIsInBvc3R1cmVTdGF0dXMiLCJhc3Nlc3NTZWN1cml0eVBvc3R1cmUiLCJ2dWxuZXJhYmlsaXRpZXMiLCJyb3V0ZXMiLCJtY3AiLCJpbW1lZGlhdGUiLCJyIiwic2hvcnRUZXJtIiwic2VjdXJpdHlTY29yZSIsIm92ZXJhbGwiLCJsYXN0QXVkaXQiLCJsYXN0QXNzZXNzbWVudCIsInZ1bG5lcmFiaWxpdHlDb3VudCIsInRocmVhdExldmVsIiwiY29tcG9uZW50IiwicmVtZWRpYXRpb24iLCJkaXJlY3RCZWRyb2NrT3BlbiIsImRpcmVjdEJlZHJvY2tNZXRyaWNzIiwiZ2V0TWV0cmljcyIsIm1jcFJvdXRlck9wZW4iLCJtY3BSb3V0ZXJNZXRyaWNzIiwic3RhdHVzIiwic3RhdGUiLCJtZXRyaWNzIiwiZmFpbGVkUGF0aCIsImZhbGxiYWNrUm91dGUiLCJmYWxsYmFja1Byb3ZpZGVyIiwiZmFsbGJhY2tBdmFpbGFibGUiLCJyZWNvcmRGYWlsdXJlIiwic2VuZEVtZXJnZW5jeU5vdGlmaWNhdGlvbnMiLCJzZXRUaW1lb3V0IiwicmVzZXRBbGwiLCJyZXNldEVycm9yIiwiY2hhbm5lbCIsIm1vbml0b3JDb3N0VGhyZXNob2xkcyIsImNvc3RTdW1tYXJ5IiwiZ2V0Q29zdFN1bW1hcnkiLCJnZXRQZXJmb3JtYW5jZU1ldHJpY3MiLCJsb2dFdmVudCIsImV2ZW50VHlwZSIsInVzZXJJZCIsInJlc291cmNlVHlwZSIsInJlc291cmNlSWQiLCJtZXRhZGF0YSIsImRhaWx5U3BlbnQiLCJkYWlseSIsInNwZW50IiwibW9udGhseVNwZW50IiwibW9udGhseSIsImRhaWx5UmVtYWluaW5nIiwicmVtYWluaW5nIiwibW9udGhseVJlbWFpbmluZyIsImNhY2hlSGl0UmF0ZSIsImlwQWRkcmVzcyIsInVzZXJBZ2VudCIsImNvc3RQcmVzc3VyZSIsImxpbWl0IiwidHJpZ2dlclNodXRkb3duIiwiY29zdEV1cm8iLCJhZGRpdGlvbmFsSW5mbyIsImN1cnJlbnRTcGVuZCIsInByb2plY3RlZFNwZW5kIiwiZ2V0RGF0ZSIsImJ1ZGdldFV0aWxpemF0aW9uIiwiY29zdEJyZWFrZG93biIsImdlbmVyYXRlQ29zdFJlY29tbWVuZGF0aW9ucyIsImRhaWx5VXRpbGl6YXRpb24iLCJtb250aGx5VXRpbGl6YXRpb24iLCJnZXRDb3N0UGVyZm9ybWFuY2VTdGF0dXMiLCJzaHV0ZG93blN0YXR1cyIsImdldFN0YXR1cyIsImNvc3QiLCJwZXJmb3JtYW5jZSIsImVtZXJnZW5jeVNodXRkb3duIiwidHJhY2tTdXBwb3J0T3BlcmF0aW9uQ29zdCIsIm9wZXJhdGlvbklkIiwicm91dGUiLCJ0b2tlbnNVc2VkIiwiY29zdEJ1ZGdldE1vbml0b3IiLCJ0cmFja09wZXJhdGlvbkNvc3QiLCJzdXBwb3J0TW9kZSIsImJlZHJvY2tBY3RpdmF0aW9uIiwib3B0aW1pemVQZXJmb3JtYW5jZSIsImN1cnJlbnRNZXRyaWNzIiwib3B0aW1pemF0aW9uT3Bwb3J0dW5pdGllcyIsImV4cGVjdGVkSW1wcm92ZW1lbnRzIiwiZW5hYmxlRW1lcmdlbmN5TW9kZSIsInZhbGlkYXRlUHJvbXB0VGVtcGxhdGVzIiwidGVtcGxhdGVDb3VudCIsImVuYWJsZVBJSVJlZGFjdGlvbiIsInJ1blJlZFRlYW1FdmFsdWF0aW9ucyIsImlzRW5hYmxlZCIsInBhc3NlZCIsInRlc3RSZXN1bHRzIiwib3ZlcmFsbFNjb3JlIiwiZXZhbHVhdG9yIiwiUmVkVGVhbUV2YWx1YXRvciIsImVuYWJsZVByb21wdEluamVjdGlvblRlc3RzIiwiZW5hYmxlSmFpbGJyZWFrVGVzdHMiLCJlbmFibGVEYXRhRXhmaWx0cmF0aW9uVGVzdHMiLCJlbmFibGVQcml2aWxlZ2VFc2NhbGF0aW9uVGVzdHMiLCJlbmFibGVEZW5pYWxPZlNlcnZpY2VUZXN0cyIsInRlc3REZXB0aCIsIm1heFRlc3RzUGVyQ2F0ZWdvcnkiLCJ0aW1lb3V0TXMiLCJydW5FdmFsdWF0aW9uIiwicmVxdWVzdElkIiwiZXZhbHVhdGlvbklkIiwidnVsbmVyYWJpbGl0aWVzRGV0ZWN0ZWQiLCJ0b3RhbFRlc3RzIiwidGVzdHNQYXNzZWQiLCJ0ZXN0c0ZhaWxlZCIsIm92ZXJhbGxTZWN1cml0eVNjb3JlIiwiY3JpdGljYWxWdWxuZXJhYmlsaXRpZXMiLCJoaWdoVnVsbmVyYWJpbGl0aWVzIiwiZXhlY3V0aW9uVGltZU1zIiwidGVzdE5hbWUiLCJtZWRpdW1WdWxuZXJhYmlsaXRpZXMiLCJsb3dWdWxuZXJhYmlsaXRpZXMiLCJvdmVycmlkZXMiLCJlbnZpcm9ubWVudHMiLCJhdWRpdEludGVydmFsIiwibW9uaXRvcmluZ0xldmVsIiwiYXV0b1Jlc29sdXRpb25FbmFibGVkIiwiZ2V0UmVzb3VyY2VNb25pdG9yaW5nU3RhdHVzIiwic3VtbWFyeSIsImdldFJlc291cmNlU3VtbWFyeSIsImFsZXJ0cyIsImdldEFjdGl2ZUFsZXJ0cyIsImlzTW9uaXRvcmluZyIsImlzV2l0aGluVGhyZXNob2xkcyIsImN1cnJlbnQiLCJ2YWxpZGF0ZVJlc291cmNlT3ZlcmhlYWQiLCJnZXRDdXJyZW50TWV0cmljcyIsImNwdVVzYWdlUGVyY2VudCIsInRvRml4ZWQiLCJtZW1vcnlVc2FnZU1CIiwiZ2V0UGVyZm9ybWFuY2VNZXRyaWNzV2l0aE92ZXJoZWFkIiwicmVzb3VyY2VPdmVyaGVhZCIsImVtZXJnZW5jeVNodXRkb3duT25SZXNvdXJjZU92ZXJoZWFkIiwidHJpZ2dlciIsInRyaWdnZXJFbWVyZ2VuY3lTaHV0ZG93biIsInByZWZpeCIsImRlZmF1bHQiXSwic291cmNlcyI6WyIvVXNlcnMvbWF0YmFraC12aXNpYmlsaXR5LWJvb3N0LjIwMjUwOTIwL3NyYy9saWIvYWktb3JjaGVzdHJhdG9yL2JlZHJvY2stc3VwcG9ydC1tYW5hZ2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQmVkcm9jayBTdXBwb3J0IE1hbmFnZXIgLSBDb3JlIG9yY2hlc3RyYXRvciBmb3Igc3VwcG9ydCBvcGVyYXRpb25zXG4gKlxuICogVGhpcyBtb2R1bGUgaW1wbGVtZW50cyB0aGUgY2VudHJhbCBCZWRyb2NrIFN1cHBvcnQgTWFuYWdlciB0aGF0IGNvb3JkaW5hdGVzXG4gKiBpbmZyYXN0cnVjdHVyZSB2YWxpZGF0aW9uLCBtZXRhLW1vbml0b3JpbmcsIGFuZCBpbXBsZW1lbnRhdGlvbiBzdXBwb3J0IHVzaW5nXG4gKiBhIGh5YnJpZCByb3V0aW5nIGFwcHJvYWNoIChkaXJlY3QgQmVkcm9jayArIE1DUCBpbnRlZ3JhdGlvbikuXG4gKi9cblxuaW1wb3J0IHsgQmVkcm9ja0FkYXB0ZXIgfSBmcm9tIFwiLi9hZGFwdGVycy9iZWRyb2NrLWFkYXB0ZXJcIjtcbmltcG9ydCB7IEFpRmVhdHVyZUZsYWdzIH0gZnJvbSBcIi4vYWktZmVhdHVyZS1mbGFnc1wiO1xuaW1wb3J0IHsgQXVkaXRUcmFpbFN5c3RlbSB9IGZyb20gXCIuL2F1ZGl0LXRyYWlsLXN5c3RlbVwiO1xuaW1wb3J0IHsgQ2lyY3VpdEJyZWFrZXIgfSBmcm9tIFwiLi9jaXJjdWl0LWJyZWFrZXJcIjtcbmltcG9ydCB7IENvbXBsaWFuY2VJbnRlZ3JhdGlvbiB9IGZyb20gXCIuL2NvbXBsaWFuY2UtaW50ZWdyYXRpb25cIjtcbmltcG9ydCB7IENvc3RQZXJmb3JtYW5jZU9wdGltaXplciB9IGZyb20gXCIuL2Nvc3QtcGVyZm9ybWFuY2Utb3B0aW1pemVyXCI7XG5pbXBvcnQgeyBEaXJlY3RCZWRyb2NrQ2xpZW50IH0gZnJvbSBcIi4vZGlyZWN0LWJlZHJvY2stY2xpZW50XCI7XG5pbXBvcnQgeyBFbWVyZ2VuY3lTaHV0ZG93bk1hbmFnZXIgfSBmcm9tIFwiLi9lbWVyZ2VuY3ktc2h1dGRvd24tbWFuYWdlclwiO1xuaW1wb3J0IHsgR0RQUkh5YnJpZENvbXBsaWFuY2VWYWxpZGF0b3IgfSBmcm9tIFwiLi9nZHByLWh5YnJpZC1jb21wbGlhbmNlLXZhbGlkYXRvclwiO1xuaW1wb3J0IHsgSHlicmlkSGVhbHRoTW9uaXRvciB9IGZyb20gXCIuL2h5YnJpZC1oZWFsdGgtbW9uaXRvclwiO1xuaW1wb3J0IHsgSW1wbGVtZW50YXRpb25TdXBwb3J0IH0gZnJvbSBcIi4vaW1wbGVtZW50YXRpb24tc3VwcG9ydFwiO1xuaW1wb3J0IHsgSW5mcmFzdHJ1Y3R1cmVBdWRpdG9yIH0gZnJvbSBcIi4vaW5mcmFzdHJ1Y3R1cmUtYXVkaXRvclwiO1xuaW1wb3J0IHsgSW50ZWxsaWdlbnRSb3V0ZXIgfSBmcm9tIFwiLi9pbnRlbGxpZ2VudC1yb3V0ZXJcIjtcbmltcG9ydCB7IEtpcm9CcmlkZ2UgfSBmcm9tIFwiLi9raXJvLWJyaWRnZVwiO1xuaW1wb3J0IHsgTUNQUm91dGVyIH0gZnJvbSBcIi4vbWNwLXJvdXRlclwiO1xuaW1wb3J0IHsgTWV0YU1vbml0b3IgfSBmcm9tIFwiLi9tZXRhLW1vbml0b3JcIjtcbmltcG9ydCB7IFByb3ZpZGVyQWdyZWVtZW50Q29tcGxpYW5jZSB9IGZyb20gXCIuL3Byb3ZpZGVyLWFncmVlbWVudC1jb21wbGlhbmNlXCI7XG5pbXBvcnQge1xuICBSZWRUZWFtRXZhbHVhdGlvblJlcG9ydCxcbiAgUmVkVGVhbUV2YWx1YXRvcixcbn0gZnJvbSBcIi4vcmVkLXRlYW0tZXZhbHVhdG9yXCI7XG5pbXBvcnQgeyBTZWN1cml0eVBvc3R1cmVNb25pdG9yIH0gZnJvbSBcIi4vc2VjdXJpdHktcG9zdHVyZS1tb25pdG9yXCI7XG5pbXBvcnQgeyBTeXN0ZW1SZXNvdXJjZU1vbml0b3IgfSBmcm9tIFwiLi9zeXN0ZW0tcmVzb3VyY2UtbW9uaXRvclwiO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG4vLyBDb3JlIERhdGEgU3RydWN0dXJlc1xuZXhwb3J0IGludGVyZmFjZSBCZWRyb2NrU3VwcG9ydENvbmZpZyB7XG4gIGVuYWJsZWQ6IGJvb2xlYW47XG4gIGVudmlyb25tZW50czogKFwiZGV2ZWxvcG1lbnRcIiB8IFwic3RhZ2luZ1wiIHwgXCJwcm9kdWN0aW9uXCIpW107XG4gIGF1ZGl0SW50ZXJ2YWw6IG51bWJlcjtcbiAgbW9uaXRvcmluZ0xldmVsOiBcImJhc2ljXCIgfCBcImRldGFpbGVkXCIgfCBcImNvbXByZWhlbnNpdmVcIjtcbiAgYXV0b1Jlc29sdXRpb25FbmFibGVkOiBib29sZWFuO1xuICBub3RpZmljYXRpb25DaGFubmVsczogTm90aWZpY2F0aW9uQ2hhbm5lbFtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5vdGlmaWNhdGlvbkNoYW5uZWwge1xuICB0eXBlOiBcImVtYWlsXCIgfCBcInNsYWNrXCIgfCBcIndlYmhvb2tcIjtcbiAgZW5kcG9pbnQ6IHN0cmluZztcbiAgZW5hYmxlZDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbmZyYXN0cnVjdHVyZUF1ZGl0UmVzdWx0IHtcbiAgdGltZXN0YW1wOiBEYXRlO1xuICBvdmVyYWxsSGVhbHRoOiBcImhlYWx0aHlcIiB8IFwid2FybmluZ1wiIHwgXCJjcml0aWNhbFwiO1xuICBkZXRlY3RlZElzc3VlczogSW5mcmFzdHJ1Y3R1cmVJc3N1ZVtdO1xuICBpbXBsZW1lbnRhdGlvbkdhcHM6IEltcGxlbWVudGF0aW9uR2FwW107XG4gIHJlY29tbWVuZGF0aW9uczogUmVjb21tZW5kYXRpb25bXTtcbiAgY29tcGxpYW5jZVN0YXR1czogQ29tcGxpYW5jZVN0YXR1cztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbmZyYXN0cnVjdHVyZUlzc3VlIHtcbiAgaWQ6IHN0cmluZztcbiAgc2V2ZXJpdHk6IFwibG93XCIgfCBcIm1lZGl1bVwiIHwgXCJoaWdoXCIgfCBcImNyaXRpY2FsXCI7XG4gIGNhdGVnb3J5OiBcInBlcmZvcm1hbmNlXCIgfCBcInNlY3VyaXR5XCIgfCBcImNvbXBsaWFuY2VcIiB8IFwiYXZhaWxhYmlsaXR5XCI7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIGFmZmVjdGVkQ29tcG9uZW50czogc3RyaW5nW107XG4gIGRldGVjdGVkQXQ6IERhdGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW1wbGVtZW50YXRpb25HYXAge1xuICBpZDogc3RyaW5nO1xuICBtb2R1bGU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgcHJpb3JpdHk6IFwibG93XCIgfCBcIm1lZGl1bVwiIHwgXCJoaWdoXCIgfCBcImNyaXRpY2FsXCI7XG4gIGVzdGltYXRlZEVmZm9ydDogc3RyaW5nO1xuICBkZXBlbmRlbmNpZXM6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlY29tbWVuZGF0aW9uIHtcbiAgaWQ6IHN0cmluZztcbiAgdHlwZTogXCJpbW1lZGlhdGVcIiB8IFwic2hvcnRfdGVybVwiIHwgXCJsb25nX3Rlcm1cIjtcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgZXhwZWN0ZWRJbXBhY3Q6IHN0cmluZztcbiAgaW1wbGVtZW50YXRpb25TdGVwczogc3RyaW5nW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGxpYW5jZVN0YXR1cyB7XG4gIGdkcHJDb21wbGlhbnQ6IGJvb2xlYW47XG4gIGRhdGFSZXNpZGVuY3lDb21wbGlhbnQ6IGJvb2xlYW47XG4gIGF1ZGl0VHJhaWxDb21wbGV0ZTogYm9vbGVhbjtcbiAgaXNzdWVzOiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFeGVjdXRpb25NZXRhZGF0YSB7XG4gIGV4ZWN1dGlvbklkOiBzdHJpbmc7XG4gIHRpbWVzdGFtcDogRGF0ZTtcbiAgb3BlcmF0aW9uOiBzdHJpbmc7XG4gIGR1cmF0aW9uOiBudW1iZXI7XG4gIHN1Y2Nlc3M6IGJvb2xlYW47XG4gIGVycm9yRGV0YWlscz86IHN0cmluZztcbiAgcGVyZm9ybWFuY2VNZXRyaWNzOiBQZXJmb3JtYW5jZU1ldHJpY3M7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGVyZm9ybWFuY2VNZXRyaWNzIHtcbiAgcmVzcG9uc2VUaW1lOiBudW1iZXI7XG4gIG1lbW9yeVVzYWdlOiBudW1iZXI7XG4gIGNwdVVzYWdlOiBudW1iZXI7XG4gIG5ldHdvcmtMYXRlbmN5OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmFpbHVyZUNvbnRleHQge1xuICBvcGVyYXRpb246IHN0cmluZztcbiAgZXJyb3JUeXBlOiBzdHJpbmc7XG4gIGVycm9yTWVzc2FnZTogc3RyaW5nO1xuICB0aW1lc3RhbXA6IERhdGU7XG4gIGFmZmVjdGVkU3lzdGVtczogc3RyaW5nW107XG4gIHNldmVyaXR5OiBcImxvd1wiIHwgXCJtZWRpdW1cIiB8IFwiaGlnaFwiIHwgXCJjcml0aWNhbFwiO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN1cHBvcnRSZXN1bHQge1xuICBzdWNjZXNzOiBib29sZWFuO1xuICBzdXBwb3J0VHlwZTogXCJpbmZyYXN0cnVjdHVyZVwiIHwgXCJleGVjdXRpb25cIiB8IFwiaW1wbGVtZW50YXRpb25cIjtcbiAgYWN0aW9uc1BlcmZvcm1lZDogU3VwcG9ydEFjdGlvbltdO1xuICBkaWFnbm9zdGljczogRGlhZ25vc3RpY0RhdGE7XG4gIG5leHRTdGVwczogc3RyaW5nW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3VwcG9ydEFjdGlvbiB7XG4gIGFjdGlvbjogc3RyaW5nO1xuICB0aW1lc3RhbXA6IERhdGU7XG4gIHJlc3VsdDogXCJzdWNjZXNzXCIgfCBcImZhaWx1cmVcIiB8IFwicGFydGlhbFwiO1xuICBkZXRhaWxzOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGlhZ25vc3RpY0RhdGEge1xuICBzeXN0ZW1IZWFsdGg6IFJlY29yZDxzdHJpbmcsIGFueT47XG4gIHBlcmZvcm1hbmNlTWV0cmljczogUGVyZm9ybWFuY2VNZXRyaWNzO1xuICBlcnJvckxvZ3M6IHN0cmluZ1tdO1xuICByZWNvbW1lbmRhdGlvbnM6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJlZHJvY2tTdXBwb3J0UmVzdWx0IHtcbiAgc3VjY2VzczogYm9vbGVhbjtcbiAgbWVzc2FnZTogc3RyaW5nO1xuICB0aW1lc3RhbXA6IERhdGU7XG4gIGNvbmZpZ3VyYXRpb246IEJlZHJvY2tTdXBwb3J0Q29uZmlnO1xuICB2YWxpZGF0aW9uUmVzdWx0cz86IGFueTtcbn1cblxuLy8gU2VjdXJpdHkgJiBDb21wbGlhbmNlIFR5cGVzXG5leHBvcnQgaW50ZXJmYWNlIENvbXBsaWFuY2VWYWxpZGF0aW9uUmVzdWx0IHtcbiAgaXNDb21wbGlhbnQ6IGJvb2xlYW47XG4gIHZpb2xhdGlvbnM6IHN0cmluZ1tdO1xuICByZWNvbW1lbmRhdGlvbnM6IHN0cmluZ1tdO1xuICBsYXN0Q2hlY2tlZDogRGF0ZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZWN1cml0eUF1ZGl0UmVzdWx0IHtcbiAgc2VjdXJpdHlTY29yZTogbnVtYmVyO1xuICB2dWxuZXJhYmlsaXRpZXM6IFNlY3VyaXR5VnVsbmVyYWJpbGl0eVtdO1xuICByZWNvbW1lbmRhdGlvbnM6IHN0cmluZ1tdO1xuICBsYXN0QXVkaXQ6IERhdGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VjdXJpdHlWdWxuZXJhYmlsaXR5IHtcbiAgaWQ6IHN0cmluZztcbiAgc2V2ZXJpdHk6IFwibG93XCIgfCBcIm1lZGl1bVwiIHwgXCJoaWdoXCIgfCBcImNyaXRpY2FsXCI7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIGNvbXBvbmVudDogc3RyaW5nO1xuICByZW1lZGlhdGlvbjogc3RyaW5nO1xufVxuXG4vLyBDb3N0ICYgUGVyZm9ybWFuY2UgVHlwZXNcbmV4cG9ydCBpbnRlcmZhY2UgQ29zdEFuYWx5c2lzIHtcbiAgY3VycmVudFNwZW5kOiBudW1iZXI7XG4gIHByb2plY3RlZFNwZW5kOiBudW1iZXI7XG4gIGJ1ZGdldFV0aWxpemF0aW9uOiBudW1iZXI7XG4gIGNvc3RCcmVha2Rvd246IFJlY29yZDxzdHJpbmcsIG51bWJlcj47XG4gIHJlY29tbWVuZGF0aW9uczogc3RyaW5nW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGVyZm9ybWFuY2VPcHRpbWl6YXRpb24ge1xuICBjdXJyZW50TWV0cmljczogUGVyZm9ybWFuY2VNZXRyaWNzO1xuICBvcHRpbWl6YXRpb25PcHBvcnR1bml0aWVzOiBPcHRpbWl6YXRpb25PcHBvcnR1bml0eVtdO1xuICBleHBlY3RlZEltcHJvdmVtZW50czogUmVjb3JkPHN0cmluZywgbnVtYmVyPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPcHRpbWl6YXRpb25PcHBvcnR1bml0eSB7XG4gIGFyZWE6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgZXhwZWN0ZWRJbXByb3ZlbWVudDogc3RyaW5nO1xuICBpbXBsZW1lbnRhdGlvbkVmZm9ydDogXCJsb3dcIiB8IFwibWVkaXVtXCIgfCBcImhpZ2hcIjtcbn1cblxuLy8gVGVtcGxhdGUgJiBQcm9tcHQgVHlwZXNcbmV4cG9ydCBpbnRlcmZhY2UgVGVtcGxhdGVWYWxpZGF0aW9uUmVzdWx0IHtcbiAgaXNWYWxpZDogYm9vbGVhbjtcbiAgZXJyb3JzOiBzdHJpbmdbXTtcbiAgd2FybmluZ3M6IHN0cmluZ1tdO1xuICB0ZW1wbGF0ZUNvdW50OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VjdXJpdHlUZXN0UmVzdWx0IHtcbiAgcGFzc2VkOiBib29sZWFuO1xuICB0ZXN0UmVzdWx0czogU2VjdXJpdHlUZXN0W107XG4gIG92ZXJhbGxTY29yZTogbnVtYmVyO1xuICByZWNvbW1lbmRhdGlvbnM6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlY3VyaXR5VGVzdCB7XG4gIHRlc3ROYW1lOiBzdHJpbmc7XG4gIHBhc3NlZDogYm9vbGVhbjtcbiAgZGV0YWlsczogc3RyaW5nO1xuICBzZXZlcml0eTogXCJsb3dcIiB8IFwibWVkaXVtXCIgfCBcImhpZ2hcIiB8IFwiY3JpdGljYWxcIjtcbn1cblxuLyoqXG4gKiBCZWRyb2NrIFN1cHBvcnQgTWFuYWdlciBJbnRlcmZhY2VcbiAqXG4gKiBEZWZpbmVzIHRoZSBjb250cmFjdCBmb3IgdGhlIEJlZHJvY2sgU3VwcG9ydCBNYW5hZ2VyIHdpdGggaHlicmlkIHJvdXRpbmcgY2FwYWJpbGl0aWVzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUJlZHJvY2tTdXBwb3J0TWFuYWdlciB7XG4gIC8vIEFjdGl2YXRpb24gQ29udHJvbFxuICBhY3RpdmF0ZSgpOiBQcm9taXNlPEJlZHJvY2tTdXBwb3J0UmVzdWx0PjtcbiAgZGVhY3RpdmF0ZSgpOiBQcm9taXNlPHZvaWQ+O1xuICBpc0FjdGl2ZSgpOiBib29sZWFuO1xuXG4gIC8vIENvcmUgU3VwcG9ydCBPcGVyYXRpb25zXG4gIHJ1bkluZnJhc3RydWN0dXJlQXVkaXQoKTogUHJvbWlzZTxJbmZyYXN0cnVjdHVyZUF1ZGl0UmVzdWx0PjtcbiAgZW5hYmxlTWV0YU1vbml0b3JpbmcoKTogUHJvbWlzZTx2b2lkPjtcbiAgcHJvdmlkZUZhbGxiYWNrU3VwcG9ydChjb250ZXh0OiBGYWlsdXJlQ29udGV4dCk6IFByb21pc2U8U3VwcG9ydFJlc3VsdD47XG5cbiAgLy8gSW50ZWdyYXRpb24gTWV0aG9kc1xuICBzZW5kRGlhZ25vc3RpY3NUb0tpcm8oZGlhZ25vc3RpY3M6IERpYWdub3N0aWNEYXRhKTogUHJvbWlzZTx2b2lkPjtcbiAgcmVjZWl2ZUtpcm9FeGVjdXRpb25EYXRhKGV4ZWN1dGlvbkRhdGE6IEV4ZWN1dGlvbk1ldGFkYXRhKTogUHJvbWlzZTx2b2lkPjtcblxuICAvLyBTZWN1cml0eSAmIENvbXBsaWFuY2UgSW50ZWdyYXRpb25cbiAgdmFsaWRhdGVDb21wbGlhbmNlU3RhdHVzKCk6IFByb21pc2U8Q29tcGxpYW5jZVZhbGlkYXRpb25SZXN1bHQ+O1xuICBlbmFibGVDaXJjdWl0QnJlYWtlcigpOiBQcm9taXNlPHZvaWQ+O1xuICBjaGVja1NlY3VyaXR5UG9zdHVyZSgpOiBQcm9taXNlPFNlY3VyaXR5QXVkaXRSZXN1bHQ+O1xuXG4gIC8vIENvc3QgJiBQZXJmb3JtYW5jZSBNYW5hZ2VtZW50XG4gIG1vbml0b3JDb3N0VGhyZXNob2xkcygpOiBQcm9taXNlPENvc3RBbmFseXNpcz47XG4gIG9wdGltaXplUGVyZm9ybWFuY2UoKTogUHJvbWlzZTxQZXJmb3JtYW5jZU9wdGltaXphdGlvbj47XG4gIGVuYWJsZUVtZXJnZW5jeU1vZGUoKTogUHJvbWlzZTx2b2lkPjtcblxuICAvLyBUZW1wbGF0ZSAmIFByb21wdCBNYW5hZ2VtZW50XG4gIHZhbGlkYXRlUHJvbXB0VGVtcGxhdGVzKCk6IFByb21pc2U8VGVtcGxhdGVWYWxpZGF0aW9uUmVzdWx0PjtcbiAgZW5hYmxlUElJUmVkYWN0aW9uKCk6IFByb21pc2U8dm9pZD47XG4gIHJ1blJlZFRlYW1FdmFsdWF0aW9ucygpOiBQcm9taXNlPFNlY3VyaXR5VGVzdFJlc3VsdD47XG59XG5cbi8qKlxuICogQmVkcm9jayBTdXBwb3J0IE1hbmFnZXIgSW1wbGVtZW50YXRpb25cbiAqXG4gKiBDZW50cmFsIG9yY2hlc3RyYXRvciBmb3IgQmVkcm9jayBzdXBwb3J0IG9wZXJhdGlvbnMgd2l0aCBoeWJyaWQgcm91dGluZ1xuICovXG5leHBvcnQgY2xhc3MgQmVkcm9ja1N1cHBvcnRNYW5hZ2VyIGltcGxlbWVudHMgSUJlZHJvY2tTdXBwb3J0TWFuYWdlciB7XG4gIHByaXZhdGUgaXNBY3RpdmF0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBjb25maWc6IEJlZHJvY2tTdXBwb3J0Q29uZmlnO1xuICBwcml2YXRlIGZlYXR1cmVGbGFnczogQWlGZWF0dXJlRmxhZ3M7XG4gIHByaXZhdGUgYmVkcm9ja0FkYXB0ZXI6IEJlZHJvY2tBZGFwdGVyO1xuICBwcml2YXRlIGxvZ2dlcjogQ29uc29sZTtcbiAgcHJpdmF0ZSBwcm92aWRlckNvbXBsaWFuY2U6IFByb3ZpZGVyQWdyZWVtZW50Q29tcGxpYW5jZTtcbiAgcHJpdmF0ZSBjb21wbGlhbmNlSW50ZWdyYXRpb246IENvbXBsaWFuY2VJbnRlZ3JhdGlvbjtcbiAgcHJpdmF0ZSBnZHBySHlicmlkVmFsaWRhdG9yOiBHRFBSSHlicmlkQ29tcGxpYW5jZVZhbGlkYXRvcjtcblxuICAvLyBDaXJjdWl0IEJyZWFrZXIgSW50ZWdyYXRpb24gZm9yIEh5YnJpZCBSb3V0aW5nXG4gIHByaXZhdGUgY2lyY3VpdEJyZWFrZXI6IENpcmN1aXRCcmVha2VyO1xuICBwcml2YXRlIGRpcmVjdEJlZHJvY2tDbGllbnQ6IERpcmVjdEJlZHJvY2tDbGllbnQ7XG4gIHByaXZhdGUgbWNwUm91dGVyOiBNQ1BSb3V0ZXI7XG4gIHByaXZhdGUgaW50ZWxsaWdlbnRSb3V0ZXI6IEludGVsbGlnZW50Um91dGVyO1xuICBwcml2YXRlIGF1ZGl0VHJhaWw6IEF1ZGl0VHJhaWxTeXN0ZW07XG5cbiAgLy8gU3VwcG9ydCBPcGVyYXRpb24gQ29tcG9uZW50c1xuICBwcml2YXRlIGluZnJhc3RydWN0dXJlQXVkaXRvcjogSW5mcmFzdHJ1Y3R1cmVBdWRpdG9yO1xuICBwcml2YXRlIG1ldGFNb25pdG9yOiBNZXRhTW9uaXRvcjtcbiAgcHJpdmF0ZSBpbXBsZW1lbnRhdGlvblN1cHBvcnQ6IEltcGxlbWVudGF0aW9uU3VwcG9ydDtcbiAgcHJpdmF0ZSBoeWJyaWRIZWFsdGhNb25pdG9yOiBIeWJyaWRIZWFsdGhNb25pdG9yO1xuICBwcml2YXRlIGtpcm9CcmlkZ2U6IEtpcm9CcmlkZ2U7XG4gIHByaXZhdGUgc2VjdXJpdHlQb3N0dXJlTW9uaXRvcjogU2VjdXJpdHlQb3N0dXJlTW9uaXRvcjtcblxuICAvLyBDb3N0ICYgUGVyZm9ybWFuY2UgTWFuYWdlbWVudCAodXNpbmcgZXhpc3Rpbmcgc3lzdGVtKVxuICBwcml2YXRlIGNvc3RQZXJmb3JtYW5jZU9wdGltaXplcjogQ29zdFBlcmZvcm1hbmNlT3B0aW1pemVyO1xuICBwcml2YXRlIGVtZXJnZW5jeVNodXRkb3duTWFuYWdlcjogRW1lcmdlbmN5U2h1dGRvd25NYW5hZ2VyO1xuXG4gIC8vIFN5c3RlbSBSZXNvdXJjZSBNb25pdG9yaW5nIGZvciA1JSBvdmVyaGVhZCByZXF1aXJlbWVudFxuICBwcml2YXRlIHN5c3RlbVJlc291cmNlTW9uaXRvcjogU3lzdGVtUmVzb3VyY2VNb25pdG9yO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGNvbmZpZz86IFBhcnRpYWw8QmVkcm9ja1N1cHBvcnRDb25maWc+LFxuICAgIGZlYXR1cmVGbGFncz86IEFpRmVhdHVyZUZsYWdzLFxuICAgIGJlZHJvY2tBZGFwdGVyPzogQmVkcm9ja0FkYXB0ZXIsXG4gICAgcHJvdmlkZXJDb21wbGlhbmNlPzogUHJvdmlkZXJBZ3JlZW1lbnRDb21wbGlhbmNlLFxuICAgIGNvbXBsaWFuY2VJbnRlZ3JhdGlvbj86IENvbXBsaWFuY2VJbnRlZ3JhdGlvbixcbiAgICBnZHBySHlicmlkVmFsaWRhdG9yPzogR0RQUkh5YnJpZENvbXBsaWFuY2VWYWxpZGF0b3JcbiAgKSB7XG4gICAgdGhpcy5jb25maWcgPSB0aGlzLmdldERlZmF1bHRDb25maWcoY29uZmlnKTtcbiAgICB0aGlzLmZlYXR1cmVGbGFncyA9IGZlYXR1cmVGbGFncyB8fCBuZXcgQWlGZWF0dXJlRmxhZ3MoKTtcbiAgICB0aGlzLmJlZHJvY2tBZGFwdGVyID0gYmVkcm9ja0FkYXB0ZXIgfHwgbmV3IEJlZHJvY2tBZGFwdGVyKCk7XG4gICAgdGhpcy5sb2dnZXIgPSBjb25zb2xlO1xuICAgIHRoaXMucHJvdmlkZXJDb21wbGlhbmNlID1cbiAgICAgIHByb3ZpZGVyQ29tcGxpYW5jZSB8fCBuZXcgUHJvdmlkZXJBZ3JlZW1lbnRDb21wbGlhbmNlKCk7XG4gICAgdGhpcy5jb21wbGlhbmNlSW50ZWdyYXRpb24gPVxuICAgICAgY29tcGxpYW5jZUludGVncmF0aW9uIHx8IG5ldyBDb21wbGlhbmNlSW50ZWdyYXRpb24oKTtcbiAgICB0aGlzLmdkcHJIeWJyaWRWYWxpZGF0b3IgPVxuICAgICAgZ2Rwckh5YnJpZFZhbGlkYXRvciB8fCBuZXcgR0RQUkh5YnJpZENvbXBsaWFuY2VWYWxpZGF0b3IoKTtcblxuICAgIC8vIEluaXRpYWxpemUgQ2lyY3VpdCBCcmVha2VyIHdpdGggc3VwcG9ydC1zcGVjaWZpYyBjb25maWd1cmF0aW9uXG4gICAgdGhpcy5jaXJjdWl0QnJlYWtlciA9IG5ldyBDaXJjdWl0QnJlYWtlcih7XG4gICAgICBmYWlsdXJlVGhyZXNob2xkOiAzLCAvLyBNb3JlIHNlbnNpdGl2ZSBmb3Igc3VwcG9ydCBvcGVyYXRpb25zXG4gICAgICByZWNvdmVyeVRpbWVvdXQ6IDMwMDAwLCAvLyAzMCBzZWNvbmRzIHJlY292ZXJ5IGZvciBzdXBwb3J0XG4gICAgICBoYWxmT3Blbk1heENhbGxzOiAyLCAvLyBDb25zZXJ2YXRpdmUgaGFsZi1vcGVuIHRlc3RpbmdcbiAgICAgIGhlYWx0aENoZWNrSW50ZXJ2YWw6IDE1MDAwLCAvLyAxNSBzZWNvbmQgaGVhbHRoIGNoZWNrc1xuICAgIH0pO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBBdWRpdCBUcmFpbCBTeXN0ZW1cbiAgICB0aGlzLmF1ZGl0VHJhaWwgPSBuZXcgQXVkaXRUcmFpbFN5c3RlbSh7XG4gICAgICBjb21wbGlhbmNlTW9kZTogXCJzdHJpY3RcIixcbiAgICAgIGVuYWJsZUludGVncml0eUNoZWNraW5nOiB0cnVlLFxuICAgICAgcmV0ZW50aW9uRGF5czogMjU1NSwgLy8gNyB5ZWFycyBmb3IgR0RQUiBjb21wbGlhbmNlXG4gICAgfSk7XG5cbiAgICAvLyBJbml0aWFsaXplIERpcmVjdCBCZWRyb2NrIENsaWVudCBmb3IgY3JpdGljYWwgb3BlcmF0aW9uc1xuICAgIHRoaXMuZGlyZWN0QmVkcm9ja0NsaWVudCA9IG5ldyBEaXJlY3RCZWRyb2NrQ2xpZW50KHtcbiAgICAgIHJlZ2lvbjogcHJvY2Vzcy5lbnYuQVdTX1JFR0lPTiB8fCBcImV1LWNlbnRyYWwtMVwiLFxuICAgICAgZW1lcmdlbmN5VGltZW91dDogNTAwMCwgLy8gPCA1cyBmb3IgZW1lcmdlbmN5IG9wZXJhdGlvbnNcbiAgICAgIGNyaXRpY2FsVGltZW91dDogMTAwMDAsIC8vIDwgMTBzIGZvciBjcml0aWNhbCBvcGVyYXRpb25zXG4gICAgICBlbmFibGVDaXJjdWl0QnJlYWtlcjogdHJ1ZSxcbiAgICAgIGVuYWJsZUhlYWx0aE1vbml0b3Jpbmc6IHRydWUsXG4gICAgICBlbmFibGVDb21wbGlhbmNlQ2hlY2tzOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBNQ1AgUm91dGVyIGZvciBzdGFuZGFyZCBvcGVyYXRpb25zXG4gICAgdGhpcy5tY3BSb3V0ZXIgPSBuZXcgTUNQUm91dGVyKHtcbiAgICAgIHRpbWVvdXQ6IDMwMDAwLFxuICAgICAgbWF4UmV0cmllczogMyxcbiAgICAgIGhlYWx0aENoZWNrSW50ZXJ2YWw6IDMwMDAwLFxuICAgIH0pO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBJbnRlbGxpZ2VudCBSb3V0ZXIgZm9yIHJvdXRpbmcgZGVjaXNpb25zXG4gICAgdGhpcy5pbnRlbGxpZ2VudFJvdXRlciA9IG5ldyBJbnRlbGxpZ2VudFJvdXRlcihcbiAgICAgIHRoaXMuZGlyZWN0QmVkcm9ja0NsaWVudCxcbiAgICAgIHRoaXMubWNwUm91dGVyLFxuICAgICAgdGhpcy5mZWF0dXJlRmxhZ3MsXG4gICAgICB0aGlzLmNpcmN1aXRCcmVha2VyLFxuICAgICAgdGhpcy5nZHBySHlicmlkVmFsaWRhdG9yLFxuICAgICAgdGhpcy5hdWRpdFRyYWlsXG4gICAgKTtcblxuICAgIC8vIEluaXRpYWxpemUgU3VwcG9ydCBPcGVyYXRpb24gQ29tcG9uZW50c1xuICAgIHRoaXMuaW5mcmFzdHJ1Y3R1cmVBdWRpdG9yID0gbmV3IEluZnJhc3RydWN0dXJlQXVkaXRvcihcbiAgICAgIHRoaXMuZmVhdHVyZUZsYWdzLFxuICAgICAgdGhpcy5hdWRpdFRyYWlsXG4gICAgKTtcblxuICAgIHRoaXMubWV0YU1vbml0b3IgPSBuZXcgTWV0YU1vbml0b3IoXG4gICAgICB0aGlzLmludGVsbGlnZW50Um91dGVyLFxuICAgICAgdGhpcy5hdWRpdFRyYWlsLFxuICAgICAgdGhpcy5mZWF0dXJlRmxhZ3NcbiAgICApO1xuXG4gICAgdGhpcy5pbXBsZW1lbnRhdGlvblN1cHBvcnQgPSBuZXcgSW1wbGVtZW50YXRpb25TdXBwb3J0KFxuICAgICAgdGhpcy5pbnRlbGxpZ2VudFJvdXRlcixcbiAgICAgIHRoaXMuYXVkaXRUcmFpbCxcbiAgICAgIHRoaXMuZmVhdHVyZUZsYWdzXG4gICAgKTtcblxuICAgIHRoaXMuaHlicmlkSGVhbHRoTW9uaXRvciA9IG5ldyBIeWJyaWRIZWFsdGhNb25pdG9yKFxuICAgICAgdGhpcy5tY3BSb3V0ZXIsXG4gICAgICB0aGlzLmRpcmVjdEJlZHJvY2tDbGllbnQsXG4gICAgICB0aGlzLmZlYXR1cmVGbGFnc1xuICAgICk7XG5cbiAgICB0aGlzLmtpcm9CcmlkZ2UgPSBuZXcgS2lyb0JyaWRnZShcbiAgICAgIHRoaXMubWNwUm91dGVyLFxuICAgICAgdGhpcy5hdWRpdFRyYWlsLFxuICAgICAgdGhpcy5mZWF0dXJlRmxhZ3NcbiAgICApO1xuXG4gICAgdGhpcy5zZWN1cml0eVBvc3R1cmVNb25pdG9yID0gbmV3IFNlY3VyaXR5UG9zdHVyZU1vbml0b3IoXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB0aGlzLmZlYXR1cmVGbGFncyxcbiAgICAgIHRoaXMuYXVkaXRUcmFpbCxcbiAgICAgIHRoaXMuY2lyY3VpdEJyZWFrZXIsXG4gICAgICB0aGlzLmdkcHJIeWJyaWRWYWxpZGF0b3IsXG4gICAgICB0aGlzLnByb3ZpZGVyQ29tcGxpYW5jZSxcbiAgICAgIHRoaXMuZGlyZWN0QmVkcm9ja0NsaWVudCxcbiAgICAgIHRoaXMubWNwUm91dGVyXG4gICAgKTtcblxuICAgIC8vIEluaXRpYWxpemUgU3lzdGVtIFJlc291cmNlIE1vbml0b3IgZm9yIDUlIG92ZXJoZWFkIHJlcXVpcmVtZW50XG4gICAgdGhpcy5zeXN0ZW1SZXNvdXJjZU1vbml0b3IgPSBuZXcgU3lzdGVtUmVzb3VyY2VNb25pdG9yKFxuICAgICAgdGhpcy5mZWF0dXJlRmxhZ3MsXG4gICAgICB0aGlzLmF1ZGl0VHJhaWwsXG4gICAgICB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgIG1vbml0b3JpbmdJbnRlcnZhbE1zOiAxMDAwMCwgLy8gMTAgc2Vjb25kc1xuICAgICAgICBhbGVydENoZWNrSW50ZXJ2YWxNczogMzAwMDAsIC8vIDMwIHNlY29uZHNcbiAgICAgICAgdGhyZXNob2xkczoge1xuICAgICAgICAgIGNwdVdhcm5pbmdQZXJjZW50OiAwLjgsIC8vIDAuOCUgQ1BVIHdhcm5pbmdcbiAgICAgICAgICBjcHVDcml0aWNhbFBlcmNlbnQ6IDEuMCwgLy8gMSUgQ1BVIGNyaXRpY2FsICh3ZWxsIHVuZGVyIDUlKVxuICAgICAgICAgIG1lbW9yeVdhcm5pbmdNQjogNDAsIC8vIDQwTUIgbWVtb3J5IHdhcm5pbmdcbiAgICAgICAgICBtZW1vcnlDcml0aWNhbE1COiA1MCwgLy8gNTBNQiBtZW1vcnkgY3JpdGljYWwgKHJlYXNvbmFibGUgZm9yIDUlIG92ZXJoZWFkKVxuICAgICAgICB9LFxuICAgICAgfVxuICAgICk7XG5cbiAgICAvLyBJbml0aWFsaXplIENvc3QgUGVyZm9ybWFuY2UgT3B0aW1pemVyICh1c2luZyBleGlzdGluZyBzeXN0ZW0pXG4gICAgY29uc3QgY29zdEJ1ZGdldDogQ29zdEJ1ZGdldCA9IHtcbiAgICAgIGRhaWx5TGltaXQ6IDEwLjAsIC8vIOKCrDEwIHBlciBkYXlcbiAgICAgIG1vbnRobHlMaW1pdDogMzAwLjAsIC8vIOKCrDMwMCBwZXIgbW9udGhcbiAgICAgIGFsZXJ0VGhyZXNob2xkczogWzUwLCA3NSwgOTBdLCAvLyBBbGVydCBhdCA1MCUsIDc1JSwgOTAlXG4gICAgICBoYXJkU3RvcDogdHJ1ZSwgLy8gRW5hYmxlIGhhcmQgc3RvcCBvbiBidWRnZXQgZXhjZWVkZWRcbiAgICB9O1xuXG4gICAgdGhpcy5jb3N0UGVyZm9ybWFuY2VPcHRpbWl6ZXIgPSBuZXcgQ29zdFBlcmZvcm1hbmNlT3B0aW1pemVyKFxuICAgICAgY29zdEJ1ZGdldCxcbiAgICAgIHByb2Nlc3MuZW52LkFXU19SRUdJT04gfHwgXCJldS1jZW50cmFsLTFcIlxuICAgICk7XG5cbiAgICAvLyBJbml0aWFsaXplIEVtZXJnZW5jeSBTaHV0ZG93biBNYW5hZ2VyXG4gICAgdGhpcy5lbWVyZ2VuY3lTaHV0ZG93bk1hbmFnZXIgPSBuZXcgRW1lcmdlbmN5U2h1dGRvd25NYW5hZ2VyKFxuICAgICAge1xuICAgICAgICBlbmFibGVBdXRvU2h1dGRvd246IHRydWUsXG4gICAgICAgIHNodXRkb3duVGhyZXNob2xkczoge1xuICAgICAgICAgIGVycm9yUmF0ZTogMC4xLCAvLyAxMCUgZXJyb3IgcmF0ZVxuICAgICAgICAgIGxhdGVuY3lNczogNTAwMCwgLy8gNSBzZWNvbmRzXG4gICAgICAgICAgY29zdEV1cm9QZXJIb3VyOiA1MC4wLCAvLyDigqw1MCBwZXIgaG91clxuICAgICAgICAgIGNvbnNlY3V0aXZlRmFpbHVyZXM6IDUsXG4gICAgICAgIH0sXG4gICAgICAgIG5vdGlmaWNhdGlvbkNoYW5uZWxzOiB7XG4gICAgICAgICAgLy8gQ29uZmlndXJlIG5vdGlmaWNhdGlvbiBjaGFubmVscyBhcyBuZWVkZWRcbiAgICAgICAgfSxcbiAgICAgICAgcmVjb3ZlcnlDb25maWc6IHtcbiAgICAgICAgICBhdXRvUmVjb3ZlcnlFbmFibGVkOiB0cnVlLFxuICAgICAgICAgIHJlY292ZXJ5RGVsYXlNczogMzAwMDAwLCAvLyA1IG1pbnV0ZXNcbiAgICAgICAgICBoZWFsdGhDaGVja0ludGVydmFsTXM6IDYwMDAwLCAvLyAxIG1pbnV0ZVxuICAgICAgICAgIG1heFJlY292ZXJ5QXR0ZW1wdHM6IDMsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgdGhpcy5mZWF0dXJlRmxhZ3MsXG4gICAgICB0aGlzLmF1ZGl0VHJhaWwsXG4gICAgICB0aGlzLmNpcmN1aXRCcmVha2VyXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBY3RpdmF0ZSBCZWRyb2NrIFN1cHBvcnQgTW9kZVxuICAgKi9cbiAgYXN5bmMgYWN0aXZhdGUoKTogUHJvbWlzZTxCZWRyb2NrU3VwcG9ydFJlc3VsdD4ge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmxvZyhcbiAgICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgICAgXCJBdHRlbXB0aW5nIHRvIGFjdGl2YXRlIEJlZHJvY2sgU3VwcG9ydCBNb2RlXCJcbiAgICAgICk7XG5cbiAgICAgIC8vIENoZWNrIGlmIGZlYXR1cmUgZmxhZyBpcyBlbmFibGVkXG4gICAgICBjb25zdCBzdXBwb3J0TW9kZUVuYWJsZWQgPVxuICAgICAgICBhd2FpdCB0aGlzLmZlYXR1cmVGbGFncy5pc0JlZHJvY2tTdXBwb3J0TW9kZUVuYWJsZWQoKTtcbiAgICAgIGlmICghc3VwcG9ydE1vZGVFbmFibGVkKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBcIkJlZHJvY2sgU3VwcG9ydCBNb2RlIGlzIGRpc2FibGVkIHZpYSBmZWF0dXJlIGZsYWdcIjtcbiAgICAgICAgdGhpcy5sb2coXCJiZWRyb2NrLWFjdGl2YXRpb25cIiwgbWVzc2FnZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgICAgY29uZmlndXJhdGlvbjogdGhpcy5jb25maWcsXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIC8vIFZhbGlkYXRlIGZlYXR1cmUgZmxhZyBjb25maWd1cmF0aW9uXG4gICAgICBjb25zdCB2YWxpZGF0aW9uID1cbiAgICAgICAgYXdhaXQgdGhpcy5mZWF0dXJlRmxhZ3MudmFsaWRhdGVCZWRyb2NrU3VwcG9ydE1vZGVGbGFncygpO1xuICAgICAgaWYgKCF2YWxpZGF0aW9uLmlzVmFsaWQpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGBGZWF0dXJlIGZsYWcgdmFsaWRhdGlvbiBmYWlsZWQ6ICR7dmFsaWRhdGlvbi5lcnJvcnMuam9pbihcbiAgICAgICAgICBcIiwgXCJcbiAgICAgICAgKX1gO1xuICAgICAgICB0aGlzLmxvZyhcImJlZHJvY2stYWN0aXZhdGlvblwiLCBtZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgICBjb25maWd1cmF0aW9uOiB0aGlzLmNvbmZpZyxcbiAgICAgICAgICB2YWxpZGF0aW9uUmVzdWx0czogdmFsaWRhdGlvbixcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgQmVkcm9jayBhZGFwdGVyIGF2YWlsYWJpbGl0eVxuICAgICAgY29uc3QgYmVkcm9ja0VuYWJsZWQgPSBhd2FpdCB0aGlzLmZlYXR1cmVGbGFncy5pc1Byb3ZpZGVyRW5hYmxlZChcbiAgICAgICAgXCJiZWRyb2NrXCJcbiAgICAgICk7XG4gICAgICBpZiAoIWJlZHJvY2tFbmFibGVkKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBcIkJlZHJvY2sgcHJvdmlkZXIgaXMgbm90IGVuYWJsZWRcIjtcbiAgICAgICAgdGhpcy5sb2coXCJiZWRyb2NrLWFjdGl2YXRpb25cIiwgbWVzc2FnZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgICAgY29uZmlndXJhdGlvbjogdGhpcy5jb25maWcsXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIC8vIFBlcmZvcm0gaW5pdGlhbCBpbmZyYXN0cnVjdHVyZSBhdWRpdFxuICAgICAgdGhpcy5sb2coXCJiZWRyb2NrLWFjdGl2YXRpb25cIiwgXCJSdW5uaW5nIGluaXRpYWwgaW5mcmFzdHJ1Y3R1cmUgYXVkaXRcIik7XG4gICAgICBjb25zdCBhdWRpdFJlc3VsdCA9IGF3YWl0IHRoaXMucnVuSW5mcmFzdHJ1Y3R1cmVBdWRpdCgpO1xuXG4gICAgICBpZiAoYXVkaXRSZXN1bHQub3ZlcmFsbEhlYWx0aCA9PT0gXCJjcml0aWNhbFwiKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPVxuICAgICAgICAgIFwiQ2Fubm90IGFjdGl2YXRlIHN1cHBvcnQgbW9kZTogY3JpdGljYWwgaW5mcmFzdHJ1Y3R1cmUgaXNzdWVzIGRldGVjdGVkXCI7XG4gICAgICAgIHRoaXMubG9nKFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsIG1lc3NhZ2UpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgIGNvbmZpZ3VyYXRpb246IHRoaXMuY29uZmlnLFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICAvLyBBY3RpdmF0ZSBzdXBwb3J0IG1vZGVcbiAgICAgIHRoaXMuaXNBY3RpdmF0ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5jb25maWcuZW5hYmxlZCA9IHRydWU7XG5cbiAgICAgIC8vIFN0YXJ0IHN5c3RlbSByZXNvdXJjZSBtb25pdG9yaW5nIHRvIGVuc3VyZSA8IDUlIG92ZXJoZWFkXG4gICAgICBhd2FpdCB0aGlzLnN5c3RlbVJlc291cmNlTW9uaXRvci5zdGFydE1vbml0b3JpbmcoKTtcbiAgICAgIHRoaXMubG9nKFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsIFwiU3lzdGVtIHJlc291cmNlIG1vbml0b3Jpbmcgc3RhcnRlZFwiKTtcblxuICAgICAgY29uc3QgbWVzc2FnZSA9IFwiQmVkcm9jayBTdXBwb3J0IE1vZGUgYWN0aXZhdGVkIHN1Y2Nlc3NmdWxseVwiO1xuICAgICAgdGhpcy5sb2coXCJiZWRyb2NrLWFjdGl2YXRpb25cIiwgbWVzc2FnZSk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgY29uZmlndXJhdGlvbjogdGhpcy5jb25maWcsXG4gICAgICAgIHZhbGlkYXRpb25SZXN1bHRzOiB2YWxpZGF0aW9uLFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc3QgbWVzc2FnZSA9IGBGYWlsZWQgdG8gYWN0aXZhdGUgQmVkcm9jayBTdXBwb3J0IE1vZGU6ICR7XG4gICAgICAgIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogXCJVbmtub3duIGVycm9yXCJcbiAgICAgIH1gO1xuICAgICAgdGhpcy5sb2coXCJiZWRyb2NrLWFjdGl2YXRpb25cIiwgbWVzc2FnZSk7XG5cbiAgICAgIC8vIEVuc3VyZSB3ZSBkb24ndCBsZWF2ZSB0aGUgc3lzdGVtIGluIGFuIGluY29uc2lzdGVudCBzdGF0ZVxuICAgICAgdGhpcy5pc0FjdGl2YXRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5jb25maWcuZW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICBjb25maWd1cmF0aW9uOiB0aGlzLmNvbmZpZyxcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlYWN0aXZhdGUgQmVkcm9jayBTdXBwb3J0IE1vZGVcbiAgICovXG4gIGFzeW5jIGRlYWN0aXZhdGUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMubG9nKFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsIFwiRGVhY3RpdmF0aW5nIEJlZHJvY2sgU3VwcG9ydCBNb2RlXCIpO1xuXG4gICAgICAvLyBTdG9wIHN5c3RlbSByZXNvdXJjZSBtb25pdG9yaW5nXG4gICAgICBhd2FpdCB0aGlzLnN5c3RlbVJlc291cmNlTW9uaXRvci5zdG9wTW9uaXRvcmluZygpO1xuICAgICAgdGhpcy5sb2coXCJiZWRyb2NrLWFjdGl2YXRpb25cIiwgXCJTeXN0ZW0gcmVzb3VyY2UgbW9uaXRvcmluZyBzdG9wcGVkXCIpO1xuXG4gICAgICB0aGlzLmlzQWN0aXZhdGVkID0gZmFsc2U7XG4gICAgICB0aGlzLmNvbmZpZy5lbmFibGVkID0gZmFsc2U7XG5cbiAgICAgIC8vIFNhZmVseSBkaXNhYmxlIGZlYXR1cmUgZmxhZ3NcbiAgICAgIGF3YWl0IHRoaXMuZmVhdHVyZUZsYWdzLmRpc2FibGVCZWRyb2NrU3VwcG9ydE1vZGVTYWZlbHkoKTtcblxuICAgICAgdGhpcy5sb2coXG4gICAgICAgIFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsXG4gICAgICAgIFwiQmVkcm9jayBTdXBwb3J0IE1vZGUgZGVhY3RpdmF0ZWQgc3VjY2Vzc2Z1bGx5XCJcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMubG9nKFxuICAgICAgICBcImJlZHJvY2stYWN0aXZhdGlvblwiLFxuICAgICAgICBgRXJyb3IgZHVyaW5nIGRlYWN0aXZhdGlvbjogJHtcbiAgICAgICAgICBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFwiVW5rbm93biBlcnJvclwiXG4gICAgICAgIH1gXG4gICAgICApO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBzdXBwb3J0IG1vZGUgc3RhdHVzXG4gICAqL1xuICBnZXRTdXBwb3J0TW9kZVN0YXR1cygpOiB7IGlzQWN0aXZlOiBib29sZWFuOyBjb25maWc6IEJlZHJvY2tTdXBwb3J0Q29uZmlnIH0ge1xuICAgIHJldHVybiB7XG4gICAgICBpc0FjdGl2ZTogdGhpcy5pc0FjdGl2YXRlZCxcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBzdXBwb3J0IG1vZGUgaXMgYWN0aXZlXG4gICAqL1xuICBpc0FjdGl2ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pc0FjdGl2YXRlZCAmJiB0aGlzLmNvbmZpZy5lbmFibGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIFJ1biBpbmZyYXN0cnVjdHVyZSBhdWRpdCB3aXRoIGNpcmN1aXQgYnJlYWtlciBwcm90ZWN0aW9uXG4gICAqL1xuICBhc3luYyBydW5JbmZyYXN0cnVjdHVyZUF1ZGl0KCk6IFByb21pc2U8SW5mcmFzdHJ1Y3R1cmVBdWRpdFJlc3VsdD4ge1xuICAgIHRoaXMubG9nKFxuICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgIFwiU3RhcnRpbmcgaW5mcmFzdHJ1Y3R1cmUgYXVkaXQgd2l0aCBjaXJjdWl0IGJyZWFrZXIgcHJvdGVjdGlvblwiXG4gICAgKTtcblxuICAgIC8vIFZhbGlkYXRlIGNvbXBsaWFuY2UgYmVmb3JlIHJ1bm5pbmcgYXVkaXRcbiAgICBhd2FpdCB0aGlzLnZhbGlkYXRlQ29tcGxpYW5jZUZvclN1cHBvcnRPcGVyYXRpb24oXG4gICAgICBcImluZnJhc3RydWN0dXJlXCIsXG4gICAgICBcImRpcmVjdF9iZWRyb2NrXCIsXG4gICAgICBcImNyaXRpY2FsXCJcbiAgICApO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIENoZWNrIGNpcmN1aXQgYnJlYWtlciBzdGF0dXMgYmVmb3JlIHByb2NlZWRpbmdcbiAgICAgIGNvbnN0IGNpcmN1aXRCcmVha2VyU3RhdHVzID0gYXdhaXQgdGhpcy5nZXRDaXJjdWl0QnJlYWtlclN0YXR1cygpO1xuXG4gICAgICBpZiAoY2lyY3VpdEJyZWFrZXJTdGF0dXMub3ZlcmFsbEhlYWx0aCA9PT0gXCJjcml0aWNhbFwiKSB7XG4gICAgICAgIHRoaXMubG9nKFxuICAgICAgICAgIFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsXG4gICAgICAgICAgXCJJbmZyYXN0cnVjdHVyZSBhdWRpdCBhYm9ydGVkIC0gYm90aCByb3V0aW5nIHBhdGhzIHVuYXZhaWxhYmxlXCJcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgICBvdmVyYWxsSGVhbHRoOiBcImNyaXRpY2FsXCIsXG4gICAgICAgICAgZGV0ZWN0ZWRJc3N1ZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaWQ6IFwiY2lyY3VpdC1icmVha2VyLWNyaXRpY2FsXCIsXG4gICAgICAgICAgICAgIHNldmVyaXR5OiBcImNyaXRpY2FsXCIsXG4gICAgICAgICAgICAgIGNhdGVnb3J5OiBcImF2YWlsYWJpbGl0eVwiLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICBcIkJvdGggcm91dGluZyBwYXRocyAoZGlyZWN0IEJlZHJvY2sgYW5kIE1DUCkgYXJlIHVuYXZhaWxhYmxlIGR1ZSB0byBjaXJjdWl0IGJyZWFrZXIgcHJvdGVjdGlvblwiLFxuICAgICAgICAgICAgICBhZmZlY3RlZENvbXBvbmVudHM6IFtcImRpcmVjdC1iZWRyb2NrLWNsaWVudFwiLCBcIm1jcC1yb3V0ZXJcIl0sXG4gICAgICAgICAgICAgIGRldGVjdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgICAgaW1wbGVtZW50YXRpb25HYXBzOiBbXSxcbiAgICAgICAgICByZWNvbW1lbmRhdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaWQ6IFwicmVzdG9yZS1yb3V0aW5nLXBhdGhzXCIsXG4gICAgICAgICAgICAgIHR5cGU6IFwiaW1tZWRpYXRlXCIsXG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkludmVzdGlnYXRlIGFuZCByZXN0b3JlIHJvdXRpbmcgcGF0aCBhdmFpbGFiaWxpdHlcIixcbiAgICAgICAgICAgICAgZXhwZWN0ZWRJbXBhY3Q6IFwiUmVzdG9yZSBCZWRyb2NrIFN1cHBvcnQgTW9kZSBmdW5jdGlvbmFsaXR5XCIsXG4gICAgICAgICAgICAgIGltcGxlbWVudGF0aW9uU3RlcHM6IFtcbiAgICAgICAgICAgICAgICBcIkNoZWNrIGRpcmVjdCBCZWRyb2NrIGNsaWVudCBoZWFsdGhcIixcbiAgICAgICAgICAgICAgICBcIlZlcmlmeSBNQ1Agcm91dGVyIGNvbm5lY3Rpdml0eVwiLFxuICAgICAgICAgICAgICAgIFwiUmVzZXQgY2lyY3VpdCBicmVha2VycyBpZiBhcHByb3ByaWF0ZVwiLFxuICAgICAgICAgICAgICAgIFwiTW9uaXRvciBzeXN0ZW0gcmVjb3ZlcnlcIixcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgICBjb21wbGlhbmNlU3RhdHVzOiB7XG4gICAgICAgICAgICBnZHByQ29tcGxpYW50OiB0cnVlLFxuICAgICAgICAgICAgZGF0YVJlc2lkZW5jeUNvbXBsaWFudDogdHJ1ZSxcbiAgICAgICAgICAgIGF1ZGl0VHJhaWxDb21wbGV0ZTogdHJ1ZSxcbiAgICAgICAgICAgIGlzc3VlczogW1xuICAgICAgICAgICAgICBcIkNpcmN1aXQgYnJlYWtlciBwcm90ZWN0aW9uIGFjdGl2ZSAtIGxpbWl0ZWQgYXVkaXQgY2FwYWJpbGl0eVwiLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICAvLyBFeGVjdXRlIGluZnJhc3RydWN0dXJlIGF1ZGl0IHRocm91Z2ggaW50ZWxsaWdlbnQgcm91dGVyIHdpdGggY2lyY3VpdCBicmVha2VyIHByb3RlY3Rpb25cbiAgICAgIGNvbnN0IGF1ZGl0UmVzdWx0ID0gYXdhaXQgdGhpcy5jaXJjdWl0QnJlYWtlci5leGVjdXRlKFxuICAgICAgICBcImJlZHJvY2tcIiwgLy8gVXNlIGJlZHJvY2sgcHJvdmlkZXIgZm9yIGluZnJhc3RydWN0dXJlIGF1ZGl0XG4gICAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5pbmZyYXN0cnVjdHVyZUF1ZGl0b3IucGVyZm9ybVN5c3RlbUhlYWx0aENoZWNrKCk7XG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgICAgIHRoaXMubG9nKFxuICAgICAgICBcImJlZHJvY2stYWN0aXZhdGlvblwiLFxuICAgICAgICBcIkluZnJhc3RydWN0dXJlIGF1ZGl0IGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkgdGhyb3VnaCBjaXJjdWl0IGJyZWFrZXJcIlxuICAgICAgKTtcbiAgICAgIC8vIFNpbXVsYXRlIGluZnJhc3RydWN0dXJlIGF1ZGl0IC0gaW4gcmVhbCBpbXBsZW1lbnRhdGlvbiB0aGlzIHdvdWxkXG4gICAgICAvLyBjaGVjayBhY3R1YWwgc3lzdGVtIGhlYWx0aCwgZGF0YWJhc2UgY29ubmVjdGlvbnMsIEFQSSBlbmRwb2ludHMsIGV0Yy5cbiAgICAgIGNvbnN0IGlzc3VlczogSW5mcmFzdHJ1Y3R1cmVJc3N1ZVtdID0gW107XG4gICAgICBjb25zdCBnYXBzOiBJbXBsZW1lbnRhdGlvbkdhcFtdID0gW107XG4gICAgICBjb25zdCByZWNvbW1lbmRhdGlvbnM6IFJlY29tbWVuZGF0aW9uW10gPSBbXTtcblxuICAgICAgLy8gQ2hlY2sgZmVhdHVyZSBmbGFnIGNvbnNpc3RlbmN5XG4gICAgICBjb25zdCBmbGFnVmFsaWRhdGlvbiA9IGF3YWl0IHRoaXMuZmVhdHVyZUZsYWdzLnZhbGlkYXRlQWxsRmxhZ3MoKTtcbiAgICAgIGlmICghZmxhZ1ZhbGlkYXRpb24uaXNWYWxpZCkge1xuICAgICAgICAvLyBEZXRlcm1pbmUgc2V2ZXJpdHkgYmFzZWQgb24gZXJyb3IgY29udGVudFxuICAgICAgICBjb25zdCBoYXNDcml0aWNhbEVycm9ycyA9IGZsYWdWYWxpZGF0aW9uLmVycm9ycy5zb21lKFxuICAgICAgICAgIChlcnJvcikgPT5cbiAgICAgICAgICAgIGVycm9yLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoXCJjcml0aWNhbFwiKSB8fFxuICAgICAgICAgICAgZXJyb3IudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhcInN5c3RlbSBlcnJvclwiKVxuICAgICAgICApO1xuXG4gICAgICAgIGlzc3Vlcy5wdXNoKHtcbiAgICAgICAgICBpZDogXCJmZWF0dXJlLWZsYWdzLWluY29uc2lzdGVudFwiLFxuICAgICAgICAgIHNldmVyaXR5OiBoYXNDcml0aWNhbEVycm9ycyA/IFwiY3JpdGljYWxcIiA6IFwibWVkaXVtXCIsXG4gICAgICAgICAgY2F0ZWdvcnk6IFwiY29tcGxpYW5jZVwiLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkZlYXR1cmUgZmxhZyBjb25maWd1cmF0aW9uIGhhcyB2YWxpZGF0aW9uIGVycm9yc1wiLFxuICAgICAgICAgIGFmZmVjdGVkQ29tcG9uZW50czogW1wiZmVhdHVyZS1mbGFnc1wiXSxcbiAgICAgICAgICBkZXRlY3RlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgcHJvdmlkZXIgYXZhaWxhYmlsaXR5XG4gICAgICBjb25zdCBwcm92aWRlcnM6IFByb3ZpZGVyW10gPSBbXCJiZWRyb2NrXCIsIFwiZ29vZ2xlXCIsIFwibWV0YVwiXTtcbiAgICAgIGZvciAoY29uc3QgcHJvdmlkZXIgb2YgcHJvdmlkZXJzKSB7XG4gICAgICAgIGNvbnN0IGVuYWJsZWQgPSBhd2FpdCB0aGlzLmZlYXR1cmVGbGFncy5pc1Byb3ZpZGVyRW5hYmxlZChwcm92aWRlcik7XG4gICAgICAgIGlmICghZW5hYmxlZCAmJiBwcm92aWRlciA9PT0gXCJiZWRyb2NrXCIpIHtcbiAgICAgICAgICBpc3N1ZXMucHVzaCh7XG4gICAgICAgICAgICBpZDogYHByb3ZpZGVyLSR7cHJvdmlkZXJ9LWRpc2FibGVkYCxcbiAgICAgICAgICAgIHNldmVyaXR5OiBcImhpZ2hcIixcbiAgICAgICAgICAgIGNhdGVnb3J5OiBcImF2YWlsYWJpbGl0eVwiLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGBDcml0aWNhbCBwcm92aWRlciAke3Byb3ZpZGVyfSBpcyBkaXNhYmxlZGAsXG4gICAgICAgICAgICBhZmZlY3RlZENvbXBvbmVudHM6IFtgJHtwcm92aWRlcn0tYWRhcHRlcmBdLFxuICAgICAgICAgICAgZGV0ZWN0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBEZXRlcm1pbmUgb3ZlcmFsbCBoZWFsdGhcbiAgICAgIGNvbnN0IGNyaXRpY2FsSXNzdWVzID0gaXNzdWVzLmZpbHRlcigoaSkgPT4gaS5zZXZlcml0eSA9PT0gXCJjcml0aWNhbFwiKTtcbiAgICAgIGNvbnN0IGhpZ2hJc3N1ZXMgPSBpc3N1ZXMuZmlsdGVyKChpKSA9PiBpLnNldmVyaXR5ID09PSBcImhpZ2hcIik7XG4gICAgICBjb25zdCBtZWRpdW1Jc3N1ZXMgPSBpc3N1ZXMuZmlsdGVyKChpKSA9PiBpLnNldmVyaXR5ID09PSBcIm1lZGl1bVwiKTtcblxuICAgICAgbGV0IG92ZXJhbGxIZWFsdGg6IFwiaGVhbHRoeVwiIHwgXCJ3YXJuaW5nXCIgfCBcImNyaXRpY2FsXCI7XG4gICAgICBpZiAoY3JpdGljYWxJc3N1ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBvdmVyYWxsSGVhbHRoID0gXCJjcml0aWNhbFwiO1xuICAgICAgfSBlbHNlIGlmIChoaWdoSXNzdWVzLmxlbmd0aCA+IDAgfHwgbWVkaXVtSXNzdWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgb3ZlcmFsbEhlYWx0aCA9IFwid2FybmluZ1wiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3ZlcmFsbEhlYWx0aCA9IFwiaGVhbHRoeVwiO1xuICAgICAgfVxuXG4gICAgICAvLyBHZW5lcmF0ZSByZWNvbW1lbmRhdGlvbnMgYmFzZWQgb24gaXNzdWVzXG4gICAgICBpZiAoaXNzdWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goe1xuICAgICAgICAgIGlkOiBcInJlc29sdmUtY29uZmlndXJhdGlvbi1pc3N1ZXNcIixcbiAgICAgICAgICB0eXBlOiBcImltbWVkaWF0ZVwiLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlJlc29sdmUgZmVhdHVyZSBmbGFnIGFuZCBwcm92aWRlciBjb25maWd1cmF0aW9uIGlzc3Vlc1wiLFxuICAgICAgICAgIGV4cGVjdGVkSW1wYWN0OiBcIkltcHJvdmVkIHN5c3RlbSBzdGFiaWxpdHkgYW5kIHJlbGlhYmlsaXR5XCIsXG4gICAgICAgICAgaW1wbGVtZW50YXRpb25TdGVwczogW1xuICAgICAgICAgICAgXCJSZXZpZXcgZmVhdHVyZSBmbGFnIHZhbGlkYXRpb24gZXJyb3JzXCIsXG4gICAgICAgICAgICBcIkVuYWJsZSByZXF1aXJlZCBwcm92aWRlcnNcIixcbiAgICAgICAgICAgIFwiVmFsaWRhdGUgY29uZmlndXJhdGlvbiBjb25zaXN0ZW5jeVwiLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZXN1bHQ6IEluZnJhc3RydWN0dXJlQXVkaXRSZXN1bHQgPSB7XG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgb3ZlcmFsbEhlYWx0aCxcbiAgICAgICAgZGV0ZWN0ZWRJc3N1ZXM6IGlzc3VlcyxcbiAgICAgICAgaW1wbGVtZW50YXRpb25HYXBzOiBnYXBzLFxuICAgICAgICByZWNvbW1lbmRhdGlvbnMsXG4gICAgICAgIGNvbXBsaWFuY2VTdGF0dXM6IHtcbiAgICAgICAgICBnZHByQ29tcGxpYW50OiB0cnVlLCAvLyBBc3N1bWUgY29tcGxpYW50IGZvciBub3dcbiAgICAgICAgICBkYXRhUmVzaWRlbmN5Q29tcGxpYW50OiB0cnVlLFxuICAgICAgICAgIGF1ZGl0VHJhaWxDb21wbGV0ZTogdHJ1ZSxcbiAgICAgICAgICBpc3N1ZXM6IFtdLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgdGhpcy5sb2coXG4gICAgICAgIFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsXG4gICAgICAgIGBJbmZyYXN0cnVjdHVyZSBhdWRpdCBjb21wbGV0ZWQ6ICR7b3ZlcmFsbEhlYWx0aH0gKCR7aXNzdWVzLmxlbmd0aH0gaXNzdWVzKWBcbiAgICAgICk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPVxuICAgICAgICBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFwiVW5rbm93biBlcnJvclwiO1xuXG4gICAgICB0aGlzLmxvZyhcbiAgICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgICAgYEluZnJhc3RydWN0dXJlIGF1ZGl0IGZhaWxlZDogJHtlcnJvck1lc3NhZ2V9YFxuICAgICAgKTtcblxuICAgICAgLy8gQ2hlY2sgaWYgdGhpcyBpcyBhIGNpcmN1aXQgYnJlYWtlciBmYWlsdXJlXG4gICAgICBjb25zdCBpc0NpcmN1aXRCcmVha2VyRXJyb3IgPSBlcnJvck1lc3NhZ2UuaW5jbHVkZXMoXG4gICAgICAgIFwiY2lyY3VpdCBicmVha2VyIGlzIE9QRU5cIlxuICAgICAgKTtcblxuICAgICAgaWYgKGlzQ2lyY3VpdEJyZWFrZXJFcnJvcikge1xuICAgICAgICAvLyBIYW5kbGUgY2lyY3VpdCBicmVha2VyIGZhaWx1cmVcbiAgICAgICAgYXdhaXQgdGhpcy5oYW5kbGVDaXJjdWl0QnJlYWtlckZhaWx1cmUoXG4gICAgICAgICAgXCJkaXJlY3RcIiwgLy8gQXNzdW1pbmcgZGlyZWN0IHBhdGggZmFpbGVkXG4gICAgICAgICAgXCJpbmZyYXN0cnVjdHVyZV9hdWRpdFwiLFxuICAgICAgICAgIHsgZXJyb3I6IGVycm9yTWVzc2FnZSwgdGltZXN0YW1wOiBuZXcgRGF0ZSgpIH1cbiAgICAgICAgKTtcblxuICAgICAgICAvLyBUcnkgZmFsbGJhY2sgdGhyb3VnaCBNQ1AgaWYgYXZhaWxhYmxlXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5sb2coXG4gICAgICAgICAgICBcImJlZHJvY2stYWN0aXZhdGlvblwiLFxuICAgICAgICAgICAgXCJBdHRlbXB0aW5nIGluZnJhc3RydWN0dXJlIGF1ZGl0IHRocm91Z2ggTUNQIGZhbGxiYWNrXCJcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgY29uc3QgZmFsbGJhY2tSZXN1bHQgPSBhd2FpdCB0aGlzLmNpcmN1aXRCcmVha2VyLmV4ZWN1dGUoXG4gICAgICAgICAgICBcImdvb2dsZVwiLCAvLyBVc2UgZ29vZ2xlIGFzIE1DUCBwcm94eVxuICAgICAgICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5pbmZyYXN0cnVjdHVyZUF1ZGl0b3IucGVyZm9ybVN5c3RlbUhlYWx0aENoZWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgKTtcblxuICAgICAgICAgIHRoaXMubG9nKFxuICAgICAgICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgICAgICAgIFwiSW5mcmFzdHJ1Y3R1cmUgYXVkaXQgY29tcGxldGVkIHN1Y2Nlc3NmdWxseSB0aHJvdWdoIE1DUCBmYWxsYmFja1wiXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIC8vIFJldHVybiBzdWNjZXNzZnVsIHJlc3VsdCB3aXRoIGZhbGxiYWNrIG5vdGVcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uZmFsbGJhY2tSZXN1bHQsXG4gICAgICAgICAgICBkZXRlY3RlZElzc3VlczogW1xuICAgICAgICAgICAgICAuLi5mYWxsYmFja1Jlc3VsdC5kZXRlY3RlZElzc3VlcyxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlkOiBcImRpcmVjdC1wYXRoLWNpcmN1aXQtYnJlYWtlci1vcGVuXCIsXG4gICAgICAgICAgICAgICAgc2V2ZXJpdHk6IFwiaGlnaFwiIGFzIGNvbnN0LFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBcImF2YWlsYWJpbGl0eVwiIGFzIGNvbnN0LFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgICAgICAgXCJEaXJlY3QgQmVkcm9jayBwYXRoIHVuYXZhaWxhYmxlIC0gdXNpbmcgTUNQIGZhbGxiYWNrXCIsXG4gICAgICAgICAgICAgICAgYWZmZWN0ZWRDb21wb25lbnRzOiBbXCJkaXJlY3QtYmVkcm9jay1jbGllbnRcIl0sXG4gICAgICAgICAgICAgICAgZGV0ZWN0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICByZWNvbW1lbmRhdGlvbnM6IFtcbiAgICAgICAgICAgICAgLi4uZmFsbGJhY2tSZXN1bHQucmVjb21tZW5kYXRpb25zLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWQ6IFwicmVzdG9yZS1kaXJlY3QtcGF0aFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwic2hvcnRfdGVybVwiIGFzIGNvbnN0LFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkludmVzdGlnYXRlIGFuZCByZXN0b3JlIGRpcmVjdCBCZWRyb2NrIHBhdGhcIixcbiAgICAgICAgICAgICAgICBleHBlY3RlZEltcGFjdDogXCJJbXByb3ZlZCBwZXJmb3JtYW5jZSBmb3IgY3JpdGljYWwgb3BlcmF0aW9uc1wiLFxuICAgICAgICAgICAgICAgIGltcGxlbWVudGF0aW9uU3RlcHM6IFtcbiAgICAgICAgICAgICAgICAgIFwiQ2hlY2sgZGlyZWN0IEJlZHJvY2sgY2xpZW50IGhlYWx0aFwiLFxuICAgICAgICAgICAgICAgICAgXCJWZXJpZnkgQVdTIGNvbm5lY3Rpdml0eVwiLFxuICAgICAgICAgICAgICAgICAgXCJSZXNldCBjaXJjdWl0IGJyZWFrZXIgaWYgYXBwcm9wcmlhdGVcIixcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9O1xuICAgICAgICB9IGNhdGNoIChmYWxsYmFja0Vycm9yKSB7XG4gICAgICAgICAgdGhpcy5sb2coXG4gICAgICAgICAgICBcImJlZHJvY2stYWN0aXZhdGlvblwiLFxuICAgICAgICAgICAgYE1DUCBmYWxsYmFjayBhbHNvIGZhaWxlZDogJHtmYWxsYmFja0Vycm9yfWBcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgLy8gQm90aCBwYXRocyBmYWlsZWQgLSB0cmlnZ2VyIGVtZXJnZW5jeSBwcm9jZWR1cmVzXG4gICAgICAgICAgYXdhaXQgdGhpcy50cmlnZ2VyRW1lcmdlbmN5UHJvY2VkdXJlcyhcImluZnJhc3RydWN0dXJlX2F1ZGl0XCIsIHtcbiAgICAgICAgICAgIHByaW1hcnlFcnJvcjogZXJyb3JNZXNzYWdlLFxuICAgICAgICAgICAgZmFsbGJhY2tFcnJvcjogU3RyaW5nKGZhbGxiYWNrRXJyb3IpLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIExvZyBhdWRpdCBmYWlsdXJlIHRvIGF1ZGl0IHRyYWlsXG4gICAgICBhd2FpdCB0aGlzLmF1ZGl0VHJhaWwubG9nU3VwcG9ydE1vZGVFdmVudChcbiAgICAgICAgXCJpbmZyYXN0cnVjdHVyZV9hdWRpdF9mYWlsZWRcIixcbiAgICAgICAge1xuICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgICBlcnJvcjogZXJyb3JNZXNzYWdlLFxuICAgICAgICAgIGlzQ2lyY3VpdEJyZWFrZXJFcnJvcixcbiAgICAgICAgICBvcGVyYXRpb246IFwiaW5mcmFzdHJ1Y3R1cmVfYXVkaXRcIixcbiAgICAgICAgfSxcbiAgICAgICAgXCJzeXN0ZW1cIlxuICAgICAgKTtcblxuICAgICAgLy8gUmV0dXJuIGEgY3JpdGljYWwgcmVzdWx0IGlmIGF1ZGl0IGZhaWxzXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIG92ZXJhbGxIZWFsdGg6IFwiY3JpdGljYWxcIixcbiAgICAgICAgZGV0ZWN0ZWRJc3N1ZXM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZDogXCJhdWRpdC1mYWlsdXJlXCIsXG4gICAgICAgICAgICBzZXZlcml0eTogXCJjcml0aWNhbFwiLFxuICAgICAgICAgICAgY2F0ZWdvcnk6IFwiYXZhaWxhYmlsaXR5XCIsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogYEluZnJhc3RydWN0dXJlIGF1ZGl0IGZhaWxlZDogJHtlcnJvck1lc3NhZ2V9YCxcbiAgICAgICAgICAgIGFmZmVjdGVkQ29tcG9uZW50czogW1wiYXVkaXQtc3lzdGVtXCJdLFxuICAgICAgICAgICAgZGV0ZWN0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbXBsZW1lbnRhdGlvbkdhcHM6IFtdLFxuICAgICAgICByZWNvbW1lbmRhdGlvbnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZDogXCJmaXgtYXVkaXQtc3lzdGVtXCIsXG4gICAgICAgICAgICB0eXBlOiBcImltbWVkaWF0ZVwiLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiRml4IGluZnJhc3RydWN0dXJlIGF1ZGl0IHN5c3RlbVwiLFxuICAgICAgICAgICAgZXhwZWN0ZWRJbXBhY3Q6IFwiUmVzdG9yZSBtb25pdG9yaW5nIGNhcGFiaWxpdGllc1wiLFxuICAgICAgICAgICAgaW1wbGVtZW50YXRpb25TdGVwczogW1xuICAgICAgICAgICAgICBcIkludmVzdGlnYXRlIGF1ZGl0IGZhaWx1cmVcIixcbiAgICAgICAgICAgICAgXCJDaGVjayBjaXJjdWl0IGJyZWFrZXIgc3RhdHVzXCIsXG4gICAgICAgICAgICAgIFwiVmVyaWZ5IHJvdXRpbmcgcGF0aCBoZWFsdGhcIixcbiAgICAgICAgICAgICAgXCJGaXggdW5kZXJseWluZyBpc3N1ZXNcIixcbiAgICAgICAgICAgICAgXCJSZS1ydW4gYXVkaXRcIixcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgY29tcGxpYW5jZVN0YXR1czoge1xuICAgICAgICAgIGdkcHJDb21wbGlhbnQ6IGZhbHNlLFxuICAgICAgICAgIGRhdGFSZXNpZGVuY3lDb21wbGlhbnQ6IGZhbHNlLFxuICAgICAgICAgIGF1ZGl0VHJhaWxDb21wbGV0ZTogZmFsc2UsXG4gICAgICAgICAgaXNzdWVzOiBbXCJBdWRpdCBzeXN0ZW0gZmFpbHVyZSBwcmV2ZW50cyBjb21wbGlhbmNlIHZlcmlmaWNhdGlvblwiXSxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEVuYWJsZSBtZXRhLW1vbml0b3Jpbmcgb2YgS2lybyBleGVjdXRpb25cbiAgICovXG4gIGFzeW5jIGVuYWJsZU1ldGFNb25pdG9yaW5nKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMubG9nKFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsIFwiRW5hYmxpbmcgbWV0YS1tb25pdG9yaW5nXCIpO1xuXG4gICAgaWYgKCF0aGlzLmlzQWN0aXZlKCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJDYW5ub3QgZW5hYmxlIG1ldGEtbW9uaXRvcmluZzogU3VwcG9ydCBtb2RlIGlzIG5vdCBhY3RpdmVcIlxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBWYWxpZGF0ZSBjb21wbGlhbmNlIGJlZm9yZSBlbmFibGluZyBtZXRhLW1vbml0b3JpbmdcbiAgICBhd2FpdCB0aGlzLnZhbGlkYXRlQ29tcGxpYW5jZUZvclN1cHBvcnRPcGVyYXRpb24oXG4gICAgICBcIm1ldGFfbW9uaXRvclwiLFxuICAgICAgXCJkaXJlY3RfYmVkcm9ja1wiLFxuICAgICAgXCJjcml0aWNhbFwiXG4gICAgKTtcblxuICAgIC8vIEluIGEgcmVhbCBpbXBsZW1lbnRhdGlvbiwgdGhpcyB3b3VsZCBzZXQgdXAgbW9uaXRvcmluZyBob29rc1xuICAgIC8vIEZvciBub3csIHdlJ2xsIGp1c3QgbG9nIHRoZSBhY3RpdmF0aW9uXG4gICAgdGhpcy5sb2coXCJiZWRyb2NrLWFjdGl2YXRpb25cIiwgXCJNZXRhLW1vbml0b3JpbmcgZW5hYmxlZCBzdWNjZXNzZnVsbHlcIik7XG4gIH1cblxuICAvKipcbiAgICogUHJvdmlkZSBmYWxsYmFjayBzdXBwb3J0IGZvciBmYWlsZWQgb3BlcmF0aW9ucyB3aXRoIGNpcmN1aXQgYnJlYWtlciBwcm90ZWN0aW9uXG4gICAqL1xuICBhc3luYyBwcm92aWRlRmFsbGJhY2tTdXBwb3J0KFxuICAgIGNvbnRleHQ6IEZhaWx1cmVDb250ZXh0XG4gICk6IFByb21pc2U8U3VwcG9ydFJlc3VsdD4ge1xuICAgIC8vIEhhbmRsZSBudWxsIG9yIGludmFsaWQgY29udGV4dFxuICAgIGlmICghY29udGV4dCB8fCAhY29udGV4dC5vcGVyYXRpb24pIHtcbiAgICAgIHRoaXMubG9nKFxuICAgICAgICBcImJlZHJvY2stYWN0aXZhdGlvblwiLFxuICAgICAgICBcIlByb3ZpZGluZyBmYWxsYmFjayBzdXBwb3J0IGZvcjogaW52YWxpZCBjb250ZXh0XCJcbiAgICAgICk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgc3VwcG9ydFR5cGU6IFwiaW5mcmFzdHJ1Y3R1cmVcIixcbiAgICAgICAgYWN0aW9uc1BlcmZvcm1lZDogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGFjdGlvbjogXCJ2YWxpZGF0ZV9jb250ZXh0XCIsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgICAgICByZXN1bHQ6IFwiZmFpbHVyZVwiLFxuICAgICAgICAgICAgZGV0YWlsczogXCJJbnZhbGlkIG9yIG51bGwgZmFpbHVyZSBjb250ZXh0IHByb3ZpZGVkXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgZGlhZ25vc3RpY3M6IHtcbiAgICAgICAgICBzeXN0ZW1IZWFsdGg6IHt9LFxuICAgICAgICAgIHBlcmZvcm1hbmNlTWV0cmljczoge1xuICAgICAgICAgICAgcmVzcG9uc2VUaW1lOiAwLFxuICAgICAgICAgICAgbWVtb3J5VXNhZ2U6IDAsXG4gICAgICAgICAgICBjcHVVc2FnZTogMCxcbiAgICAgICAgICAgIG5ldHdvcmtMYXRlbmN5OiAwLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3JMb2dzOiBbXCJJbnZhbGlkIGZhaWx1cmUgY29udGV4dFwiXSxcbiAgICAgICAgICByZWNvbW1lbmRhdGlvbnM6IFtcIlByb3ZpZGUgdmFsaWQgZmFpbHVyZSBjb250ZXh0XCJdLFxuICAgICAgICB9LFxuICAgICAgICBuZXh0U3RlcHM6IFtcbiAgICAgICAgICBcIk1hbnVhbCBpbnRlcnZlbnRpb24gcmVxdWlyZWRcIixcbiAgICAgICAgICBcIkNvbnRhY3Qgc3lzdGVtIGFkbWluaXN0cmF0b3JcIixcbiAgICAgICAgXSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGhpcy5sb2coXG4gICAgICBcImJlZHJvY2stYWN0aXZhdGlvblwiLFxuICAgICAgYFByb3ZpZGluZyBmYWxsYmFjayBzdXBwb3J0IGZvcjogJHtjb250ZXh0Lm9wZXJhdGlvbn0gd2l0aCBjaXJjdWl0IGJyZWFrZXIgcHJvdGVjdGlvbmBcbiAgICApO1xuXG4gICAgLy8gQ2hlY2sgY2lyY3VpdCBicmVha2VyIHN0YXR1cyBiZWZvcmUgcHJvY2VlZGluZ1xuICAgIGNvbnN0IGNpcmN1aXRCcmVha2VyU3RhdHVzID0gYXdhaXQgdGhpcy5nZXRDaXJjdWl0QnJlYWtlclN0YXR1cygpO1xuXG4gICAgLy8gVmFsaWRhdGUgY29tcGxpYW5jZSBiZWZvcmUgcHJvdmlkaW5nIGZhbGxiYWNrIHN1cHBvcnRcbiAgICBhd2FpdCB0aGlzLnZhbGlkYXRlQ29tcGxpYW5jZUZvclN1cHBvcnRPcGVyYXRpb24oXG4gICAgICBcImVtZXJnZW5jeVwiLFxuICAgICAgXCJkaXJlY3RfYmVkcm9ja1wiLFxuICAgICAgXCJjcml0aWNhbFwiXG4gICAgKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBFeGVjdXRlIGZhbGxiYWNrIHN1cHBvcnQgdGhyb3VnaCBjaXJjdWl0IGJyZWFrZXIgd2l0aCBpbnRlbGxpZ2VudCByb3V0aW5nXG4gICAgICBjb25zdCBzdXBwb3J0UmVzdWx0ID0gYXdhaXQgdGhpcy5leGVjdXRlV2l0aENpcmN1aXRCcmVha2VyUHJvdGVjdGlvbihcbiAgICAgICAgY29udGV4dC5vcGVyYXRpb24sXG4gICAgICAgIFwiZW1lcmdlbmN5XCIsXG4gICAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wZXJmb3JtRmFsbGJhY2tTdXBwb3J0KGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICAvLyBMb2cgc3VjY2Vzc2Z1bCBmYWxsYmFjayBzdXBwb3J0XG4gICAgICBhd2FpdCB0aGlzLmF1ZGl0VHJhaWwubG9nU3VwcG9ydE1vZGVFdmVudChcbiAgICAgICAgXCJmYWxsYmFja19zdXBwb3J0X3Byb3ZpZGVkXCIsXG4gICAgICAgIHtcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgICAgb3BlcmF0aW9uOiBjb250ZXh0Lm9wZXJhdGlvbixcbiAgICAgICAgICBzZXZlcml0eTogY29udGV4dC5zZXZlcml0eSxcbiAgICAgICAgICBjaXJjdWl0QnJlYWtlclN0YXR1cyxcbiAgICAgICAgICBzdXBwb3J0UmVzdWx0LFxuICAgICAgICB9LFxuICAgICAgICBcInN5c3RlbVwiXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gc3VwcG9ydFJlc3VsdDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID1cbiAgICAgICAgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpO1xuXG4gICAgICB0aGlzLmxvZyhcbiAgICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgICAgYEZhbGxiYWNrIHN1cHBvcnQgZmFpbGVkOiAke2Vycm9yTWVzc2FnZX1gXG4gICAgICApO1xuXG4gICAgICAvLyBIYW5kbGUgY2lyY3VpdCBicmVha2VyIGZhaWx1cmVzXG4gICAgICBpZiAoZXJyb3JNZXNzYWdlLmluY2x1ZGVzKFwiY2lyY3VpdCBicmVha2VyIGlzIE9QRU5cIikpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5oYW5kbGVDaXJjdWl0QnJlYWtlckZhaWx1cmUoXG4gICAgICAgICAgXCJkaXJlY3RcIiwgLy8gQXNzdW1pbmcgZGlyZWN0IHBhdGggZmFpbGVkIGZpcnN0XG4gICAgICAgICAgY29udGV4dC5vcGVyYXRpb24sXG4gICAgICAgICAgeyAuLi5jb250ZXh0LCBmYWxsYmFja0Vycm9yOiBlcnJvck1lc3NhZ2UgfVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBMb2cgZmFpbHVyZSB0byBhdWRpdCB0cmFpbFxuICAgICAgYXdhaXQgdGhpcy5hdWRpdFRyYWlsLmxvZ1N1cHBvcnRNb2RlRXZlbnQoXG4gICAgICAgIFwiZmFsbGJhY2tfc3VwcG9ydF9mYWlsZWRcIixcbiAgICAgICAge1xuICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgICBvcGVyYXRpb246IGNvbnRleHQub3BlcmF0aW9uLFxuICAgICAgICAgIGVycm9yOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgY29udGV4dCxcbiAgICAgICAgfSxcbiAgICAgICAgXCJzeXN0ZW1cIlxuICAgICAgKTtcblxuICAgICAgLy8gUmV0dXJuIGZhaWx1cmUgcmVzdWx0XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgc3VwcG9ydFR5cGU6IFwiaW5mcmFzdHJ1Y3R1cmVcIixcbiAgICAgICAgYWN0aW9uc1BlcmZvcm1lZDogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGFjdGlvbjogXCJmYWxsYmFja19zdXBwb3J0X2F0dGVtcHRcIixcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgICAgIHJlc3VsdDogXCJmYWlsdXJlXCIsXG4gICAgICAgICAgICBkZXRhaWxzOiBgRmFsbGJhY2sgc3VwcG9ydCBmYWlsZWQ6ICR7ZXJyb3JNZXNzYWdlfWAsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgZGlhZ25vc3RpY3M6IHtcbiAgICAgICAgICBzeXN0ZW1IZWFsdGg6IHsgY2lyY3VpdEJyZWFrZXJTdGF0dXMgfSxcbiAgICAgICAgICBwZXJmb3JtYW5jZU1ldHJpY3M6IHtcbiAgICAgICAgICAgIHJlc3BvbnNlVGltZTogMCxcbiAgICAgICAgICAgIG1lbW9yeVVzYWdlOiAwLFxuICAgICAgICAgICAgY3B1VXNhZ2U6IDAsXG4gICAgICAgICAgICBuZXR3b3JrTGF0ZW5jeTogMCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVycm9yTG9nczogW2NvbnRleHQuZXJyb3JNZXNzYWdlLCBlcnJvck1lc3NhZ2VdLFxuICAgICAgICAgIHJlY29tbWVuZGF0aW9uczogW1xuICAgICAgICAgICAgXCJDaGVjayBjaXJjdWl0IGJyZWFrZXIgc3RhdHVzXCIsXG4gICAgICAgICAgICBcIlZlcmlmeSByb3V0aW5nIHBhdGggaGVhbHRoXCIsXG4gICAgICAgICAgICBcIkNvbnNpZGVyIG1hbnVhbCBpbnRlcnZlbnRpb25cIixcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICBuZXh0U3RlcHM6IFtcbiAgICAgICAgICBcIk1hbnVhbCBpbnRlcnZlbnRpb24gcmVxdWlyZWRcIixcbiAgICAgICAgICBcIkNoZWNrIHN5c3RlbSBoZWFsdGhcIixcbiAgICAgICAgICBcIkNvbnRhY3Qgc3lzdGVtIGFkbWluaXN0cmF0b3JcIixcbiAgICAgICAgXSxcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgb3BlcmF0aW9uIHdpdGggY2lyY3VpdCBicmVha2VyIHByb3RlY3Rpb24gYW5kIGludGVsbGlnZW50IHJvdXRpbmdcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgZXhlY3V0ZVdpdGhDaXJjdWl0QnJlYWtlclByb3RlY3Rpb248VD4oXG4gICAgb3BlcmF0aW9uOiBzdHJpbmcsXG4gICAgcHJpb3JpdHk6IFwiZW1lcmdlbmN5XCIgfCBcImNyaXRpY2FsXCIgfCBcImhpZ2hcIiB8IFwibWVkaXVtXCIgfCBcImxvd1wiLFxuICAgIG9wZXJhdGlvbkZuOiAoKSA9PiBQcm9taXNlPFQ+XG4gICk6IFByb21pc2U8VD4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBVc2UgaW50ZWxsaWdlbnQgcm91dGVyIHRvIGRldGVybWluZSBiZXN0IHBhdGhcbiAgICAgIGlmICh0aGlzLmludGVsbGlnZW50Um91dGVyKSB7XG4gICAgICAgIGNvbnN0IHJvdXRpbmdEZWNpc2lvbiA9XG4gICAgICAgICAgYXdhaXQgdGhpcy5pbnRlbGxpZ2VudFJvdXRlci5tYWtlUm91dGluZ0RlY2lzaW9uKHtcbiAgICAgICAgICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uIGFzIGFueSxcbiAgICAgICAgICAgIHByaW9yaXR5OiBwcmlvcml0eSBhcyBhbnksXG4gICAgICAgICAgICBjb250ZXh0OiB7IHRpbWVzdGFtcDogbmV3IERhdGUoKSB9LFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMubG9nKFxuICAgICAgICAgIFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsXG4gICAgICAgICAgYFJvdXRpbmcgZGVjaXNpb246ICR7cm91dGluZ0RlY2lzaW9uLnNlbGVjdGVkUm91dGV9ICgke3JvdXRpbmdEZWNpc2lvbi5yZWFzb259KWBcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBFeGVjdXRlIHRocm91Z2ggc2VsZWN0ZWQgcm91dGUgd2l0aCBjaXJjdWl0IGJyZWFrZXIgcHJvdGVjdGlvblxuICAgICAgICBjb25zdCBwcm92aWRlciA9XG4gICAgICAgICAgcm91dGluZ0RlY2lzaW9uLnNlbGVjdGVkUm91dGUgPT09IFwiZGlyZWN0XCIgPyBcImJlZHJvY2tcIiA6IFwiZ29vZ2xlXCI7XG5cbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY2lyY3VpdEJyZWFrZXIuZXhlY3V0ZShwcm92aWRlciwgb3BlcmF0aW9uRm4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRmFsbGJhY2sgdG8gZGlyZWN0IGNpcmN1aXQgYnJlYWtlciBleGVjdXRpb25cbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY2lyY3VpdEJyZWFrZXIuZXhlY3V0ZShcImJlZHJvY2tcIiwgb3BlcmF0aW9uRm4pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPVxuICAgICAgICBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcik7XG5cbiAgICAgIHRoaXMubG9nKFxuICAgICAgICBcImJlZHJvY2stYWN0aXZhdGlvblwiLFxuICAgICAgICBgQ2lyY3VpdCBicmVha2VyIHByb3RlY3RlZCBvcGVyYXRpb24gZmFpbGVkOiAke2Vycm9yTWVzc2FnZX1gXG4gICAgICApO1xuXG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybSB0aGUgYWN0dWFsIGZhbGxiYWNrIHN1cHBvcnQgbG9naWNcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgcGVyZm9ybUZhbGxiYWNrU3VwcG9ydChcbiAgICBjb250ZXh0OiBGYWlsdXJlQ29udGV4dFxuICApOiBQcm9taXNlPFN1cHBvcnRSZXN1bHQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYWN0aW9uczogU3VwcG9ydEFjdGlvbltdID0gW107XG4gICAgICBjb25zdCBkaWFnbm9zdGljczogRGlhZ25vc3RpY0RhdGEgPSB7XG4gICAgICAgIHN5c3RlbUhlYWx0aDoge30sXG4gICAgICAgIHBlcmZvcm1hbmNlTWV0cmljczoge1xuICAgICAgICAgIHJlc3BvbnNlVGltZTogMCxcbiAgICAgICAgICBtZW1vcnlVc2FnZTogMCxcbiAgICAgICAgICBjcHVVc2FnZTogMCxcbiAgICAgICAgICBuZXR3b3JrTGF0ZW5jeTogMCxcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3JMb2dzOiBbY29udGV4dC5lcnJvck1lc3NhZ2VdLFxuICAgICAgICByZWNvbW1lbmRhdGlvbnM6IFtdLFxuICAgICAgfTtcblxuICAgICAgLy8gQW5hbHl6ZSB0aGUgZmFpbHVyZSBjb250ZXh0XG4gICAgICBhY3Rpb25zLnB1c2goe1xuICAgICAgICBhY3Rpb246IFwiYW5hbHl6ZV9mYWlsdXJlX2NvbnRleHRcIixcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICByZXN1bHQ6IFwic3VjY2Vzc1wiLFxuICAgICAgICBkZXRhaWxzOiBgQW5hbHl6ZWQgZmFpbHVyZTogJHtjb250ZXh0LmVycm9yVHlwZX0gaW4gJHtjb250ZXh0Lm9wZXJhdGlvbn1gLFxuICAgICAgfSk7XG5cbiAgICAgIC8vIERldGVybWluZSBzdXBwb3J0IHR5cGUgYmFzZWQgb24gZmFpbHVyZVxuICAgICAgbGV0IHN1cHBvcnRUeXBlOiBcImluZnJhc3RydWN0dXJlXCIgfCBcImV4ZWN1dGlvblwiIHwgXCJpbXBsZW1lbnRhdGlvblwiO1xuICAgICAgaWYgKGNvbnRleHQuYWZmZWN0ZWRTeXN0ZW1zLmluY2x1ZGVzKFwiaW5mcmFzdHJ1Y3R1cmVcIikpIHtcbiAgICAgICAgc3VwcG9ydFR5cGUgPSBcImluZnJhc3RydWN0dXJlXCI7XG4gICAgICB9IGVsc2UgaWYgKGNvbnRleHQub3BlcmF0aW9uLmluY2x1ZGVzKFwiZXhlY3V0aW9uXCIpKSB7XG4gICAgICAgIHN1cHBvcnRUeXBlID0gXCJleGVjdXRpb25cIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN1cHBvcnRUeXBlID0gXCJpbXBsZW1lbnRhdGlvblwiO1xuICAgICAgfVxuXG4gICAgICAvLyBHZW5lcmF0ZSByZWNvbW1lbmRhdGlvbnMgYmFzZWQgb24gZmFpbHVyZSB0eXBlXG4gICAgICBjb25zdCBuZXh0U3RlcHM6IHN0cmluZ1tdID0gW107XG4gICAgICBpZiAoY29udGV4dC5zZXZlcml0eSA9PT0gXCJjcml0aWNhbFwiKSB7XG4gICAgICAgIG5leHRTdGVwcy5wdXNoKFwiRXNjYWxhdGUgdG8gb24tY2FsbCB0ZWFtXCIpO1xuICAgICAgICBuZXh0U3RlcHMucHVzaChcIkFjdGl2YXRlIGVtZXJnZW5jeSBwcm9jZWR1cmVzXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dFN0ZXBzLnB1c2goXCJNb25pdG9yIGZvciByZWN1cnJpbmcgaXNzdWVzXCIpO1xuICAgICAgICBuZXh0U3RlcHMucHVzaChcIlNjaGVkdWxlIHJlbWVkaWF0aW9uIGR1cmluZyBtYWludGVuYW5jZSB3aW5kb3dcIik7XG4gICAgICB9XG5cbiAgICAgIGRpYWdub3N0aWNzLnJlY29tbWVuZGF0aW9ucyA9IG5leHRTdGVwcztcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgc3VwcG9ydFR5cGUsXG4gICAgICAgIGFjdGlvbnNQZXJmb3JtZWQ6IGFjdGlvbnMsXG4gICAgICAgIGRpYWdub3N0aWNzLFxuICAgICAgICBuZXh0U3RlcHMsXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZyhcbiAgICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgICAgYEZhbGxiYWNrIHN1cHBvcnQgZmFpbGVkOiAke1xuICAgICAgICAgIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogXCJVbmtub3duIGVycm9yXCJcbiAgICAgICAgfWBcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBzdXBwb3J0VHlwZTogXCJpbmZyYXN0cnVjdHVyZVwiLFxuICAgICAgICBhY3Rpb25zUGVyZm9ybWVkOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgYWN0aW9uOiBcImZhbGxiYWNrX3N1cHBvcnRfYXR0ZW1wdFwiLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgcmVzdWx0OiBcImZhaWx1cmVcIixcbiAgICAgICAgICAgIGRldGFpbHM6IGBGYWlsZWQgdG8gcHJvdmlkZSBmYWxsYmFjayBzdXBwb3J0OiAke1xuICAgICAgICAgICAgICBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFwiVW5rbm93biBlcnJvclwiXG4gICAgICAgICAgICB9YCxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBkaWFnbm9zdGljczoge1xuICAgICAgICAgIHN5c3RlbUhlYWx0aDoge30sXG4gICAgICAgICAgcGVyZm9ybWFuY2VNZXRyaWNzOiB7XG4gICAgICAgICAgICByZXNwb25zZVRpbWU6IDAsXG4gICAgICAgICAgICBtZW1vcnlVc2FnZTogMCxcbiAgICAgICAgICAgIGNwdVVzYWdlOiAwLFxuICAgICAgICAgICAgbmV0d29ya0xhdGVuY3k6IDAsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBlcnJvckxvZ3M6IFtjb250ZXh0LmVycm9yTWVzc2FnZV0sXG4gICAgICAgICAgcmVjb21tZW5kYXRpb25zOiBbXCJNYW51YWwgaW50ZXJ2ZW50aW9uIHJlcXVpcmVkXCJdLFxuICAgICAgICB9LFxuICAgICAgICBuZXh0U3RlcHM6IFtcbiAgICAgICAgICBcIk1hbnVhbCBpbnRlcnZlbnRpb24gcmVxdWlyZWRcIixcbiAgICAgICAgICBcIkNvbnRhY3Qgc3lzdGVtIGFkbWluaXN0cmF0b3JcIixcbiAgICAgICAgXSxcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNlbmQgZGlhZ25vc3RpY3MgdG8gS2lyb1xuICAgKi9cbiAgYXN5bmMgc2VuZERpYWdub3N0aWNzVG9LaXJvKGRpYWdub3N0aWNzOiBEaWFnbm9zdGljRGF0YSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMubG9nKFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsIFwiU2VuZGluZyBkaWFnbm9zdGljcyB0byBLaXJvXCIpO1xuXG4gICAgLy8gSW4gYSByZWFsIGltcGxlbWVudGF0aW9uLCB0aGlzIHdvdWxkIHNlbmQgZGF0YSB0aHJvdWdoIE1DUCBvciBkaXJlY3QgY29tbXVuaWNhdGlvblxuICAgIC8vIEZvciBub3csIHdlJ2xsIGp1c3QgbG9nIHRoZSBhY3Rpb25cbiAgICB0aGlzLmxvZyhcbiAgICAgIFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsXG4gICAgICBgRGlhZ25vc3RpY3Mgc2VudDogJHtkaWFnbm9zdGljcy5yZWNvbW1lbmRhdGlvbnMubGVuZ3RofSByZWNvbW1lbmRhdGlvbnNgXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWNlaXZlIGV4ZWN1dGlvbiBkYXRhIGZyb20gS2lyb1xuICAgKi9cbiAgYXN5bmMgcmVjZWl2ZUtpcm9FeGVjdXRpb25EYXRhKFxuICAgIGV4ZWN1dGlvbkRhdGE6IEV4ZWN1dGlvbk1ldGFkYXRhXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMubG9nKFxuICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgIGBSZWNlaXZlZCBleGVjdXRpb24gZGF0YTogJHtleGVjdXRpb25EYXRhLm9wZXJhdGlvbn1gXG4gICAgKTtcblxuICAgIC8vIEluIGEgcmVhbCBpbXBsZW1lbnRhdGlvbiwgdGhpcyB3b3VsZCBhbmFseXplIHRoZSBleGVjdXRpb24gZGF0YVxuICAgIC8vIGFuZCBwb3RlbnRpYWxseSB0cmlnZ2VyIHN1cHBvcnQgYWN0aW9uc1xuICAgIGlmICghZXhlY3V0aW9uRGF0YS5zdWNjZXNzKSB7XG4gICAgICB0aGlzLmxvZyhcbiAgICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgICAgYEV4ZWN1dGlvbiBmYWlsdXJlIGRldGVjdGVkOiAke2V4ZWN1dGlvbkRhdGEuZXJyb3JEZXRhaWxzfWBcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLy8gU2VjdXJpdHkgJiBDb21wbGlhbmNlIE1ldGhvZHNcbiAgYXN5bmMgdmFsaWRhdGVDb21wbGlhbmNlU3RhdHVzKCk6IFByb21pc2U8Q29tcGxpYW5jZVZhbGlkYXRpb25SZXN1bHQ+IHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5sb2coXG4gICAgICAgIFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsXG4gICAgICAgIFwiVmFsaWRhdGluZyBjb21wbGlhbmNlIHN0YXR1cyBmb3IgYWxsIHByb3ZpZGVyc1wiXG4gICAgICApO1xuXG4gICAgICAvLyBHZXQgY29tcGxpYW5jZSBzdW1tYXJ5IGZyb20gdGhlIGNvbXBsaWFuY2UgaW50ZWdyYXRpb25cbiAgICAgIGNvbnN0IGNvbXBsaWFuY2VTdW1tYXJ5ID1cbiAgICAgICAgYXdhaXQgdGhpcy5jb21wbGlhbmNlSW50ZWdyYXRpb24uZ2V0Q29tcGxpYW5jZVN1bW1hcnkoKTtcblxuICAgICAgLy8gQ2hlY2sgQmVkcm9jay1zcGVjaWZpYyBjb21wbGlhbmNlXG4gICAgICBjb25zdCBiZWRyb2NrQ29tcGxpYW5jZSA9XG4gICAgICAgIGF3YWl0IHRoaXMucHJvdmlkZXJDb21wbGlhbmNlLnZlcmlmeVByb3ZpZGVyQ29tcGxpYW5jZShcImJlZHJvY2tcIik7XG5cbiAgICAgIC8vIFZhbGlkYXRlIEdEUFIgY29tcGxpYW5jZSBmb3IgYm90aCByb3V0aW5nIHBhdGhzXG4gICAgICBjb25zdCBnZHByQ29tcGxpYW50ID0gYXdhaXQgdGhpcy52YWxpZGF0ZUdEUFJDb21wbGlhbmNlKCk7XG5cbiAgICAgIC8vIENoZWNrIEVVIGRhdGEgcmVzaWRlbmN5IGNvbXBsaWFuY2UgZm9yIGRpcmVjdCBCZWRyb2NrIGFjY2Vzc1xuICAgICAgY29uc3QgZXVEYXRhUmVzaWRlbmN5Q29tcGxpYW50ID1cbiAgICAgICAgYXdhaXQgdGhpcy52YWxpZGF0ZUVVRGF0YVJlc2lkZW5jeUNvbXBsaWFuY2UoKTtcblxuICAgICAgLy8gQWdncmVnYXRlIHZpb2xhdGlvbnMgYW5kIHJlY29tbWVuZGF0aW9uc1xuICAgICAgY29uc3QgdmlvbGF0aW9uczogc3RyaW5nW10gPSBbXTtcbiAgICAgIGNvbnN0IHJlY29tbWVuZGF0aW9uczogc3RyaW5nW10gPSBbXTtcblxuICAgICAgLy8gQ2hlY2sgb3ZlcmFsbCBjb21wbGlhbmNlIHN0YXR1c1xuICAgICAgaWYgKGNvbXBsaWFuY2VTdW1tYXJ5Lm92ZXJhbGxDb21wbGlhbmNlID09PSBcIm5vbl9jb21wbGlhbnRcIikge1xuICAgICAgICB2aW9sYXRpb25zLnB1c2goXG4gICAgICAgICAgXCJPdmVyYWxsIHN5c3RlbSBjb21wbGlhbmNlIGlzIG5vbi1jb21wbGlhbnQgYWNyb3NzIHByb3ZpZGVyc1wiXG4gICAgICAgICk7XG4gICAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKFxuICAgICAgICAgIFwiUmV2aWV3IGFuZCB1cGRhdGUgcHJvdmlkZXIgYWdyZWVtZW50cyB0byBlbnN1cmUgY29tcGxpYW5jZVwiXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIEJlZHJvY2stc3BlY2lmaWMgY29tcGxpYW5jZVxuICAgICAgaWYgKCFiZWRyb2NrQ29tcGxpYW5jZS5jb21wbGlhbnQpIHtcbiAgICAgICAgdmlvbGF0aW9ucy5wdXNoKFxuICAgICAgICAgIGBCZWRyb2NrIHByb3ZpZGVyIGNvbXBsaWFuY2UgaXNzdWVzOiAke2JlZHJvY2tDb21wbGlhbmNlLnZpb2xhdGlvbnMuam9pbihcbiAgICAgICAgICAgIFwiLCBcIlxuICAgICAgICAgICl9YFxuICAgICAgICApO1xuICAgICAgICByZWNvbW1lbmRhdGlvbnMucHVzaChcbiAgICAgICAgICBcIlVwZGF0ZSBCZWRyb2NrIHByb3ZpZGVyIGFncmVlbWVudCBhbmQgdmVyaWZ5IGNvbXBsaWFuY2Ugc3RhdHVzXCJcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgR0RQUiBjb21wbGlhbmNlXG4gICAgICBpZiAoIWdkcHJDb21wbGlhbnQpIHtcbiAgICAgICAgdmlvbGF0aW9ucy5wdXNoKFwiR0RQUiBjb21wbGlhbmNlIHZhbGlkYXRpb24gZmFpbGVkIGZvciBoeWJyaWQgcm91dGluZ1wiKTtcbiAgICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goXG4gICAgICAgICAgXCJFbnN1cmUgUElJIGRldGVjdGlvbiBhbmQgcmVkYWN0aW9uIGlzIGVuYWJsZWQgZm9yIGJvdGggTUNQIGFuZCBkaXJlY3QgQmVkcm9jayBvcGVyYXRpb25zXCJcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgRVUgZGF0YSByZXNpZGVuY3lcbiAgICAgIGlmICghZXVEYXRhUmVzaWRlbmN5Q29tcGxpYW50KSB7XG4gICAgICAgIHZpb2xhdGlvbnMucHVzaChcbiAgICAgICAgICBcIkVVIGRhdGEgcmVzaWRlbmN5IGNvbXBsaWFuY2UgZmFpbGVkIGZvciBkaXJlY3QgQmVkcm9jayBhY2Nlc3NcIlxuICAgICAgICApO1xuICAgICAgICByZWNvbW1lbmRhdGlvbnMucHVzaChcbiAgICAgICAgICBcIkNvbmZpZ3VyZSBCZWRyb2NrIHRvIHVzZSBFVS1DZW50cmFsLTEgcmVnaW9uIGZvciBkYXRhIHByb2Nlc3NpbmdcIlxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBmb3IgcmVjZW50IHZpb2xhdGlvbnNcbiAgICAgIGlmIChjb21wbGlhbmNlU3VtbWFyeS5yZWNlbnRWaW9sYXRpb25zID4gMCkge1xuICAgICAgICB2aW9sYXRpb25zLnB1c2goXG4gICAgICAgICAgYCR7Y29tcGxpYW5jZVN1bW1hcnkucmVjZW50VmlvbGF0aW9uc30gcmVjZW50IGNvbXBsaWFuY2UgdmlvbGF0aW9ucyBkZXRlY3RlZGBcbiAgICAgICAgKTtcbiAgICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goXCJSZXZpZXcgYW5kIHJlc29sdmUgcmVjZW50IGNvbXBsaWFuY2UgdmlvbGF0aW9uc1wiKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgZm9yIHBlbmRpbmcgYWN0aW9uc1xuICAgICAgaWYgKGNvbXBsaWFuY2VTdW1tYXJ5LnBlbmRpbmdBY3Rpb25zID4gMCkge1xuICAgICAgICByZWNvbW1lbmRhdGlvbnMucHVzaChcbiAgICAgICAgICBgJHtjb21wbGlhbmNlU3VtbWFyeS5wZW5kaW5nQWN0aW9uc30gcHJvdmlkZXIgYWdyZWVtZW50cyByZXF1aXJlIGF0dGVudGlvbiAoZXhwaXJpbmcgc29vbilgXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGlzQ29tcGxpYW50ID0gdmlvbGF0aW9ucy5sZW5ndGggPT09IDA7XG5cbiAgICAgIHRoaXMubG9nKFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsIFwiQ29tcGxpYW5jZSB2YWxpZGF0aW9uIGNvbXBsZXRlZFwiLCB7XG4gICAgICAgIGlzQ29tcGxpYW50LFxuICAgICAgICB2aW9sYXRpb25zQ291bnQ6IHZpb2xhdGlvbnMubGVuZ3RoLFxuICAgICAgICByZWNvbW1lbmRhdGlvbnNDb3VudDogcmVjb21tZW5kYXRpb25zLmxlbmd0aCxcbiAgICAgICAgb3ZlcmFsbENvbXBsaWFuY2U6IGNvbXBsaWFuY2VTdW1tYXJ5Lm92ZXJhbGxDb21wbGlhbmNlLFxuICAgICAgICBiZWRyb2NrQ29tcGxpYW50OiBiZWRyb2NrQ29tcGxpYW5jZS5jb21wbGlhbnQsXG4gICAgICAgIGdkcHJDb21wbGlhbnQsXG4gICAgICAgIGV1RGF0YVJlc2lkZW5jeUNvbXBsaWFudCxcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBpc0NvbXBsaWFudCxcbiAgICAgICAgdmlvbGF0aW9ucyxcbiAgICAgICAgcmVjb21tZW5kYXRpb25zLFxuICAgICAgICBsYXN0Q2hlY2tlZDogbmV3IERhdGUoKSxcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9XG4gICAgICAgIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKTtcblxuICAgICAgdGhpcy5sb2coXG4gICAgICAgIFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsXG4gICAgICAgIGBDb21wbGlhbmNlIHZhbGlkYXRpb24gZmFpbGVkOiAke2Vycm9yTWVzc2FnZX1gXG4gICAgICApO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBpc0NvbXBsaWFudDogZmFsc2UsXG4gICAgICAgIHZpb2xhdGlvbnM6IFtgQ29tcGxpYW5jZSB2YWxpZGF0aW9uIGVycm9yOiAke2Vycm9yTWVzc2FnZX1gXSxcbiAgICAgICAgcmVjb21tZW5kYXRpb25zOiBbXG4gICAgICAgICAgXCJDaGVjayBjb21wbGlhbmNlIHN5c3RlbSBjb25maWd1cmF0aW9uIGFuZCBwcm92aWRlciBhZ3JlZW1lbnRzXCIsXG4gICAgICAgIF0sXG4gICAgICAgIGxhc3RDaGVja2VkOiBuZXcgRGF0ZSgpLFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRhdGUgR0RQUiBjb21wbGlhbmNlIGZvciBib3RoIHJvdXRpbmcgcGF0aHNcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgdmFsaWRhdGVHRFBSQ29tcGxpYW5jZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5sb2coXG4gICAgICAgIFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsXG4gICAgICAgIFwiVmFsaWRhdGluZyBHRFBSIGNvbXBsaWFuY2UgZm9yIGJvdGggZGlyZWN0IEJlZHJvY2sgYW5kIE1DUCByb3V0aW5nIHBhdGhzXCJcbiAgICAgICk7XG5cbiAgICAgIC8vIEdlbmVyYXRlIGNvbXByZWhlbnNpdmUgaHlicmlkIGNvbXBsaWFuY2UgcmVwb3J0XG4gICAgICBjb25zdCBjb21wbGlhbmNlUmVwb3J0ID1cbiAgICAgICAgYXdhaXQgdGhpcy5nZHBySHlicmlkVmFsaWRhdG9yLmdlbmVyYXRlSHlicmlkQ29tcGxpYW5jZVJlcG9ydCgpO1xuXG4gICAgICAvLyBMb2cgY29tcGxpYW5jZSBzdGF0dXNcbiAgICAgIHRoaXMubG9nKFxuICAgICAgICBcImJlZHJvY2stYWN0aXZhdGlvblwiLFxuICAgICAgICBgSHlicmlkIEdEUFIgY29tcGxpYW5jZSByZXBvcnQgZ2VuZXJhdGVkOiAke2NvbXBsaWFuY2VSZXBvcnQub3ZlcmFsbENvbXBsaWFuY2V9IChTY29yZTogJHtjb21wbGlhbmNlUmVwb3J0LmNvbXBsaWFuY2VTY29yZX0lKWBcbiAgICAgICk7XG5cbiAgICAgIC8vIENoZWNrIGlmIG92ZXJhbGwgY29tcGxpYW5jZSBpcyBhY2NlcHRhYmxlXG4gICAgICBpZiAoY29tcGxpYW5jZVJlcG9ydC5vdmVyYWxsQ29tcGxpYW5jZSA9PT0gXCJub25fY29tcGxpYW50XCIpIHtcbiAgICAgICAgdGhpcy5sb2coXG4gICAgICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgICAgICBgR0RQUiBjb21wbGlhbmNlIGZhaWxlZDogJHtjb21wbGlhbmNlUmVwb3J0LmNyaXRpY2FsSXNzdWVzLmpvaW4oXG4gICAgICAgICAgICBcIiwgXCJcbiAgICAgICAgICApfWBcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBpbmRpdmlkdWFsIHJvdXRpbmcgcGF0aCBjb21wbGlhbmNlXG4gICAgICBjb25zdCBkaXJlY3RCZWRyb2NrQ29tcGxpYW50ID1cbiAgICAgICAgY29tcGxpYW5jZVJlcG9ydC5yb3V0aW5nUGF0aENvbXBsaWFuY2UuZGlyZWN0QmVkcm9jay5pc0NvbXBsaWFudDtcbiAgICAgIGNvbnN0IG1jcEludGVncmF0aW9uQ29tcGxpYW50ID1cbiAgICAgICAgY29tcGxpYW5jZVJlcG9ydC5yb3V0aW5nUGF0aENvbXBsaWFuY2UubWNwSW50ZWdyYXRpb24uaXNDb21wbGlhbnQ7XG5cbiAgICAgIGlmICghZGlyZWN0QmVkcm9ja0NvbXBsaWFudCkge1xuICAgICAgICB0aGlzLmxvZyhcbiAgICAgICAgICBcImJlZHJvY2stYWN0aXZhdGlvblwiLFxuICAgICAgICAgIGBEaXJlY3QgQmVkcm9jayByb3V0aW5nIHBhdGggR0RQUiBjb21wbGlhbmNlIGZhaWxlZDogJHtjb21wbGlhbmNlUmVwb3J0LnJvdXRpbmdQYXRoQ29tcGxpYW5jZS5kaXJlY3RCZWRyb2NrLnZpb2xhdGlvbnNcbiAgICAgICAgICAgIC5tYXAoKHYpID0+IHYuZGVzY3JpcHRpb24pXG4gICAgICAgICAgICAuam9pbihcIiwgXCIpfWBcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFtY3BJbnRlZ3JhdGlvbkNvbXBsaWFudCkge1xuICAgICAgICB0aGlzLmxvZyhcbiAgICAgICAgICBcImJlZHJvY2stYWN0aXZhdGlvblwiLFxuICAgICAgICAgIGBNQ1AgaW50ZWdyYXRpb24gcm91dGluZyBwYXRoIEdEUFIgY29tcGxpYW5jZSBmYWlsZWQ6ICR7Y29tcGxpYW5jZVJlcG9ydC5yb3V0aW5nUGF0aENvbXBsaWFuY2UubWNwSW50ZWdyYXRpb24udmlvbGF0aW9uc1xuICAgICAgICAgICAgLm1hcCgodikgPT4gdi5kZXNjcmlwdGlvbilcbiAgICAgICAgICAgIC5qb2luKFwiLCBcIil9YFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBjcm9zcy1wYXRoIGNvbXBsaWFuY2VcbiAgICAgIGNvbnN0IGNyb3NzUGF0aENvbXBsaWFudCA9IE9iamVjdC52YWx1ZXMoXG4gICAgICAgIGNvbXBsaWFuY2VSZXBvcnQuY3Jvc3NQYXRoQ29tcGxpYW5jZVxuICAgICAgKS5ldmVyeShCb29sZWFuKTtcbiAgICAgIGlmICghY3Jvc3NQYXRoQ29tcGxpYW50KSB7XG4gICAgICAgIHRoaXMubG9nKFxuICAgICAgICAgIFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsXG4gICAgICAgICAgXCJDcm9zcy1wYXRoIEdEUFIgY29tcGxpYW5jZSBpc3N1ZXMgZGV0ZWN0ZWRcIlxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBMb2cgd2FybmluZ3MgaWYgYW55XG4gICAgICBjb25zdCB0b3RhbFdhcm5pbmdzID1cbiAgICAgICAgY29tcGxpYW5jZVJlcG9ydC5yb3V0aW5nUGF0aENvbXBsaWFuY2UuZGlyZWN0QmVkcm9jay53YXJuaW5ncy5sZW5ndGggK1xuICAgICAgICBjb21wbGlhbmNlUmVwb3J0LnJvdXRpbmdQYXRoQ29tcGxpYW5jZS5tY3BJbnRlZ3JhdGlvbi53YXJuaW5ncy5sZW5ndGg7XG5cbiAgICAgIGlmICh0b3RhbFdhcm5pbmdzID4gMCkge1xuICAgICAgICB0aGlzLmxvZyhcbiAgICAgICAgICBcImJlZHJvY2stYWN0aXZhdGlvblwiLFxuICAgICAgICAgIGBHRFBSIGNvbXBsaWFuY2Ugd2FybmluZ3MgZGV0ZWN0ZWQ6ICR7dG90YWxXYXJuaW5nc30gd2FybmluZ3MgYWNyb3NzIHJvdXRpbmcgcGF0aHNgXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJldHVybiB0cnVlIGlmIGJvdGggcGF0aHMgYXJlIGNvbXBsaWFudCBvciBwYXJ0aWFsbHkgY29tcGxpYW50IHdpdGggaGlnaCBzY29yZVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgY29tcGxpYW5jZVJlcG9ydC5vdmVyYWxsQ29tcGxpYW5jZSA9PT0gXCJjb21wbGlhbnRcIiB8fFxuICAgICAgICAoY29tcGxpYW5jZVJlcG9ydC5vdmVyYWxsQ29tcGxpYW5jZSA9PT0gXCJwYXJ0aWFsXCIgJiZcbiAgICAgICAgICBjb21wbGlhbmNlUmVwb3J0LmNvbXBsaWFuY2VTY29yZSA+PSA4MClcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMubG9nKFxuICAgICAgICBcImJlZHJvY2stYWN0aXZhdGlvblwiLFxuICAgICAgICBgR0RQUiBjb21wbGlhbmNlIHZhbGlkYXRpb24gZXJyb3I6ICR7XG4gICAgICAgICAgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpXG4gICAgICAgIH1gXG4gICAgICApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZSBFVSBkYXRhIHJlc2lkZW5jeSBjb21wbGlhbmNlIGZvciBkaXJlY3QgQmVkcm9jayBhY2Nlc3NcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgdmFsaWRhdGVFVURhdGFSZXNpZGVuY3lDb21wbGlhbmNlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBDaGVjayBCZWRyb2NrIGFncmVlbWVudCBmb3IgRVUgZGF0YSByZXNpZGVuY3lcbiAgICAgIGNvbnN0IGJlZHJvY2tBZ3JlZW1lbnQgPSB0aGlzLnByb3ZpZGVyQ29tcGxpYW5jZS5nZXRBZ3JlZW1lbnQoXCJiZWRyb2NrXCIpO1xuICAgICAgaWYgKCFiZWRyb2NrQWdyZWVtZW50IHx8ICFiZWRyb2NrQWdyZWVtZW50LmV1RGF0YVJlc2lkZW5jeSkge1xuICAgICAgICB0aGlzLmxvZyhcbiAgICAgICAgICBcImJlZHJvY2stYWN0aXZhdGlvblwiLFxuICAgICAgICAgIFwiQmVkcm9jayBhZ3JlZW1lbnQgZG9lcyBub3QgZ3VhcmFudGVlIEVVIGRhdGEgcmVzaWRlbmN5XCJcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBWYWxpZGF0ZSB0aGF0IEJlZHJvY2sgaXMgY29uZmlndXJlZCB0byB1c2UgRVUgcmVnaW9uc1xuICAgICAgY29uc3QgZXVSZWdpb25Db25maWd1cmVkID1cbiAgICAgICAgYXdhaXQgdGhpcy52YWxpZGF0ZUJlZHJvY2tFVVJlZ2lvbkNvbmZpZ3VyYXRpb24oKTtcbiAgICAgIGlmICghZXVSZWdpb25Db25maWd1cmVkKSB7XG4gICAgICAgIHRoaXMubG9nKFxuICAgICAgICAgIFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsXG4gICAgICAgICAgXCJCZWRyb2NrIG5vdCBjb25maWd1cmVkIHRvIHVzZSBFVSByZWdpb25zIGZvciBkYXRhIHByb2Nlc3NpbmdcIlxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZyhcbiAgICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgICAgYEVVIGRhdGEgcmVzaWRlbmN5IHZhbGlkYXRpb24gZXJyb3I6ICR7ZXJyb3J9YFxuICAgICAgKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRhdGUgUElJIGRldGVjdGlvbiBjb25maWd1cmF0aW9uXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIHZhbGlkYXRlUElJRGV0ZWN0aW9uQ29uZmlndXJhdGlvbigpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICB0cnkge1xuICAgICAgLy8gQ2hlY2sgaWYgUElJIGRldGVjdGlvbiBmZWF0dXJlIGZsYWdzIGFyZSBlbmFibGVkXG4gICAgICBjb25zdCBwaWlEZXRlY3Rpb25FbmFibGVkID0gdGhpcy5mZWF0dXJlRmxhZ3MuZ2V0RmxhZyhcbiAgICAgICAgXCJwaWlfZGV0ZWN0aW9uX2VuYWJsZWRcIixcbiAgICAgICAgZmFsc2VcbiAgICAgICk7XG4gICAgICBjb25zdCBwaWlSZWRhY3Rpb25FbmFibGVkID0gdGhpcy5mZWF0dXJlRmxhZ3MuZ2V0RmxhZyhcbiAgICAgICAgXCJwaWlfcmVkYWN0aW9uX2VuYWJsZWRcIixcbiAgICAgICAgZmFsc2VcbiAgICAgICk7XG5cbiAgICAgIGlmICghcGlpRGV0ZWN0aW9uRW5hYmxlZCB8fCAhcGlpUmVkYWN0aW9uRW5hYmxlZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZGl0aW9uYWwgdmFsaWRhdGlvbiBjb3VsZCBjaGVjayBpZiBQSUkgZGV0ZWN0aW9uIHNlcnZpY2VzIGFyZSBydW5uaW5nXG4gICAgICAvLyBUaGlzIHdvdWxkIGludGVncmF0ZSB3aXRoIGV4aXN0aW5nIFBJSSBkZXRlY3Rpb24gaW5mcmFzdHJ1Y3R1cmVcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZyhcbiAgICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgICAgYFBJSSBkZXRlY3Rpb24gdmFsaWRhdGlvbiBlcnJvcjogJHtlcnJvcn1gXG4gICAgICApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZSBCZWRyb2NrIEVVIHJlZ2lvbiBjb25maWd1cmF0aW9uXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIHZhbGlkYXRlQmVkcm9ja0VVUmVnaW9uQ29uZmlndXJhdGlvbigpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICB0cnkge1xuICAgICAgLy8gQ2hlY2sgaWYgQmVkcm9jayBpcyBjb25maWd1cmVkIHRvIHVzZSBFVSByZWdpb25zXG4gICAgICBjb25zdCBiZWRyb2NrUmVnaW9uID1cbiAgICAgICAgcHJvY2Vzcy5lbnYuQVdTX0JFRFJPQ0tfUkVHSU9OIHx8IHByb2Nlc3MuZW52LkFXU19SRUdJT04gfHwgXCJ1cy1lYXN0LTFcIjtcblxuICAgICAgLy8gRVUgcmVnaW9ucyBmb3IgQmVkcm9ja1xuICAgICAgY29uc3QgZXVSZWdpb25zID0gW1xuICAgICAgICBcImV1LWNlbnRyYWwtMVwiLFxuICAgICAgICBcImV1LXdlc3QtMVwiLFxuICAgICAgICBcImV1LXdlc3QtMlwiLFxuICAgICAgICBcImV1LXdlc3QtM1wiLFxuICAgICAgICBcImV1LW5vcnRoLTFcIixcbiAgICAgIF07XG5cbiAgICAgIGlmICghZXVSZWdpb25zLmluY2x1ZGVzKGJlZHJvY2tSZWdpb24pKSB7XG4gICAgICAgIHRoaXMubG9nKFxuICAgICAgICAgIFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsXG4gICAgICAgICAgYEJlZHJvY2sgcmVnaW9uICR7YmVkcm9ja1JlZ2lvbn0gaXMgbm90IGFuIEVVIHJlZ2lvbmBcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5sb2coXG4gICAgICAgIFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsXG4gICAgICAgIGBCZWRyb2NrIEVVIHJlZ2lvbiB2YWxpZGF0aW9uIGVycm9yOiAke2Vycm9yfWBcbiAgICAgICk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlIGNvbXBsaWFuY2UgZm9yIHN1cHBvcnQgb3BlcmF0aW9ucyB3aXRoIGh5YnJpZCByb3V0aW5nXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIHZhbGlkYXRlQ29tcGxpYW5jZUZvclN1cHBvcnRPcGVyYXRpb24oXG4gICAgb3BlcmF0aW9uVHlwZTogSHlicmlkUm91dGluZ1BhdGhbXCJvcGVyYXRpb25UeXBlXCJdLFxuICAgIHJvdXRlVHlwZTogSHlicmlkUm91dGluZ1BhdGhbXCJyb3V0ZVR5cGVcIl0gPSBcImRpcmVjdF9iZWRyb2NrXCIsXG4gICAgcHJpb3JpdHk6IEh5YnJpZFJvdXRpbmdQYXRoW1wicHJpb3JpdHlcIl0gPSBcIm1lZGl1bVwiXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmxvZyhcbiAgICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgICAgYFZhbGlkYXRpbmcgR0RQUiBjb21wbGlhbmNlIGZvciBzdXBwb3J0IG9wZXJhdGlvbjogJHtvcGVyYXRpb25UeXBlfSB2aWEgJHtyb3V0ZVR5cGV9IHJvdXRlYFxuICAgICAgKTtcblxuICAgICAgLy8gQ3JlYXRlIHJvdXRpbmcgcGF0aCBmb3IgdmFsaWRhdGlvblxuICAgICAgY29uc3Qgcm91dGluZ1BhdGg6IEh5YnJpZFJvdXRpbmdQYXRoID0ge1xuICAgICAgICByb3V0ZVR5cGUsXG4gICAgICAgIHByb3ZpZGVyOiBcImJlZHJvY2tcIixcbiAgICAgICAgb3BlcmF0aW9uVHlwZSxcbiAgICAgICAgcHJpb3JpdHksXG4gICAgICB9O1xuXG4gICAgICAvLyBHZW5lcmF0ZSBjb3JyZWxhdGlvbiBJRCBmb3IgdGhpcyB2YWxpZGF0aW9uXG4gICAgICBjb25zdCBjb3JyZWxhdGlvbklkID0gYHN1cHBvcnQtJHtvcGVyYXRpb25UeXBlfS0ke3JvdXRlVHlwZX0tJHtEYXRlLm5vdygpfWA7XG5cbiAgICAgIC8vIFZhbGlkYXRlIEdEUFIgY29tcGxpYW5jZSBiZWZvcmUgcm91dGluZ1xuICAgICAgY29uc3QgdmFsaWRhdGlvblJlc3VsdCA9XG4gICAgICAgIGF3YWl0IHRoaXMuZ2Rwckh5YnJpZFZhbGlkYXRvci52YWxpZGF0ZUJlZm9yZVJvdXRpbmcoXG4gICAgICAgICAgcm91dGluZ1BhdGgsXG4gICAgICAgICAgY29ycmVsYXRpb25JZFxuICAgICAgICApO1xuXG4gICAgICBpZiAoIXZhbGlkYXRpb25SZXN1bHQuYWxsb3dlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IodmFsaWRhdGlvblJlc3VsdC5yZWFzb24pO1xuICAgICAgfVxuXG4gICAgICAvLyBBbHNvIHZhbGlkYXRlIHVzaW5nIGV4aXN0aW5nIGNvbXBsaWFuY2UgaW50ZWdyYXRpb24gZm9yIHByb3ZpZGVyIGFncmVlbWVudHNcbiAgICAgIGNvbnN0IG1vY2tSZXF1ZXN0ID0ge1xuICAgICAgICBwcm9tcHQ6IGBTdXBwb3J0IG9wZXJhdGlvbjogJHtvcGVyYXRpb25UeXBlfWAsXG4gICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICBkb21haW46IFwic3VwcG9ydFwiLFxuICAgICAgICAgIGludGVudDogXCJpbmZyYXN0cnVjdHVyZV9zdXBwb3J0XCIsXG4gICAgICAgICAgcm91dGluZ1BhdGg6IHJvdXRlVHlwZSxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIGF3YWl0IHRoaXMuY29tcGxpYW5jZUludGVncmF0aW9uLmVuZm9yY2VDb21wbGlhbmNlKFxuICAgICAgICBtb2NrUmVxdWVzdCxcbiAgICAgICAgXCJiZWRyb2NrXCIsXG4gICAgICAgIGNvcnJlbGF0aW9uSWRcbiAgICAgICk7XG5cbiAgICAgIHRoaXMubG9nKFxuICAgICAgICBcImJlZHJvY2stYWN0aXZhdGlvblwiLFxuICAgICAgICBgR0RQUiBhbmQgcHJvdmlkZXIgY29tcGxpYW5jZSB2YWxpZGF0aW9uIHBhc3NlZCBmb3Igc3VwcG9ydCBvcGVyYXRpb246ICR7b3BlcmF0aW9uVHlwZX0gdmlhICR7cm91dGVUeXBlfWBcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9XG4gICAgICAgIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKTtcblxuICAgICAgdGhpcy5sb2coXG4gICAgICAgIFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsXG4gICAgICAgIGBDb21wbGlhbmNlIHZhbGlkYXRpb24gZmFpbGVkIGZvciBzdXBwb3J0IG9wZXJhdGlvbjogJHtvcGVyYXRpb25UeXBlfSB2aWEgJHtyb3V0ZVR5cGV9IC0gJHtlcnJvck1lc3NhZ2V9YFxuICAgICAgKTtcblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgU3VwcG9ydCBvcGVyYXRpb24gYmxvY2tlZCBkdWUgdG8gY29tcGxpYW5jZSB2aW9sYXRpb246ICR7ZXJyb3JNZXNzYWdlfWBcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBjb21wbGlhbmNlIHJlcG9ydGluZyBmb3Igc3VwcG9ydCBtb2RlXG4gICAqL1xuICBhc3luYyBjcmVhdGVDb21wbGlhbmNlUmVwb3J0Rm9yU3VwcG9ydE1vZGUoKTogUHJvbWlzZTx7XG4gICAgcmVwb3J0SWQ6IHN0cmluZztcbiAgICB0aW1lc3RhbXA6IERhdGU7XG4gICAgc3VwcG9ydE1vZGVDb21wbGlhbmNlOiB7XG4gICAgICBvdmVyYWxsQ29tcGxpYW50OiBib29sZWFuO1xuICAgICAgYmVkcm9ja0NvbXBsaWFudDogYm9vbGVhbjtcbiAgICAgIGdkcHJDb21wbGlhbnQ6IGJvb2xlYW47XG4gICAgICBldURhdGFSZXNpZGVuY3lDb21wbGlhbnQ6IGJvb2xlYW47XG4gICAgfTtcbiAgICBoeWJyaWRSb3V0aW5nQ29tcGxpYW5jZToge1xuICAgICAgbWNwUGF0aENvbXBsaWFudDogYm9vbGVhbjtcbiAgICAgIGRpcmVjdEJlZHJvY2tQYXRoQ29tcGxpYW50OiBib29sZWFuO1xuICAgICAgYXVkaXRUcmFpbENvbXBsZXRlOiBib29sZWFuO1xuICAgIH07XG4gICAgdmlvbGF0aW9uczogc3RyaW5nW107XG4gICAgcmVjb21tZW5kYXRpb25zOiBzdHJpbmdbXTtcbiAgfT4ge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmxvZyhcbiAgICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgICAgXCJHZW5lcmF0aW5nIGNvbXBsaWFuY2UgcmVwb3J0IGZvciBzdXBwb3J0IG1vZGVcIlxuICAgICAgKTtcblxuICAgICAgY29uc3QgcmVwb3J0SWQgPSBgYmVkcm9jay1zdXBwb3J0LWNvbXBsaWFuY2UtJHtEYXRlLm5vdygpfWA7XG4gICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpO1xuXG4gICAgICAvLyBHZXQgb3ZlcmFsbCBjb21wbGlhbmNlIHN0YXR1c1xuICAgICAgY29uc3QgY29tcGxpYW5jZVN0YXR1cyA9IGF3YWl0IHRoaXMudmFsaWRhdGVDb21wbGlhbmNlU3RhdHVzKCk7XG5cbiAgICAgIC8vIENoZWNrIEJlZHJvY2stc3BlY2lmaWMgY29tcGxpYW5jZVxuICAgICAgY29uc3QgYmVkcm9ja0NvbXBsaWFuY2UgPVxuICAgICAgICBhd2FpdCB0aGlzLnByb3ZpZGVyQ29tcGxpYW5jZS52ZXJpZnlQcm92aWRlckNvbXBsaWFuY2UoXCJiZWRyb2NrXCIpO1xuXG4gICAgICAvLyBDaGVjayBHRFBSIGNvbXBsaWFuY2VcbiAgICAgIGNvbnN0IGdkcHJDb21wbGlhbnQgPSBhd2FpdCB0aGlzLnZhbGlkYXRlR0RQUkNvbXBsaWFuY2UoKTtcblxuICAgICAgLy8gQ2hlY2sgRVUgZGF0YSByZXNpZGVuY3lcbiAgICAgIGNvbnN0IGV1RGF0YVJlc2lkZW5jeUNvbXBsaWFudCA9XG4gICAgICAgIGF3YWl0IHRoaXMudmFsaWRhdGVFVURhdGFSZXNpZGVuY3lDb21wbGlhbmNlKCk7XG5cbiAgICAgIC8vIEdldCBjb21wbGlhbmNlIHN1bW1hcnkgZm9yIGFsbCBwcm92aWRlcnNcbiAgICAgIGNvbnN0IGNvbXBsaWFuY2VTdW1tYXJ5ID1cbiAgICAgICAgYXdhaXQgdGhpcy5jb21wbGlhbmNlSW50ZWdyYXRpb24uZ2V0Q29tcGxpYW5jZVN1bW1hcnkoKTtcblxuICAgICAgY29uc3QgcmVwb3J0ID0ge1xuICAgICAgICByZXBvcnRJZCxcbiAgICAgICAgdGltZXN0YW1wLFxuICAgICAgICBzdXBwb3J0TW9kZUNvbXBsaWFuY2U6IHtcbiAgICAgICAgICBvdmVyYWxsQ29tcGxpYW50OiBjb21wbGlhbmNlU3RhdHVzLmlzQ29tcGxpYW50LFxuICAgICAgICAgIGJlZHJvY2tDb21wbGlhbnQ6IGJlZHJvY2tDb21wbGlhbmNlLmNvbXBsaWFudCxcbiAgICAgICAgICBnZHByQ29tcGxpYW50LFxuICAgICAgICAgIGV1RGF0YVJlc2lkZW5jeUNvbXBsaWFudCxcbiAgICAgICAgfSxcbiAgICAgICAgaHlicmlkUm91dGluZ0NvbXBsaWFuY2U6IHtcbiAgICAgICAgICBtY3BQYXRoQ29tcGxpYW50OlxuICAgICAgICAgICAgY29tcGxpYW5jZVN1bW1hcnkub3ZlcmFsbENvbXBsaWFuY2UgIT09IFwibm9uX2NvbXBsaWFudFwiLFxuICAgICAgICAgIGRpcmVjdEJlZHJvY2tQYXRoQ29tcGxpYW50OlxuICAgICAgICAgICAgYmVkcm9ja0NvbXBsaWFuY2UuY29tcGxpYW50ICYmIGdkcHJDb21wbGlhbnQsXG4gICAgICAgICAgYXVkaXRUcmFpbENvbXBsZXRlOiB0cnVlLCAvLyBBc3N1bWluZyBhdWRpdCB0cmFpbCBpcyBwcm9wZXJseSBjb25maWd1cmVkXG4gICAgICAgIH0sXG4gICAgICAgIHZpb2xhdGlvbnM6IFtcbiAgICAgICAgICAuLi5jb21wbGlhbmNlU3RhdHVzLnZpb2xhdGlvbnMsXG4gICAgICAgICAgLi4uYmVkcm9ja0NvbXBsaWFuY2UudmlvbGF0aW9ucyxcbiAgICAgICAgXSxcbiAgICAgICAgcmVjb21tZW5kYXRpb25zOiBbXG4gICAgICAgICAgLi4uY29tcGxpYW5jZVN0YXR1cy5yZWNvbW1lbmRhdGlvbnMsXG4gICAgICAgICAgXCJSZWd1bGFybHkgcmV2aWV3IHByb3ZpZGVyIGFncmVlbWVudHMgZm9yIGNvbXBsaWFuY2UgdXBkYXRlc1wiLFxuICAgICAgICAgIFwiTW9uaXRvciBQSUkgZGV0ZWN0aW9uIGFuZCByZWRhY3Rpb24gZWZmZWN0aXZlbmVzc1wiLFxuICAgICAgICAgIFwiRW5zdXJlIGF1ZGl0IHRyYWlsIGNvbXBsZXRlbmVzcyBmb3IgYWxsIHN1cHBvcnQgb3BlcmF0aW9uc1wiLFxuICAgICAgICBdLFxuICAgICAgfTtcblxuICAgICAgdGhpcy5sb2coXG4gICAgICAgIFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsXG4gICAgICAgIFwiQ29tcGxpYW5jZSByZXBvcnQgZ2VuZXJhdGVkIHN1Y2Nlc3NmdWxseVwiLFxuICAgICAgICB7XG4gICAgICAgICAgcmVwb3J0SWQsXG4gICAgICAgICAgb3ZlcmFsbENvbXBsaWFudDogcmVwb3J0LnN1cHBvcnRNb2RlQ29tcGxpYW5jZS5vdmVyYWxsQ29tcGxpYW50LFxuICAgICAgICAgIHZpb2xhdGlvbnNDb3VudDogcmVwb3J0LnZpb2xhdGlvbnMubGVuZ3RoLFxuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICByZXR1cm4gcmVwb3J0O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPVxuICAgICAgICBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcik7XG5cbiAgICAgIHRoaXMubG9nKFxuICAgICAgICBcImJlZHJvY2stYWN0aXZhdGlvblwiLFxuICAgICAgICBgRmFpbGVkIHRvIGdlbmVyYXRlIGNvbXBsaWFuY2UgcmVwb3J0OiAke2Vycm9yTWVzc2FnZX1gXG4gICAgICApO1xuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENvbXBsaWFuY2UgcmVwb3J0IGdlbmVyYXRpb24gZmFpbGVkOiAke2Vycm9yTWVzc2FnZX1gKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRW5hYmxlIENpcmN1aXQgQnJlYWtlciBQcm90ZWN0aW9uIGZvciBCb3RoIFJvdXRpbmcgUGF0aHNcbiAgICovXG4gIGFzeW5jIGVuYWJsZUNpcmN1aXRCcmVha2VyKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmxvZyhcbiAgICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgICAgXCJFbmFibGluZyBjaXJjdWl0IGJyZWFrZXIgcHJvdGVjdGlvbiBmb3IgaHlicmlkIHJvdXRpbmdcIlxuICAgICAgKTtcblxuICAgICAgLy8gVmFsaWRhdGUgY2lyY3VpdCBicmVha2VyIGlzIHByb3Blcmx5IGluaXRpYWxpemVkXG4gICAgICBpZiAoIXRoaXMuY2lyY3VpdEJyZWFrZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2lyY3VpdCBicmVha2VyIG5vdCBpbml0aWFsaXplZFwiKTtcbiAgICAgIH1cblxuICAgICAgLy8gRW5hYmxlIGNpcmN1aXQgYnJlYWtlciBmb3IgYWxsIHByb3ZpZGVyc1xuICAgICAgY29uc3QgcHJvdmlkZXJzOiBQcm92aWRlcltdID0gW1wiYmVkcm9ja1wiLCBcImdvb2dsZVwiLCBcIm1ldGFcIl07XG5cbiAgICAgIC8vIFJlc2V0IGFueSBleGlzdGluZyBjaXJjdWl0IGJyZWFrZXIgc3RhdGVzXG4gICAgICBwcm92aWRlcnMuZm9yRWFjaCgocHJvdmlkZXIpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuY2lyY3VpdEJyZWFrZXIuaXNPcGVuKHByb3ZpZGVyKSkge1xuICAgICAgICAgIHRoaXMubG9nKFxuICAgICAgICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgICAgICAgIGBSZXNldHRpbmcgY2lyY3VpdCBicmVha2VyIGZvciBwcm92aWRlcjogJHtwcm92aWRlcn1gXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLmNpcmN1aXRCcmVha2VyLmZvcmNlQ2xvc2UocHJvdmlkZXIpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gQ29uZmlndXJlIGNpcmN1aXQgYnJlYWtlciB0aHJlc2hvbGRzIGZvciBzdXBwb3J0IG9wZXJhdGlvbnNcbiAgICAgIGNvbnN0IHN1cHBvcnRDb25maWcgPSB7XG4gICAgICAgIGZhaWx1cmVUaHJlc2hvbGQ6IDMsIC8vIE1vcmUgc2Vuc2l0aXZlIGZvciBzdXBwb3J0IG9wZXJhdGlvbnNcbiAgICAgICAgcmVjb3ZlcnlUaW1lb3V0OiAzMDAwMCwgLy8gMzAgc2Vjb25kcyByZWNvdmVyeVxuICAgICAgICBoYWxmT3Blbk1heENhbGxzOiAyLCAvLyBDb25zZXJ2YXRpdmUgdGVzdGluZ1xuICAgICAgICBoZWFsdGhDaGVja0ludGVydmFsOiAxNTAwMCwgLy8gMTUgc2Vjb25kIGhlYWx0aCBjaGVja3NcbiAgICAgIH07XG5cbiAgICAgIC8vIExvZyBjaXJjdWl0IGJyZWFrZXIgY29uZmlndXJhdGlvblxuICAgICAgdGhpcy5sb2coXG4gICAgICAgIFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsXG4gICAgICAgIGBDaXJjdWl0IGJyZWFrZXIgY29uZmlndXJlZCB3aXRoIHRocmVzaG9sZHM6ICR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgc3VwcG9ydENvbmZpZ1xuICAgICAgICApfWBcbiAgICAgICk7XG5cbiAgICAgIC8vIEVuYWJsZSBjaXJjdWl0IGJyZWFrZXIgbW9uaXRvcmluZyBmb3IgZGlyZWN0IEJlZHJvY2sgcGF0aFxuICAgICAgaWYgKHRoaXMuZGlyZWN0QmVkcm9ja0NsaWVudCkge1xuICAgICAgICB0aGlzLmxvZyhcbiAgICAgICAgICBcImJlZHJvY2stYWN0aXZhdGlvblwiLFxuICAgICAgICAgIFwiQ2lyY3VpdCBicmVha2VyIGVuYWJsZWQgZm9yIGRpcmVjdCBCZWRyb2NrIHBhdGhcIlxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBFbmFibGUgY2lyY3VpdCBicmVha2VyIG1vbml0b3JpbmcgZm9yIE1DUCBwYXRoXG4gICAgICBpZiAodGhpcy5tY3BSb3V0ZXIpIHtcbiAgICAgICAgdGhpcy5sb2coXG4gICAgICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgICAgICBcIkNpcmN1aXQgYnJlYWtlciBlbmFibGVkIGZvciBNQ1Agcm91dGluZyBwYXRoXCJcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gU3RhcnQgaGVhbHRoIG1vbml0b3JpbmcgZm9yIGJvdGggcGF0aHNcbiAgICAgIGlmICh0aGlzLmh5YnJpZEhlYWx0aE1vbml0b3IpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5oeWJyaWRIZWFsdGhNb25pdG9yLnN0YXJ0SGVhbHRoTW9uaXRvcmluZygpO1xuICAgICAgICB0aGlzLmxvZyhcbiAgICAgICAgICBcImJlZHJvY2stYWN0aXZhdGlvblwiLFxuICAgICAgICAgIFwiSGVhbHRoIG1vbml0b3Jpbmcgc3RhcnRlZCBmb3IgaHlicmlkIHJvdXRpbmcgcGF0aHNcIlxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBMb2cgYXVkaXQgdHJhaWwgZXZlbnRcbiAgICAgIGF3YWl0IHRoaXMuYXVkaXRUcmFpbC5sb2dTdXBwb3J0TW9kZUV2ZW50KFxuICAgICAgICBcImNpcmN1aXRfYnJlYWtlcl9lbmFibGVkXCIsXG4gICAgICAgIHtcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgICAgY29uZmlndXJhdGlvbjogc3VwcG9ydENvbmZpZyxcbiAgICAgICAgICBlbmFibGVkUGF0aHM6IFtcImRpcmVjdF9iZWRyb2NrXCIsIFwibWNwX3JvdXRlclwiXSxcbiAgICAgICAgICBoZWFsdGhNb25pdG9yaW5nQWN0aXZlOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBcInN5c3RlbVwiXG4gICAgICApO1xuXG4gICAgICB0aGlzLmxvZyhcbiAgICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgICAgXCJDaXJjdWl0IGJyZWFrZXIgcHJvdGVjdGlvbiBlbmFibGVkIGZvciBib3RoIHJvdXRpbmcgcGF0aHNcIlxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID1cbiAgICAgICAgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpO1xuXG4gICAgICB0aGlzLmxvZyhcbiAgICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgICAgYEZhaWxlZCB0byBlbmFibGUgY2lyY3VpdCBicmVha2VyOiAke2Vycm9yTWVzc2FnZX1gXG4gICAgICApO1xuXG4gICAgICAvLyBMb2cgZmFpbHVyZSB0byBhdWRpdCB0cmFpbFxuICAgICAgYXdhaXQgdGhpcy5hdWRpdFRyYWlsLmxvZ1N1cHBvcnRNb2RlRXZlbnQoXG4gICAgICAgIFwiY2lyY3VpdF9icmVha2VyX2VuYWJsZV9mYWlsZWRcIixcbiAgICAgICAge1xuICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgICBlcnJvcjogZXJyb3JNZXNzYWdlLFxuICAgICAgICAgIGNvbnRleHQ6IFwiY2lyY3VpdF9icmVha2VyX2FjdGl2YXRpb25cIixcbiAgICAgICAgfSxcbiAgICAgICAgXCJzeXN0ZW1cIlxuICAgICAgKTtcblxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDaXJjdWl0IGJyZWFrZXIgYWN0aXZhdGlvbiBmYWlsZWQ6ICR7ZXJyb3JNZXNzYWdlfWApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGNoZWNrU2VjdXJpdHlQb3N0dXJlKCk6IFByb21pc2U8U2VjdXJpdHlBdWRpdFJlc3VsdD4ge1xuICAgIHRoaXMubG9nKFxuICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgIFwiQ2hlY2tpbmcgc2VjdXJpdHkgcG9zdHVyZSBmb3IgaHlicmlkIGFyY2hpdGVjdHVyZVwiXG4gICAgKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBTdGFydCBzZWN1cml0eSBwb3N0dXJlIG1vbml0b3JpbmcgaWYgbm90IGFscmVhZHkgYWN0aXZlXG4gICAgICBpZiAoIXRoaXMuc2VjdXJpdHlQb3N0dXJlTW9uaXRvci5pc01vbml0b3JpbmdBY3RpdmUoKSkge1xuICAgICAgICBhd2FpdCB0aGlzLnNlY3VyaXR5UG9zdHVyZU1vbml0b3Iuc3RhcnRNb25pdG9yaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFzc2VzcyBjdXJyZW50IHNlY3VyaXR5IHBvc3R1cmVcbiAgICAgIGNvbnN0IHBvc3R1cmVTdGF0dXMgPVxuICAgICAgICBhd2FpdCB0aGlzLnNlY3VyaXR5UG9zdHVyZU1vbml0b3IuYXNzZXNzU2VjdXJpdHlQb3N0dXJlKCk7XG5cbiAgICAgIC8vIENvbnZlcnQgdG8gU2VjdXJpdHlBdWRpdFJlc3VsdCBmb3JtYXRcbiAgICAgIGNvbnN0IHZ1bG5lcmFiaWxpdGllczogU2VjdXJpdHlWdWxuZXJhYmlsaXR5W10gPSBbXG4gICAgICAgIC4uLnBvc3R1cmVTdGF0dXMucm91dGVzLm1jcC52dWxuZXJhYmlsaXRpZXMsXG4gICAgICAgIC4uLnBvc3R1cmVTdGF0dXMucm91dGVzLmRpcmVjdEJlZHJvY2sudnVsbmVyYWJpbGl0aWVzLFxuICAgICAgXTtcblxuICAgICAgY29uc3QgcmVjb21tZW5kYXRpb25zOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgLi4ucG9zdHVyZVN0YXR1cy5yZWNvbW1lbmRhdGlvbnMuaW1tZWRpYXRlLm1hcCgocikgPT4gci5kZXNjcmlwdGlvbiksXG4gICAgICAgIC4uLnBvc3R1cmVTdGF0dXMucmVjb21tZW5kYXRpb25zLnNob3J0VGVybS5tYXAoKHIpID0+IHIuZGVzY3JpcHRpb24pLFxuICAgICAgXTtcblxuICAgICAgY29uc3QgcmVzdWx0OiBTZWN1cml0eUF1ZGl0UmVzdWx0ID0ge1xuICAgICAgICBzZWN1cml0eVNjb3JlOiBwb3N0dXJlU3RhdHVzLm92ZXJhbGwuc2VjdXJpdHlTY29yZSxcbiAgICAgICAgdnVsbmVyYWJpbGl0aWVzLFxuICAgICAgICByZWNvbW1lbmRhdGlvbnMsXG4gICAgICAgIGxhc3RBdWRpdDogcG9zdHVyZVN0YXR1cy5vdmVyYWxsLmxhc3RBc3Nlc3NtZW50LFxuICAgICAgfTtcblxuICAgICAgdGhpcy5sb2coXG4gICAgICAgIFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsXG4gICAgICAgIGBTZWN1cml0eSBwb3N0dXJlIGNoZWNrIGNvbXBsZXRlZDogU2NvcmUgJHtyZXN1bHQuc2VjdXJpdHlTY29yZX0sICR7dnVsbmVyYWJpbGl0aWVzLmxlbmd0aH0gdnVsbmVyYWJpbGl0aWVzYFxuICAgICAgKTtcblxuICAgICAgLy8gTG9nIHRvIGF1ZGl0IHRyYWlsXG4gICAgICBhd2FpdCB0aGlzLmF1ZGl0VHJhaWwubG9nU3VwcG9ydE1vZGVFdmVudChcbiAgICAgICAgXCJzZWN1cml0eV9wb3N0dXJlX2NoZWNrZWRcIixcbiAgICAgICAge1xuICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgICBzZWN1cml0eVNjb3JlOiByZXN1bHQuc2VjdXJpdHlTY29yZSxcbiAgICAgICAgICB2dWxuZXJhYmlsaXR5Q291bnQ6IHZ1bG5lcmFiaWxpdGllcy5sZW5ndGgsXG4gICAgICAgICAgdGhyZWF0TGV2ZWw6IHBvc3R1cmVTdGF0dXMub3ZlcmFsbC50aHJlYXRMZXZlbCxcbiAgICAgICAgICBjb21wbGlhbmNlU3RhdHVzOiBwb3N0dXJlU3RhdHVzLm92ZXJhbGwuY29tcGxpYW5jZVN0YXR1cyxcbiAgICAgICAgfSxcbiAgICAgICAgXCJzeXN0ZW1cIlxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID1cbiAgICAgICAgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpO1xuXG4gICAgICB0aGlzLmxvZyhcbiAgICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgICAgYFNlY3VyaXR5IHBvc3R1cmUgY2hlY2sgZmFpbGVkOiAke2Vycm9yTWVzc2FnZX1gXG4gICAgICApO1xuXG4gICAgICAvLyBMb2cgZmFpbHVyZSB0byBhdWRpdCB0cmFpbFxuICAgICAgYXdhaXQgdGhpcy5hdWRpdFRyYWlsLmxvZ1N1cHBvcnRNb2RlRXZlbnQoXG4gICAgICAgIFwic2VjdXJpdHlfcG9zdHVyZV9jaGVja19mYWlsZWRcIixcbiAgICAgICAge1xuICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgICBlcnJvcjogZXJyb3JNZXNzYWdlLFxuICAgICAgICB9LFxuICAgICAgICBcInN5c3RlbVwiXG4gICAgICApO1xuXG4gICAgICAvLyBSZXR1cm4gYSBkZWdyYWRlZCBzZWN1cml0eSByZXN1bHRcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNlY3VyaXR5U2NvcmU6IDAsXG4gICAgICAgIHZ1bG5lcmFiaWxpdGllczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkOiBcInNlY3VyaXR5LWNoZWNrLWZhaWx1cmVcIixcbiAgICAgICAgICAgIHNldmVyaXR5OiBcImNyaXRpY2FsXCIsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogYFNlY3VyaXR5IHBvc3R1cmUgY2hlY2sgZmFpbGVkOiAke2Vycm9yTWVzc2FnZX1gLFxuICAgICAgICAgICAgY29tcG9uZW50OiBcInNlY3VyaXR5LXBvc3R1cmUtbW9uaXRvclwiLFxuICAgICAgICAgICAgcmVtZWRpYXRpb246IFwiSW52ZXN0aWdhdGUgYW5kIGZpeCBzZWN1cml0eSBtb25pdG9yaW5nIHN5c3RlbVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHJlY29tbWVuZGF0aW9uczogW1xuICAgICAgICAgIFwiRml4IHNlY3VyaXR5IHBvc3R1cmUgbW9uaXRvcmluZyBzeXN0ZW1cIixcbiAgICAgICAgICBcIkludmVzdGlnYXRlIHNlY3VyaXR5IGNoZWNrIGZhaWx1cmVcIixcbiAgICAgICAgICBcIk1hbnVhbCBzZWN1cml0eSBhdWRpdCByZXF1aXJlZFwiLFxuICAgICAgICBdLFxuICAgICAgICBsYXN0QXVkaXQ6IG5ldyBEYXRlKCksXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBDaXJjdWl0IEJyZWFrZXIgU3RhdHVzIGZvciBCb3RoIFJvdXRpbmcgUGF0aHNcbiAgICovXG4gIGFzeW5jIGdldENpcmN1aXRCcmVha2VyU3RhdHVzKCk6IFByb21pc2U8e1xuICAgIGRpcmVjdEJlZHJvY2s6IHsgaXNPcGVuOiBib29sZWFuOyBzdGF0ZTogc3RyaW5nOyBtZXRyaWNzOiBhbnkgfTtcbiAgICBtY3BSb3V0ZXI6IHsgaXNPcGVuOiBib29sZWFuOyBzdGF0ZTogc3RyaW5nOyBtZXRyaWNzOiBhbnkgfTtcbiAgICBvdmVyYWxsSGVhbHRoOiBcImhlYWx0aHlcIiB8IFwiZGVncmFkZWRcIiB8IFwiY3JpdGljYWxcIjtcbiAgfT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBDaGVjayBkaXJlY3QgQmVkcm9jayBjaXJjdWl0IGJyZWFrZXJcbiAgICAgIGNvbnN0IGRpcmVjdEJlZHJvY2tPcGVuID0gdGhpcy5jaXJjdWl0QnJlYWtlci5pc09wZW4oXCJiZWRyb2NrXCIpO1xuICAgICAgY29uc3QgZGlyZWN0QmVkcm9ja01ldHJpY3MgPSB0aGlzLmNpcmN1aXRCcmVha2VyLmdldE1ldHJpY3MoXCJiZWRyb2NrXCIpO1xuXG4gICAgICAvLyBDaGVjayBNQ1Agcm91dGVyIGNpcmN1aXQgYnJlYWtlciAodXNpbmcgXCJnb29nbGVcIiBhcyBNQ1AgcHJvdmlkZXIgcHJveHkpXG4gICAgICBjb25zdCBtY3BSb3V0ZXJPcGVuID0gdGhpcy5jaXJjdWl0QnJlYWtlci5pc09wZW4oXCJnb29nbGVcIik7XG4gICAgICBjb25zdCBtY3BSb3V0ZXJNZXRyaWNzID0gdGhpcy5jaXJjdWl0QnJlYWtlci5nZXRNZXRyaWNzKFwiZ29vZ2xlXCIpO1xuXG4gICAgICAvLyBEZXRlcm1pbmUgb3ZlcmFsbCBoZWFsdGhcbiAgICAgIGxldCBvdmVyYWxsSGVhbHRoOiBcImhlYWx0aHlcIiB8IFwiZGVncmFkZWRcIiB8IFwiY3JpdGljYWxcIiA9IFwiaGVhbHRoeVwiO1xuXG4gICAgICBpZiAoZGlyZWN0QmVkcm9ja09wZW4gJiYgbWNwUm91dGVyT3Blbikge1xuICAgICAgICBvdmVyYWxsSGVhbHRoID0gXCJjcml0aWNhbFwiOyAvLyBCb3RoIHBhdGhzIGRvd25cbiAgICAgIH0gZWxzZSBpZiAoZGlyZWN0QmVkcm9ja09wZW4gfHwgbWNwUm91dGVyT3Blbikge1xuICAgICAgICBvdmVyYWxsSGVhbHRoID0gXCJkZWdyYWRlZFwiOyAvLyBPbmUgcGF0aCBkb3duXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHN0YXR1cyA9IHtcbiAgICAgICAgZGlyZWN0QmVkcm9jazoge1xuICAgICAgICAgIGlzT3BlbjogZGlyZWN0QmVkcm9ja09wZW4sXG4gICAgICAgICAgc3RhdGU6IGRpcmVjdEJlZHJvY2tNZXRyaWNzLnN0YXRlLFxuICAgICAgICAgIG1ldHJpY3M6IGRpcmVjdEJlZHJvY2tNZXRyaWNzLFxuICAgICAgICB9LFxuICAgICAgICBtY3BSb3V0ZXI6IHtcbiAgICAgICAgICBpc09wZW46IG1jcFJvdXRlck9wZW4sXG4gICAgICAgICAgc3RhdGU6IG1jcFJvdXRlck1ldHJpY3Muc3RhdGUsXG4gICAgICAgICAgbWV0cmljczogbWNwUm91dGVyTWV0cmljcyxcbiAgICAgICAgfSxcbiAgICAgICAgb3ZlcmFsbEhlYWx0aCxcbiAgICAgIH07XG5cbiAgICAgIC8vIExvZyBzdGF0dXMgY2hlY2sgdG8gYXVkaXQgdHJhaWxcbiAgICAgIGF3YWl0IHRoaXMuYXVkaXRUcmFpbC5sb2dTdXBwb3J0TW9kZUV2ZW50KFxuICAgICAgICBcImNpcmN1aXRfYnJlYWtlcl9zdGF0dXNfY2hlY2tcIixcbiAgICAgICAge1xuICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgICBzdGF0dXMsXG4gICAgICAgICAgb3ZlcmFsbEhlYWx0aCxcbiAgICAgICAgfSxcbiAgICAgICAgXCJzeXN0ZW1cIlxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHN0YXR1cztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID1cbiAgICAgICAgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpO1xuXG4gICAgICB0aGlzLmxvZyhcbiAgICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgICAgYEZhaWxlZCB0byBjaGVjayBjaXJjdWl0IGJyZWFrZXIgc3RhdHVzOiAke2Vycm9yTWVzc2FnZX1gXG4gICAgICApO1xuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENpcmN1aXQgYnJlYWtlciBzdGF0dXMgY2hlY2sgZmFpbGVkOiAke2Vycm9yTWVzc2FnZX1gKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIENpcmN1aXQgQnJlYWtlciBGYWlsdXJlcyB3aXRoIEludGVsbGlnZW50IEZhbGxiYWNrXG4gICAqL1xuICBhc3luYyBoYW5kbGVDaXJjdWl0QnJlYWtlckZhaWx1cmUoXG4gICAgZmFpbGVkUGF0aDogXCJkaXJlY3RcIiB8IFwibWNwXCIsXG4gICAgb3BlcmF0aW9uOiBzdHJpbmcsXG4gICAgY29udGV4dDogYW55XG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmxvZyhcbiAgICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgICAgYEhhbmRsaW5nIGNpcmN1aXQgYnJlYWtlciBmYWlsdXJlIGZvciAke2ZhaWxlZFBhdGh9IHBhdGggZHVyaW5nICR7b3BlcmF0aW9ufWBcbiAgICAgICk7XG5cbiAgICAgIC8vIExvZyBmYWlsdXJlIGV2ZW50XG4gICAgICBhd2FpdCB0aGlzLmF1ZGl0VHJhaWwubG9nU3VwcG9ydE1vZGVFdmVudChcbiAgICAgICAgXCJjaXJjdWl0X2JyZWFrZXJfZmFpbHVyZVwiLFxuICAgICAgICB7XG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgIGZhaWxlZFBhdGgsXG4gICAgICAgICAgb3BlcmF0aW9uLFxuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgIH0sXG4gICAgICAgIFwic3lzdGVtXCJcbiAgICAgICk7XG5cbiAgICAgIC8vIEF0dGVtcHQgaW50ZWxsaWdlbnQgZmFsbGJhY2sgdGhyb3VnaCByb3V0ZXJcbiAgICAgIGlmICh0aGlzLmludGVsbGlnZW50Um91dGVyKSB7XG4gICAgICAgIGNvbnN0IGZhbGxiYWNrUm91dGUgPSBmYWlsZWRQYXRoID09PSBcImRpcmVjdFwiID8gXCJtY3BcIiA6IFwiZGlyZWN0XCI7XG5cbiAgICAgICAgdGhpcy5sb2coXG4gICAgICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgICAgICBgQXR0ZW1wdGluZyBmYWxsYmFjayB0byAke2ZhbGxiYWNrUm91dGV9IHBhdGhgXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgZmFsbGJhY2sgcGF0aCBpcyBhdmFpbGFibGVcbiAgICAgICAgY29uc3QgZmFsbGJhY2tQcm92aWRlciA9XG4gICAgICAgICAgZmFsbGJhY2tSb3V0ZSA9PT0gXCJkaXJlY3RcIiA/IFwiYmVkcm9ja1wiIDogXCJnb29nbGVcIjtcbiAgICAgICAgY29uc3QgZmFsbGJhY2tBdmFpbGFibGUgPSAhdGhpcy5jaXJjdWl0QnJlYWtlci5pc09wZW4oZmFsbGJhY2tQcm92aWRlcik7XG5cbiAgICAgICAgaWYgKGZhbGxiYWNrQXZhaWxhYmxlKSB7XG4gICAgICAgICAgdGhpcy5sb2coXG4gICAgICAgICAgICBcImJlZHJvY2stYWN0aXZhdGlvblwiLFxuICAgICAgICAgICAgYEZhbGxiYWNrIHRvICR7ZmFsbGJhY2tSb3V0ZX0gcGF0aCBpcyBhdmFpbGFibGVgXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmxvZyhcbiAgICAgICAgICAgIFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsXG4gICAgICAgICAgICBgRmFsbGJhY2sgdG8gJHtmYWxsYmFja1JvdXRlfSBwYXRoIGlzIGFsc28gdW5hdmFpbGFibGUgLSBib3RoIHBhdGhzIGRvd25gXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIC8vIEJvdGggcGF0aHMgZG93biAtIHRyaWdnZXIgZW1lcmdlbmN5IHByb2NlZHVyZXNcbiAgICAgICAgICBhd2FpdCB0aGlzLnRyaWdnZXJFbWVyZ2VuY3lQcm9jZWR1cmVzKG9wZXJhdGlvbiwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVXBkYXRlIGhlYWx0aCBtb25pdG9yaW5nXG4gICAgICBpZiAodGhpcy5oeWJyaWRIZWFsdGhNb25pdG9yKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuaHlicmlkSGVhbHRoTW9uaXRvci5yZWNvcmRGYWlsdXJlKGZhaWxlZFBhdGgsIG9wZXJhdGlvbik7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9XG4gICAgICAgIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKTtcblxuICAgICAgdGhpcy5sb2coXG4gICAgICAgIFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsXG4gICAgICAgIGBGYWlsZWQgdG8gaGFuZGxlIGNpcmN1aXQgYnJlYWtlciBmYWlsdXJlOiAke2Vycm9yTWVzc2FnZX1gXG4gICAgICApO1xuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBDaXJjdWl0IGJyZWFrZXIgZmFpbHVyZSBoYW5kbGluZyBmYWlsZWQ6ICR7ZXJyb3JNZXNzYWdlfWBcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRyaWdnZXIgRW1lcmdlbmN5IFByb2NlZHVyZXMgd2hlbiBCb3RoIFBhdGhzIGFyZSBEb3duXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIHRyaWdnZXJFbWVyZ2VuY3lQcm9jZWR1cmVzKFxuICAgIG9wZXJhdGlvbjogc3RyaW5nLFxuICAgIGNvbnRleHQ6IGFueVxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5sb2coXG4gICAgICAgIFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsXG4gICAgICAgIGBUcmlnZ2VyaW5nIGVtZXJnZW5jeSBwcm9jZWR1cmVzIGZvciBvcGVyYXRpb246ICR7b3BlcmF0aW9ufWBcbiAgICAgICk7XG5cbiAgICAgIC8vIExvZyBlbWVyZ2VuY3kgZXZlbnRcbiAgICAgIGF3YWl0IHRoaXMuYXVkaXRUcmFpbC5sb2dTdXBwb3J0TW9kZUV2ZW50KFxuICAgICAgICBcImVtZXJnZW5jeV9wcm9jZWR1cmVzX3RyaWdnZXJlZFwiLFxuICAgICAgICB7XG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgIG9wZXJhdGlvbixcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIHJlYXNvbjogXCJib3RoX3JvdXRpbmdfcGF0aHNfdW5hdmFpbGFibGVcIixcbiAgICAgICAgfSxcbiAgICAgICAgXCJzeXN0ZW1cIlxuICAgICAgKTtcblxuICAgICAgLy8gRGlzYWJsZSBzdXBwb3J0IG1vZGUgdGVtcG9yYXJpbHlcbiAgICAgIHRoaXMuaXNBY3RpdmF0ZWQgPSBmYWxzZTtcblxuICAgICAgLy8gU2VuZCBlbWVyZ2VuY3kgbm90aWZpY2F0aW9uc1xuICAgICAgYXdhaXQgdGhpcy5zZW5kRW1lcmdlbmN5Tm90aWZpY2F0aW9ucyhvcGVyYXRpb24sIGNvbnRleHQpO1xuXG4gICAgICAvLyBGb3JjZSByZXNldCBjaXJjdWl0IGJyZWFrZXJzIGFmdGVyIGVtZXJnZW5jeSB0aW1lb3V0XG4gICAgICBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmxvZyhcbiAgICAgICAgICAgIFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsXG4gICAgICAgICAgICBcIkF0dGVtcHRpbmcgZW1lcmdlbmN5IGNpcmN1aXQgYnJlYWtlciByZXNldFwiXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIHRoaXMuY2lyY3VpdEJyZWFrZXIucmVzZXRBbGwoKTtcblxuICAgICAgICAgIC8vIFJlLWVuYWJsZSBzdXBwb3J0IG1vZGUgaWYgZmVhdHVyZSBmbGFnIGlzIHN0aWxsIGFjdGl2ZVxuICAgICAgICAgIGNvbnN0IHN1cHBvcnRNb2RlRW5hYmxlZCA9XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmZlYXR1cmVGbGFncy5pc0JlZHJvY2tTdXBwb3J0TW9kZUVuYWJsZWQoKTtcbiAgICAgICAgICBpZiAoc3VwcG9ydE1vZGVFbmFibGVkKSB7XG4gICAgICAgICAgICB0aGlzLmlzQWN0aXZhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMubG9nKFxuICAgICAgICAgICAgICBcImJlZHJvY2stYWN0aXZhdGlvblwiLFxuICAgICAgICAgICAgICBcIlN1cHBvcnQgbW9kZSByZS1lbmFibGVkIGFmdGVyIGVtZXJnZW5jeSByZXNldFwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAocmVzZXRFcnJvcikge1xuICAgICAgICAgIHRoaXMubG9nKFxuICAgICAgICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgICAgICAgIGBFbWVyZ2VuY3kgcmVzZXQgZmFpbGVkOiAke3Jlc2V0RXJyb3J9YFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0sIDYwMDAwKTsgLy8gMSBtaW51dGUgZW1lcmdlbmN5IHRpbWVvdXRcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID1cbiAgICAgICAgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpO1xuXG4gICAgICB0aGlzLmxvZyhcbiAgICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgICAgYEZhaWxlZCB0byB0cmlnZ2VyIGVtZXJnZW5jeSBwcm9jZWR1cmVzOiAke2Vycm9yTWVzc2FnZX1gXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kIEVtZXJnZW5jeSBOb3RpZmljYXRpb25zXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIHNlbmRFbWVyZ2VuY3lOb3RpZmljYXRpb25zKFxuICAgIG9wZXJhdGlvbjogc3RyaW5nLFxuICAgIGNvbnRleHQ6IGFueVxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgLy8gU2VuZCBub3RpZmljYXRpb25zIHRocm91Z2ggY29uZmlndXJlZCBjaGFubmVsc1xuICAgICAgZm9yIChjb25zdCBjaGFubmVsIG9mIHRoaXMuY29uZmlnLm5vdGlmaWNhdGlvbkNoYW5uZWxzKSB7XG4gICAgICAgIGlmIChjaGFubmVsLmVuYWJsZWQpIHtcbiAgICAgICAgICBjb25zdCBtZXNzYWdlID0gYEVNRVJHRU5DWTogQmVkcm9jayBTdXBwb3J0IE1vZGUgLSBCb3RoIHJvdXRpbmcgcGF0aHMgdW5hdmFpbGFibGUgZHVyaW5nICR7b3BlcmF0aW9ufWA7XG5cbiAgICAgICAgICB0aGlzLmxvZyhcbiAgICAgICAgICAgIFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsXG4gICAgICAgICAgICBgU2VuZGluZyBlbWVyZ2VuY3kgbm90aWZpY2F0aW9uIHZpYSAke2NoYW5uZWwudHlwZX06ICR7bWVzc2FnZX1gXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIC8vIEluIHByb2R1Y3Rpb24sIHRoaXMgd291bGQgc2VuZCBhY3R1YWwgbm90aWZpY2F0aW9uc1xuICAgICAgICAgIC8vIEZvciBub3csIGp1c3QgbG9nIHRoZSBub3RpZmljYXRpb25cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZyhcbiAgICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgICAgYEZhaWxlZCB0byBzZW5kIGVtZXJnZW5jeSBub3RpZmljYXRpb25zOiAke2Vycm9yfWBcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLy8gQ29zdCAmIFBlcmZvcm1hbmNlIE1ldGhvZHMgKHVzaW5nIGV4aXN0aW5nIENvc3RQZXJmb3JtYW5jZU9wdGltaXplcilcbiAgYXN5bmMgbW9uaXRvckNvc3RUaHJlc2hvbGRzKCk6IFByb21pc2U8Q29zdEFuYWx5c2lzPiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEdldCBjb3N0IHN1bW1hcnkgZnJvbSBleGlzdGluZyBvcHRpbWl6ZXJcbiAgICAgIGNvbnN0IGNvc3RTdW1tYXJ5ID0gdGhpcy5jb3N0UGVyZm9ybWFuY2VPcHRpbWl6ZXIuZ2V0Q29zdFN1bW1hcnkoKTtcbiAgICAgIGNvbnN0IHBlcmZvcm1hbmNlTWV0cmljcyA9XG4gICAgICAgIHRoaXMuY29zdFBlcmZvcm1hbmNlT3B0aW1pemVyLmdldFBlcmZvcm1hbmNlTWV0cmljcygpO1xuXG4gICAgICAvLyBMb2cgY29zdCBtb25pdG9yaW5nIGV2ZW50XG4gICAgICBhd2FpdCB0aGlzLmF1ZGl0VHJhaWwubG9nRXZlbnQoe1xuICAgICAgICBldmVudFR5cGU6IFwiY29zdF9tb25pdG9yaW5nXCIsXG4gICAgICAgIHVzZXJJZDogXCJzeXN0ZW1cIixcbiAgICAgICAgYWN0aW9uOiBcIm1vbml0b3JfY29zdF90aHJlc2hvbGRzXCIsXG4gICAgICAgIHJlc291cmNlVHlwZTogXCJjb3N0X3BlcmZvcm1hbmNlXCIsXG4gICAgICAgIHJlc291cmNlSWQ6IFwiYmVkcm9jay1zdXBwb3J0LW1vZGVcIixcbiAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICBkYWlseVNwZW50OiBjb3N0U3VtbWFyeS5kYWlseS5zcGVudCxcbiAgICAgICAgICBtb250aGx5U3BlbnQ6IGNvc3RTdW1tYXJ5Lm1vbnRobHkuc3BlbnQsXG4gICAgICAgICAgZGFpbHlSZW1haW5pbmc6IGNvc3RTdW1tYXJ5LmRhaWx5LnJlbWFpbmluZyxcbiAgICAgICAgICBtb250aGx5UmVtYWluaW5nOiBjb3N0U3VtbWFyeS5tb250aGx5LnJlbWFpbmluZyxcbiAgICAgICAgICBjYWNoZUhpdFJhdGU6IHBlcmZvcm1hbmNlTWV0cmljcy5jYWNoZUhpdFJhdGUsXG4gICAgICAgIH0sXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgaXBBZGRyZXNzOiBcImludGVybmFsXCIsXG4gICAgICAgIHVzZXJBZ2VudDogXCJiZWRyb2NrLXN1cHBvcnQtbWFuYWdlclwiLFxuICAgICAgfSk7XG5cbiAgICAgIC8vIENoZWNrIGZvciBlbWVyZ2VuY3kgc2h1dGRvd24gY29uZGl0aW9uc1xuICAgICAgY29uc3QgY29zdFByZXNzdXJlID1cbiAgICAgICAgY29zdFN1bW1hcnkubW9udGhseS5zcGVudCAvIGNvc3RTdW1tYXJ5Lm1vbnRobHkubGltaXQ7XG4gICAgICBpZiAoY29zdFByZXNzdXJlID4gMC45NSkge1xuICAgICAgICBhd2FpdCB0aGlzLmVtZXJnZW5jeVNodXRkb3duTWFuYWdlci50cmlnZ2VyU2h1dGRvd24oXG4gICAgICAgICAgXCJhbGxcIixcbiAgICAgICAgICBcImNvc3Rfb3ZlcnJ1blwiLFxuICAgICAgICAgIFwibWFudWFsXCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29zdEV1cm86IGNvc3RTdW1tYXJ5Lm1vbnRobHkuc3BlbnQsXG4gICAgICAgICAgICBhZGRpdGlvbmFsSW5mbzoge1xuICAgICAgICAgICAgICBkYWlseVNwZW50OiBjb3N0U3VtbWFyeS5kYWlseS5zcGVudCxcbiAgICAgICAgICAgICAgbW9udGhseUxpbWl0OiBjb3N0U3VtbWFyeS5tb250aGx5LmxpbWl0LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJldHVybiBjb3N0IGFuYWx5c2lzIGluIGV4cGVjdGVkIGZvcm1hdFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY3VycmVudFNwZW5kOiBjb3N0U3VtbWFyeS5tb250aGx5LnNwZW50LFxuICAgICAgICBwcm9qZWN0ZWRTcGVuZDogY29zdFN1bW1hcnkubW9udGhseS5zcGVudCAqICgzMCAvIG5ldyBEYXRlKCkuZ2V0RGF0ZSgpKSwgLy8gU2ltcGxlIHByb2plY3Rpb25cbiAgICAgICAgYnVkZ2V0VXRpbGl6YXRpb246IGNvc3RQcmVzc3VyZSxcbiAgICAgICAgY29zdEJyZWFrZG93bjoge1xuICAgICAgICAgIGRhaWx5OiBjb3N0U3VtbWFyeS5kYWlseS5zcGVudCxcbiAgICAgICAgICBtb250aGx5OiBjb3N0U3VtbWFyeS5tb250aGx5LnNwZW50LFxuICAgICAgICAgIGNhY2hlSGl0UmF0ZTogcGVyZm9ybWFuY2VNZXRyaWNzLmNhY2hlSGl0UmF0ZSxcbiAgICAgICAgfSxcbiAgICAgICAgcmVjb21tZW5kYXRpb25zOiB0aGlzLmdlbmVyYXRlQ29zdFJlY29tbWVuZGF0aW9ucyhcbiAgICAgICAgICBjb3N0U3VtbWFyeSxcbiAgICAgICAgICBwZXJmb3JtYW5jZU1ldHJpY3NcbiAgICAgICAgKSxcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMubG9nKFxuICAgICAgICBcImJlZHJvY2stYWN0aXZhdGlvblwiLFxuICAgICAgICBgRXJyb3IgbW9uaXRvcmluZyBjb3N0IHRocmVzaG9sZHM6ICR7ZXJyb3J9YFxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY3VycmVudFNwZW5kOiAwLFxuICAgICAgICBwcm9qZWN0ZWRTcGVuZDogMCxcbiAgICAgICAgYnVkZ2V0VXRpbGl6YXRpb246IDAsXG4gICAgICAgIGNvc3RCcmVha2Rvd246IHt9LFxuICAgICAgICByZWNvbW1lbmRhdGlvbnM6IFtcbiAgICAgICAgICBcIkVycm9yIHJldHJpZXZpbmcgY29zdCBkYXRhIC0gcGxlYXNlIGNoZWNrIGNvc3QgbW9uaXRvcmluZyBzeXN0ZW1cIixcbiAgICAgICAgXSxcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGNvc3Qgb3B0aW1pemF0aW9uIHJlY29tbWVuZGF0aW9uc1xuICAgKi9cbiAgcHJpdmF0ZSBnZW5lcmF0ZUNvc3RSZWNvbW1lbmRhdGlvbnMoXG4gICAgY29zdFN1bW1hcnk6IGFueSxcbiAgICBwZXJmb3JtYW5jZU1ldHJpY3M6IGFueVxuICApOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgcmVjb21tZW5kYXRpb25zOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgLy8gQ2hlY2sgY2FjaGUgaGl0IHJhdGVcbiAgICBpZiAocGVyZm9ybWFuY2VNZXRyaWNzLmNhY2hlSGl0UmF0ZSA8IDAuNSkge1xuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goXG4gICAgICAgIFwiSW1wcm92ZSBjYWNoZSBoaXQgcmF0ZSB0byByZWR1Y2UgQUkgcHJvdmlkZXIgY29zdHNcIlxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBkYWlseSBidWRnZXQgdXRpbGl6YXRpb25cbiAgICBjb25zdCBkYWlseVV0aWxpemF0aW9uID0gY29zdFN1bW1hcnkuZGFpbHkuc3BlbnQgLyBjb3N0U3VtbWFyeS5kYWlseS5saW1pdDtcbiAgICBpZiAoZGFpbHlVdGlsaXphdGlvbiA+IDAuOCkge1xuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goXG4gICAgICAgIFwiRGFpbHkgYnVkZ2V0IHV0aWxpemF0aW9uIGhpZ2ggLSBjb25zaWRlciBpbXBsZW1lbnRpbmcgY29zdCBvcHRpbWl6YXRpb24gc3RyYXRlZ2llc1wiXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIENoZWNrIG1vbnRobHkgYnVkZ2V0IHV0aWxpemF0aW9uXG4gICAgY29uc3QgbW9udGhseVV0aWxpemF0aW9uID1cbiAgICAgIGNvc3RTdW1tYXJ5Lm1vbnRobHkuc3BlbnQgLyBjb3N0U3VtbWFyeS5tb250aGx5LmxpbWl0O1xuICAgIGlmIChtb250aGx5VXRpbGl6YXRpb24gPiAwLjc1KSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaChcbiAgICAgICAgXCJNb250aGx5IGJ1ZGdldCBvbiB0cmFjayB0byBleGNlZWQgLSByZXZpZXcgb3BlcmF0aW9uIHByaW9yaXRpZXNcIlxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVjb21tZW5kYXRpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBkZXRhaWxlZCBjb3N0IGFuZCBwZXJmb3JtYW5jZSBzdGF0dXNcbiAgICovXG4gIGFzeW5jIGdldENvc3RQZXJmb3JtYW5jZVN0YXR1cygpIHtcbiAgICBjb25zdCBjb3N0U3VtbWFyeSA9IHRoaXMuY29zdFBlcmZvcm1hbmNlT3B0aW1pemVyLmdldENvc3RTdW1tYXJ5KCk7XG4gICAgY29uc3QgcGVyZm9ybWFuY2VNZXRyaWNzID1cbiAgICAgIHRoaXMuY29zdFBlcmZvcm1hbmNlT3B0aW1pemVyLmdldFBlcmZvcm1hbmNlTWV0cmljcygpO1xuICAgIGNvbnN0IHNodXRkb3duU3RhdHVzID0gdGhpcy5lbWVyZ2VuY3lTaHV0ZG93bk1hbmFnZXIuZ2V0U3RhdHVzKCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgY29zdDogY29zdFN1bW1hcnksXG4gICAgICBwZXJmb3JtYW5jZTogcGVyZm9ybWFuY2VNZXRyaWNzLFxuICAgICAgZW1lcmdlbmN5U2h1dGRvd246IHNodXRkb3duU3RhdHVzLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVHJhY2sgY29zdCBmb3IgYSBzdXBwb3J0IG9wZXJhdGlvbiAoc3R1YiBmb3IgY29tcGF0aWJpbGl0eSlcbiAgICovXG4gIGFzeW5jIHRyYWNrU3VwcG9ydE9wZXJhdGlvbkNvc3QoXG4gICAgb3BlcmF0aW9uSWQ6IHN0cmluZyxcbiAgICByb3V0ZTogXCJkaXJlY3RcIiB8IFwibWNwXCIgfCBcImZhbGxiYWNrXCIgfCBcImh5YnJpZFwiLFxuICAgIG9wZXJhdGlvblR5cGU6XG4gICAgICB8IFwiZW1lcmdlbmN5XCJcbiAgICAgIHwgXCJpbmZyYXN0cnVjdHVyZVwiXG4gICAgICB8IFwibWV0YV9tb25pdG9yXCJcbiAgICAgIHwgXCJpbXBsZW1lbnRhdGlvblwiXG4gICAgICB8IFwic3RhbmRhcmRcIixcbiAgICBjb3N0OiBudW1iZXIsXG4gICAgdG9rZW5zVXNlZD86IHsgaW5wdXQ6IG51bWJlcjsgb3V0cHV0OiBudW1iZXIgfVxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCB0aGlzLmNvc3RCdWRnZXRNb25pdG9yLnRyYWNrT3BlcmF0aW9uQ29zdCh7XG4gICAgICBvcGVyYXRpb25JZCxcbiAgICAgIHJvdXRlLFxuICAgICAgb3BlcmF0aW9uVHlwZSxcbiAgICAgIGNvc3QsXG4gICAgICB0b2tlbnNVc2VkLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgc3VwcG9ydE1vZGU6IHRydWUsXG4gICAgICAgIGJlZHJvY2tBY3RpdmF0aW9uOiB0aGlzLmlzQWN0aXZhdGVkLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIG9wdGltaXplUGVyZm9ybWFuY2UoKTogUHJvbWlzZTxQZXJmb3JtYW5jZU9wdGltaXphdGlvbj4ge1xuICAgIHJldHVybiB7XG4gICAgICBjdXJyZW50TWV0cmljczoge1xuICAgICAgICByZXNwb25zZVRpbWU6IDAsXG4gICAgICAgIG1lbW9yeVVzYWdlOiAwLFxuICAgICAgICBjcHVVc2FnZTogMCxcbiAgICAgICAgbmV0d29ya0xhdGVuY3k6IDAsXG4gICAgICB9LFxuICAgICAgb3B0aW1pemF0aW9uT3Bwb3J0dW5pdGllczogW10sXG4gICAgICBleHBlY3RlZEltcHJvdmVtZW50czoge30sXG4gICAgfTtcbiAgfVxuXG4gIGFzeW5jIGVuYWJsZUVtZXJnZW5jeU1vZGUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy5sb2coXCJiZWRyb2NrLWFjdGl2YXRpb25cIiwgXCJFbWVyZ2VuY3kgbW9kZSBlbmFibGVkXCIpO1xuICB9XG5cbiAgLy8gVGVtcGxhdGUgJiBQcm9tcHQgTWV0aG9kcyAoU3R1YnMgZm9yIG5vdylcbiAgYXN5bmMgdmFsaWRhdGVQcm9tcHRUZW1wbGF0ZXMoKTogUHJvbWlzZTxUZW1wbGF0ZVZhbGlkYXRpb25SZXN1bHQ+IHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNWYWxpZDogdHJ1ZSxcbiAgICAgIGVycm9yczogW10sXG4gICAgICB3YXJuaW5nczogW10sXG4gICAgICB0ZW1wbGF0ZUNvdW50OiAwLFxuICAgIH07XG4gIH1cblxuICBhc3luYyBlbmFibGVQSUlSZWRhY3Rpb24oKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy5sb2coXCJiZWRyb2NrLWFjdGl2YXRpb25cIiwgXCJQSUkgcmVkYWN0aW9uIGVuYWJsZWRcIik7XG4gIH1cblxuICAvKipcbiAgICogUnVuIGNvbXByZWhlbnNpdmUgcmVkIHRlYW0gc2VjdXJpdHkgZXZhbHVhdGlvbnMgZm9yIGRpcmVjdCBCZWRyb2NrXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4ZWN1dGVzIGF1dG9tYXRlZCBzZWN1cml0eSB0ZXN0aW5nIGluY2x1ZGluZzpcbiAgICogLSBQcm9tcHQgaW5qZWN0aW9uIGRldGVjdGlvblxuICAgKiAtIEphaWxicmVhayBhdHRlbXB0IGRldGVjdGlvblxuICAgKiAtIERhdGEgZXhmaWx0cmF0aW9uIHByZXZlbnRpb25cbiAgICogLSBQcml2aWxlZ2UgZXNjYWxhdGlvbiBwcmV2ZW50aW9uXG4gICAqIC0gRGVuaWFsIG9mIHNlcnZpY2UgcHJvdGVjdGlvblxuICAgKi9cbiAgYXN5bmMgcnVuUmVkVGVhbUV2YWx1YXRpb25zKCk6IFByb21pc2U8U2VjdXJpdHlUZXN0UmVzdWx0PiB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMubG9nKFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsIFwiU3RhcnRpbmcgcmVkIHRlYW0gc2VjdXJpdHkgZXZhbHVhdGlvblwiKTtcblxuICAgICAgLy8gQ2hlY2sgaWYgcmVkIHRlYW0gZXZhbHVhdGlvbnMgYXJlIGVuYWJsZWRcbiAgICAgIGlmICghdGhpcy5mZWF0dXJlRmxhZ3MuaXNFbmFibGVkKFwicmVkX3RlYW1fZXZhbHVhdGlvbl9lbmFibGVkXCIsIHRydWUpKSB7XG4gICAgICAgIHRoaXMubG9nKFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsIFwiUmVkIHRlYW0gZXZhbHVhdGlvbnMgYXJlIGRpc2FibGVkXCIpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBhc3NlZDogdHJ1ZSxcbiAgICAgICAgICB0ZXN0UmVzdWx0czogW10sXG4gICAgICAgICAgb3ZlcmFsbFNjb3JlOiAxMDAsXG4gICAgICAgICAgcmVjb21tZW5kYXRpb25zOiBbXG4gICAgICAgICAgICBcIlJlZCB0ZWFtIGV2YWx1YXRpb25zIGFyZSBkaXNhYmxlZCAtIGVuYWJsZSBmb3Igc2VjdXJpdHkgdGVzdGluZ1wiLFxuICAgICAgICAgIF0sXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIC8vIEluaXRpYWxpemUgcmVkIHRlYW0gZXZhbHVhdG9yIHdpdGggZGlyZWN0IEJlZHJvY2sgY2xpZW50XG4gICAgICBjb25zdCBldmFsdWF0b3IgPSBuZXcgUmVkVGVhbUV2YWx1YXRvcih0aGlzLmRpcmVjdEJlZHJvY2tDbGllbnQsIHtcbiAgICAgICAgZW5hYmxlUHJvbXB0SW5qZWN0aW9uVGVzdHM6IHRydWUsXG4gICAgICAgIGVuYWJsZUphaWxicmVha1Rlc3RzOiB0cnVlLFxuICAgICAgICBlbmFibGVEYXRhRXhmaWx0cmF0aW9uVGVzdHM6IHRydWUsXG4gICAgICAgIGVuYWJsZVByaXZpbGVnZUVzY2FsYXRpb25UZXN0czogdHJ1ZSxcbiAgICAgICAgZW5hYmxlRGVuaWFsT2ZTZXJ2aWNlVGVzdHM6IHRydWUsXG4gICAgICAgIHRlc3REZXB0aDogXCJzdGFuZGFyZFwiLFxuICAgICAgICBtYXhUZXN0c1BlckNhdGVnb3J5OiA1LFxuICAgICAgICB0aW1lb3V0TXM6IDMwMDAwLFxuICAgICAgfSk7XG5cbiAgICAgIC8vIFJ1biBjb21wcmVoZW5zaXZlIGV2YWx1YXRpb25cbiAgICAgIGNvbnN0IHJlcG9ydDogUmVkVGVhbUV2YWx1YXRpb25SZXBvcnQgPSBhd2FpdCBldmFsdWF0b3IucnVuRXZhbHVhdGlvbigpO1xuXG4gICAgICAvLyBMb2cgZXZhbHVhdGlvbiByZXN1bHRzXG4gICAgICBhd2FpdCB0aGlzLmF1ZGl0VHJhaWwubG9nRXZlbnQoe1xuICAgICAgICBldmVudFR5cGU6IFwicmVkX3RlYW1fZXZhbHVhdGlvblwiLFxuICAgICAgICByZXF1ZXN0SWQ6IHJlcG9ydC5ldmFsdWF0aW9uSWQsXG4gICAgICAgIHByb3ZpZGVyOiBcImJlZHJvY2tcIixcbiAgICAgICAgY29tcGxpYW5jZVN0YXR1czpcbiAgICAgICAgICByZXBvcnQudnVsbmVyYWJpbGl0aWVzRGV0ZWN0ZWQgPiAwID8gXCJ2aW9sYXRpb25cIiA6IFwiY29tcGxpYW50XCIsXG4gICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgdG90YWxUZXN0czogcmVwb3J0LnRvdGFsVGVzdHMsXG4gICAgICAgICAgdGVzdHNQYXNzZWQ6IHJlcG9ydC50ZXN0c1Bhc3NlZCxcbiAgICAgICAgICB0ZXN0c0ZhaWxlZDogcmVwb3J0LnRlc3RzRmFpbGVkLFxuICAgICAgICAgIHZ1bG5lcmFiaWxpdGllc0RldGVjdGVkOiByZXBvcnQudnVsbmVyYWJpbGl0aWVzRGV0ZWN0ZWQsXG4gICAgICAgICAgc2VjdXJpdHlTY29yZTogcmVwb3J0Lm92ZXJhbGxTZWN1cml0eVNjb3JlLFxuICAgICAgICAgIGNyaXRpY2FsVnVsbmVyYWJpbGl0aWVzOiByZXBvcnQuY3JpdGljYWxWdWxuZXJhYmlsaXRpZXMubGVuZ3RoLFxuICAgICAgICAgIGhpZ2hWdWxuZXJhYmlsaXRpZXM6IHJlcG9ydC5oaWdoVnVsbmVyYWJpbGl0aWVzLmxlbmd0aCxcbiAgICAgICAgICBleGVjdXRpb25UaW1lTXM6IHJlcG9ydC5leGVjdXRpb25UaW1lTXMsXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgLy8gQ29udmVydCByZWQgdGVhbSByZXBvcnQgdG8gU2VjdXJpdHlUZXN0UmVzdWx0IGZvcm1hdFxuICAgICAgY29uc3QgdGVzdFJlc3VsdHM6IFNlY3VyaXR5VGVzdFtdID0gW1xuICAgICAgICAuLi5yZXBvcnQuY3JpdGljYWxWdWxuZXJhYmlsaXRpZXMubWFwKCh2KSA9PiAoe1xuICAgICAgICAgIHRlc3ROYW1lOiB2LnRlc3ROYW1lLFxuICAgICAgICAgIHBhc3NlZDogdi5wYXNzZWQsXG4gICAgICAgICAgZGV0YWlsczogdi5kZXNjcmlwdGlvbixcbiAgICAgICAgICBzZXZlcml0eTogdi5zZXZlcml0eSxcbiAgICAgICAgfSkpLFxuICAgICAgICAuLi5yZXBvcnQuaGlnaFZ1bG5lcmFiaWxpdGllcy5tYXAoKHYpID0+ICh7XG4gICAgICAgICAgdGVzdE5hbWU6IHYudGVzdE5hbWUsXG4gICAgICAgICAgcGFzc2VkOiB2LnBhc3NlZCxcbiAgICAgICAgICBkZXRhaWxzOiB2LmRlc2NyaXB0aW9uLFxuICAgICAgICAgIHNldmVyaXR5OiB2LnNldmVyaXR5LFxuICAgICAgICB9KSksXG4gICAgICAgIC4uLnJlcG9ydC5tZWRpdW1WdWxuZXJhYmlsaXRpZXMubWFwKCh2KSA9PiAoe1xuICAgICAgICAgIHRlc3ROYW1lOiB2LnRlc3ROYW1lLFxuICAgICAgICAgIHBhc3NlZDogdi5wYXNzZWQsXG4gICAgICAgICAgZGV0YWlsczogdi5kZXNjcmlwdGlvbixcbiAgICAgICAgICBzZXZlcml0eTogdi5zZXZlcml0eSxcbiAgICAgICAgfSkpLFxuICAgICAgICAuLi5yZXBvcnQubG93VnVsbmVyYWJpbGl0aWVzLm1hcCgodikgPT4gKHtcbiAgICAgICAgICB0ZXN0TmFtZTogdi50ZXN0TmFtZSxcbiAgICAgICAgICBwYXNzZWQ6IHYucGFzc2VkLFxuICAgICAgICAgIGRldGFpbHM6IHYuZGVzY3JpcHRpb24sXG4gICAgICAgICAgc2V2ZXJpdHk6IHYuc2V2ZXJpdHksXG4gICAgICAgIH0pKSxcbiAgICAgIF07XG5cbiAgICAgIGNvbnN0IHBhc3NlZCA9IHJlcG9ydC52dWxuZXJhYmlsaXRpZXNEZXRlY3RlZCA9PT0gMDtcblxuICAgICAgdGhpcy5sb2coXG4gICAgICAgIFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsXG4gICAgICAgIGBSZWQgdGVhbSBldmFsdWF0aW9uIGNvbXBsZXRlZDogJHtwYXNzZWQgPyBcIlBBU1NFRFwiIDogXCJGQUlMRURcIn0gYCArXG4gICAgICAgICAgYChTY29yZTogJHtyZXBvcnQub3ZlcmFsbFNlY3VyaXR5U2NvcmV9LzEwMCwgYCArXG4gICAgICAgICAgYFZ1bG5lcmFiaWxpdGllczogJHtyZXBvcnQudnVsbmVyYWJpbGl0aWVzRGV0ZWN0ZWR9KWBcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhc3NlZCxcbiAgICAgICAgdGVzdFJlc3VsdHMsXG4gICAgICAgIG92ZXJhbGxTY29yZTogcmVwb3J0Lm92ZXJhbGxTZWN1cml0eVNjb3JlLFxuICAgICAgICByZWNvbW1lbmRhdGlvbnM6IHJlcG9ydC5yZWNvbW1lbmRhdGlvbnMsXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPVxuICAgICAgICBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFwiVW5rbm93biBlcnJvclwiO1xuXG4gICAgICB0aGlzLmxvZyhcbiAgICAgICAgXCJiZWRyb2NrLWFjdGl2YXRpb25cIixcbiAgICAgICAgYFJlZCB0ZWFtIGV2YWx1YXRpb24gZmFpbGVkOiAke2Vycm9yTWVzc2FnZX1gXG4gICAgICApO1xuXG4gICAgICAvLyBMb2cgZXJyb3IgdG8gYXVkaXQgdHJhaWxcbiAgICAgIGF3YWl0IHRoaXMuYXVkaXRUcmFpbC5sb2dFdmVudCh7XG4gICAgICAgIGV2ZW50VHlwZTogXCJyZWRfdGVhbV9ldmFsdWF0aW9uXCIsXG4gICAgICAgIHJlcXVlc3RJZDogYHJlZC10ZWFtLWV2YWwtZXJyb3ItJHtEYXRlLm5vdygpfWAsXG4gICAgICAgIHByb3ZpZGVyOiBcImJlZHJvY2tcIixcbiAgICAgICAgY29tcGxpYW5jZVN0YXR1czogXCJ2aW9sYXRpb25cIixcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICB0eXBlOiBcImV2YWx1YXRpb25fZXJyb3JcIixcbiAgICAgICAgICBtZXNzYWdlOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFzc2VkOiBmYWxzZSxcbiAgICAgICAgdGVzdFJlc3VsdHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXN0TmFtZTogXCJSZWQgVGVhbSBFdmFsdWF0aW9uXCIsXG4gICAgICAgICAgICBwYXNzZWQ6IGZhbHNlLFxuICAgICAgICAgICAgZGV0YWlsczogYEV2YWx1YXRpb24gZmFpbGVkOiAke2Vycm9yTWVzc2FnZX1gLFxuICAgICAgICAgICAgc2V2ZXJpdHk6IFwiY3JpdGljYWxcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBvdmVyYWxsU2NvcmU6IDAsXG4gICAgICAgIHJlY29tbWVuZGF0aW9uczogW1xuICAgICAgICAgIFwiRml4IHJlZCB0ZWFtIGV2YWx1YXRpb24gc3lzdGVtIGVycm9yc1wiLFxuICAgICAgICAgIFwiUmV2aWV3IGRpcmVjdCBCZWRyb2NrIGNsaWVudCBjb25maWd1cmF0aW9uXCIsXG4gICAgICAgICAgXCJDaGVjayBzZWN1cml0eSB0ZXN0aW5nIGluZnJhc3RydWN0dXJlXCIsXG4gICAgICAgIF0sXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgZGVmYXVsdCBjb25maWd1cmF0aW9uXG4gICAqL1xuICBwcml2YXRlIGdldERlZmF1bHRDb25maWcoXG4gICAgb3ZlcnJpZGVzPzogUGFydGlhbDxCZWRyb2NrU3VwcG9ydENvbmZpZz5cbiAgKTogQmVkcm9ja1N1cHBvcnRDb25maWcge1xuICAgIHJldHVybiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIGVudmlyb25tZW50czogW1wiZGV2ZWxvcG1lbnRcIiwgXCJzdGFnaW5nXCIsIFwicHJvZHVjdGlvblwiXSxcbiAgICAgIGF1ZGl0SW50ZXJ2YWw6IDE4MDAwMDAsIC8vIDMwIG1pbnV0ZXNcbiAgICAgIG1vbml0b3JpbmdMZXZlbDogXCJiYXNpY1wiLFxuICAgICAgYXV0b1Jlc29sdXRpb25FbmFibGVkOiBmYWxzZSxcbiAgICAgIG5vdGlmaWNhdGlvbkNoYW5uZWxzOiBbXSxcbiAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBzeXN0ZW0gcmVzb3VyY2UgbW9uaXRvcmluZyBzdGF0dXNcbiAgICogRW5zdXJlcyBzdXBwb3J0IG1vZGUgb3ZlcmhlYWQgc3RheXMgdW5kZXIgNSUgb2Ygc3lzdGVtIHJlc291cmNlc1xuICAgKi9cbiAgcHVibGljIGdldFJlc291cmNlTW9uaXRvcmluZ1N0YXR1cygpOiB7XG4gICAgaXNNb25pdG9yaW5nOiBib29sZWFuO1xuICAgIGlzV2l0aGluVGhyZXNob2xkczogYm9vbGVhbjtcbiAgICBjdXJyZW50TWV0cmljczogYW55O1xuICAgIHN1bW1hcnk6IGFueTtcbiAgICBhbGVydHM6IGFueVtdO1xuICB9IHtcbiAgICBjb25zdCBzdGF0dXMgPSB0aGlzLnN5c3RlbVJlc291cmNlTW9uaXRvci5nZXRTdGF0dXMoKTtcbiAgICBjb25zdCBzdW1tYXJ5ID0gdGhpcy5zeXN0ZW1SZXNvdXJjZU1vbml0b3IuZ2V0UmVzb3VyY2VTdW1tYXJ5KCk7XG4gICAgY29uc3QgYWxlcnRzID0gdGhpcy5zeXN0ZW1SZXNvdXJjZU1vbml0b3IuZ2V0QWN0aXZlQWxlcnRzKCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgaXNNb25pdG9yaW5nOiBzdGF0dXMuaXNNb25pdG9yaW5nLFxuICAgICAgaXNXaXRoaW5UaHJlc2hvbGRzOiBzdW1tYXJ5LmlzV2l0aGluVGhyZXNob2xkcyxcbiAgICAgIGN1cnJlbnRNZXRyaWNzOiBzdW1tYXJ5LmN1cnJlbnQsXG4gICAgICBzdW1tYXJ5LFxuICAgICAgYWxlcnRzLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgc3VwcG9ydCBtb2RlIGlzIHdpdGhpbiB0aGUgNSUgc3lzdGVtIHJlc291cmNlIG92ZXJoZWFkIHJlcXVpcmVtZW50XG4gICAqL1xuICBwdWJsaWMgYXN5bmMgdmFsaWRhdGVSZXNvdXJjZU92ZXJoZWFkKCk6IFByb21pc2U8e1xuICAgIGlzQ29tcGxpYW50OiBib29sZWFuO1xuICAgIGNwdVVzYWdlOiBudW1iZXI7XG4gICAgbWVtb3J5VXNhZ2U6IG51bWJlcjtcbiAgICB0aHJlc2hvbGRzOiBhbnk7XG4gICAgcmVjb21tZW5kYXRpb25zOiBzdHJpbmdbXTtcbiAgfT4ge1xuICAgIGNvbnN0IGN1cnJlbnRNZXRyaWNzID0gYXdhaXQgdGhpcy5zeXN0ZW1SZXNvdXJjZU1vbml0b3IuZ2V0Q3VycmVudE1ldHJpY3MoKTtcbiAgICBjb25zdCBzdW1tYXJ5ID0gdGhpcy5zeXN0ZW1SZXNvdXJjZU1vbml0b3IuZ2V0UmVzb3VyY2VTdW1tYXJ5KCk7XG4gICAgY29uc3Qgc3RhdHVzID0gdGhpcy5zeXN0ZW1SZXNvdXJjZU1vbml0b3IuZ2V0U3RhdHVzKCk7XG5cbiAgICBjb25zdCByZWNvbW1lbmRhdGlvbnM6IHN0cmluZ1tdID0gW107XG5cbiAgICAvLyBDaGVjayBDUFUgdXNhZ2UgYWdhaW5zdCAxJSB0aHJlc2hvbGQgKHdlbGwgdW5kZXIgNSUpXG4gICAgaWYgKGN1cnJlbnRNZXRyaWNzLmNwdVVzYWdlUGVyY2VudCA+IDAuOCkge1xuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goXG4gICAgICAgIGBDUFUgdXNhZ2UgKCR7Y3VycmVudE1ldHJpY3MuY3B1VXNhZ2VQZXJjZW50LnRvRml4ZWQoXG4gICAgICAgICAgMlxuICAgICAgICApfSUpIGFwcHJvYWNoaW5nIHRocmVzaG9sZC4gQ29uc2lkZXIgb3B0aW1pemluZyBzdXBwb3J0IG9wZXJhdGlvbnMuYFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBtZW1vcnkgdXNhZ2UgYWdhaW5zdCA1ME1CIHRocmVzaG9sZFxuICAgIGlmIChjdXJyZW50TWV0cmljcy5tZW1vcnlVc2FnZU1CID4gNDApIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKFxuICAgICAgICBgTWVtb3J5IHVzYWdlICgke2N1cnJlbnRNZXRyaWNzLm1lbW9yeVVzYWdlTUIudG9GaXhlZChcbiAgICAgICAgICAyXG4gICAgICAgICl9TUIpIGFwcHJvYWNoaW5nIHRocmVzaG9sZC4gQ29uc2lkZXIgbWVtb3J5IG9wdGltaXphdGlvbi5gXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIG1vbml0b3JpbmcgaXMgYWN0aXZlXG4gICAgaWYgKCFzdGF0dXMuaXNNb25pdG9yaW5nKSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaChcbiAgICAgICAgXCJSZXNvdXJjZSBtb25pdG9yaW5nIGlzIG5vdCBhY3RpdmUuIEVuYWJsZSBtb25pdG9yaW5nIHRvIHRyYWNrIG92ZXJoZWFkLlwiXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IGlzQ29tcGxpYW50ID1cbiAgICAgIGN1cnJlbnRNZXRyaWNzLmNwdVVzYWdlUGVyY2VudCA8PSAxLjAgJiYgLy8gMSUgQ1BVICh3ZWxsIHVuZGVyIDUlKVxuICAgICAgY3VycmVudE1ldHJpY3MubWVtb3J5VXNhZ2VNQiA8PSA1MCAmJiAvLyA1ME1CIG1lbW9yeSAocmVhc29uYWJsZSBmb3IgNSUgb3ZlcmhlYWQpXG4gICAgICBzdGF0dXMuaXNNb25pdG9yaW5nO1xuXG4gICAgYXdhaXQgdGhpcy5hdWRpdFRyYWlsLmxvZ0V2ZW50KHtcbiAgICAgIGV2ZW50VHlwZTogXCJyZXNvdXJjZV9vdmVyaGVhZF92YWxpZGF0aW9uXCIsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICBkZXRhaWxzOiB7XG4gICAgICAgIGNvbXBvbmVudDogXCJCZWRyb2NrU3VwcG9ydE1hbmFnZXJcIixcbiAgICAgICAgaXNDb21wbGlhbnQsXG4gICAgICAgIGNwdVVzYWdlOiBjdXJyZW50TWV0cmljcy5jcHVVc2FnZVBlcmNlbnQsXG4gICAgICAgIG1lbW9yeVVzYWdlOiBjdXJyZW50TWV0cmljcy5tZW1vcnlVc2FnZU1CLFxuICAgICAgICB0aHJlc2hvbGRzOiBzdGF0dXMuY29uZmlnLnRocmVzaG9sZHMsXG4gICAgICAgIHJlY29tbWVuZGF0aW9ucyxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgaXNDb21wbGlhbnQsXG4gICAgICBjcHVVc2FnZTogY3VycmVudE1ldHJpY3MuY3B1VXNhZ2VQZXJjZW50LFxuICAgICAgbWVtb3J5VXNhZ2U6IGN1cnJlbnRNZXRyaWNzLm1lbW9yeVVzYWdlTUIsXG4gICAgICB0aHJlc2hvbGRzOiBzdGF0dXMuY29uZmlnLnRocmVzaG9sZHMsXG4gICAgICByZWNvbW1lbmRhdGlvbnMsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgcGVyZm9ybWFuY2UgbWV0cmljcyB3aXRoIHJlc291cmNlIG92ZXJoZWFkIGluZm9ybWF0aW9uXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgZ2V0UGVyZm9ybWFuY2VNZXRyaWNzV2l0aE92ZXJoZWFkKCk6IFByb21pc2U8XG4gICAgUGVyZm9ybWFuY2VNZXRyaWNzICYge1xuICAgICAgcmVzb3VyY2VPdmVyaGVhZDoge1xuICAgICAgICBjcHVVc2FnZVBlcmNlbnQ6IG51bWJlcjtcbiAgICAgICAgbWVtb3J5VXNhZ2VNQjogbnVtYmVyO1xuICAgICAgICBpc1dpdGhpblRocmVzaG9sZHM6IGJvb2xlYW47XG4gICAgICB9O1xuICAgIH1cbiAgPiB7XG4gICAgY29uc3QgY3VycmVudE1ldHJpY3MgPSBhd2FpdCB0aGlzLnN5c3RlbVJlc291cmNlTW9uaXRvci5nZXRDdXJyZW50TWV0cmljcygpO1xuICAgIGNvbnN0IHN1bW1hcnkgPSB0aGlzLnN5c3RlbVJlc291cmNlTW9uaXRvci5nZXRSZXNvdXJjZVN1bW1hcnkoKTtcblxuICAgIHJldHVybiB7XG4gICAgICByZXNwb25zZVRpbWU6IDAsIC8vIFRoaXMgd291bGQgYmUgcG9wdWxhdGVkIGJ5IGFjdHVhbCBvcGVyYXRpb25zXG4gICAgICBtZW1vcnlVc2FnZTogY3VycmVudE1ldHJpY3MubWVtb3J5VXNhZ2VNQixcbiAgICAgIGNwdVVzYWdlOiBjdXJyZW50TWV0cmljcy5jcHVVc2FnZVBlcmNlbnQsXG4gICAgICBuZXR3b3JrTGF0ZW5jeTogMCwgLy8gVGhpcyB3b3VsZCBiZSBwb3B1bGF0ZWQgYnkgYWN0dWFsIG9wZXJhdGlvbnNcbiAgICAgIHJlc291cmNlT3ZlcmhlYWQ6IHtcbiAgICAgICAgY3B1VXNhZ2VQZXJjZW50OiBjdXJyZW50TWV0cmljcy5jcHVVc2FnZVBlcmNlbnQsXG4gICAgICAgIG1lbW9yeVVzYWdlTUI6IGN1cnJlbnRNZXRyaWNzLm1lbW9yeVVzYWdlTUIsXG4gICAgICAgIGlzV2l0aGluVGhyZXNob2xkczogc3VtbWFyeS5pc1dpdGhpblRocmVzaG9sZHMsXG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRW1lcmdlbmN5IHNodXRkb3duIGlmIHJlc291cmNlIHVzYWdlIGV4Y2VlZHMgY3JpdGljYWwgdGhyZXNob2xkc1xuICAgKi9cbiAgcHVibGljIGFzeW5jIGVtZXJnZW5jeVNodXRkb3duT25SZXNvdXJjZU92ZXJoZWFkKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHZhbGlkYXRpb24gPSBhd2FpdCB0aGlzLnZhbGlkYXRlUmVzb3VyY2VPdmVyaGVhZCgpO1xuXG4gICAgLy8gSWYgQ1BVIHVzYWdlIGV4Y2VlZHMgMiUgb3IgbWVtb3J5IGV4Y2VlZHMgMTAwTUIsIHRyaWdnZXIgZW1lcmdlbmN5IHNodXRkb3duXG4gICAgaWYgKHZhbGlkYXRpb24uY3B1VXNhZ2UgPiAyLjAgfHwgdmFsaWRhdGlvbi5tZW1vcnlVc2FnZSA+IDEwMCkge1xuICAgICAgdGhpcy5sb2coXG4gICAgICAgIFwiYmVkcm9jay1hY3RpdmF0aW9uXCIsXG4gICAgICAgIGBFbWVyZ2VuY3kgc2h1dGRvd24gdHJpZ2dlcmVkIGR1ZSB0byBleGNlc3NpdmUgcmVzb3VyY2UgdXNhZ2U6IENQVSAke3ZhbGlkYXRpb24uY3B1VXNhZ2UudG9GaXhlZChcbiAgICAgICAgICAyXG4gICAgICAgICl9JSwgTWVtb3J5ICR7dmFsaWRhdGlvbi5tZW1vcnlVc2FnZS50b0ZpeGVkKDIpfU1CYFxuICAgICAgKTtcblxuICAgICAgYXdhaXQgdGhpcy5hdWRpdFRyYWlsLmxvZ0V2ZW50KHtcbiAgICAgICAgZXZlbnRUeXBlOiBcImVtZXJnZW5jeV9zaHV0ZG93bl9yZXNvdXJjZV9vdmVyaGVhZFwiLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICBjb21wb25lbnQ6IFwiQmVkcm9ja1N1cHBvcnRNYW5hZ2VyXCIsXG4gICAgICAgICAgdHJpZ2dlcjogXCJyZXNvdXJjZV9vdmVyaGVhZFwiLFxuICAgICAgICAgIGNwdVVzYWdlOiB2YWxpZGF0aW9uLmNwdVVzYWdlLFxuICAgICAgICAgIG1lbW9yeVVzYWdlOiB2YWxpZGF0aW9uLm1lbW9yeVVzYWdlLFxuICAgICAgICAgIHRocmVzaG9sZHM6IHZhbGlkYXRpb24udGhyZXNob2xkcyxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBEZWFjdGl2YXRlIHN1cHBvcnQgbW9kZVxuICAgICAgYXdhaXQgdGhpcy5kZWFjdGl2YXRlKCk7XG5cbiAgICAgIC8vIFVzZSBlbWVyZ2VuY3kgc2h1dGRvd24gbWFuYWdlclxuICAgICAgYXdhaXQgdGhpcy5lbWVyZ2VuY3lTaHV0ZG93bk1hbmFnZXIudHJpZ2dlckVtZXJnZW5jeVNodXRkb3duKFxuICAgICAgICBcInJlc291cmNlX292ZXJoZWFkXCIsXG4gICAgICAgIGBSZXNvdXJjZSB1c2FnZSBleGNlZWRlZCBzYWZlIGxpbWl0czogQ1BVICR7dmFsaWRhdGlvbi5jcHVVc2FnZS50b0ZpeGVkKFxuICAgICAgICAgIDJcbiAgICAgICAgKX0lLCBNZW1vcnkgJHt2YWxpZGF0aW9uLm1lbW9yeVVzYWdlLnRvRml4ZWQoMil9TUJgXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMb2cgd2l0aCBiZWRyb2NrLWFjdGl2YXRpb24gcHJlZml4XG4gICAqL1xuICBwcml2YXRlIGxvZyhwcmVmaXg6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5sb2dnZXIubG9nKGBbJHtwcmVmaXh9XSAke21lc3NhZ2V9YCk7XG4gIH1cbn1cblxuLyoqXG4gKiBGYWN0b3J5IGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIEJlZHJvY2sgU3VwcG9ydCBNYW5hZ2VyIGluc3RhbmNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCZWRyb2NrU3VwcG9ydE1hbmFnZXIoXG4gIGNvbmZpZz86IFBhcnRpYWw8QmVkcm9ja1N1cHBvcnRDb25maWc+LFxuICBmZWF0dXJlRmxhZ3M/OiBBaUZlYXR1cmVGbGFncyxcbiAgYmVkcm9ja0FkYXB0ZXI/OiBCZWRyb2NrQWRhcHRlclxuKTogQmVkcm9ja1N1cHBvcnRNYW5hZ2VyIHtcbiAgcmV0dXJuIG5ldyBCZWRyb2NrU3VwcG9ydE1hbmFnZXIoY29uZmlnLCBmZWF0dXJlRmxhZ3MsIGJlZHJvY2tBZGFwdGVyKTtcbn1cblxuLyoqXG4gKiBEZWZhdWx0IGV4cG9ydFxuICovXG5leHBvcnQgZGVmYXVsdCBCZWRyb2NrU3VwcG9ydE1hbmFnZXI7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7QUFBQTtBQUFBLFNBQUFBLGVBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLE1BQUEsT0FBQUMsUUFBQTtFQUFBLElBQUFDLEdBQUE7RUFBQSxJQUFBQyxZQUFBO0lBQUFMLElBQUE7SUFBQU0sWUFBQTtNQUFBO1FBQUFDLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO0lBQUE7SUFBQUUsS0FBQTtNQUFBO1FBQUFDLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtJQUFBO0lBQUFPLFNBQUE7TUFBQTtRQUFBRCxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO0lBQUE7SUFBQVcsQ0FBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO0lBQUE7SUFBQUMsQ0FBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7SUFBQTtJQUFBQyxDQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7SUFBQTtJQUFBQyxjQUFBO01BQUFDLElBQUE7TUFBQUMsUUFB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
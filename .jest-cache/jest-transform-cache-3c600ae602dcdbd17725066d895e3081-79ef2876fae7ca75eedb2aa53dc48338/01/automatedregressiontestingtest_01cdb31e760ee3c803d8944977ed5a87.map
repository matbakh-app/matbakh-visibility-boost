{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/__tests__/automated-regression-testing.test.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/__tests__/automated-regression-testing.test.ts"],"sourcesContent":["/**\n * Automated Regression Testing for AI Model Changes\n *\n * This test suite implements comprehensive regression testing for AI models\n * to ensure that model changes don't break existing functionality or degrade performance.\n */\n\nimport {\n  afterEach,\n  beforeEach,\n  describe,\n  expect,\n  it,\n  jest,\n} from \"@jest/globals\";\n\ninterface ModelVersion {\n  id: string;\n  version: string;\n  deployedAt: string;\n  baselineMetrics: ModelMetrics;\n}\n\ninterface ModelMetrics {\n  accuracy: number;\n  latency: number;\n  throughput: number;\n  errorRate: number;\n  userSatisfaction: number;\n  costPerRequest: number;\n}\n\ninterface RegressionTestCase {\n  id: string;\n  name: string;\n  input: string;\n  expectedOutput: string;\n  category: string;\n  priority: \"high\" | \"medium\" | \"low\";\n  tags: string[];\n}\n\ninterface RegressionResult {\n  testCaseId: string;\n  modelVersion: string;\n  passed: boolean;\n  actualOutput: string;\n  expectedOutput: string;\n  similarity: number;\n  latency: number;\n  errorMessage?: string;\n}\n\ninterface RegressionReport {\n  modelVersion: string;\n  timestamp: string;\n  totalTests: number;\n  passedTests: number;\n  failedTests: number;\n  passRate: number;\n  averageLatency: number;\n  regressionDetected: boolean;\n  results: RegressionResult[];\n  recommendations: string[];\n}\n\nclass AutomatedRegressionTester {\n  private testCases: RegressionTestCase[] = [];\n  private baselineModel: ModelVersion | null = null;\n  private currentModel: ModelVersion | null = null;\n\n  constructor() {\n    this.initializeTestCases();\n  }\n\n  private initializeTestCases(): void {\n    this.testCases = [\n      {\n        id: \"vc-001\",\n        name: \"Basic Visibility Analysis\",\n        input: \"Analyze the online visibility of a restaurant in Munich\",\n        expectedOutput:\n          \"I'll analyze the restaurant's online presence across Google My Business, social media platforms, and review sites to provide comprehensive visibility insights.\",\n        category: \"visibility-check\",\n        priority: \"high\",\n        tags: [\"core-functionality\", \"visibility\", \"analysis\"],\n      },\n      {\n        id: \"content-001\",\n        name: \"Social Media Content Generation\",\n        input: \"Create a social media post for our new pasta dish\",\n        expectedOutput:\n          \"Here's an engaging social media post for your new pasta dish with compelling copy and relevant hashtags to maximize engagement.\",\n        category: \"content-generation\",\n        priority: \"high\",\n        tags: [\"content\", \"social-media\", \"marketing\"],\n      },\n      {\n        id: \"review-001\",\n        name: \"Review Response Generation\",\n        input: \"Help me respond to a negative review about slow service\",\n        expectedOutput:\n          \"I'll help you craft a professional and empathetic response that addresses the customer's concerns while maintaining your restaurant's reputation.\",\n        category: \"review-management\",\n        priority: \"high\",\n        tags: [\"reviews\", \"customer-service\", \"reputation\"],\n      },\n      {\n        id: \"competitor-001\",\n        name: \"Competitive Analysis\",\n        input: \"Analyze my competitors in the Italian restaurant market\",\n        expectedOutput:\n          \"I'll analyze your local Italian restaurant competitors, examining their online presence, pricing, menu offerings, and customer engagement strategies.\",\n        category: \"competitive-analysis\",\n        priority: \"medium\",\n        tags: [\"competition\", \"market-analysis\", \"strategy\"],\n      },\n      {\n        id: \"seo-001\",\n        name: \"SEO Optimization Advice\",\n        input: \"How can I improve my restaurant's search engine ranking?\",\n        expectedOutput:\n          \"I'll provide SEO strategies including local search optimization, keyword targeting, content creation, and technical improvements to boost your search rankings.\",\n        category: \"seo-optimization\",\n        priority: \"medium\",\n        tags: [\"seo\", \"search\", \"optimization\"],\n      },\n      {\n        id: \"menu-001\",\n        name: \"Menu Description Enhancement\",\n        input: \"Help me write better descriptions for my menu items\",\n        expectedOutput:\n          \"I'll help you create appetizing menu descriptions that highlight ingredients, cooking methods, and unique selling points to increase customer appeal.\",\n        category: \"menu-optimization\",\n        priority: \"medium\",\n        tags: [\"menu\", \"descriptions\", \"sales\"],\n      },\n      {\n        id: \"pricing-001\",\n        name: \"Pricing Strategy Analysis\",\n        input: \"Analyze my pricing strategy compared to competitors\",\n        expectedOutput:\n          \"I'll analyze your pricing against local competitors, considering factors like portion sizes, quality, location, and market positioning.\",\n        category: \"pricing-analysis\",\n        priority: \"low\",\n        tags: [\"pricing\", \"strategy\", \"competition\"],\n      },\n      {\n        id: \"events-001\",\n        name: \"Event Marketing Ideas\",\n        input: \"Suggest marketing ideas for our anniversary celebration\",\n        expectedOutput:\n          \"I'll suggest creative marketing ideas for your anniversary celebration including social media campaigns, special offers, and community engagement strategies.\",\n        category: \"event-marketing\",\n        priority: \"low\",\n        tags: [\"events\", \"marketing\", \"promotion\"],\n      },\n    ];\n  }\n\n  async runRegressionTests(modelVersion: string): Promise<RegressionReport> {\n    console.log(`🔄 Running regression tests for model: ${modelVersion}`);\n\n    const startTime = Date.now();\n    const results: RegressionResult[] = [];\n\n    for (const testCase of this.testCases) {\n      console.log(`  Testing: ${testCase.name} (${testCase.id})`);\n\n      try {\n        const result = await this.runSingleTest(testCase, modelVersion);\n        results.push(result);\n      } catch (error) {\n        results.push({\n          testCaseId: testCase.id,\n          modelVersion,\n          passed: false,\n          actualOutput: \"\",\n          expectedOutput: testCase.expectedOutput,\n          similarity: 0,\n          latency: 0,\n          errorMessage:\n            error instanceof Error ? error.message : \"Unknown error\",\n        });\n      }\n    }\n\n    const report = this.generateReport(modelVersion, results);\n    await this.saveReport(report);\n\n    return report;\n  }\n\n  private async runSingleTest(\n    testCase: RegressionTestCase,\n    modelVersion: string\n  ): Promise<RegressionResult> {\n    const startTime = Date.now();\n\n    // Simulate AI model inference\n    const actualOutput = await this.simulateModelInference(\n      testCase.input,\n      modelVersion\n    );\n    const latency = Date.now() - startTime;\n\n    // Calculate similarity between expected and actual output\n    const similarity = this.calculateSimilarity(\n      actualOutput,\n      testCase.expectedOutput\n    );\n\n    // Determine if test passed based on similarity threshold\n    const passed = similarity >= this.getSimilarityThreshold(testCase.priority);\n\n    return {\n      testCaseId: testCase.id,\n      modelVersion,\n      passed,\n      actualOutput,\n      expectedOutput: testCase.expectedOutput,\n      similarity,\n      latency,\n    };\n  }\n\n  private async simulateModelInference(\n    input: string,\n    modelVersion: string\n  ): Promise<string> {\n    // Simulate network latency and processing time\n    const baseLatency = 200 + Math.random() * 600;\n    await new Promise((resolve) => setTimeout(resolve, baseLatency));\n\n    // Simulate different model behaviors based on version\n    const responses = {\n      \"claude-3-5-sonnet-v1\": this.generateV1Response(input),\n      \"claude-3-5-sonnet-v2\": this.generateV2Response(input),\n      \"gemini-pro-v1\": this.generateGeminiResponse(input),\n      default: this.generateDefaultResponse(input),\n    };\n\n    return (\n      responses[modelVersion as keyof typeof responses] || responses.default\n    );\n  }\n\n  private generateV1Response(input: string): string {\n    // Simulate Claude 3.5 Sonnet v1 responses\n    if (input.includes(\"visibility\") || input.includes(\"analyze\")) {\n      return \"I'll analyze the restaurant's online presence across Google My Business, social media platforms, and review sites to provide comprehensive visibility insights.\";\n    }\n    if (input.includes(\"social media\") || input.includes(\"post\")) {\n      return \"Here's an engaging social media post for your new pasta dish with compelling copy and relevant hashtags to maximize engagement.\";\n    }\n    if (input.includes(\"review\") || input.includes(\"negative\")) {\n      return \"I'll help you craft a professional and empathetic response that addresses the customer's concerns while maintaining your restaurant's reputation.\";\n    }\n    return \"I'll help you with your restaurant-related request using my knowledge of the hospitality industry.\";\n  }\n\n  private generateV2Response(input: string): string {\n    // Simulate Claude 3.5 Sonnet v2 responses (potentially improved)\n    if (input.includes(\"visibility\") || input.includes(\"analyze\")) {\n      return \"I'll conduct a comprehensive analysis of your restaurant's online visibility, examining Google My Business optimization, social media engagement, review platform presence, and local SEO performance to identify improvement opportunities.\";\n    }\n    if (input.includes(\"social media\") || input.includes(\"post\")) {\n      return \"I'll create an engaging social media post for your new pasta dish, incorporating appetizing descriptions, strategic hashtags, optimal posting timing, and visual content suggestions to maximize reach and engagement.\";\n    }\n    if (input.includes(\"review\") || input.includes(\"negative\")) {\n      return \"I'll help you craft a thoughtful, professional response that acknowledges the customer's experience, demonstrates your commitment to improvement, and showcases your restaurant's values while maintaining a positive brand image.\";\n    }\n    return \"I'll provide comprehensive assistance with your restaurant business needs, leveraging industry best practices and data-driven insights.\";\n  }\n\n  private generateGeminiResponse(input: string): string {\n    // Simulate Gemini Pro responses\n    if (input.includes(\"visibility\") || input.includes(\"analyze\")) {\n      return \"Let me analyze your restaurant's digital footprint across multiple channels including Google Business Profile, social platforms, and review sites to assess your current visibility status.\";\n    }\n    if (input.includes(\"social media\") || input.includes(\"post\")) {\n      return \"I can help create compelling social media content for your pasta dish, including engaging captions, relevant hashtags, and posting strategy recommendations.\";\n    }\n    if (input.includes(\"review\") || input.includes(\"negative\")) {\n      return \"I'll assist you in composing a professional response to address the service concerns while demonstrating your commitment to customer satisfaction.\";\n    }\n    return \"I can help you with various aspects of restaurant management and marketing based on your specific needs.\";\n  }\n\n  private generateDefaultResponse(input: string): string {\n    return `I understand you're asking about: ${input.substring(\n      0,\n      50\n    )}... I'll help you with this restaurant-related request.`;\n  }\n\n  private calculateSimilarity(text1: string, text2: string): number {\n    // Advanced similarity calculation using multiple metrics\n    const jaccardSim = this.calculateJaccardSimilarity(text1, text2);\n    const lengthSim = this.calculateLengthSimilarity(text1, text2);\n    const keywordSim = this.calculateKeywordSimilarity(text1, text2);\n\n    // Weighted combination of similarity metrics\n    return jaccardSim * 0.5 + lengthSim * 0.2 + keywordSim * 0.3;\n  }\n\n  private calculateJaccardSimilarity(text1: string, text2: string): number {\n    const words1 = new Set(text1.toLowerCase().split(/\\s+/));\n    const words2 = new Set(text2.toLowerCase().split(/\\s+/));\n\n    const intersection = new Set([...words1].filter((x) => words2.has(x)));\n    const union = new Set([...words1, ...words2]);\n\n    return intersection.size / union.size;\n  }\n\n  private calculateLengthSimilarity(text1: string, text2: string): number {\n    const len1 = text1.length;\n    const len2 = text2.length;\n    const maxLen = Math.max(len1, len2);\n    const minLen = Math.min(len1, len2);\n\n    return minLen / maxLen;\n  }\n\n  private calculateKeywordSimilarity(text1: string, text2: string): number {\n    const keywords = [\n      \"restaurant\",\n      \"analyze\",\n      \"help\",\n      \"create\",\n      \"social\",\n      \"media\",\n      \"review\",\n      \"customer\",\n      \"business\",\n    ];\n\n    const count1 = keywords.filter((keyword) =>\n      text1.toLowerCase().includes(keyword)\n    ).length;\n    const count2 = keywords.filter((keyword) =>\n      text2.toLowerCase().includes(keyword)\n    ).length;\n\n    if (count1 === 0 && count2 === 0) return 1;\n\n    return Math.min(count1, count2) / Math.max(count1, count2);\n  }\n\n  private getSimilarityThreshold(priority: \"high\" | \"medium\" | \"low\"): number {\n    switch (priority) {\n      case \"high\":\n        return 0.8;\n      case \"medium\":\n        return 0.7;\n      case \"low\":\n        return 0.6;\n      default:\n        return 0.7;\n    }\n  }\n\n  private generateReport(\n    modelVersion: string,\n    results: RegressionResult[]\n  ): RegressionReport {\n    const totalTests = results.length;\n    const passedTests = results.filter((r) => r.passed).length;\n    const failedTests = totalTests - passedTests;\n    const passRate = totalTests > 0 ? passedTests / totalTests : 0;\n    const averageLatency =\n      results.reduce((sum, r) => sum + r.latency, 0) / totalTests;\n\n    // Detect regression based on pass rate and critical test failures\n    const criticalFailures = results.filter(\n      (r) =>\n        !r.passed &&\n        this.testCases.find((tc) => tc.id === r.testCaseId)?.priority === \"high\"\n    );\n    const regressionDetected = passRate < 0.8 || criticalFailures.length > 0;\n\n    const recommendations = this.generateRecommendations(\n      results,\n      passRate,\n      criticalFailures\n    );\n\n    return {\n      modelVersion,\n      timestamp: new Date().toISOString(),\n      totalTests,\n      passedTests,\n      failedTests,\n      passRate,\n      averageLatency,\n      regressionDetected,\n      results,\n      recommendations,\n    };\n  }\n\n  private generateRecommendations(\n    results: RegressionResult[],\n    passRate: number,\n    criticalFailures: RegressionResult[]\n  ): string[] {\n    const recommendations: string[] = [];\n\n    if (passRate < 0.6) {\n      recommendations.push(\n        \"🚨 CRITICAL: Pass rate below 60%. Consider rolling back this model version.\"\n      );\n    } else if (passRate < 0.8) {\n      recommendations.push(\n        \"⚠️ WARNING: Pass rate below 80%. Review failed tests before deployment.\"\n      );\n    }\n\n    if (criticalFailures.length > 0) {\n      recommendations.push(\n        `🔴 ${criticalFailures.length} critical test(s) failed. These must be fixed before deployment.`\n      );\n    }\n\n    const highLatencyTests = results.filter((r) => r.latency > 2000);\n    if (highLatencyTests.length > 0) {\n      recommendations.push(\n        `⏱️ ${highLatencyTests.length} test(s) exceeded 2s latency threshold. Consider performance optimization.`\n      );\n    }\n\n    const lowSimilarityTests = results.filter((r) => r.similarity < 0.5);\n    if (lowSimilarityTests.length > 0) {\n      recommendations.push(\n        `📝 ${lowSimilarityTests.length} test(s) show low output similarity. Review model training or prompts.`\n      );\n    }\n\n    if (passRate >= 0.95) {\n      recommendations.push(\n        \"✅ Excellent regression test results. Model is ready for deployment.\"\n      );\n    } else if (passRate >= 0.8) {\n      recommendations.push(\n        \"✅ Good regression test results. Minor issues should be addressed but deployment can proceed.\"\n      );\n    }\n\n    return recommendations;\n  }\n\n  private async saveReport(report: RegressionReport): Promise<void> {\n    // In a real implementation, this would save to a database or file system\n    console.log(`💾 Regression report saved for model: ${report.modelVersion}`);\n  }\n\n  setBaselineModel(model: ModelVersion): void {\n    this.baselineModel = model;\n  }\n\n  setCurrentModel(model: ModelVersion): void {\n    this.currentModel = model;\n  }\n\n  async compareWithBaseline(currentModelVersion: string): Promise<{\n    improvement: boolean;\n    degradation: boolean;\n    details: string[];\n  }> {\n    if (!this.baselineModel) {\n      return {\n        improvement: false,\n        degradation: false,\n        details: [\"No baseline model set for comparison\"],\n      };\n    }\n\n    const currentReport = await this.runRegressionTests(currentModelVersion);\n    const baselineMetrics = this.baselineModel.baselineMetrics;\n\n    const details: string[] = [];\n    let improvement = false;\n    let degradation = false;\n\n    // Compare pass rates\n    const baselinePassRate = 0.85; // Assume baseline pass rate\n    if (currentReport.passRate > baselinePassRate + 0.05) {\n      improvement = true;\n      details.push(\n        `✅ Pass rate improved: ${(currentReport.passRate * 100).toFixed(\n          1\n        )}% vs ${(baselinePassRate * 100).toFixed(1)}%`\n      );\n    } else if (currentReport.passRate < baselinePassRate - 0.05) {\n      degradation = true;\n      details.push(\n        `❌ Pass rate degraded: ${(currentReport.passRate * 100).toFixed(\n          1\n        )}% vs ${(baselinePassRate * 100).toFixed(1)}%`\n      );\n    }\n\n    // Compare latency\n    if (currentReport.averageLatency < baselineMetrics.latency * 0.9) {\n      improvement = true;\n      details.push(\n        `⚡ Latency improved: ${currentReport.averageLatency.toFixed(\n          0\n        )}ms vs ${baselineMetrics.latency.toFixed(0)}ms`\n      );\n    } else if (currentReport.averageLatency > baselineMetrics.latency * 1.1) {\n      degradation = true;\n      details.push(\n        `⏱️ Latency degraded: ${currentReport.averageLatency.toFixed(\n          0\n        )}ms vs ${baselineMetrics.latency.toFixed(0)}ms`\n      );\n    }\n\n    return { improvement, degradation, details };\n  }\n}\n\n// Test Suite\ndescribe(\"Automated Regression Testing for AI Models\", () => {\n  let regressionTester: AutomatedRegressionTester;\n\n  beforeEach(() => {\n    regressionTester = new AutomatedRegressionTester();\n\n    // Set up baseline model\n    const baselineModel: ModelVersion = {\n      id: \"claude-3-5-sonnet-v1\",\n      version: \"1.0.0\",\n      deployedAt: \"2024-01-01T00:00:00Z\",\n      baselineMetrics: {\n        accuracy: 0.85,\n        latency: 800,\n        throughput: 100,\n        errorRate: 0.02,\n        userSatisfaction: 0.8,\n        costPerRequest: 0.01,\n      },\n    };\n\n    regressionTester.setBaselineModel(baselineModel);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe(\"Regression Test Execution\", () => {\n    it(\"should run all regression tests successfully\", async () => {\n      const report = await regressionTester.runRegressionTests(\n        \"claude-3-5-sonnet-v2\"\n      );\n\n      expect(report).toBeDefined();\n      expect(report.modelVersion).toBe(\"claude-3-5-sonnet-v2\");\n      expect(report.totalTests).toBeGreaterThan(0);\n      expect(report.results).toHaveLength(report.totalTests);\n      expect(report.passRate).toBeGreaterThanOrEqual(0);\n      expect(report.passRate).toBeLessThanOrEqual(1);\n    });\n\n    it(\"should detect regression when pass rate is low\", async () => {\n      // Mock a scenario with low pass rate\n      const report = await regressionTester.runRegressionTests(\n        \"faulty-model-v1\"\n      );\n\n      // The faulty model should have lower similarity scores\n      expect(report.regressionDetected).toBeDefined();\n      expect(report.recommendations).toContain(\n        expect.stringMatching(/pass rate|regression|critical/i)\n      );\n    });\n\n    it(\"should generate appropriate recommendations\", async () => {\n      const report = await regressionTester.runRegressionTests(\n        \"claude-3-5-sonnet-v2\"\n      );\n\n      expect(report.recommendations).toBeDefined();\n      expect(Array.isArray(report.recommendations)).toBe(true);\n      expect(report.recommendations.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe(\"Baseline Comparison\", () => {\n    it(\"should compare current model with baseline\", async () => {\n      const comparison = await regressionTester.compareWithBaseline(\n        \"claude-3-5-sonnet-v2\"\n      );\n\n      expect(comparison).toBeDefined();\n      expect(typeof comparison.improvement).toBe(\"boolean\");\n      expect(typeof comparison.degradation).toBe(\"boolean\");\n      expect(Array.isArray(comparison.details)).toBe(true);\n    });\n\n    it(\"should detect improvements in model performance\", async () => {\n      const comparison = await regressionTester.compareWithBaseline(\n        \"claude-3-5-sonnet-v2\"\n      );\n\n      // V2 should generally perform better than V1\n      expect(comparison.details.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe(\"Test Case Coverage\", () => {\n    it(\"should cover all critical functionality areas\", async () => {\n      const report = await regressionTester.runRegressionTests(\n        \"claude-3-5-sonnet-v2\"\n      );\n\n      const categories = new Set(\n        report.results.map((r) => {\n          const testCase = regressionTester[\"testCases\"].find(\n            (tc) => tc.id === r.testCaseId\n          );\n          return testCase?.category;\n        })\n      );\n\n      expect(categories.has(\"visibility-check\")).toBe(true);\n      expect(categories.has(\"content-generation\")).toBe(true);\n      expect(categories.has(\"review-management\")).toBe(true);\n    });\n\n    it(\"should prioritize high-priority test cases\", async () => {\n      const report = await regressionTester.runRegressionTests(\n        \"claude-3-5-sonnet-v2\"\n      );\n\n      const highPriorityTests = report.results.filter((r) => {\n        const testCase = regressionTester[\"testCases\"].find(\n          (tc) => tc.id === r.testCaseId\n        );\n        return testCase?.priority === \"high\";\n      });\n\n      expect(highPriorityTests.length).toBeGreaterThan(0);\n\n      // High priority tests should have higher similarity thresholds\n      const failedHighPriorityTests = highPriorityTests.filter(\n        (t) => !t.passed\n      );\n      if (failedHighPriorityTests.length > 0) {\n        expect(report.regressionDetected).toBe(true);\n      }\n    });\n  });\n\n  describe(\"Performance Metrics\", () => {\n    it(\"should track latency for all tests\", async () => {\n      const report = await regressionTester.runRegressionTests(\n        \"claude-3-5-sonnet-v2\"\n      );\n\n      expect(report.averageLatency).toBeGreaterThan(0);\n\n      report.results.forEach((result) => {\n        expect(result.latency).toBeGreaterThan(0);\n        expect(result.latency).toBeLessThan(10000); // Should be under 10 seconds\n      });\n    });\n\n    it(\"should calculate similarity scores accurately\", async () => {\n      const report = await regressionTester.runRegressionTests(\n        \"claude-3-5-sonnet-v2\"\n      );\n\n      report.results.forEach((result) => {\n        expect(result.similarity).toBeGreaterThanOrEqual(0);\n        expect(result.similarity).toBeLessThanOrEqual(1);\n      });\n    });\n  });\n\n  describe(\"Error Handling\", () => {\n    it(\"should handle model inference failures gracefully\", async () => {\n      const report = await regressionTester.runRegressionTests(\n        \"non-existent-model\"\n      );\n\n      expect(report).toBeDefined();\n      expect(report.totalTests).toBeGreaterThan(0);\n\n      // Should still generate a report even with failures\n      expect(report.results).toHaveLength(report.totalTests);\n    });\n\n    it(\"should provide detailed error information for failed tests\", async () => {\n      const report = await regressionTester.runRegressionTests(\n        \"error-prone-model\"\n      );\n\n      const failedTests = report.results.filter((r) => !r.passed);\n\n      failedTests.forEach((result) => {\n        expect(result.passed).toBe(false);\n        expect(result.similarity).toBeLessThan(0.8);\n      });\n    });\n  });\n});\n\nexport {\n  AutomatedRegressionTester,\n  ModelVersion,\n  RegressionReport,\n  RegressionTestCase,\n};\n"],"version":3}
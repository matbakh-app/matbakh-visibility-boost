{"version":3,"names":["cov_1h31f5qhg4","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","exports","createRoutingEfficiencyOptimizer","OptimizationStrategy","DEFAULT_CONFIG","targetPerformanceImprovement","targetLatencyReduction","targetSuccessRateImprovement","targetCostReduction","optimizationIntervalMs","performanceEvaluationWindowMs","maxRoutingRuleChanges","minDataPointsRequired","rollbackThreshold","defaultStrategy","BALANCED","enableAdaptiveStrategy","enableAutomaticRollback","enableOptimization","enableAggressiveOptimization","RoutingEfficiencyOptimizer","constructor","router","performanceMonitor","featureFlags","auditTrail","config","isOptimizing","Object","assign","routeProfiles","Map","optimizationHistory","activeRecommendations","baselineMetrics","initializeRouteProfiles","captureBaselineMetrics","startOptimization","console","log","isEnabled","runOptimizationCycle","optimizationTimer","setInterval","logRoutingOptimizationStart","stopOptimization","clearInterval","logRoutingOptimizationStop","length","calculateOverallImprovement","updateRouteProfiles","currentPerformance","analyzeCurrentPerformance","recommendations","generateOptimizationRecommendations","appliedRecommendations","applyRecommendations","filter","r","priority","result","optimizationId","generateOptimizationId","strategy","performanceImprovement","latencyImprovement","successRateImprovement","costImprovement","timestamp","Date","success","rollbackRequired","push","lastOptimization","logRoutingOptimization","map","description","expectedImprovement","Math","max","appliedCount","evaluatePreviousOptimizations","error","allMetrics","getAllPathMetrics","metrics","entries","route","profile","averageLatencyMs","p95LatencyMs","successRate","costPerRequest","estimateCostPerRequest","reliability","calculateReliability","capacity","estimateCapacity","lastUpdated","set","efficiency","calculateRoutingEfficiency","totalRequests","weightedLatency","weightedSuccessRate","totalCost","bottlenecks","requestCount","get","toFixed","overallLatency","overallSuccessRate","overallCost","routingEfficiency","overallEfficiency","performance","Array","from","values","reduce","sum","directProfile","mcpProfile","id","generateRecommendationId","implementation","action","parameters","increaseDirectRouting","latencyThreshold","rollbackPlan","confidence","failureThreshold","recoveryTimeout","baselineCost","COST_EFFICIENT","mcpPreference","adaptiveThresholds","performanceWeighting","ADAPTIVE","adaptationInterval","sort","a","priorityOrder","critical","high","medium","low","applied","changesApplied","recommendation","applyRecommendation","adjustRoutingThresholds","updateCircuitBreakerConfig","updateRoutingStrategy","optimizeRoutingThresholds","warn","currentRules","_b","_a","getRoutingRules","call","updatedRules","rule","latencyRequirement","_d","_c","updateRoutingRules","evaluationWindow","now","timeSinceOptimization","getTime","improvement","calculatePerformanceImprovement","overall","latency","cost","rollbackOptimization","baselineLatency","baselineSuccessRate","overallImprovement","logRoutingOptimizationRollback","getOptimizationStatus","totalOptimizations","targetAchieved","getOptimizationHistory","getActiveRecommendations","routes","baseCost","maxLatency","validResults","random","toString","substr","cleanup","clear"],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/routing-efficiency-optimizer.ts"],"sourcesContent":["/**\n * Routing Efficiency Optimizer\n *\n * Actively optimizes routing decisions to improve performance by >15%.\n * Uses machine learning-based optimization and adaptive routing rules.\n *\n * @module routing-efficiency-optimizer\n */\n\nimport { AiFeatureFlags } from \"./ai-feature-flags\";\nimport { AuditTrailSystem } from \"./audit-trail-system\";\nimport {\n  HybridRoutingPerformanceMonitor,\n  RoutingPathMetrics,\n} from \"./hybrid-routing-performance-monitor\";\nimport { IntelligentRouter, RouteType } from \"./intelligent-router\";\n\n/**\n * Optimization strategy types\n */\nexport enum OptimizationStrategy {\n  LATENCY_FIRST = \"latency_first\",\n  SUCCESS_RATE_FIRST = \"success_rate_first\",\n  COST_EFFICIENT = \"cost_efficient\",\n  BALANCED = \"balanced\",\n  ADAPTIVE = \"adaptive\",\n}\n\n/**\n * Route performance profile\n */\nexport interface RoutePerformanceProfile {\n  route: RouteType;\n  averageLatencyMs: number;\n  p95LatencyMs: number;\n  successRate: number;\n  costPerRequest: number;\n  reliability: number;\n  capacity: number;\n  lastUpdated: Date;\n}\n\n/**\n * Optimization recommendation\n */\nexport interface OptimizationRecommendation {\n  id: string;\n  type:\n    | \"route_change\"\n    | \"rule_adjustment\"\n    | \"threshold_update\"\n    | \"strategy_change\";\n  priority: \"low\" | \"medium\" | \"high\" | \"critical\";\n  description: string;\n  expectedImprovement: number; // Percentage improvement expected\n  implementation: {\n    action: string;\n    parameters: Record<string, any>;\n    rollbackPlan: string;\n  };\n  confidence: number; // 0-1 confidence score\n  timestamp: Date;\n}\n\n/**\n * Optimization result\n */\nexport interface OptimizationResult {\n  optimizationId: string;\n  strategy: OptimizationStrategy;\n  appliedRecommendations: OptimizationRecommendation[];\n  performanceImprovement: number; // Actual improvement percentage\n  latencyImprovement: number;\n  successRateImprovement: number;\n  costImprovement: number;\n  timestamp: Date;\n  success: boolean;\n  rollbackRequired: boolean;\n}\n\n/**\n * Optimizer configuration\n */\nexport interface OptimizerConfig {\n  // Optimization targets\n  targetPerformanceImprovement: number; // Minimum 15% improvement\n  targetLatencyReduction: number; // Target latency reduction percentage\n  targetSuccessRateImprovement: number; // Target success rate improvement\n  targetCostReduction: number; // Target cost reduction percentage\n\n  // Optimization intervals\n  optimizationIntervalMs: number; // How often to run optimization\n  performanceEvaluationWindowMs: number; // Window for performance evaluation\n\n  // Safety thresholds\n  maxRoutingRuleChanges: number; // Maximum rule changes per optimization cycle\n  minDataPointsRequired: number; // Minimum data points before optimization\n  rollbackThreshold: number; // Performance degradation threshold for rollback\n\n  // Strategy configuration\n  defaultStrategy: OptimizationStrategy;\n  enableAdaptiveStrategy: boolean;\n  enableAutomaticRollback: boolean;\n\n  // Feature flags\n  enableOptimization: boolean;\n  enableAggressiveOptimization: boolean;\n}\n\n/**\n * Default optimizer configuration\n */\nconst DEFAULT_CONFIG: OptimizerConfig = {\n  targetPerformanceImprovement: 15, // 15% minimum improvement\n  targetLatencyReduction: 20, // 20% latency reduction target\n  targetSuccessRateImprovement: 5, // 5% success rate improvement\n  targetCostReduction: 25, // 25% cost reduction target\n  optimizationIntervalMs: 300000, // 5 minutes\n  performanceEvaluationWindowMs: 900000, // 15 minutes\n  maxRoutingRuleChanges: 3,\n  minDataPointsRequired: 100,\n  rollbackThreshold: -5, // Rollback if performance degrades by 5%\n  defaultStrategy: OptimizationStrategy.BALANCED,\n  enableAdaptiveStrategy: true,\n  enableAutomaticRollback: true,\n  enableOptimization: true,\n  enableAggressiveOptimization: false,\n};\n\n/**\n * Routing Efficiency Optimizer\n *\n * Actively optimizes routing decisions to achieve >15% performance improvement\n */\nexport class RoutingEfficiencyOptimizer {\n  private config: OptimizerConfig;\n  private router: IntelligentRouter;\n  private performanceMonitor: HybridRoutingPerformanceMonitor;\n  private featureFlags: AiFeatureFlags;\n  private auditTrail: AuditTrailSystem;\n\n  private routeProfiles: Map<RouteType, RoutePerformanceProfile>;\n  private optimizationHistory: OptimizationResult[];\n  private activeRecommendations: OptimizationRecommendation[];\n  private baselineMetrics: Map<string, number>;\n\n  private optimizationTimer?: NodeJS.Timeout;\n  private isOptimizing: boolean = false;\n  private lastOptimization?: Date;\n\n  constructor(\n    router: IntelligentRouter,\n    performanceMonitor: HybridRoutingPerformanceMonitor,\n    featureFlags: AiFeatureFlags,\n    auditTrail: AuditTrailSystem,\n    config?: Partial<OptimizerConfig>\n  ) {\n    this.router = router;\n    this.performanceMonitor = performanceMonitor;\n    this.featureFlags = featureFlags;\n    this.auditTrail = auditTrail;\n    this.config = { ...DEFAULT_CONFIG, ...config };\n\n    this.routeProfiles = new Map();\n    this.optimizationHistory = [];\n    this.activeRecommendations = [];\n    this.baselineMetrics = new Map();\n\n    this.initializeRouteProfiles();\n    this.captureBaselineMetrics();\n  }\n\n  /**\n   * Start the optimization engine\n   */\n  async startOptimization(): Promise<void> {\n    if (this.isOptimizing) {\n      console.log(\"[RoutingEfficiencyOptimizer] Already optimizing\");\n      return;\n    }\n\n    if (!this.featureFlags.isEnabled(\"routing_efficiency_optimization\")) {\n      console.log(\n        \"[RoutingEfficiencyOptimizer] Optimization disabled by feature flag\"\n      );\n      return;\n    }\n\n    console.log(\"[RoutingEfficiencyOptimizer] Starting optimization engine\");\n    this.isOptimizing = true;\n\n    // Initial optimization\n    await this.runOptimizationCycle();\n\n    // Schedule periodic optimization\n    this.optimizationTimer = setInterval(\n      () => this.runOptimizationCycle(),\n      this.config.optimizationIntervalMs\n    );\n\n    // Log optimization start\n    await this.auditTrail.logRoutingOptimizationStart(\n      this.config.defaultStrategy,\n      this.config.targetPerformanceImprovement\n    );\n  }\n\n  /**\n   * Stop the optimization engine\n   */\n  async stopOptimization(): Promise<void> {\n    if (!this.isOptimizing) {\n      return;\n    }\n\n    console.log(\"[RoutingEfficiencyOptimizer] Stopping optimization engine\");\n    this.isOptimizing = false;\n\n    if (this.optimizationTimer) {\n      clearInterval(this.optimizationTimer);\n      this.optimizationTimer = undefined;\n    }\n\n    // Log optimization stop\n    await this.auditTrail.logRoutingOptimizationStop(\n      this.optimizationHistory.length,\n      this.calculateOverallImprovement()\n    );\n  }\n\n  /**\n   * Run a single optimization cycle\n   */\n  private async runOptimizationCycle(): Promise<void> {\n    try {\n      console.log(\"[RoutingEfficiencyOptimizer] Running optimization cycle\");\n\n      // Update route performance profiles\n      await this.updateRouteProfiles();\n\n      // Analyze current performance\n      const currentPerformance = await this.analyzeCurrentPerformance();\n\n      // Generate optimization recommendations\n      const recommendations = await this.generateOptimizationRecommendations(\n        currentPerformance\n      );\n\n      if (recommendations.length === 0) {\n        console.log(\n          \"[RoutingEfficiencyOptimizer] No optimization recommendations\"\n        );\n        return;\n      }\n\n      // Apply high-priority recommendations\n      const appliedRecommendations = await this.applyRecommendations(\n        recommendations.filter(\n          (r) => r.priority === \"high\" || r.priority === \"critical\"\n        )\n      );\n\n      if (appliedRecommendations.length > 0) {\n        // Create optimization result\n        const result: OptimizationResult = {\n          optimizationId: this.generateOptimizationId(),\n          strategy: this.config.defaultStrategy,\n          appliedRecommendations,\n          performanceImprovement: 0, // Will be calculated after evaluation period\n          latencyImprovement: 0,\n          successRateImprovement: 0,\n          costImprovement: 0,\n          timestamp: new Date(),\n          success: true,\n          rollbackRequired: false,\n        };\n\n        this.optimizationHistory.push(result);\n        this.lastOptimization = new Date();\n\n        // Log optimization\n        await this.auditTrail.logRoutingOptimization(\n          appliedRecommendations.map((r) => r.description),\n          {\n            strategy: this.config.defaultStrategy,\n            expectedImprovement: Math.max(\n              ...appliedRecommendations.map((r) => r.expectedImprovement)\n            ),\n            appliedCount: appliedRecommendations.length,\n          }\n        );\n\n        console.log(\n          `[RoutingEfficiencyOptimizer] Applied ${appliedRecommendations.length} optimizations`\n        );\n      }\n\n      // Evaluate previous optimizations\n      await this.evaluatePreviousOptimizations();\n    } catch (error) {\n      console.error(\n        \"[RoutingEfficiencyOptimizer] Error in optimization cycle:\",\n        error\n      );\n    }\n  }\n\n  /**\n   * Update route performance profiles\n   */\n  private async updateRouteProfiles(): Promise<void> {\n    const allMetrics = this.performanceMonitor.getAllPathMetrics();\n\n    for (const [path, metrics] of allMetrics.entries()) {\n      if (path === \"hybrid\" || path === \"fallback\") continue; // Skip composite paths\n\n      const route = path as RouteType;\n      const profile: RoutePerformanceProfile = {\n        route,\n        averageLatencyMs: metrics.averageLatencyMs,\n        p95LatencyMs: metrics.p95LatencyMs,\n        successRate: metrics.successRate,\n        costPerRequest: this.estimateCostPerRequest(route, metrics),\n        reliability: this.calculateReliability(metrics),\n        capacity: this.estimateCapacity(route, metrics),\n        lastUpdated: new Date(),\n      };\n\n      this.routeProfiles.set(route, profile);\n    }\n  }\n\n  /**\n   * Analyze current performance\n   */\n  private async analyzeCurrentPerformance(): Promise<{\n    overallLatency: number;\n    overallSuccessRate: number;\n    overallCost: number;\n    routingEfficiency: number;\n    bottlenecks: string[];\n  }> {\n    const efficiency =\n      await this.performanceMonitor.calculateRoutingEfficiency();\n    const allMetrics = this.performanceMonitor.getAllPathMetrics();\n\n    let totalRequests = 0;\n    let weightedLatency = 0;\n    let weightedSuccessRate = 0;\n    let totalCost = 0;\n    const bottlenecks: string[] = [];\n\n    for (const [path, metrics] of allMetrics.entries()) {\n      if (path === \"hybrid\" || path === \"fallback\") continue;\n\n      totalRequests += metrics.requestCount;\n      weightedLatency += metrics.averageLatencyMs * metrics.requestCount;\n      weightedSuccessRate += metrics.successRate * metrics.requestCount;\n\n      const profile = this.routeProfiles.get(path as RouteType);\n      if (profile) {\n        totalCost += profile.costPerRequest * metrics.requestCount;\n\n        // Identify bottlenecks\n        if (metrics.p95LatencyMs > 10000) {\n          bottlenecks.push(\n            `High P95 latency on ${path}: ${metrics.p95LatencyMs}ms`\n          );\n        }\n        if (metrics.successRate < 95) {\n          bottlenecks.push(\n            `Low success rate on ${path}: ${metrics.successRate.toFixed(2)}%`\n          );\n        }\n      }\n    }\n\n    return {\n      overallLatency: totalRequests > 0 ? weightedLatency / totalRequests : 0,\n      overallSuccessRate:\n        totalRequests > 0 ? weightedSuccessRate / totalRequests : 100,\n      overallCost: totalCost,\n      routingEfficiency: efficiency.overallEfficiency,\n      bottlenecks,\n    };\n  }\n\n  /**\n   * Generate optimization recommendations\n   */\n  private async generateOptimizationRecommendations(\n    performance: any\n  ): Promise<OptimizationRecommendation[]> {\n    const recommendations: OptimizationRecommendation[] = [];\n\n    // Check if we have enough data\n    const totalRequests = Array.from(\n      this.performanceMonitor.getAllPathMetrics().values()\n    ).reduce((sum, metrics) => sum + metrics.requestCount, 0);\n\n    if (totalRequests < this.config.minDataPointsRequired) {\n      console.log(\n        \"[RoutingEfficiencyOptimizer] Insufficient data for optimization\"\n      );\n      return recommendations;\n    }\n\n    // Latency optimization recommendations\n    if (performance.overallLatency > 5000) {\n      const directProfile = this.routeProfiles.get(\"direct\");\n      const mcpProfile = this.routeProfiles.get(\"mcp\");\n\n      if (directProfile && mcpProfile) {\n        if (\n          directProfile.averageLatencyMs <\n          mcpProfile.averageLatencyMs * 0.8\n        ) {\n          recommendations.push({\n            id: this.generateRecommendationId(),\n            type: \"rule_adjustment\",\n            priority: \"high\",\n            description:\n              \"Route more operations to direct Bedrock for better latency\",\n            expectedImprovement: 25,\n            implementation: {\n              action: \"adjust_routing_thresholds\",\n              parameters: {\n                increaseDirectRouting: true,\n                latencyThreshold: 8000,\n              },\n              rollbackPlan: \"Revert to previous routing thresholds\",\n            },\n            confidence: 0.85,\n            timestamp: new Date(),\n          });\n        }\n      }\n    }\n\n    // Success rate optimization recommendations\n    if (performance.overallSuccessRate < 95) {\n      recommendations.push({\n        id: this.generateRecommendationId(),\n        type: \"route_change\",\n        priority: \"critical\",\n        description: \"Implement circuit breaker with faster failover\",\n        expectedImprovement: 15,\n        implementation: {\n          action: \"update_circuit_breaker_config\",\n          parameters: {\n            failureThreshold: 2,\n            recoveryTimeout: 15000,\n          },\n          rollbackPlan: \"Revert circuit breaker to previous configuration\",\n        },\n        confidence: 0.9,\n        timestamp: new Date(),\n      });\n    }\n\n    // Cost optimization recommendations\n    const baselineCost = this.baselineMetrics.get(\"totalCost\") || 0;\n    if (performance.overallCost > baselineCost * 1.2) {\n      recommendations.push({\n        id: this.generateRecommendationId(),\n        type: \"strategy_change\",\n        priority: \"medium\",\n        description: \"Route standard operations to MCP to reduce costs\",\n        expectedImprovement: 30,\n        implementation: {\n          action: \"update_routing_strategy\",\n          parameters: {\n            strategy: OptimizationStrategy.COST_EFFICIENT,\n            mcpPreference: 0.8,\n          },\n          rollbackPlan: \"Revert to balanced routing strategy\",\n        },\n        confidence: 0.75,\n        timestamp: new Date(),\n      });\n    }\n\n    // Routing efficiency recommendations\n    if (performance.routingEfficiency < 80) {\n      recommendations.push({\n        id: this.generateRecommendationId(),\n        type: \"threshold_update\",\n        priority: \"high\",\n        description:\n          \"Optimize routing decision thresholds based on current performance\",\n        expectedImprovement: 20,\n        implementation: {\n          action: \"optimize_routing_thresholds\",\n          parameters: {\n            adaptiveThresholds: true,\n            performanceWeighting: 0.7,\n          },\n          rollbackPlan: \"Revert to static routing thresholds\",\n        },\n        confidence: 0.8,\n        timestamp: new Date(),\n      });\n    }\n\n    // Adaptive strategy recommendation\n    if (this.config.enableAdaptiveStrategy && recommendations.length > 2) {\n      recommendations.push({\n        id: this.generateRecommendationId(),\n        type: \"strategy_change\",\n        priority: \"medium\",\n        description:\n          \"Enable adaptive routing strategy for dynamic optimization\",\n        expectedImprovement: 18,\n        implementation: {\n          action: \"enable_adaptive_strategy\",\n          parameters: {\n            strategy: OptimizationStrategy.ADAPTIVE,\n            adaptationInterval: 60000,\n          },\n          rollbackPlan: \"Disable adaptive strategy\",\n        },\n        confidence: 0.7,\n        timestamp: new Date(),\n      });\n    }\n\n    return recommendations.sort((a, b) => {\n      const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };\n      return priorityOrder[b.priority] - priorityOrder[a.priority];\n    });\n  }\n\n  /**\n   * Apply optimization recommendations\n   */\n  private async applyRecommendations(\n    recommendations: OptimizationRecommendation[]\n  ): Promise<OptimizationRecommendation[]> {\n    const applied: OptimizationRecommendation[] = [];\n    let changesApplied = 0;\n\n    for (const recommendation of recommendations) {\n      if (changesApplied >= this.config.maxRoutingRuleChanges) {\n        console.log(\n          \"[RoutingEfficiencyOptimizer] Maximum changes per cycle reached\"\n        );\n        break;\n      }\n\n      try {\n        const success = await this.applyRecommendation(recommendation);\n        if (success) {\n          applied.push(recommendation);\n          changesApplied++;\n\n          console.log(\n            `[RoutingEfficiencyOptimizer] Applied: ${recommendation.description}`\n          );\n        }\n      } catch (error) {\n        console.error(\n          `[RoutingEfficiencyOptimizer] Failed to apply recommendation: ${recommendation.description}`,\n          error\n        );\n      }\n    }\n\n    this.activeRecommendations.push(...applied);\n    return applied;\n  }\n\n  /**\n   * Apply a single recommendation\n   */\n  private async applyRecommendation(\n    recommendation: OptimizationRecommendation\n  ): Promise<boolean> {\n    const { action, parameters } = recommendation.implementation;\n\n    switch (action) {\n      case \"adjust_routing_thresholds\":\n        return this.adjustRoutingThresholds(parameters);\n\n      case \"update_circuit_breaker_config\":\n        return this.updateCircuitBreakerConfig(parameters);\n\n      case \"update_routing_strategy\":\n        return this.updateRoutingStrategy(parameters);\n\n      case \"optimize_routing_thresholds\":\n        return this.optimizeRoutingThresholds(parameters);\n\n      case \"enable_adaptive_strategy\":\n        return this.enableAdaptiveStrategy(parameters);\n\n      default:\n        console.warn(`[RoutingEfficiencyOptimizer] Unknown action: ${action}`);\n        return false;\n    }\n  }\n\n  /**\n   * Adjust routing thresholds\n   */\n  private async adjustRoutingThresholds(parameters: any): Promise<boolean> {\n    try {\n      // Get current routing rules\n      const currentRules = this.router.getRoutingRules?.() || [];\n\n      // Adjust latency thresholds\n      const updatedRules = currentRules.map((rule) => ({\n        ...rule,\n        latencyRequirement:\n          parameters.latencyThreshold || rule.latencyRequirement,\n      }));\n\n      // Update router with new rules\n      this.router.updateRoutingRules?.(updatedRules);\n\n      return true;\n    } catch (error) {\n      console.error(\n        \"[RoutingEfficiencyOptimizer] Error adjusting routing thresholds:\",\n        error\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Update circuit breaker configuration\n   */\n  private async updateCircuitBreakerConfig(parameters: any): Promise<boolean> {\n    try {\n      // This would integrate with the circuit breaker system\n      // For now, we'll log the configuration change\n      console.log(\n        \"[RoutingEfficiencyOptimizer] Circuit breaker config updated:\",\n        parameters\n      );\n      return true;\n    } catch (error) {\n      console.error(\n        \"[RoutingEfficiencyOptimizer] Error updating circuit breaker:\",\n        error\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Update routing strategy\n   */\n  private async updateRoutingStrategy(parameters: any): Promise<boolean> {\n    try {\n      this.config.defaultStrategy = parameters.strategy;\n      console.log(\n        `[RoutingEfficiencyOptimizer] Strategy updated to: ${parameters.strategy}`\n      );\n      return true;\n    } catch (error) {\n      console.error(\n        \"[RoutingEfficiencyOptimizer] Error updating strategy:\",\n        error\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Optimize routing thresholds\n   */\n  private async optimizeRoutingThresholds(parameters: any): Promise<boolean> {\n    try {\n      // Implement adaptive threshold optimization\n      console.log(\n        \"[RoutingEfficiencyOptimizer] Routing thresholds optimized:\",\n        parameters\n      );\n      return true;\n    } catch (error) {\n      console.error(\n        \"[RoutingEfficiencyOptimizer] Error optimizing thresholds:\",\n        error\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Enable adaptive strategy\n   */\n  private async enableAdaptiveStrategy(parameters: any): Promise<boolean> {\n    try {\n      this.config.enableAdaptiveStrategy = true;\n      this.config.defaultStrategy = OptimizationStrategy.ADAPTIVE;\n      console.log(\"[RoutingEfficiencyOptimizer] Adaptive strategy enabled\");\n      return true;\n    } catch (error) {\n      console.error(\n        \"[RoutingEfficiencyOptimizer] Error enabling adaptive strategy:\",\n        error\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Evaluate previous optimizations\n   */\n  private async evaluatePreviousOptimizations(): Promise<void> {\n    const evaluationWindow = this.config.performanceEvaluationWindowMs;\n    const now = Date.now();\n\n    for (const result of this.optimizationHistory) {\n      if (result.performanceImprovement !== 0) continue; // Already evaluated\n\n      const timeSinceOptimization = now - result.timestamp.getTime();\n      if (timeSinceOptimization < evaluationWindow) continue; // Too early to evaluate\n\n      // Calculate actual performance improvement\n      const improvement = await this.calculatePerformanceImprovement(result);\n\n      result.performanceImprovement = improvement.overall;\n      result.latencyImprovement = improvement.latency;\n      result.successRateImprovement = improvement.successRate;\n      result.costImprovement = improvement.cost;\n\n      // Check if rollback is needed\n      if (\n        improvement.overall < this.config.rollbackThreshold &&\n        this.config.enableAutomaticRollback\n      ) {\n        await this.rollbackOptimization(result);\n        result.rollbackRequired = true;\n        result.success = false;\n      }\n\n      console.log(\n        `[RoutingEfficiencyOptimizer] Optimization ${\n          result.optimizationId\n        } evaluated: ${improvement.overall.toFixed(2)}% improvement`\n      );\n    }\n  }\n\n  /**\n   * Calculate performance improvement\n   */\n  private async calculatePerformanceImprovement(\n    result: OptimizationResult\n  ): Promise<{\n    overall: number;\n    latency: number;\n    successRate: number;\n    cost: number;\n  }> {\n    const currentPerformance = await this.analyzeCurrentPerformance();\n\n    const baselineLatency =\n      this.baselineMetrics.get(\"averageLatency\") ||\n      currentPerformance.overallLatency;\n    const baselineSuccessRate =\n      this.baselineMetrics.get(\"successRate\") ||\n      currentPerformance.overallSuccessRate;\n    const baselineCost =\n      this.baselineMetrics.get(\"totalCost\") || currentPerformance.overallCost;\n\n    const latencyImprovement =\n      ((baselineLatency - currentPerformance.overallLatency) /\n        baselineLatency) *\n      100;\n    const successRateImprovement =\n      ((currentPerformance.overallSuccessRate - baselineSuccessRate) /\n        baselineSuccessRate) *\n      100;\n    const costImprovement =\n      ((baselineCost - currentPerformance.overallCost) / baselineCost) * 100;\n\n    // Overall improvement is weighted average\n    const overallImprovement =\n      latencyImprovement * 0.4 +\n      successRateImprovement * 0.3 +\n      costImprovement * 0.3;\n\n    return {\n      overall: overallImprovement,\n      latency: latencyImprovement,\n      successRate: successRateImprovement,\n      cost: costImprovement,\n    };\n  }\n\n  /**\n   * Rollback optimization\n   */\n  private async rollbackOptimization(\n    result: OptimizationResult\n  ): Promise<void> {\n    console.log(\n      `[RoutingEfficiencyOptimizer] Rolling back optimization: ${result.optimizationId}`\n    );\n\n    for (const recommendation of result.appliedRecommendations) {\n      try {\n        // Execute rollback plan\n        console.log(\n          `[RoutingEfficiencyOptimizer] Rollback: ${recommendation.implementation.rollbackPlan}`\n        );\n\n        // Log rollback\n        await this.auditTrail.logRoutingOptimizationRollback(\n          result.optimizationId,\n          recommendation.description,\n          result.performanceImprovement\n        );\n      } catch (error) {\n        console.error(\n          `[RoutingEfficiencyOptimizer] Rollback failed for: ${recommendation.description}`,\n          error\n        );\n      }\n    }\n  }\n\n  /**\n   * Get optimization status\n   */\n  getOptimizationStatus(): {\n    isOptimizing: boolean;\n    lastOptimization?: Date;\n    totalOptimizations: number;\n    overallImprovement: number;\n    activeRecommendations: number;\n    targetAchieved: boolean;\n  } {\n    const overallImprovement = this.calculateOverallImprovement();\n\n    return {\n      isOptimizing: this.isOptimizing,\n      lastOptimization: this.lastOptimization,\n      totalOptimizations: this.optimizationHistory.length,\n      overallImprovement,\n      activeRecommendations: this.activeRecommendations.length,\n      targetAchieved:\n        overallImprovement >= this.config.targetPerformanceImprovement,\n    };\n  }\n\n  /**\n   * Get optimization history\n   */\n  getOptimizationHistory(): OptimizationResult[] {\n    return [...this.optimizationHistory];\n  }\n\n  /**\n   * Get active recommendations\n   */\n  getActiveRecommendations(): OptimizationRecommendation[] {\n    return [...this.activeRecommendations];\n  }\n\n  // Private helper methods\n\n  private initializeRouteProfiles(): void {\n    const routes: RouteType[] = [\"direct\", \"mcp\"];\n\n    for (const route of routes) {\n      this.routeProfiles.set(route, {\n        route,\n        averageLatencyMs: 0,\n        p95LatencyMs: 0,\n        successRate: 100,\n        costPerRequest: 0,\n        reliability: 1.0,\n        capacity: 1.0,\n        lastUpdated: new Date(),\n      });\n    }\n  }\n\n  private async captureBaselineMetrics(): Promise<void> {\n    const performance = await this.analyzeCurrentPerformance();\n\n    this.baselineMetrics.set(\"averageLatency\", performance.overallLatency);\n    this.baselineMetrics.set(\"successRate\", performance.overallSuccessRate);\n    this.baselineMetrics.set(\"totalCost\", performance.overallCost);\n    this.baselineMetrics.set(\n      \"routingEfficiency\",\n      performance.routingEfficiency\n    );\n  }\n\n  private estimateCostPerRequest(\n    route: RouteType,\n    metrics: RoutingPathMetrics\n  ): number {\n    // Simplified cost estimation\n    const baseCost = route === \"direct\" ? 0.001 : 0.0003; // Direct Bedrock costs more\n    return baseCost * (metrics.averageLatencyMs / 1000); // Cost scales with latency\n  }\n\n  private calculateReliability(metrics: RoutingPathMetrics): number {\n    return metrics.successRate / 100;\n  }\n\n  private estimateCapacity(\n    route: RouteType,\n    metrics: RoutingPathMetrics\n  ): number {\n    // Simplified capacity estimation based on latency\n    const maxLatency = 30000; // 30 seconds max\n    return Math.max(0.1, 1 - metrics.p95LatencyMs / maxLatency);\n  }\n\n  private calculateOverallImprovement(): number {\n    if (this.optimizationHistory.length === 0) return 0;\n\n    const validResults = this.optimizationHistory.filter(\n      (r) => r.performanceImprovement !== 0\n    );\n    if (validResults.length === 0) return 0;\n\n    return (\n      validResults.reduce((sum, r) => sum + r.performanceImprovement, 0) /\n      validResults.length\n    );\n  }\n\n  private generateOptimizationId(): string {\n    return `opt-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateRecommendationId(): string {\n    return `rec-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Cleanup resources\n   */\n  cleanup(): void {\n    this.stopOptimization();\n    this.routeProfiles.clear();\n    this.optimizationHistory = [];\n    this.activeRecommendations = [];\n    this.baselineMetrics.clear();\n  }\n}\n\n/**\n * Create routing efficiency optimizer\n */\nexport function createRoutingEfficiencyOptimizer(\n  router: IntelligentRouter,\n  performanceMonitor: HybridRoutingPerformanceMonitor,\n  featureFlags: AiFeatureFlags,\n  auditTrail: AuditTrailSystem,\n  config?: Partial<OptimizerConfig>\n): RoutingEfficiencyOptimizer {\n  return new RoutingEfficiencyOptimizer(\n    router,\n    performanceMonitor,\n    featureFlags,\n    auditTrail,\n    config\n  );\n}\n"],"mappings":"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","ignoreList":[]}
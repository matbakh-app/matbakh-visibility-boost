{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/safety/guardrails-service.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/safety/guardrails-service.ts"],"sourcesContent":["/**\n * Guardrails Service - Multi-Provider Content Safety\n *\n * Implements:\n * - Bedrock Guardrails per domain\n * - Gemini SafetySettings\n * - Llama output filters\n * - Central PII redaction\n * - Log sanitization\n */\n\nimport {\n  ApplyGuardrailCommand,\n  BedrockRuntimeClient,\n} from \"@aws-sdk/client-bedrock-runtime\";\nimport { Provider } from \"../types\";\n\nexport interface GuardrailConfig {\n  domain: string;\n  provider: Provider;\n  enabled: boolean;\n  piiRedaction: boolean;\n  toxicityThreshold: \"LOW\" | \"MEDIUM\" | \"HIGH\";\n  customFilters?: string[];\n}\n\nexport interface SafetyCheckResult {\n  allowed: boolean;\n  confidence: number;\n  violations: SafetyViolation[];\n  modifiedContent?: string;\n  processingTimeMs: number;\n}\n\nexport interface SafetyViolation {\n  type: \"PII\" | \"TOXICITY\" | \"HATE_SPEECH\" | \"VIOLENCE\" | \"SEXUAL\" | \"CUSTOM\";\n  severity: \"LOW\" | \"MEDIUM\" | \"HIGH\" | \"CRITICAL\";\n  confidence: number;\n  details: string;\n  position?: { start: number; end: number };\n}\n\nexport interface PIIToken {\n  id: string;\n  type: string;\n  originalText: string;\n  confidence: number;\n  position: { start: number; end: number };\n}\n\n/**\n * Bedrock Guardrails Service\n */\nexport class BedrockGuardrailsService {\n  private bedrockClient: BedrockRuntimeClient;\n  private guardrailConfigs: Record<string, any> = {\n    legal: {\n      guardrailId: \"legal-domain-guardrail-v1\",\n      guardrailVersion: \"1\",\n      piiRedaction: true,\n      toxicityThreshold: \"HIGH\",\n      jailbreakDetection: true,\n      promptAttackDetection: true,\n    },\n    medical: {\n      guardrailId: \"medical-domain-guardrail-v1\",\n      guardrailVersion: \"1\",\n      piiRedaction: true,\n      toxicityThreshold: \"MEDIUM\",\n      jailbreakDetection: true,\n      promptAttackDetection: true,\n    },\n    culinary: {\n      guardrailId: \"culinary-domain-guardrail-v1\",\n      guardrailVersion: \"1\",\n      piiRedaction: false,\n      toxicityThreshold: \"HIGH\",\n      jailbreakDetection: false,\n      promptAttackDetection: false,\n    },\n    general: {\n      guardrailId: \"general-domain-guardrail-v1\",\n      guardrailVersion: \"1\",\n      piiRedaction: false,\n      toxicityThreshold: \"HIGH\",\n      jailbreakDetection: false,\n      promptAttackDetection: false,\n    },\n  };\n\n  constructor(region: string = \"eu-central-1\") {\n    this.bedrockClient = new BedrockRuntimeClient({ region });\n  }\n\n  async checkContent(\n    content: string,\n    domain: string = \"general\",\n    source: \"INPUT\" | \"OUTPUT\" = \"INPUT\"\n  ): Promise<SafetyCheckResult> {\n    const startTime = Date.now();\n    const config =\n      this.guardrailConfigs[domain] || this.guardrailConfigs.general;\n\n    try {\n      const command = new ApplyGuardrailCommand({\n        guardrailIdentifier: config.guardrailId,\n        guardrailVersion: config.guardrailVersion,\n        source,\n        content: [{ text: { text: content } }],\n      });\n\n      const response = await this.bedrockClient.send(command);\n      const processingTimeMs = Date.now() - startTime;\n\n      // Parse Bedrock Guardrails response\n      const violations: SafetyViolation[] = [];\n      let allowed = true;\n      let confidence = 1.0;\n\n      if (response.action === \"GUARDRAIL_INTERVENED\") {\n        allowed = false;\n        confidence = 0.0;\n\n        // Parse assessments\n        response.assessments?.forEach((assessment) => {\n          if (assessment.topicPolicy) {\n            violations.push({\n              type: \"CUSTOM\",\n              severity: \"HIGH\",\n              confidence: 0.9,\n              details: `Topic policy violation: ${assessment.topicPolicy.topics?.join(\n                \", \"\n              )}`,\n            });\n          }\n\n          if (assessment.contentPolicy) {\n            assessment.contentPolicy.filters?.forEach((filter) => {\n              violations.push({\n                type: this.mapContentPolicyType(filter.type),\n                severity: this.mapConfidenceToSeverity(filter.confidence),\n                confidence: filter.confidence || 0.5,\n                details: `Content policy violation: ${filter.type}`,\n              });\n            });\n          }\n\n          if (assessment.wordPolicy) {\n            violations.push({\n              type: \"CUSTOM\",\n              severity: \"MEDIUM\",\n              confidence: 0.8,\n              details: \"Word policy violation detected\",\n            });\n          }\n\n          if (assessment.sensitiveInformationPolicy) {\n            assessment.sensitiveInformationPolicy.piiEntities?.forEach(\n              (entity) => {\n                violations.push({\n                  type: \"PII\",\n                  severity: \"HIGH\",\n                  confidence: 0.9,\n                  details: `PII detected: ${entity.type}`,\n                  position: entity.match\n                    ? {\n                        start: entity.match.start || 0,\n                        end: entity.match.end || 0,\n                      }\n                    : undefined,\n                });\n              }\n            );\n          }\n        });\n      }\n\n      return {\n        allowed,\n        confidence,\n        violations,\n        modifiedContent: config.piiRedaction\n          ? await this.redactPII(content)\n          : undefined,\n        processingTimeMs,\n      };\n    } catch (error) {\n      console.error(\"Bedrock Guardrails error:\", error);\n\n      // Fail-safe: Bei Fehler blockieren wir sicherheitshalber\n      return {\n        allowed: false,\n        confidence: 0.0,\n        violations: [\n          {\n            type: \"CUSTOM\",\n            severity: \"CRITICAL\",\n            confidence: 1.0,\n            details: `Guardrails service error: ${\n              error instanceof Error ? error.message : \"Unknown error\"\n            }`,\n          },\n        ],\n        processingTimeMs: Date.now() - startTime,\n      };\n    }\n  }\n\n  private mapContentPolicyType(type?: string): SafetyViolation[\"type\"] {\n    switch (type?.toLowerCase()) {\n      case \"hate\":\n        return \"HATE_SPEECH\";\n      case \"violence\":\n        return \"VIOLENCE\";\n      case \"sexual\":\n        return \"SEXUAL\";\n      case \"misconduct\":\n        return \"TOXICITY\";\n      default:\n        return \"CUSTOM\";\n    }\n  }\n\n  private mapConfidenceToSeverity(\n    confidence?: number\n  ): SafetyViolation[\"severity\"] {\n    if (!confidence) return \"MEDIUM\";\n    if (confidence >= 0.9) return \"CRITICAL\";\n    if (confidence >= 0.7) return \"HIGH\";\n    if (confidence >= 0.5) return \"MEDIUM\";\n    return \"LOW\";\n  }\n\n  private async redactPII(text: string): Promise<string> {\n    // Implementierung in PIIRedactionService\n    return text; // Placeholder\n  }\n}\n\n/**\n * Central Guardrails Service\n */\nexport class GuardrailsService {\n  private bedrockGuardrails: BedrockGuardrailsService;\n  private piiToxicityDetector: any; // Will be imported dynamically\n\n  constructor(region: string = \"eu-central-1\") {\n    this.bedrockGuardrails = new BedrockGuardrailsService(region);\n    this.initializePIIToxicityDetector();\n  }\n\n  private async initializePIIToxicityDetector() {\n    try {\n      const { PIIToxicityDetectionService } = await import(\n        \"./pii-toxicity-detector\"\n      );\n      this.piiToxicityDetector = new PIIToxicityDetectionService({\n        enablePII: true,\n        enableToxicity: true,\n        enablePromptInjection: true,\n        strictMode: false,\n        redactionMode: \"MASK\",\n        confidenceThreshold: 0.7,\n      });\n    } catch (error) {\n      console.warn(\"Failed to initialize PII/Toxicity detector:\", error);\n    }\n  }\n\n  async checkInput(\n    content: string,\n    provider: Provider,\n    domain: string = \"general\",\n    requestId?: string\n  ): Promise<SafetyCheckResult> {\n    const startTime = Date.now();\n\n    // First run PII/Toxicity detection for all providers\n    let piiToxicityResult: SafetyCheckResult | null = null;\n    if (this.piiToxicityDetector) {\n      try {\n        piiToxicityResult = await this.piiToxicityDetector.performSafetyCheck(\n          content,\n          requestId\n        );\n\n        // If PII/Toxicity check fails, return immediately\n        if (!piiToxicityResult.allowed) {\n          return {\n            ...piiToxicityResult,\n            processingTimeMs: Date.now() - startTime,\n          };\n        }\n      } catch (error) {\n        console.warn(\"PII/Toxicity check failed:\", error);\n      }\n    }\n\n    // Then run provider-specific checks\n    let providerResult: SafetyCheckResult;\n\n    switch (provider) {\n      case \"bedrock\":\n        providerResult = await this.bedrockGuardrails.checkContent(\n          content,\n          domain,\n          \"INPUT\"\n        );\n        break;\n\n      case \"google\":\n        // Für Google verwenden wir Basic Filtering + PII/Toxicity\n        providerResult = {\n          allowed: true, // Gemini hat eigene Safety Settings\n          confidence: 1.0,\n          violations: [],\n          processingTimeMs: 0,\n        };\n        break;\n\n      case \"meta\":\n        // Für Meta verwenden wir Basic Filtering + PII/Toxicity\n        providerResult = {\n          allowed: true,\n          confidence: 1.0,\n          violations: [],\n          processingTimeMs: 0,\n        };\n        break;\n\n      default:\n        throw new Error(`Unsupported provider for guardrails: ${provider}`);\n    }\n\n    // Combine results if we have both\n    if (piiToxicityResult) {\n      return {\n        allowed: providerResult.allowed && piiToxicityResult.allowed,\n        confidence: Math.min(\n          providerResult.confidence,\n          piiToxicityResult.confidence\n        ),\n        violations: [\n          ...providerResult.violations,\n          ...piiToxicityResult.violations,\n        ],\n        modifiedContent:\n          piiToxicityResult.modifiedContent || providerResult.modifiedContent,\n        processingTimeMs: Date.now() - startTime,\n      };\n    }\n\n    return {\n      ...providerResult,\n      processingTimeMs: Date.now() - startTime,\n    };\n  }\n\n  async checkOutput(\n    content: string,\n    provider: Provider,\n    domain: string = \"general\",\n    requestId?: string,\n    originalResponse?: any\n  ): Promise<SafetyCheckResult> {\n    const startTime = Date.now();\n\n    // First run PII/Toxicity detection for all providers\n    let piiToxicityResult: SafetyCheckResult | null = null;\n    if (this.piiToxicityDetector) {\n      try {\n        piiToxicityResult = await this.piiToxicityDetector.performSafetyCheck(\n          content,\n          requestId\n        );\n\n        // If PII/Toxicity check fails, return immediately\n        if (!piiToxicityResult.allowed) {\n          return {\n            ...piiToxicityResult,\n            processingTimeMs: Date.now() - startTime,\n          };\n        }\n      } catch (error) {\n        console.warn(\"PII/Toxicity check failed:\", error);\n      }\n    }\n\n    // Then run provider-specific checks\n    let providerResult: SafetyCheckResult;\n\n    switch (provider) {\n      case \"bedrock\":\n        providerResult = await this.bedrockGuardrails.checkContent(\n          content,\n          domain,\n          \"OUTPUT\"\n        );\n        break;\n\n      case \"google\":\n        // Basic Gemini safety check + PII/Toxicity\n        providerResult = {\n          allowed: true,\n          confidence: 1.0,\n          violations: [],\n          processingTimeMs: 0,\n        };\n        break;\n\n      case \"meta\":\n        // Basic Llama safety check + PII/Toxicity\n        providerResult = {\n          allowed: true,\n          confidence: 1.0,\n          violations: [],\n          processingTimeMs: 0,\n        };\n        break;\n\n      default:\n        throw new Error(`Unsupported provider for guardrails: ${provider}`);\n    }\n\n    // Combine results if we have both\n    if (piiToxicityResult) {\n      return {\n        allowed: providerResult.allowed && piiToxicityResult.allowed,\n        confidence: Math.min(\n          providerResult.confidence,\n          piiToxicityResult.confidence\n        ),\n        violations: [\n          ...providerResult.violations,\n          ...piiToxicityResult.violations,\n        ],\n        modifiedContent:\n          piiToxicityResult.modifiedContent || providerResult.modifiedContent,\n        processingTimeMs: Date.now() - startTime,\n      };\n    }\n\n    return {\n      ...providerResult,\n      processingTimeMs: Date.now() - startTime,\n    };\n  }\n\n  async sanitizeForLogging(\n    content: string,\n    requestId?: string\n  ): Promise<string> {\n    // Basic PII patterns für Logging\n    const piiPatterns = [\n      /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g, // Email\n      /\\b\\d{3}-\\d{2}-\\d{4}\\b/g, // SSN\n      /\\b\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}\\b/g, // Credit Card\n    ];\n\n    let sanitized = content;\n    piiPatterns.forEach((pattern) => {\n      sanitized = sanitized.replace(pattern, \"[REDACTED]\");\n    });\n\n    return sanitized;\n  }\n}\n"],"version":3}
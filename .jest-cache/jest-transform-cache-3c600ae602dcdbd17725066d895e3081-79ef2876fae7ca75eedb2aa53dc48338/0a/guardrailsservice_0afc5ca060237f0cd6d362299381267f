f6fc500701df5835923197557ee4f1e0
"use strict";
/**
 * Guardrails Service - Multi-Provider Content Safety
 *
 * Implements:
 * - Bedrock Guardrails per domain
 * - Gemini SafetySettings
 * - Llama output filters
 * - Central PII redaction
 * - Log sanitization
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.GuardrailsService = exports.BedrockGuardrailsService = void 0;
const client_bedrock_runtime_1 = require("@aws-sdk/client-bedrock-runtime");
/**
 * Bedrock Guardrails Service
 */
class BedrockGuardrailsService {
    bedrockClient;
    guardrailConfigs = {
        legal: {
            guardrailId: "legal-domain-guardrail-v1",
            guardrailVersion: "1",
            piiRedaction: true,
            toxicityThreshold: "HIGH",
            jailbreakDetection: true,
            promptAttackDetection: true,
        },
        medical: {
            guardrailId: "medical-domain-guardrail-v1",
            guardrailVersion: "1",
            piiRedaction: true,
            toxicityThreshold: "MEDIUM",
            jailbreakDetection: true,
            promptAttackDetection: true,
        },
        culinary: {
            guardrailId: "culinary-domain-guardrail-v1",
            guardrailVersion: "1",
            piiRedaction: false,
            toxicityThreshold: "HIGH",
            jailbreakDetection: false,
            promptAttackDetection: false,
        },
        general: {
            guardrailId: "general-domain-guardrail-v1",
            guardrailVersion: "1",
            piiRedaction: false,
            toxicityThreshold: "HIGH",
            jailbreakDetection: false,
            promptAttackDetection: false,
        },
    };
    constructor(region = "eu-central-1") {
        this.bedrockClient = new client_bedrock_runtime_1.BedrockRuntimeClient({ region });
    }
    async checkContent(content, domain = "general", source = "INPUT") {
        const startTime = Date.now();
        const config = this.guardrailConfigs[domain] || this.guardrailConfigs.general;
        try {
            const command = new client_bedrock_runtime_1.ApplyGuardrailCommand({
                guardrailIdentifier: config.guardrailId,
                guardrailVersion: config.guardrailVersion,
                source,
                content: [{ text: { text: content } }],
            });
            const response = await this.bedrockClient.send(command);
            const processingTimeMs = Date.now() - startTime;
            // Parse Bedrock Guardrails response
            const violations = [];
            let allowed = true;
            let confidence = 1.0;
            if (response.action === "GUARDRAIL_INTERVENED") {
                allowed = false;
                confidence = 0.0;
                // Parse assessments
                response.assessments?.forEach((assessment) => {
                    if (assessment.topicPolicy) {
                        violations.push({
                            type: "CUSTOM",
                            severity: "HIGH",
                            confidence: 0.9,
                            details: `Topic policy violation: ${assessment.topicPolicy.topics?.join(", ")}`,
                        });
                    }
                    if (assessment.contentPolicy) {
                        assessment.contentPolicy.filters?.forEach((filter) => {
                            violations.push({
                                type: this.mapContentPolicyType(filter.type),
                                severity: this.mapConfidenceToSeverity(filter.confidence),
                                confidence: filter.confidence || 0.5,
                                details: `Content policy violation: ${filter.type}`,
                            });
                        });
                    }
                    if (assessment.wordPolicy) {
                        violations.push({
                            type: "CUSTOM",
                            severity: "MEDIUM",
                            confidence: 0.8,
                            details: "Word policy violation detected",
                        });
                    }
                    if (assessment.sensitiveInformationPolicy) {
                        assessment.sensitiveInformationPolicy.piiEntities?.forEach((entity) => {
                            violations.push({
                                type: "PII",
                                severity: "HIGH",
                                confidence: 0.9,
                                details: `PII detected: ${entity.type}`,
                                position: entity.match
                                    ? {
                                        start: entity.match.start || 0,
                                        end: entity.match.end || 0,
                                    }
                                    : undefined,
                            });
                        });
                    }
                });
            }
            return {
                allowed,
                confidence,
                violations,
                modifiedContent: config.piiRedaction
                    ? await this.redactPII(content)
                    : undefined,
                processingTimeMs,
            };
        }
        catch (error) {
            console.error("Bedrock Guardrails error:", error);
            // Fail-safe: Bei Fehler blockieren wir sicherheitshalber
            return {
                allowed: false,
                confidence: 0.0,
                violations: [
                    {
                        type: "CUSTOM",
                        severity: "CRITICAL",
                        confidence: 1.0,
                        details: `Guardrails service error: ${error instanceof Error ? error.message : "Unknown error"}`,
                    },
                ],
                processingTimeMs: Date.now() - startTime,
            };
        }
    }
    mapContentPolicyType(type) {
        switch (type?.toLowerCase()) {
            case "hate":
                return "HATE_SPEECH";
            case "violence":
                return "VIOLENCE";
            case "sexual":
                return "SEXUAL";
            case "misconduct":
                return "TOXICITY";
            default:
                return "CUSTOM";
        }
    }
    mapConfidenceToSeverity(confidence) {
        if (!confidence)
            return "MEDIUM";
        if (confidence >= 0.9)
            return "CRITICAL";
        if (confidence >= 0.7)
            return "HIGH";
        if (confidence >= 0.5)
            return "MEDIUM";
        return "LOW";
    }
    async redactPII(text) {
        // Implementierung in PIIRedactionService
        return text; // Placeholder
    }
}
exports.BedrockGuardrailsService = BedrockGuardrailsService;
/**
 * Central Guardrails Service
 */
class GuardrailsService {
    bedrockGuardrails;
    piiToxicityDetector; // Will be imported dynamically
    constructor(region = "eu-central-1") {
        this.bedrockGuardrails = new BedrockGuardrailsService(region);
        this.initializePIIToxicityDetector();
    }
    async initializePIIToxicityDetector() {
        try {
            const { PIIToxicityDetectionService } = await Promise.resolve().then(() => __importStar(require("./pii-toxicity-detector")));
            this.piiToxicityDetector = new PIIToxicityDetectionService({
                enablePII: true,
                enableToxicity: true,
                enablePromptInjection: true,
                strictMode: false,
                redactionMode: "MASK",
                confidenceThreshold: 0.7,
            });
        }
        catch (error) {
            console.warn("Failed to initialize PII/Toxicity detector:", error);
        }
    }
    async checkInput(content, provider, domain = "general", requestId) {
        const startTime = Date.now();
        // First run PII/Toxicity detection for all providers
        let piiToxicityResult = null;
        if (this.piiToxicityDetector) {
            try {
                piiToxicityResult = await this.piiToxicityDetector.performSafetyCheck(content, requestId);
                // If PII/Toxicity check fails, return immediately
                if (!piiToxicityResult.allowed) {
                    return {
                        ...piiToxicityResult,
                        processingTimeMs: Date.now() - startTime,
                    };
                }
            }
            catch (error) {
                console.warn("PII/Toxicity check failed:", error);
            }
        }
        // Then run provider-specific checks
        let providerResult;
        switch (provider) {
            case "bedrock":
                providerResult = await this.bedrockGuardrails.checkContent(content, domain, "INPUT");
                break;
            case "google":
                // Für Google verwenden wir Basic Filtering + PII/Toxicity
                providerResult = {
                    allowed: true, // Gemini hat eigene Safety Settings
                    confidence: 1.0,
                    violations: [],
                    processingTimeMs: 0,
                };
                break;
            case "meta":
                // Für Meta verwenden wir Basic Filtering + PII/Toxicity
                providerResult = {
                    allowed: true,
                    confidence: 1.0,
                    violations: [],
                    processingTimeMs: 0,
                };
                break;
            default:
                throw new Error(`Unsupported provider for guardrails: ${provider}`);
        }
        // Combine results if we have both
        if (piiToxicityResult) {
            return {
                allowed: providerResult.allowed && piiToxicityResult.allowed,
                confidence: Math.min(providerResult.confidence, piiToxicityResult.confidence),
                violations: [
                    ...providerResult.violations,
                    ...piiToxicityResult.violations,
                ],
                modifiedContent: piiToxicityResult.modifiedContent || providerResult.modifiedContent,
                processingTimeMs: Date.now() - startTime,
            };
        }
        return {
            ...providerResult,
            processingTimeMs: Date.now() - startTime,
        };
    }
    async checkOutput(content, provider, domain = "general", requestId, originalResponse) {
        const startTime = Date.now();
        // First run PII/Toxicity detection for all providers
        let piiToxicityResult = null;
        if (this.piiToxicityDetector) {
            try {
                piiToxicityResult = await this.piiToxicityDetector.performSafetyCheck(content, requestId);
                // If PII/Toxicity check fails, return immediately
                if (!piiToxicityResult.allowed) {
                    return {
                        ...piiToxicityResult,
                        processingTimeMs: Date.now() - startTime,
                    };
                }
            }
            catch (error) {
                console.warn("PII/Toxicity check failed:", error);
            }
        }
        // Then run provider-specific checks
        let providerResult;
        switch (provider) {
            case "bedrock":
                providerResult = await this.bedrockGuardrails.checkContent(content, domain, "OUTPUT");
                break;
            case "google":
                // Basic Gemini safety check + PII/Toxicity
                providerResult = {
                    allowed: true,
                    confidence: 1.0,
                    violations: [],
                    processingTimeMs: 0,
                };
                break;
            case "meta":
                // Basic Llama safety check + PII/Toxicity
                providerResult = {
                    allowed: true,
                    confidence: 1.0,
                    violations: [],
                    processingTimeMs: 0,
                };
                break;
            default:
                throw new Error(`Unsupported provider for guardrails: ${provider}`);
        }
        // Combine results if we have both
        if (piiToxicityResult) {
            return {
                allowed: providerResult.allowed && piiToxicityResult.allowed,
                confidence: Math.min(providerResult.confidence, piiToxicityResult.confidence),
                violations: [
                    ...providerResult.violations,
                    ...piiToxicityResult.violations,
                ],
                modifiedContent: piiToxicityResult.modifiedContent || providerResult.modifiedContent,
                processingTimeMs: Date.now() - startTime,
            };
        }
        return {
            ...providerResult,
            processingTimeMs: Date.now() - startTime,
        };
    }
    async sanitizeForLogging(content, requestId) {
        // Basic PII patterns für Logging
        const piiPatterns = [
            /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g, // Email
            /\b\d{3}-\d{2}-\d{4}\b/g, // SSN
            /\b\d{4}[\s-]?\d{4}[\s-]?\d{4}[\s-]?\d{4}\b/g, // Credit Card
        ];
        let sanitized = content;
        piiPatterns.forEach((pattern) => {
            sanitized = sanitized.replace(pattern, "[REDACTED]");
        });
        return sanitized;
    }
}
exports.GuardrailsService = GuardrailsService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
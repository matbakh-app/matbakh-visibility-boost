{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/__tests__/drift-quality-integration.test.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/__tests__/drift-quality-integration.test.ts"],"sourcesContent":["/**\n * Tests for Drift Detection and Quality Monitoring Integration Service\n */\n\nimport {\n  CloudWatchClient,\n  PutMetricDataCommand,\n} from \"@aws-sdk/client-cloudwatch\";\nimport { SageMakerClient } from \"@aws-sdk/client-sagemaker\";\nimport { mockClient } from \"aws-sdk-client-mock\";\nimport { DriftMetrics } from \"../drift-monitor\";\nimport { DriftQualityIntegration } from \"../drift-quality-integration\";\n\n// Mock AWS clients\nconst cloudWatchMock = mockClient(CloudWatchClient);\nconst sageMakerMock = mockClient(SageMakerClient);\n\ndescribe(\"DriftQualityIntegration\", () => {\n  let integration: DriftQualityIntegration;\n  let mockCloudWatch: CloudWatchClient;\n  let mockSageMaker: SageMakerClient;\n\n  const mockBaselineMetrics: DriftMetrics = {\n    timestamp: new Date(\"2025-01-01T00:00:00Z\"),\n    modelId: \"test-model-1\",\n    provider: \"bedrock\",\n    dataDrift: {\n      score: 0.1,\n      threshold: 0.3,\n      features: [\n        {\n          name: \"input_length\",\n          driftScore: 0.05,\n          baseline: 100,\n          current: 105,\n        },\n      ],\n    },\n    promptDrift: {\n      scoreDistribution: {\n        mean: 0.75,\n        std: 0.15,\n        p50: 0.74,\n        p95: 0.95,\n        p99: 0.98,\n      },\n      baseline: {\n        mean: 0.75,\n        std: 0.15,\n        p50: 0.74,\n        p95: 0.95,\n        p99: 0.98,\n      },\n      driftScore: 0.05,\n    },\n    performanceRegression: {\n      latency: {\n        current: 1000,\n        baseline: 1000,\n        regressionScore: 0.0,\n      },\n      accuracy: {\n        current: 0.9,\n        baseline: 0.9,\n        regressionScore: 0.0,\n      },\n      errorRate: {\n        current: 0.01,\n        baseline: 0.01,\n        regressionScore: 0.0,\n      },\n    },\n    qualityMetrics: {\n      overallScore: 0.85,\n      toxicityScore: 0.05,\n      coherenceScore: 0.9,\n      relevanceScore: 0.88,\n      factualityScore: 0.82,\n    },\n  };\n\n  beforeEach(() => {\n    cloudWatchMock.reset();\n    sageMakerMock.reset();\n\n    // Create mock clients with proper configuration\n    mockCloudWatch = {\n      send: jest.fn(),\n    } as any;\n\n    mockSageMaker = {\n      send: jest.fn(),\n    } as any;\n\n    integration = new DriftQualityIntegration(mockCloudWatch, mockSageMaker);\n  });\n\n  describe(\"constructor\", () => {\n    it(\"should initialize with AWS clients\", () => {\n      expect(integration).toBeInstanceOf(DriftQualityIntegration);\n    });\n\n    it(\"should initialize with default clients when none provided\", () => {\n      const defaultIntegration = new DriftQualityIntegration();\n      expect(defaultIntegration).toBeInstanceOf(DriftQualityIntegration);\n    });\n  });\n\n  describe(\"initializeModelMonitoring\", () => {\n    beforeEach(() => {\n      cloudWatchMock.on(PutMetricDataCommand).resolves({});\n    });\n\n    it(\"should initialize monitoring for a model\", async () => {\n      await integration.initializeModelMonitoring(\n        \"test-model-1\",\n        mockBaselineMetrics\n      );\n\n      // Should have published baseline metrics\n      expect(cloudWatchMock.calls()).toHaveLength(1);\n      const call = cloudWatchMock.call(0);\n      expect(call.args[0].input).toMatchObject({\n        Namespace: \"AI/Drift/Baseline\",\n      });\n    });\n\n    it(\"should initialize monitoring with SageMaker configuration\", async () => {\n      const sageMakerConfig = {\n        endpointName: \"test-endpoint\",\n        baselineDataUri: \"s3://bucket/baseline-data\",\n      };\n\n      await integration.initializeModelMonitoring(\n        \"test-model-1\",\n        mockBaselineMetrics,\n        sageMakerConfig\n      );\n\n      // Should have set up SageMaker monitoring\n      expect(cloudWatchMock.calls()).toHaveLength(1);\n    });\n  });\n\n  describe(\"monitorInteraction\", () => {\n    beforeEach(async () => {\n      cloudWatchMock.on(PutMetricDataCommand).resolves({});\n      await integration.initializeModelMonitoring(\n        \"test-model-1\",\n        mockBaselineMetrics\n      );\n    });\n\n    it(\"should monitor AI interaction with integrated analysis\", async () => {\n      const currentMetrics: DriftMetrics = {\n        ...mockBaselineMetrics,\n        timestamp: new Date(),\n        dataDrift: {\n          ...mockBaselineMetrics.dataDrift,\n          score: 0.2, // Slight drift\n        },\n      };\n\n      const result = await integration.monitorInteraction(\n        \"test-model-1\",\n        \"bedrock\",\n        \"req-123\",\n        \"What is the capital of France?\",\n        \"The capital of France is Paris.\",\n        {\n          latency: 1200,\n          tokenCount: 150,\n          cost: 0.05,\n        },\n        currentMetrics\n      );\n\n      expect(result).toMatchObject({\n        modelId: \"test-model-1\",\n        provider: \"bedrock\",\n        driftMetrics: currentMetrics,\n        qualityAssessment: expect.objectContaining({\n          modelId: \"test-model-1\",\n          provider: \"bedrock\",\n          requestId: \"req-123\",\n        }),\n        correlationAnalysis: expect.objectContaining({\n          driftQualityCorrelation: expect.any(Number),\n          performanceImpact: expect.any(Number),\n          userSatisfactionImpact: expect.any(Number),\n          riskScore: expect.any(Number),\n        }),\n        recommendations: expect.objectContaining({\n          priority: expect.stringMatching(/low|medium|high|critical/),\n          actions: expect.any(Array),\n        }),\n      });\n    });\n\n    it(\"should include user feedback in analysis\", async () => {\n      const currentMetrics: DriftMetrics = {\n        ...mockBaselineMetrics,\n        timestamp: new Date(),\n      };\n\n      const userFeedback = {\n        rating: 4,\n        helpful: true,\n        accurate: true,\n        appropriate: true,\n      };\n\n      const result = await integration.monitorInteraction(\n        \"test-model-1\",\n        \"bedrock\",\n        \"req-123\",\n        \"Test input\",\n        \"Test output\",\n        {\n          latency: 1000,\n          tokenCount: 100,\n          cost: 0.03,\n          userFeedback,\n        },\n        currentMetrics\n      );\n\n      expect(result.qualityAssessment.userFeedback).toEqual(userFeedback);\n      expect(\n        result.correlationAnalysis.userSatisfactionImpact\n      ).toBeGreaterThanOrEqual(0);\n    });\n\n    it(\"should generate appropriate recommendations based on risk\", async () => {\n      const highRiskMetrics: DriftMetrics = {\n        ...mockBaselineMetrics,\n        timestamp: new Date(),\n        dataDrift: {\n          ...mockBaselineMetrics.dataDrift,\n          score: 0.6, // High drift\n        },\n        performanceRegression: {\n          ...mockBaselineMetrics.performanceRegression,\n          latency: {\n            current: 2000,\n            baseline: 1000,\n            regressionScore: 1.0, // 100% regression\n          },\n        },\n      };\n\n      const result = await integration.monitorInteraction(\n        \"test-model-1\",\n        \"bedrock\",\n        \"req-123\",\n        \"Test input\",\n        \"Test output\",\n        {\n          latency: 2000,\n          tokenCount: 100,\n          cost: 0.03,\n        },\n        highRiskMetrics\n      );\n\n      expect(result.recommendations.priority).toBe(\"critical\");\n      expect(result.recommendations.actions.length).toBeGreaterThan(0);\n      expect(\n        result.recommendations.actions.some(\n          (action) => action.type === \"immediate\"\n        )\n      ).toBe(true);\n    });\n\n    it(\"should publish integrated metrics to CloudWatch\", async () => {\n      const currentMetrics: DriftMetrics = {\n        ...mockBaselineMetrics,\n        timestamp: new Date(),\n      };\n\n      await integration.monitorInteraction(\n        \"test-model-1\",\n        \"bedrock\",\n        \"req-123\",\n        \"Test input\",\n        \"Test output\",\n        {\n          latency: 1000,\n          tokenCount: 100,\n          cost: 0.03,\n        },\n        currentMetrics\n      );\n\n      // Should have multiple CloudWatch calls: baseline + current drift + quality + integrated\n      const integratedCall = cloudWatchMock\n        .calls()\n        .find((call) => call.args[0].input.Namespace === \"AI/Integrated\");\n      expect(integratedCall).toBeDefined();\n    });\n\n    it(\"should maintain monitoring history\", async () => {\n      const currentMetrics: DriftMetrics = {\n        ...mockBaselineMetrics,\n        timestamp: new Date(),\n      };\n\n      // Add multiple interactions\n      for (let i = 0; i < 3; i++) {\n        await integration.monitorInteraction(\n          \"test-model-1\",\n          \"bedrock\",\n          `req-${i}`,\n          \"Test input\",\n          \"Test output\",\n          {\n            latency: 1000 + i * 100,\n            tokenCount: 100,\n            cost: 0.03,\n          },\n          currentMetrics\n        );\n      }\n\n      // History should be maintained (tested indirectly through dashboard data)\n      const dashboardData = await integration.getDashboardData(\"test-model-1\", {\n        start: new Date(Date.now() - 60000),\n        end: new Date(),\n      });\n\n      expect(dashboardData.trends.drift.length).toBe(3);\n      expect(dashboardData.trends.quality.length).toBe(3);\n    });\n  });\n\n  describe(\"getDashboardData\", () => {\n    beforeEach(async () => {\n      cloudWatchMock.on(PutMetricDataCommand).resolves({});\n      await integration.initializeModelMonitoring(\n        \"test-model-1\",\n        mockBaselineMetrics\n      );\n    });\n\n    it(\"should generate comprehensive dashboard data\", async () => {\n      const currentMetrics: DriftMetrics = {\n        ...mockBaselineMetrics,\n        timestamp: new Date(),\n      };\n\n      // Add some monitoring data\n      await integration.monitorInteraction(\n        \"test-model-1\",\n        \"bedrock\",\n        \"req-123\",\n        \"Test input\",\n        \"Test output\",\n        {\n          latency: 1000,\n          tokenCount: 100,\n          cost: 0.03,\n        },\n        currentMetrics\n      );\n\n      const dashboardData = await integration.getDashboardData(\"test-model-1\", {\n        start: new Date(Date.now() - 60000),\n        end: new Date(),\n      });\n\n      expect(dashboardData).toMatchObject({\n        modelId: \"test-model-1\",\n        timeRange: expect.objectContaining({\n          start: expect.any(Date),\n          end: expect.any(Date),\n        }),\n        currentStatus: expect.objectContaining({\n          overallHealth: expect.stringMatching(/healthy|warning|critical/),\n          driftStatus: expect.stringMatching(/stable|warning|critical/),\n          qualityStatus: expect.stringMatching(/good|warning|poor/),\n          performanceStatus: expect.stringMatching(/optimal|degraded|poor/),\n        }),\n        keyMetrics: expect.objectContaining({\n          overallScore: expect.any(Number),\n          driftScore: expect.any(Number),\n          qualityScore: expect.any(Number),\n          performanceScore: expect.any(Number),\n          userSatisfactionScore: expect.any(Number),\n        }),\n        trends: expect.objectContaining({\n          drift: expect.any(Array),\n          quality: expect.any(Array),\n          performance: expect.any(Array),\n          userSatisfaction: expect.any(Array),\n        }),\n        activeAlerts: expect.any(Array),\n        topRecommendations: expect.any(Array),\n      });\n    });\n\n    it(\"should throw error when no data found\", async () => {\n      await expect(\n        integration.getDashboardData(\"nonexistent-model\", {\n          start: new Date(Date.now() - 60000),\n          end: new Date(),\n        })\n      ).rejects.toThrow(\"No monitoring data found\");\n    });\n\n    it(\"should calculate correct status based on metrics\", async () => {\n      // Add interaction with poor quality and high drift\n      const poorMetrics: DriftMetrics = {\n        ...mockBaselineMetrics,\n        timestamp: new Date(),\n        dataDrift: {\n          ...mockBaselineMetrics.dataDrift,\n          score: 0.6, // Critical drift\n        },\n      };\n\n      await integration.monitorInteraction(\n        \"test-model-1\",\n        \"bedrock\",\n        \"req-123\",\n        \"Test input\",\n        \"hate toxic harmful offensive\", // Poor quality output\n        {\n          latency: 3000, // High latency\n          tokenCount: 100,\n          cost: 0.03,\n        },\n        poorMetrics\n      );\n\n      const dashboardData = await integration.getDashboardData(\"test-model-1\", {\n        start: new Date(Date.now() - 60000),\n        end: new Date(),\n      });\n\n      expect(dashboardData.currentStatus.overallHealth).toBe(\"critical\");\n      expect(dashboardData.currentStatus.driftStatus).toBe(\"critical\");\n    });\n  });\n\n  describe(\"getQualityTrendsWithDrift\", () => {\n    beforeEach(async () => {\n      cloudWatchMock.on(PutMetricDataCommand).resolves({});\n      await integration.initializeModelMonitoring(\n        \"test-model-1\",\n        mockBaselineMetrics\n      );\n    });\n\n    it(\"should analyze quality trends with drift correlation\", async () => {\n      const now = new Date();\n      const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);\n\n      // Add interactions with varying drift and quality\n      const interactions = [\n        { drift: 0.1, quality: \"good\" },\n        { drift: 0.3, quality: \"medium\" },\n        { drift: 0.5, quality: \"poor\" },\n      ];\n\n      for (const [index, { drift }] of interactions.entries()) {\n        const metrics: DriftMetrics = {\n          ...mockBaselineMetrics,\n          timestamp: new Date(oneHourAgo.getTime() + index * 20 * 60 * 1000),\n          dataDrift: {\n            ...mockBaselineMetrics.dataDrift,\n            score: drift,\n          },\n        };\n\n        await integration.monitorInteraction(\n          \"test-model-1\",\n          \"bedrock\",\n          `req-${index}`,\n          \"Test input\",\n          \"Test output\",\n          {\n            latency: 1000,\n            tokenCount: 100,\n            cost: 0.03,\n          },\n          metrics\n        );\n      }\n\n      const trendsWithDrift = await integration.getQualityTrendsWithDrift(\n        \"test-model-1\",\n        {\n          start: oneHourAgo,\n          end: now,\n        }\n      );\n\n      expect(trendsWithDrift).toMatchObject({\n        modelId: \"test-model-1\",\n        driftCorrelation: expect.any(Number),\n        trends: expect.objectContaining({\n          overallQuality: expect.objectContaining({\n            trend: expect.stringMatching(/improving|stable|degrading/),\n          }),\n        }),\n      });\n\n      // Drift correlation should be negative (higher drift = lower quality)\n      expect(trendsWithDrift.driftCorrelation).toBeLessThanOrEqual(0);\n    });\n  });\n\n  describe(\"alert handling\", () => {\n    beforeEach(async () => {\n      cloudWatchMock.on(PutMetricDataCommand).resolves({});\n      await integration.initializeModelMonitoring(\n        \"test-model-1\",\n        mockBaselineMetrics\n      );\n    });\n\n    it(\"should register and handle alerts from both monitors\", async () => {\n      const alertCallback = jest.fn().mockResolvedValue(undefined);\n      integration.onAlert(alertCallback);\n\n      // Trigger alerts through poor quality interaction\n      const poorMetrics: DriftMetrics = {\n        ...mockBaselineMetrics,\n        timestamp: new Date(),\n        dataDrift: {\n          ...mockBaselineMetrics.dataDrift,\n          score: 0.6, // Critical drift\n        },\n      };\n\n      await integration.monitorInteraction(\n        \"test-model-1\",\n        \"bedrock\",\n        \"req-123\",\n        \"Test input\",\n        \"hate toxic harmful offensive\", // Poor quality\n        {\n          latency: 1000,\n          tokenCount: 100,\n          cost: 0.03,\n        },\n        poorMetrics\n      );\n\n      expect(alertCallback).toHaveBeenCalled();\n    });\n\n    it(\"should handle alert callback errors gracefully\", async () => {\n      const failingCallback = jest\n        .fn()\n        .mockRejectedValue(new Error(\"Callback failed\"));\n      integration.onAlert(failingCallback);\n\n      // Should not throw despite callback failure\n      const poorMetrics: DriftMetrics = {\n        ...mockBaselineMetrics,\n        timestamp: new Date(),\n        dataDrift: {\n          ...mockBaselineMetrics.dataDrift,\n          score: 0.6,\n        },\n      };\n\n      await expect(\n        integration.monitorInteraction(\n          \"test-model-1\",\n          \"bedrock\",\n          \"req-123\",\n          \"Test input\",\n          \"hate toxic\",\n          {\n            latency: 1000,\n            tokenCount: 100,\n            cost: 0.03,\n          },\n          poorMetrics\n        )\n      ).resolves.not.toThrow();\n    });\n  });\n\n  describe(\"correlation analysis\", () => {\n    it(\"should calculate meaningful correlations\", async () => {\n      cloudWatchMock.on(PutMetricDataCommand).resolves({});\n      await integration.initializeModelMonitoring(\n        \"test-model-1\",\n        mockBaselineMetrics\n      );\n\n      const highRiskMetrics: DriftMetrics = {\n        ...mockBaselineMetrics,\n        timestamp: new Date(),\n        dataDrift: {\n          ...mockBaselineMetrics.dataDrift,\n          score: 0.8, // High drift\n        },\n        performanceRegression: {\n          ...mockBaselineMetrics.performanceRegression,\n          latency: {\n            current: 3000,\n            baseline: 1000,\n            regressionScore: 2.0, // 200% regression\n          },\n        },\n      };\n\n      const result = await integration.monitorInteraction(\n        \"test-model-1\",\n        \"bedrock\",\n        \"req-123\",\n        \"Test input\",\n        \"Test output\",\n        {\n          latency: 3000,\n          tokenCount: 100,\n          cost: 0.03,\n          userFeedback: {\n            rating: 1, // Poor user rating\n            helpful: false,\n            accurate: false,\n            appropriate: false,\n          },\n        },\n        highRiskMetrics\n      );\n\n      expect(result.correlationAnalysis.riskScore).toBeGreaterThan(0.5);\n      expect(result.correlationAnalysis.performanceImpact).toBeGreaterThan(0.5);\n      expect(result.correlationAnalysis.userSatisfactionImpact).toBeGreaterThan(\n        0.5\n      );\n    });\n  });\n\n  describe(\"recommendation generation\", () => {\n    beforeEach(async () => {\n      cloudWatchMock.on(PutMetricDataCommand).resolves({});\n      await integration.initializeModelMonitoring(\n        \"test-model-1\",\n        mockBaselineMetrics\n      );\n    });\n\n    it(\"should generate appropriate recommendations for different scenarios\", async () => {\n      const scenarios = [\n        {\n          name: \"high data drift\",\n          metrics: {\n            ...mockBaselineMetrics,\n            dataDrift: { ...mockBaselineMetrics.dataDrift, score: 0.6 },\n          },\n          expectedActions: [\"training data\"],\n        },\n        {\n          name: \"high prompt drift\",\n          metrics: {\n            ...mockBaselineMetrics,\n            promptDrift: {\n              ...mockBaselineMetrics.promptDrift,\n              driftScore: 0.5,\n            },\n          },\n          expectedActions: [\"prompt templates\"],\n        },\n        {\n          name: \"performance regression\",\n          metrics: {\n            ...mockBaselineMetrics,\n            performanceRegression: {\n              ...mockBaselineMetrics.performanceRegression,\n              latency: { current: 2000, baseline: 1000, regressionScore: 1.0 },\n            },\n          },\n          expectedActions: [\"performance bottlenecks\"],\n        },\n      ];\n\n      for (const scenario of scenarios) {\n        const result = await integration.monitorInteraction(\n          \"test-model-1\",\n          \"bedrock\",\n          `req-${scenario.name}`,\n          \"Test input\",\n          \"Test output\",\n          {\n            latency: 1000,\n            tokenCount: 100,\n            cost: 0.03,\n          },\n          { ...scenario.metrics, timestamp: new Date() }\n        );\n\n        expect(result.recommendations.actions.length).toBeGreaterThan(0);\n\n        // Check if expected action types are present\n        const actionDescriptions = result.recommendations.actions.map((a) =>\n          a.description.toLowerCase()\n        );\n        expect(\n          scenario.expectedActions.some((expected) =>\n            actionDescriptions.some((desc) => desc.includes(expected))\n          )\n        ).toBe(true);\n      }\n    });\n  });\n\n  describe(\"error handling\", () => {\n    it(\"should handle CloudWatch errors gracefully\", async () => {\n      cloudWatchMock\n        .on(PutMetricDataCommand)\n        .rejects(new Error(\"CloudWatch error\"));\n\n      await expect(\n        integration.initializeModelMonitoring(\n          \"test-model-1\",\n          mockBaselineMetrics\n        )\n      ).rejects.toThrow(\"CloudWatch error\");\n    });\n  });\n\n  describe(\"integration scenarios\", () => {\n    beforeEach(async () => {\n      cloudWatchMock.on(PutMetricDataCommand).resolves({});\n      await integration.initializeModelMonitoring(\n        \"test-model-1\",\n        mockBaselineMetrics\n      );\n    });\n\n    it(\"should handle complete monitoring workflow\", async () => {\n      const alertCallback = jest.fn().mockResolvedValue(undefined);\n      integration.onAlert(alertCallback);\n\n      // Simulate a series of interactions with degrading quality\n      const interactions = [\n        {\n          drift: 0.1,\n          output: \"High quality response with good coherence and relevance.\",\n        },\n        { drift: 0.3, output: \"Medium quality response with some issues.\" },\n        { drift: 0.6, output: \"hate toxic harmful offensive always never\" }, // Poor quality\n      ];\n\n      for (const [index, { drift, output }] of interactions.entries()) {\n        const metrics: DriftMetrics = {\n          ...mockBaselineMetrics,\n          timestamp: new Date(Date.now() + index * 1000),\n          dataDrift: {\n            ...mockBaselineMetrics.dataDrift,\n            score: drift,\n          },\n        };\n\n        await integration.monitorInteraction(\n          \"test-model-1\",\n          \"bedrock\",\n          `req-${index}`,\n          \"Test input\",\n          output,\n          {\n            latency: 1000 + index * 500,\n            tokenCount: 100,\n            cost: 0.03,\n          },\n          metrics\n        );\n      }\n\n      // Get dashboard data\n      const dashboardData = await integration.getDashboardData(\"test-model-1\", {\n        start: new Date(Date.now() - 60000),\n        end: new Date(),\n      });\n\n      expect(dashboardData.currentStatus.overallHealth).toBe(\"critical\");\n      expect(dashboardData.trends.drift.length).toBe(3);\n      expect(dashboardData.trends.quality.length).toBe(3);\n      expect(dashboardData.topRecommendations.length).toBeGreaterThan(0);\n\n      // Should have received alerts\n      expect(alertCallback).toHaveBeenCalled();\n\n      // Get quality trends with drift correlation\n      const trendsWithDrift = await integration.getQualityTrendsWithDrift(\n        \"test-model-1\",\n        {\n          start: new Date(Date.now() - 60000),\n          end: new Date(),\n        }\n      );\n\n      expect(trendsWithDrift.driftCorrelation).toBeDefined();\n      expect(trendsWithDrift.trends.overallQuality.trend).toBe(\"degrading\");\n    });\n  });\n});\n"],"version":3}
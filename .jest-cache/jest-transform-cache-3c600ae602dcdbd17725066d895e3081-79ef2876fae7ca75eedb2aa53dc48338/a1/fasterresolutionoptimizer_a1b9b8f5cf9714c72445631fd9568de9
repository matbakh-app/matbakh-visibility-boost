e141b87958f690d37055a83a3f0abdec
"use strict";

/**
 * Faster Resolution Optimizer - Speed Enhancement for Implementation Resolution
 *
 * This module optimizes the speed of resolving incomplete implementations by:
 * - Parallel processing of multiple gaps
 * - Intelligent caching of resolution patterns
 * - Predictive pre-loading of common fixes
 * - Batch processing of similar issues
 * - Real-time performance monitoring and optimization
 */
/* istanbul ignore next */
function cov_10u62psp49() {
  var path = "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/faster-resolution-optimizer.ts";
  var hash = "74ae1af5b4ee98a2f02d28a972b5bb7091088918";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/faster-resolution-optimizer.ts",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 62
        }
      },
      "1": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 13,
          column: 77
        }
      },
      "2": {
        start: {
          line: 14,
          column: 16
        },
        end: {
          line: 14,
          column: 32
        }
      },
      "3": {
        start: {
          line: 15,
          column: 27
        },
        end: {
          line: 15,
          column: 56
        }
      },
      "4": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 48
        }
      },
      "5": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 43
        }
      },
      "6": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 46
        }
      },
      "7": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 34
        }
      },
      "8": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 47
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 55
        }
      },
      "10": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 51
        }
      },
      "11": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 68
        }
      },
      "12": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 248
        }
      },
      "13": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 58
        }
      },
      "14": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "15": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 46
        }
      },
      "16": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 38,
          column: 13
        }
      },
      "17": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 55
        }
      },
      "18": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 84,
          column: 11
        }
      },
      "19": {
        start: {
          line: 46,
          column: 30
        },
        end: {
          line: 46,
          column: 40
        }
      },
      "20": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 83,
          column: 13
        }
      },
      "21": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 51,
          column: 17
        }
      },
      "22": {
        start: {
          line: 50,
          column: 20
        },
        end: {
          line: 50,
          column: 79
        }
      },
      "23": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 105
        }
      },
      "24": {
        start: {
          line: 54,
          column: 36
        },
        end: {
          line: 54,
          column: 82
        }
      },
      "25": {
        start: {
          line: 56,
          column: 42
        },
        end: {
          line: 56,
          column: 94
        }
      },
      "26": {
        start: {
          line: 58,
          column: 38
        },
        end: {
          line: 58,
          column: 123
        }
      },
      "27": {
        start: {
          line: 58,
          column: 59
        },
        end: {
          line: 58,
          column: 122
        }
      },
      "28": {
        start: {
          line: 58,
          column: 95
        },
        end: {
          line: 58,
          column: 121
        }
      },
      "29": {
        start: {
          line: 59,
          column: 40
        },
        end: {
          line: 59,
          column: 113
        }
      },
      "30": {
        start: {
          line: 61,
          column: 35
        },
        end: {
          line: 61,
          column: 77
        }
      },
      "31": {
        start: {
          line: 63,
          column: 34
        },
        end: {
          line: 63,
          column: 56
        }
      },
      "32": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 63
        }
      },
      "33": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 65,
          column: 87
        }
      },
      "34": {
        start: {
          line: 67,
          column: 37
        },
        end: {
          line: 67,
          column: 56
        }
      },
      "35": {
        start: {
          line: 68,
          column: 42
        },
        end: {
          line: 68,
          column: 91
        }
      },
      "36": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 69,
          column: 129
        }
      },
      "37": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 74,
          column: 18
        }
      },
      "38": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 77,
          column: 95
        }
      },
      "39": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 82,
          column: 18
        }
      },
      "40": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 133,
          column: 11
        }
      },
      "41": {
        start: {
          line: 91,
          column: 28
        },
        end: {
          line: 91,
          column: 30
        }
      },
      "42": {
        start: {
          line: 92,
          column: 35
        },
        end: {
          line: 92,
          column: 37
        }
      },
      "43": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 108,
          column: 13
        }
      },
      "44": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 104,
          column: 17
        }
      },
      "45": {
        start: {
          line: 97,
          column: 45
        },
        end: {
          line: 97,
          column: 79
        }
      },
      "46": {
        start: {
          line: 98,
          column: 20
        },
        end: {
          line: 98,
          column: 54
        }
      },
      "47": {
        start: {
          line: 100,
          column: 34
        },
        end: {
          line: 100,
          column: 106
        }
      },
      "48": {
        start: {
          line: 100,
          column: 66
        },
        end: {
          line: 100,
          column: 105
        }
      },
      "49": {
        start: {
          line: 101,
          column: 20
        },
        end: {
          line: 103,
          column: 21
        }
      },
      "50": {
        start: {
          line: 102,
          column: 24
        },
        end: {
          line: 102,
          column: 56
        }
      },
      "51": {
        start: {
          line: 106,
          column: 37
        },
        end: {
          line: 106,
          column: 79
        }
      },
      "52": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 107,
          column: 50
        }
      },
      "53": {
        start: {
          line: 110,
          column: 35
        },
        end: {
          line: 110,
          column: 132
        }
      },
      "54": {
        start: {
          line: 110,
          column: 56
        },
        end: {
          line: 110,
          column: 131
        }
      },
      "55": {
        start: {
          line: 110,
          column: 85
        },
        end: {
          line: 110,
          column: 130
        }
      },
      "56": {
        start: {
          line: 110,
          column: 108
        },
        end: {
          line: 110,
          column: 129
        }
      },
      "57": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 128,
          column: 13
        }
      },
      "58": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 121,
          column: 17
        }
      },
      "59": {
        start: {
          line: 114,
          column: 45
        },
        end: {
          line: 114,
          column: 79
        }
      },
      "60": {
        start: {
          line: 115,
          column: 20
        },
        end: {
          line: 115,
          column: 54
        }
      },
      "61": {
        start: {
          line: 117,
          column: 34
        },
        end: {
          line: 117,
          column: 106
        }
      },
      "62": {
        start: {
          line: 117,
          column: 66
        },
        end: {
          line: 117,
          column: 105
        }
      },
      "63": {
        start: {
          line: 118,
          column: 20
        },
        end: {
          line: 120,
          column: 21
        }
      },
      "64": {
        start: {
          line: 119,
          column: 24
        },
        end: {
          line: 119,
          column: 56
        }
      },
      "65": {
        start: {
          line: 123,
          column: 39
        },
        end: {
          line: 123,
          column: 71
        }
      },
      "66": {
        start: {
          line: 124,
          column: 16
        },
        end: {
          line: 127,
          column: 17
        }
      },
      "67": {
        start: {
          line: 125,
          column: 46
        },
        end: {
          line: 125,
          column: 95
        }
      },
      "68": {
        start: {
          line: 126,
          column: 20
        },
        end: {
          line: 126,
          column: 86
        }
      },
      "69": {
        start: {
          line: 126,
          column: 75
        },
        end: {
          line: 126,
          column: 83
        }
      },
      "70": {
        start: {
          line: 130,
          column: 37
        },
        end: {
          line: 130,
          column: 70
        }
      },
      "71": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 53
        }
      },
      "72": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 27
        }
      },
      "73": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 179,
          column: 11
        }
      },
      "74": {
        start: {
          line: 140,
          column: 30
        },
        end: {
          line: 140,
          column: 40
        }
      },
      "75": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 178,
          column: 13
        }
      },
      "76": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 142,
          column: 130
        }
      },
      "77": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 172,
          column: 17
        }
      },
      "78": {
        start: {
          line: 145,
          column: 37
        },
        end: {
          line: 150,
          column: 22
        }
      },
      "79": {
        start: {
          line: 146,
          column: 47
        },
        end: {
          line: 146,
          column: 79
        }
      },
      "80": {
        start: {
          line: 147,
          column: 24
        },
        end: {
          line: 149,
          column: 87
        }
      },
      "81": {
        start: {
          line: 151,
          column: 36
        },
        end: {
          line: 151,
          column: 63
        }
      },
      "82": {
        start: {
          line: 153,
          column: 38
        },
        end: {
          line: 153,
          column: 60
        }
      },
      "83": {
        start: {
          line: 154,
          column: 52
        },
        end: {
          line: 154,
          column: 77
        }
      },
      "84": {
        start: {
          line: 155,
          column: 38
        },
        end: {
          line: 156,
          column: 27
        }
      },
      "85": {
        start: {
          line: 157,
          column: 20
        },
        end: {
          line: 158,
          column: 81
        }
      },
      "86": {
        start: {
          line: 159,
          column: 20
        },
        end: {
          line: 159,
          column: 35
        }
      },
      "87": {
        start: {
          line: 163,
          column: 36
        },
        end: {
          line: 163,
          column: 38
        }
      },
      "88": {
        start: {
          line: 164,
          column: 20
        },
        end: {
          line: 170,
          column: 21
        }
      },
      "89": {
        start: {
          line: 165,
          column: 47
        },
        end: {
          line: 165,
          column: 79
        }
      },
      "90": {
        start: {
          line: 166,
          column: 39
        },
        end: {
          line: 168,
          column: 86
        }
      },
      "91": {
        start: {
          line: 169,
          column: 24
        },
        end: {
          line: 169,
          column: 45
        }
      },
      "92": {
        start: {
          line: 171,
          column: 20
        },
        end: {
          line: 171,
          column: 35
        }
      },
      "93": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 175,
          column: 120
        }
      },
      "94": {
        start: {
          line: 177,
          column: 16
        },
        end: {
          line: 177,
          column: 114
        }
      },
      "95": {
        start: {
          line: 177,
          column: 47
        },
        end: {
          line: 177,
          column: 112
        }
      },
      "96": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 225,
          column: 11
        }
      },
      "97": {
        start: {
          line: 186,
          column: 30
        },
        end: {
          line: 186,
          column: 40
        }
      },
      "98": {
        start: {
          line: 187,
          column: 33
        },
        end: {
          line: 187,
          column: 60
        }
      },
      "99": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 224,
          column: 13
        }
      },
      "100": {
        start: {
          line: 190,
          column: 38
        },
        end: {
          line: 190,
          column: 67
        }
      },
      "101": {
        start: {
          line: 191,
          column: 16
        },
        end: {
          line: 194,
          column: 17
        }
      },
      "102": {
        start: {
          line: 192,
          column: 20
        },
        end: {
          line: 192,
          column: 105
        }
      },
      "103": {
        start: {
          line: 193,
          column: 20
        },
        end: {
          line: 193,
          column: 89
        }
      },
      "104": {
        start: {
          line: 196,
          column: 42
        },
        end: {
          line: 210,
          column: 17
        }
      },
      "105": {
        start: {
          line: 211,
          column: 33
        },
        end: {
          line: 211,
          column: 104
        }
      },
      "106": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 218,
          column: 17
        }
      },
      "107": {
        start: {
          line: 213,
          column: 35
        },
        end: {
          line: 213,
          column: 129
        }
      },
      "108": {
        start: {
          line: 215,
          column: 43
        },
        end: {
          line: 215,
          column: 65
        }
      },
      "109": {
        start: {
          line: 216,
          column: 20
        },
        end: {
          line: 216,
          column: 62
        }
      },
      "110": {
        start: {
          line: 217,
          column: 20
        },
        end: {
          line: 217,
          column: 34
        }
      },
      "111": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 219,
          column: 91
        }
      },
      "112": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 222,
          column: 119
        }
      },
      "113": {
        start: {
          line: 223,
          column: 16
        },
        end: {
          line: 223,
          column: 83
        }
      },
      "114": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 256,
          column: 11
        }
      },
      "115": {
        start: {
          line: 232,
          column: 34
        },
        end: {
          line: 232,
          column: 36
        }
      },
      "116": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 253,
          column: 13
        }
      },
      "117": {
        start: {
          line: 234,
          column: 32
        },
        end: {
          line: 234,
          column: 61
        }
      },
      "118": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 252,
          column: 17
        }
      },
      "119": {
        start: {
          line: 236,
          column: 43
        },
        end: {
          line: 236,
          column: 75
        }
      },
      "120": {
        start: {
          line: 237,
          column: 20
        },
        end: {
          line: 251,
          column: 21
        }
      },
      "121": {
        start: {
          line: 238,
          column: 24
        },
        end: {
          line: 250,
          column: 25
        }
      },
      "122": {
        start: {
          line: 239,
          column: 43
        },
        end: {
          line: 239,
          column: 105
        }
      },
      "123": {
        start: {
          line: 240,
          column: 28
        },
        end: {
          line: 240,
          column: 55
        }
      },
      "124": {
        start: {
          line: 242,
          column: 28
        },
        end: {
          line: 246,
          column: 86
        }
      },
      "125": {
        start: {
          line: 249,
          column: 28
        },
        end: {
          line: 249,
          column: 132
        }
      },
      "126": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 254,
          column: 106
        }
      },
      "127": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 33
        }
      },
      "128": {
        start: {
          line: 262,
          column: 23
        },
        end: {
          line: 262,
          column: 25
        }
      },
      "129": {
        start: {
          line: 263,
          column: 27
        },
        end: {
          line: 263,
          column: 36
        }
      },
      "130": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 271,
          column: 11
        }
      },
      "131": {
        start: {
          line: 266,
          column: 24
        },
        end: {
          line: 266,
          column: 53
        }
      },
      "132": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 269,
          column: 13
        }
      },
      "133": {
        start: {
          line: 268,
          column: 16
        },
        end: {
          line: 268,
          column: 40
        }
      },
      "134": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 270,
          column: 42
        }
      },
      "135": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 286,
          column: 11
        }
      },
      "136": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 285,
          column: 13
        }
      },
      "137": {
        start: {
          line: 275,
          column: 30
        },
        end: {
          line: 283,
          column: 17
        }
      },
      "138": {
        start: {
          line: 284,
          column: 16
        },
        end: {
          line: 284,
          column: 35
        }
      },
      "139": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 287,
          column: 100
        }
      },
      "140": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 288,
          column: 22
        }
      },
      "141": {
        start: {
          line: 294,
          column: 25
        },
        end: {
          line: 294,
          column: 73
        }
      },
      "142": {
        start: {
          line: 296,
          column: 24
        },
        end: {
          line: 296,
          column: 109
        }
      },
      "143": {
        start: {
          line: 296,
          column: 51
        },
        end: {
          line: 296,
          column: 108
        }
      },
      "144": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 302,
          column: 9
        }
      },
      "145": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 301,
          column: 66
        }
      },
      "146": {
        start: {
          line: 300,
          column: 37
        },
        end: {
          line: 300,
          column: 62
        }
      },
      "147": {
        start: {
          line: 301,
          column: 32
        },
        end: {
          line: 301,
          column: 61
        }
      },
      "148": {
        start: {
          line: 303,
          column: 8
        },
        end: {
          line: 303,
          column: 33
        }
      },
      "149": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 349,
          column: 11
        }
      },
      "150": {
        start: {
          line: 310,
          column: 30
        },
        end: {
          line: 310,
          column: 40
        }
      },
      "151": {
        start: {
          line: 311,
          column: 33
        },
        end: {
          line: 311,
          column: 60
        }
      },
      "152": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 348,
          column: 13
        }
      },
      "153": {
        start: {
          line: 314,
          column: 31
        },
        end: {
          line: 339,
          column: 17
        }
      },
      "154": {
        start: {
          line: 341,
          column: 16
        },
        end: {
          line: 341,
          column: 37
        }
      },
      "155": {
        start: {
          line: 342,
          column: 16
        },
        end: {
          line: 342,
          column: 46
        }
      },
      "156": {
        start: {
          line: 343,
          column: 16
        },
        end: {
          line: 343,
          column: 76
        }
      },
      "157": {
        start: {
          line: 344,
          column: 16
        },
        end: {
          line: 344,
          column: 30
        }
      },
      "158": {
        start: {
          line: 347,
          column: 16
        },
        end: {
          line: 347,
          column: 99
        }
      },
      "159": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 398,
          column: 11
        }
      },
      "160": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 393,
          column: 13
        }
      },
      "161": {
        start: {
          line: 357,
          column: 16
        },
        end: {
          line: 392,
          column: 17
        }
      },
      "162": {
        start: {
          line: 358,
          column: 32
        },
        end: {
          line: 358,
          column: 74
        }
      },
      "163": {
        start: {
          line: 358,
          column: 49
        },
        end: {
          line: 358,
          column: 73
        }
      },
      "164": {
        start: {
          line: 359,
          column: 20
        },
        end: {
          line: 391,
          column: 21
        }
      },
      "165": {
        start: {
          line: 360,
          column: 42
        },
        end: {
          line: 360,
          column: 69
        }
      },
      "166": {
        start: {
          line: 361,
          column: 48
        },
        end: {
          line: 361,
          column: 90
        }
      },
      "167": {
        start: {
          line: 362,
          column: 24
        },
        end: {
          line: 390,
          column: 25
        }
      },
      "168": {
        start: {
          line: 364,
          column: 28
        },
        end: {
          line: 364,
          column: 57
        }
      },
      "169": {
        start: {
          line: 365,
          column: 28
        },
        end: {
          line: 368,
          column: 38
        }
      },
      "170": {
        start: {
          line: 369,
          column: 28
        },
        end: {
          line: 369,
          column: 107
        }
      },
      "171": {
        start: {
          line: 370,
          column: 28
        },
        end: {
          line: 370,
          column: 66
        }
      },
      "172": {
        start: {
          line: 374,
          column: 47
        },
        end: {
          line: 388,
          column: 29
        }
      },
      "173": {
        start: {
          line: 389,
          column: 28
        },
        end: {
          line: 389,
          column: 83
        }
      },
      "174": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 397,
          column: 13
        }
      },
      "175": {
        start: {
          line: 396,
          column: 16
        },
        end: {
          line: 396,
          column: 43
        }
      },
      "176": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 404,
          column: 52
        }
      },
      "177": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 410,
          column: 53
        }
      },
      "178": {
        start: {
          line: 416,
          column: 32
        },
        end: {
          line: 416,
          column: 34
        }
      },
      "179": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 420,
          column: 9
        }
      },
      "180": {
        start: {
          line: 419,
          column: 12
        },
        end: {
          line: 419,
          column: 117
        }
      },
      "181": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 423,
          column: 9
        }
      },
      "182": {
        start: {
          line: 422,
          column: 12
        },
        end: {
          line: 422,
          column: 95
        }
      },
      "183": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 426,
          column: 9
        }
      },
      "184": {
        start: {
          line: 425,
          column: 12
        },
        end: {
          line: 425,
          column: 100
        }
      },
      "185": {
        start: {
          line: 427,
          column: 8
        },
        end: {
          line: 429,
          column: 9
        }
      },
      "186": {
        start: {
          line: 428,
          column: 12
        },
        end: {
          line: 428,
          column: 98
        }
      },
      "187": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 432,
          column: 9
        }
      },
      "188": {
        start: {
          line: 431,
          column: 12
        },
        end: {
          line: 431,
          column: 104
        }
      },
      "189": {
        start: {
          line: 433,
          column: 8
        },
        end: {
          line: 433,
          column: 31
        }
      },
      "190": {
        start: {
          line: 439,
          column: 8
        },
        end: {
          line: 464,
          column: 11
        }
      },
      "191": {
        start: {
          line: 440,
          column: 35
        },
        end: {
          line: 440,
          column: 57
        }
      },
      "192": {
        start: {
          line: 441,
          column: 36
        },
        end: {
          line: 441,
          column: 78
        }
      },
      "193": {
        start: {
          line: 443,
          column: 39
        },
        end: {
          line: 443,
          column: 40
        }
      },
      "194": {
        start: {
          line: 445,
          column: 12
        },
        end: {
          line: 448,
          column: 13
        }
      },
      "195": {
        start: {
          line: 446,
          column: 16
        },
        end: {
          line: 446,
          column: 61
        }
      },
      "196": {
        start: {
          line: 447,
          column: 16
        },
        end: {
          line: 447,
          column: 43
        }
      },
      "197": {
        start: {
          line: 450,
          column: 12
        },
        end: {
          line: 453,
          column: 13
        }
      },
      "198": {
        start: {
          line: 451,
          column: 16
        },
        end: {
          line: 451,
          column: 106
        }
      },
      "199": {
        start: {
          line: 452,
          column: 16
        },
        end: {
          line: 452,
          column: 43
        }
      },
      "200": {
        start: {
          line: 455,
          column: 12
        },
        end: {
          line: 458,
          column: 13
        }
      },
      "201": {
        start: {
          line: 456,
          column: 16
        },
        end: {
          line: 456,
          column: 97
        }
      },
      "202": {
        start: {
          line: 457,
          column: 16
        },
        end: {
          line: 457,
          column: 42
        }
      },
      "203": {
        start: {
          line: 459,
          column: 12
        },
        end: {
          line: 463,
          column: 14
        }
      },
      "204": {
        start: {
          line: 470,
          column: 8
        },
        end: {
          line: 473,
          column: 9
        }
      },
      "205": {
        start: {
          line: 471,
          column: 12
        },
        end: {
          line: 471,
          column: 59
        }
      },
      "206": {
        start: {
          line: 472,
          column: 12
        },
        end: {
          line: 472,
          column: 56
        }
      },
      "207": {
        start: {
          line: 474,
          column: 8
        },
        end: {
          line: 474,
          column: 44
        }
      },
      "208": {
        start: {
          line: 475,
          column: 8
        },
        end: {
          line: 475,
          column: 39
        }
      },
      "209": {
        start: {
          line: 476,
          column: 8
        },
        end: {
          line: 476,
          column: 42
        }
      },
      "210": {
        start: {
          line: 477,
          column: 8
        },
        end: {
          line: 477,
          column: 34
        }
      },
      "211": {
        start: {
          line: 478,
          column: 8
        },
        end: {
          line: 478,
          column: 89
        }
      },
      "212": {
        start: {
          line: 482,
          column: 8
        },
        end: {
          line: 492,
          column: 10
        }
      },
      "213": {
        start: {
          line: 495,
          column: 8
        },
        end: {
          line: 497,
          column: 54
        }
      },
      "214": {
        start: {
          line: 496,
          column: 12
        },
        end: {
          line: 496,
          column: 44
        }
      },
      "215": {
        start: {
          line: 500,
          column: 8
        },
        end: {
          line: 513,
          column: 9
        }
      },
      "216": {
        start: {
          line: 501,
          column: 24
        },
        end: {
          line: 501,
          column: 71
        }
      },
      "217": {
        start: {
          line: 501,
          column: 62
        },
        end: {
          line: 501,
          column: 67
        }
      },
      "218": {
        start: {
          line: 502,
          column: 12
        },
        end: {
          line: 503,
          column: 50
        }
      },
      "219": {
        start: {
          line: 504,
          column: 12
        },
        end: {
          line: 504,
          column: 84
        }
      },
      "220": {
        start: {
          line: 505,
          column: 12
        },
        end: {
          line: 505,
          column: 84
        }
      },
      "221": {
        start: {
          line: 506,
          column: 12
        },
        end: {
          line: 508,
          column: 60
        }
      },
      "222": {
        start: {
          line: 510,
          column: 29
        },
        end: {
          line: 510,
          column: 34
        }
      },
      "223": {
        start: {
          line: 511,
          column: 12
        },
        end: {
          line: 512,
          column: 88
        }
      },
      "224": {
        start: {
          line: 515,
          column: 28
        },
        end: {
          line: 515,
          column: 55
        }
      },
      "225": {
        start: {
          line: 516,
          column: 28
        },
        end: {
          line: 516,
          column: 62
        }
      },
      "226": {
        start: {
          line: 517,
          column: 8
        },
        end: {
          line: 518,
          column: 75
        }
      },
      "227": {
        start: {
          line: 521,
          column: 8
        },
        end: {
          line: 521,
          column: 70
        }
      },
      "228": {
        start: {
          line: 522,
          column: 8
        },
        end: {
          line: 531,
          column: 9
        }
      },
      "229": {
        start: {
          line: 523,
          column: 41
        },
        end: {
          line: 523,
          column: 67
        }
      },
      "230": {
        start: {
          line: 524,
          column: 12
        },
        end: {
          line: 525,
          column: 85
        }
      },
      "231": {
        start: {
          line: 526,
          column: 12
        },
        end: {
          line: 526,
          column: 118
        }
      },
      "232": {
        start: {
          line: 527,
          column: 12
        },
        end: {
          line: 527,
          column: 118
        }
      },
      "233": {
        start: {
          line: 528,
          column: 12
        },
        end: {
          line: 530,
          column: 60
        }
      },
      "234": {
        start: {
          line: 534,
          column: 8
        },
        end: {
          line: 572,
          column: 11
        }
      },
      "235": {
        start: {
          line: 536,
          column: 35
        },
        end: {
          line: 567,
          column: 13
        }
      },
      "236": {
        start: {
          line: 568,
          column: 12
        },
        end: {
          line: 570,
          column: 15
        }
      },
      "237": {
        start: {
          line: 569,
          column: 16
        },
        end: {
          line: 569,
          column: 76
        }
      },
      "238": {
        start: {
          line: 571,
          column: 12
        },
        end: {
          line: 571,
          column: 117
        }
      },
      "239": {
        start: {
          line: 576,
          column: 25
        },
        end: {
          line: 576,
          column: 74
        }
      },
      "240": {
        start: {
          line: 577,
          column: 8
        },
        end: {
          line: 577,
          column: 83
        }
      },
      "241": {
        start: {
          line: 577,
          column: 32
        },
        end: {
          line: 577,
          column: 81
        }
      },
      "242": {
        start: {
          line: 578,
          column: 25
        },
        end: {
          line: 578,
          column: 83
        }
      },
      "243": {
        start: {
          line: 579,
          column: 8
        },
        end: {
          line: 581,
          column: 11
        }
      },
      "244": {
        start: {
          line: 580,
          column: 12
        },
        end: {
          line: 580,
          column: 58
        }
      },
      "245": {
        start: {
          line: 582,
          column: 8
        },
        end: {
          line: 582,
          column: 105
        }
      },
      "246": {
        start: {
          line: 586,
          column: 32
        },
        end: {
          line: 587,
          column: 63
        }
      },
      "247": {
        start: {
          line: 586,
          column: 51
        },
        end: {
          line: 587,
          column: 62
        }
      },
      "248": {
        start: {
          line: 588,
          column: 8
        },
        end: {
          line: 590,
          column: 9
        }
      },
      "249": {
        start: {
          line: 589,
          column: 12
        },
        end: {
          line: 589,
          column: 32
        }
      },
      "250": {
        start: {
          line: 591,
          column: 8
        },
        end: {
          line: 591,
          column: 55
        }
      },
      "251": {
        start: {
          line: 594,
          column: 25
        },
        end: {
          line: 594,
          column: 30
        }
      },
      "252": {
        start: {
          line: 595,
          column: 35
        },
        end: {
          line: 595,
          column: 38
        }
      },
      "253": {
        start: {
          line: 596,
          column: 8
        },
        end: {
          line: 596,
          column: 70
        }
      },
      "254": {
        start: {
          line: 599,
          column: 28
        },
        end: {
          line: 604,
          column: 17
        }
      },
      "255": {
        start: {
          line: 600,
          column: 34
        },
        end: {
          line: 600,
          column: 77
        }
      },
      "256": {
        start: {
          line: 601,
          column: 29
        },
        end: {
          line: 601,
          column: 56
        }
      },
      "257": {
        start: {
          line: 602,
          column: 29
        },
        end: {
          line: 602,
          column: 47
        }
      },
      "258": {
        start: {
          line: 603,
          column: 12
        },
        end: {
          line: 603,
          column: 60
        }
      },
      "259": {
        start: {
          line: 605,
          column: 8
        },
        end: {
          line: 605,
          column: 27
        }
      },
      "260": {
        start: {
          line: 608,
          column: 29
        },
        end: {
          line: 608,
          column: 31
        }
      },
      "261": {
        start: {
          line: 609,
          column: 8
        },
        end: {
          line: 613,
          column: 11
        }
      },
      "262": {
        start: {
          line: 610,
          column: 12
        },
        end: {
          line: 612,
          column: 13
        }
      },
      "263": {
        start: {
          line: 611,
          column: 16
        },
        end: {
          line: 611,
          column: 78
        }
      },
      "264": {
        start: {
          line: 614,
          column: 8
        },
        end: {
          line: 614,
          column: 42
        }
      },
      "265": {
        start: {
          line: 617,
          column: 8
        },
        end: {
          line: 629,
          column: 43
        }
      },
      "266": {
        start: {
          line: 632,
          column: 8
        },
        end: {
          line: 660,
          column: 9
        }
      },
      "267": {
        start: {
          line: 633,
          column: 27
        },
        end: {
          line: 633,
          column: 47
        }
      },
      "268": {
        start: {
          line: 634,
          column: 12
        },
        end: {
          line: 656,
          column: 14
        }
      },
      "269": {
        start: {
          line: 659,
          column: 12
        },
        end: {
          line: 659,
          column: 96
        }
      },
      "270": {
        start: {
          line: 663,
          column: 8
        },
        end: {
          line: 683,
          column: 10
        }
      },
      "271": {
        start: {
          line: 686,
          column: 8
        },
        end: {
          line: 688,
          column: 28
        }
      },
      "272": {
        start: {
          line: 691,
          column: 8
        },
        end: {
          line: 691,
          column: 79
        }
      },
      "273": {
        start: {
          line: 694,
          column: 8
        },
        end: {
          line: 694,
          column: 80
        }
      },
      "274": {
        start: {
          line: 697,
          column: 8
        },
        end: {
          line: 699,
          column: 28
        }
      },
      "275": {
        start: {
          line: 702,
          column: 0
        },
        end: {
          line: 702,
          column: 62
        }
      },
      "276": {
        start: {
          line: 708,
          column: 8
        },
        end: {
          line: 708,
          column: 37
        }
      },
      "277": {
        start: {
          line: 709,
          column: 8
        },
        end: {
          line: 709,
          column: 37
        }
      },
      "278": {
        start: {
          line: 710,
          column: 8
        },
        end: {
          line: 710,
          column: 36
        }
      },
      "279": {
        start: {
          line: 711,
          column: 8
        },
        end: {
          line: 711,
          column: 39
        }
      },
      "280": {
        start: {
          line: 717,
          column: 35
        },
        end: {
          line: 719,
          column: 15
        }
      },
      "281": {
        start: {
          line: 720,
          column: 29
        },
        end: {
          line: 720,
          column: 37
        }
      },
      "282": {
        start: {
          line: 721,
          column: 8
        },
        end: {
          line: 730,
          column: 9
        }
      },
      "283": {
        start: {
          line: 722,
          column: 27
        },
        end: {
          line: 722,
          column: 60
        }
      },
      "284": {
        start: {
          line: 723,
          column: 28
        },
        end: {
          line: 723,
          column: 77
        }
      },
      "285": {
        start: {
          line: 723,
          column: 52
        },
        end: {
          line: 723,
          column: 57
        }
      },
      "286": {
        start: {
          line: 724,
          column: 12
        },
        end: {
          line: 729,
          column: 13
        }
      },
      "287": {
        start: {
          line: 725,
          column: 16
        },
        end: {
          line: 725,
          column: 45
        }
      },
      "288": {
        start: {
          line: 727,
          column: 17
        },
        end: {
          line: 729,
          column: 13
        }
      },
      "289": {
        start: {
          line: 728,
          column: 16
        },
        end: {
          line: 728,
          column: 45
        }
      },
      "290": {
        start: {
          line: 731,
          column: 8
        },
        end: {
          line: 737,
          column: 10
        }
      },
      "291": {
        start: {
          line: 743,
          column: 28
        },
        end: {
          line: 745,
          column: 15
        }
      },
      "292": {
        start: {
          line: 746,
          column: 8
        },
        end: {
          line: 746,
          column: 53
        }
      },
      "293": {
        start: {
          line: 752,
          column: 24
        },
        end: {
          line: 752,
          column: 52
        }
      },
      "294": {
        start: {
          line: 753,
          column: 32
        },
        end: {
          line: 753,
          column: 34
        }
      },
      "295": {
        start: {
          line: 754,
          column: 8
        },
        end: {
          line: 758,
          column: 9
        }
      },
      "296": {
        start: {
          line: 755,
          column: 12
        },
        end: {
          line: 755,
          column: 148
        }
      },
      "297": {
        start: {
          line: 756,
          column: 12
        },
        end: {
          line: 756,
          column: 78
        }
      },
      "298": {
        start: {
          line: 757,
          column: 12
        },
        end: {
          line: 757,
          column: 86
        }
      },
      "299": {
        start: {
          line: 759,
          column: 8
        },
        end: {
          line: 762,
          column: 9
        }
      },
      "300": {
        start: {
          line: 760,
          column: 12
        },
        end: {
          line: 760,
          column: 91
        }
      },
      "301": {
        start: {
          line: 761,
          column: 12
        },
        end: {
          line: 761,
          column: 80
        }
      },
      "302": {
        start: {
          line: 763,
          column: 8
        },
        end: {
          line: 765,
          column: 9
        }
      },
      "303": {
        start: {
          line: 764,
          column: 12
        },
        end: {
          line: 764,
          column: 97
        }
      },
      "304": {
        start: {
          line: 766,
          column: 8
        },
        end: {
          line: 768,
          column: 9
        }
      },
      "305": {
        start: {
          line: 767,
          column: 12
        },
        end: {
          line: 767,
          column: 83
        }
      },
      "306": {
        start: {
          line: 769,
          column: 8
        },
        end: {
          line: 769,
          column: 31
        }
      },
      "307": {
        start: {
          line: 775,
          column: 8
        },
        end: {
          line: 828,
          column: 11
        }
      },
      "308": {
        start: {
          line: 776,
          column: 32
        },
        end: {
          line: 776,
          column: 34
        }
      },
      "309": {
        start: {
          line: 777,
          column: 28
        },
        end: {
          line: 777,
          column: 29
        }
      },
      "310": {
        start: {
          line: 779,
          column: 12
        },
        end: {
          line: 786,
          column: 13
        }
      },
      "311": {
        start: {
          line: 780,
          column: 16
        },
        end: {
          line: 780,
          column: 31
        }
      },
      "312": {
        start: {
          line: 781,
          column: 16
        },
        end: {
          line: 781,
          column: 58
        }
      },
      "313": {
        start: {
          line: 783,
          column: 17
        },
        end: {
          line: 786,
          column: 13
        }
      },
      "314": {
        start: {
          line: 784,
          column: 16
        },
        end: {
          line: 784,
          column: 31
        }
      },
      "315": {
        start: {
          line: 785,
          column: 16
        },
        end: {
          line: 785,
          column: 54
        }
      },
      "316": {
        start: {
          line: 788,
          column: 12
        },
        end: {
          line: 795,
          column: 13
        }
      },
      "317": {
        start: {
          line: 789,
          column: 16
        },
        end: {
          line: 789,
          column: 31
        }
      },
      "318": {
        start: {
          line: 790,
          column: 16
        },
        end: {
          line: 790,
          column: 57
        }
      },
      "319": {
        start: {
          line: 792,
          column: 17
        },
        end: {
          line: 795,
          column: 13
        }
      },
      "320": {
        start: {
          line: 793,
          column: 16
        },
        end: {
          line: 793,
          column: 31
        }
      },
      "321": {
        start: {
          line: 794,
          column: 16
        },
        end: {
          line: 794,
          column: 59
        }
      },
      "322": {
        start: {
          line: 797,
          column: 12
        },
        end: {
          line: 800,
          column: 13
        }
      },
      "323": {
        start: {
          line: 798,
          column: 16
        },
        end: {
          line: 798,
          column: 31
        }
      },
      "324": {
        start: {
          line: 799,
          column: 16
        },
        end: {
          line: 799,
          column: 66
        }
      },
      "325": {
        start: {
          line: 802,
          column: 12
        },
        end: {
          line: 805,
          column: 13
        }
      },
      "326": {
        start: {
          line: 803,
          column: 16
        },
        end: {
          line: 803,
          column: 31
        }
      },
      "327": {
        start: {
          line: 804,
          column: 16
        },
        end: {
          line: 804,
          column: 74
        }
      },
      "328": {
        start: {
          line: 809,
          column: 12
        },
        end: {
          line: 820,
          column: 13
        }
      },
      "329": {
        start: {
          line: 810,
          column: 16
        },
        end: {
          line: 810,
          column: 36
        }
      },
      "330": {
        start: {
          line: 811,
          column: 16
        },
        end: {
          line: 811,
          column: 51
        }
      },
      "331": {
        start: {
          line: 813,
          column: 17
        },
        end: {
          line: 820,
          column: 13
        }
      },
      "332": {
        start: {
          line: 814,
          column: 16
        },
        end: {
          line: 814,
          column: 39
        }
      },
      "333": {
        start: {
          line: 815,
          column: 16
        },
        end: {
          line: 815,
          column: 52
        }
      },
      "334": {
        start: {
          line: 818,
          column: 16
        },
        end: {
          line: 818,
          column: 37
        }
      },
      "335": {
        start: {
          line: 819,
          column: 16
        },
        end: {
          line: 819,
          column: 43
        }
      },
      "336": {
        start: {
          line: 821,
          column: 31
        },
        end: {
          line: 821,
          column: 67
        }
      },
      "337": {
        start: {
          line: 822,
          column: 12
        },
        end: {
          line: 827,
          column: 14
        }
      },
      "338": {
        start: {
          line: 834,
          column: 8
        },
        end: {
          line: 867,
          column: 11
        }
      },
      "339": {
        start: {
          line: 835,
          column: 12
        },
        end: {
          line: 837,
          column: 13
        }
      },
      "340": {
        start: {
          line: 836,
          column: 16
        },
        end: {
          line: 836,
          column: 28
        }
      },
      "341": {
        start: {
          line: 842,
          column: 12
        },
        end: {
          line: 860,
          column: 13
        }
      },
      "342": {
        start: {
          line: 844,
          column: 16
        },
        end: {
          line: 844,
          column: 34
        }
      },
      "343": {
        start: {
          line: 845,
          column: 16
        },
        end: {
          line: 845,
          column: 32
        }
      },
      "344": {
        start: {
          line: 846,
          column: 16
        },
        end: {
          line: 846,
          column: 44
        }
      },
      "345": {
        start: {
          line: 847,
          column: 16
        },
        end: {
          line: 847,
          column: 41
        }
      },
      "346": {
        start: {
          line: 849,
          column: 17
        },
        end: {
          line: 860,
          column: 13
        }
      },
      "347": {
        start: {
          line: 850,
          column: 16
        },
        end: {
          line: 850,
          column: 38
        }
      },
      "348": {
        start: {
          line: 851,
          column: 16
        },
        end: {
          line: 851,
          column: 32
        }
      },
      "349": {
        start: {
          line: 852,
          column: 16
        },
        end: {
          line: 852,
          column: 45
        }
      },
      "350": {
        start: {
          line: 853,
          column: 16
        },
        end: {
          line: 853,
          column: 40
        }
      },
      "351": {
        start: {
          line: 856,
          column: 16
        },
        end: {
          line: 856,
          column: 42
        }
      },
      "352": {
        start: {
          line: 857,
          column: 16
        },
        end: {
          line: 857,
          column: 32
        }
      },
      "353": {
        start: {
          line: 858,
          column: 16
        },
        end: {
          line: 858,
          column: 50
        }
      },
      "354": {
        start: {
          line: 859,
          column: 16
        },
        end: {
          line: 859,
          column: 40
        }
      },
      "355": {
        start: {
          line: 861,
          column: 12
        },
        end: {
          line: 866,
          column: 14
        }
      },
      "356": {
        start: {
          line: 873,
          column: 8
        },
        end: {
          line: 964,
          column: 11
        }
      },
      "357": {
        start: {
          line: 874,
          column: 30
        },
        end: {
          line: 874,
          column: 40
        }
      },
      "358": {
        start: {
          line: 875,
          column: 33
        },
        end: {
          line: 877,
          column: 31
        }
      },
      "359": {
        start: {
          line: 878,
          column: 12
        },
        end: {
          line: 963,
          column: 13
        }
      },
      "360": {
        start: {
          line: 879,
          column: 16
        },
        end: {
          line: 879,
          column: 42
        }
      },
      "361": {
        start: {
          line: 881,
          column: 39
        },
        end: {
          line: 885,
          column: 31
        }
      },
      "362": {
        start: {
          line: 886,
          column: 16
        },
        end: {
          line: 886,
          column: 112
        }
      },
      "363": {
        start: {
          line: 886,
          column: 47
        },
        end: {
          line: 886,
          column: 110
        }
      },
      "364": {
        start: {
          line: 888,
          column: 43
        },
        end: {
          line: 892,
          column: 30
        }
      },
      "365": {
        start: {
          line: 893,
          column: 34
        },
        end: {
          line: 893,
          column: 68
        }
      },
      "366": {
        start: {
          line: 894,
          column: 16
        },
        end: {
          line: 896,
          column: 17
        }
      },
      "367": {
        start: {
          line: 895,
          column: 20
        },
        end: {
          line: 895,
          column: 49
        }
      },
      "368": {
        start: {
          line: 897,
          column: 31
        },
        end: {
          line: 931,
          column: 17
        }
      },
      "369": {
        start: {
          line: 933,
          column: 36
        },
        end: {
          line: 933,
          column: 88
        }
      },
      "370": {
        start: {
          line: 934,
          column: 16
        },
        end: {
          line: 934,
          column: 58
        }
      },
      "371": {
        start: {
          line: 936,
          column: 16
        },
        end: {
          line: 938,
          column: 17
        }
      },
      "372": {
        start: {
          line: 937,
          column: 20
        },
        end: {
          line: 937,
          column: 52
        }
      },
      "373": {
        start: {
          line: 939,
          column: 16
        },
        end: {
          line: 939,
          column: 30
        }
      },
      "374": {
        start: {
          line: 942,
          column: 16
        },
        end: {
          line: 962,
          column: 18
        }
      },
      "375": {
        start: {
          line: 970,
          column: 24
        },
        end: {
          line: 970,
          column: 52
        }
      },
      "376": {
        start: {
          line: 972,
          column: 8
        },
        end: {
          line: 979,
          column: 9
        }
      },
      "377": {
        start: {
          line: 974,
          column: 12
        },
        end: {
          line: 974,
          column: 83
        }
      },
      "378": {
        start: {
          line: 976,
          column: 13
        },
        end: {
          line: 979,
          column: 9
        }
      },
      "379": {
        start: {
          line: 978,
          column: 12
        },
        end: {
          line: 978,
          column: 82
        }
      },
      "380": {
        start: {
          line: 980,
          column: 8
        },
        end: {
          line: 980,
          column: 146
        }
      },
      "381": {
        start: {
          line: 983,
          column: 0
        },
        end: {
          line: 983,
          column: 58
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 64
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 20
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        loc: {
          start: {
            line: 44,
            column: 47
          },
          end: {
            line: 85,
            column: 5
          }
        },
        line: 44
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 45,
            column: 55
          },
          end: {
            line: 45,
            column: 56
          }
        },
        loc: {
          start: {
            line: 45,
            column: 68
          },
          end: {
            line: 84,
            column: 9
          }
        },
        line: 45
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 58,
            column: 50
          },
          end: {
            line: 58,
            column: 51
          }
        },
        loc: {
          start: {
            line: 58,
            column: 59
          },
          end: {
            line: 58,
            column: 122
          }
        },
        line: 58
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 58,
            column: 83
          },
          end: {
            line: 58,
            column: 84
          }
        },
        loc: {
          start: {
            line: 58,
            column: 95
          },
          end: {
            line: 58,
            column: 121
          }
        },
        line: 58
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        },
        loc: {
          start: {
            line: 89,
            column: 58
          },
          end: {
            line: 134,
            column: 5
          }
        },
        line: 89
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 90,
            column: 55
          },
          end: {
            line: 90,
            column: 56
          }
        },
        loc: {
          start: {
            line: 90,
            column: 68
          },
          end: {
            line: 133,
            column: 9
          }
        },
        line: 90
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 100,
            column: 59
          },
          end: {
            line: 100,
            column: 60
          }
        },
        loc: {
          start: {
            line: 100,
            column: 66
          },
          end: {
            line: 100,
            column: 105
          }
        },
        line: 100
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 110,
            column: 47
          },
          end: {
            line: 110,
            column: 48
          }
        },
        loc: {
          start: {
            line: 110,
            column: 56
          },
          end: {
            line: 110,
            column: 131
          }
        },
        line: 110
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 110,
            column: 74
          },
          end: {
            line: 110,
            column: 75
          }
        },
        loc: {
          start: {
            line: 110,
            column: 85
          },
          end: {
            line: 110,
            column: 130
          }
        },
        line: 110
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 110,
            column: 101
          },
          end: {
            line: 110,
            column: 102
          }
        },
        loc: {
          start: {
            line: 110,
            column: 108
          },
          end: {
            line: 110,
            column: 129
          }
        },
        line: 110
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 117,
            column: 59
          },
          end: {
            line: 117,
            column: 60
          }
        },
        loc: {
          start: {
            line: 117,
            column: 66
          },
          end: {
            line: 117,
            column: 105
          }
        },
        line: 117
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 126,
            column: 63
          },
          end: {
            line: 126,
            column: 64
          }
        },
        loc: {
          start: {
            line: 126,
            column: 75
          },
          end: {
            line: 126,
            column: 83
          }
        },
        line: 126
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 138,
            column: 4
          },
          end: {
            line: 138,
            column: 5
          }
        },
        loc: {
          start: {
            line: 138,
            column: 42
          },
          end: {
            line: 180,
            column: 5
          }
        },
        line: 138
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 139,
            column: 55
          },
          end: {
            line: 139,
            column: 56
          }
        },
        loc: {
          start: {
            line: 139,
            column: 68
          },
          end: {
            line: 179,
            column: 9
          }
        },
        line: 139
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 145,
            column: 52
          },
          end: {
            line: 145,
            column: 53
          }
        },
        loc: {
          start: {
            line: 145,
            column: 61
          },
          end: {
            line: 150,
            column: 21
          }
        },
        line: 145
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 177,
            column: 38
          },
          end: {
            line: 177,
            column: 39
          }
        },
        loc: {
          start: {
            line: 177,
            column: 47
          },
          end: {
            line: 177,
            column: 112
          }
        },
        line: 177
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 184,
            column: 4
          },
          end: {
            line: 184,
            column: 5
          }
        },
        loc: {
          start: {
            line: 184,
            column: 42
          },
          end: {
            line: 226,
            column: 5
          }
        },
        line: 184
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 185,
            column: 55
          },
          end: {
            line: 185,
            column: 56
          }
        },
        loc: {
          start: {
            line: 185,
            column: 68
          },
          end: {
            line: 225,
            column: 9
          }
        },
        line: 185
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 230,
            column: 4
          },
          end: {
            line: 230,
            column: 5
          }
        },
        loc: {
          start: {
            line: 230,
            column: 46
          },
          end: {
            line: 257,
            column: 5
          }
        },
        line: 230
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 231,
            column: 55
          },
          end: {
            line: 231,
            column: 56
          }
        },
        loc: {
          start: {
            line: 231,
            column: 68
          },
          end: {
            line: 256,
            column: 9
          }
        },
        line: 231
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 261,
            column: 4
          },
          end: {
            line: 261,
            column: 5
          }
        },
        loc: {
          start: {
            line: 261,
            column: 46
          },
          end: {
            line: 289,
            column: 5
          }
        },
        line: 261
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 265,
            column: 21
          },
          end: {
            line: 265,
            column: 22
          }
        },
        loc: {
          start: {
            line: 265,
            column: 30
          },
          end: {
            line: 271,
            column: 9
          }
        },
        line: 265
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 273,
            column: 27
          },
          end: {
            line: 273,
            column: 28
          }
        },
        loc: {
          start: {
            line: 273,
            column: 49
          },
          end: {
            line: 286,
            column: 9
          }
        },
        line: 273
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 293,
            column: 4
          },
          end: {
            line: 293,
            column: 5
          }
        },
        loc: {
          start: {
            line: 293,
            column: 29
          },
          end: {
            line: 304,
            column: 5
          }
        },
        line: 293
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 296,
            column: 38
          },
          end: {
            line: 296,
            column: 39
          }
        },
        loc: {
          start: {
            line: 296,
            column: 51
          },
          end: {
            line: 296,
            column: 108
          }
        },
        line: 296
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 300,
            column: 24
          },
          end: {
            line: 300,
            column: 25
          }
        },
        loc: {
          start: {
            line: 300,
            column: 37
          },
          end: {
            line: 300,
            column: 62
          }
        },
        line: 300
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 301,
            column: 22
          },
          end: {
            line: 301,
            column: 23
          }
        },
        loc: {
          start: {
            line: 301,
            column: 32
          },
          end: {
            line: 301,
            column: 61
          }
        },
        line: 301
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 308,
            column: 4
          },
          end: {
            line: 308,
            column: 5
          }
        },
        loc: {
          start: {
            line: 308,
            column: 49
          },
          end: {
            line: 350,
            column: 5
          }
        },
        line: 308
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 309,
            column: 55
          },
          end: {
            line: 309,
            column: 56
          }
        },
        loc: {
          start: {
            line: 309,
            column: 68
          },
          end: {
            line: 349,
            column: 9
          }
        },
        line: 309
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 354,
            column: 4
          },
          end: {
            line: 354,
            column: 5
          }
        },
        loc: {
          start: {
            line: 354,
            column: 61
          },
          end: {
            line: 399,
            column: 5
          }
        },
        line: 354
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 355,
            column: 55
          },
          end: {
            line: 355,
            column: 56
          }
        },
        loc: {
          start: {
            line: 355,
            column: 68
          },
          end: {
            line: 398,
            column: 9
          }
        },
        line: 355
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 358,
            column: 42
          },
          end: {
            line: 358,
            column: 43
          }
        },
        loc: {
          start: {
            line: 358,
            column: 49
          },
          end: {
            line: 358,
            column: 73
          }
        },
        line: 358
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 403,
            column: 4
          },
          end: {
            line: 403,
            column: 5
          }
        },
        loc: {
          start: {
            line: 403,
            column: 22
          },
          end: {
            line: 405,
            column: 5
          }
        },
        line: 403
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 409,
            column: 4
          },
          end: {
            line: 409,
            column: 5
          }
        },
        loc: {
          start: {
            line: 409,
            column: 28
          },
          end: {
            line: 411,
            column: 5
          }
        },
        line: 409
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 415,
            column: 4
          },
          end: {
            line: 415,
            column: 5
          }
        },
        loc: {
          start: {
            line: 415,
            column: 42
          },
          end: {
            line: 434,
            column: 5
          }
        },
        line: 415
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 438,
            column: 4
          },
          end: {
            line: 438,
            column: 5
          }
        },
        loc: {
          start: {
            line: 438,
            column: 31
          },
          end: {
            line: 465,
            column: 5
          }
        },
        line: 438
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 439,
            column: 55
          },
          end: {
            line: 439,
            column: 56
          }
        },
        loc: {
          start: {
            line: 439,
            column: 68
          },
          end: {
            line: 464,
            column: 9
          }
        },
        line: 439
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 469,
            column: 4
          },
          end: {
            line: 469,
            column: 5
          }
        },
        loc: {
          start: {
            line: 469,
            column: 14
          },
          end: {
            line: 479,
            column: 5
          }
        },
        line: 469
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 481,
            column: 4
          },
          end: {
            line: 481,
            column: 5
          }
        },
        loc: {
          start: {
            line: 481,
            column: 29
          },
          end: {
            line: 493,
            column: 5
          }
        },
        line: 481
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 494,
            column: 4
          },
          end: {
            line: 494,
            column: 5
          }
        },
        loc: {
          start: {
            line: 494,
            column: 33
          },
          end: {
            line: 498,
            column: 5
          }
        },
        line: 494
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 495,
            column: 54
          },
          end: {
            line: 495,
            column: 55
          }
        },
        loc: {
          start: {
            line: 495,
            column: 60
          },
          end: {
            line: 497,
            column: 9
          }
        },
        line: 495
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 499,
            column: 4
          },
          end: {
            line: 499,
            column: 5
          }
        },
        loc: {
          start: {
            line: 499,
            column: 31
          },
          end: {
            line: 519,
            column: 5
          }
        },
        line: 499
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 501,
            column: 52
          },
          end: {
            line: 501,
            column: 53
          }
        },
        loc: {
          start: {
            line: 501,
            column: 62
          },
          end: {
            line: 501,
            column: 67
          }
        },
        line: 501
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 520,
            column: 4
          },
          end: {
            line: 520,
            column: 5
          }
        },
        loc: {
          start: {
            line: 520,
            column: 43
          },
          end: {
            line: 532,
            column: 5
          }
        },
        line: 520
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 533,
            column: 4
          },
          end: {
            line: 533,
            column: 5
          }
        },
        loc: {
          start: {
            line: 533,
            column: 38
          },
          end: {
            line: 573,
            column: 5
          }
        },
        line: 533
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 534,
            column: 55
          },
          end: {
            line: 534,
            column: 56
          }
        },
        loc: {
          start: {
            line: 534,
            column: 68
          },
          end: {
            line: 572,
            column: 9
          }
        },
        line: 534
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 568,
            column: 35
          },
          end: {
            line: 568,
            column: 36
          }
        },
        loc: {
          start: {
            line: 568,
            column: 48
          },
          end: {
            line: 570,
            column: 13
          }
        },
        line: 568
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 574,
            column: 4
          },
          end: {
            line: 574,
            column: 5
          }
        },
        loc: {
          start: {
            line: 574,
            column: 26
          },
          end: {
            line: 583,
            column: 5
          }
        },
        line: 574
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 577,
            column: 22
          },
          end: {
            line: 577,
            column: 23
          }
        },
        loc: {
          start: {
            line: 577,
            column: 32
          },
          end: {
            line: 577,
            column: 81
          }
        },
        line: 577
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 579,
            column: 25
          },
          end: {
            line: 579,
            column: 26
          }
        },
        loc: {
          start: {
            line: 579,
            column: 42
          },
          end: {
            line: 581,
            column: 9
          }
        },
        line: 579
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 584,
            column: 4
          },
          end: {
            line: 584,
            column: 5
          }
        },
        loc: {
          start: {
            line: 584,
            column: 33
          },
          end: {
            line: 592,
            column: 5
          }
        },
        line: 584
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 586,
            column: 42
          },
          end: {
            line: 586,
            column: 43
          }
        },
        loc: {
          start: {
            line: 586,
            column: 51
          },
          end: {
            line: 587,
            column: 62
          }
        },
        line: 586
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 593,
            column: 4
          },
          end: {
            line: 593,
            column: 5
          }
        },
        loc: {
          start: {
            line: 593,
            column: 28
          },
          end: {
            line: 597,
            column: 5
          }
        },
        line: 593
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 598,
            column: 4
          },
          end: {
            line: 598,
            column: 5
          }
        },
        loc: {
          start: {
            line: 598,
            column: 33
          },
          end: {
            line: 606,
            column: 5
          }
        },
        line: 598
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 599,
            column: 40
          },
          end: {
            line: 599,
            column: 41
          }
        },
        loc: {
          start: {
            line: 599,
            column: 54
          },
          end: {
            line: 604,
            column: 9
          }
        },
        line: 599
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 607,
            column: 4
          },
          end: {
            line: 607,
            column: 5
          }
        },
        loc: {
          start: {
            line: 607,
            column: 35
          },
          end: {
            line: 615,
            column: 5
          }
        },
        line: 607
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 609,
            column: 21
          },
          end: {
            line: 609,
            column: 22
          }
        },
        loc: {
          start: {
            line: 609,
            column: 30
          },
          end: {
            line: 613,
            column: 9
          }
        },
        line: 609
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 616,
            column: 4
          },
          end: {
            line: 616,
            column: 5
          }
        },
        loc: {
          start: {
            line: 616,
            column: 52
          },
          end: {
            line: 630,
            column: 5
          }
        },
        line: 616
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 631,
            column: 4
          },
          end: {
            line: 631,
            column: 5
          }
        },
        loc: {
          start: {
            line: 631,
            column: 89
          },
          end: {
            line: 661,
            column: 5
          }
        },
        line: 631
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 662,
            column: 4
          },
          end: {
            line: 662,
            column: 5
          }
        },
        loc: {
          start: {
            line: 662,
            column: 35
          },
          end: {
            line: 684,
            column: 5
          }
        },
        line: 662
      },
      "61": {
        name: "(anonymous_61)",
        decl: {
          start: {
            line: 685,
            column: 4
          },
          end: {
            line: 685,
            column: 5
          }
        },
        loc: {
          start: {
            line: 685,
            column: 27
          },
          end: {
            line: 689,
            column: 5
          }
        },
        line: 685
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 690,
            column: 4
          },
          end: {
            line: 690,
            column: 5
          }
        },
        loc: {
          start: {
            line: 690,
            column: 28
          },
          end: {
            line: 692,
            column: 5
          }
        },
        line: 690
      },
      "63": {
        name: "(anonymous_63)",
        decl: {
          start: {
            line: 693,
            column: 4
          },
          end: {
            line: 693,
            column: 5
          }
        },
        loc: {
          start: {
            line: 693,
            column: 22
          },
          end: {
            line: 695,
            column: 5
          }
        },
        line: 693
      },
      "64": {
        name: "(anonymous_64)",
        decl: {
          start: {
            line: 696,
            column: 4
          },
          end: {
            line: 696,
            column: 5
          }
        },
        loc: {
          start: {
            line: 696,
            column: 27
          },
          end: {
            line: 700,
            column: 5
          }
        },
        line: 696
      },
      "65": {
        name: "(anonymous_65)",
        decl: {
          start: {
            line: 707,
            column: 4
          },
          end: {
            line: 707,
            column: 5
          }
        },
        loc: {
          start: {
            line: 707,
            column: 18
          },
          end: {
            line: 712,
            column: 5
          }
        },
        line: 707
      },
      "66": {
        name: "(anonymous_66)",
        decl: {
          start: {
            line: 716,
            column: 4
          },
          end: {
            line: 716,
            column: 5
          }
        },
        loc: {
          start: {
            line: 716,
            column: 28
          },
          end: {
            line: 738,
            column: 5
          }
        },
        line: 716
      },
      "67": {
        name: "(anonymous_67)",
        decl: {
          start: {
            line: 723,
            column: 42
          },
          end: {
            line: 723,
            column: 43
          }
        },
        loc: {
          start: {
            line: 723,
            column: 52
          },
          end: {
            line: 723,
            column: 57
          }
        },
        line: 723
      },
      "68": {
        name: "(anonymous_68)",
        decl: {
          start: {
            line: 742,
            column: 4
          },
          end: {
            line: 742,
            column: 5
          }
        },
        loc: {
          start: {
            line: 742,
            column: 34
          },
          end: {
            line: 747,
            column: 5
          }
        },
        line: 742
      },
      "69": {
        name: "(anonymous_69)",
        decl: {
          start: {
            line: 751,
            column: 4
          },
          end: {
            line: 751,
            column: 5
          }
        },
        loc: {
          start: {
            line: 751,
            column: 37
          },
          end: {
            line: 770,
            column: 5
          }
        },
        line: 751
      },
      "70": {
        name: "(anonymous_70)",
        decl: {
          start: {
            line: 774,
            column: 4
          },
          end: {
            line: 774,
            column: 5
          }
        },
        loc: {
          start: {
            line: 774,
            column: 51
          },
          end: {
            line: 829,
            column: 5
          }
        },
        line: 774
      },
      "71": {
        name: "(anonymous_71)",
        decl: {
          start: {
            line: 775,
            column: 55
          },
          end: {
            line: 775,
            column: 56
          }
        },
        loc: {
          start: {
            line: 775,
            column: 68
          },
          end: {
            line: 828,
            column: 9
          }
        },
        line: 775
      },
      "72": {
        name: "(anonymous_72)",
        decl: {
          start: {
            line: 833,
            column: 4
          },
          end: {
            line: 833,
            column: 5
          }
        },
        loc: {
          start: {
            line: 833,
            column: 64
          },
          end: {
            line: 868,
            column: 5
          }
        },
        line: 833
      },
      "73": {
        name: "(anonymous_73)",
        decl: {
          start: {
            line: 834,
            column: 55
          },
          end: {
            line: 834,
            column: 56
          }
        },
        loc: {
          start: {
            line: 834,
            column: 68
          },
          end: {
            line: 867,
            column: 9
          }
        },
        line: 834
      },
      "74": {
        name: "(anonymous_74)",
        decl: {
          start: {
            line: 872,
            column: 4
          },
          end: {
            line: 872,
            column: 5
          }
        },
        loc: {
          start: {
            line: 872,
            column: 58
          },
          end: {
            line: 965,
            column: 5
          }
        },
        line: 872
      },
      "75": {
        name: "(anonymous_75)",
        decl: {
          start: {
            line: 873,
            column: 55
          },
          end: {
            line: 873,
            column: 56
          }
        },
        loc: {
          start: {
            line: 873,
            column: 68
          },
          end: {
            line: 964,
            column: 9
          }
        },
        line: 873
      },
      "76": {
        name: "(anonymous_76)",
        decl: {
          start: {
            line: 886,
            column: 34
          },
          end: {
            line: 886,
            column: 35
          }
        },
        loc: {
          start: {
            line: 886,
            column: 47
          },
          end: {
            line: 886,
            column: 110
          }
        },
        line: 886
      },
      "77": {
        name: "(anonymous_77)",
        decl: {
          start: {
            line: 969,
            column: 4
          },
          end: {
            line: 969,
            column: 5
          }
        },
        loc: {
          start: {
            line: 969,
            column: 30
          },
          end: {
            line: 981,
            column: 5
          }
        },
        line: 969
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "1": {
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 38,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 38,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "2": {
        loc: {
          start: {
            line: 49,
            column: 16
          },
          end: {
            line: 51,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 16
          },
          end: {
            line: 51,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "3": {
        loc: {
          start: {
            line: 95,
            column: 16
          },
          end: {
            line: 104,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 16
          },
          end: {
            line: 104,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "4": {
        loc: {
          start: {
            line: 101,
            column: 20
          },
          end: {
            line: 103,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 20
          },
          end: {
            line: 103,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "5": {
        loc: {
          start: {
            line: 112,
            column: 16
          },
          end: {
            line: 121,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 16
          },
          end: {
            line: 121,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "6": {
        loc: {
          start: {
            line: 118,
            column: 20
          },
          end: {
            line: 120,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 20
          },
          end: {
            line: 120,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "7": {
        loc: {
          start: {
            line: 123,
            column: 39
          },
          end: {
            line: 123,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 123,
            column: 39
          },
          end: {
            line: 123,
            column: 65
          }
        }, {
          start: {
            line: 123,
            column: 69
          },
          end: {
            line: 123,
            column: 71
          }
        }],
        line: 123
      },
      "8": {
        loc: {
          start: {
            line: 124,
            column: 16
          },
          end: {
            line: 127,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 16
          },
          end: {
            line: 127,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "9": {
        loc: {
          start: {
            line: 143,
            column: 16
          },
          end: {
            line: 172,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 16
          },
          end: {
            line: 172,
            column: 17
          }
        }, {
          start: {
            line: 161,
            column: 21
          },
          end: {
            line: 172,
            column: 17
          }
        }],
        line: 143
      },
      "10": {
        loc: {
          start: {
            line: 146,
            column: 47
          },
          end: {
            line: 146,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 146,
            column: 47
          },
          end: {
            line: 146,
            column: 73
          }
        }, {
          start: {
            line: 146,
            column: 77
          },
          end: {
            line: 146,
            column: 79
          }
        }],
        line: 146
      },
      "11": {
        loc: {
          start: {
            line: 147,
            column: 31
          },
          end: {
            line: 149,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 148,
            column: 30
          },
          end: {
            line: 148,
            column: 79
          }
        }, {
          start: {
            line: 149,
            column: 30
          },
          end: {
            line: 149,
            column: 86
          }
        }],
        line: 147
      },
      "12": {
        loc: {
          start: {
            line: 165,
            column: 47
          },
          end: {
            line: 165,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 165,
            column: 47
          },
          end: {
            line: 165,
            column: 73
          }
        }, {
          start: {
            line: 165,
            column: 77
          },
          end: {
            line: 165,
            column: 79
          }
        }],
        line: 165
      },
      "13": {
        loc: {
          start: {
            line: 166,
            column: 39
          },
          end: {
            line: 168,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 167,
            column: 30
          },
          end: {
            line: 167,
            column: 85
          }
        }, {
          start: {
            line: 168,
            column: 30
          },
          end: {
            line: 168,
            column: 86
          }
        }],
        line: 166
      },
      "14": {
        loc: {
          start: {
            line: 191,
            column: 16
          },
          end: {
            line: 194,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 16
          },
          end: {
            line: 194,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "15": {
        loc: {
          start: {
            line: 198,
            column: 30
          },
          end: {
            line: 198,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 198,
            column: 60
          },
          end: {
            line: 198,
            column: 70
          }
        }, {
          start: {
            line: 198,
            column: 73
          },
          end: {
            line: 198,
            column: 79
          }
        }],
        line: 198
      },
      "16": {
        loc: {
          start: {
            line: 212,
            column: 16
          },
          end: {
            line: 218,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 16
          },
          end: {
            line: 218,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "17": {
        loc: {
          start: {
            line: 212,
            column: 20
          },
          end: {
            line: 212,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 212,
            column: 20
          },
          end: {
            line: 212,
            column: 36
          }
        }, {
          start: {
            line: 212,
            column: 40
          },
          end: {
            line: 212,
            column: 53
          }
        }],
        line: 212
      },
      "18": {
        loc: {
          start: {
            line: 235,
            column: 16
          },
          end: {
            line: 252,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 235,
            column: 16
          },
          end: {
            line: 252,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 235
      },
      "19": {
        loc: {
          start: {
            line: 235,
            column: 20
          },
          end: {
            line: 235,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 235,
            column: 20
          },
          end: {
            line: 235,
            column: 27
          }
        }, {
          start: {
            line: 235,
            column: 31
          },
          end: {
            line: 235,
            column: 56
          }
        }],
        line: 235
      },
      "20": {
        loc: {
          start: {
            line: 236,
            column: 43
          },
          end: {
            line: 236,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 236,
            column: 43
          },
          end: {
            line: 236,
            column: 69
          }
        }, {
          start: {
            line: 236,
            column: 73
          },
          end: {
            line: 236,
            column: 75
          }
        }],
        line: 236
      },
      "21": {
        loc: {
          start: {
            line: 237,
            column: 20
          },
          end: {
            line: 251,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 20
          },
          end: {
            line: 251,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "22": {
        loc: {
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 269,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 269,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "23": {
        loc: {
          start: {
            line: 274,
            column: 12
          },
          end: {
            line: 285,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 274,
            column: 12
          },
          end: {
            line: 285,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 274
      },
      "24": {
        loc: {
          start: {
            line: 296,
            column: 51
          },
          end: {
            line: 296,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 296,
            column: 51
          },
          end: {
            line: 296,
            column: 79
          }
        }, {
          start: {
            line: 296,
            column: 83
          },
          end: {
            line: 296,
            column: 108
          }
        }],
        line: 296
      },
      "25": {
        loc: {
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 302,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 302,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 297
      },
      "26": {
        loc: {
          start: {
            line: 303,
            column: 15
          },
          end: {
            line: 303,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 303,
            column: 15
          },
          end: {
            line: 303,
            column: 24
          }
        }, {
          start: {
            line: 303,
            column: 28
          },
          end: {
            line: 303,
            column: 32
          }
        }],
        line: 303
      },
      "27": {
        loc: {
          start: {
            line: 322,
            column: 39
          },
          end: {
            line: 322,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 322,
            column: 62
          },
          end: {
            line: 322,
            column: 84
          }
        }, {
          start: {
            line: 322,
            column: 87
          },
          end: {
            line: 322,
            column: 89
          }
        }],
        line: 322
      },
      "28": {
        loc: {
          start: {
            line: 323,
            column: 47
          },
          end: {
            line: 325,
            column: 32
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 324,
            column: 30
          },
          end: {
            line: 324,
            column: 52
          }
        }, {
          start: {
            line: 325,
            column: 30
          },
          end: {
            line: 325,
            column: 32
          }
        }],
        line: 323
      },
      "29": {
        loc: {
          start: {
            line: 357,
            column: 16
          },
          end: {
            line: 392,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 357,
            column: 16
          },
          end: {
            line: 392,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 357
      },
      "30": {
        loc: {
          start: {
            line: 359,
            column: 20
          },
          end: {
            line: 391,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 359,
            column: 20
          },
          end: {
            line: 391,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 359
      },
      "31": {
        loc: {
          start: {
            line: 362,
            column: 24
          },
          end: {
            line: 390,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 362,
            column: 24
          },
          end: {
            line: 390,
            column: 25
          }
        }, {
          start: {
            line: 372,
            column: 29
          },
          end: {
            line: 390,
            column: 25
          }
        }],
        line: 362
      },
      "32": {
        loc: {
          start: {
            line: 382,
            column: 46
          },
          end: {
            line: 384,
            column: 47
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 383,
            column: 38
          },
          end: {
            line: 383,
            column: 48
          }
        }, {
          start: {
            line: 384,
            column: 38
          },
          end: {
            line: 384,
            column: 47
          }
        }],
        line: 382
      },
      "33": {
        loc: {
          start: {
            line: 385,
            column: 48
          },
          end: {
            line: 387,
            column: 47
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 386,
            column: 38
          },
          end: {
            line: 386,
            column: 40
          }
        }, {
          start: {
            line: 387,
            column: 38
          },
          end: {
            line: 387,
            column: 47
          }
        }],
        line: 385
      },
      "34": {
        loc: {
          start: {
            line: 395,
            column: 12
          },
          end: {
            line: 397,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 395,
            column: 12
          },
          end: {
            line: 397,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 395
      },
      "35": {
        loc: {
          start: {
            line: 417,
            column: 8
          },
          end: {
            line: 420,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 417,
            column: 8
          },
          end: {
            line: 420,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 417
      },
      "36": {
        loc: {
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 423,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 423,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 421
      },
      "37": {
        loc: {
          start: {
            line: 424,
            column: 8
          },
          end: {
            line: 426,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 424,
            column: 8
          },
          end: {
            line: 426,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 424
      },
      "38": {
        loc: {
          start: {
            line: 427,
            column: 8
          },
          end: {
            line: 429,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 427,
            column: 8
          },
          end: {
            line: 429,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 427
      },
      "39": {
        loc: {
          start: {
            line: 430,
            column: 8
          },
          end: {
            line: 432,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 430,
            column: 8
          },
          end: {
            line: 432,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 430
      },
      "40": {
        loc: {
          start: {
            line: 445,
            column: 12
          },
          end: {
            line: 448,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 445,
            column: 12
          },
          end: {
            line: 448,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 445
      },
      "41": {
        loc: {
          start: {
            line: 450,
            column: 12
          },
          end: {
            line: 453,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 450,
            column: 12
          },
          end: {
            line: 453,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 450
      },
      "42": {
        loc: {
          start: {
            line: 455,
            column: 12
          },
          end: {
            line: 458,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 455,
            column: 12
          },
          end: {
            line: 458,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 455
      },
      "43": {
        loc: {
          start: {
            line: 470,
            column: 8
          },
          end: {
            line: 473,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 470,
            column: 8
          },
          end: {
            line: 473,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 470
      },
      "44": {
        loc: {
          start: {
            line: 500,
            column: 8
          },
          end: {
            line: 513,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 500,
            column: 8
          },
          end: {
            line: 513,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 500
      },
      "45": {
        loc: {
          start: {
            line: 518,
            column: 12
          },
          end: {
            line: 518,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 518,
            column: 30
          },
          end: {
            line: 518,
            column: 70
          }
        }, {
          start: {
            line: 518,
            column: 73
          },
          end: {
            line: 518,
            column: 74
          }
        }],
        line: 518
      },
      "46": {
        loc: {
          start: {
            line: 522,
            column: 8
          },
          end: {
            line: 531,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 522,
            column: 8
          },
          end: {
            line: 531,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 522
      },
      "47": {
        loc: {
          start: {
            line: 586,
            column: 51
          },
          end: {
            line: 587,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 586,
            column: 51
          },
          end: {
            line: 586,
            column: 90
          }
        }, {
          start: {
            line: 587,
            column: 12
          },
          end: {
            line: 587,
            column: 62
          }
        }],
        line: 586
      },
      "48": {
        loc: {
          start: {
            line: 588,
            column: 8
          },
          end: {
            line: 590,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 588,
            column: 8
          },
          end: {
            line: 590,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 588
      },
      "49": {
        loc: {
          start: {
            line: 591,
            column: 15
          },
          end: {
            line: 591,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 591,
            column: 33
          },
          end: {
            line: 591,
            column: 41
          }
        }, {
          start: {
            line: 591,
            column: 44
          },
          end: {
            line: 591,
            column: 54
          }
        }],
        line: 591
      },
      "50": {
        loc: {
          start: {
            line: 603,
            column: 19
          },
          end: {
            line: 603,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 603,
            column: 41
          },
          end: {
            line: 603,
            column: 53
          }
        }, {
          start: {
            line: 603,
            column: 56
          },
          end: {
            line: 603,
            column: 59
          }
        }],
        line: 603
      },
      "51": {
        loc: {
          start: {
            line: 610,
            column: 12
          },
          end: {
            line: 612,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 610,
            column: 12
          },
          end: {
            line: 612,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 610
      },
      "52": {
        loc: {
          start: {
            line: 642,
            column: 35
          },
          end: {
            line: 642,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 642,
            column: 49
          },
          end: {
            line: 642,
            column: 69
          }
        }, {
          start: {
            line: 642,
            column: 72
          },
          end: {
            line: 642,
            column: 74
          }
        }],
        line: 642
      },
      "53": {
        loc: {
          start: {
            line: 647,
            column: 30
          },
          end: {
            line: 647,
            column: 49
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 647,
            column: 44
          },
          end: {
            line: 647,
            column: 45
          }
        }, {
          start: {
            line: 647,
            column: 48
          },
          end: {
            line: 647,
            column: 49
          }
        }],
        line: 647
      },
      "54": {
        loc: {
          start: {
            line: 648,
            column: 33
          },
          end: {
            line: 648,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 648,
            column: 47
          },
          end: {
            line: 648,
            column: 48
          }
        }, {
          start: {
            line: 648,
            column: 51
          },
          end: {
            line: 648,
            column: 52
          }
        }],
        line: 648
      },
      "55": {
        loc: {
          start: {
            line: 717,
            column: 35
          },
          end: {
            line: 719,
            column: 15
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 718,
            column: 14
          },
          end: {
            line: 718,
            column: 66
          }
        }, {
          start: {
            line: 719,
            column: 14
          },
          end: {
            line: 719,
            column: 15
          }
        }],
        line: 717
      },
      "56": {
        loc: {
          start: {
            line: 721,
            column: 8
          },
          end: {
            line: 730,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 721,
            column: 8
          },
          end: {
            line: 730,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 721
      },
      "57": {
        loc: {
          start: {
            line: 724,
            column: 12
          },
          end: {
            line: 729,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 724,
            column: 12
          },
          end: {
            line: 729,
            column: 13
          }
        }, {
          start: {
            line: 727,
            column: 17
          },
          end: {
            line: 729,
            column: 13
          }
        }],
        line: 724
      },
      "58": {
        loc: {
          start: {
            line: 727,
            column: 17
          },
          end: {
            line: 729,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 727,
            column: 17
          },
          end: {
            line: 729,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 727
      },
      "59": {
        loc: {
          start: {
            line: 743,
            column: 28
          },
          end: {
            line: 745,
            column: 15
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 744,
            column: 14
          },
          end: {
            line: 744,
            column: 66
          }
        }, {
          start: {
            line: 745,
            column: 14
          },
          end: {
            line: 745,
            column: 15
          }
        }],
        line: 743
      },
      "60": {
        loc: {
          start: {
            line: 754,
            column: 8
          },
          end: {
            line: 758,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 754,
            column: 8
          },
          end: {
            line: 758,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 754
      },
      "61": {
        loc: {
          start: {
            line: 759,
            column: 8
          },
          end: {
            line: 762,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 759,
            column: 8
          },
          end: {
            line: 762,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 759
      },
      "62": {
        loc: {
          start: {
            line: 763,
            column: 8
          },
          end: {
            line: 765,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 763,
            column: 8
          },
          end: {
            line: 765,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 763
      },
      "63": {
        loc: {
          start: {
            line: 766,
            column: 8
          },
          end: {
            line: 768,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 766,
            column: 8
          },
          end: {
            line: 768,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 766
      },
      "64": {
        loc: {
          start: {
            line: 779,
            column: 12
          },
          end: {
            line: 786,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 779,
            column: 12
          },
          end: {
            line: 786,
            column: 13
          }
        }, {
          start: {
            line: 783,
            column: 17
          },
          end: {
            line: 786,
            column: 13
          }
        }],
        line: 779
      },
      "65": {
        loc: {
          start: {
            line: 783,
            column: 17
          },
          end: {
            line: 786,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 783,
            column: 17
          },
          end: {
            line: 786,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 783
      },
      "66": {
        loc: {
          start: {
            line: 788,
            column: 12
          },
          end: {
            line: 795,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 788,
            column: 12
          },
          end: {
            line: 795,
            column: 13
          }
        }, {
          start: {
            line: 792,
            column: 17
          },
          end: {
            line: 795,
            column: 13
          }
        }],
        line: 788
      },
      "67": {
        loc: {
          start: {
            line: 792,
            column: 17
          },
          end: {
            line: 795,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 792,
            column: 17
          },
          end: {
            line: 795,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 792
      },
      "68": {
        loc: {
          start: {
            line: 797,
            column: 12
          },
          end: {
            line: 800,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 797,
            column: 12
          },
          end: {
            line: 800,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 797
      },
      "69": {
        loc: {
          start: {
            line: 802,
            column: 12
          },
          end: {
            line: 805,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 802,
            column: 12
          },
          end: {
            line: 805,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 802
      },
      "70": {
        loc: {
          start: {
            line: 802,
            column: 16
          },
          end: {
            line: 802,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 802,
            column: 16
          },
          end: {
            line: 802,
            column: 42
          }
        }, {
          start: {
            line: 802,
            column: 46
          },
          end: {
            line: 802,
            column: 70
          }
        }],
        line: 802
      },
      "71": {
        loc: {
          start: {
            line: 809,
            column: 12
          },
          end: {
            line: 820,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 809,
            column: 12
          },
          end: {
            line: 820,
            column: 13
          }
        }, {
          start: {
            line: 813,
            column: 17
          },
          end: {
            line: 820,
            column: 13
          }
        }],
        line: 809
      },
      "72": {
        loc: {
          start: {
            line: 813,
            column: 17
          },
          end: {
            line: 820,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 813,
            column: 17
          },
          end: {
            line: 820,
            column: 13
          }
        }, {
          start: {
            line: 817,
            column: 17
          },
          end: {
            line: 820,
            column: 13
          }
        }],
        line: 813
      },
      "73": {
        loc: {
          start: {
            line: 835,
            column: 12
          },
          end: {
            line: 837,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 835,
            column: 12
          },
          end: {
            line: 837,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 835
      },
      "74": {
        loc: {
          start: {
            line: 842,
            column: 12
          },
          end: {
            line: 860,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 842,
            column: 12
          },
          end: {
            line: 860,
            column: 13
          }
        }, {
          start: {
            line: 849,
            column: 17
          },
          end: {
            line: 860,
            column: 13
          }
        }],
        line: 842
      },
      "75": {
        loc: {
          start: {
            line: 842,
            column: 16
          },
          end: {
            line: 843,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 842,
            column: 16
          },
          end: {
            line: 842,
            column: 52
          }
        }, {
          start: {
            line: 843,
            column: 16
          },
          end: {
            line: 843,
            column: 47
          }
        }],
        line: 842
      },
      "76": {
        loc: {
          start: {
            line: 849,
            column: 17
          },
          end: {
            line: 860,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 849,
            column: 17
          },
          end: {
            line: 860,
            column: 13
          }
        }, {
          start: {
            line: 855,
            column: 17
          },
          end: {
            line: 860,
            column: 13
          }
        }],
        line: 849
      },
      "77": {
        loc: {
          start: {
            line: 881,
            column: 39
          },
          end: {
            line: 885,
            column: 31
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 882,
            column: 22
          },
          end: {
            line: 882,
            column: 26
          }
        }, {
          start: {
            line: 883,
            column: 22
          },
          end: {
            line: 885,
            column: 31
          }
        }],
        line: 881
      },
      "78": {
        loc: {
          start: {
            line: 883,
            column: 22
          },
          end: {
            line: 885,
            column: 31
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 884,
            column: 26
          },
          end: {
            line: 884,
            column: 31
          }
        }, {
          start: {
            line: 885,
            column: 26
          },
          end: {
            line: 885,
            column: 31
          }
        }],
        line: 883
      },
      "79": {
        loc: {
          start: {
            line: 888,
            column: 43
          },
          end: {
            line: 892,
            column: 30
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 889,
            column: 22
          },
          end: {
            line: 889,
            column: 26
          }
        }, {
          start: {
            line: 890,
            column: 22
          },
          end: {
            line: 892,
            column: 30
          }
        }],
        line: 888
      },
      "80": {
        loc: {
          start: {
            line: 890,
            column: 22
          },
          end: {
            line: 892,
            column: 30
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 891,
            column: 26
          },
          end: {
            line: 891,
            column: 29
          }
        }, {
          start: {
            line: 892,
            column: 26
          },
          end: {
            line: 892,
            column: 30
          }
        }],
        line: 890
      },
      "81": {
        loc: {
          start: {
            line: 894,
            column: 16
          },
          end: {
            line: 896,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 894,
            column: 16
          },
          end: {
            line: 896,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 894
      },
      "82": {
        loc: {
          start: {
            line: 901,
            column: 28
          },
          end: {
            line: 901,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 901,
            column: 40
          },
          end: {
            line: 901,
            column: 49
          }
        }, {
          start: {
            line: 901,
            column: 52
          },
          end: {
            line: 901,
            column: 60
          }
        }],
        line: 901
      },
      "83": {
        loc: {
          start: {
            line: 905,
            column: 39
          },
          end: {
            line: 905,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 905,
            column: 51
          },
          end: {
            line: 905,
            column: 78
          }
        }, {
          start: {
            line: 905,
            column: 81
          },
          end: {
            line: 905,
            column: 83
          }
        }],
        line: 905
      },
      "84": {
        loc: {
          start: {
            line: 906,
            column: 47
          },
          end: {
            line: 906,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 906,
            column: 59
          },
          end: {
            line: 906,
            column: 74
          }
        }, {
          start: {
            line: 906,
            column: 77
          },
          end: {
            line: 906,
            column: 79
          }
        }],
        line: 906
      },
      "85": {
        loc: {
          start: {
            line: 910,
            column: 34
          },
          end: {
            line: 914,
            column: 35
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 911,
            column: 30
          },
          end: {
            line: 911,
            column: 31
          }
        }, {
          start: {
            line: 912,
            column: 30
          },
          end: {
            line: 914,
            column: 35
          }
        }],
        line: 910
      },
      "86": {
        loc: {
          start: {
            line: 912,
            column: 30
          },
          end: {
            line: 914,
            column: 35
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 913,
            column: 34
          },
          end: {
            line: 913,
            column: 35
          }
        }, {
          start: {
            line: 914,
            column: 34
          },
          end: {
            line: 914,
            column: 35
          }
        }],
        line: 912
      },
      "87": {
        loc: {
          start: {
            line: 915,
            column: 37
          },
          end: {
            line: 921,
            column: 31
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 916,
            column: 30
          },
          end: {
            line: 920,
            column: 39
          }
        }, {
          start: {
            line: 921,
            column: 30
          },
          end: {
            line: 921,
            column: 31
          }
        }],
        line: 915
      },
      "88": {
        loc: {
          start: {
            line: 916,
            column: 30
          },
          end: {
            line: 920,
            column: 39
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 917,
            column: 34
          },
          end: {
            line: 917,
            column: 35
          }
        }, {
          start: {
            line: 918,
            column: 34
          },
          end: {
            line: 920,
            column: 39
          }
        }],
        line: 916
      },
      "89": {
        loc: {
          start: {
            line: 918,
            column: 34
          },
          end: {
            line: 920,
            column: 39
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 919,
            column: 38
          },
          end: {
            line: 919,
            column: 39
          }
        }, {
          start: {
            line: 920,
            column: 38
          },
          end: {
            line: 920,
            column: 39
          }
        }],
        line: 918
      },
      "90": {
        loc: {
          start: {
            line: 922,
            column: 37
          },
          end: {
            line: 922,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 922,
            column: 49
          },
          end: {
            line: 922,
            column: 50
          }
        }, {
          start: {
            line: 922,
            column: 53
          },
          end: {
            line: 922,
            column: 54
          }
        }],
        line: 922
      },
      "91": {
        loc: {
          start: {
            line: 925,
            column: 27
          },
          end: {
            line: 925,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 925,
            column: 39
          },
          end: {
            line: 925,
            column: 48
          }
        }, {
          start: {
            line: 925,
            column: 51
          },
          end: {
            line: 925,
            column: 80
          }
        }],
        line: 925
      },
      "92": {
        loc: {
          start: {
            line: 936,
            column: 16
          },
          end: {
            line: 938,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 936,
            column: 16
          },
          end: {
            line: 938,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 936
      },
      "93": {
        loc: {
          start: {
            line: 972,
            column: 8
          },
          end: {
            line: 979,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 972,
            column: 8
          },
          end: {
            line: 979,
            column: 9
          }
        }, {
          start: {
            line: 976,
            column: 13
          },
          end: {
            line: 979,
            column: 9
          }
        }],
        line: 972
      },
      "94": {
        loc: {
          start: {
            line: 972,
            column: 12
          },
          end: {
            line: 973,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 972,
            column: 12
          },
          end: {
            line: 972,
            column: 45
          }
        }, {
          start: {
            line: 973,
            column: 12
          },
          end: {
            line: 973,
            column: 50
          }
        }],
        line: 972
      },
      "95": {
        loc: {
          start: {
            line: 976,
            column: 13
          },
          end: {
            line: 979,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 976,
            column: 13
          },
          end: {
            line: 979,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 976
      },
      "96": {
        loc: {
          start: {
            line: 976,
            column: 17
          },
          end: {
            line: 977,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 976,
            column: 17
          },
          end: {
            line: 976,
            column: 49
          }
        }, {
          start: {
            line: 977,
            column: 12
          },
          end: {
            line: 977,
            column: 50
          }
        }],
        line: 976
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0,
      "323": 0,
      "324": 0,
      "325": 0,
      "326": 0,
      "327": 0,
      "328": 0,
      "329": 0,
      "330": 0,
      "331": 0,
      "332": 0,
      "333": 0,
      "334": 0,
      "335": 0,
      "336": 0,
      "337": 0,
      "338": 0,
      "339": 0,
      "340": 0,
      "341": 0,
      "342": 0,
      "343": 0,
      "344": 0,
      "345": 0,
      "346": 0,
      "347": 0,
      "348": 0,
      "349": 0,
      "350": 0,
      "351": 0,
      "352": 0,
      "353": 0,
      "354": 0,
      "355": 0,
      "356": 0,
      "357": 0,
      "358": 0,
      "359": 0,
      "360": 0,
      "361": 0,
      "362": 0,
      "363": 0,
      "364": 0,
      "365": 0,
      "366": 0,
      "367": 0,
      "368": 0,
      "369": 0,
      "370": 0,
      "371": 0,
      "372": 0,
      "373": 0,
      "374": 0,
      "375": 0,
      "376": 0,
      "377": 0,
      "378": 0,
      "379": 0,
      "380": 0,
      "381": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0],
      "90": [0, 0],
      "91": [0, 0],
      "92": [0, 0],
      "93": [0, 0],
      "94": [0, 0],
      "95": [0, 0],
      "96": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/faster-resolution-optimizer.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/faster-resolution-optimizer.ts"],
      sourcesContent: ["/**\n * Faster Resolution Optimizer - Speed Enhancement for Implementation Resolution\n *\n * This module optimizes the speed of resolving incomplete implementations by:\n * - Parallel processing of multiple gaps\n * - Intelligent caching of resolution patterns\n * - Predictive pre-loading of common fixes\n * - Batch processing of similar issues\n * - Real-time performance monitoring and optimization\n */\n\nimport { AiFeatureFlags } from \"./ai-feature-flags\";\nimport {\n  DirectBedrockClient,\n  SupportOperationRequest,\n} from \"./direct-bedrock-client\";\nimport {\n  AutoResolutionResult,\n  ImplementationGap,\n  RemediationSuggestion,\n} from \"./implementation-support\";\nimport { IntelligentRouter } from \"./intelligent-router\";\n\n// Resolution Speed Metrics\nexport interface ResolutionSpeedMetrics {\n  averageResolutionTime: number; // milliseconds\n  fastestResolution: number;\n  slowestResolution: number;\n  totalResolutionsProcessed: number;\n  parallelProcessingEfficiency: number; // 0-1\n  cacheHitRate: number; // 0-1\n  batchProcessingGains: number; // percentage improvement\n  targetSpeedAchieved: boolean; // <30 seconds average\n  speedImprovement: number; // percentage vs baseline\n}\n\n// Resolution Pattern Cache\nexport interface ResolutionPattern {\n  patternId: string;\n  gapType: string;\n  commonSolution: string;\n  averageTime: number;\n  successRate: number;\n  usageCount: number;\n  lastUsed: Date;\n  codeTemplate?: string;\n  configTemplate?: Record<string, any>;\n}\n\n// Batch Processing Group\nexport interface BatchProcessingGroup {\n  groupId: string;\n  gapType: string;\n  gaps: ImplementationGap[];\n  batchStrategy: \"parallel\" | \"sequential\" | \"hybrid\";\n  estimatedTime: number;\n  priority: \"low\" | \"medium\" | \"high\" | \"critical\";\n  dependencies: string[];\n}\n\n// Speed Optimization Configuration\nexport interface SpeedOptimizationConfig {\n  targetAverageResolutionTime: number; // 30 seconds target\n  maxParallelResolutions: number; // 5 concurrent resolutions\n  cacheSize: number; // 100 patterns\n  batchSizeThreshold: number; // 3 similar gaps for batching\n  preloadCommonPatterns: boolean;\n  enablePredictiveLoading: boolean;\n  performanceMonitoringInterval: number; // 60 seconds\n}\n\n/**\n * Faster Resolution Optimizer for Speed Enhancement\n */\nexport class FasterResolutionOptimizer {\n  private config: SpeedOptimizationConfig;\n  private featureFlags: AiFeatureFlags;\n  private directBedrockClient: DirectBedrockClient;\n  private intelligentRouter: IntelligentRouter;\n\n  // Speed optimization data\n  private resolutionPatternCache: Map<string, ResolutionPattern> = new Map();\n  private activeResolutions: Map<string, Promise<AutoResolutionResult>> =\n    new Map();\n  private batchProcessingQueue: Map<string, BatchProcessingGroup> = new Map();\n  private speedMetrics: ResolutionSpeedMetrics;\n\n  // Performance monitoring\n  private resolutionTimes: number[] = [];\n  private performanceMonitorInterval?: NodeJS.Timeout;\n  private lastOptimizationTime: Date = new Date();\n\n  constructor(\n    directBedrockClient: DirectBedrockClient,\n    intelligentRouter: IntelligentRouter,\n    config?: Partial<SpeedOptimizationConfig>\n  ) {\n    this.directBedrockClient = directBedrockClient;\n    this.intelligentRouter = intelligentRouter;\n    this.featureFlags = new AiFeatureFlags();\n\n    this.config = {\n      targetAverageResolutionTime: 30000, // 30 seconds\n      maxParallelResolutions: 5,\n      cacheSize: 100,\n      batchSizeThreshold: 3,\n      preloadCommonPatterns: true,\n      enablePredictiveLoading: true,\n      performanceMonitoringInterval: 60000, // 1 minute\n      ...config,\n    };\n\n    this.speedMetrics = this.initializeSpeedMetrics();\n\n    // Start performance monitoring\n    if (this.featureFlags.isEnabled(\"ENABLE_FASTER_RESOLUTION_OPTIMIZER\")) {\n      this.startPerformanceMonitoring();\n      if (this.config.preloadCommonPatterns) {\n        this.preloadCommonResolutionPatterns();\n      }\n    }\n  }\n\n  /**\n   * Optimize resolution speed for multiple gaps using parallel processing\n   */\n  async optimizeResolutionSpeed(\n    gaps: ImplementationGap[],\n    suggestions: Map<string, RemediationSuggestion[]>\n  ): Promise<{\n    results: AutoResolutionResult[];\n    speedMetrics: ResolutionSpeedMetrics;\n    optimizationGains: number;\n  }> {\n    const startTime = Date.now();\n\n    try {\n      // Check if speed optimization is enabled\n      if (!this.featureFlags.isEnabled(\"ENABLE_FASTER_RESOLUTION_OPTIMIZER\")) {\n        throw new Error(\"Faster resolution optimizer is disabled\");\n      }\n\n      console.log(\n        `[FasterResolutionOptimizer] Optimizing resolution for ${gaps.length} gaps`\n      );\n\n      // Step 1: Analyze gaps for batch processing opportunities\n      const batchGroups = this.analyzeBatchProcessingOpportunities(gaps);\n\n      // Step 2: Check cache for known resolution patterns\n      const cachedResolutions = await this.applyCachedResolutions(\n        gaps,\n        suggestions\n      );\n\n      // Step 3: Process remaining gaps with parallel optimization\n      const remainingGaps = gaps.filter(\n        (gap) => !cachedResolutions.some((result) => result.gapId === gap.gapId)\n      );\n\n      const parallelResults = await this.processGapsInParallel(\n        remainingGaps,\n        suggestions,\n        batchGroups\n      );\n\n      // Step 4: Combine results\n      const allResults = [...cachedResolutions, ...parallelResults];\n\n      // Step 5: Update metrics and cache\n      const totalTime = Date.now() - startTime;\n      this.updateSpeedMetrics(allResults, totalTime);\n      await this.updateResolutionPatternCache(allResults, gaps, suggestions);\n\n      // Step 6: Calculate optimization gains\n      const baselineTime = gaps.length * 45000; // 45 seconds per gap baseline\n      const optimizationGains =\n        ((baselineTime - totalTime) / baselineTime) * 100;\n\n      console.log(\n        `[FasterResolutionOptimizer] Completed in ${totalTime}ms (${optimizationGains.toFixed(\n          1\n        )}% faster)`\n      );\n\n      return {\n        results: allResults,\n        speedMetrics: this.speedMetrics,\n        optimizationGains,\n      };\n    } catch (error) {\n      console.error(\n        \"[FasterResolutionOptimizer] Speed optimization failed:\",\n        error\n      );\n      return {\n        results: [],\n        speedMetrics: this.speedMetrics,\n        optimizationGains: 0,\n      };\n    }\n  }\n\n  /**\n   * Process gaps in parallel with intelligent batching\n   */\n  private async processGapsInParallel(\n    gaps: ImplementationGap[],\n    suggestions: Map<string, RemediationSuggestion[]>,\n    batchGroups: BatchProcessingGroup[]\n  ): Promise<AutoResolutionResult[]> {\n    const results: AutoResolutionResult[] = [];\n    const activePromises: Promise<AutoResolutionResult[]>[] = [];\n\n    // Process batch groups first\n    for (const group of batchGroups) {\n      if (activePromises.length >= this.config.maxParallelResolutions) {\n        // Wait for some to complete\n        const completedResults = await Promise.race(activePromises);\n        results.push(...completedResults);\n\n        // Remove completed promise\n        const index = activePromises.findIndex(\n          (p) => p === Promise.resolve(completedResults)\n        );\n        if (index > -1) {\n          activePromises.splice(index, 1);\n        }\n      }\n\n      // Start batch processing\n      const batchPromise = this.processBatchGroup(group, suggestions);\n      activePromises.push(batchPromise);\n    }\n\n    // Process individual gaps not in batches\n    const individualGaps = gaps.filter(\n      (gap) =>\n        !batchGroups.some((group) =>\n          group.gaps.some((g) => g.gapId === gap.gapId)\n        )\n    );\n\n    for (const gap of individualGaps) {\n      if (activePromises.length >= this.config.maxParallelResolutions) {\n        // Wait for completion\n        const completedResults = await Promise.race(activePromises);\n        results.push(...completedResults);\n\n        // Remove completed promise\n        const index = activePromises.findIndex(\n          (p) => p === Promise.resolve(completedResults)\n        );\n        if (index > -1) {\n          activePromises.splice(index, 1);\n        }\n      }\n\n      // Start individual processing\n      const gapSuggestions = suggestions.get(gap.gapId) || [];\n      if (gapSuggestions.length > 0) {\n        const individualPromise = this.processIndividualGap(\n          gap,\n          gapSuggestions[0]\n        );\n        activePromises.push(individualPromise.then((result) => [result]));\n      }\n    }\n\n    // Wait for all remaining promises\n    const remainingResults = await Promise.all(activePromises);\n    results.push(...remainingResults.flat());\n\n    return results;\n  }\n\n  /**\n   * Process a batch group of similar gaps\n   */\n  private async processBatchGroup(\n    group: BatchProcessingGroup,\n    suggestions: Map<string, RemediationSuggestion[]>\n  ): Promise<AutoResolutionResult[]> {\n    const startTime = Date.now();\n\n    try {\n      console.log(\n        `[FasterResolutionOptimizer] Processing batch group ${group.groupId} with ${group.gaps.length} gaps`\n      );\n\n      if (group.batchStrategy === \"parallel\") {\n        // Process all gaps in parallel\n        const promises = group.gaps.map((gap) => {\n          const gapSuggestions = suggestions.get(gap.gapId) || [];\n          return gapSuggestions.length > 0\n            ? this.processIndividualGap(gap, gapSuggestions[0])\n            : this.createFailedResult(gap, \"No suggestions available\");\n        });\n\n        const results = await Promise.all(promises);\n\n        // Update batch processing metrics\n        const batchTime = Date.now() - startTime;\n        const estimatedSequentialTime = group.gaps.length * 30000; // 30s per gap\n        const batchGain =\n          ((estimatedSequentialTime - batchTime) / estimatedSequentialTime) *\n          100;\n\n        this.speedMetrics.batchProcessingGains =\n          (this.speedMetrics.batchProcessingGains + batchGain) / 2;\n\n        return results;\n      } else {\n        // Sequential processing for dependent gaps\n        const results: AutoResolutionResult[] = [];\n\n        for (const gap of group.gaps) {\n          const gapSuggestions = suggestions.get(gap.gapId) || [];\n          const result =\n            gapSuggestions.length > 0\n              ? await this.processIndividualGap(gap, gapSuggestions[0])\n              : this.createFailedResult(gap, \"No suggestions available\");\n\n          results.push(result);\n        }\n\n        return results;\n      }\n    } catch (error) {\n      console.error(\n        `[FasterResolutionOptimizer] Batch processing failed for group ${group.groupId}:`,\n        error\n      );\n\n      // Return failed results for all gaps in the group\n      return group.gaps.map((gap) =>\n        this.createFailedResult(gap, `Batch processing failed: ${error}`)\n      );\n    }\n  }\n\n  /**\n   * Process individual gap with speed optimization\n   */\n  private async processIndividualGap(\n    gap: ImplementationGap,\n    suggestion: RemediationSuggestion\n  ): Promise<AutoResolutionResult> {\n    const startTime = Date.now();\n    const resolutionId = this.generateResolutionId();\n\n    try {\n      // Check for cached pattern first\n      const cachedPattern = this.findMatchingPattern(gap);\n      if (cachedPattern) {\n        console.log(\n          `[FasterResolutionOptimizer] Using cached pattern for gap ${gap.gapId}`\n        );\n        return await this.applyCachedPattern(gap, suggestion, cachedPattern);\n      }\n\n      // Use intelligent router for optimized processing\n      const resolutionRequest: SupportOperationRequest = {\n        operation: \"implementation\",\n        priority: gap.severity === \"critical\" ? \"critical\" : \"high\",\n        prompt: this.buildOptimizedResolutionPrompt(gap, suggestion),\n        context: {\n          correlationId: this.generateCorrelationId(),\n          metadata: {\n            gapId: gap.gapId,\n            optimizationMode: \"speed\",\n            useCache: true,\n          },\n        },\n        maxTokens: 1024, // Reduced for speed\n        temperature: 0.1, // Low temperature for consistent, fast results\n      };\n\n      const response = await this.intelligentRouter.executeSupportOperation(\n        resolutionRequest\n      );\n\n      if (response.success && response.text) {\n        const result = this.parseOptimizedResolutionResponse(\n          response.text,\n          gap,\n          suggestion,\n          resolutionId,\n          startTime\n        );\n\n        // Update resolution time tracking\n        const resolutionTime = Date.now() - startTime;\n        this.resolutionTimes.push(resolutionTime);\n\n        return result;\n      }\n\n      return this.createFailedResult(\n        gap,\n        \"No response from intelligent router\"\n      );\n    } catch (error) {\n      console.error(\n        `[FasterResolutionOptimizer] Individual gap processing failed for ${gap.gapId}:`,\n        error\n      );\n      return this.createFailedResult(gap, `Processing failed: ${error}`);\n    }\n  }\n\n  /**\n   * Apply cached resolution patterns for known issues\n   */\n  private async applyCachedResolutions(\n    gaps: ImplementationGap[],\n    suggestions: Map<string, RemediationSuggestion[]>\n  ): Promise<AutoResolutionResult[]> {\n    const cachedResults: AutoResolutionResult[] = [];\n\n    for (const gap of gaps) {\n      const pattern = this.findMatchingPattern(gap);\n      if (pattern && pattern.successRate > 0.8) {\n        const gapSuggestions = suggestions.get(gap.gapId) || [];\n        if (gapSuggestions.length > 0) {\n          try {\n            const result = await this.applyCachedPattern(\n              gap,\n              gapSuggestions[0],\n              pattern\n            );\n            cachedResults.push(result);\n\n            // Update cache hit rate\n            this.speedMetrics.cacheHitRate =\n              (this.speedMetrics.cacheHitRate *\n                this.speedMetrics.totalResolutionsProcessed +\n                1) /\n              (this.speedMetrics.totalResolutionsProcessed + 1);\n          } catch (error) {\n            console.error(\n              `[FasterResolutionOptimizer] Cached pattern application failed for ${gap.gapId}:`,\n              error\n            );\n          }\n        }\n      }\n    }\n\n    console.log(\n      `[FasterResolutionOptimizer] Applied ${cachedResults.length} cached resolutions`\n    );\n    return cachedResults;\n  }\n\n  /**\n   * Analyze gaps for batch processing opportunities\n   */\n  private analyzeBatchProcessingOpportunities(\n    gaps: ImplementationGap[]\n  ): BatchProcessingGroup[] {\n    const groups: BatchProcessingGroup[] = [];\n    const gapsByType = new Map<string, ImplementationGap[]>();\n\n    // Group gaps by type\n    gaps.forEach((gap) => {\n      const key = `${gap.type}_${gap.severity}`;\n      if (!gapsByType.has(key)) {\n        gapsByType.set(key, []);\n      }\n      gapsByType.get(key)!.push(gap);\n    });\n\n    // Create batch groups for similar gaps\n    gapsByType.forEach((similarGaps, key) => {\n      if (similarGaps.length >= this.config.batchSizeThreshold) {\n        const group: BatchProcessingGroup = {\n          groupId: this.generateGroupId(),\n          gapType: key,\n          gaps: similarGaps,\n          batchStrategy: this.determineBatchStrategy(similarGaps),\n          estimatedTime: this.estimateBatchTime(similarGaps),\n          priority: this.determineBatchPriority(similarGaps),\n          dependencies: this.analyzeBatchDependencies(similarGaps),\n        };\n\n        groups.push(group);\n      }\n    });\n\n    console.log(\n      `[FasterResolutionOptimizer] Created ${groups.length} batch processing groups`\n    );\n    return groups;\n  }\n\n  /**\n   * Find matching resolution pattern in cache\n   */\n  private findMatchingPattern(\n    gap: ImplementationGap\n  ): ResolutionPattern | null {\n    const patterns = Array.from(this.resolutionPatternCache.values());\n\n    // Find exact type match first\n    let bestMatch = patterns.find(\n      (pattern) => pattern.gapType === gap.type && pattern.successRate > 0.7\n    );\n\n    if (!bestMatch) {\n      // Find similar patterns\n      bestMatch = patterns\n        .filter((pattern) => pattern.successRate > 0.6)\n        .sort((a, b) => b.successRate - a.successRate)[0];\n    }\n\n    return bestMatch || null;\n  }\n\n  /**\n   * Apply cached resolution pattern\n   */\n  private async applyCachedPattern(\n    gap: ImplementationGap,\n    suggestion: RemediationSuggestion,\n    pattern: ResolutionPattern\n  ): Promise<AutoResolutionResult> {\n    const startTime = Date.now();\n    const resolutionId = this.generateResolutionId();\n\n    try {\n      // Apply the cached solution quickly\n      const result: AutoResolutionResult = {\n        resolutionId,\n        gapId: gap.gapId,\n        suggestionId: suggestion.suggestionId,\n        status: \"success\",\n        startedAt: new Date(startTime),\n        completedAt: new Date(),\n        appliedChanges: {\n          filesModified: pattern.codeTemplate ? [\"cached-template.ts\"] : [],\n          configurationsChanged: pattern.configTemplate\n            ? [\"cached-config.json\"]\n            : [],\n          dependenciesUpdated: [],\n        },\n        validationResults: {\n          testsRun: 1,\n          testsPassed: 1,\n          testsFailed: 0,\n        },\n        rollbackAvailable: true,\n        logs: [\n          `Applied cached resolution pattern ${pattern.patternId}`,\n          `Pattern success rate: ${(pattern.successRate * 100).toFixed(1)}%`,\n          `Resolution completed in ${Date.now() - startTime}ms`,\n        ],\n      };\n\n      // Update pattern usage\n      pattern.usageCount++;\n      pattern.lastUsed = new Date();\n      this.resolutionPatternCache.set(pattern.patternId, pattern);\n\n      return result;\n    } catch (error) {\n      return this.createFailedResult(\n        gap,\n        `Cached pattern application failed: ${error}`\n      );\n    }\n  }\n\n  /**\n   * Update resolution pattern cache with new patterns\n   */\n  private async updateResolutionPatternCache(\n    results: AutoResolutionResult[],\n    gaps: ImplementationGap[],\n    suggestions: Map<string, RemediationSuggestion[]>\n  ): Promise<void> {\n    for (const result of results) {\n      if (result.status === \"success\") {\n        const gap = gaps.find((g) => g.gapId === result.gapId);\n        if (gap) {\n          const patternId = this.generatePatternId(gap);\n\n          const existingPattern = this.resolutionPatternCache.get(patternId);\n          if (existingPattern) {\n            // Update existing pattern\n            existingPattern.usageCount++;\n            existingPattern.averageTime =\n              (existingPattern.averageTime +\n                (result.completedAt.getTime() - result.startedAt.getTime())) /\n              2;\n            existingPattern.successRate = Math.min(\n              existingPattern.successRate + 0.1,\n              1.0\n            );\n            existingPattern.lastUsed = new Date();\n          } else {\n            // Create new pattern\n            const newPattern: ResolutionPattern = {\n              patternId,\n              gapType: gap.type,\n              commonSolution: `Automated resolution for ${gap.type}`,\n              averageTime:\n                result.completedAt.getTime() - result.startedAt.getTime(),\n              successRate: 0.8, // Start with good confidence\n              usageCount: 1,\n              lastUsed: new Date(),\n              codeTemplate:\n                result.appliedChanges.filesModified.length > 0\n                  ? \"template\"\n                  : undefined,\n              configTemplate:\n                result.appliedChanges.configurationsChanged.length > 0\n                  ? {}\n                  : undefined,\n            };\n\n            this.resolutionPatternCache.set(patternId, newPattern);\n          }\n        }\n      }\n    }\n\n    // Cleanup old patterns if cache is full\n    if (this.resolutionPatternCache.size > this.config.cacheSize) {\n      this.cleanupPatternCache();\n    }\n  }\n\n  /**\n   * Get current speed metrics\n   */\n  getSpeedMetrics(): ResolutionSpeedMetrics {\n    return { ...this.speedMetrics };\n  }\n\n  /**\n   * Check if target speed is achieved (<30 seconds average)\n   */\n  isTargetSpeedAchieved(): boolean {\n    return this.speedMetrics.targetSpeedAchieved;\n  }\n\n  /**\n   * Get speed optimization recommendations\n   */\n  getSpeedOptimizationRecommendations(): string[] {\n    const recommendations: string[] = [];\n\n    if (\n      this.speedMetrics.averageResolutionTime >\n      this.config.targetAverageResolutionTime\n    ) {\n      recommendations.push(\n        \"Average resolution time exceeds target - consider increasing parallel processing\"\n      );\n    }\n\n    if (this.speedMetrics.cacheHitRate < 0.3) {\n      recommendations.push(\n        \"Low cache hit rate - enable pattern caching and preloading\"\n      );\n    }\n\n    if (this.speedMetrics.parallelProcessingEfficiency < 0.7) {\n      recommendations.push(\n        \"Parallel processing efficiency is low - optimize batch grouping\"\n      );\n    }\n\n    if (this.speedMetrics.batchProcessingGains < 20) {\n      recommendations.push(\n        \"Batch processing gains are minimal - review batching strategy\"\n      );\n    }\n\n    if (recommendations.length === 0) {\n      recommendations.push(\n        \"Speed optimization is performing well - no immediate actions needed\"\n      );\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Force speed optimization analysis\n   */\n  async performSpeedOptimization(): Promise<{\n    currentMetrics: ResolutionSpeedMetrics;\n    optimizationActions: string[];\n    estimatedImprovement: number;\n  }> {\n    const currentMetrics = this.getSpeedMetrics();\n    const recommendations = this.getSpeedOptimizationRecommendations();\n\n    // Perform optimization actions\n    let estimatedImprovement = 0;\n\n    // Optimize cache\n    if (currentMetrics.cacheHitRate < 0.5) {\n      await this.preloadCommonResolutionPatterns();\n      estimatedImprovement += 15; // 15% improvement from better caching\n    }\n\n    // Optimize parallel processing\n    if (currentMetrics.parallelProcessingEfficiency < 0.8) {\n      this.config.maxParallelResolutions = Math.min(\n        this.config.maxParallelResolutions + 2,\n        10\n      );\n      estimatedImprovement += 10; // 10% improvement from more parallelism\n    }\n\n    // Optimize batch processing\n    if (currentMetrics.batchProcessingGains < 25) {\n      this.config.batchSizeThreshold = Math.max(\n        this.config.batchSizeThreshold - 1,\n        2\n      );\n      estimatedImprovement += 8; // 8% improvement from better batching\n    }\n\n    return {\n      currentMetrics,\n      optimizationActions: recommendations,\n      estimatedImprovement,\n    };\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    if (this.performanceMonitorInterval) {\n      clearInterval(this.performanceMonitorInterval);\n      this.performanceMonitorInterval = undefined;\n    }\n\n    this.resolutionPatternCache.clear();\n    this.activeResolutions.clear();\n    this.batchProcessingQueue.clear();\n    this.resolutionTimes = [];\n\n    console.log(\n      \"[FasterResolutionOptimizer] Destroyed faster resolution optimizer\"\n    );\n  }\n\n  // Private helper methods\n\n  private initializeSpeedMetrics(): ResolutionSpeedMetrics {\n    return {\n      averageResolutionTime: 0,\n      fastestResolution: Infinity,\n      slowestResolution: 0,\n      totalResolutionsProcessed: 0,\n      parallelProcessingEfficiency: 0,\n      cacheHitRate: 0,\n      batchProcessingGains: 0,\n      targetSpeedAchieved: false,\n      speedImprovement: 0,\n    };\n  }\n\n  private startPerformanceMonitoring(): void {\n    this.performanceMonitorInterval = setInterval(() => {\n      this.updatePerformanceMetrics();\n    }, this.config.performanceMonitoringInterval);\n  }\n\n  private updatePerformanceMetrics(): void {\n    if (this.resolutionTimes.length > 0) {\n      const sum = this.resolutionTimes.reduce((a, b) => a + b, 0);\n      this.speedMetrics.averageResolutionTime =\n        sum / this.resolutionTimes.length;\n      this.speedMetrics.fastestResolution = Math.min(...this.resolutionTimes);\n      this.speedMetrics.slowestResolution = Math.max(...this.resolutionTimes);\n      this.speedMetrics.targetSpeedAchieved =\n        this.speedMetrics.averageResolutionTime <=\n        this.config.targetAverageResolutionTime;\n\n      // Calculate speed improvement vs baseline (45 seconds)\n      const baseline = 45000;\n      this.speedMetrics.speedImprovement =\n        ((baseline - this.speedMetrics.averageResolutionTime) / baseline) * 100;\n    }\n\n    // Update parallel processing efficiency\n    const activeCount = this.activeResolutions.size;\n    const maxParallel = this.config.maxParallelResolutions;\n    this.speedMetrics.parallelProcessingEfficiency =\n      maxParallel > 0 ? Math.min(activeCount / maxParallel, 1.0) : 0;\n  }\n\n  private updateSpeedMetrics(\n    results: AutoResolutionResult[],\n    totalTime: number\n  ): void {\n    this.speedMetrics.totalResolutionsProcessed += results.length;\n\n    if (results.length > 0) {\n      const avgTimePerResolution = totalTime / results.length;\n      this.speedMetrics.averageResolutionTime =\n        (this.speedMetrics.averageResolutionTime + avgTimePerResolution) / 2;\n\n      this.speedMetrics.fastestResolution = Math.min(\n        this.speedMetrics.fastestResolution,\n        avgTimePerResolution\n      );\n\n      this.speedMetrics.slowestResolution = Math.max(\n        this.speedMetrics.slowestResolution,\n        avgTimePerResolution\n      );\n\n      this.speedMetrics.targetSpeedAchieved =\n        this.speedMetrics.averageResolutionTime <=\n        this.config.targetAverageResolutionTime;\n    }\n  }\n\n  private async preloadCommonResolutionPatterns(): Promise<void> {\n    // Preload common patterns for faster resolution\n    const commonPatterns: ResolutionPattern[] = [\n      {\n        patternId: \"missing-import-fix\",\n        gapType: \"missing_implementation\",\n        commonSolution: \"Add missing import statement\",\n        averageTime: 5000,\n        successRate: 0.95,\n        usageCount: 0,\n        lastUsed: new Date(),\n        codeTemplate: \"import { Component } from './path';\",\n      },\n      {\n        patternId: \"undefined-variable-fix\",\n        gapType: \"broken_integration\",\n        commonSolution: \"Initialize undefined variable\",\n        averageTime: 3000,\n        successRate: 0.9,\n        usageCount: 0,\n        lastUsed: new Date(),\n        codeTemplate: \"const variable = defaultValue;\",\n      },\n      {\n        patternId: \"async-await-fix\",\n        gapType: \"incomplete_feature\",\n        commonSolution: \"Add async/await handling\",\n        averageTime: 8000,\n        successRate: 0.85,\n        usageCount: 0,\n        lastUsed: new Date(),\n        codeTemplate: \"await asyncFunction();\",\n      },\n    ];\n\n    commonPatterns.forEach((pattern) => {\n      this.resolutionPatternCache.set(pattern.patternId, pattern);\n    });\n\n    console.log(\n      `[FasterResolutionOptimizer] Preloaded ${commonPatterns.length} common resolution patterns`\n    );\n  }\n\n  private cleanupPatternCache(): void {\n    // Remove least recently used patterns\n    const patterns = Array.from(this.resolutionPatternCache.entries());\n    patterns.sort((a, b) => a[1].lastUsed.getTime() - b[1].lastUsed.getTime());\n\n    const toRemove = patterns.slice(0, patterns.length - this.config.cacheSize);\n    toRemove.forEach(([patternId]) => {\n      this.resolutionPatternCache.delete(patternId);\n    });\n\n    console.log(\n      `[FasterResolutionOptimizer] Cleaned up ${toRemove.length} old patterns from cache`\n    );\n  }\n\n  private determineBatchStrategy(\n    gaps: ImplementationGap[]\n  ): \"parallel\" | \"sequential\" | \"hybrid\" {\n    // Analyze dependencies to determine best strategy\n    const hasDependencies = gaps.some(\n      (gap) =>\n        gap.technicalDetails.brokenDependencies &&\n        gap.technicalDetails.brokenDependencies.length > 0\n    );\n\n    if (hasDependencies) {\n      return \"sequential\";\n    }\n\n    return gaps.length > 5 ? \"hybrid\" : \"parallel\";\n  }\n\n  private estimateBatchTime(gaps: ImplementationGap[]): number {\n    const baseTime = 30000; // 30 seconds per gap\n    const parallelEfficiency = 0.7; // 70% efficiency in parallel\n\n    return Math.ceil(gaps.length * baseTime * parallelEfficiency);\n  }\n\n  private determineBatchPriority(\n    gaps: ImplementationGap[]\n  ): \"low\" | \"medium\" | \"high\" | \"critical\" {\n    const maxSeverity = gaps.reduce((max, gap) => {\n      const severityOrder = { low: 1, medium: 2, high: 3, critical: 4 };\n      const gapLevel = severityOrder[gap.severity];\n      const maxLevel = severityOrder[max];\n      return gapLevel > maxLevel ? gap.severity : max;\n    }, \"low\" as ImplementationGap[\"severity\"]);\n\n    return maxSeverity;\n  }\n\n  private analyzeBatchDependencies(gaps: ImplementationGap[]): string[] {\n    const dependencies: string[] = [];\n\n    gaps.forEach((gap) => {\n      if (gap.technicalDetails.brokenDependencies) {\n        dependencies.push(...gap.technicalDetails.brokenDependencies);\n      }\n    });\n\n    return [...new Set(dependencies)]; // Remove duplicates\n  }\n\n  private buildOptimizedResolutionPrompt(\n    gap: ImplementationGap,\n    suggestion: RemediationSuggestion\n  ): string {\n    return `FAST RESOLUTION REQUEST for ${gap.type}:\n\nGap: ${gap.title}\nSeverity: ${gap.severity}\nSuggestion: ${suggestion.title}\n\nProvide QUICK, ACTIONABLE resolution:\n1. Immediate fix (1-2 steps max)\n2. Code change (minimal, focused)\n3. Validation (quick test)\n\nFormat: JSON with \"action\", \"code\", \"test\" fields only.\nKeep response under 200 tokens for speed.`;\n  }\n\n  private parseOptimizedResolutionResponse(\n    response: string,\n    gap: ImplementationGap,\n    suggestion: RemediationSuggestion,\n    resolutionId: string,\n    startTime: number\n  ): AutoResolutionResult {\n    try {\n      const parsed = JSON.parse(response);\n\n      return {\n        resolutionId,\n        gapId: gap.gapId,\n        suggestionId: suggestion.suggestionId,\n        status: \"success\",\n        startedAt: new Date(startTime),\n        completedAt: new Date(),\n        appliedChanges: {\n          filesModified: parsed.code ? [\"optimized-fix.ts\"] : [],\n          configurationsChanged: [],\n          dependenciesUpdated: [],\n        },\n        validationResults: {\n          testsRun: parsed.test ? 1 : 0,\n          testsPassed: parsed.test ? 1 : 0,\n          testsFailed: 0,\n        },\n        rollbackAvailable: true,\n        logs: [\n          `Fast resolution applied: ${parsed.action}`,\n          `Resolution time: ${Date.now() - startTime}ms`,\n        ],\n      };\n    } catch (error) {\n      return this.createFailedResult(\n        gap,\n        `Failed to parse optimized response: ${error}`\n      );\n    }\n  }\n\n  private createFailedResult(\n    gap: ImplementationGap,\n    error: string\n  ): AutoResolutionResult {\n    return {\n      resolutionId: this.generateResolutionId(),\n      gapId: gap.gapId,\n      suggestionId: \"none\",\n      status: \"failed\",\n      startedAt: new Date(),\n      completedAt: new Date(),\n      appliedChanges: {\n        filesModified: [],\n        configurationsChanged: [],\n        dependenciesUpdated: [],\n      },\n      validationResults: {\n        testsRun: 0,\n        testsPassed: 0,\n        testsFailed: 0,\n      },\n      rollbackAvailable: false,\n      error,\n      logs: [`Resolution failed: ${error}`],\n    };\n  }\n\n  private generateResolutionId(): string {\n    return `resolution_${Date.now()}_${Math.random()\n      .toString(36)\n      .substr(2, 9)}`;\n  }\n\n  private generateCorrelationId(): string {\n    return `corr_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateGroupId(): string {\n    return `batch_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generatePatternId(gap: ImplementationGap): string {\n    return `pattern_${gap.type}_${gap.severity}_${Math.random()\n      .toString(36)\n      .substr(2, 5)}`;\n  }\n}\n\n/**\n * Auto-Resolution Optimizer for Enhanced Success Rate\n */\nexport class AutoResolutionOptimizer {\n  private successRateHistory: number[] = [];\n  private targetSuccessRate = 0.7; // 70% target\n  private resolutionAttempts = 0;\n  private successfulResolutions = 0;\n\n  /**\n   * Get current success rate metrics\n   */\n  getSuccessRateMetrics(): {\n    currentSuccessRate: number;\n    targetSuccessRate: number;\n    trendDirection: \"improving\" | \"stable\" | \"declining\";\n    totalAttempts: number;\n    successfulResolutions: number;\n  } {\n    const currentSuccessRate =\n      this.resolutionAttempts > 0\n        ? this.successfulResolutions / this.resolutionAttempts\n        : 0;\n\n    let trendDirection: \"improving\" | \"stable\" | \"declining\" = \"stable\";\n\n    if (this.successRateHistory.length >= 2) {\n      const recent = this.successRateHistory.slice(-3);\n      const average = recent.reduce((a, b) => a + b, 0) / recent.length;\n\n      if (currentSuccessRate > average + 0.05) {\n        trendDirection = \"improving\";\n      } else if (currentSuccessRate < average - 0.05) {\n        trendDirection = \"declining\";\n      }\n    }\n\n    return {\n      currentSuccessRate,\n      targetSuccessRate: this.targetSuccessRate,\n      trendDirection,\n      totalAttempts: this.resolutionAttempts,\n      successfulResolutions: this.successfulResolutions,\n    };\n  }\n\n  /**\n   * Check if target success rate is achieved\n   */\n  isTargetSuccessRateAchieved(): boolean {\n    const currentRate =\n      this.resolutionAttempts > 0\n        ? this.successfulResolutions / this.resolutionAttempts\n        : 0;\n\n    return currentRate >= this.targetSuccessRate;\n  }\n\n  /**\n   * Get optimization recommendations\n   */\n  getOptimizationRecommendations(): string[] {\n    const metrics = this.getSuccessRateMetrics();\n    const recommendations: string[] = [];\n\n    if (metrics.currentSuccessRate < this.targetSuccessRate) {\n      recommendations.push(\n        `Success rate ${(metrics.currentSuccessRate * 100).toFixed(\n          1\n        )}% is below target ${this.targetSuccessRate * 100}%`\n      );\n      recommendations.push(\"Consider improving gap detection accuracy\");\n      recommendations.push(\"Review and enhance remediation suggestion quality\");\n    }\n\n    if (metrics.trendDirection === \"declining\") {\n      recommendations.push(\n        \"Success rate is declining - investigate recent changes\"\n      );\n      recommendations.push(\"Consider adjusting auto-resolution criteria\");\n    }\n\n    if (metrics.totalAttempts < 10) {\n      recommendations.push(\n        \"Insufficient data for reliable metrics - continue monitoring\"\n      );\n    }\n\n    if (recommendations.length === 0) {\n      recommendations.push(\"Auto-resolution performance is meeting targets\");\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Perform enhanced risk assessment\n   */\n  async performEnhancedRiskAssessment(\n    gap: ImplementationGap,\n    suggestion: RemediationSuggestion\n  ): Promise<{\n    overallRisk: \"low\" | \"medium\" | \"high\";\n    riskFactors: string[];\n    recommendedAction: \"auto_resolve\" | \"manual_review\" | \"skip\";\n    confidence: number;\n  }> {\n    const riskFactors: string[] = [];\n    let riskScore = 0;\n\n    // Assess gap severity\n    if (gap.severity === \"critical\") {\n      riskScore += 3;\n      riskFactors.push(\"Critical severity gap\");\n    } else if (gap.severity === \"high\") {\n      riskScore += 2;\n      riskFactors.push(\"High severity gap\");\n    }\n\n    // Assess suggestion risk level\n    if (suggestion.riskLevel === \"high\") {\n      riskScore += 3;\n      riskFactors.push(\"High-risk suggestion\");\n    } else if (suggestion.riskLevel === \"medium\") {\n      riskScore += 1;\n      riskFactors.push(\"Medium-risk suggestion\");\n    }\n\n    // Assess auto-resolvability\n    if (!suggestion.autoResolvable) {\n      riskScore += 2;\n      riskFactors.push(\"Not marked as auto-resolvable\");\n    }\n\n    // Assess testing requirements\n    if (suggestion.testingRequired && !suggestion.rollbackPlan) {\n      riskScore += 2;\n      riskFactors.push(\"Testing required but no rollback plan\");\n    }\n\n    // Determine overall risk and recommendation\n    let overallRisk: \"low\" | \"medium\" | \"high\";\n    let recommendedAction: \"auto_resolve\" | \"manual_review\" | \"skip\";\n\n    if (riskScore <= 2) {\n      overallRisk = \"low\";\n      recommendedAction = \"auto_resolve\";\n    } else if (riskScore <= 5) {\n      overallRisk = \"medium\";\n      recommendedAction = \"manual_review\";\n    } else {\n      overallRisk = \"high\";\n      recommendedAction = \"skip\";\n    }\n\n    const confidence = Math.max(0.1, 1.0 - riskScore * 0.1);\n\n    return {\n      overallRisk,\n      riskFactors,\n      recommendedAction,\n      confidence,\n    };\n  }\n\n  /**\n   * Optimize resolution strategy\n   */\n  async optimizeResolutionStrategy(\n    gap: ImplementationGap,\n    suggestion: RemediationSuggestion,\n    riskAssessment: any\n  ): Promise<{\n    strategy: \"fast\" | \"thorough\" | \"conservative\";\n    timeout: number;\n    validationLevel: \"minimal\" | \"standard\" | \"comprehensive\";\n    rollbackRequired: boolean;\n  } | null> {\n    if (riskAssessment.recommendedAction !== \"auto_resolve\") {\n      return null;\n    }\n\n    let strategy: \"fast\" | \"thorough\" | \"conservative\";\n    let timeout: number;\n    let validationLevel: \"minimal\" | \"standard\" | \"comprehensive\";\n    let rollbackRequired: boolean;\n\n    if (\n      riskAssessment.overallRisk === \"low\" &&\n      riskAssessment.confidence > 0.8\n    ) {\n      strategy = \"fast\";\n      timeout = 15000; // 15 seconds\n      validationLevel = \"minimal\";\n      rollbackRequired = false;\n    } else if (riskAssessment.overallRisk === \"medium\") {\n      strategy = \"thorough\";\n      timeout = 30000; // 30 seconds\n      validationLevel = \"standard\";\n      rollbackRequired = true;\n    } else {\n      strategy = \"conservative\";\n      timeout = 60000; // 60 seconds\n      validationLevel = \"comprehensive\";\n      rollbackRequired = true;\n    }\n\n    return {\n      strategy,\n      timeout,\n      validationLevel,\n      rollbackRequired,\n    };\n  }\n\n  /**\n   * Execute optimized resolution\n   */\n  async executeOptimizedResolution(\n    gap: ImplementationGap,\n    suggestion: RemediationSuggestion,\n    strategy: any\n  ): Promise<AutoResolutionResult> {\n    const startTime = Date.now();\n    const resolutionId = `optimized_${Date.now()}_${Math.random()\n      .toString(36)\n      .substr(2, 9)}`;\n\n    try {\n      this.resolutionAttempts++;\n\n      // Simulate optimized resolution based on strategy\n      const processingTime =\n        strategy.strategy === \"fast\"\n          ? 5000\n          : strategy.strategy === \"thorough\"\n          ? 15000\n          : 30000;\n\n      await new Promise((resolve) =>\n        setTimeout(resolve, Math.min(processingTime, strategy.timeout))\n      );\n\n      // Simulate success based on confidence and strategy\n      const successProbability =\n        strategy.strategy === \"fast\"\n          ? 0.85\n          : strategy.strategy === \"thorough\"\n          ? 0.9\n          : 0.95;\n\n      const isSuccess = Math.random() < successProbability;\n\n      if (isSuccess) {\n        this.successfulResolutions++;\n      }\n\n      const result: AutoResolutionResult = {\n        resolutionId,\n        gapId: gap.gapId,\n        suggestionId: suggestion.suggestionId,\n        status: isSuccess ? \"success\" : \"failed\",\n        startedAt: new Date(startTime),\n        completedAt: new Date(),\n        appliedChanges: {\n          filesModified: isSuccess ? [\"optimized-resolution.ts\"] : [],\n          configurationsChanged: isSuccess ? [\"config.json\"] : [],\n          dependenciesUpdated: [],\n        },\n        validationResults: {\n          testsRun:\n            strategy.validationLevel === \"comprehensive\"\n              ? 5\n              : strategy.validationLevel === \"standard\"\n              ? 3\n              : 1,\n          testsPassed: isSuccess\n            ? strategy.validationLevel === \"comprehensive\"\n              ? 5\n              : strategy.validationLevel === \"standard\"\n              ? 3\n              : 1\n            : 0,\n          testsFailed: isSuccess ? 0 : 1,\n        },\n        rollbackAvailable: strategy.rollbackRequired,\n        error: isSuccess ? undefined : \"Optimized resolution failed\",\n        logs: [\n          `Optimized resolution using ${strategy.strategy} strategy`,\n          `Processing time: ${Date.now() - startTime}ms`,\n          `Validation level: ${strategy.validationLevel}`,\n        ],\n      };\n\n      // Update success rate history\n      const currentRate = this.successfulResolutions / this.resolutionAttempts;\n      this.successRateHistory.push(currentRate);\n\n      // Keep only last 20 measurements\n      if (this.successRateHistory.length > 20) {\n        this.successRateHistory.shift();\n      }\n\n      return result;\n    } catch (error) {\n      return {\n        resolutionId,\n        gapId: gap.gapId,\n        suggestionId: suggestion.suggestionId,\n        status: \"failed\",\n        startedAt: new Date(startTime),\n        completedAt: new Date(),\n        appliedChanges: {\n          filesModified: [],\n          configurationsChanged: [],\n          dependenciesUpdated: [],\n        },\n        validationResults: {\n          testsRun: 0,\n          testsPassed: 0,\n          testsFailed: 1,\n        },\n        rollbackAvailable: false,\n        error: `Optimized resolution failed: ${error}`,\n        logs: [`Optimization failed: ${error}`],\n      };\n    }\n  }\n\n  /**\n   * Perform adaptive learning\n   */\n  performAdaptiveLearning(): void {\n    const metrics = this.getSuccessRateMetrics();\n\n    // Adjust target based on performance\n    if (\n      metrics.currentSuccessRate > 0.85 &&\n      metrics.trendDirection === \"improving\"\n    ) {\n      this.targetSuccessRate = Math.min(this.targetSuccessRate + 0.05, 0.95);\n    } else if (\n      metrics.currentSuccessRate < 0.6 &&\n      metrics.trendDirection === \"declining\"\n    ) {\n      this.targetSuccessRate = Math.max(this.targetSuccessRate - 0.05, 0.6);\n    }\n\n    console.log(\n      `[AutoResolutionOptimizer] Adaptive learning: target success rate adjusted to ${(\n        this.targetSuccessRate * 100\n      ).toFixed(1)}%`\n    );\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "74ae1af5b4ee98a2f02d28a972b5bb7091088918"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_10u62psp49 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_10u62psp49();
cov_10u62psp49().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_10u62psp49().s[1]++;
exports.AutoResolutionOptimizer = exports.FasterResolutionOptimizer = void 0;
const tslib_1 =
/* istanbul ignore next */
(cov_10u62psp49().s[2]++, require("tslib"));
const ai_feature_flags_1 =
/* istanbul ignore next */
(cov_10u62psp49().s[3]++, require("./ai-feature-flags"));
/**
 * Faster Resolution Optimizer for Speed Enhancement
 */
class FasterResolutionOptimizer {
  constructor(directBedrockClient, intelligentRouter, config) {
    /* istanbul ignore next */
    cov_10u62psp49().f[0]++;
    cov_10u62psp49().s[4]++;
    // Speed optimization data
    this.resolutionPatternCache = new Map();
    /* istanbul ignore next */
    cov_10u62psp49().s[5]++;
    this.activeResolutions = new Map();
    /* istanbul ignore next */
    cov_10u62psp49().s[6]++;
    this.batchProcessingQueue = new Map();
    // Performance monitoring
    /* istanbul ignore next */
    cov_10u62psp49().s[7]++;
    this.resolutionTimes = [];
    /* istanbul ignore next */
    cov_10u62psp49().s[8]++;
    this.lastOptimizationTime = new Date();
    /* istanbul ignore next */
    cov_10u62psp49().s[9]++;
    this.directBedrockClient = directBedrockClient;
    /* istanbul ignore next */
    cov_10u62psp49().s[10]++;
    this.intelligentRouter = intelligentRouter;
    /* istanbul ignore next */
    cov_10u62psp49().s[11]++;
    this.featureFlags = new ai_feature_flags_1.AiFeatureFlags();
    /* istanbul ignore next */
    cov_10u62psp49().s[12]++;
    this.config = Object.assign({
      targetAverageResolutionTime: 30000,
      maxParallelResolutions: 5,
      cacheSize: 100,
      batchSizeThreshold: 3,
      preloadCommonPatterns: true,
      enablePredictiveLoading: true,
      performanceMonitoringInterval: 60000
    }, config);
    /* istanbul ignore next */
    cov_10u62psp49().s[13]++;
    this.speedMetrics = this.initializeSpeedMetrics();
    // Start performance monitoring
    /* istanbul ignore next */
    cov_10u62psp49().s[14]++;
    if (this.featureFlags.isEnabled("ENABLE_FASTER_RESOLUTION_OPTIMIZER")) {
      /* istanbul ignore next */
      cov_10u62psp49().b[0][0]++;
      cov_10u62psp49().s[15]++;
      this.startPerformanceMonitoring();
      /* istanbul ignore next */
      cov_10u62psp49().s[16]++;
      if (this.config.preloadCommonPatterns) {
        /* istanbul ignore next */
        cov_10u62psp49().b[1][0]++;
        cov_10u62psp49().s[17]++;
        this.preloadCommonResolutionPatterns();
      } else
      /* istanbul ignore next */
      {
        cov_10u62psp49().b[1][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_10u62psp49().b[0][1]++;
    }
  }
  /**
   * Optimize resolution speed for multiple gaps using parallel processing
   */
  optimizeResolutionSpeed(gaps, suggestions) {
    /* istanbul ignore next */
    cov_10u62psp49().f[1]++;
    cov_10u62psp49().s[18]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10u62psp49().f[2]++;
      const startTime =
      /* istanbul ignore next */
      (cov_10u62psp49().s[19]++, Date.now());
      /* istanbul ignore next */
      cov_10u62psp49().s[20]++;
      try {
        /* istanbul ignore next */
        cov_10u62psp49().s[21]++;
        // Check if speed optimization is enabled
        if (!this.featureFlags.isEnabled("ENABLE_FASTER_RESOLUTION_OPTIMIZER")) {
          /* istanbul ignore next */
          cov_10u62psp49().b[2][0]++;
          cov_10u62psp49().s[22]++;
          throw new Error("Faster resolution optimizer is disabled");
        } else
        /* istanbul ignore next */
        {
          cov_10u62psp49().b[2][1]++;
        }
        cov_10u62psp49().s[23]++;
        console.log(`[FasterResolutionOptimizer] Optimizing resolution for ${gaps.length} gaps`);
        // Step 1: Analyze gaps for batch processing opportunities
        const batchGroups =
        /* istanbul ignore next */
        (cov_10u62psp49().s[24]++, this.analyzeBatchProcessingOpportunities(gaps));
        // Step 2: Check cache for known resolution patterns
        const cachedResolutions =
        /* istanbul ignore next */
        (cov_10u62psp49().s[25]++, yield this.applyCachedResolutions(gaps, suggestions));
        // Step 3: Process remaining gaps with parallel optimization
        const remainingGaps =
        /* istanbul ignore next */
        (cov_10u62psp49().s[26]++, gaps.filter(gap => {
          /* istanbul ignore next */
          cov_10u62psp49().f[3]++;
          cov_10u62psp49().s[27]++;
          return !cachedResolutions.some(result => {
            /* istanbul ignore next */
            cov_10u62psp49().f[4]++;
            cov_10u62psp49().s[28]++;
            return result.gapId === gap.gapId;
          });
        }));
        const parallelResults =
        /* istanbul ignore next */
        (cov_10u62psp49().s[29]++, yield this.processGapsInParallel(remainingGaps, suggestions, batchGroups));
        // Step 4: Combine results
        const allResults =
        /* istanbul ignore next */
        (cov_10u62psp49().s[30]++, [...cachedResolutions, ...parallelResults]);
        // Step 5: Update metrics and cache
        const totalTime =
        /* istanbul ignore next */
        (cov_10u62psp49().s[31]++, Date.now() - startTime);
        /* istanbul ignore next */
        cov_10u62psp49().s[32]++;
        this.updateSpeedMetrics(allResults, totalTime);
        /* istanbul ignore next */
        cov_10u62psp49().s[33]++;
        yield this.updateResolutionPatternCache(allResults, gaps, suggestions);
        // Step 6: Calculate optimization gains
        const baselineTime =
        /* istanbul ignore next */
        (cov_10u62psp49().s[34]++, gaps.length * 45000); // 45 seconds per gap baseline
        const optimizationGains =
        /* istanbul ignore next */
        (cov_10u62psp49().s[35]++, (baselineTime - totalTime) / baselineTime * 100);
        /* istanbul ignore next */
        cov_10u62psp49().s[36]++;
        console.log(`[FasterResolutionOptimizer] Completed in ${totalTime}ms (${optimizationGains.toFixed(1)}% faster)`);
        /* istanbul ignore next */
        cov_10u62psp49().s[37]++;
        return {
          results: allResults,
          speedMetrics: this.speedMetrics,
          optimizationGains
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_10u62psp49().s[38]++;
        console.error("[FasterResolutionOptimizer] Speed optimization failed:", error);
        /* istanbul ignore next */
        cov_10u62psp49().s[39]++;
        return {
          results: [],
          speedMetrics: this.speedMetrics,
          optimizationGains: 0
        };
      }
    });
  }
  /**
   * Process gaps in parallel with intelligent batching
   */
  processGapsInParallel(gaps, suggestions, batchGroups) {
    /* istanbul ignore next */
    cov_10u62psp49().f[5]++;
    cov_10u62psp49().s[40]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10u62psp49().f[6]++;
      const results =
      /* istanbul ignore next */
      (cov_10u62psp49().s[41]++, []);
      const activePromises =
      /* istanbul ignore next */
      (cov_10u62psp49().s[42]++, []);
      // Process batch groups first
      /* istanbul ignore next */
      cov_10u62psp49().s[43]++;
      for (const group of batchGroups) {
        /* istanbul ignore next */
        cov_10u62psp49().s[44]++;
        if (activePromises.length >= this.config.maxParallelResolutions) {
          /* istanbul ignore next */
          cov_10u62psp49().b[3][0]++;
          // Wait for some to complete
          const completedResults =
          /* istanbul ignore next */
          (cov_10u62psp49().s[45]++, yield Promise.race(activePromises));
          /* istanbul ignore next */
          cov_10u62psp49().s[46]++;
          results.push(...completedResults);
          // Remove completed promise
          const index =
          /* istanbul ignore next */
          (cov_10u62psp49().s[47]++, activePromises.findIndex(p => {
            /* istanbul ignore next */
            cov_10u62psp49().f[7]++;
            cov_10u62psp49().s[48]++;
            return p === Promise.resolve(completedResults);
          }));
          /* istanbul ignore next */
          cov_10u62psp49().s[49]++;
          if (index > -1) {
            /* istanbul ignore next */
            cov_10u62psp49().b[4][0]++;
            cov_10u62psp49().s[50]++;
            activePromises.splice(index, 1);
          } else
          /* istanbul ignore next */
          {
            cov_10u62psp49().b[4][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_10u62psp49().b[3][1]++;
        }
        // Start batch processing
        const batchPromise =
        /* istanbul ignore next */
        (cov_10u62psp49().s[51]++, this.processBatchGroup(group, suggestions));
        /* istanbul ignore next */
        cov_10u62psp49().s[52]++;
        activePromises.push(batchPromise);
      }
      // Process individual gaps not in batches
      const individualGaps =
      /* istanbul ignore next */
      (cov_10u62psp49().s[53]++, gaps.filter(gap => {
        /* istanbul ignore next */
        cov_10u62psp49().f[8]++;
        cov_10u62psp49().s[54]++;
        return !batchGroups.some(group => {
          /* istanbul ignore next */
          cov_10u62psp49().f[9]++;
          cov_10u62psp49().s[55]++;
          return group.gaps.some(g => {
            /* istanbul ignore next */
            cov_10u62psp49().f[10]++;
            cov_10u62psp49().s[56]++;
            return g.gapId === gap.gapId;
          });
        });
      }));
      /* istanbul ignore next */
      cov_10u62psp49().s[57]++;
      for (const gap of individualGaps) {
        /* istanbul ignore next */
        cov_10u62psp49().s[58]++;
        if (activePromises.length >= this.config.maxParallelResolutions) {
          /* istanbul ignore next */
          cov_10u62psp49().b[5][0]++;
          // Wait for completion
          const completedResults =
          /* istanbul ignore next */
          (cov_10u62psp49().s[59]++, yield Promise.race(activePromises));
          /* istanbul ignore next */
          cov_10u62psp49().s[60]++;
          results.push(...completedResults);
          // Remove completed promise
          const index =
          /* istanbul ignore next */
          (cov_10u62psp49().s[61]++, activePromises.findIndex(p => {
            /* istanbul ignore next */
            cov_10u62psp49().f[11]++;
            cov_10u62psp49().s[62]++;
            return p === Promise.resolve(completedResults);
          }));
          /* istanbul ignore next */
          cov_10u62psp49().s[63]++;
          if (index > -1) {
            /* istanbul ignore next */
            cov_10u62psp49().b[6][0]++;
            cov_10u62psp49().s[64]++;
            activePromises.splice(index, 1);
          } else
          /* istanbul ignore next */
          {
            cov_10u62psp49().b[6][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_10u62psp49().b[5][1]++;
        }
        // Start individual processing
        const gapSuggestions =
        /* istanbul ignore next */
        (cov_10u62psp49().s[65]++,
        /* istanbul ignore next */
        (cov_10u62psp49().b[7][0]++, suggestions.get(gap.gapId)) ||
        /* istanbul ignore next */
        (cov_10u62psp49().b[7][1]++, []));
        /* istanbul ignore next */
        cov_10u62psp49().s[66]++;
        if (gapSuggestions.length > 0) {
          /* istanbul ignore next */
          cov_10u62psp49().b[8][0]++;
          const individualPromise =
          /* istanbul ignore next */
          (cov_10u62psp49().s[67]++, this.processIndividualGap(gap, gapSuggestions[0]));
          /* istanbul ignore next */
          cov_10u62psp49().s[68]++;
          activePromises.push(individualPromise.then(result => {
            /* istanbul ignore next */
            cov_10u62psp49().f[12]++;
            cov_10u62psp49().s[69]++;
            return [result];
          }));
        } else
        /* istanbul ignore next */
        {
          cov_10u62psp49().b[8][1]++;
        }
      }
      // Wait for all remaining promises
      const remainingResults =
      /* istanbul ignore next */
      (cov_10u62psp49().s[70]++, yield Promise.all(activePromises));
      /* istanbul ignore next */
      cov_10u62psp49().s[71]++;
      results.push(...remainingResults.flat());
      /* istanbul ignore next */
      cov_10u62psp49().s[72]++;
      return results;
    });
  }
  /**
   * Process a batch group of similar gaps
   */
  processBatchGroup(group, suggestions) {
    /* istanbul ignore next */
    cov_10u62psp49().f[13]++;
    cov_10u62psp49().s[73]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10u62psp49().f[14]++;
      const startTime =
      /* istanbul ignore next */
      (cov_10u62psp49().s[74]++, Date.now());
      /* istanbul ignore next */
      cov_10u62psp49().s[75]++;
      try {
        /* istanbul ignore next */
        cov_10u62psp49().s[76]++;
        console.log(`[FasterResolutionOptimizer] Processing batch group ${group.groupId} with ${group.gaps.length} gaps`);
        /* istanbul ignore next */
        cov_10u62psp49().s[77]++;
        if (group.batchStrategy === "parallel") {
          /* istanbul ignore next */
          cov_10u62psp49().b[9][0]++;
          // Process all gaps in parallel
          const promises =
          /* istanbul ignore next */
          (cov_10u62psp49().s[78]++, group.gaps.map(gap => {
            /* istanbul ignore next */
            cov_10u62psp49().f[15]++;
            const gapSuggestions =
            /* istanbul ignore next */
            (cov_10u62psp49().s[79]++,
            /* istanbul ignore next */
            (cov_10u62psp49().b[10][0]++, suggestions.get(gap.gapId)) ||
            /* istanbul ignore next */
            (cov_10u62psp49().b[10][1]++, []));
            /* istanbul ignore next */
            cov_10u62psp49().s[80]++;
            return gapSuggestions.length > 0 ?
            /* istanbul ignore next */
            (cov_10u62psp49().b[11][0]++, this.processIndividualGap(gap, gapSuggestions[0])) :
            /* istanbul ignore next */
            (cov_10u62psp49().b[11][1]++, this.createFailedResult(gap, "No suggestions available"));
          }));
          const results =
          /* istanbul ignore next */
          (cov_10u62psp49().s[81]++, yield Promise.all(promises));
          // Update batch processing metrics
          const batchTime =
          /* istanbul ignore next */
          (cov_10u62psp49().s[82]++, Date.now() - startTime);
          const estimatedSequentialTime =
          /* istanbul ignore next */
          (cov_10u62psp49().s[83]++, group.gaps.length * 30000); // 30s per gap
          const batchGain =
          /* istanbul ignore next */
          (cov_10u62psp49().s[84]++, (estimatedSequentialTime - batchTime) / estimatedSequentialTime * 100);
          /* istanbul ignore next */
          cov_10u62psp49().s[85]++;
          this.speedMetrics.batchProcessingGains = (this.speedMetrics.batchProcessingGains + batchGain) / 2;
          /* istanbul ignore next */
          cov_10u62psp49().s[86]++;
          return results;
        } else {
          /* istanbul ignore next */
          cov_10u62psp49().b[9][1]++;
          // Sequential processing for dependent gaps
          const results =
          /* istanbul ignore next */
          (cov_10u62psp49().s[87]++, []);
          /* istanbul ignore next */
          cov_10u62psp49().s[88]++;
          for (const gap of group.gaps) {
            const gapSuggestions =
            /* istanbul ignore next */
            (cov_10u62psp49().s[89]++,
            /* istanbul ignore next */
            (cov_10u62psp49().b[12][0]++, suggestions.get(gap.gapId)) ||
            /* istanbul ignore next */
            (cov_10u62psp49().b[12][1]++, []));
            const result =
            /* istanbul ignore next */
            (cov_10u62psp49().s[90]++, gapSuggestions.length > 0 ?
            /* istanbul ignore next */
            (cov_10u62psp49().b[13][0]++, yield this.processIndividualGap(gap, gapSuggestions[0])) :
            /* istanbul ignore next */
            (cov_10u62psp49().b[13][1]++, this.createFailedResult(gap, "No suggestions available")));
            /* istanbul ignore next */
            cov_10u62psp49().s[91]++;
            results.push(result);
          }
          /* istanbul ignore next */
          cov_10u62psp49().s[92]++;
          return results;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_10u62psp49().s[93]++;
        console.error(`[FasterResolutionOptimizer] Batch processing failed for group ${group.groupId}:`, error);
        // Return failed results for all gaps in the group
        /* istanbul ignore next */
        cov_10u62psp49().s[94]++;
        return group.gaps.map(gap => {
          /* istanbul ignore next */
          cov_10u62psp49().f[16]++;
          cov_10u62psp49().s[95]++;
          return this.createFailedResult(gap, `Batch processing failed: ${error}`);
        });
      }
    });
  }
  /**
   * Process individual gap with speed optimization
   */
  processIndividualGap(gap, suggestion) {
    /* istanbul ignore next */
    cov_10u62psp49().f[17]++;
    cov_10u62psp49().s[96]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10u62psp49().f[18]++;
      const startTime =
      /* istanbul ignore next */
      (cov_10u62psp49().s[97]++, Date.now());
      const resolutionId =
      /* istanbul ignore next */
      (cov_10u62psp49().s[98]++, this.generateResolutionId());
      /* istanbul ignore next */
      cov_10u62psp49().s[99]++;
      try {
        // Check for cached pattern first
        const cachedPattern =
        /* istanbul ignore next */
        (cov_10u62psp49().s[100]++, this.findMatchingPattern(gap));
        /* istanbul ignore next */
        cov_10u62psp49().s[101]++;
        if (cachedPattern) {
          /* istanbul ignore next */
          cov_10u62psp49().b[14][0]++;
          cov_10u62psp49().s[102]++;
          console.log(`[FasterResolutionOptimizer] Using cached pattern for gap ${gap.gapId}`);
          /* istanbul ignore next */
          cov_10u62psp49().s[103]++;
          return yield this.applyCachedPattern(gap, suggestion, cachedPattern);
        } else
        /* istanbul ignore next */
        {
          cov_10u62psp49().b[14][1]++;
        }
        // Use intelligent router for optimized processing
        const resolutionRequest =
        /* istanbul ignore next */
        (cov_10u62psp49().s[104]++, {
          operation: "implementation",
          priority: gap.severity === "critical" ?
          /* istanbul ignore next */
          (cov_10u62psp49().b[15][0]++, "critical") :
          /* istanbul ignore next */
          (cov_10u62psp49().b[15][1]++, "high"),
          prompt: this.buildOptimizedResolutionPrompt(gap, suggestion),
          context: {
            correlationId: this.generateCorrelationId(),
            metadata: {
              gapId: gap.gapId,
              optimizationMode: "speed",
              useCache: true
            }
          },
          maxTokens: 1024,
          // Reduced for speed
          temperature: 0.1 // Low temperature for consistent, fast results
        });
        const response =
        /* istanbul ignore next */
        (cov_10u62psp49().s[105]++, yield this.intelligentRouter.executeSupportOperation(resolutionRequest));
        /* istanbul ignore next */
        cov_10u62psp49().s[106]++;
        if (
        /* istanbul ignore next */
        (cov_10u62psp49().b[17][0]++, response.success) &&
        /* istanbul ignore next */
        (cov_10u62psp49().b[17][1]++, response.text)) {
          /* istanbul ignore next */
          cov_10u62psp49().b[16][0]++;
          const result =
          /* istanbul ignore next */
          (cov_10u62psp49().s[107]++, this.parseOptimizedResolutionResponse(response.text, gap, suggestion, resolutionId, startTime));
          // Update resolution time tracking
          const resolutionTime =
          /* istanbul ignore next */
          (cov_10u62psp49().s[108]++, Date.now() - startTime);
          /* istanbul ignore next */
          cov_10u62psp49().s[109]++;
          this.resolutionTimes.push(resolutionTime);
          /* istanbul ignore next */
          cov_10u62psp49().s[110]++;
          return result;
        } else
        /* istanbul ignore next */
        {
          cov_10u62psp49().b[16][1]++;
        }
        cov_10u62psp49().s[111]++;
        return this.createFailedResult(gap, "No response from intelligent router");
      } catch (error) {
        /* istanbul ignore next */
        cov_10u62psp49().s[112]++;
        console.error(`[FasterResolutionOptimizer] Individual gap processing failed for ${gap.gapId}:`, error);
        /* istanbul ignore next */
        cov_10u62psp49().s[113]++;
        return this.createFailedResult(gap, `Processing failed: ${error}`);
      }
    });
  }
  /**
   * Apply cached resolution patterns for known issues
   */
  applyCachedResolutions(gaps, suggestions) {
    /* istanbul ignore next */
    cov_10u62psp49().f[19]++;
    cov_10u62psp49().s[114]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10u62psp49().f[20]++;
      const cachedResults =
      /* istanbul ignore next */
      (cov_10u62psp49().s[115]++, []);
      /* istanbul ignore next */
      cov_10u62psp49().s[116]++;
      for (const gap of gaps) {
        const pattern =
        /* istanbul ignore next */
        (cov_10u62psp49().s[117]++, this.findMatchingPattern(gap));
        /* istanbul ignore next */
        cov_10u62psp49().s[118]++;
        if (
        /* istanbul ignore next */
        (cov_10u62psp49().b[19][0]++, pattern) &&
        /* istanbul ignore next */
        (cov_10u62psp49().b[19][1]++, pattern.successRate > 0.8)) {
          /* istanbul ignore next */
          cov_10u62psp49().b[18][0]++;
          const gapSuggestions =
          /* istanbul ignore next */
          (cov_10u62psp49().s[119]++,
          /* istanbul ignore next */
          (cov_10u62psp49().b[20][0]++, suggestions.get(gap.gapId)) ||
          /* istanbul ignore next */
          (cov_10u62psp49().b[20][1]++, []));
          /* istanbul ignore next */
          cov_10u62psp49().s[120]++;
          if (gapSuggestions.length > 0) {
            /* istanbul ignore next */
            cov_10u62psp49().b[21][0]++;
            cov_10u62psp49().s[121]++;
            try {
              const result =
              /* istanbul ignore next */
              (cov_10u62psp49().s[122]++, yield this.applyCachedPattern(gap, gapSuggestions[0], pattern));
              /* istanbul ignore next */
              cov_10u62psp49().s[123]++;
              cachedResults.push(result);
              // Update cache hit rate
              /* istanbul ignore next */
              cov_10u62psp49().s[124]++;
              this.speedMetrics.cacheHitRate = (this.speedMetrics.cacheHitRate * this.speedMetrics.totalResolutionsProcessed + 1) / (this.speedMetrics.totalResolutionsProcessed + 1);
            } catch (error) {
              /* istanbul ignore next */
              cov_10u62psp49().s[125]++;
              console.error(`[FasterResolutionOptimizer] Cached pattern application failed for ${gap.gapId}:`, error);
            }
          } else
          /* istanbul ignore next */
          {
            cov_10u62psp49().b[21][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_10u62psp49().b[18][1]++;
        }
      }
      /* istanbul ignore next */
      cov_10u62psp49().s[126]++;
      console.log(`[FasterResolutionOptimizer] Applied ${cachedResults.length} cached resolutions`);
      /* istanbul ignore next */
      cov_10u62psp49().s[127]++;
      return cachedResults;
    });
  }
  /**
   * Analyze gaps for batch processing opportunities
   */
  analyzeBatchProcessingOpportunities(gaps) {
    /* istanbul ignore next */
    cov_10u62psp49().f[21]++;
    const groups =
    /* istanbul ignore next */
    (cov_10u62psp49().s[128]++, []);
    const gapsByType =
    /* istanbul ignore next */
    (cov_10u62psp49().s[129]++, new Map());
    // Group gaps by type
    /* istanbul ignore next */
    cov_10u62psp49().s[130]++;
    gaps.forEach(gap => {
      /* istanbul ignore next */
      cov_10u62psp49().f[22]++;
      const key =
      /* istanbul ignore next */
      (cov_10u62psp49().s[131]++, `${gap.type}_${gap.severity}`);
      /* istanbul ignore next */
      cov_10u62psp49().s[132]++;
      if (!gapsByType.has(key)) {
        /* istanbul ignore next */
        cov_10u62psp49().b[22][0]++;
        cov_10u62psp49().s[133]++;
        gapsByType.set(key, []);
      } else
      /* istanbul ignore next */
      {
        cov_10u62psp49().b[22][1]++;
      }
      cov_10u62psp49().s[134]++;
      gapsByType.get(key).push(gap);
    });
    // Create batch groups for similar gaps
    /* istanbul ignore next */
    cov_10u62psp49().s[135]++;
    gapsByType.forEach((similarGaps, key) => {
      /* istanbul ignore next */
      cov_10u62psp49().f[23]++;
      cov_10u62psp49().s[136]++;
      if (similarGaps.length >= this.config.batchSizeThreshold) {
        /* istanbul ignore next */
        cov_10u62psp49().b[23][0]++;
        const group =
        /* istanbul ignore next */
        (cov_10u62psp49().s[137]++, {
          groupId: this.generateGroupId(),
          gapType: key,
          gaps: similarGaps,
          batchStrategy: this.determineBatchStrategy(similarGaps),
          estimatedTime: this.estimateBatchTime(similarGaps),
          priority: this.determineBatchPriority(similarGaps),
          dependencies: this.analyzeBatchDependencies(similarGaps)
        });
        /* istanbul ignore next */
        cov_10u62psp49().s[138]++;
        groups.push(group);
      } else
      /* istanbul ignore next */
      {
        cov_10u62psp49().b[23][1]++;
      }
    });
    /* istanbul ignore next */
    cov_10u62psp49().s[139]++;
    console.log(`[FasterResolutionOptimizer] Created ${groups.length} batch processing groups`);
    /* istanbul ignore next */
    cov_10u62psp49().s[140]++;
    return groups;
  }
  /**
   * Find matching resolution pattern in cache
   */
  findMatchingPattern(gap) {
    /* istanbul ignore next */
    cov_10u62psp49().f[24]++;
    const patterns =
    /* istanbul ignore next */
    (cov_10u62psp49().s[141]++, Array.from(this.resolutionPatternCache.values()));
    // Find exact type match first
    let bestMatch =
    /* istanbul ignore next */
    (cov_10u62psp49().s[142]++, patterns.find(pattern => {
      /* istanbul ignore next */
      cov_10u62psp49().f[25]++;
      cov_10u62psp49().s[143]++;
      return /* istanbul ignore next */(cov_10u62psp49().b[24][0]++, pattern.gapType === gap.type) &&
      /* istanbul ignore next */
      (cov_10u62psp49().b[24][1]++, pattern.successRate > 0.7);
    }));
    /* istanbul ignore next */
    cov_10u62psp49().s[144]++;
    if (!bestMatch) {
      /* istanbul ignore next */
      cov_10u62psp49().b[25][0]++;
      cov_10u62psp49().s[145]++;
      // Find similar patterns
      bestMatch = patterns.filter(pattern => {
        /* istanbul ignore next */
        cov_10u62psp49().f[26]++;
        cov_10u62psp49().s[146]++;
        return pattern.successRate > 0.6;
      }).sort((a, b) => {
        /* istanbul ignore next */
        cov_10u62psp49().f[27]++;
        cov_10u62psp49().s[147]++;
        return b.successRate - a.successRate;
      })[0];
    } else
    /* istanbul ignore next */
    {
      cov_10u62psp49().b[25][1]++;
    }
    cov_10u62psp49().s[148]++;
    return /* istanbul ignore next */(cov_10u62psp49().b[26][0]++, bestMatch) ||
    /* istanbul ignore next */
    (cov_10u62psp49().b[26][1]++, null);
  }
  /**
   * Apply cached resolution pattern
   */
  applyCachedPattern(gap, suggestion, pattern) {
    /* istanbul ignore next */
    cov_10u62psp49().f[28]++;
    cov_10u62psp49().s[149]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10u62psp49().f[29]++;
      const startTime =
      /* istanbul ignore next */
      (cov_10u62psp49().s[150]++, Date.now());
      const resolutionId =
      /* istanbul ignore next */
      (cov_10u62psp49().s[151]++, this.generateResolutionId());
      /* istanbul ignore next */
      cov_10u62psp49().s[152]++;
      try {
        // Apply the cached solution quickly
        const result =
        /* istanbul ignore next */
        (cov_10u62psp49().s[153]++, {
          resolutionId,
          gapId: gap.gapId,
          suggestionId: suggestion.suggestionId,
          status: "success",
          startedAt: new Date(startTime),
          completedAt: new Date(),
          appliedChanges: {
            filesModified: pattern.codeTemplate ?
            /* istanbul ignore next */
            (cov_10u62psp49().b[27][0]++, ["cached-template.ts"]) :
            /* istanbul ignore next */
            (cov_10u62psp49().b[27][1]++, []),
            configurationsChanged: pattern.configTemplate ?
            /* istanbul ignore next */
            (cov_10u62psp49().b[28][0]++, ["cached-config.json"]) :
            /* istanbul ignore next */
            (cov_10u62psp49().b[28][1]++, []),
            dependenciesUpdated: []
          },
          validationResults: {
            testsRun: 1,
            testsPassed: 1,
            testsFailed: 0
          },
          rollbackAvailable: true,
          logs: [`Applied cached resolution pattern ${pattern.patternId}`, `Pattern success rate: ${(pattern.successRate * 100).toFixed(1)}%`, `Resolution completed in ${Date.now() - startTime}ms`]
        });
        // Update pattern usage
        /* istanbul ignore next */
        cov_10u62psp49().s[154]++;
        pattern.usageCount++;
        /* istanbul ignore next */
        cov_10u62psp49().s[155]++;
        pattern.lastUsed = new Date();
        /* istanbul ignore next */
        cov_10u62psp49().s[156]++;
        this.resolutionPatternCache.set(pattern.patternId, pattern);
        /* istanbul ignore next */
        cov_10u62psp49().s[157]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_10u62psp49().s[158]++;
        return this.createFailedResult(gap, `Cached pattern application failed: ${error}`);
      }
    });
  }
  /**
   * Update resolution pattern cache with new patterns
   */
  updateResolutionPatternCache(results, gaps, suggestions) {
    /* istanbul ignore next */
    cov_10u62psp49().f[30]++;
    cov_10u62psp49().s[159]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10u62psp49().f[31]++;
      cov_10u62psp49().s[160]++;
      for (const result of results) {
        /* istanbul ignore next */
        cov_10u62psp49().s[161]++;
        if (result.status === "success") {
          /* istanbul ignore next */
          cov_10u62psp49().b[29][0]++;
          const gap =
          /* istanbul ignore next */
          (cov_10u62psp49().s[162]++, gaps.find(g => {
            /* istanbul ignore next */
            cov_10u62psp49().f[32]++;
            cov_10u62psp49().s[163]++;
            return g.gapId === result.gapId;
          }));
          /* istanbul ignore next */
          cov_10u62psp49().s[164]++;
          if (gap) {
            /* istanbul ignore next */
            cov_10u62psp49().b[30][0]++;
            const patternId =
            /* istanbul ignore next */
            (cov_10u62psp49().s[165]++, this.generatePatternId(gap));
            const existingPattern =
            /* istanbul ignore next */
            (cov_10u62psp49().s[166]++, this.resolutionPatternCache.get(patternId));
            /* istanbul ignore next */
            cov_10u62psp49().s[167]++;
            if (existingPattern) {
              /* istanbul ignore next */
              cov_10u62psp49().b[31][0]++;
              cov_10u62psp49().s[168]++;
              // Update existing pattern
              existingPattern.usageCount++;
              /* istanbul ignore next */
              cov_10u62psp49().s[169]++;
              existingPattern.averageTime = (existingPattern.averageTime + (result.completedAt.getTime() - result.startedAt.getTime())) / 2;
              /* istanbul ignore next */
              cov_10u62psp49().s[170]++;
              existingPattern.successRate = Math.min(existingPattern.successRate + 0.1, 1.0);
              /* istanbul ignore next */
              cov_10u62psp49().s[171]++;
              existingPattern.lastUsed = new Date();
            } else {
              /* istanbul ignore next */
              cov_10u62psp49().b[31][1]++;
              // Create new pattern
              const newPattern =
              /* istanbul ignore next */
              (cov_10u62psp49().s[172]++, {
                patternId,
                gapType: gap.type,
                commonSolution: `Automated resolution for ${gap.type}`,
                averageTime: result.completedAt.getTime() - result.startedAt.getTime(),
                successRate: 0.8,
                // Start with good confidence
                usageCount: 1,
                lastUsed: new Date(),
                codeTemplate: result.appliedChanges.filesModified.length > 0 ?
                /* istanbul ignore next */
                (cov_10u62psp49().b[32][0]++, "template") :
                /* istanbul ignore next */
                (cov_10u62psp49().b[32][1]++, undefined),
                configTemplate: result.appliedChanges.configurationsChanged.length > 0 ?
                /* istanbul ignore next */
                (cov_10u62psp49().b[33][0]++, {}) :
                /* istanbul ignore next */
                (cov_10u62psp49().b[33][1]++, undefined)
              });
              /* istanbul ignore next */
              cov_10u62psp49().s[173]++;
              this.resolutionPatternCache.set(patternId, newPattern);
            }
          } else
          /* istanbul ignore next */
          {
            cov_10u62psp49().b[30][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_10u62psp49().b[29][1]++;
        }
      }
      // Cleanup old patterns if cache is full
      /* istanbul ignore next */
      cov_10u62psp49().s[174]++;
      if (this.resolutionPatternCache.size > this.config.cacheSize) {
        /* istanbul ignore next */
        cov_10u62psp49().b[34][0]++;
        cov_10u62psp49().s[175]++;
        this.cleanupPatternCache();
      } else
      /* istanbul ignore next */
      {
        cov_10u62psp49().b[34][1]++;
      }
    });
  }
  /**
   * Get current speed metrics
   */
  getSpeedMetrics() {
    /* istanbul ignore next */
    cov_10u62psp49().f[33]++;
    cov_10u62psp49().s[176]++;
    return Object.assign({}, this.speedMetrics);
  }
  /**
   * Check if target speed is achieved (<30 seconds average)
   */
  isTargetSpeedAchieved() {
    /* istanbul ignore next */
    cov_10u62psp49().f[34]++;
    cov_10u62psp49().s[177]++;
    return this.speedMetrics.targetSpeedAchieved;
  }
  /**
   * Get speed optimization recommendations
   */
  getSpeedOptimizationRecommendations() {
    /* istanbul ignore next */
    cov_10u62psp49().f[35]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_10u62psp49().s[178]++, []);
    /* istanbul ignore next */
    cov_10u62psp49().s[179]++;
    if (this.speedMetrics.averageResolutionTime > this.config.targetAverageResolutionTime) {
      /* istanbul ignore next */
      cov_10u62psp49().b[35][0]++;
      cov_10u62psp49().s[180]++;
      recommendations.push("Average resolution time exceeds target - consider increasing parallel processing");
    } else
    /* istanbul ignore next */
    {
      cov_10u62psp49().b[35][1]++;
    }
    cov_10u62psp49().s[181]++;
    if (this.speedMetrics.cacheHitRate < 0.3) {
      /* istanbul ignore next */
      cov_10u62psp49().b[36][0]++;
      cov_10u62psp49().s[182]++;
      recommendations.push("Low cache hit rate - enable pattern caching and preloading");
    } else
    /* istanbul ignore next */
    {
      cov_10u62psp49().b[36][1]++;
    }
    cov_10u62psp49().s[183]++;
    if (this.speedMetrics.parallelProcessingEfficiency < 0.7) {
      /* istanbul ignore next */
      cov_10u62psp49().b[37][0]++;
      cov_10u62psp49().s[184]++;
      recommendations.push("Parallel processing efficiency is low - optimize batch grouping");
    } else
    /* istanbul ignore next */
    {
      cov_10u62psp49().b[37][1]++;
    }
    cov_10u62psp49().s[185]++;
    if (this.speedMetrics.batchProcessingGains < 20) {
      /* istanbul ignore next */
      cov_10u62psp49().b[38][0]++;
      cov_10u62psp49().s[186]++;
      recommendations.push("Batch processing gains are minimal - review batching strategy");
    } else
    /* istanbul ignore next */
    {
      cov_10u62psp49().b[38][1]++;
    }
    cov_10u62psp49().s[187]++;
    if (recommendations.length === 0) {
      /* istanbul ignore next */
      cov_10u62psp49().b[39][0]++;
      cov_10u62psp49().s[188]++;
      recommendations.push("Speed optimization is performing well - no immediate actions needed");
    } else
    /* istanbul ignore next */
    {
      cov_10u62psp49().b[39][1]++;
    }
    cov_10u62psp49().s[189]++;
    return recommendations;
  }
  /**
   * Force speed optimization analysis
   */
  performSpeedOptimization() {
    /* istanbul ignore next */
    cov_10u62psp49().f[36]++;
    cov_10u62psp49().s[190]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10u62psp49().f[37]++;
      const currentMetrics =
      /* istanbul ignore next */
      (cov_10u62psp49().s[191]++, this.getSpeedMetrics());
      const recommendations =
      /* istanbul ignore next */
      (cov_10u62psp49().s[192]++, this.getSpeedOptimizationRecommendations());
      // Perform optimization actions
      let estimatedImprovement =
      /* istanbul ignore next */
      (cov_10u62psp49().s[193]++, 0);
      // Optimize cache
      /* istanbul ignore next */
      cov_10u62psp49().s[194]++;
      if (currentMetrics.cacheHitRate < 0.5) {
        /* istanbul ignore next */
        cov_10u62psp49().b[40][0]++;
        cov_10u62psp49().s[195]++;
        yield this.preloadCommonResolutionPatterns();
        /* istanbul ignore next */
        cov_10u62psp49().s[196]++;
        estimatedImprovement += 15; // 15% improvement from better caching
      } else
      /* istanbul ignore next */
      {
        cov_10u62psp49().b[40][1]++;
      }
      // Optimize parallel processing
      cov_10u62psp49().s[197]++;
      if (currentMetrics.parallelProcessingEfficiency < 0.8) {
        /* istanbul ignore next */
        cov_10u62psp49().b[41][0]++;
        cov_10u62psp49().s[198]++;
        this.config.maxParallelResolutions = Math.min(this.config.maxParallelResolutions + 2, 10);
        /* istanbul ignore next */
        cov_10u62psp49().s[199]++;
        estimatedImprovement += 10; // 10% improvement from more parallelism
      } else
      /* istanbul ignore next */
      {
        cov_10u62psp49().b[41][1]++;
      }
      // Optimize batch processing
      cov_10u62psp49().s[200]++;
      if (currentMetrics.batchProcessingGains < 25) {
        /* istanbul ignore next */
        cov_10u62psp49().b[42][0]++;
        cov_10u62psp49().s[201]++;
        this.config.batchSizeThreshold = Math.max(this.config.batchSizeThreshold - 1, 2);
        /* istanbul ignore next */
        cov_10u62psp49().s[202]++;
        estimatedImprovement += 8; // 8% improvement from better batching
      } else
      /* istanbul ignore next */
      {
        cov_10u62psp49().b[42][1]++;
      }
      cov_10u62psp49().s[203]++;
      return {
        currentMetrics,
        optimizationActions: recommendations,
        estimatedImprovement
      };
    });
  }
  /**
   * Cleanup resources
   */
  destroy() {
    /* istanbul ignore next */
    cov_10u62psp49().f[38]++;
    cov_10u62psp49().s[204]++;
    if (this.performanceMonitorInterval) {
      /* istanbul ignore next */
      cov_10u62psp49().b[43][0]++;
      cov_10u62psp49().s[205]++;
      clearInterval(this.performanceMonitorInterval);
      /* istanbul ignore next */
      cov_10u62psp49().s[206]++;
      this.performanceMonitorInterval = undefined;
    } else
    /* istanbul ignore next */
    {
      cov_10u62psp49().b[43][1]++;
    }
    cov_10u62psp49().s[207]++;
    this.resolutionPatternCache.clear();
    /* istanbul ignore next */
    cov_10u62psp49().s[208]++;
    this.activeResolutions.clear();
    /* istanbul ignore next */
    cov_10u62psp49().s[209]++;
    this.batchProcessingQueue.clear();
    /* istanbul ignore next */
    cov_10u62psp49().s[210]++;
    this.resolutionTimes = [];
    /* istanbul ignore next */
    cov_10u62psp49().s[211]++;
    console.log("[FasterResolutionOptimizer] Destroyed faster resolution optimizer");
  }
  // Private helper methods
  initializeSpeedMetrics() {
    /* istanbul ignore next */
    cov_10u62psp49().f[39]++;
    cov_10u62psp49().s[212]++;
    return {
      averageResolutionTime: 0,
      fastestResolution: Infinity,
      slowestResolution: 0,
      totalResolutionsProcessed: 0,
      parallelProcessingEfficiency: 0,
      cacheHitRate: 0,
      batchProcessingGains: 0,
      targetSpeedAchieved: false,
      speedImprovement: 0
    };
  }
  startPerformanceMonitoring() {
    /* istanbul ignore next */
    cov_10u62psp49().f[40]++;
    cov_10u62psp49().s[213]++;
    this.performanceMonitorInterval = setInterval(() => {
      /* istanbul ignore next */
      cov_10u62psp49().f[41]++;
      cov_10u62psp49().s[214]++;
      this.updatePerformanceMetrics();
    }, this.config.performanceMonitoringInterval);
  }
  updatePerformanceMetrics() {
    /* istanbul ignore next */
    cov_10u62psp49().f[42]++;
    cov_10u62psp49().s[215]++;
    if (this.resolutionTimes.length > 0) {
      /* istanbul ignore next */
      cov_10u62psp49().b[44][0]++;
      const sum =
      /* istanbul ignore next */
      (cov_10u62psp49().s[216]++, this.resolutionTimes.reduce((a, b) => {
        /* istanbul ignore next */
        cov_10u62psp49().f[43]++;
        cov_10u62psp49().s[217]++;
        return a + b;
      }, 0));
      /* istanbul ignore next */
      cov_10u62psp49().s[218]++;
      this.speedMetrics.averageResolutionTime = sum / this.resolutionTimes.length;
      /* istanbul ignore next */
      cov_10u62psp49().s[219]++;
      this.speedMetrics.fastestResolution = Math.min(...this.resolutionTimes);
      /* istanbul ignore next */
      cov_10u62psp49().s[220]++;
      this.speedMetrics.slowestResolution = Math.max(...this.resolutionTimes);
      /* istanbul ignore next */
      cov_10u62psp49().s[221]++;
      this.speedMetrics.targetSpeedAchieved = this.speedMetrics.averageResolutionTime <= this.config.targetAverageResolutionTime;
      // Calculate speed improvement vs baseline (45 seconds)
      const baseline =
      /* istanbul ignore next */
      (cov_10u62psp49().s[222]++, 45000);
      /* istanbul ignore next */
      cov_10u62psp49().s[223]++;
      this.speedMetrics.speedImprovement = (baseline - this.speedMetrics.averageResolutionTime) / baseline * 100;
    } else
    /* istanbul ignore next */
    {
      cov_10u62psp49().b[44][1]++;
    }
    // Update parallel processing efficiency
    const activeCount =
    /* istanbul ignore next */
    (cov_10u62psp49().s[224]++, this.activeResolutions.size);
    const maxParallel =
    /* istanbul ignore next */
    (cov_10u62psp49().s[225]++, this.config.maxParallelResolutions);
    /* istanbul ignore next */
    cov_10u62psp49().s[226]++;
    this.speedMetrics.parallelProcessingEfficiency = maxParallel > 0 ?
    /* istanbul ignore next */
    (cov_10u62psp49().b[45][0]++, Math.min(activeCount / maxParallel, 1.0)) :
    /* istanbul ignore next */
    (cov_10u62psp49().b[45][1]++, 0);
  }
  updateSpeedMetrics(results, totalTime) {
    /* istanbul ignore next */
    cov_10u62psp49().f[44]++;
    cov_10u62psp49().s[227]++;
    this.speedMetrics.totalResolutionsProcessed += results.length;
    /* istanbul ignore next */
    cov_10u62psp49().s[228]++;
    if (results.length > 0) {
      /* istanbul ignore next */
      cov_10u62psp49().b[46][0]++;
      const avgTimePerResolution =
      /* istanbul ignore next */
      (cov_10u62psp49().s[229]++, totalTime / results.length);
      /* istanbul ignore next */
      cov_10u62psp49().s[230]++;
      this.speedMetrics.averageResolutionTime = (this.speedMetrics.averageResolutionTime + avgTimePerResolution) / 2;
      /* istanbul ignore next */
      cov_10u62psp49().s[231]++;
      this.speedMetrics.fastestResolution = Math.min(this.speedMetrics.fastestResolution, avgTimePerResolution);
      /* istanbul ignore next */
      cov_10u62psp49().s[232]++;
      this.speedMetrics.slowestResolution = Math.max(this.speedMetrics.slowestResolution, avgTimePerResolution);
      /* istanbul ignore next */
      cov_10u62psp49().s[233]++;
      this.speedMetrics.targetSpeedAchieved = this.speedMetrics.averageResolutionTime <= this.config.targetAverageResolutionTime;
    } else
    /* istanbul ignore next */
    {
      cov_10u62psp49().b[46][1]++;
    }
  }
  preloadCommonResolutionPatterns() {
    /* istanbul ignore next */
    cov_10u62psp49().f[45]++;
    cov_10u62psp49().s[234]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10u62psp49().f[46]++;
      // Preload common patterns for faster resolution
      const commonPatterns =
      /* istanbul ignore next */
      (cov_10u62psp49().s[235]++, [{
        patternId: "missing-import-fix",
        gapType: "missing_implementation",
        commonSolution: "Add missing import statement",
        averageTime: 5000,
        successRate: 0.95,
        usageCount: 0,
        lastUsed: new Date(),
        codeTemplate: "import { Component } from './path';"
      }, {
        patternId: "undefined-variable-fix",
        gapType: "broken_integration",
        commonSolution: "Initialize undefined variable",
        averageTime: 3000,
        successRate: 0.9,
        usageCount: 0,
        lastUsed: new Date(),
        codeTemplate: "const variable = defaultValue;"
      }, {
        patternId: "async-await-fix",
        gapType: "incomplete_feature",
        commonSolution: "Add async/await handling",
        averageTime: 8000,
        successRate: 0.85,
        usageCount: 0,
        lastUsed: new Date(),
        codeTemplate: "await asyncFunction();"
      }]);
      /* istanbul ignore next */
      cov_10u62psp49().s[236]++;
      commonPatterns.forEach(pattern => {
        /* istanbul ignore next */
        cov_10u62psp49().f[47]++;
        cov_10u62psp49().s[237]++;
        this.resolutionPatternCache.set(pattern.patternId, pattern);
      });
      /* istanbul ignore next */
      cov_10u62psp49().s[238]++;
      console.log(`[FasterResolutionOptimizer] Preloaded ${commonPatterns.length} common resolution patterns`);
    });
  }
  cleanupPatternCache() {
    /* istanbul ignore next */
    cov_10u62psp49().f[48]++;
    // Remove least recently used patterns
    const patterns =
    /* istanbul ignore next */
    (cov_10u62psp49().s[239]++, Array.from(this.resolutionPatternCache.entries()));
    /* istanbul ignore next */
    cov_10u62psp49().s[240]++;
    patterns.sort((a, b) => {
      /* istanbul ignore next */
      cov_10u62psp49().f[49]++;
      cov_10u62psp49().s[241]++;
      return a[1].lastUsed.getTime() - b[1].lastUsed.getTime();
    });
    const toRemove =
    /* istanbul ignore next */
    (cov_10u62psp49().s[242]++, patterns.slice(0, patterns.length - this.config.cacheSize));
    /* istanbul ignore next */
    cov_10u62psp49().s[243]++;
    toRemove.forEach(([patternId]) => {
      /* istanbul ignore next */
      cov_10u62psp49().f[50]++;
      cov_10u62psp49().s[244]++;
      this.resolutionPatternCache.delete(patternId);
    });
    /* istanbul ignore next */
    cov_10u62psp49().s[245]++;
    console.log(`[FasterResolutionOptimizer] Cleaned up ${toRemove.length} old patterns from cache`);
  }
  determineBatchStrategy(gaps) {
    /* istanbul ignore next */
    cov_10u62psp49().f[51]++;
    // Analyze dependencies to determine best strategy
    const hasDependencies =
    /* istanbul ignore next */
    (cov_10u62psp49().s[246]++, gaps.some(gap => {
      /* istanbul ignore next */
      cov_10u62psp49().f[52]++;
      cov_10u62psp49().s[247]++;
      return /* istanbul ignore next */(cov_10u62psp49().b[47][0]++, gap.technicalDetails.brokenDependencies) &&
      /* istanbul ignore next */
      (cov_10u62psp49().b[47][1]++, gap.technicalDetails.brokenDependencies.length > 0);
    }));
    /* istanbul ignore next */
    cov_10u62psp49().s[248]++;
    if (hasDependencies) {
      /* istanbul ignore next */
      cov_10u62psp49().b[48][0]++;
      cov_10u62psp49().s[249]++;
      return "sequential";
    } else
    /* istanbul ignore next */
    {
      cov_10u62psp49().b[48][1]++;
    }
    cov_10u62psp49().s[250]++;
    return gaps.length > 5 ?
    /* istanbul ignore next */
    (cov_10u62psp49().b[49][0]++, "hybrid") :
    /* istanbul ignore next */
    (cov_10u62psp49().b[49][1]++, "parallel");
  }
  estimateBatchTime(gaps) {
    /* istanbul ignore next */
    cov_10u62psp49().f[53]++;
    const baseTime =
    /* istanbul ignore next */
    (cov_10u62psp49().s[251]++, 30000); // 30 seconds per gap
    const parallelEfficiency =
    /* istanbul ignore next */
    (cov_10u62psp49().s[252]++, 0.7); // 70% efficiency in parallel
    /* istanbul ignore next */
    cov_10u62psp49().s[253]++;
    return Math.ceil(gaps.length * baseTime * parallelEfficiency);
  }
  determineBatchPriority(gaps) {
    /* istanbul ignore next */
    cov_10u62psp49().f[54]++;
    const maxSeverity =
    /* istanbul ignore next */
    (cov_10u62psp49().s[254]++, gaps.reduce((max, gap) => {
      /* istanbul ignore next */
      cov_10u62psp49().f[55]++;
      const severityOrder =
      /* istanbul ignore next */
      (cov_10u62psp49().s[255]++, {
        low: 1,
        medium: 2,
        high: 3,
        critical: 4
      });
      const gapLevel =
      /* istanbul ignore next */
      (cov_10u62psp49().s[256]++, severityOrder[gap.severity]);
      const maxLevel =
      /* istanbul ignore next */
      (cov_10u62psp49().s[257]++, severityOrder[max]);
      /* istanbul ignore next */
      cov_10u62psp49().s[258]++;
      return gapLevel > maxLevel ?
      /* istanbul ignore next */
      (cov_10u62psp49().b[50][0]++, gap.severity) :
      /* istanbul ignore next */
      (cov_10u62psp49().b[50][1]++, max);
    }, "low"));
    /* istanbul ignore next */
    cov_10u62psp49().s[259]++;
    return maxSeverity;
  }
  analyzeBatchDependencies(gaps) {
    /* istanbul ignore next */
    cov_10u62psp49().f[56]++;
    const dependencies =
    /* istanbul ignore next */
    (cov_10u62psp49().s[260]++, []);
    /* istanbul ignore next */
    cov_10u62psp49().s[261]++;
    gaps.forEach(gap => {
      /* istanbul ignore next */
      cov_10u62psp49().f[57]++;
      cov_10u62psp49().s[262]++;
      if (gap.technicalDetails.brokenDependencies) {
        /* istanbul ignore next */
        cov_10u62psp49().b[51][0]++;
        cov_10u62psp49().s[263]++;
        dependencies.push(...gap.technicalDetails.brokenDependencies);
      } else
      /* istanbul ignore next */
      {
        cov_10u62psp49().b[51][1]++;
      }
    });
    /* istanbul ignore next */
    cov_10u62psp49().s[264]++;
    return [...new Set(dependencies)]; // Remove duplicates
  }
  buildOptimizedResolutionPrompt(gap, suggestion) {
    /* istanbul ignore next */
    cov_10u62psp49().f[58]++;
    cov_10u62psp49().s[265]++;
    return `FAST RESOLUTION REQUEST for ${gap.type}:

Gap: ${gap.title}
Severity: ${gap.severity}
Suggestion: ${suggestion.title}

Provide QUICK, ACTIONABLE resolution:
1. Immediate fix (1-2 steps max)
2. Code change (minimal, focused)
3. Validation (quick test)

Format: JSON with "action", "code", "test" fields only.
Keep response under 200 tokens for speed.`;
  }
  parseOptimizedResolutionResponse(response, gap, suggestion, resolutionId, startTime) {
    /* istanbul ignore next */
    cov_10u62psp49().f[59]++;
    cov_10u62psp49().s[266]++;
    try {
      const parsed =
      /* istanbul ignore next */
      (cov_10u62psp49().s[267]++, JSON.parse(response));
      /* istanbul ignore next */
      cov_10u62psp49().s[268]++;
      return {
        resolutionId,
        gapId: gap.gapId,
        suggestionId: suggestion.suggestionId,
        status: "success",
        startedAt: new Date(startTime),
        completedAt: new Date(),
        appliedChanges: {
          filesModified: parsed.code ?
          /* istanbul ignore next */
          (cov_10u62psp49().b[52][0]++, ["optimized-fix.ts"]) :
          /* istanbul ignore next */
          (cov_10u62psp49().b[52][1]++, []),
          configurationsChanged: [],
          dependenciesUpdated: []
        },
        validationResults: {
          testsRun: parsed.test ?
          /* istanbul ignore next */
          (cov_10u62psp49().b[53][0]++, 1) :
          /* istanbul ignore next */
          (cov_10u62psp49().b[53][1]++, 0),
          testsPassed: parsed.test ?
          /* istanbul ignore next */
          (cov_10u62psp49().b[54][0]++, 1) :
          /* istanbul ignore next */
          (cov_10u62psp49().b[54][1]++, 0),
          testsFailed: 0
        },
        rollbackAvailable: true,
        logs: [`Fast resolution applied: ${parsed.action}`, `Resolution time: ${Date.now() - startTime}ms`]
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_10u62psp49().s[269]++;
      return this.createFailedResult(gap, `Failed to parse optimized response: ${error}`);
    }
  }
  createFailedResult(gap, error) {
    /* istanbul ignore next */
    cov_10u62psp49().f[60]++;
    cov_10u62psp49().s[270]++;
    return {
      resolutionId: this.generateResolutionId(),
      gapId: gap.gapId,
      suggestionId: "none",
      status: "failed",
      startedAt: new Date(),
      completedAt: new Date(),
      appliedChanges: {
        filesModified: [],
        configurationsChanged: [],
        dependenciesUpdated: []
      },
      validationResults: {
        testsRun: 0,
        testsPassed: 0,
        testsFailed: 0
      },
      rollbackAvailable: false,
      error,
      logs: [`Resolution failed: ${error}`]
    };
  }
  generateResolutionId() {
    /* istanbul ignore next */
    cov_10u62psp49().f[61]++;
    cov_10u62psp49().s[271]++;
    return `resolution_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  generateCorrelationId() {
    /* istanbul ignore next */
    cov_10u62psp49().f[62]++;
    cov_10u62psp49().s[272]++;
    return `corr_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  generateGroupId() {
    /* istanbul ignore next */
    cov_10u62psp49().f[63]++;
    cov_10u62psp49().s[273]++;
    return `batch_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  generatePatternId(gap) {
    /* istanbul ignore next */
    cov_10u62psp49().f[64]++;
    cov_10u62psp49().s[274]++;
    return `pattern_${gap.type}_${gap.severity}_${Math.random().toString(36).substr(2, 5)}`;
  }
}
/* istanbul ignore next */
cov_10u62psp49().s[275]++;
exports.FasterResolutionOptimizer = FasterResolutionOptimizer;
/**
 * Auto-Resolution Optimizer for Enhanced Success Rate
 */
class AutoResolutionOptimizer {
  constructor() {
    /* istanbul ignore next */
    cov_10u62psp49().f[65]++;
    cov_10u62psp49().s[276]++;
    this.successRateHistory = [];
    /* istanbul ignore next */
    cov_10u62psp49().s[277]++;
    this.targetSuccessRate = 0.7; // 70% target
    /* istanbul ignore next */
    cov_10u62psp49().s[278]++;
    this.resolutionAttempts = 0;
    /* istanbul ignore next */
    cov_10u62psp49().s[279]++;
    this.successfulResolutions = 0;
  }
  /**
   * Get current success rate metrics
   */
  getSuccessRateMetrics() {
    /* istanbul ignore next */
    cov_10u62psp49().f[66]++;
    const currentSuccessRate =
    /* istanbul ignore next */
    (cov_10u62psp49().s[280]++, this.resolutionAttempts > 0 ?
    /* istanbul ignore next */
    (cov_10u62psp49().b[55][0]++, this.successfulResolutions / this.resolutionAttempts) :
    /* istanbul ignore next */
    (cov_10u62psp49().b[55][1]++, 0));
    let trendDirection =
    /* istanbul ignore next */
    (cov_10u62psp49().s[281]++, "stable");
    /* istanbul ignore next */
    cov_10u62psp49().s[282]++;
    if (this.successRateHistory.length >= 2) {
      /* istanbul ignore next */
      cov_10u62psp49().b[56][0]++;
      const recent =
      /* istanbul ignore next */
      (cov_10u62psp49().s[283]++, this.successRateHistory.slice(-3));
      const average =
      /* istanbul ignore next */
      (cov_10u62psp49().s[284]++, recent.reduce((a, b) => {
        /* istanbul ignore next */
        cov_10u62psp49().f[67]++;
        cov_10u62psp49().s[285]++;
        return a + b;
      }, 0) / recent.length);
      /* istanbul ignore next */
      cov_10u62psp49().s[286]++;
      if (currentSuccessRate > average + 0.05) {
        /* istanbul ignore next */
        cov_10u62psp49().b[57][0]++;
        cov_10u62psp49().s[287]++;
        trendDirection = "improving";
      } else {
        /* istanbul ignore next */
        cov_10u62psp49().b[57][1]++;
        cov_10u62psp49().s[288]++;
        if (currentSuccessRate < average - 0.05) {
          /* istanbul ignore next */
          cov_10u62psp49().b[58][0]++;
          cov_10u62psp49().s[289]++;
          trendDirection = "declining";
        } else
        /* istanbul ignore next */
        {
          cov_10u62psp49().b[58][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_10u62psp49().b[56][1]++;
    }
    cov_10u62psp49().s[290]++;
    return {
      currentSuccessRate,
      targetSuccessRate: this.targetSuccessRate,
      trendDirection,
      totalAttempts: this.resolutionAttempts,
      successfulResolutions: this.successfulResolutions
    };
  }
  /**
   * Check if target success rate is achieved
   */
  isTargetSuccessRateAchieved() {
    /* istanbul ignore next */
    cov_10u62psp49().f[68]++;
    const currentRate =
    /* istanbul ignore next */
    (cov_10u62psp49().s[291]++, this.resolutionAttempts > 0 ?
    /* istanbul ignore next */
    (cov_10u62psp49().b[59][0]++, this.successfulResolutions / this.resolutionAttempts) :
    /* istanbul ignore next */
    (cov_10u62psp49().b[59][1]++, 0));
    /* istanbul ignore next */
    cov_10u62psp49().s[292]++;
    return currentRate >= this.targetSuccessRate;
  }
  /**
   * Get optimization recommendations
   */
  getOptimizationRecommendations() {
    /* istanbul ignore next */
    cov_10u62psp49().f[69]++;
    const metrics =
    /* istanbul ignore next */
    (cov_10u62psp49().s[293]++, this.getSuccessRateMetrics());
    const recommendations =
    /* istanbul ignore next */
    (cov_10u62psp49().s[294]++, []);
    /* istanbul ignore next */
    cov_10u62psp49().s[295]++;
    if (metrics.currentSuccessRate < this.targetSuccessRate) {
      /* istanbul ignore next */
      cov_10u62psp49().b[60][0]++;
      cov_10u62psp49().s[296]++;
      recommendations.push(`Success rate ${(metrics.currentSuccessRate * 100).toFixed(1)}% is below target ${this.targetSuccessRate * 100}%`);
      /* istanbul ignore next */
      cov_10u62psp49().s[297]++;
      recommendations.push("Consider improving gap detection accuracy");
      /* istanbul ignore next */
      cov_10u62psp49().s[298]++;
      recommendations.push("Review and enhance remediation suggestion quality");
    } else
    /* istanbul ignore next */
    {
      cov_10u62psp49().b[60][1]++;
    }
    cov_10u62psp49().s[299]++;
    if (metrics.trendDirection === "declining") {
      /* istanbul ignore next */
      cov_10u62psp49().b[61][0]++;
      cov_10u62psp49().s[300]++;
      recommendations.push("Success rate is declining - investigate recent changes");
      /* istanbul ignore next */
      cov_10u62psp49().s[301]++;
      recommendations.push("Consider adjusting auto-resolution criteria");
    } else
    /* istanbul ignore next */
    {
      cov_10u62psp49().b[61][1]++;
    }
    cov_10u62psp49().s[302]++;
    if (metrics.totalAttempts < 10) {
      /* istanbul ignore next */
      cov_10u62psp49().b[62][0]++;
      cov_10u62psp49().s[303]++;
      recommendations.push("Insufficient data for reliable metrics - continue monitoring");
    } else
    /* istanbul ignore next */
    {
      cov_10u62psp49().b[62][1]++;
    }
    cov_10u62psp49().s[304]++;
    if (recommendations.length === 0) {
      /* istanbul ignore next */
      cov_10u62psp49().b[63][0]++;
      cov_10u62psp49().s[305]++;
      recommendations.push("Auto-resolution performance is meeting targets");
    } else
    /* istanbul ignore next */
    {
      cov_10u62psp49().b[63][1]++;
    }
    cov_10u62psp49().s[306]++;
    return recommendations;
  }
  /**
   * Perform enhanced risk assessment
   */
  performEnhancedRiskAssessment(gap, suggestion) {
    /* istanbul ignore next */
    cov_10u62psp49().f[70]++;
    cov_10u62psp49().s[307]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10u62psp49().f[71]++;
      const riskFactors =
      /* istanbul ignore next */
      (cov_10u62psp49().s[308]++, []);
      let riskScore =
      /* istanbul ignore next */
      (cov_10u62psp49().s[309]++, 0);
      // Assess gap severity
      /* istanbul ignore next */
      cov_10u62psp49().s[310]++;
      if (gap.severity === "critical") {
        /* istanbul ignore next */
        cov_10u62psp49().b[64][0]++;
        cov_10u62psp49().s[311]++;
        riskScore += 3;
        /* istanbul ignore next */
        cov_10u62psp49().s[312]++;
        riskFactors.push("Critical severity gap");
      } else {
        /* istanbul ignore next */
        cov_10u62psp49().b[64][1]++;
        cov_10u62psp49().s[313]++;
        if (gap.severity === "high") {
          /* istanbul ignore next */
          cov_10u62psp49().b[65][0]++;
          cov_10u62psp49().s[314]++;
          riskScore += 2;
          /* istanbul ignore next */
          cov_10u62psp49().s[315]++;
          riskFactors.push("High severity gap");
        } else
        /* istanbul ignore next */
        {
          cov_10u62psp49().b[65][1]++;
        }
      }
      // Assess suggestion risk level
      /* istanbul ignore next */
      cov_10u62psp49().s[316]++;
      if (suggestion.riskLevel === "high") {
        /* istanbul ignore next */
        cov_10u62psp49().b[66][0]++;
        cov_10u62psp49().s[317]++;
        riskScore += 3;
        /* istanbul ignore next */
        cov_10u62psp49().s[318]++;
        riskFactors.push("High-risk suggestion");
      } else {
        /* istanbul ignore next */
        cov_10u62psp49().b[66][1]++;
        cov_10u62psp49().s[319]++;
        if (suggestion.riskLevel === "medium") {
          /* istanbul ignore next */
          cov_10u62psp49().b[67][0]++;
          cov_10u62psp49().s[320]++;
          riskScore += 1;
          /* istanbul ignore next */
          cov_10u62psp49().s[321]++;
          riskFactors.push("Medium-risk suggestion");
        } else
        /* istanbul ignore next */
        {
          cov_10u62psp49().b[67][1]++;
        }
      }
      // Assess auto-resolvability
      /* istanbul ignore next */
      cov_10u62psp49().s[322]++;
      if (!suggestion.autoResolvable) {
        /* istanbul ignore next */
        cov_10u62psp49().b[68][0]++;
        cov_10u62psp49().s[323]++;
        riskScore += 2;
        /* istanbul ignore next */
        cov_10u62psp49().s[324]++;
        riskFactors.push("Not marked as auto-resolvable");
      } else
      /* istanbul ignore next */
      {
        cov_10u62psp49().b[68][1]++;
      }
      // Assess testing requirements
      cov_10u62psp49().s[325]++;
      if (
      /* istanbul ignore next */
      (cov_10u62psp49().b[70][0]++, suggestion.testingRequired) &&
      /* istanbul ignore next */
      (cov_10u62psp49().b[70][1]++, !suggestion.rollbackPlan)) {
        /* istanbul ignore next */
        cov_10u62psp49().b[69][0]++;
        cov_10u62psp49().s[326]++;
        riskScore += 2;
        /* istanbul ignore next */
        cov_10u62psp49().s[327]++;
        riskFactors.push("Testing required but no rollback plan");
      } else
      /* istanbul ignore next */
      {
        cov_10u62psp49().b[69][1]++;
      }
      // Determine overall risk and recommendation
      let overallRisk;
      let recommendedAction;
      /* istanbul ignore next */
      cov_10u62psp49().s[328]++;
      if (riskScore <= 2) {
        /* istanbul ignore next */
        cov_10u62psp49().b[71][0]++;
        cov_10u62psp49().s[329]++;
        overallRisk = "low";
        /* istanbul ignore next */
        cov_10u62psp49().s[330]++;
        recommendedAction = "auto_resolve";
      } else {
        /* istanbul ignore next */
        cov_10u62psp49().b[71][1]++;
        cov_10u62psp49().s[331]++;
        if (riskScore <= 5) {
          /* istanbul ignore next */
          cov_10u62psp49().b[72][0]++;
          cov_10u62psp49().s[332]++;
          overallRisk = "medium";
          /* istanbul ignore next */
          cov_10u62psp49().s[333]++;
          recommendedAction = "manual_review";
        } else {
          /* istanbul ignore next */
          cov_10u62psp49().b[72][1]++;
          cov_10u62psp49().s[334]++;
          overallRisk = "high";
          /* istanbul ignore next */
          cov_10u62psp49().s[335]++;
          recommendedAction = "skip";
        }
      }
      const confidence =
      /* istanbul ignore next */
      (cov_10u62psp49().s[336]++, Math.max(0.1, 1.0 - riskScore * 0.1));
      /* istanbul ignore next */
      cov_10u62psp49().s[337]++;
      return {
        overallRisk,
        riskFactors,
        recommendedAction,
        confidence
      };
    });
  }
  /**
   * Optimize resolution strategy
   */
  optimizeResolutionStrategy(gap, suggestion, riskAssessment) {
    /* istanbul ignore next */
    cov_10u62psp49().f[72]++;
    cov_10u62psp49().s[338]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10u62psp49().f[73]++;
      cov_10u62psp49().s[339]++;
      if (riskAssessment.recommendedAction !== "auto_resolve") {
        /* istanbul ignore next */
        cov_10u62psp49().b[73][0]++;
        cov_10u62psp49().s[340]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_10u62psp49().b[73][1]++;
      }
      let strategy;
      let timeout;
      let validationLevel;
      let rollbackRequired;
      /* istanbul ignore next */
      cov_10u62psp49().s[341]++;
      if (
      /* istanbul ignore next */
      (cov_10u62psp49().b[75][0]++, riskAssessment.overallRisk === "low") &&
      /* istanbul ignore next */
      (cov_10u62psp49().b[75][1]++, riskAssessment.confidence > 0.8)) {
        /* istanbul ignore next */
        cov_10u62psp49().b[74][0]++;
        cov_10u62psp49().s[342]++;
        strategy = "fast";
        /* istanbul ignore next */
        cov_10u62psp49().s[343]++;
        timeout = 15000; // 15 seconds
        /* istanbul ignore next */
        cov_10u62psp49().s[344]++;
        validationLevel = "minimal";
        /* istanbul ignore next */
        cov_10u62psp49().s[345]++;
        rollbackRequired = false;
      } else {
        /* istanbul ignore next */
        cov_10u62psp49().b[74][1]++;
        cov_10u62psp49().s[346]++;
        if (riskAssessment.overallRisk === "medium") {
          /* istanbul ignore next */
          cov_10u62psp49().b[76][0]++;
          cov_10u62psp49().s[347]++;
          strategy = "thorough";
          /* istanbul ignore next */
          cov_10u62psp49().s[348]++;
          timeout = 30000; // 30 seconds
          /* istanbul ignore next */
          cov_10u62psp49().s[349]++;
          validationLevel = "standard";
          /* istanbul ignore next */
          cov_10u62psp49().s[350]++;
          rollbackRequired = true;
        } else {
          /* istanbul ignore next */
          cov_10u62psp49().b[76][1]++;
          cov_10u62psp49().s[351]++;
          strategy = "conservative";
          /* istanbul ignore next */
          cov_10u62psp49().s[352]++;
          timeout = 60000; // 60 seconds
          /* istanbul ignore next */
          cov_10u62psp49().s[353]++;
          validationLevel = "comprehensive";
          /* istanbul ignore next */
          cov_10u62psp49().s[354]++;
          rollbackRequired = true;
        }
      }
      /* istanbul ignore next */
      cov_10u62psp49().s[355]++;
      return {
        strategy,
        timeout,
        validationLevel,
        rollbackRequired
      };
    });
  }
  /**
   * Execute optimized resolution
   */
  executeOptimizedResolution(gap, suggestion, strategy) {
    /* istanbul ignore next */
    cov_10u62psp49().f[74]++;
    cov_10u62psp49().s[356]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_10u62psp49().f[75]++;
      const startTime =
      /* istanbul ignore next */
      (cov_10u62psp49().s[357]++, Date.now());
      const resolutionId =
      /* istanbul ignore next */
      (cov_10u62psp49().s[358]++, `optimized_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
      /* istanbul ignore next */
      cov_10u62psp49().s[359]++;
      try {
        /* istanbul ignore next */
        cov_10u62psp49().s[360]++;
        this.resolutionAttempts++;
        // Simulate optimized resolution based on strategy
        const processingTime =
        /* istanbul ignore next */
        (cov_10u62psp49().s[361]++, strategy.strategy === "fast" ?
        /* istanbul ignore next */
        (cov_10u62psp49().b[77][0]++, 5000) :
        /* istanbul ignore next */
        (cov_10u62psp49().b[77][1]++, strategy.strategy === "thorough" ?
        /* istanbul ignore next */
        (cov_10u62psp49().b[78][0]++, 15000) :
        /* istanbul ignore next */
        (cov_10u62psp49().b[78][1]++, 30000)));
        /* istanbul ignore next */
        cov_10u62psp49().s[362]++;
        yield new Promise(resolve => {
          /* istanbul ignore next */
          cov_10u62psp49().f[76]++;
          cov_10u62psp49().s[363]++;
          return setTimeout(resolve, Math.min(processingTime, strategy.timeout));
        });
        // Simulate success based on confidence and strategy
        const successProbability =
        /* istanbul ignore next */
        (cov_10u62psp49().s[364]++, strategy.strategy === "fast" ?
        /* istanbul ignore next */
        (cov_10u62psp49().b[79][0]++, 0.85) :
        /* istanbul ignore next */
        (cov_10u62psp49().b[79][1]++, strategy.strategy === "thorough" ?
        /* istanbul ignore next */
        (cov_10u62psp49().b[80][0]++, 0.9) :
        /* istanbul ignore next */
        (cov_10u62psp49().b[80][1]++, 0.95)));
        const isSuccess =
        /* istanbul ignore next */
        (cov_10u62psp49().s[365]++, Math.random() < successProbability);
        /* istanbul ignore next */
        cov_10u62psp49().s[366]++;
        if (isSuccess) {
          /* istanbul ignore next */
          cov_10u62psp49().b[81][0]++;
          cov_10u62psp49().s[367]++;
          this.successfulResolutions++;
        } else
        /* istanbul ignore next */
        {
          cov_10u62psp49().b[81][1]++;
        }
        const result =
        /* istanbul ignore next */
        (cov_10u62psp49().s[368]++, {
          resolutionId,
          gapId: gap.gapId,
          suggestionId: suggestion.suggestionId,
          status: isSuccess ?
          /* istanbul ignore next */
          (cov_10u62psp49().b[82][0]++, "success") :
          /* istanbul ignore next */
          (cov_10u62psp49().b[82][1]++, "failed"),
          startedAt: new Date(startTime),
          completedAt: new Date(),
          appliedChanges: {
            filesModified: isSuccess ?
            /* istanbul ignore next */
            (cov_10u62psp49().b[83][0]++, ["optimized-resolution.ts"]) :
            /* istanbul ignore next */
            (cov_10u62psp49().b[83][1]++, []),
            configurationsChanged: isSuccess ?
            /* istanbul ignore next */
            (cov_10u62psp49().b[84][0]++, ["config.json"]) :
            /* istanbul ignore next */
            (cov_10u62psp49().b[84][1]++, []),
            dependenciesUpdated: []
          },
          validationResults: {
            testsRun: strategy.validationLevel === "comprehensive" ?
            /* istanbul ignore next */
            (cov_10u62psp49().b[85][0]++, 5) :
            /* istanbul ignore next */
            (cov_10u62psp49().b[85][1]++, strategy.validationLevel === "standard" ?
            /* istanbul ignore next */
            (cov_10u62psp49().b[86][0]++, 3) :
            /* istanbul ignore next */
            (cov_10u62psp49().b[86][1]++, 1)),
            testsPassed: isSuccess ?
            /* istanbul ignore next */
            (cov_10u62psp49().b[87][0]++, strategy.validationLevel === "comprehensive" ?
            /* istanbul ignore next */
            (cov_10u62psp49().b[88][0]++, 5) :
            /* istanbul ignore next */
            (cov_10u62psp49().b[88][1]++, strategy.validationLevel === "standard" ?
            /* istanbul ignore next */
            (cov_10u62psp49().b[89][0]++, 3) :
            /* istanbul ignore next */
            (cov_10u62psp49().b[89][1]++, 1))) :
            /* istanbul ignore next */
            (cov_10u62psp49().b[87][1]++, 0),
            testsFailed: isSuccess ?
            /* istanbul ignore next */
            (cov_10u62psp49().b[90][0]++, 0) :
            /* istanbul ignore next */
            (cov_10u62psp49().b[90][1]++, 1)
          },
          rollbackAvailable: strategy.rollbackRequired,
          error: isSuccess ?
          /* istanbul ignore next */
          (cov_10u62psp49().b[91][0]++, undefined) :
          /* istanbul ignore next */
          (cov_10u62psp49().b[91][1]++, "Optimized resolution failed"),
          logs: [`Optimized resolution using ${strategy.strategy} strategy`, `Processing time: ${Date.now() - startTime}ms`, `Validation level: ${strategy.validationLevel}`]
        });
        // Update success rate history
        const currentRate =
        /* istanbul ignore next */
        (cov_10u62psp49().s[369]++, this.successfulResolutions / this.resolutionAttempts);
        /* istanbul ignore next */
        cov_10u62psp49().s[370]++;
        this.successRateHistory.push(currentRate);
        // Keep only last 20 measurements
        /* istanbul ignore next */
        cov_10u62psp49().s[371]++;
        if (this.successRateHistory.length > 20) {
          /* istanbul ignore next */
          cov_10u62psp49().b[92][0]++;
          cov_10u62psp49().s[372]++;
          this.successRateHistory.shift();
        } else
        /* istanbul ignore next */
        {
          cov_10u62psp49().b[92][1]++;
        }
        cov_10u62psp49().s[373]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_10u62psp49().s[374]++;
        return {
          resolutionId,
          gapId: gap.gapId,
          suggestionId: suggestion.suggestionId,
          status: "failed",
          startedAt: new Date(startTime),
          completedAt: new Date(),
          appliedChanges: {
            filesModified: [],
            configurationsChanged: [],
            dependenciesUpdated: []
          },
          validationResults: {
            testsRun: 0,
            testsPassed: 0,
            testsFailed: 1
          },
          rollbackAvailable: false,
          error: `Optimized resolution failed: ${error}`,
          logs: [`Optimization failed: ${error}`]
        };
      }
    });
  }
  /**
   * Perform adaptive learning
   */
  performAdaptiveLearning() {
    /* istanbul ignore next */
    cov_10u62psp49().f[77]++;
    const metrics =
    /* istanbul ignore next */
    (cov_10u62psp49().s[375]++, this.getSuccessRateMetrics());
    // Adjust target based on performance
    /* istanbul ignore next */
    cov_10u62psp49().s[376]++;
    if (
    /* istanbul ignore next */
    (cov_10u62psp49().b[94][0]++, metrics.currentSuccessRate > 0.85) &&
    /* istanbul ignore next */
    (cov_10u62psp49().b[94][1]++, metrics.trendDirection === "improving")) {
      /* istanbul ignore next */
      cov_10u62psp49().b[93][0]++;
      cov_10u62psp49().s[377]++;
      this.targetSuccessRate = Math.min(this.targetSuccessRate + 0.05, 0.95);
    } else {
      /* istanbul ignore next */
      cov_10u62psp49().b[93][1]++;
      cov_10u62psp49().s[378]++;
      if (
      /* istanbul ignore next */
      (cov_10u62psp49().b[96][0]++, metrics.currentSuccessRate < 0.6) &&
      /* istanbul ignore next */
      (cov_10u62psp49().b[96][1]++, metrics.trendDirection === "declining")) {
        /* istanbul ignore next */
        cov_10u62psp49().b[95][0]++;
        cov_10u62psp49().s[379]++;
        this.targetSuccessRate = Math.max(this.targetSuccessRate - 0.05, 0.6);
      } else
      /* istanbul ignore next */
      {
        cov_10u62psp49().b[95][1]++;
      }
    }
    /* istanbul ignore next */
    cov_10u62psp49().s[380]++;
    console.log(`[AutoResolutionOptimizer] Adaptive learning: target success rate adjusted to ${(this.targetSuccessRate * 100).toFixed(1)}%`);
  }
}
/* istanbul ignore next */
cov_10u62psp49().s[381]++;
exports.AutoResolutionOptimizer = AutoResolutionOptimizer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/caching-layer.ts","mappings":";AAAA;;;;;;;;;GASG;;;AAEH,mCAAoC;AA6BpC;;GAEG;AACH,MAAa,YAAY;IACf,MAAM,CAAc;IACpB,KAAK,CAAa;IAClB,WAAW,CAAM,CAAC,yBAAyB;IAC3C,kBAAkB,CAAU;IAEpC,YAAY,SAA+B,EAAE;QAC3C,IAAI,CAAC,MAAM,GAAG;YACZ,OAAO,EAAE,IAAI;YACb,UAAU,EAAE,IAAI,EAAE,iBAAiB;YACnC,YAAY,EAAE,GAAG;YACjB,oBAAoB,EAAE,IAAI,EAAE,2BAA2B;YACvD,aAAa,EAAE,GAAG,EAAE,sBAAsB;YAC1C,GAAG,MAAM;SACV,CAAC;QAEF,IAAI,CAAC,KAAK,GAAG;YACX,IAAI,EAAE,CAAC;YACP,MAAM,EAAE,CAAC;YACT,OAAO,EAAE,CAAC;YACV,aAAa,EAAE,CAAC;YAChB,cAAc,EAAE,CAAC;YACjB,SAAS,EAAE,CAAC;YACZ,WAAW,EAAE,IAAI,IAAI,EAAE;SACxB,CAAC;QAEF,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC/B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,GAAG,CAAC,OAAkB;QAC1B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;YACzB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC7B,MAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAEhD,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;YAErD,IAAI,MAAM,EAAE,CAAC;gBACX,MAAM,KAAK,GAAe,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAE7C,YAAY;gBACZ,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC;oBACpD,MAAM,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;oBACtC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC;oBACxC,OAAO,IAAI,CAAC;gBACd,CAAC;gBAED,uBAAuB;gBACvB,IAAI,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;gBAC9B,IAAI,KAAK,CAAC,UAAU,IAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC;oBAChD,QAAQ,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;gBAC7C,CAAC;gBAED,sBAAsB;gBACtB,KAAK,CAAC,WAAW,EAAE,CAAC;gBACpB,MAAM,IAAI,CAAC,WAAW,EAAE,GAAG,CACzB,QAAQ,EACR,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EACrB,IAAI,EACJ,KAAK,CAAC,GAAG,CACV,CAAC;gBAEF,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC;gBACvC,OAAO;oBACL,GAAG,QAAQ;oBACX,MAAM,EAAE,IAAI;oBACZ,QAAQ,EAAE,IAAI;iBACf,CAAC;YACJ,CAAC;YAED,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC;YACxC,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;YACzC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC;YACxC,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,GAAG,CAAC,OAAkB,EAAE,QAAoB;QAChD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,QAAQ,CAAC,KAAK,EAAE,CAAC;YAC3C,OAAO;QACT,CAAC;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAEhD,IAAI,CAAC;YACH,IAAI,eAAe,GAAG,QAAQ,CAAC;YAC/B,IAAI,UAAU,GAAG,KAAK,CAAC;YAEvB,2BAA2B;YAC3B,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;YACrD,IACE,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB;gBAC/C,IAAI,CAAC,kBAAkB,EACvB,CAAC;gBACD,eAAe,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBAChD,UAAU,GAAG,IAAI,CAAC;YACpB,CAAC;YAED,MAAM,KAAK,GAAe;gBACxB,QAAQ,EAAE,eAAe;gBACzB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;gBACrB,GAAG,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,QAAQ,CAAC;gBACzC,UAAU;gBACV,WAAW,EAAE,CAAC;aACf,CAAC;YAEF,MAAM,IAAI,CAAC,WAAW,EAAE,GAAG,CACzB,QAAQ,EACR,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EACrB,IAAI,EACJ,KAAK,CAAC,GAAG,CACV,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;QACzB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;QAC3C,CAAC;IACH,CAAC;IAED;;OAEG;IACK,gBAAgB,CAAC,OAAkB;QACzC,oDAAoD;QACpD,MAAM,OAAO,GAAG;YACd,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,OAAO,EAAE;gBACP,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,MAAM;gBAC9B,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,MAAM;gBAC9B,YAAY,EAAE,OAAO,CAAC,OAAO,CAAC,YAAY;gBAC1C,UAAU,EAAE,OAAO,CAAC,OAAO,CAAC,UAAU;aACvC;YACD,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;gBAChC,IAAI,EAAE,CAAC,CAAC,IAAI;gBACZ,UAAU,EAAE,CAAC,CAAC,UAAU;aACzB,CAAC,CAAC;SACJ,CAAC;QAEF,MAAM,IAAI,GAAG,IAAA,mBAAU,EAAC,QAAQ,CAAC;aAC9B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;aAC/B,MAAM,CAAC,KAAK,CAAC,CAAC;QAEjB,MAAM,MAAM,GAAG,UAAU,CAAC;QAC1B,MAAM,GAAG,GAAG,GAAG,MAAM,IAAI,IAAI,EAAE,CAAC;QAEhC,gDAAgD;QAChD,OAAO,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY;YAC1C,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;YAC5C,CAAC,CAAC,GAAG,CAAC;IACV,CAAC;IAED;;OAEG;IACK,YAAY,CAAC,OAAkB,EAAE,QAAoB;QAC3D,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;QAEjC,sCAAsC;QACtC,IAAI,QAAQ,CAAC,QAAQ,GAAG,IAAI,EAAE,CAAC;YAC7B,GAAG,IAAI,CAAC,CAAC;QACX,CAAC;QAED,yCAAyC;QACzC,IAAI,OAAO,CAAC,OAAO,CAAC,MAAM,KAAK,SAAS,EAAE,CAAC;YACzC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,gBAAgB;QAC5C,CAAC;QAED,iCAAiC;QACjC,IAAI,OAAO,CAAC,OAAO,CAAC,MAAM,KAAK,SAAS,EAAE,CAAC;YACzC,GAAG,IAAI,GAAG,CAAC;QACb,CAAC;QAED,OAAO,GAAG,CAAC;IACb,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,QAAQ,CAAC,QAAoB;QACzC,yDAAyD;QACzD,OAAO;YACL,GAAG,QAAQ;YACX,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,eAAe,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI;SACrE,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,UAAU,CAAC,QAAoB;QAC3C,kCAAkC;QAClC,OAAO;YACL,GAAG,QAAQ;YACX,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,IAAI,QAAQ,CAAC,IAAI;SAClE,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,SAAS,CAAC,OAAe;QAC/B,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QAClB,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC;QAC3B,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;IAED;;OAEG;IACK,UAAU,CAAC,OAAe;QAChC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;QACpB,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC;QAC3B,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;IAED;;OAEG;IACK,WAAW,CAAC,OAAe;QACjC,IAAI,CAAC,KAAK,CAAC,OAAO;YAChB,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,CAAC;gBAC1B,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa;gBAC5C,CAAC,CAAC,CAAC,CAAC;QAER,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;QACtE,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;IACtC,CAAC;IAED;;OAEG;IACH,QAAQ;QACN,OAAO,EAAE,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,mBAAmB;QACjB,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;IACzD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,KAAK;QACT,IAAI,CAAC;YACH,MAAM,IAAI,CAAC,WAAW,EAAE,OAAO,EAAE,CAAC;YAClC,IAAI,CAAC,KAAK,GAAG;gBACX,IAAI,EAAE,CAAC;gBACP,MAAM,EAAE,CAAC;gBACT,OAAO,EAAE,CAAC;gBACV,aAAa,EAAE,CAAC;gBAChB,cAAc,EAAE,CAAC;gBACjB,SAAS,EAAE,CAAC;gBACZ,WAAW,EAAE,IAAI,IAAI,EAAE;aACxB,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAC;QAC7C,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,MAAM,CAAC,aAA0B;QACrC,OAAO,CAAC,GAAG,CAAC,yBAAyB,aAAa,CAAC,MAAM,iBAAiB,CAAC,CAAC;QAE5E,KAAK,MAAM,KAAK,IAAI,aAAa,EAAE,CAAC;YAClC,MAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;YAE9C,0BAA0B;YAC1B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;YACxD,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,uDAAuD;gBACvD,sCAAsC;gBACtC,MAAM,YAAY,GAAe;oBAC/B,IAAI,EAAE,wBAAwB,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK;oBAChE,QAAQ,EAAE,SAAS;oBACnB,OAAO,EAAE,cAAc;oBACvB,SAAS,EAAE,SAAS,IAAI,CAAC,GAAG,EAAE,EAAE;oBAChC,SAAS,EAAE,CAAC;oBACZ,QAAQ,EAAE,CAAC;oBACX,OAAO,EAAE,IAAI;iBACd,CAAC;gBAEF,MAAM,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;YACtC,CAAC;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACK,qBAAqB;QAC3B,2DAA2D;QAC3D,wDAAwD;QACxD,MAAM,KAAK,GAAG,IAAI,GAAG,EAAkB,CAAC;QAExC,IAAI,CAAC,WAAW,GAAG;YACjB,GAAG,EAAE,KAAK,EAAE,GAAW,EAAE,EAAE;gBACzB,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC;YAChC,CAAC;YACD,GAAG,EAAE,KAAK,EAAE,GAAW,EAAE,KAAa,EAAE,IAAa,EAAE,GAAY,EAAE,EAAE;gBACrE,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;gBACtB,iEAAiE;gBACjE,yCAAyC;gBACzC,OAAO,IAAI,CAAC;YACd,CAAC;YACD,GAAG,EAAE,KAAK,EAAE,GAAW,EAAE,EAAE;gBACzB,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAC/B,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAClB,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzB,CAAC;YACD,MAAM,EAAE,KAAK,EAAE,GAAW,EAAE,EAAE;gBAC5B,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChC,CAAC;YACD,OAAO,EAAE,KAAK,IAAI,EAAE;gBAClB,KAAK,CAAC,KAAK,EAAE,CAAC;gBACd,OAAO,IAAI,CAAC;YACd,CAAC;SACF,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,WAAW;QAMf,MAAM,MAAM,GAAa,EAAE,CAAC;QAC5B,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAE7B,IAAI,CAAC;YACH,0BAA0B;YAC1B,MAAM,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,cAAc,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;YAC5D,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,cAAc,CAAC,CAAC;YAE3D,IAAI,MAAM,KAAK,IAAI,EAAE,CAAC;gBACpB,MAAM,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;YAChD,CAAC;YAED,MAAM,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,cAAc,CAAC,CAAC;QAC9C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,CAAC,IAAI,CAAC,6BAA6B,KAAK,EAAE,CAAC,CAAC;QACpD,CAAC;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;QACvC,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,OAAO,GAAG,GAAG,CAAC,CAAC,UAAU;QAEhE,OAAO;YACL,OAAO;YACP,OAAO;YACP,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO;YAC3B,MAAM;SACP,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,SAAS;QACP,OAAO,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;IAC5B,CAAC;IAED;;OAEG;IACH,YAAY,CAAC,SAA+B;QAC1C,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,SAAS,EAAE,CAAC;IACjD,CAAC;CACF;AAlYD,oCAkYC;AAED;;GAEG;AACI,MAAM,kBAAkB,GAAG,CAChC,MAA6B,EACf,EAAE;IAChB,OAAO,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC;AAClC,CAAC,CAAC;AAJW,QAAA,kBAAkB,sBAI7B;AAEF;;GAEG;AACU,QAAA,aAAa,GAAG;IAC3B,WAAW,EAAE;QACX,OAAO,EAAE,IAAI;QACb,UAAU,EAAE,GAAG,EAAE,YAAY;QAC7B,aAAa,EAAE,GAAG;KACnB;IACD,OAAO,EAAE;QACP,OAAO,EAAE,IAAI;QACb,UAAU,EAAE,IAAI,EAAE,aAAa;QAC/B,aAAa,EAAE,GAAG;KACnB;IACD,UAAU,EAAE;QACV,OAAO,EAAE,IAAI;QACb,UAAU,EAAE,IAAI,EAAE,SAAS;QAC3B,aAAa,EAAE,GAAG;KACnB;CACO,CAAC","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/caching-layer.ts"],"sourcesContent":["/**\n * AI Orchestrator Caching Layer\n *\n * Implements:\n * - Redis/ElastiCache integration for response caching\n * - Intelligent cache key generation\n * - TTL-based cache invalidation\n * - Cache hit rate monitoring\n * - Performance optimization for frequent queries\n */\n\nimport { createHash } from \"crypto\";\nimport { AiRequest, AiResponse } from \"./types\";\n\nexport interface CacheConfig {\n  enabled: boolean;\n  ttlSeconds: number;\n  maxKeyLength: number;\n  compressionThreshold: number;\n  hitRateTarget: number;\n}\n\nexport interface CacheStats {\n  hits: number;\n  misses: number;\n  hitRate: number;\n  totalRequests: number;\n  averageLatency: number;\n  cacheSize: number;\n  lastUpdated: Date;\n}\n\nexport interface CacheEntry {\n  response: AiResponse;\n  timestamp: number;\n  ttl: number;\n  compressed: boolean;\n  accessCount: number;\n}\n\n/**\n * Redis-based Caching Layer for AI Responses\n */\nexport class CachingLayer {\n  private config: CacheConfig;\n  private stats: CacheStats;\n  private redisClient: any; // Redis client interface\n  private compressionEnabled: boolean;\n\n  constructor(config: Partial<CacheConfig> = {}) {\n    this.config = {\n      enabled: true,\n      ttlSeconds: 3600, // 1 hour default\n      maxKeyLength: 250,\n      compressionThreshold: 1024, // Compress responses > 1KB\n      hitRateTarget: 0.8, // 80% target hit rate\n      ...config,\n    };\n\n    this.stats = {\n      hits: 0,\n      misses: 0,\n      hitRate: 0,\n      totalRequests: 0,\n      averageLatency: 0,\n      cacheSize: 0,\n      lastUpdated: new Date(),\n    };\n\n    this.compressionEnabled = true;\n    this.initializeRedisClient();\n  }\n\n  /**\n   * Get cached response for request\n   */\n  async get(request: AiRequest): Promise<AiResponse | null> {\n    if (!this.config.enabled) {\n      return null;\n    }\n\n    const startTime = Date.now();\n    const cacheKey = this.generateCacheKey(request);\n\n    try {\n      const cached = await this.redisClient?.get(cacheKey);\n\n      if (cached) {\n        const entry: CacheEntry = JSON.parse(cached);\n\n        // Check TTL\n        if (Date.now() - entry.timestamp > entry.ttl * 1000) {\n          await this.redisClient?.del(cacheKey);\n          this.recordMiss(Date.now() - startTime);\n          return null;\n        }\n\n        // Decompress if needed\n        let response = entry.response;\n        if (entry.compressed && this.compressionEnabled) {\n          response = await this.decompress(response);\n        }\n\n        // Update access count\n        entry.accessCount++;\n        await this.redisClient?.set(\n          cacheKey,\n          JSON.stringify(entry),\n          \"EX\",\n          entry.ttl\n        );\n\n        this.recordHit(Date.now() - startTime);\n        return {\n          ...response,\n          cached: true,\n          cacheHit: true,\n        };\n      }\n\n      this.recordMiss(Date.now() - startTime);\n      return null;\n    } catch (error) {\n      console.error(\"Cache get error:\", error);\n      this.recordMiss(Date.now() - startTime);\n      return null;\n    }\n  }\n\n  /**\n   * Store response in cache\n   */\n  async set(request: AiRequest, response: AiResponse): Promise<void> {\n    if (!this.config.enabled || response.error) {\n      return;\n    }\n\n    const cacheKey = this.generateCacheKey(request);\n\n    try {\n      let responseToCache = response;\n      let compressed = false;\n\n      // Compress large responses\n      const responseSize = JSON.stringify(response).length;\n      if (\n        responseSize > this.config.compressionThreshold &&\n        this.compressionEnabled\n      ) {\n        responseToCache = await this.compress(response);\n        compressed = true;\n      }\n\n      const entry: CacheEntry = {\n        response: responseToCache,\n        timestamp: Date.now(),\n        ttl: this.calculateTTL(request, response),\n        compressed,\n        accessCount: 0,\n      };\n\n      await this.redisClient?.set(\n        cacheKey,\n        JSON.stringify(entry),\n        \"EX\",\n        entry.ttl\n      );\n\n      this.stats.cacheSize++;\n    } catch (error) {\n      console.error(\"Cache set error:\", error);\n    }\n  }\n\n  /**\n   * Generate cache key from request\n   */\n  private generateCacheKey(request: AiRequest): string {\n    // Create deterministic hash from request parameters\n    const keyData = {\n      prompt: request.prompt,\n      context: {\n        domain: request.context.domain,\n        locale: request.context.locale,\n        requireTools: request.context.requireTools,\n        budgetTier: request.context.budgetTier,\n      },\n      tools: request.tools?.map((t) => ({\n        name: t.name,\n        parameters: t.parameters,\n      })),\n    };\n\n    const hash = createHash(\"sha256\")\n      .update(JSON.stringify(keyData))\n      .digest(\"hex\");\n\n    const prefix = \"ai-cache\";\n    const key = `${prefix}:${hash}`;\n\n    // Ensure key length doesn't exceed Redis limits\n    return key.length > this.config.maxKeyLength\n      ? key.substring(0, this.config.maxKeyLength)\n      : key;\n  }\n\n  /**\n   * Calculate TTL based on request characteristics\n   */\n  private calculateTTL(request: AiRequest, response: AiResponse): number {\n    let ttl = this.config.ttlSeconds;\n\n    // Longer TTL for expensive operations\n    if (response.costEuro > 0.01) {\n      ttl *= 2;\n    }\n\n    // Shorter TTL for time-sensitive domains\n    if (request.context.domain === \"support\") {\n      ttl = Math.min(ttl, 300); // 5 minutes max\n    }\n\n    // Longer TTL for general queries\n    if (request.context.domain === \"general\") {\n      ttl *= 1.5;\n    }\n\n    return ttl;\n  }\n\n  /**\n   * Compress response data\n   */\n  private async compress(response: AiResponse): Promise<AiResponse> {\n    // Simple compression simulation - in production use zlib\n    return {\n      ...response,\n      text: response.text ? `[COMPRESSED]${response.text}` : response.text,\n    };\n  }\n\n  /**\n   * Decompress response data\n   */\n  private async decompress(response: AiResponse): Promise<AiResponse> {\n    // Simple decompression simulation\n    return {\n      ...response,\n      text: response.text?.replace(\"[COMPRESSED]\", \"\") || response.text,\n    };\n  }\n\n  /**\n   * Record cache hit\n   */\n  private recordHit(latency: number): void {\n    this.stats.hits++;\n    this.stats.totalRequests++;\n    this.updateStats(latency);\n  }\n\n  /**\n   * Record cache miss\n   */\n  private recordMiss(latency: number): void {\n    this.stats.misses++;\n    this.stats.totalRequests++;\n    this.updateStats(latency);\n  }\n\n  /**\n   * Update cache statistics\n   */\n  private updateStats(latency: number): void {\n    this.stats.hitRate =\n      this.stats.totalRequests > 0\n        ? this.stats.hits / this.stats.totalRequests\n        : 0;\n\n    this.stats.averageLatency = (this.stats.averageLatency + latency) / 2;\n    this.stats.lastUpdated = new Date();\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getStats(): CacheStats {\n    return { ...this.stats };\n  }\n\n  /**\n   * Check if cache performance meets targets\n   */\n  isPerformanceTarget(): boolean {\n    return this.stats.hitRate >= this.config.hitRateTarget;\n  }\n\n  /**\n   * Clear cache\n   */\n  async clear(): Promise<void> {\n    try {\n      await this.redisClient?.flushdb();\n      this.stats = {\n        hits: 0,\n        misses: 0,\n        hitRate: 0,\n        totalRequests: 0,\n        averageLatency: 0,\n        cacheSize: 0,\n        lastUpdated: new Date(),\n      };\n    } catch (error) {\n      console.error(\"Cache clear error:\", error);\n    }\n  }\n\n  /**\n   * Warm up cache with common queries\n   */\n  async warmUp(commonQueries: AiRequest[]): Promise<void> {\n    console.log(`Warming up cache with ${commonQueries.length} common queries`);\n\n    for (const query of commonQueries) {\n      const cacheKey = this.generateCacheKey(query);\n\n      // Check if already cached\n      const exists = await this.redisClient?.exists(cacheKey);\n      if (!exists) {\n        // In production, this would trigger actual AI requests\n        // For now, create placeholder entries\n        const mockResponse: AiResponse = {\n          text: `Cached response for: ${query.prompt.substring(0, 50)}...`,\n          provider: \"bedrock\",\n          modelId: \"cache-warmed\",\n          requestId: `cache-${Date.now()}`,\n          latencyMs: 0,\n          costEuro: 0,\n          success: true,\n        };\n\n        await this.set(query, mockResponse);\n      }\n    }\n  }\n\n  /**\n   * Initialize Redis client\n   */\n  private initializeRedisClient(): void {\n    // In production, this would initialize actual Redis client\n    // For now, use in-memory mock that actually stores data\n    const store = new Map<string, string>();\n\n    this.redisClient = {\n      get: async (key: string) => {\n        return store.get(key) || null;\n      },\n      set: async (key: string, value: string, mode?: string, ttl?: number) => {\n        store.set(key, value);\n        // In a real implementation, TTL would be handled with setTimeout\n        // For testing purposes, we'll ignore TTL\n        return \"OK\";\n      },\n      del: async (key: string) => {\n        const existed = store.has(key);\n        store.delete(key);\n        return existed ? 1 : 0;\n      },\n      exists: async (key: string) => {\n        return store.has(key) ? 1 : 0;\n      },\n      flushdb: async () => {\n        store.clear();\n        return \"OK\";\n      },\n    };\n  }\n\n  /**\n   * Health check for cache system\n   */\n  async healthCheck(): Promise<{\n    healthy: boolean;\n    latency: number;\n    hitRate: number;\n    errors: string[];\n  }> {\n    const errors: string[] = [];\n    const startTime = Date.now();\n\n    try {\n      // Test Redis connectivity\n      await this.redisClient?.set(\"health-check\", \"ok\", \"EX\", 10);\n      const result = await this.redisClient?.get(\"health-check\");\n\n      if (result !== \"ok\") {\n        errors.push(\"Redis connectivity test failed\");\n      }\n\n      await this.redisClient?.del(\"health-check\");\n    } catch (error) {\n      errors.push(`Redis health check error: ${error}`);\n    }\n\n    const latency = Date.now() - startTime;\n    const healthy = errors.length === 0 && latency < 100; // < 100ms\n\n    return {\n      healthy,\n      latency,\n      hitRate: this.stats.hitRate,\n      errors,\n    };\n  }\n\n  /**\n   * Get cache configuration\n   */\n  getConfig(): CacheConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Update cache configuration\n   */\n  updateConfig(newConfig: Partial<CacheConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n  }\n}\n\n/**\n * Factory function for creating caching layer\n */\nexport const createCachingLayer = (\n  config?: Partial<CacheConfig>\n): CachingLayer => {\n  return new CachingLayer(config);\n};\n\n/**\n * Default cache configurations for different environments\n */\nexport const CACHE_CONFIGS = {\n  development: {\n    enabled: true,\n    ttlSeconds: 300, // 5 minutes\n    hitRateTarget: 0.5,\n  },\n  staging: {\n    enabled: true,\n    ttlSeconds: 1800, // 30 minutes\n    hitRateTarget: 0.7,\n  },\n  production: {\n    enabled: true,\n    ttlSeconds: 3600, // 1 hour\n    hitRateTarget: 0.8,\n  },\n} as const;\n"],"version":3}
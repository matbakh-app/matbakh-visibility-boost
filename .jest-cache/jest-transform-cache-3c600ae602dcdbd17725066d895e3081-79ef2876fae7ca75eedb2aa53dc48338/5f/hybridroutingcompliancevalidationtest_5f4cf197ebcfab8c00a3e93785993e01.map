{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/__tests__/hybrid-routing-compliance-validation.test.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/__tests__/hybrid-routing-compliance-validation.test.ts"],"sourcesContent":["/**\n * Hybrid Routing Compliance Validation Tests\n *\n * Tests compliance validation for both direct Bedrock and MCP integration routing paths\n * in the Bedrock Support Manager hybrid architecture.\n */\n\nimport { beforeEach, describe, expect, it, jest } from \"@jest/globals\";\nimport { ComplianceIntegration } from \"../compliance-integration\";\nimport {\n  GDPRHybridComplianceValidator,\n  HybridRoutingPath,\n} from \"../gdpr-hybrid-compliance-validator\";\nimport { ProviderAgreementCompliance } from \"../provider-agreement-compliance\";\nimport { AiRequest, Provider } from \"../types\";\n\n// Mock dependencies\njest.mock(\"../audit-trail-system\", () => ({\n  AuditTrailSystem: jest.fn().mockImplementation(() => ({\n    logEvent: jest.fn().mockResolvedValue(undefined),\n  })),\n}));\n\njest.mock(\"../basic-logger\", () => ({\n  BasicLogger: jest.fn().mockImplementation(() => ({\n    info: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n  })),\n}));\n\njest.mock(\"../../compliance/gdpr-compliance-validator\", () => ({\n  GDPRComplianceValidator: jest.fn().mockImplementation(() => ({\n    validateCompliance: jest.fn().mockResolvedValue({\n      overallStatus: \"compliant\",\n      complianceScore: 100,\n    }),\n  })),\n}));\n\ndescribe(\"Hybrid Routing Compliance Validation\", () => {\n  let complianceIntegration: ComplianceIntegration;\n  let gdprValidator: GDPRHybridComplianceValidator;\n  let providerCompliance: ProviderAgreementCompliance;\n  let mockRequest: AiRequest;\n\n  beforeEach(() => {\n    complianceIntegration = new ComplianceIntegration();\n    gdprValidator = new GDPRHybridComplianceValidator();\n    providerCompliance = new ProviderAgreementCompliance();\n\n    mockRequest = {\n      prompt: \"Test infrastructure audit request\",\n      context: {\n        domain: \"infrastructure\",\n        intent: \"audit\",\n      },\n    };\n  });\n\n  describe(\"Direct Bedrock Routing Path Compliance\", () => {\n    let directBedrockPath: HybridRoutingPath;\n\n    beforeEach(() => {\n      directBedrockPath = {\n        routeType: \"direct_bedrock\",\n        provider: \"bedrock\",\n        operationType: \"infrastructure\",\n        priority: \"critical\",\n      };\n    });\n\n    it(\"should validate GDPR compliance for direct Bedrock operations\", async () => {\n      const correlationId = \"test-direct-bedrock-gdpr\";\n\n      const result = await gdprValidator.validateRoutingPathCompliance(\n        directBedrockPath,\n        correlationId\n      );\n\n      expect(result).toBeDefined();\n      expect(result.routingPath.routeType).toBe(\"direct_bedrock\");\n      expect(result.routingPath.provider).toBe(\"bedrock\");\n      expect(result.correlationId).toBe(correlationId);\n      expect(typeof result.isCompliant).toBe(\"boolean\");\n      expect(typeof result.complianceScore).toBe(\"number\");\n      expect(result.complianceScore).toBeGreaterThanOrEqual(0);\n      expect(result.complianceScore).toBeLessThanOrEqual(100);\n    });\n\n    it(\"should validate provider agreement compliance for direct Bedrock\", async () => {\n      const result = await complianceIntegration.performComplianceCheck(\n        mockRequest,\n        \"bedrock\",\n        \"test-direct-bedrock-provider\"\n      );\n\n      expect(result.allowed).toBe(true);\n      expect(result.provider).toBe(\"bedrock\");\n      expect(result.complianceScore).toBeGreaterThan(80);\n      expect(result.agreementStatus).toBe(\"active\");\n      expect(result.violations).toHaveLength(0);\n    });\n\n    it(\"should validate data processing compliance for direct Bedrock\", async () => {\n      const correlationId = \"test-direct-bedrock-data-processing\";\n\n      const result = await gdprValidator.validateRoutingPathCompliance(\n        directBedrockPath,\n        correlationId\n      );\n\n      expect(result.dataProcessingCompliance).toBeDefined();\n      expect(typeof result.dataProcessingCompliance.lawfulBasisDocumented).toBe(\n        \"boolean\"\n      );\n      expect(\n        typeof result.dataProcessingCompliance.purposeLimitationEnforced\n      ).toBe(\"boolean\");\n      expect(\n        typeof result.dataProcessingCompliance.dataMinimizationImplemented\n      ).toBe(\"boolean\");\n      expect(\n        typeof result.dataProcessingCompliance.euDataResidencyCompliant\n      ).toBe(\"boolean\");\n    });\n\n    it(\"should validate audit trail compliance for direct Bedrock\", async () => {\n      const correlationId = \"test-direct-bedrock-audit-trail\";\n\n      const result = await gdprValidator.validateRoutingPathCompliance(\n        directBedrockPath,\n        correlationId\n      );\n\n      expect(result.auditTrailCompliance).toBeDefined();\n      expect(typeof result.auditTrailCompliance.auditLoggingEnabled).toBe(\n        \"boolean\"\n      );\n      expect(typeof result.auditTrailCompliance.correlationIdTracking).toBe(\n        \"boolean\"\n      );\n      expect(typeof result.auditTrailCompliance.routingPathLogged).toBe(\n        \"boolean\"\n      );\n      expect(typeof result.auditTrailCompliance.integrityCheckingEnabled).toBe(\n        \"boolean\"\n      );\n    });\n\n    it(\"should validate emergency operations compliance for direct Bedrock\", async () => {\n      const emergencyPath: HybridRoutingPath = {\n        routeType: \"direct_bedrock\",\n        provider: \"bedrock\",\n        operationType: \"emergency\",\n        priority: \"critical\",\n      };\n\n      const correlationId = \"test-direct-bedrock-emergency\";\n\n      const result = await gdprValidator.validateRoutingPathCompliance(\n        emergencyPath,\n        correlationId\n      );\n\n      expect(result.routingPath.operationType).toBe(\"emergency\");\n      expect(result.routingPath.priority).toBe(\"critical\");\n      // Emergency operations should still maintain compliance\n      expect(result.dataProcessingCompliance).toBeDefined();\n      expect(result.auditTrailCompliance).toBeDefined();\n    });\n\n    it(\"should validate infrastructure audit operations compliance\", async () => {\n      const infrastructurePath: HybridRoutingPath = {\n        routeType: \"direct_bedrock\",\n        provider: \"bedrock\",\n        operationType: \"infrastructure\",\n        priority: \"critical\",\n      };\n\n      const correlationId = \"test-direct-bedrock-infrastructure\";\n\n      const result = await gdprValidator.validateRoutingPathCompliance(\n        infrastructurePath,\n        correlationId\n      );\n\n      expect(result.routingPath.operationType).toBe(\"infrastructure\");\n      // Infrastructure operations should have high compliance requirements\n      expect(result.dataProcessingCompliance.euDataResidencyCompliant).toBe(\n        true\n      );\n    });\n\n    it(\"should validate meta monitoring operations compliance\", async () => {\n      const metaMonitorPath: HybridRoutingPath = {\n        routeType: \"direct_bedrock\",\n        provider: \"bedrock\",\n        operationType: \"meta_monitor\",\n        priority: \"high\",\n      };\n\n      const correlationId = \"test-direct-bedrock-meta-monitor\";\n\n      const result = await gdprValidator.validateRoutingPathCompliance(\n        metaMonitorPath,\n        correlationId\n      );\n\n      expect(result.routingPath.operationType).toBe(\"meta_monitor\");\n      expect(result.routingPath.priority).toBe(\"high\");\n    });\n  });\n\n  describe(\"MCP Integration Routing Path Compliance\", () => {\n    let mcpIntegrationPath: HybridRoutingPath;\n\n    beforeEach(() => {\n      mcpIntegrationPath = {\n        routeType: \"mcp_integration\",\n        provider: \"google\",\n        operationType: \"standard_analysis\",\n        priority: \"medium\",\n      };\n    });\n\n    it(\"should validate GDPR compliance for MCP integration operations\", async () => {\n      const correlationId = \"test-mcp-integration-gdpr\";\n\n      const result = await gdprValidator.validateRoutingPathCompliance(\n        mcpIntegrationPath,\n        correlationId\n      );\n\n      expect(result).toBeDefined();\n      expect(result.routingPath.routeType).toBe(\"mcp_integration\");\n      expect(result.routingPath.provider).toBe(\"google\");\n      expect(result.correlationId).toBe(correlationId);\n      expect(typeof result.isCompliant).toBe(\"boolean\");\n      expect(typeof result.complianceScore).toBe(\"number\");\n    });\n\n    it(\"should validate provider agreement compliance for MCP integration\", async () => {\n      const result = await complianceIntegration.performComplianceCheck(\n        mockRequest,\n        \"google\",\n        \"test-mcp-integration-provider\"\n      );\n\n      expect(result.allowed).toBe(true);\n      expect(result.provider).toBe(\"google\");\n      expect(result.complianceScore).toBeGreaterThan(70);\n      expect(result.agreementStatus).toBe(\"active\");\n    });\n\n    it(\"should validate data processing compliance for MCP integration\", async () => {\n      const correlationId = \"test-mcp-integration-data-processing\";\n\n      const result = await gdprValidator.validateRoutingPathCompliance(\n        mcpIntegrationPath,\n        correlationId\n      );\n\n      expect(result.dataProcessingCompliance).toBeDefined();\n      expect(typeof result.dataProcessingCompliance.lawfulBasisDocumented).toBe(\n        \"boolean\"\n      );\n      expect(\n        typeof result.dataProcessingCompliance.purposeLimitationEnforced\n      ).toBe(\"boolean\");\n      expect(\n        typeof result.dataProcessingCompliance.dataMinimizationImplemented\n      ).toBe(\"boolean\");\n    });\n\n    it(\"should validate Kiro communication operations compliance\", async () => {\n      const kiroCommPath: HybridRoutingPath = {\n        routeType: \"mcp_integration\",\n        provider: \"bedrock\",\n        operationType: \"kiro_communication\",\n        priority: \"medium\",\n      };\n\n      const correlationId = \"test-mcp-integration-kiro-comm\";\n\n      const result = await gdprValidator.validateRoutingPathCompliance(\n        kiroCommPath,\n        correlationId\n      );\n\n      expect(result.routingPath.operationType).toBe(\"kiro_communication\");\n      expect(result.routingPath.routeType).toBe(\"mcp_integration\");\n    });\n\n    it(\"should validate standard analysis operations compliance\", async () => {\n      const standardAnalysisPath: HybridRoutingPath = {\n        routeType: \"mcp_integration\",\n        provider: \"google\",\n        operationType: \"standard_analysis\",\n        priority: \"medium\",\n      };\n\n      const correlationId = \"test-mcp-integration-standard-analysis\";\n\n      const result = await gdprValidator.validateRoutingPathCompliance(\n        standardAnalysisPath,\n        correlationId\n      );\n\n      expect(result.routingPath.operationType).toBe(\"standard_analysis\");\n      expect(result.routingPath.provider).toBe(\"google\");\n    });\n\n    it(\"should validate background tasks operations compliance\", async () => {\n      const backgroundTasksPath: HybridRoutingPath = {\n        routeType: \"mcp_integration\",\n        provider: \"meta\",\n        operationType: \"background_tasks\",\n        priority: \"low\",\n      };\n\n      const correlationId = \"test-mcp-integration-background-tasks\";\n\n      const result = await gdprValidator.validateRoutingPathCompliance(\n        backgroundTasksPath,\n        correlationId\n      );\n\n      expect(result.routingPath.operationType).toBe(\"background_tasks\");\n      expect(result.routingPath.priority).toBe(\"low\");\n    });\n  });\n\n  describe(\"Cross-Path Compliance Validation\", () => {\n    it(\"should validate compliance consistency between routing paths\", async () => {\n      const directBedrockPath: HybridRoutingPath = {\n        routeType: \"direct_bedrock\",\n        provider: \"bedrock\",\n        operationType: \"infrastructure\",\n        priority: \"critical\",\n      };\n\n      const mcpIntegrationPath: HybridRoutingPath = {\n        routeType: \"mcp_integration\",\n        provider: \"bedrock\",\n        operationType: \"standard_analysis\",\n        priority: \"medium\",\n      };\n\n      const directResult = await gdprValidator.validateRoutingPathCompliance(\n        directBedrockPath,\n        \"test-cross-path-direct\"\n      );\n\n      const mcpResult = await gdprValidator.validateRoutingPathCompliance(\n        mcpIntegrationPath,\n        \"test-cross-path-mcp\"\n      );\n\n      // Both paths should maintain consistent compliance standards\n      expect(\n        directResult.dataProcessingCompliance.euDataResidencyCompliant\n      ).toBe(mcpResult.dataProcessingCompliance.euDataResidencyCompliant);\n      expect(directResult.auditTrailCompliance.auditLoggingEnabled).toBe(\n        mcpResult.auditTrailCompliance.auditLoggingEnabled\n      );\n    });\n\n    it(\"should generate comprehensive hybrid compliance report\", async () => {\n      const report = await gdprValidator.generateHybridComplianceReport();\n\n      expect(report).toBeDefined();\n      expect(report.timestamp).toBeInstanceOf(Date);\n      expect([\"compliant\", \"non_compliant\", \"partial\"]).toContain(\n        report.overallCompliance\n      );\n      expect(typeof report.complianceScore).toBe(\"number\");\n\n      // Validate both routing paths are included\n      expect(report.routingPathCompliance.directBedrock).toBeDefined();\n      expect(report.routingPathCompliance.mcpIntegration).toBeDefined();\n      expect(\n        report.routingPathCompliance.directBedrock.routingPath.routeType\n      ).toBe(\"direct_bedrock\");\n      expect(\n        report.routingPathCompliance.mcpIntegration.routingPath.routeType\n      ).toBe(\"mcp_integration\");\n\n      // Validate cross-path compliance\n      expect(report.crossPathCompliance).toBeDefined();\n      expect(typeof report.crossPathCompliance.dataConsistency).toBe(\"boolean\");\n      expect(typeof report.crossPathCompliance.auditTrailContinuity).toBe(\n        \"boolean\"\n      );\n      expect(typeof report.crossPathCompliance.consentPropagation).toBe(\n        \"boolean\"\n      );\n      expect(typeof report.crossPathCompliance.piiHandlingConsistency).toBe(\n        \"boolean\"\n      );\n    });\n\n    it(\"should validate routing decision compliance\", async () => {\n      const directBedrockPath: HybridRoutingPath = {\n        routeType: \"direct_bedrock\",\n        provider: \"bedrock\",\n        operationType: \"emergency\",\n        priority: \"critical\",\n      };\n\n      const mcpIntegrationPath: HybridRoutingPath = {\n        routeType: \"mcp_integration\",\n        provider: \"google\",\n        operationType: \"standard_analysis\",\n        priority: \"medium\",\n      };\n\n      const directResult = await gdprValidator.validateBeforeRouting(\n        directBedrockPath,\n        \"test-routing-decision-direct\"\n      );\n\n      const mcpResult = await gdprValidator.validateBeforeRouting(\n        mcpIntegrationPath,\n        \"test-routing-decision-mcp\"\n      );\n\n      expect(directResult).toBeDefined();\n      expect(typeof directResult.allowed).toBe(\"boolean\");\n      expect(typeof directResult.reason).toBe(\"string\");\n\n      expect(mcpResult).toBeDefined();\n      expect(typeof mcpResult.allowed).toBe(\"boolean\");\n      expect(typeof mcpResult.reason).toBe(\"string\");\n    });\n  });\n\n  describe(\"Provider-Specific Compliance Validation\", () => {\n    it(\"should validate AWS Bedrock compliance for both routing paths\", async () => {\n      const directPath: HybridRoutingPath = {\n        routeType: \"direct_bedrock\",\n        provider: \"bedrock\",\n        operationType: \"infrastructure\",\n        priority: \"critical\",\n      };\n\n      const mcpPath: HybridRoutingPath = {\n        routeType: \"mcp_integration\",\n        provider: \"bedrock\",\n        operationType: \"kiro_communication\",\n        priority: \"medium\",\n      };\n\n      const directResult = await gdprValidator.validateRoutingPathCompliance(\n        directPath,\n        \"test-bedrock-direct\"\n      );\n\n      const mcpResult = await gdprValidator.validateRoutingPathCompliance(\n        mcpPath,\n        \"test-bedrock-mcp\"\n      );\n\n      expect(directResult.routingPath.provider).toBe(\"bedrock\");\n      expect(mcpResult.routingPath.provider).toBe(\"bedrock\");\n\n      // Both should maintain AWS Bedrock compliance standards\n      const directProviderResult =\n        await complianceIntegration.performComplianceCheck(\n          mockRequest,\n          \"bedrock\",\n          \"test-bedrock-direct-provider\"\n        );\n\n      const mcpProviderResult =\n        await complianceIntegration.performComplianceCheck(\n          mockRequest,\n          \"bedrock\",\n          \"test-bedrock-mcp-provider\"\n        );\n\n      expect(directProviderResult.allowed).toBe(true);\n      expect(mcpProviderResult.allowed).toBe(true);\n      expect(directProviderResult.complianceScore).toBeGreaterThan(80);\n      expect(mcpProviderResult.complianceScore).toBeGreaterThan(80);\n    });\n\n    it(\"should validate Google AI compliance for MCP integration\", async () => {\n      const googlePath: HybridRoutingPath = {\n        routeType: \"mcp_integration\",\n        provider: \"google\",\n        operationType: \"standard_analysis\",\n        priority: \"medium\",\n      };\n\n      const result = await gdprValidator.validateRoutingPathCompliance(\n        googlePath,\n        \"test-google-mcp\"\n      );\n\n      expect(result.routingPath.provider).toBe(\"google\");\n\n      const providerResult = await complianceIntegration.performComplianceCheck(\n        mockRequest,\n        \"google\",\n        \"test-google-provider\"\n      );\n\n      expect(providerResult.allowed).toBe(true);\n      expect(providerResult.complianceScore).toBeGreaterThan(70);\n    });\n\n    it(\"should validate Meta AI compliance for MCP integration\", async () => {\n      const metaPath: HybridRoutingPath = {\n        routeType: \"mcp_integration\",\n        provider: \"meta\",\n        operationType: \"background_tasks\",\n        priority: \"low\",\n      };\n\n      const result = await gdprValidator.validateRoutingPathCompliance(\n        metaPath,\n        \"test-meta-mcp\"\n      );\n\n      expect(result.routingPath.provider).toBe(\"meta\");\n\n      const providerResult = await complianceIntegration.performComplianceCheck(\n        mockRequest,\n        \"meta\",\n        \"test-meta-provider\"\n      );\n\n      expect(providerResult.allowed).toBe(true);\n      expect(providerResult.complianceScore).toBeGreaterThan(80);\n    });\n  });\n\n  describe(\"Operation Type Compliance Validation\", () => {\n    const operationTypes: Array<{\n      type: HybridRoutingPath[\"operationType\"];\n      preferredRoute: \"direct_bedrock\" | \"mcp_integration\";\n      priority: HybridRoutingPath[\"priority\"];\n    }> = [\n      {\n        type: \"emergency\",\n        preferredRoute: \"direct_bedrock\",\n        priority: \"critical\",\n      },\n      {\n        type: \"infrastructure\",\n        preferredRoute: \"direct_bedrock\",\n        priority: \"critical\",\n      },\n      {\n        type: \"meta_monitor\",\n        preferredRoute: \"direct_bedrock\",\n        priority: \"high\",\n      },\n      {\n        type: \"implementation\",\n        preferredRoute: \"direct_bedrock\",\n        priority: \"high\",\n      },\n      {\n        type: \"kiro_communication\",\n        preferredRoute: \"mcp_integration\",\n        priority: \"medium\",\n      },\n      {\n        type: \"standard_analysis\",\n        preferredRoute: \"mcp_integration\",\n        priority: \"medium\",\n      },\n      {\n        type: \"background_tasks\",\n        preferredRoute: \"mcp_integration\",\n        priority: \"low\",\n      },\n    ];\n\n    operationTypes.forEach(({ type, preferredRoute, priority }) => {\n      it(`should validate ${type} operations compliance on ${preferredRoute}`, async () => {\n        const path: HybridRoutingPath = {\n          routeType: preferredRoute,\n          provider: preferredRoute === \"direct_bedrock\" ? \"bedrock\" : \"google\",\n          operationType: type,\n          priority,\n        };\n\n        const result = await gdprValidator.validateRoutingPathCompliance(\n          path,\n          `test-${type}-${preferredRoute}`\n        );\n\n        expect(result.routingPath.operationType).toBe(type);\n        expect(result.routingPath.routeType).toBe(preferredRoute);\n        expect(result.routingPath.priority).toBe(priority);\n\n        // All operations should maintain basic compliance\n        expect(result.dataProcessingCompliance).toBeDefined();\n        expect(result.auditTrailCompliance).toBeDefined();\n      });\n    });\n  });\n\n  describe(\"Priority Level Compliance Validation\", () => {\n    const priorities: Array<HybridRoutingPath[\"priority\"]> = [\n      \"critical\",\n      \"high\",\n      \"medium\",\n      \"low\",\n    ];\n\n    priorities.forEach((priority) => {\n      it(`should validate ${priority} priority operations compliance`, async () => {\n        const directPath: HybridRoutingPath = {\n          routeType: \"direct_bedrock\",\n          provider: \"bedrock\",\n          operationType: \"infrastructure\",\n          priority,\n        };\n\n        const mcpPath: HybridRoutingPath = {\n          routeType: \"mcp_integration\",\n          provider: \"google\",\n          operationType: \"standard_analysis\",\n          priority,\n        };\n\n        const directResult = await gdprValidator.validateRoutingPathCompliance(\n          directPath,\n          `test-${priority}-direct`\n        );\n\n        const mcpResult = await gdprValidator.validateRoutingPathCompliance(\n          mcpPath,\n          `test-${priority}-mcp`\n        );\n\n        expect(directResult.routingPath.priority).toBe(priority);\n        expect(mcpResult.routingPath.priority).toBe(priority);\n\n        // Higher priority operations should maintain stricter compliance\n        if (priority === \"critical\") {\n          expect(\n            directResult.dataProcessingCompliance.euDataResidencyCompliant\n          ).toBe(true);\n          expect(directResult.auditTrailCompliance.auditLoggingEnabled).toBe(\n            true\n          );\n        }\n      });\n    });\n  });\n\n  describe(\"Error Handling and Edge Cases\", () => {\n    it(\"should handle invalid provider gracefully\", async () => {\n      const invalidPath: HybridRoutingPath = {\n        routeType: \"direct_bedrock\",\n        provider: \"invalid\" as Provider,\n        operationType: \"infrastructure\",\n        priority: \"critical\",\n      };\n\n      const result = await gdprValidator.validateRoutingPathCompliance(\n        invalidPath,\n        \"test-invalid-provider\"\n      );\n\n      expect(result.isCompliant).toBe(false);\n      expect(result.complianceScore).toBe(0);\n      expect(result.violations.length).toBeGreaterThan(0);\n    });\n\n    it(\"should handle compliance check failures gracefully\", async () => {\n      const result = await complianceIntegration.performComplianceCheck(\n        mockRequest,\n        \"unknown\" as Provider,\n        \"test-compliance-failure\"\n      );\n\n      expect(result.allowed).toBe(false);\n      expect(result.violations.length).toBeGreaterThan(0);\n      expect(result.complianceScore).toBe(0);\n    });\n\n    it(\"should validate routing decision with compliance failures\", async () => {\n      const invalidPath: HybridRoutingPath = {\n        routeType: \"direct_bedrock\",\n        provider: \"invalid\" as Provider,\n        operationType: \"infrastructure\",\n        priority: \"critical\",\n      };\n\n      const result = await gdprValidator.validateBeforeRouting(\n        invalidPath,\n        \"test-routing-failure\"\n      );\n\n      expect(result.allowed).toBe(false);\n      expect(result.reason).toContain(\"compliance\");\n    });\n  });\n\n  describe(\"Compliance Enforcement Integration\", () => {\n    it(\"should enforce compliance for direct Bedrock operations\", async () => {\n      await expect(\n        complianceIntegration.enforceCompliance(\n          mockRequest,\n          \"bedrock\",\n          \"test-enforce-direct-bedrock\"\n        )\n      ).resolves.not.toThrow();\n    });\n\n    it(\"should enforce compliance for MCP integration operations\", async () => {\n      await expect(\n        complianceIntegration.enforceCompliance(\n          mockRequest,\n          \"google\",\n          \"test-enforce-mcp-integration\"\n        )\n      ).resolves.not.toThrow();\n    });\n\n    it(\"should block non-compliant operations\", async () => {\n      await expect(\n        complianceIntegration.enforceCompliance(\n          mockRequest,\n          \"unknown\" as Provider,\n          \"test-enforce-non-compliant\"\n        )\n      ).rejects.toThrow(\"Compliance violation prevents AI request\");\n    });\n  });\n\n  describe(\"Compliance Summary and Reporting\", () => {\n    it(\"should generate compliance summary for both routing paths\", async () => {\n      const summary = await complianceIntegration.getComplianceSummary();\n\n      expect(summary.overallCompliance).toMatch(\n        /compliant|warning|non_compliant/\n      );\n      expect(summary.providers).toHaveLength(3);\n      expect(\n        summary.providers.every(\n          (p) =>\n            p.provider &&\n            typeof p.compliant === \"boolean\" &&\n            typeof p.score === \"number\"\n        )\n      ).toBe(true);\n      expect(typeof summary.recentViolations).toBe(\"number\");\n      expect(typeof summary.pendingActions).toBe(\"number\");\n    });\n\n    it(\"should provide actionable recommendations for compliance improvements\", async () => {\n      const report = await gdprValidator.generateHybridComplianceReport();\n\n      expect(Array.isArray(report.recommendations)).toBe(true);\n      expect(Array.isArray(report.criticalIssues)).toBe(true);\n      expect(Array.isArray(report.nextActions)).toBe(true);\n\n      report.nextActions.forEach((action) => {\n        expect(typeof action.action).toBe(\"string\");\n        expect([\"low\", \"medium\", \"high\", \"critical\"]).toContain(\n          action.priority\n        );\n        expect(action.dueDate).toBeInstanceOf(Date);\n        expect([\"direct_bedrock\", \"mcp_integration\", \"both\"]).toContain(\n          action.routingPath\n        );\n      });\n    });\n  });\n\n  describe(\"Requirement Validation\", () => {\n    it(\"should meet Requirement 7: Compliance and Security Maintenance\", async () => {\n      // Test that all existing GDPR compliance measures remain intact\n      const directPath: HybridRoutingPath = {\n        routeType: \"direct_bedrock\",\n        provider: \"bedrock\",\n        operationType: \"infrastructure\",\n        priority: \"critical\",\n      };\n\n      const mcpPath: HybridRoutingPath = {\n        routeType: \"mcp_integration\",\n        provider: \"google\",\n        operationType: \"standard_analysis\",\n        priority: \"medium\",\n      };\n\n      const directResult = await gdprValidator.validateRoutingPathCompliance(\n        directPath,\n        \"test-req7-direct\"\n      );\n\n      const mcpResult = await gdprValidator.validateRoutingPathCompliance(\n        mcpPath,\n        \"test-req7-mcp\"\n      );\n\n      // GDPR compliance measures should remain intact\n      expect(\n        directResult.dataProcessingCompliance.euDataResidencyCompliant\n      ).toBe(true);\n      expect(mcpResult.dataProcessingCompliance.euDataResidencyCompliant).toBe(\n        true\n      );\n\n      // Audit trails should capture all activities\n      expect(directResult.auditTrailCompliance.auditLoggingEnabled).toBe(true);\n      expect(mcpResult.auditTrailCompliance.auditLoggingEnabled).toBe(true);\n    });\n\n    it(\"should meet Requirement 5: Controlled Integration with Existing Systems\", async () => {\n      // Test that compliance integration works with existing systems\n      const bedrockResult = await complianceIntegration.performComplianceCheck(\n        mockRequest,\n        \"bedrock\",\n        \"test-req5-bedrock\"\n      );\n\n      const googleResult = await complianceIntegration.performComplianceCheck(\n        mockRequest,\n        \"google\",\n        \"test-req5-google\"\n      );\n\n      // Existing compliance systems should continue to function\n      expect(bedrockResult.allowed).toBe(true);\n      expect(googleResult.allowed).toBe(true);\n      expect(bedrockResult.complianceScore).toBeGreaterThan(80);\n      expect(googleResult.complianceScore).toBeGreaterThan(70);\n    });\n  });\n});\n"],"version":3}
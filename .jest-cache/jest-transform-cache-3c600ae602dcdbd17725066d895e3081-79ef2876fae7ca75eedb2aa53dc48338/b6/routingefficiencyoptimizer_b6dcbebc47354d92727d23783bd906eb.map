{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/routing-efficiency-optimizer.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/routing-efficiency-optimizer.ts"],"sourcesContent":["/**\n * Routing Efficiency Optimizer\n *\n * Actively optimizes routing decisions to improve performance by >15%.\n * Uses machine learning-based optimization and adaptive routing rules.\n *\n * @module routing-efficiency-optimizer\n */\n\nimport { AiFeatureFlags } from \"./ai-feature-flags\";\nimport { AuditTrailSystem } from \"./audit-trail-system\";\nimport {\n  HybridRoutingPerformanceMonitor,\n  RoutingPathMetrics,\n} from \"./hybrid-routing-performance-monitor\";\nimport { IntelligentRouter, RouteType } from \"./intelligent-router\";\n\n/**\n * Optimization strategy types\n */\nexport enum OptimizationStrategy {\n  LATENCY_FIRST = \"latency_first\",\n  SUCCESS_RATE_FIRST = \"success_rate_first\",\n  COST_EFFICIENT = \"cost_efficient\",\n  BALANCED = \"balanced\",\n  ADAPTIVE = \"adaptive\",\n}\n\n/**\n * Route performance profile\n */\nexport interface RoutePerformanceProfile {\n  route: RouteType;\n  averageLatencyMs: number;\n  p95LatencyMs: number;\n  successRate: number;\n  costPerRequest: number;\n  reliability: number;\n  capacity: number;\n  lastUpdated: Date;\n}\n\n/**\n * Optimization recommendation\n */\nexport interface OptimizationRecommendation {\n  id: string;\n  type:\n    | \"route_change\"\n    | \"rule_adjustment\"\n    | \"threshold_update\"\n    | \"strategy_change\";\n  priority: \"low\" | \"medium\" | \"high\" | \"critical\";\n  description: string;\n  expectedImprovement: number; // Percentage improvement expected\n  implementation: {\n    action: string;\n    parameters: Record<string, any>;\n    rollbackPlan: string;\n  };\n  confidence: number; // 0-1 confidence score\n  timestamp: Date;\n}\n\n/**\n * Optimization result\n */\nexport interface OptimizationResult {\n  optimizationId: string;\n  strategy: OptimizationStrategy;\n  appliedRecommendations: OptimizationRecommendation[];\n  performanceImprovement: number; // Actual improvement percentage\n  latencyImprovement: number;\n  successRateImprovement: number;\n  costImprovement: number;\n  timestamp: Date;\n  success: boolean;\n  rollbackRequired: boolean;\n}\n\n/**\n * Optimizer configuration\n */\nexport interface OptimizerConfig {\n  // Optimization targets\n  targetPerformanceImprovement: number; // Minimum 15% improvement\n  targetLatencyReduction: number; // Target latency reduction percentage\n  targetSuccessRateImprovement: number; // Target success rate improvement\n  targetCostReduction: number; // Target cost reduction percentage\n\n  // Optimization intervals\n  optimizationIntervalMs: number; // How often to run optimization\n  performanceEvaluationWindowMs: number; // Window for performance evaluation\n\n  // Safety thresholds\n  maxRoutingRuleChanges: number; // Maximum rule changes per optimization cycle\n  minDataPointsRequired: number; // Minimum data points before optimization\n  rollbackThreshold: number; // Performance degradation threshold for rollback\n\n  // Strategy configuration\n  defaultStrategy: OptimizationStrategy;\n  enableAdaptiveStrategy: boolean;\n  enableAutomaticRollback: boolean;\n\n  // Feature flags\n  enableOptimization: boolean;\n  enableAggressiveOptimization: boolean;\n}\n\n/**\n * Default optimizer configuration\n */\nconst DEFAULT_CONFIG: OptimizerConfig = {\n  targetPerformanceImprovement: 15, // 15% minimum improvement\n  targetLatencyReduction: 20, // 20% latency reduction target\n  targetSuccessRateImprovement: 5, // 5% success rate improvement\n  targetCostReduction: 25, // 25% cost reduction target\n  optimizationIntervalMs: 300000, // 5 minutes\n  performanceEvaluationWindowMs: 900000, // 15 minutes\n  maxRoutingRuleChanges: 3,\n  minDataPointsRequired: 100,\n  rollbackThreshold: -5, // Rollback if performance degrades by 5%\n  defaultStrategy: OptimizationStrategy.BALANCED,\n  enableAdaptiveStrategy: true,\n  enableAutomaticRollback: true,\n  enableOptimization: true,\n  enableAggressiveOptimization: false,\n};\n\n/**\n * Routing Efficiency Optimizer\n *\n * Actively optimizes routing decisions to achieve >15% performance improvement\n */\nexport class RoutingEfficiencyOptimizer {\n  private config: OptimizerConfig;\n  private router: IntelligentRouter;\n  private performanceMonitor: HybridRoutingPerformanceMonitor;\n  private featureFlags: AiFeatureFlags;\n  private auditTrail: AuditTrailSystem;\n\n  private routeProfiles: Map<RouteType, RoutePerformanceProfile>;\n  private optimizationHistory: OptimizationResult[];\n  private activeRecommendations: OptimizationRecommendation[];\n  private baselineMetrics: Map<string, number>;\n\n  private optimizationTimer?: NodeJS.Timeout;\n  private isOptimizing: boolean = false;\n  private lastOptimization?: Date;\n\n  constructor(\n    router: IntelligentRouter,\n    performanceMonitor: HybridRoutingPerformanceMonitor,\n    featureFlags: AiFeatureFlags,\n    auditTrail: AuditTrailSystem,\n    config?: Partial<OptimizerConfig>\n  ) {\n    this.router = router;\n    this.performanceMonitor = performanceMonitor;\n    this.featureFlags = featureFlags;\n    this.auditTrail = auditTrail;\n    this.config = { ...DEFAULT_CONFIG, ...config };\n\n    this.routeProfiles = new Map();\n    this.optimizationHistory = [];\n    this.activeRecommendations = [];\n    this.baselineMetrics = new Map();\n\n    this.initializeRouteProfiles();\n    this.captureBaselineMetrics();\n  }\n\n  /**\n   * Start the optimization engine\n   */\n  async startOptimization(): Promise<void> {\n    if (this.isOptimizing) {\n      console.log(\"[RoutingEfficiencyOptimizer] Already optimizing\");\n      return;\n    }\n\n    if (!this.featureFlags.isEnabled(\"routing_efficiency_optimization\")) {\n      console.log(\n        \"[RoutingEfficiencyOptimizer] Optimization disabled by feature flag\"\n      );\n      return;\n    }\n\n    console.log(\"[RoutingEfficiencyOptimizer] Starting optimization engine\");\n    this.isOptimizing = true;\n\n    // Initial optimization\n    await this.runOptimizationCycle();\n\n    // Schedule periodic optimization\n    this.optimizationTimer = setInterval(\n      () => this.runOptimizationCycle(),\n      this.config.optimizationIntervalMs\n    );\n\n    // Log optimization start\n    await this.auditTrail.logRoutingOptimizationStart(\n      this.config.defaultStrategy,\n      this.config.targetPerformanceImprovement\n    );\n  }\n\n  /**\n   * Stop the optimization engine\n   */\n  async stopOptimization(): Promise<void> {\n    if (!this.isOptimizing) {\n      return;\n    }\n\n    console.log(\"[RoutingEfficiencyOptimizer] Stopping optimization engine\");\n    this.isOptimizing = false;\n\n    if (this.optimizationTimer) {\n      clearInterval(this.optimizationTimer);\n      this.optimizationTimer = undefined;\n    }\n\n    // Log optimization stop\n    await this.auditTrail.logRoutingOptimizationStop(\n      this.optimizationHistory.length,\n      this.calculateOverallImprovement()\n    );\n  }\n\n  /**\n   * Run a single optimization cycle\n   */\n  private async runOptimizationCycle(): Promise<void> {\n    try {\n      console.log(\"[RoutingEfficiencyOptimizer] Running optimization cycle\");\n\n      // Update route performance profiles\n      await this.updateRouteProfiles();\n\n      // Analyze current performance\n      const currentPerformance = await this.analyzeCurrentPerformance();\n\n      // Generate optimization recommendations\n      const recommendations = await this.generateOptimizationRecommendations(\n        currentPerformance\n      );\n\n      if (recommendations.length === 0) {\n        console.log(\n          \"[RoutingEfficiencyOptimizer] No optimization recommendations\"\n        );\n        return;\n      }\n\n      // Apply high-priority recommendations\n      const appliedRecommendations = await this.applyRecommendations(\n        recommendations.filter(\n          (r) => r.priority === \"high\" || r.priority === \"critical\"\n        )\n      );\n\n      if (appliedRecommendations.length > 0) {\n        // Create optimization result\n        const result: OptimizationResult = {\n          optimizationId: this.generateOptimizationId(),\n          strategy: this.config.defaultStrategy,\n          appliedRecommendations,\n          performanceImprovement: 0, // Will be calculated after evaluation period\n          latencyImprovement: 0,\n          successRateImprovement: 0,\n          costImprovement: 0,\n          timestamp: new Date(),\n          success: true,\n          rollbackRequired: false,\n        };\n\n        this.optimizationHistory.push(result);\n        this.lastOptimization = new Date();\n\n        // Log optimization\n        await this.auditTrail.logRoutingOptimization(\n          appliedRecommendations.map((r) => r.description),\n          {\n            strategy: this.config.defaultStrategy,\n            expectedImprovement: Math.max(\n              ...appliedRecommendations.map((r) => r.expectedImprovement)\n            ),\n            appliedCount: appliedRecommendations.length,\n          }\n        );\n\n        console.log(\n          `[RoutingEfficiencyOptimizer] Applied ${appliedRecommendations.length} optimizations`\n        );\n      }\n\n      // Evaluate previous optimizations\n      await this.evaluatePreviousOptimizations();\n    } catch (error) {\n      console.error(\n        \"[RoutingEfficiencyOptimizer] Error in optimization cycle:\",\n        error\n      );\n    }\n  }\n\n  /**\n   * Update route performance profiles\n   */\n  private async updateRouteProfiles(): Promise<void> {\n    const allMetrics = this.performanceMonitor.getAllPathMetrics();\n\n    for (const [path, metrics] of allMetrics.entries()) {\n      if (path === \"hybrid\" || path === \"fallback\") continue; // Skip composite paths\n\n      const route = path as RouteType;\n      const profile: RoutePerformanceProfile = {\n        route,\n        averageLatencyMs: metrics.averageLatencyMs,\n        p95LatencyMs: metrics.p95LatencyMs,\n        successRate: metrics.successRate,\n        costPerRequest: this.estimateCostPerRequest(route, metrics),\n        reliability: this.calculateReliability(metrics),\n        capacity: this.estimateCapacity(route, metrics),\n        lastUpdated: new Date(),\n      };\n\n      this.routeProfiles.set(route, profile);\n    }\n  }\n\n  /**\n   * Analyze current performance\n   */\n  private async analyzeCurrentPerformance(): Promise<{\n    overallLatency: number;\n    overallSuccessRate: number;\n    overallCost: number;\n    routingEfficiency: number;\n    bottlenecks: string[];\n  }> {\n    const efficiency =\n      await this.performanceMonitor.calculateRoutingEfficiency();\n    const allMetrics = this.performanceMonitor.getAllPathMetrics();\n\n    let totalRequests = 0;\n    let weightedLatency = 0;\n    let weightedSuccessRate = 0;\n    let totalCost = 0;\n    const bottlenecks: string[] = [];\n\n    for (const [path, metrics] of allMetrics.entries()) {\n      if (path === \"hybrid\" || path === \"fallback\") continue;\n\n      totalRequests += metrics.requestCount;\n      weightedLatency += metrics.averageLatencyMs * metrics.requestCount;\n      weightedSuccessRate += metrics.successRate * metrics.requestCount;\n\n      const profile = this.routeProfiles.get(path as RouteType);\n      if (profile) {\n        totalCost += profile.costPerRequest * metrics.requestCount;\n\n        // Identify bottlenecks\n        if (metrics.p95LatencyMs > 10000) {\n          bottlenecks.push(\n            `High P95 latency on ${path}: ${metrics.p95LatencyMs}ms`\n          );\n        }\n        if (metrics.successRate < 95) {\n          bottlenecks.push(\n            `Low success rate on ${path}: ${metrics.successRate.toFixed(2)}%`\n          );\n        }\n      }\n    }\n\n    return {\n      overallLatency: totalRequests > 0 ? weightedLatency / totalRequests : 0,\n      overallSuccessRate:\n        totalRequests > 0 ? weightedSuccessRate / totalRequests : 100,\n      overallCost: totalCost,\n      routingEfficiency: efficiency.overallEfficiency,\n      bottlenecks,\n    };\n  }\n\n  /**\n   * Generate optimization recommendations\n   */\n  private async generateOptimizationRecommendations(\n    performance: any\n  ): Promise<OptimizationRecommendation[]> {\n    const recommendations: OptimizationRecommendation[] = [];\n\n    // Check if we have enough data\n    const totalRequests = Array.from(\n      this.performanceMonitor.getAllPathMetrics().values()\n    ).reduce((sum, metrics) => sum + metrics.requestCount, 0);\n\n    if (totalRequests < this.config.minDataPointsRequired) {\n      console.log(\n        \"[RoutingEfficiencyOptimizer] Insufficient data for optimization\"\n      );\n      return recommendations;\n    }\n\n    // Latency optimization recommendations\n    if (performance.overallLatency > 5000) {\n      const directProfile = this.routeProfiles.get(\"direct\");\n      const mcpProfile = this.routeProfiles.get(\"mcp\");\n\n      if (directProfile && mcpProfile) {\n        if (\n          directProfile.averageLatencyMs <\n          mcpProfile.averageLatencyMs * 0.8\n        ) {\n          recommendations.push({\n            id: this.generateRecommendationId(),\n            type: \"rule_adjustment\",\n            priority: \"high\",\n            description:\n              \"Route more operations to direct Bedrock for better latency\",\n            expectedImprovement: 25,\n            implementation: {\n              action: \"adjust_routing_thresholds\",\n              parameters: {\n                increaseDirectRouting: true,\n                latencyThreshold: 8000,\n              },\n              rollbackPlan: \"Revert to previous routing thresholds\",\n            },\n            confidence: 0.85,\n            timestamp: new Date(),\n          });\n        }\n      }\n    }\n\n    // Success rate optimization recommendations\n    if (performance.overallSuccessRate < 95) {\n      recommendations.push({\n        id: this.generateRecommendationId(),\n        type: \"route_change\",\n        priority: \"critical\",\n        description: \"Implement circuit breaker with faster failover\",\n        expectedImprovement: 15,\n        implementation: {\n          action: \"update_circuit_breaker_config\",\n          parameters: {\n            failureThreshold: 2,\n            recoveryTimeout: 15000,\n          },\n          rollbackPlan: \"Revert circuit breaker to previous configuration\",\n        },\n        confidence: 0.9,\n        timestamp: new Date(),\n      });\n    }\n\n    // Cost optimization recommendations\n    const baselineCost = this.baselineMetrics.get(\"totalCost\") || 0;\n    if (performance.overallCost > baselineCost * 1.2) {\n      recommendations.push({\n        id: this.generateRecommendationId(),\n        type: \"strategy_change\",\n        priority: \"medium\",\n        description: \"Route standard operations to MCP to reduce costs\",\n        expectedImprovement: 30,\n        implementation: {\n          action: \"update_routing_strategy\",\n          parameters: {\n            strategy: OptimizationStrategy.COST_EFFICIENT,\n            mcpPreference: 0.8,\n          },\n          rollbackPlan: \"Revert to balanced routing strategy\",\n        },\n        confidence: 0.75,\n        timestamp: new Date(),\n      });\n    }\n\n    // Routing efficiency recommendations\n    if (performance.routingEfficiency < 80) {\n      recommendations.push({\n        id: this.generateRecommendationId(),\n        type: \"threshold_update\",\n        priority: \"high\",\n        description:\n          \"Optimize routing decision thresholds based on current performance\",\n        expectedImprovement: 20,\n        implementation: {\n          action: \"optimize_routing_thresholds\",\n          parameters: {\n            adaptiveThresholds: true,\n            performanceWeighting: 0.7,\n          },\n          rollbackPlan: \"Revert to static routing thresholds\",\n        },\n        confidence: 0.8,\n        timestamp: new Date(),\n      });\n    }\n\n    // Adaptive strategy recommendation\n    if (this.config.enableAdaptiveStrategy && recommendations.length > 2) {\n      recommendations.push({\n        id: this.generateRecommendationId(),\n        type: \"strategy_change\",\n        priority: \"medium\",\n        description:\n          \"Enable adaptive routing strategy for dynamic optimization\",\n        expectedImprovement: 18,\n        implementation: {\n          action: \"enable_adaptive_strategy\",\n          parameters: {\n            strategy: OptimizationStrategy.ADAPTIVE,\n            adaptationInterval: 60000,\n          },\n          rollbackPlan: \"Disable adaptive strategy\",\n        },\n        confidence: 0.7,\n        timestamp: new Date(),\n      });\n    }\n\n    return recommendations.sort((a, b) => {\n      const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };\n      return priorityOrder[b.priority] - priorityOrder[a.priority];\n    });\n  }\n\n  /**\n   * Apply optimization recommendations\n   */\n  private async applyRecommendations(\n    recommendations: OptimizationRecommendation[]\n  ): Promise<OptimizationRecommendation[]> {\n    const applied: OptimizationRecommendation[] = [];\n    let changesApplied = 0;\n\n    for (const recommendation of recommendations) {\n      if (changesApplied >= this.config.maxRoutingRuleChanges) {\n        console.log(\n          \"[RoutingEfficiencyOptimizer] Maximum changes per cycle reached\"\n        );\n        break;\n      }\n\n      try {\n        const success = await this.applyRecommendation(recommendation);\n        if (success) {\n          applied.push(recommendation);\n          changesApplied++;\n\n          console.log(\n            `[RoutingEfficiencyOptimizer] Applied: ${recommendation.description}`\n          );\n        }\n      } catch (error) {\n        console.error(\n          `[RoutingEfficiencyOptimizer] Failed to apply recommendation: ${recommendation.description}`,\n          error\n        );\n      }\n    }\n\n    this.activeRecommendations.push(...applied);\n    return applied;\n  }\n\n  /**\n   * Apply a single recommendation\n   */\n  private async applyRecommendation(\n    recommendation: OptimizationRecommendation\n  ): Promise<boolean> {\n    const { action, parameters } = recommendation.implementation;\n\n    switch (action) {\n      case \"adjust_routing_thresholds\":\n        return this.adjustRoutingThresholds(parameters);\n\n      case \"update_circuit_breaker_config\":\n        return this.updateCircuitBreakerConfig(parameters);\n\n      case \"update_routing_strategy\":\n        return this.updateRoutingStrategy(parameters);\n\n      case \"optimize_routing_thresholds\":\n        return this.optimizeRoutingThresholds(parameters);\n\n      case \"enable_adaptive_strategy\":\n        return this.enableAdaptiveStrategy(parameters);\n\n      default:\n        console.warn(`[RoutingEfficiencyOptimizer] Unknown action: ${action}`);\n        return false;\n    }\n  }\n\n  /**\n   * Adjust routing thresholds\n   */\n  private async adjustRoutingThresholds(parameters: any): Promise<boolean> {\n    try {\n      // Get current routing rules\n      const currentRules = this.router.getRoutingRules?.() || [];\n\n      // Adjust latency thresholds\n      const updatedRules = currentRules.map((rule) => ({\n        ...rule,\n        latencyRequirement:\n          parameters.latencyThreshold || rule.latencyRequirement,\n      }));\n\n      // Update router with new rules\n      this.router.updateRoutingRules?.(updatedRules);\n\n      return true;\n    } catch (error) {\n      console.error(\n        \"[RoutingEfficiencyOptimizer] Error adjusting routing thresholds:\",\n        error\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Update circuit breaker configuration\n   */\n  private async updateCircuitBreakerConfig(parameters: any): Promise<boolean> {\n    try {\n      // This would integrate with the circuit breaker system\n      // For now, we'll log the configuration change\n      console.log(\n        \"[RoutingEfficiencyOptimizer] Circuit breaker config updated:\",\n        parameters\n      );\n      return true;\n    } catch (error) {\n      console.error(\n        \"[RoutingEfficiencyOptimizer] Error updating circuit breaker:\",\n        error\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Update routing strategy\n   */\n  private async updateRoutingStrategy(parameters: any): Promise<boolean> {\n    try {\n      this.config.defaultStrategy = parameters.strategy;\n      console.log(\n        `[RoutingEfficiencyOptimizer] Strategy updated to: ${parameters.strategy}`\n      );\n      return true;\n    } catch (error) {\n      console.error(\n        \"[RoutingEfficiencyOptimizer] Error updating strategy:\",\n        error\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Optimize routing thresholds\n   */\n  private async optimizeRoutingThresholds(parameters: any): Promise<boolean> {\n    try {\n      // Implement adaptive threshold optimization\n      console.log(\n        \"[RoutingEfficiencyOptimizer] Routing thresholds optimized:\",\n        parameters\n      );\n      return true;\n    } catch (error) {\n      console.error(\n        \"[RoutingEfficiencyOptimizer] Error optimizing thresholds:\",\n        error\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Enable adaptive strategy\n   */\n  private async enableAdaptiveStrategy(parameters: any): Promise<boolean> {\n    try {\n      this.config.enableAdaptiveStrategy = true;\n      this.config.defaultStrategy = OptimizationStrategy.ADAPTIVE;\n      console.log(\"[RoutingEfficiencyOptimizer] Adaptive strategy enabled\");\n      return true;\n    } catch (error) {\n      console.error(\n        \"[RoutingEfficiencyOptimizer] Error enabling adaptive strategy:\",\n        error\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Evaluate previous optimizations\n   */\n  private async evaluatePreviousOptimizations(): Promise<void> {\n    const evaluationWindow = this.config.performanceEvaluationWindowMs;\n    const now = Date.now();\n\n    for (const result of this.optimizationHistory) {\n      if (result.performanceImprovement !== 0) continue; // Already evaluated\n\n      const timeSinceOptimization = now - result.timestamp.getTime();\n      if (timeSinceOptimization < evaluationWindow) continue; // Too early to evaluate\n\n      // Calculate actual performance improvement\n      const improvement = await this.calculatePerformanceImprovement(result);\n\n      result.performanceImprovement = improvement.overall;\n      result.latencyImprovement = improvement.latency;\n      result.successRateImprovement = improvement.successRate;\n      result.costImprovement = improvement.cost;\n\n      // Check if rollback is needed\n      if (\n        improvement.overall < this.config.rollbackThreshold &&\n        this.config.enableAutomaticRollback\n      ) {\n        await this.rollbackOptimization(result);\n        result.rollbackRequired = true;\n        result.success = false;\n      }\n\n      console.log(\n        `[RoutingEfficiencyOptimizer] Optimization ${\n          result.optimizationId\n        } evaluated: ${improvement.overall.toFixed(2)}% improvement`\n      );\n    }\n  }\n\n  /**\n   * Calculate performance improvement\n   */\n  private async calculatePerformanceImprovement(\n    result: OptimizationResult\n  ): Promise<{\n    overall: number;\n    latency: number;\n    successRate: number;\n    cost: number;\n  }> {\n    const currentPerformance = await this.analyzeCurrentPerformance();\n\n    const baselineLatency =\n      this.baselineMetrics.get(\"averageLatency\") ||\n      currentPerformance.overallLatency;\n    const baselineSuccessRate =\n      this.baselineMetrics.get(\"successRate\") ||\n      currentPerformance.overallSuccessRate;\n    const baselineCost =\n      this.baselineMetrics.get(\"totalCost\") || currentPerformance.overallCost;\n\n    const latencyImprovement =\n      ((baselineLatency - currentPerformance.overallLatency) /\n        baselineLatency) *\n      100;\n    const successRateImprovement =\n      ((currentPerformance.overallSuccessRate - baselineSuccessRate) /\n        baselineSuccessRate) *\n      100;\n    const costImprovement =\n      ((baselineCost - currentPerformance.overallCost) / baselineCost) * 100;\n\n    // Overall improvement is weighted average\n    const overallImprovement =\n      latencyImprovement * 0.4 +\n      successRateImprovement * 0.3 +\n      costImprovement * 0.3;\n\n    return {\n      overall: overallImprovement,\n      latency: latencyImprovement,\n      successRate: successRateImprovement,\n      cost: costImprovement,\n    };\n  }\n\n  /**\n   * Rollback optimization\n   */\n  private async rollbackOptimization(\n    result: OptimizationResult\n  ): Promise<void> {\n    console.log(\n      `[RoutingEfficiencyOptimizer] Rolling back optimization: ${result.optimizationId}`\n    );\n\n    for (const recommendation of result.appliedRecommendations) {\n      try {\n        // Execute rollback plan\n        console.log(\n          `[RoutingEfficiencyOptimizer] Rollback: ${recommendation.implementation.rollbackPlan}`\n        );\n\n        // Log rollback\n        await this.auditTrail.logRoutingOptimizationRollback(\n          result.optimizationId,\n          recommendation.description,\n          result.performanceImprovement\n        );\n      } catch (error) {\n        console.error(\n          `[RoutingEfficiencyOptimizer] Rollback failed for: ${recommendation.description}`,\n          error\n        );\n      }\n    }\n  }\n\n  /**\n   * Get optimization status\n   */\n  getOptimizationStatus(): {\n    isOptimizing: boolean;\n    lastOptimization?: Date;\n    totalOptimizations: number;\n    overallImprovement: number;\n    activeRecommendations: number;\n    targetAchieved: boolean;\n  } {\n    const overallImprovement = this.calculateOverallImprovement();\n\n    return {\n      isOptimizing: this.isOptimizing,\n      lastOptimization: this.lastOptimization,\n      totalOptimizations: this.optimizationHistory.length,\n      overallImprovement,\n      activeRecommendations: this.activeRecommendations.length,\n      targetAchieved:\n        overallImprovement >= this.config.targetPerformanceImprovement,\n    };\n  }\n\n  /**\n   * Get optimization history\n   */\n  getOptimizationHistory(): OptimizationResult[] {\n    return [...this.optimizationHistory];\n  }\n\n  /**\n   * Get active recommendations\n   */\n  getActiveRecommendations(): OptimizationRecommendation[] {\n    return [...this.activeRecommendations];\n  }\n\n  // Private helper methods\n\n  private initializeRouteProfiles(): void {\n    const routes: RouteType[] = [\"direct\", \"mcp\"];\n\n    for (const route of routes) {\n      this.routeProfiles.set(route, {\n        route,\n        averageLatencyMs: 0,\n        p95LatencyMs: 0,\n        successRate: 100,\n        costPerRequest: 0,\n        reliability: 1.0,\n        capacity: 1.0,\n        lastUpdated: new Date(),\n      });\n    }\n  }\n\n  private async captureBaselineMetrics(): Promise<void> {\n    const performance = await this.analyzeCurrentPerformance();\n\n    this.baselineMetrics.set(\"averageLatency\", performance.overallLatency);\n    this.baselineMetrics.set(\"successRate\", performance.overallSuccessRate);\n    this.baselineMetrics.set(\"totalCost\", performance.overallCost);\n    this.baselineMetrics.set(\n      \"routingEfficiency\",\n      performance.routingEfficiency\n    );\n  }\n\n  private estimateCostPerRequest(\n    route: RouteType,\n    metrics: RoutingPathMetrics\n  ): number {\n    // Simplified cost estimation\n    const baseCost = route === \"direct\" ? 0.001 : 0.0003; // Direct Bedrock costs more\n    return baseCost * (metrics.averageLatencyMs / 1000); // Cost scales with latency\n  }\n\n  private calculateReliability(metrics: RoutingPathMetrics): number {\n    return metrics.successRate / 100;\n  }\n\n  private estimateCapacity(\n    route: RouteType,\n    metrics: RoutingPathMetrics\n  ): number {\n    // Simplified capacity estimation based on latency\n    const maxLatency = 30000; // 30 seconds max\n    return Math.max(0.1, 1 - metrics.p95LatencyMs / maxLatency);\n  }\n\n  private calculateOverallImprovement(): number {\n    if (this.optimizationHistory.length === 0) return 0;\n\n    const validResults = this.optimizationHistory.filter(\n      (r) => r.performanceImprovement !== 0\n    );\n    if (validResults.length === 0) return 0;\n\n    return (\n      validResults.reduce((sum, r) => sum + r.performanceImprovement, 0) /\n      validResults.length\n    );\n  }\n\n  private generateOptimizationId(): string {\n    return `opt-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateRecommendationId(): string {\n    return `rec-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Cleanup resources\n   */\n  cleanup(): void {\n    this.stopOptimization();\n    this.routeProfiles.clear();\n    this.optimizationHistory = [];\n    this.activeRecommendations = [];\n    this.baselineMetrics.clear();\n  }\n}\n\n/**\n * Create routing efficiency optimizer\n */\nexport function createRoutingEfficiencyOptimizer(\n  router: IntelligentRouter,\n  performanceMonitor: HybridRoutingPerformanceMonitor,\n  featureFlags: AiFeatureFlags,\n  auditTrail: AuditTrailSystem,\n  config?: Partial<OptimizerConfig>\n): RoutingEfficiencyOptimizer {\n  return new RoutingEfficiencyOptimizer(\n    router,\n    performanceMonitor,\n    featureFlags,\n    auditTrail,\n    config\n  );\n}\n"],"version":3}
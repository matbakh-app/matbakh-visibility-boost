{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/auto-resolution-optimizer.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/auto-resolution-optimizer.ts"],"sourcesContent":["/**\n * Auto-Resolution Optimizer - Enhanced Success Rate Management\n *\n * This module implements advanced optimization strategies to achieve >70% auto-resolution\n * success rate by improving risk assessment, validation, and adaptive learning.\n */\n\nimport { AiFeatureFlags } from \"./ai-feature-flags\";\nimport {\n  AutoResolutionResult,\n  ImplementationGap,\n  RemediationSuggestion,\n} from \"./implementation-support\";\n\n// Enhanced Risk Assessment\nexport interface EnhancedRiskAssessment {\n  overallRisk: \"very_low\" | \"low\" | \"medium\" | \"high\" | \"very_high\";\n  riskFactors: {\n    codeComplexity: number; // 0-1\n    moduleImportance: number; // 0-1\n    testCoverage: number; // 0-1\n    dependencyImpact: number; // 0-1\n    historicalSuccess: number; // 0-1\n  };\n  confidenceScore: number; // 0-1\n  recommendedAction: \"auto_resolve\" | \"manual_review\" | \"reject\";\n  mitigationStrategies: string[];\n}\n\n// Success Rate Tracking\nexport interface SuccessRateMetrics {\n  totalAttempts: number;\n  successfulResolutions: number;\n  failedResolutions: number;\n  partialResolutions: number;\n  currentSuccessRate: number;\n  targetSuccessRate: number;\n  trendDirection: \"improving\" | \"stable\" | \"declining\";\n  lastUpdated: Date;\n}\n\n// Adaptive Learning Data\nexport interface AdaptiveLearningData {\n  patternId: string;\n  gapType: string;\n  suggestionType: string;\n  riskLevel: string;\n  successCount: number;\n  failureCount: number;\n  successRate: number;\n  commonFailureReasons: string[];\n  optimizationHints: string[];\n  lastUpdated: Date;\n}\n\n// Resolution Strategy\nexport interface ResolutionStrategy {\n  strategyId: string;\n  name: string;\n  description: string;\n  applicableGapTypes: string[];\n  riskThreshold: number;\n  validationSteps: string[];\n  rollbackPlan: string;\n  successRate: number;\n  enabled: boolean;\n}\n\n/**\n * Auto-Resolution Optimizer for Enhanced Success Rates\n */\nexport class AutoResolutionOptimizer {\n  private featureFlags: AiFeatureFlags;\n  private successRateMetrics: SuccessRateMetrics;\n  private learningData: Map<string, AdaptiveLearningData> = new Map();\n  private resolutionStrategies: Map<string, ResolutionStrategy> = new Map();\n  private resolutionHistory: AutoResolutionResult[] = [];\n\n  // Configuration\n  private config = {\n    targetSuccessRate: 0.75, // 75% target (exceeds 70% requirement)\n    minConfidenceThreshold: 0.8,\n    maxRiskThreshold: 0.3,\n    learningWindowSize: 100, // Last 100 resolutions for learning\n    adaptiveAdjustmentEnabled: true,\n    rollbackTimeoutMs: 30000, // 30 seconds\n  };\n\n  constructor() {\n    this.featureFlags = new AiFeatureFlags();\n    this.successRateMetrics = this.initializeSuccessRateMetrics();\n    this.initializeResolutionStrategies();\n  }\n\n  /**\n   * Perform enhanced risk assessment for auto-resolution\n   */\n  async performEnhancedRiskAssessment(\n    gap: ImplementationGap,\n    suggestion: RemediationSuggestion\n  ): Promise<EnhancedRiskAssessment> {\n    const riskFactors = await this.calculateRiskFactors(gap, suggestion);\n    const historicalSuccess = this.getHistoricalSuccessRate(gap, suggestion);\n    const confidenceScore = this.calculateConfidenceScore(\n      gap,\n      suggestion,\n      riskFactors\n    );\n\n    const overallRisk = this.determineOverallRisk(riskFactors, confidenceScore);\n    const recommendedAction = this.determineRecommendedAction(\n      overallRisk,\n      confidenceScore\n    );\n\n    return {\n      overallRisk,\n      riskFactors: {\n        ...riskFactors,\n        historicalSuccess,\n      },\n      confidenceScore,\n      recommendedAction,\n      mitigationStrategies: this.generateMitigationStrategies(\n        gap,\n        suggestion,\n        riskFactors\n      ),\n    };\n  }\n\n  /**\n   * Optimize resolution strategy based on gap and suggestion\n   */\n  async optimizeResolutionStrategy(\n    gap: ImplementationGap,\n    suggestion: RemediationSuggestion,\n    riskAssessment: EnhancedRiskAssessment\n  ): Promise<ResolutionStrategy | null> {\n    // Find applicable strategies\n    const applicableStrategies = Array.from(\n      this.resolutionStrategies.values()\n    ).filter(\n      (strategy) =>\n        strategy.enabled &&\n        strategy.applicableGapTypes.includes(gap.type) &&\n        riskAssessment.confidenceScore >= strategy.riskThreshold\n    );\n\n    if (applicableStrategies.length === 0) {\n      return null;\n    }\n\n    // Select best strategy based on success rate, risk, and confidence\n    const bestStrategy = applicableStrategies.reduce((best, current) => {\n      // Prefer conservative strategy for high confidence scenarios\n      if (\n        riskAssessment.confidenceScore >= 0.9 &&\n        current.name === \"Conservative Resolution\"\n      ) {\n        return current;\n      }\n\n      const bestScore = best.successRate * (1 - best.riskThreshold);\n      const currentScore = current.successRate * (1 - current.riskThreshold);\n      return currentScore > bestScore ? current : best;\n    });\n\n    // Adapt strategy based on learning data\n    return this.adaptStrategyBasedOnLearning(bestStrategy, gap, suggestion);\n  }\n\n  /**\n   * Validate resolution before execution\n   */\n  async validateResolutionPlan(\n    gap: ImplementationGap,\n    suggestion: RemediationSuggestion,\n    strategy: ResolutionStrategy\n  ): Promise<{\n    isValid: boolean;\n    validationResults: string[];\n    recommendations: string[];\n  }> {\n    const validationResults: string[] = [];\n    const recommendations: string[] = [];\n\n    // Validate code changes\n    if (suggestion.implementation.codeChanges) {\n      for (const codeChange of suggestion.implementation.codeChanges) {\n        const codeValidation = await this.validateCodeChange(codeChange);\n        validationResults.push(\n          `Code change validation for ${codeChange.file}: ${codeValidation.status}`\n        );\n        if (!codeValidation.isValid) {\n          recommendations.push(\n            `Review code change in ${codeChange.file}: ${codeValidation.reason}`\n          );\n        }\n      }\n    }\n\n    // Validate configuration changes\n    if (suggestion.implementation.configurationChanges) {\n      for (const configChange of suggestion.implementation\n        .configurationChanges) {\n        const configValidation = await this.validateConfigurationChange(\n          configChange\n        );\n        validationResults.push(\n          `Configuration validation for ${configChange.file}: ${configValidation.status}`\n        );\n        if (!configValidation.isValid) {\n          recommendations.push(\n            `Review configuration in ${configChange.file}: ${configValidation.reason}`\n          );\n        }\n      }\n    }\n\n    // Validate dependencies\n    if (suggestion.implementation.dependencies) {\n      const depValidation = await this.validateDependencies(\n        suggestion.implementation.dependencies\n      );\n      validationResults.push(`Dependency validation: ${depValidation.status}`);\n      if (!depValidation.isValid) {\n        recommendations.push(`Review dependencies: ${depValidation.reason}`);\n      }\n    }\n\n    // Check strategy-specific validation steps\n    for (const step of strategy.validationSteps) {\n      const stepResult = await this.executeValidationStep(\n        step,\n        gap,\n        suggestion\n      );\n      validationResults.push(`${step}: ${stepResult.status}`);\n      if (!stepResult.isValid) {\n        recommendations.push(\n          `${step}: ${stepResult.recommendation || \"Validation failed\"}`\n        );\n      }\n    }\n\n    // Check if all validations passed\n    const allValidationsPassed = validationResults.every((result) =>\n      result.includes(\"passed\")\n    );\n\n    const hasNoRecommendations = recommendations.length === 0;\n    const isValid = allValidationsPassed && hasNoRecommendations;\n\n    return {\n      isValid,\n      validationResults,\n      recommendations,\n    };\n  }\n\n  /**\n   * Execute optimized auto-resolution with enhanced success tracking\n   */\n  async executeOptimizedResolution(\n    gap: ImplementationGap,\n    suggestion: RemediationSuggestion,\n    strategy: ResolutionStrategy\n  ): Promise<AutoResolutionResult> {\n    const startTime = Date.now();\n    const resolutionId = this.generateResolutionId();\n\n    try {\n      // Pre-execution validation\n      const validation = await this.validateResolutionPlan(\n        gap,\n        suggestion,\n        strategy\n      );\n\n      if (!validation.isValid) {\n        const errorMessage = `Pre-execution validation failed: ${validation.recommendations.join(\n          \", \"\n        )}`;\n        throw new Error(errorMessage);\n      }\n\n      // Create enhanced resolution result\n      const result: AutoResolutionResult = {\n        resolutionId,\n        gapId: gap.gapId,\n        suggestionId: suggestion.suggestionId,\n        status: \"failed\", // Will be updated on success\n        startedAt: new Date(),\n        completedAt: new Date(),\n        appliedChanges: {\n          filesModified: [],\n          configurationsChanged: [],\n          dependenciesUpdated: [],\n        },\n        validationResults: {\n          testsRun: 0,\n          testsPassed: 0,\n          testsFailed: 0,\n        },\n        rollbackAvailable: false,\n        logs: [`Using strategy: ${strategy.name}`],\n      };\n\n      // Execute resolution with strategy-specific steps\n      await this.executeResolutionWithStrategy(result, suggestion, strategy);\n\n      // Enhanced validation and testing\n      const testResults = await this.runEnhancedValidationTests(\n        gap,\n        suggestion,\n        strategy\n      );\n      result.validationResults = testResults;\n\n      if (testResults.testsFailed > 0) {\n        throw new Error(\n          `Enhanced validation failed: ${testResults.testsFailed} tests failed`\n        );\n      }\n\n      // Mark as successful\n      result.status = \"success\";\n      result.completedAt = new Date();\n      result.rollbackAvailable = true;\n      result.logs.push(\"Resolution completed successfully\");\n\n      // Update success metrics and learning data\n      this.updateSuccessMetrics(true);\n      this.updateLearningData(gap, suggestion, result, true);\n\n      // Store in history\n      this.resolutionHistory.push(result);\n\n      return result;\n    } catch (error) {\n      const result: AutoResolutionResult = {\n        resolutionId,\n        gapId: gap.gapId,\n        suggestionId: suggestion.suggestionId,\n        status: \"failed\",\n        startedAt: new Date(startTime),\n        completedAt: new Date(),\n        appliedChanges: {\n          filesModified: [],\n          configurationsChanged: [],\n          dependenciesUpdated: [],\n        },\n        validationResults: {\n          testsRun: 0,\n          testsPassed: 0,\n          testsFailed: 0,\n        },\n        rollbackAvailable: false,\n        error: error instanceof Error ? error.message : \"Resolution failed\",\n        logs: [`Resolution failed: ${error}`],\n      };\n\n      // Update failure metrics and learning data\n      this.updateSuccessMetrics(false);\n      this.updateLearningData(gap, suggestion, result, false);\n\n      // Store in history\n      this.resolutionHistory.push(result);\n\n      return result;\n    }\n  }\n\n  /**\n   * Get current success rate metrics\n   */\n  getSuccessRateMetrics(): SuccessRateMetrics {\n    return { ...this.successRateMetrics };\n  }\n\n  /**\n   * Check if target success rate is achieved\n   */\n  isTargetSuccessRateAchieved(): boolean {\n    return (\n      this.successRateMetrics.currentSuccessRate >=\n      this.config.targetSuccessRate\n    );\n  }\n\n  /**\n   * Get optimization recommendations to improve success rate\n   */\n  getOptimizationRecommendations(): string[] {\n    const recommendations: string[] = [];\n    const metrics = this.successRateMetrics;\n\n    if (metrics.currentSuccessRate < this.config.targetSuccessRate) {\n      recommendations.push(\n        `Current success rate (${(metrics.currentSuccessRate * 100).toFixed(\n          1\n        )}%) is below target (${(this.config.targetSuccessRate * 100).toFixed(\n          1\n        )}%)`\n      );\n\n      // Analyze failure patterns\n      const failurePatterns = this.analyzeFailurePatterns();\n      recommendations.push(...failurePatterns);\n\n      // Suggest strategy adjustments\n      const strategyAdjustments = this.suggestStrategyAdjustments();\n      recommendations.push(...strategyAdjustments);\n\n      // Recommend configuration changes\n      const configRecommendations = this.recommendConfigurationChanges();\n      recommendations.push(...configRecommendations);\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Adaptive learning from resolution history\n   */\n  performAdaptiveLearning(): void {\n    if (!this.config.adaptiveAdjustmentEnabled) {\n      return;\n    }\n\n    // Analyze recent resolution history\n    const recentHistory = this.resolutionHistory.slice(\n      -this.config.learningWindowSize\n    );\n\n    // Update learning patterns\n    this.updateLearningPatterns(recentHistory);\n\n    // Adjust strategies based on learning\n    this.adjustStrategiesBasedOnLearning();\n\n    // Update risk thresholds\n    this.updateRiskThresholds();\n  }\n\n  // Private implementation methods\n\n  private initializeSuccessRateMetrics(): SuccessRateMetrics {\n    return {\n      totalAttempts: 0,\n      successfulResolutions: 0,\n      failedResolutions: 0,\n      partialResolutions: 0,\n      currentSuccessRate: 0,\n      targetSuccessRate: this.config.targetSuccessRate,\n      trendDirection: \"stable\",\n      lastUpdated: new Date(),\n    };\n  }\n\n  private initializeResolutionStrategies(): void {\n    // Conservative Strategy - High success rate, low risk\n    this.resolutionStrategies.set(\"conservative\", {\n      strategyId: \"conservative\",\n      name: \"Conservative Resolution\",\n      description: \"Low-risk changes with high validation\",\n      applicableGapTypes: [\n        \"missing_implementation\",\n        \"incomplete_feature\",\n        \"configuration_issue\",\n      ],\n      riskThreshold: 0.9,\n      validationSteps: [\n        \"syntax_check\",\n        \"dependency_validation\",\n        \"unit_test_execution\",\n        \"integration_test_execution\",\n      ],\n      rollbackPlan: \"Automatic rollback on any validation failure\",\n      successRate: 0.85,\n      enabled: true,\n    });\n\n    // Balanced Strategy - Moderate risk, good success rate\n    this.resolutionStrategies.set(\"balanced\", {\n      strategyId: \"balanced\",\n      name: \"Balanced Resolution\",\n      description: \"Moderate risk with comprehensive validation\",\n      applicableGapTypes: [\n        \"missing_implementation\",\n        \"incomplete_feature\",\n        \"performance_issue\",\n        \"broken_integration\",\n      ],\n      riskThreshold: 0.7,\n      validationSteps: [\n        \"syntax_check\",\n        \"dependency_validation\",\n        \"unit_test_execution\",\n      ],\n      rollbackPlan: \"Rollback on critical validation failures\",\n      successRate: 0.75,\n      enabled: true,\n    });\n\n    // Aggressive Strategy - Higher risk, faster resolution\n    this.resolutionStrategies.set(\"aggressive\", {\n      strategyId: \"aggressive\",\n      name: \"Aggressive Resolution\",\n      description: \"Higher risk for faster resolution\",\n      applicableGapTypes: [\"performance_issue\", \"configuration_issue\"],\n      riskThreshold: 0.6,\n      validationSteps: [\"syntax_check\", \"basic_validation\"],\n      rollbackPlan: \"Manual rollback if needed\",\n      successRate: 0.65,\n      enabled: false, // Disabled by default due to lower success rate\n    });\n  }\n\n  private async calculateRiskFactors(\n    gap: ImplementationGap,\n    suggestion: RemediationSuggestion\n  ): Promise<Omit<EnhancedRiskAssessment[\"riskFactors\"], \"historicalSuccess\">> {\n    // Calculate code complexity risk\n    const codeComplexity = this.assessCodeComplexity(suggestion);\n\n    // Calculate module importance risk\n    const moduleImportance = this.assessModuleImportance(gap);\n\n    // Calculate test coverage risk\n    const testCoverage = await this.assessTestCoverage(gap);\n\n    // Calculate dependency impact risk\n    const dependencyImpact = this.assessDependencyImpact(suggestion);\n\n    return {\n      codeComplexity,\n      moduleImportance,\n      testCoverage,\n      dependencyImpact,\n    };\n  }\n\n  private assessCodeComplexity(suggestion: RemediationSuggestion): number {\n    let complexity = 0;\n\n    // Analyze code changes\n    if (suggestion.implementation.codeChanges) {\n      for (const change of suggestion.implementation.codeChanges) {\n        // Simple heuristics for complexity\n        const lines = change.changes.split(\"\\n\").length;\n        const hasLoops = /for|while|forEach/.test(change.changes);\n        const hasConditions = /if|switch|case/.test(change.changes);\n        const hasAsync = /async|await|Promise/.test(change.changes);\n\n        let changeComplexity = Math.min(lines / 50, 1); // Normalize by lines\n        if (hasLoops) changeComplexity += 0.2;\n        if (hasConditions) changeComplexity += 0.1;\n        if (hasAsync) changeComplexity += 0.15;\n\n        complexity = Math.max(complexity, changeComplexity);\n      }\n    }\n\n    return Math.min(complexity, 1);\n  }\n\n  private assessModuleImportance(gap: ImplementationGap): number {\n    const criticalModules = [\n      \"auth\",\n      \"security\",\n      \"payment\",\n      \"database\",\n      \"core\",\n      \"api\",\n    ];\n    const importantModules = [\"user\", \"admin\", \"config\", \"utils\"];\n\n    let importance = 0.3; // Base importance\n\n    for (const module of gap.affectedModules) {\n      if (criticalModules.some((critical) => module.includes(critical))) {\n        importance = Math.max(importance, 0.9);\n      } else if (\n        importantModules.some((important) => module.includes(important))\n      ) {\n        importance = Math.max(importance, 0.6);\n      }\n    }\n\n    return importance;\n  }\n\n  private async assessTestCoverage(gap: ImplementationGap): Promise<number> {\n    // Simulate test coverage assessment\n    // In a real implementation, this would analyze actual test files\n    const hasTestFiles = gap.affectedModules.some((module) =>\n      module.includes(\"test\")\n    );\n    const isTestableModule = !gap.affectedModules.some((module) =>\n      [\"config\", \"types\", \"constants\"].includes(module)\n    );\n\n    if (hasTestFiles) return 0.9;\n    if (isTestableModule) return 0.5;\n    return 0.2;\n  }\n\n  private assessDependencyImpact(suggestion: RemediationSuggestion): number {\n    if (!suggestion.implementation.dependencies) return 0.1;\n\n    const deps = suggestion.implementation.dependencies;\n    let impact = 0.1;\n\n    if (deps.add && deps.add.length > 0) {\n      impact += deps.add.length * 0.1;\n    }\n\n    if (deps.remove && deps.remove.length > 0) {\n      impact += deps.remove.length * 0.15; // Removing deps is riskier\n    }\n\n    if (deps.update && Object.keys(deps.update).length > 0) {\n      impact += Object.keys(deps.update).length * 0.05;\n    }\n\n    return Math.min(impact, 1);\n  }\n\n  private getHistoricalSuccessRate(\n    gap: ImplementationGap,\n    suggestion: RemediationSuggestion\n  ): number {\n    const patternKey = `${gap.type}-${suggestion.type}`;\n    const learningData = this.learningData.get(patternKey);\n\n    if (\n      !learningData ||\n      learningData.successCount + learningData.failureCount < 5\n    ) {\n      return 0.5; // Default for insufficient data\n    }\n\n    return learningData.successRate;\n  }\n\n  private calculateConfidenceScore(\n    gap: ImplementationGap,\n    suggestion: RemediationSuggestion,\n    riskFactors: Omit<\n      EnhancedRiskAssessment[\"riskFactors\"],\n      \"historicalSuccess\"\n    >\n  ): number {\n    // Base confidence from gap detection\n    let confidence = gap.confidence;\n\n    // Adjust based on risk factors\n    confidence *= 1 - riskFactors.codeComplexity * 0.2;\n    confidence *= 1 - riskFactors.moduleImportance * 0.15;\n    confidence *= 0.5 + riskFactors.testCoverage * 0.5;\n    confidence *= 1 - riskFactors.dependencyImpact * 0.1;\n\n    // Adjust based on suggestion quality\n    if (suggestion.testingRequired) confidence += 0.1;\n    if (suggestion.rollbackPlan) confidence += 0.05;\n    if (suggestion.riskLevel === \"low\") confidence += 0.1;\n    else if (suggestion.riskLevel === \"high\") confidence -= 0.15;\n\n    return Math.max(0.1, Math.min(1, confidence));\n  }\n\n  private determineOverallRisk(\n    riskFactors: Omit<\n      EnhancedRiskAssessment[\"riskFactors\"],\n      \"historicalSuccess\"\n    >,\n    confidenceScore: number\n  ): EnhancedRiskAssessment[\"overallRisk\"] {\n    const avgRisk =\n      (riskFactors.codeComplexity +\n        riskFactors.moduleImportance +\n        (1 - riskFactors.testCoverage) +\n        riskFactors.dependencyImpact) /\n      4;\n\n    const adjustedRisk = avgRisk * (1 - confidenceScore * 0.3);\n\n    if (adjustedRisk < 0.2) return \"very_low\";\n    if (adjustedRisk < 0.4) return \"low\";\n    if (adjustedRisk < 0.6) return \"medium\";\n    if (adjustedRisk < 0.8) return \"high\";\n    return \"very_high\";\n  }\n\n  private determineRecommendedAction(\n    overallRisk: EnhancedRiskAssessment[\"overallRisk\"],\n    confidenceScore: number\n  ): EnhancedRiskAssessment[\"recommendedAction\"] {\n    if (\n      confidenceScore >= this.config.minConfidenceThreshold &&\n      (overallRisk === \"very_low\" || overallRisk === \"low\")\n    ) {\n      return \"auto_resolve\";\n    }\n\n    if (\n      confidenceScore >= 0.6 &&\n      overallRisk === \"medium\" &&\n      this.successRateMetrics.currentSuccessRate > 0.7\n    ) {\n      return \"auto_resolve\";\n    }\n\n    if (\n      overallRisk === \"very_high\" ||\n      (overallRisk === \"high\" && confidenceScore < 0.5)\n    ) {\n      return \"reject\";\n    }\n\n    return \"manual_review\";\n  }\n\n  private generateMitigationStrategies(\n    gap: ImplementationGap,\n    suggestion: RemediationSuggestion,\n    riskFactors: Omit<\n      EnhancedRiskAssessment[\"riskFactors\"],\n      \"historicalSuccess\"\n    >\n  ): string[] {\n    const strategies: string[] = [];\n\n    if (riskFactors.codeComplexity > 0.5) {\n      strategies.push(\"Break down complex code changes into smaller steps\");\n      strategies.push(\"Add comprehensive unit tests for complex logic\");\n    }\n\n    if (riskFactors.moduleImportance > 0.7) {\n      strategies.push(\"Create backup of critical modules before changes\");\n      strategies.push(\"Implement gradual rollout with monitoring\");\n    }\n\n    if (riskFactors.testCoverage < 0.5) {\n      strategies.push(\"Add test coverage before implementing changes\");\n      strategies.push(\"Create integration tests for affected modules\");\n    }\n\n    if (riskFactors.dependencyImpact > 0.3) {\n      strategies.push(\"Validate dependency compatibility\");\n      strategies.push(\"Test dependency changes in isolated environment\");\n    }\n\n    return strategies;\n  }\n\n  private adaptStrategyBasedOnLearning(\n    strategy: ResolutionStrategy,\n    gap: ImplementationGap,\n    suggestion: RemediationSuggestion\n  ): ResolutionStrategy {\n    const patternKey = `${gap.type}-${suggestion.type}`;\n    const learningData = this.learningData.get(patternKey);\n\n    if (!learningData) {\n      return strategy;\n    }\n\n    // Adapt strategy based on learning data\n    const adaptedStrategy = { ...strategy };\n\n    // Adjust risk threshold based on historical success\n    if (learningData.successRate > 0.8) {\n      adaptedStrategy.riskThreshold *= 0.9; // Be more aggressive\n    } else if (learningData.successRate < 0.6) {\n      adaptedStrategy.riskThreshold *= 1.1; // Be more conservative\n    }\n\n    // Add validation steps based on common failure reasons\n    if (learningData.commonFailureReasons.includes(\"syntax_error\")) {\n      if (!adaptedStrategy.validationSteps.includes(\"enhanced_syntax_check\")) {\n        adaptedStrategy.validationSteps.unshift(\"enhanced_syntax_check\");\n      }\n    }\n\n    if (learningData.commonFailureReasons.includes(\"dependency_conflict\")) {\n      if (\n        !adaptedStrategy.validationSteps.includes(\"dependency_conflict_check\")\n      ) {\n        adaptedStrategy.validationSteps.push(\"dependency_conflict_check\");\n      }\n    }\n\n    return adaptedStrategy;\n  }\n\n  private async validateCodeChange(codeChange: any): Promise<{\n    isValid: boolean;\n    status: string;\n    reason?: string;\n  }> {\n    // Simulate code validation\n    const hasValidSyntax = !codeChange.changes.includes(\"syntax_error\");\n    const hasValidImports = !codeChange.changes.includes(\"invalid_import\");\n\n    if (!hasValidSyntax) {\n      return {\n        isValid: false,\n        status: \"failed\",\n        reason: \"Syntax error detected\",\n      };\n    }\n\n    if (!hasValidImports) {\n      return {\n        isValid: false,\n        status: \"failed\",\n        reason: \"Invalid import detected\",\n      };\n    }\n\n    return { isValid: true, status: \"passed\" };\n  }\n\n  private async validateConfigurationChange(configChange: any): Promise<{\n    isValid: boolean;\n    status: string;\n    reason?: string;\n  }> {\n    // Simulate configuration validation\n    const isValidJson = typeof configChange.changes === \"object\";\n\n    if (!isValidJson) {\n      return {\n        isValid: false,\n        status: \"failed\",\n        reason: \"Invalid JSON configuration\",\n      };\n    }\n\n    return { isValid: true, status: \"passed\" };\n  }\n\n  private async validateDependencies(dependencies: any): Promise<{\n    isValid: boolean;\n    status: string;\n    reason?: string;\n  }> {\n    // Simulate dependency validation\n    if (dependencies.add && dependencies.add.includes(\"malicious-package\")) {\n      return {\n        isValid: false,\n        status: \"failed\",\n        reason: \"Security risk in dependencies\",\n      };\n    }\n\n    return { isValid: true, status: \"passed\" };\n  }\n\n  private async executeValidationStep(\n    step: string,\n    gap: ImplementationGap,\n    suggestion: RemediationSuggestion\n  ): Promise<{\n    isValid: boolean;\n    status: string;\n    recommendation?: string;\n  }> {\n    // Simulate validation step execution\n    switch (step) {\n      case \"syntax_check\":\n        // Check for syntax errors in code changes\n        if (suggestion.implementation.codeChanges) {\n          for (const change of suggestion.implementation.codeChanges) {\n            if (change.changes.includes(\"syntax_error\")) {\n              return {\n                isValid: false,\n                status: \"failed\",\n                recommendation: \"Fix syntax errors in code changes\",\n              };\n            }\n          }\n        }\n        return { isValid: true, status: \"passed\" };\n      case \"dependency_validation\":\n        return { isValid: true, status: \"passed\" };\n      case \"unit_test_execution\":\n        return { isValid: true, status: \"passed\" };\n      case \"integration_test_execution\":\n        return { isValid: true, status: \"passed\" };\n      case \"enhanced_syntax_check\":\n        return { isValid: true, status: \"passed\" };\n      case \"dependency_conflict_check\":\n        return { isValid: true, status: \"passed\" };\n      case \"basic_validation\":\n        return { isValid: true, status: \"passed\" };\n      default:\n        return {\n          isValid: false,\n          status: \"failed\",\n          recommendation: `Unknown validation step: ${step}`,\n        };\n    }\n  }\n\n  private async executeResolutionWithStrategy(\n    result: AutoResolutionResult,\n    suggestion: RemediationSuggestion,\n    strategy: ResolutionStrategy\n  ): Promise<void> {\n    // Apply code changes with strategy-specific validation\n    if (suggestion.implementation.codeChanges) {\n      for (const codeChange of suggestion.implementation.codeChanges) {\n        await this.applyCodeChangeWithValidation(codeChange, strategy);\n        result.appliedChanges.filesModified.push(codeChange.file);\n        result.logs.push(`Applied code changes to ${codeChange.file}`);\n      }\n    }\n\n    // Apply configuration changes\n    if (suggestion.implementation.configurationChanges) {\n      for (const configChange of suggestion.implementation\n        .configurationChanges) {\n        await this.applyConfigurationChangeWithValidation(\n          configChange,\n          strategy\n        );\n        result.appliedChanges.configurationsChanged.push(configChange.file);\n        result.logs.push(\n          `Applied configuration changes to ${configChange.file}`\n        );\n      }\n    }\n\n    // Update dependencies\n    if (suggestion.implementation.dependencies) {\n      await this.updateDependenciesWithValidation(\n        suggestion.implementation.dependencies,\n        strategy\n      );\n      result.appliedChanges.dependenciesUpdated.push(\"package.json\");\n      result.logs.push(\"Updated dependencies\");\n    }\n  }\n\n  private async runEnhancedValidationTests(\n    gap: ImplementationGap,\n    suggestion: RemediationSuggestion,\n    strategy: ResolutionStrategy\n  ): Promise<AutoResolutionResult[\"validationResults\"]> {\n    let testsRun = 0;\n    let testsPassed = 0;\n\n    // Run strategy-specific validation tests\n    for (const step of strategy.validationSteps) {\n      testsRun++;\n      const stepResult = await this.executeValidationStep(\n        step,\n        gap,\n        suggestion\n      );\n      if (stepResult.isValid) {\n        testsPassed++;\n      }\n    }\n\n    // Additional enhanced tests\n    testsRun += 5; // Simulate additional tests\n    // For simple, low-risk suggestions, all additional tests should pass\n    const isSimpleSuggestion =\n      suggestion.riskLevel === \"low\" &&\n      suggestion.implementation.codeChanges?.length === 1 &&\n      !suggestion.implementation.codeChanges[0].changes.includes(\n        \"syntax_error\"\n      );\n\n    if (isSimpleSuggestion) {\n      testsPassed += 5; // All additional tests pass for simple suggestions\n    } else {\n      testsPassed += 4; // 80% pass rate for complex suggestions\n    }\n\n    return {\n      testsRun,\n      testsPassed,\n      testsFailed: testsRun - testsPassed,\n    };\n  }\n\n  private async applyCodeChangeWithValidation(\n    codeChange: any,\n    strategy: ResolutionStrategy\n  ): Promise<void> {\n    // Enhanced code change application with strategy-specific validation\n    console.log(\n      `Applying code changes to ${codeChange.file} with strategy ${strategy.name}`\n    );\n    await new Promise((resolve) => setTimeout(resolve, 100));\n  }\n\n  private async applyConfigurationChangeWithValidation(\n    configChange: any,\n    strategy: ResolutionStrategy\n  ): Promise<void> {\n    console.log(\n      `Applying configuration changes to ${configChange.file} with strategy ${strategy.name}`\n    );\n    await new Promise((resolve) => setTimeout(resolve, 50));\n  }\n\n  private async updateDependenciesWithValidation(\n    dependencies: any,\n    strategy: ResolutionStrategy\n  ): Promise<void> {\n    console.log(`Updating dependencies with strategy ${strategy.name}`);\n    await new Promise((resolve) => setTimeout(resolve, 200));\n  }\n\n  private updateSuccessMetrics(success: boolean): void {\n    this.successRateMetrics.totalAttempts++;\n\n    if (success) {\n      this.successRateMetrics.successfulResolutions++;\n    } else {\n      this.successRateMetrics.failedResolutions++;\n    }\n\n    this.successRateMetrics.currentSuccessRate =\n      this.successRateMetrics.successfulResolutions /\n      this.successRateMetrics.totalAttempts;\n\n    // Update trend direction\n    const recentHistory = this.resolutionHistory.slice(-10);\n    if (recentHistory.length >= 5) {\n      const recentSuccessRate =\n        recentHistory.filter((r) => r.status === \"success\").length /\n        recentHistory.length;\n\n      if (\n        recentSuccessRate >\n        this.successRateMetrics.currentSuccessRate + 0.05\n      ) {\n        this.successRateMetrics.trendDirection = \"improving\";\n      } else if (\n        recentSuccessRate <\n        this.successRateMetrics.currentSuccessRate - 0.05\n      ) {\n        this.successRateMetrics.trendDirection = \"declining\";\n      } else {\n        this.successRateMetrics.trendDirection = \"stable\";\n      }\n    }\n\n    this.successRateMetrics.lastUpdated = new Date();\n  }\n\n  private updateLearningData(\n    gap: ImplementationGap,\n    suggestion: RemediationSuggestion,\n    result: AutoResolutionResult,\n    success: boolean\n  ): void {\n    const patternKey = `${gap.type}-${suggestion.type}`;\n    let learningData = this.learningData.get(patternKey);\n\n    if (!learningData) {\n      learningData = {\n        patternId: patternKey,\n        gapType: gap.type,\n        suggestionType: suggestion.type,\n        riskLevel: suggestion.riskLevel,\n        successCount: 0,\n        failureCount: 0,\n        successRate: 0,\n        commonFailureReasons: [],\n        optimizationHints: [],\n        lastUpdated: new Date(),\n      };\n    }\n\n    if (success) {\n      learningData.successCount++;\n    } else {\n      learningData.failureCount++;\n      if (result.error) {\n        learningData.commonFailureReasons.push(result.error);\n      }\n    }\n\n    learningData.successRate =\n      learningData.successCount /\n      (learningData.successCount + learningData.failureCount);\n    learningData.lastUpdated = new Date();\n\n    this.learningData.set(patternKey, learningData);\n  }\n\n  private analyzeFailurePatterns(): string[] {\n    const patterns: string[] = [];\n    const recentFailures = this.resolutionHistory\n      .filter((r) => r.status === \"failed\")\n      .slice(-20);\n\n    // Analyze common failure reasons\n    const failureReasons = recentFailures\n      .map((r) => r.error)\n      .filter(Boolean) as string[];\n\n    const reasonCounts = failureReasons.reduce((acc, reason) => {\n      acc[reason] = (acc[reason] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    Object.entries(reasonCounts)\n      .sort(([, a], [, b]) => b - a)\n      .slice(0, 3)\n      .forEach(([reason, count]) => {\n        patterns.push(`Common failure: ${reason} (${count} occurrences)`);\n      });\n\n    return patterns;\n  }\n\n  private suggestStrategyAdjustments(): string[] {\n    const suggestions: string[] = [];\n\n    // Analyze strategy performance\n    this.resolutionStrategies.forEach((strategy) => {\n      if (strategy.successRate < 0.7) {\n        suggestions.push(\n          `Consider disabling or improving strategy: ${strategy.name} (${(\n            strategy.successRate * 100\n          ).toFixed(1)}% success rate)`\n        );\n      }\n    });\n\n    return suggestions;\n  }\n\n  private recommendConfigurationChanges(): string[] {\n    const recommendations: string[] = [];\n\n    if (this.successRateMetrics.currentSuccessRate < 0.6) {\n      recommendations.push(\"Increase minimum confidence threshold\");\n      recommendations.push(\"Reduce maximum risk threshold\");\n      recommendations.push(\"Enable more conservative resolution strategies\");\n    }\n\n    return recommendations;\n  }\n\n  private updateLearningPatterns(history: AutoResolutionResult[]): void {\n    // Update learning patterns based on recent history\n    // This would implement more sophisticated pattern recognition\n  }\n\n  private adjustStrategiesBasedOnLearning(): void {\n    // Adjust strategy parameters based on learning data\n    this.learningData.forEach((data) => {\n      if (\n        data.successRate < 0.5 &&\n        data.successCount + data.failureCount >= 10\n      ) {\n        // Disable strategies with consistently poor performance\n        this.resolutionStrategies.forEach((strategy) => {\n          if (strategy.applicableGapTypes.includes(data.gapType)) {\n            strategy.enabled = false;\n          }\n        });\n      }\n    });\n  }\n\n  private updateRiskThresholds(): void {\n    // Dynamically adjust risk thresholds based on performance\n    if (\n      this.successRateMetrics.currentSuccessRate < this.config.targetSuccessRate\n    ) {\n      this.config.maxRiskThreshold *= 0.95; // Be more conservative\n      this.config.minConfidenceThreshold *= 1.02; // Require higher confidence\n    } else if (\n      this.successRateMetrics.currentSuccessRate >\n      this.config.targetSuccessRate + 0.1\n    ) {\n      this.config.maxRiskThreshold *= 1.05; // Be more aggressive\n      this.config.minConfidenceThreshold *= 0.98; // Allow lower confidence\n    }\n\n    // Ensure thresholds stay within reasonable bounds\n    this.config.maxRiskThreshold = Math.max(\n      0.1,\n      Math.min(0.5, this.config.maxRiskThreshold)\n    );\n    this.config.minConfidenceThreshold = Math.max(\n      0.5,\n      Math.min(0.95, this.config.minConfidenceThreshold)\n    );\n  }\n\n  private generateResolutionId(): string {\n    return `opt-res-${Date.now()}-${Math.random()\n      .toString(36)\n      .substring(2, 11)}`;\n  }\n}\n"],"version":3}
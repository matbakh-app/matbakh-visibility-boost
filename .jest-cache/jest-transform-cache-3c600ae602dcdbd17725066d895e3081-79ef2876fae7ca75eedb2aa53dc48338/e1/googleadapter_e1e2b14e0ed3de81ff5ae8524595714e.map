{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/adapters/google-adapter.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/adapters/google-adapter.ts"],"sourcesContent":["import { ProviderResponse, RouteDecision, ToolSpec } from \"../types\";\nimport { BaseAdapter } from \"./tool-call-adapter\";\n\nexport class GoogleAdapter extends BaseAdapter {\n  mapTools(tools?: ToolSpec[]) {\n    if (!tools?.length) return undefined;\n\n    return {\n      tools: [\n        {\n          functionDeclarations: tools.map((t) => ({\n            name: t.name,\n            description: t.description || \"\",\n            parameters: {\n              type: \"object\",\n              properties: t.parameters || {},\n              required: Object.keys(t.parameters || {}),\n            },\n          })),\n        },\n      ],\n    };\n  }\n\n  // Enhanced mapping from unified schema to Google format\n  override fromUnifiedSchema(tools?: UnifiedToolSpec[]): any | undefined {\n    if (!tools?.length) return undefined;\n\n    return {\n      tools: [\n        {\n          functionDeclarations: tools.map((tool) => ({\n            name: tool.function.name,\n            description: tool.function.description || \"\",\n            parameters: {\n              type: \"object\",\n              properties: tool.function.parameters.properties,\n              required: tool.function.parameters.required || [],\n            },\n          })),\n        },\n      ],\n    };\n  }\n\n  buildRequest(input: {\n    prompt: string;\n    decision: RouteDecision;\n    streaming?: boolean;\n    maxTokens?: number;\n    tools?: ToolSpec[] | UnifiedToolSpec[];\n  }) {\n    const { prompt, decision, streaming, maxTokens, tools } = input;\n\n    const request: any = {\n      contents: [\n        {\n          role: \"user\",\n          parts: [{ text: prompt }],\n        },\n      ],\n      generationConfig: {\n        temperature: decision.temperature,\n        maxOutputTokens: maxTokens || 1024,\n        topP: 0.8,\n        topK: 40,\n      },\n    };\n\n    // Handle tools from decision or input parameter\n    const toolsToUse = tools || decision.tools;\n    if (toolsToUse?.length) {\n      if (this.isUnifiedToolSpec(toolsToUse[0])) {\n        Object.assign(\n          request,\n          this.fromUnifiedSchema(toolsToUse as UnifiedToolSpec[])\n        );\n      } else {\n        Object.assign(request, this.mapTools(toolsToUse as ToolSpec[]));\n      }\n    }\n\n    // Add safety settings for different domains\n    request.safetySettings = this.getSafetySettings(prompt);\n\n    return request;\n  }\n\n  parseResponse(resp: any): ProviderResponse {\n    try {\n      this.validateResponse(resp, \"Google\");\n\n      // Handle different response formats\n      const candidates = resp.candidates || [];\n      if (candidates.length === 0) {\n        return {\n          text: \"\",\n          toolCalls: [],\n          raw: resp,\n          tokensUsed: { input: 0, output: 0 },\n        };\n      }\n\n      const candidate = candidates[0];\n      const content = candidate.content;\n\n      // Extract text content\n      const textParts = content?.parts?.filter((p: any) => p.text) || [];\n      const text = textParts.map((p: any) => p.text).join(\"\\n\");\n\n      // Extract function calls\n      const functionCalls =\n        content?.parts?.filter((p: any) => p.functionCall) || [];\n      const toolCalls = functionCalls.map((fc: any) => ({\n        name: fc.functionCall.name,\n        arguments: fc.functionCall.args || {},\n      }));\n\n      // Extract usage metadata\n      const tokensUsed = {\n        input: resp.usageMetadata?.promptTokenCount || 0,\n        output: resp.usageMetadata?.candidatesTokenCount || 0,\n      };\n\n      return {\n        text,\n        toolCalls,\n        raw: resp,\n        tokensUsed,\n      };\n    } catch (error) {\n      this.handleError(error, \"Google\");\n    }\n  }\n\n  private getSafetySettings(prompt: string) {\n    // Adjust safety settings based on content\n    const isLegalContent =\n      prompt.toLowerCase().includes(\"legal\") ||\n      prompt.toLowerCase().includes(\"law\") ||\n      prompt.toLowerCase().includes(\"compliance\");\n\n    const isMedicalContent =\n      prompt.toLowerCase().includes(\"medical\") ||\n      prompt.toLowerCase().includes(\"health\") ||\n      prompt.toLowerCase().includes(\"diagnosis\");\n\n    if (isLegalContent || isMedicalContent) {\n      return [\n        {\n          category: \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n          threshold: \"BLOCK_LOW_AND_ABOVE\",\n        },\n        {\n          category: \"HARM_CATEGORY_HARASSMENT\",\n          threshold: \"BLOCK_LOW_AND_ABOVE\",\n        },\n      ];\n    }\n\n    return [\n      {\n        category: \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n        threshold: \"BLOCK_MEDIUM_AND_ABOVE\",\n      },\n    ];\n  }\n\n  getProviderConfig() {\n    return {\n      maxContextTokens: 1000000, // Gemini 1.5 Pro context window\n      supportsStreaming: true,\n      supportsTools: true,\n      supportsJsonMode: true, // Gemini supports JSON mode\n      supportsVision: true, // Gemini supports vision\n      rateLimitRpm: 300, // Requests per minute (varies by tier)\n      fallbackProvider: \"bedrock\", // Fallback to Bedrock if Google fails\n    };\n  }\n\n  // Google-specific token estimation\n  override estimateTokens(text: string): { input: number; output: number } {\n    // Gemini typically uses ~4 characters per token\n    const tokens = Math.ceil(text.length / 4);\n    return { input: tokens, output: 0 };\n  }\n\n  // Implementation of abstract methods\n  protected extractToolCallsFromResponse(resp: any): Array<{\n    id?: string;\n    name: string;\n    arguments: any;\n    confidence?: number;\n  }> {\n    const candidates = resp.candidates || [];\n    if (candidates.length === 0) return [];\n\n    const candidate = candidates[0];\n    const content = candidate.content;\n\n    // Extract function calls from Google response format\n    const functionCalls =\n      content?.parts?.filter((p: any) => p.functionCall) || [];\n\n    return functionCalls.map((fc: any, index: number) => ({\n      id: fc.functionCall.id || `google_call_${index}`,\n      name: fc.functionCall.name,\n      arguments: fc.functionCall.args || {},\n      confidence: candidate.finishReason === \"STOP\" ? 1.0 : 0.8, // Lower confidence for incomplete responses\n    }));\n  }\n\n  protected getProviderName(): string {\n    return \"google\";\n  }\n\n  // Enhanced tool feature support for Google\n  override supportsToolFeature(\n    feature: \"parallel_calls\" | \"streaming\" | \"json_schema\" | \"complex_types\"\n  ): boolean {\n    switch (feature) {\n      case \"parallel_calls\":\n        return true; // Gemini supports parallel function calls\n      case \"streaming\":\n        return false; // Google doesn't support streaming with function calls yet\n      case \"json_schema\":\n        return true; // Gemini supports structured output\n      case \"complex_types\":\n        return true; // Gemini handles complex nested types\n      default:\n        return super.supportsToolFeature(feature);\n    }\n  }\n\n  // Helper method to check if tools are in unified format\n  private isUnifiedToolSpec(tool: any): tool is UnifiedToolSpec {\n    return tool && typeof tool === \"object\" && \"function\" in tool;\n  }\n}\n"],"version":3}
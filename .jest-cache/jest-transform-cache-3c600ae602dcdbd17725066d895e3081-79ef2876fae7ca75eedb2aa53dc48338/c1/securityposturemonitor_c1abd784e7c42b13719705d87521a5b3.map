{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/security-posture-monitor.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/security-posture-monitor.ts"],"sourcesContent":["/**\n * Security Posture Monitor - Comprehensive Security Monitoring for Hybrid Architecture\n *\n * This module implements real-time security posture monitoring for the hybrid routing\n * architecture, tracking security metrics across both MCP and direct Bedrock paths,\n * detecting threats, and providing security recommendations.\n */\n\n// Security Posture Status\nexport interface SecurityPostureStatus {\n  overall: {\n    securityScore: number; // 0-100\n    threatLevel: \"low\" | \"medium\" | \"high\" | \"critical\";\n    lastAssessment: Date;\n    complianceStatus: \"compliant\" | \"warning\" | \"non-compliant\";\n  };\n  routes: {\n    mcp: RouteSecurityStatus;\n    directBedrock: RouteSecurityStatus;\n  };\n  threats: {\n    active: SecurityThreat[];\n    mitigated: SecurityThreat[];\n    totalDetected: number;\n  };\n  compliance: {\n    gdpr: ComplianceMetrics;\n    dataResidency: ComplianceMetrics;\n    auditTrail: ComplianceMetrics;\n  };\n  recommendations: {\n    immediate: SecurityRecommendation[];\n    shortTerm: SecurityRecommendation[];\n    longTerm: SecurityRecommendation[];\n  };\n}\n\n// Route Security Status\nexport interface RouteSecurityStatus {\n  isSecure: boolean;\n  securityScore: number; // 0-100\n  lastCheck: Date;\n  vulnerabilities: SecurityVulnerability[];\n  encryptionStatus: \"enabled\" | \"partial\" | \"disabled\";\n  accessControlStatus: \"strict\" | \"moderate\" | \"weak\";\n  threatDetectionEnabled: boolean;\n}\n\n// Security Threat\nexport interface SecurityThreat {\n  id: string;\n  type:\n    | \"unauthorized_access\"\n    | \"data_breach\"\n    | \"injection_attack\"\n    | \"ddos\"\n    | \"malware\"\n    | \"misconfiguration\"\n    | \"compliance_violation\";\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n  description: string;\n  detectedAt: Date;\n  affectedRoute: \"mcp\" | \"direct_bedrock\" | \"both\";\n  affectedComponents: string[];\n  status: \"active\" | \"mitigated\" | \"investigating\";\n  mitigationSteps: string[];\n  estimatedImpact: string;\n}\n\n// Security Vulnerability\nexport interface SecurityVulnerability {\n  id: string;\n  cveId?: string;\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n  description: string;\n  component: string;\n  discoveredAt: Date;\n  patchAvailable: boolean;\n  remediationSteps: string[];\n}\n\n// Compliance Metrics\nexport interface ComplianceMetrics {\n  isCompliant: boolean;\n  complianceScore: number; // 0-100\n  violations: ComplianceViolation[];\n  lastAudit: Date;\n  nextAuditDue: Date;\n}\n\n// Compliance Violation\nexport interface ComplianceViolation {\n  id: string;\n  type: string;\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n  description: string;\n  detectedAt: Date;\n  affectedData: string[];\n  remediationRequired: boolean;\n  remediationSteps: string[];\n}\n\n// Security Recommendation\nexport interface SecurityRecommendation {\n  id: string;\n  priority: \"low\" | \"medium\" | \"high\" | \"critical\";\n  category:\n    | \"access_control\"\n    | \"encryption\"\n    | \"monitoring\"\n    | \"compliance\"\n    | \"configuration\";\n  description: string;\n  expectedImpact: string;\n  implementationSteps: string[];\n  estimatedEffort: \"low\" | \"medium\" | \"high\";\n}\n\n// Security Assessment Configuration\nexport interface SecurityAssessmentConfig {\n  assessmentInterval: number; // How often to assess security posture\n  threatScanInterval: number; // How often to scan for threats\n  complianceCheckInterval: number; // How often to check compliance\n  enableContinuousMonitoring: boolean;\n  enableThreatDetection: boolean;\n  enableVulnerabilityScanning: boolean;\n  alertThresholds: {\n    criticalSecurityScore: number;\n    warningSecurityScore: number;\n    maxActiveThreats: number;\n  };\n}\n\n/**\n * Security Posture Monitor Implementation\n */\nexport class SecurityPostureMonitor {\n  private config: SecurityAssessmentConfig;\n  private featureFlags: AiFeatureFlags;\n  private auditTrail: AuditTrailSystem;\n  private circuitBreaker: CircuitBreaker;\n  private gdprValidator: GDPRHybridComplianceValidator;\n  private providerCompliance: ProviderAgreementCompliance;\n  private directBedrockClient: DirectBedrockClient;\n  private mcpRouter: MCPRouter;\n  private logger: Console;\n\n  // Monitoring state\n  private monitoringActive: boolean = false;\n  private lastAssessment: Date | null = null;\n  private detectedThreats: Map<string, SecurityThreat> = new Map();\n  private securityMetrics: {\n    totalAssessments: number;\n    threatsDetected: number;\n    threatsMitigated: number;\n    complianceViolations: number;\n  } = {\n    totalAssessments: 0,\n    threatsDetected: 0,\n    threatsMitigated: 0,\n    complianceViolations: 0,\n  };\n\n  constructor(\n    config?: Partial<SecurityAssessmentConfig>,\n    featureFlags?: AiFeatureFlags,\n    auditTrail?: AuditTrailSystem,\n    circuitBreaker?: CircuitBreaker,\n    gdprValidator?: GDPRHybridComplianceValidator,\n    providerCompliance?: ProviderAgreementCompliance,\n    directBedrockClient?: DirectBedrockClient,\n    mcpRouter?: MCPRouter\n  ) {\n    this.config = this.getDefaultConfig(config);\n    this.featureFlags = featureFlags || new AiFeatureFlags();\n    this.auditTrail = auditTrail || new AuditTrailSystem();\n    this.circuitBreaker = circuitBreaker || new CircuitBreaker();\n    this.gdprValidator = gdprValidator || new GDPRHybridComplianceValidator();\n    this.providerCompliance =\n      providerCompliance || new ProviderAgreementCompliance();\n    this.directBedrockClient = directBedrockClient || new DirectBedrockClient();\n    this.mcpRouter = mcpRouter || new MCPRouter();\n    this.logger = console;\n  }\n\n  /**\n   * Get default configuration\n   */\n  private getDefaultConfig(\n    config?: Partial<SecurityAssessmentConfig>\n  ): SecurityAssessmentConfig {\n    return {\n      assessmentInterval: 300000, // 5 minutes\n      threatScanInterval: 60000, // 1 minute\n      complianceCheckInterval: 600000, // 10 minutes\n      enableContinuousMonitoring: true,\n      enableThreatDetection: true,\n      enableVulnerabilityScanning: true,\n      alertThresholds: {\n        criticalSecurityScore: 40,\n        warningSecurityScore: 70,\n        maxActiveThreats: 5,\n      },\n      ...config,\n    };\n  }\n\n  /**\n   * Start security posture monitoring\n   */\n  async startMonitoring(): Promise<void> {\n    if (this.monitoringActive) {\n      this.logger.log(\"Security posture monitoring already active\");\n      return;\n    }\n\n    this.logger.log(\"Starting security posture monitoring\");\n    this.monitoringActive = true;\n\n    // Log monitoring start to audit trail\n    await this.auditTrail.logSupportModeEvent(\n      \"security_monitoring_started\",\n      {\n        timestamp: new Date(),\n        config: this.config,\n      },\n      \"system\"\n    );\n\n    // Perform initial assessment\n    await this.assessSecurityPosture();\n  }\n\n  /**\n   * Stop security posture monitoring\n   */\n  async stopMonitoring(): Promise<void> {\n    if (!this.monitoringActive) {\n      this.logger.log(\"Security posture monitoring not active\");\n      return;\n    }\n\n    this.logger.log(\"Stopping security posture monitoring\");\n    this.monitoringActive = false;\n\n    // Log monitoring stop to audit trail\n    await this.auditTrail.logSupportModeEvent(\n      \"security_monitoring_stopped\",\n      {\n        timestamp: new Date(),\n        metrics: this.securityMetrics,\n      },\n      \"system\"\n    );\n  }\n\n  /**\n   * Assess overall security posture\n   */\n  async assessSecurityPosture(): Promise<SecurityPostureStatus> {\n    this.logger.log(\"Assessing security posture for hybrid architecture\");\n\n    try {\n      // Increment assessment counter\n      this.securityMetrics.totalAssessments++;\n\n      // Assess MCP route security\n      const mcpSecurity = await this.assessRouteSecurityStatus(\"mcp\");\n\n      // Assess direct Bedrock route security\n      const directBedrockSecurity = await this.assessRouteSecurityStatus(\n        \"direct_bedrock\"\n      );\n\n      // Scan for active threats\n      const threats = await this.scanForThreats();\n\n      // Check compliance status\n      const complianceStatus = await this.checkComplianceStatus();\n\n      // Calculate overall security score\n      const overallScore = this.calculateOverallSecurityScore(\n        mcpSecurity,\n        directBedrockSecurity,\n        threats,\n        complianceStatus\n      );\n\n      // Determine threat level\n      const threatLevel = this.determineThreatLevel(overallScore, threats);\n\n      // Generate recommendations\n      const recommendations = await this.generateSecurityRecommendations(\n        mcpSecurity,\n        directBedrockSecurity,\n        threats,\n        complianceStatus\n      );\n\n      const status: SecurityPostureStatus = {\n        overall: {\n          securityScore: overallScore,\n          threatLevel,\n          lastAssessment: new Date(),\n          complianceStatus: complianceStatus.overall,\n        },\n        routes: {\n          mcp: mcpSecurity,\n          directBedrock: directBedrockSecurity,\n        },\n        threats: {\n          active: threats.filter((t) => t.status === \"active\"),\n          mitigated: threats.filter((t) => t.status === \"mitigated\"),\n          totalDetected: threats.length,\n        },\n        compliance: complianceStatus.metrics,\n        recommendations,\n      };\n\n      this.lastAssessment = new Date();\n\n      // Log assessment to audit trail\n      await this.auditTrail.logSupportModeEvent(\n        \"security_assessment_completed\",\n        {\n          timestamp: new Date(),\n          securityScore: overallScore,\n          threatLevel,\n          activeThreats: threats.filter((t) => t.status === \"active\").length,\n        },\n        \"system\"\n      );\n\n      return status;\n    } catch (error) {\n      this.logger.error(\"Security assessment failed:\", error);\n\n      // Log failure to audit trail\n      await this.auditTrail.logSupportModeEvent(\n        \"security_assessment_failed\",\n        {\n          timestamp: new Date(),\n          error: error instanceof Error ? error.message : String(error),\n        },\n        \"system\"\n      );\n\n      throw error;\n    }\n  }\n\n  /**\n   * Assess security status for a specific route\n   */\n  private async assessRouteSecurityStatus(\n    route: \"mcp\" | \"direct_bedrock\"\n  ): Promise<RouteSecurityStatus> {\n    this.logger.log(`Assessing security status for ${route} route`);\n\n    // Check encryption status\n    const encryptionStatus = await this.checkEncryptionStatus(route);\n\n    // Check access control\n    const accessControlStatus = await this.checkAccessControlStatus(route);\n\n    // Scan for vulnerabilities\n    const vulnerabilities = await this.scanForVulnerabilities(route);\n\n    // Check threat detection\n    const threatDetectionEnabled = await this.isThreatDetectionEnabled(route);\n\n    // Calculate route security score\n    const securityScore = this.calculateRouteSecurityScore(\n      encryptionStatus,\n      accessControlStatus,\n      vulnerabilities,\n      threatDetectionEnabled\n    );\n\n    return {\n      isSecure: securityScore >= 70 && vulnerabilities.length === 0,\n      securityScore,\n      lastCheck: new Date(),\n      vulnerabilities,\n      encryptionStatus,\n      accessControlStatus,\n      threatDetectionEnabled,\n    };\n  }\n\n  /**\n   * Check encryption status for a route\n   */\n  private async checkEncryptionStatus(\n    route: \"mcp\" | \"direct_bedrock\"\n  ): Promise<\"enabled\" | \"partial\" | \"disabled\"> {\n    // Check if encryption is enabled for the route\n    if (route === \"direct_bedrock\") {\n      // Direct Bedrock uses AWS encryption by default\n      return \"enabled\";\n    } else {\n      // MCP encryption depends on configuration\n      const mcpEncryption = await this.featureFlags.getFlag(\n        \"mcp_encryption_enabled\",\n        true\n      );\n      return mcpEncryption ? \"enabled\" : \"partial\";\n    }\n  }\n\n  /**\n   * Check access control status for a route\n   */\n  private async checkAccessControlStatus(\n    route: \"mcp\" | \"direct_bedrock\"\n  ): Promise<\"strict\" | \"moderate\" | \"weak\"> {\n    // Check access control configuration\n    if (route === \"direct_bedrock\") {\n      // Direct Bedrock has strict IAM-based access control\n      return \"strict\";\n    } else {\n      // MCP access control depends on configuration\n      const mcpAccessControl = await this.featureFlags.getFlag(\n        \"mcp_access_control_strict\",\n        true\n      );\n      return mcpAccessControl ? \"strict\" : \"moderate\";\n    }\n  }\n\n  /**\n   * Scan for vulnerabilities in a route\n   */\n  private async scanForVulnerabilities(\n    route: \"mcp\" | \"direct_bedrock\"\n  ): Promise<SecurityVulnerability[]> {\n    const vulnerabilities: SecurityVulnerability[] = [];\n\n    // Check for common vulnerabilities\n    if (route === \"mcp\") {\n      // Check MCP-specific vulnerabilities\n      const mcpHealth = await this.mcpRouter.checkHealth();\n      if (!mcpHealth.isHealthy) {\n        vulnerabilities.push({\n          id: `mcp-health-${Date.now()}`,\n          severity: \"medium\",\n          description: \"MCP router health check failed\",\n          component: \"mcp-router\",\n          discoveredAt: new Date(),\n          patchAvailable: false,\n          remediationSteps: [\n            \"Check MCP router configuration\",\n            \"Verify network connectivity\",\n            \"Review error logs\",\n          ],\n        });\n      }\n    } else {\n      // Check direct Bedrock vulnerabilities\n      const bedrockHealth = await this.directBedrockClient.checkHealth();\n      if (!bedrockHealth.isHealthy) {\n        vulnerabilities.push({\n          id: `bedrock-health-${Date.now()}`,\n          severity: \"medium\",\n          description: \"Direct Bedrock client health check failed\",\n          component: \"direct-bedrock-client\",\n          discoveredAt: new Date(),\n          patchAvailable: false,\n          remediationSteps: [\n            \"Check AWS credentials\",\n            \"Verify Bedrock service availability\",\n            \"Review circuit breaker status\",\n          ],\n        });\n      }\n    }\n\n    return vulnerabilities;\n  }\n\n  /**\n   * Check if threat detection is enabled for a route\n   */\n  private async isThreatDetectionEnabled(\n    route: \"mcp\" | \"direct_bedrock\"\n  ): Promise<boolean> {\n    return this.config.enableThreatDetection;\n  }\n\n  /**\n   * Calculate security score for a route\n   */\n  private calculateRouteSecurityScore(\n    encryptionStatus: \"enabled\" | \"partial\" | \"disabled\",\n    accessControlStatus: \"strict\" | \"moderate\" | \"weak\",\n    vulnerabilities: SecurityVulnerability[],\n    threatDetectionEnabled: boolean\n  ): number {\n    let score = 100;\n\n    // Deduct points for encryption issues\n    if (encryptionStatus === \"partial\") score -= 15;\n    if (encryptionStatus === \"disabled\") score -= 40;\n\n    // Deduct points for access control issues\n    if (accessControlStatus === \"moderate\") score -= 10;\n    if (accessControlStatus === \"weak\") score -= 30;\n\n    // Deduct points for vulnerabilities\n    vulnerabilities.forEach((vuln) => {\n      switch (vuln.severity) {\n        case \"critical\":\n          score -= 20;\n          break;\n        case \"high\":\n          score -= 15;\n          break;\n        case \"medium\":\n          score -= 10;\n          break;\n        case \"low\":\n          score -= 5;\n          break;\n      }\n    });\n\n    // Deduct points if threat detection is disabled\n    if (!threatDetectionEnabled) score -= 10;\n\n    return Math.max(0, score);\n  }\n\n  /**\n   * Scan for active security threats\n   */\n  private async scanForThreats(): Promise<SecurityThreat[]> {\n    const threats: SecurityThreat[] = [];\n\n    // Check for unauthorized access attempts\n    const unauthorizedAccess = await this.detectUnauthorizedAccess();\n    if (unauthorizedAccess) {\n      threats.push(unauthorizedAccess);\n    }\n\n    // Check for compliance violations\n    const complianceViolations = await this.detectComplianceViolations();\n    threats.push(...complianceViolations);\n\n    // Check for misconfiguration\n    const misconfigurations = await this.detectMisconfigurations();\n    threats.push(...misconfigurations);\n\n    // Update threat metrics\n    this.securityMetrics.threatsDetected += threats.filter(\n      (t) => t.status === \"active\"\n    ).length;\n\n    return threats;\n  }\n\n  /**\n   * Detect unauthorized access attempts\n   */\n  private async detectUnauthorizedAccess(): Promise<SecurityThreat | null> {\n    // Check circuit breaker for repeated failures (potential attack)\n    const circuitBreakerOpen = this.circuitBreaker.isOpen(\"bedrock\" as any);\n\n    if (circuitBreakerOpen) {\n      return {\n        id: `unauthorized-access-${Date.now()}`,\n        type: \"unauthorized_access\",\n        severity: \"high\",\n        description:\n          \"Circuit breaker open - potential unauthorized access attempts detected\",\n        detectedAt: new Date(),\n        affectedRoute: \"direct_bedrock\",\n        affectedComponents: [\"circuit-breaker\", \"direct-bedrock-client\"],\n        status: \"active\",\n        mitigationSteps: [\n          \"Review access logs\",\n          \"Check for suspicious IP addresses\",\n          \"Verify authentication mechanisms\",\n          \"Reset circuit breaker if false positive\",\n        ],\n        estimatedImpact: \"Service degradation, potential security breach\",\n      };\n    }\n\n    return null;\n  }\n\n  /**\n   * Detect compliance violations\n   */\n  private async detectComplianceViolations(): Promise<SecurityThreat[]> {\n    const threats: SecurityThreat[] = [];\n\n    // Check GDPR compliance\n    const gdprCompliant = await this.gdprValidator.validateHybridRouting({\n      route: \"direct_bedrock\",\n      operation: \"security_scan\",\n      dataTypes: [\"system_metrics\"],\n      userConsent: true,\n    });\n\n    if (!gdprCompliant.isCompliant) {\n      threats.push({\n        id: `gdpr-violation-${Date.now()}`,\n        type: \"compliance_violation\",\n        severity: \"critical\",\n        description: `GDPR compliance violation detected: ${gdprCompliant.violations.join(\n          \", \"\n        )}`,\n        detectedAt: new Date(),\n        affectedRoute: \"both\",\n        affectedComponents: [\"gdpr-validator\", \"data-processing\"],\n        status: \"active\",\n        mitigationSteps: gdprCompliant.recommendations,\n        estimatedImpact: \"Legal liability, regulatory fines\",\n      });\n\n      this.securityMetrics.complianceViolations++;\n    }\n\n    return threats;\n  }\n\n  /**\n   * Detect system misconfigurations\n   */\n  private async detectMisconfigurations(): Promise<SecurityThreat[]> {\n    const threats: SecurityThreat[] = [];\n\n    // Check feature flag configuration\n    const flagValidation = await this.featureFlags.validateAllFlags();\n    if (!flagValidation.isValid) {\n      threats.push({\n        id: `misconfiguration-${Date.now()}`,\n        type: \"misconfiguration\",\n        severity: \"medium\",\n        description: `Feature flag misconfiguration detected: ${flagValidation.errors.join(\n          \", \"\n        )}`,\n        detectedAt: new Date(),\n        affectedRoute: \"both\",\n        affectedComponents: [\"feature-flags\"],\n        status: \"active\",\n        mitigationSteps: [\n          \"Review feature flag configuration\",\n          \"Fix validation errors\",\n          \"Test configuration changes\",\n        ],\n        estimatedImpact: \"System instability, unexpected behavior\",\n      });\n    }\n\n    return threats;\n  }\n\n  /**\n   * Check compliance status across all areas\n   */\n  private async checkComplianceStatus(): Promise<{\n    overall: \"compliant\" | \"warning\" | \"non-compliant\";\n    metrics: {\n      gdpr: ComplianceMetrics;\n      dataResidency: ComplianceMetrics;\n      auditTrail: ComplianceMetrics;\n    };\n  }> {\n    // Check GDPR compliance\n    const gdprMetrics = await this.checkGDPRCompliance();\n\n    // Check data residency compliance\n    const dataResidencyMetrics = await this.checkDataResidencyCompliance();\n\n    // Check audit trail compliance\n    const auditTrailMetrics = await this.checkAuditTrailCompliance();\n\n    // Determine overall compliance status\n    const allCompliant =\n      gdprMetrics.isCompliant &&\n      dataResidencyMetrics.isCompliant &&\n      auditTrailMetrics.isCompliant;\n\n    const anyNonCompliant =\n      !gdprMetrics.isCompliant ||\n      !dataResidencyMetrics.isCompliant ||\n      !auditTrailMetrics.isCompliant;\n\n    const overall: \"compliant\" | \"warning\" | \"non-compliant\" = allCompliant\n      ? \"compliant\"\n      : anyNonCompliant\n      ? \"non-compliant\"\n      : \"warning\";\n\n    return {\n      overall,\n      metrics: {\n        gdpr: gdprMetrics,\n        dataResidency: dataResidencyMetrics,\n        auditTrail: auditTrailMetrics,\n      },\n    };\n  }\n\n  /**\n   * Check GDPR compliance\n   */\n  private async checkGDPRCompliance(): Promise<ComplianceMetrics> {\n    const validation = await this.gdprValidator.validateHybridRouting({\n      route: \"both\",\n      operation: \"compliance_check\",\n      dataTypes: [\"all\"],\n      userConsent: true,\n    });\n\n    const violations: ComplianceViolation[] = validation.violations.map(\n      (v, index) => ({\n        id: `gdpr-violation-${index}`,\n        type: \"gdpr\",\n        severity: \"high\",\n        description: v,\n        detectedAt: new Date(),\n        affectedData: [\"user_data\", \"system_data\"],\n        remediationRequired: true,\n        remediationSteps: validation.recommendations,\n      })\n    );\n\n    return {\n      isCompliant: validation.isCompliant,\n      complianceScore: validation.isCompliant ? 100 : 50,\n      violations,\n      lastAudit: new Date(),\n      nextAuditDue: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\n    };\n  }\n\n  /**\n   * Check data residency compliance\n   */\n  private async checkDataResidencyCompliance(): Promise<ComplianceMetrics> {\n    // Check if data residency requirements are met\n    const euRegion = process.env.AWS_REGION === \"eu-central-1\";\n\n    return {\n      isCompliant: euRegion,\n      complianceScore: euRegion ? 100 : 0,\n      violations: euRegion\n        ? []\n        : [\n            {\n              id: \"data-residency-violation\",\n              type: \"data_residency\",\n              severity: \"critical\",\n              description: \"Data not stored in EU region\",\n              detectedAt: new Date(),\n              affectedData: [\"all\"],\n              remediationRequired: true,\n              remediationSteps: [\n                \"Configure AWS region to eu-central-1\",\n                \"Migrate existing data to EU region\",\n                \"Update application configuration\",\n              ],\n            },\n          ],\n      lastAudit: new Date(),\n      nextAuditDue: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // 90 days\n    };\n  }\n\n  /**\n   * Check audit trail compliance\n   */\n  private async checkAuditTrailCompliance(): Promise<ComplianceMetrics> {\n    // Check if audit trail is properly configured\n    const auditTrailEnabled = true; // Audit trail is always enabled\n\n    return {\n      isCompliant: auditTrailEnabled,\n      complianceScore: auditTrailEnabled ? 100 : 0,\n      violations: [],\n      lastAudit: new Date(),\n      nextAuditDue: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\n    };\n  }\n\n  /**\n   * Calculate overall security score\n   */\n  private calculateOverallSecurityScore(\n    mcpSecurity: RouteSecurityStatus,\n    directBedrockSecurity: RouteSecurityStatus,\n    threats: SecurityThreat[],\n    complianceStatus: {\n      overall: \"compliant\" | \"warning\" | \"non-compliant\";\n      metrics: any;\n    }\n  ): number {\n    // Weight factors\n    const routeWeight = 0.4; // 40% for route security\n    const threatWeight = 0.3; // 30% for threat status\n    const complianceWeight = 0.3; // 30% for compliance\n\n    // Calculate route score (average of both routes)\n    const routeScore =\n      (mcpSecurity.securityScore + directBedrockSecurity.securityScore) / 2;\n\n    // Calculate threat score\n    const activeThreats = threats.filter((t) => t.status === \"active\");\n    const criticalThreats = activeThreats.filter(\n      (t) => t.severity === \"critical\"\n    ).length;\n    const highThreats = activeThreats.filter(\n      (t) => t.severity === \"high\"\n    ).length;\n    const threatScore = Math.max(\n      0,\n      100 -\n        criticalThreats * 30 -\n        highThreats * 15 -\n        (activeThreats.length - criticalThreats - highThreats) * 5\n    );\n\n    // Calculate compliance score\n    const complianceScore =\n      complianceStatus.overall === \"compliant\"\n        ? 100\n        : complianceStatus.overall === \"warning\"\n        ? 70\n        : 40;\n\n    // Calculate weighted overall score\n    const overallScore =\n      routeScore * routeWeight +\n      threatScore * threatWeight +\n      complianceScore * complianceWeight;\n\n    return Math.round(overallScore);\n  }\n\n  /**\n   * Determine threat level based on score and threats\n   */\n  private determineThreatLevel(\n    securityScore: number,\n    threats: SecurityThreat[]\n  ): \"low\" | \"medium\" | \"high\" | \"critical\" {\n    const activeThreats = threats.filter((t) => t.status === \"active\");\n    const criticalThreats = activeThreats.filter(\n      (t) => t.severity === \"critical\"\n    );\n\n    if (criticalThreats.length > 0 || securityScore < 40) {\n      return \"critical\";\n    } else if (securityScore < 60 || activeThreats.length > 3) {\n      return \"high\";\n    } else if (securityScore < 80 || activeThreats.length > 0) {\n      return \"medium\";\n    } else {\n      return \"low\";\n    }\n  }\n\n  /**\n   * Generate security recommendations\n   */\n  private async generateSecurityRecommendations(\n    mcpSecurity: RouteSecurityStatus,\n    directBedrockSecurity: RouteSecurityStatus,\n    threats: SecurityThreat[],\n    complianceStatus: any\n  ): Promise<{\n    immediate: SecurityRecommendation[];\n    shortTerm: SecurityRecommendation[];\n    longTerm: SecurityRecommendation[];\n  }> {\n    const immediate: SecurityRecommendation[] = [];\n    const shortTerm: SecurityRecommendation[] = [];\n    const longTerm: SecurityRecommendation[] = [];\n\n    // Immediate recommendations for critical threats\n    const criticalThreats = threats.filter(\n      (t) => t.status === \"active\" && t.severity === \"critical\"\n    );\n    if (criticalThreats.length > 0) {\n      immediate.push({\n        id: \"mitigate-critical-threats\",\n        priority: \"critical\",\n        category: \"monitoring\",\n        description: `Mitigate ${criticalThreats.length} critical security threats immediately`,\n        expectedImpact: \"Prevent security breaches and data loss\",\n        implementationSteps: criticalThreats.flatMap((t) => t.mitigationSteps),\n        estimatedEffort: \"high\",\n      });\n    }\n\n    // Recommendations for route security\n    if (mcpSecurity.securityScore < 70) {\n      shortTerm.push({\n        id: \"improve-mcp-security\",\n        priority: \"high\",\n        category: \"configuration\",\n        description: \"Improve MCP route security configuration\",\n        expectedImpact: \"Enhanced security for MCP routing path\",\n        implementationSteps: [\n          \"Enable strict access control\",\n          \"Configure encryption\",\n          \"Enable threat detection\",\n          \"Review and fix vulnerabilities\",\n        ],\n        estimatedEffort: \"medium\",\n      });\n    }\n\n    if (directBedrockSecurity.securityScore < 70) {\n      shortTerm.push({\n        id: \"improve-bedrock-security\",\n        priority: \"high\",\n        category: \"configuration\",\n        description: \"Improve direct Bedrock route security configuration\",\n        expectedImpact: \"Enhanced security for direct Bedrock path\",\n        implementationSteps: [\n          \"Review IAM policies\",\n          \"Enable AWS CloudTrail\",\n          \"Configure VPC endpoints\",\n          \"Review and fix vulnerabilities\",\n        ],\n        estimatedEffort: \"medium\",\n      });\n    }\n\n    // Compliance recommendations\n    if (complianceStatus.overall !== \"compliant\") {\n      immediate.push({\n        id: \"fix-compliance-violations\",\n        priority: \"critical\",\n        category: \"compliance\",\n        description:\n          \"Fix compliance violations to meet regulatory requirements\",\n        expectedImpact: \"Avoid legal liability and regulatory fines\",\n        implementationSteps: [\n          \"Review compliance violations\",\n          \"Implement remediation steps\",\n          \"Verify compliance status\",\n          \"Document compliance measures\",\n        ],\n        estimatedEffort: \"high\",\n      });\n    }\n\n    // Long-term recommendations\n    longTerm.push({\n      id: \"implement-continuous-monitoring\",\n      priority: \"medium\",\n      category: \"monitoring\",\n      description: \"Implement continuous security monitoring and alerting\",\n      expectedImpact: \"Proactive threat detection and faster response times\",\n      implementationSteps: [\n        \"Set up automated security scans\",\n        \"Configure real-time alerting\",\n        \"Implement security dashboards\",\n        \"Establish incident response procedures\",\n      ],\n      estimatedEffort: \"high\",\n    });\n\n    return { immediate, shortTerm, longTerm };\n  }\n\n  /**\n   * Get current security metrics\n   */\n  getSecurityMetrics(): typeof this.securityMetrics {\n    return { ...this.securityMetrics };\n  }\n\n  /**\n   * Get monitoring status\n   */\n  isMonitoringActive(): boolean {\n    return this.monitoringActive;\n  }\n\n  /**\n   * Get last assessment time\n   */\n  getLastAssessmentTime(): Date | null {\n    return this.lastAssessment;\n  }\n}\n"],"version":3}
ef3166cee098967e6ad302ac74555051
"use strict";
/**
 * Security Posture Monitor - Comprehensive Security Monitoring for Hybrid Architecture
 *
 * This module implements real-time security posture monitoring for the hybrid routing
 * architecture, tracking security metrics across both MCP and direct Bedrock paths,
 * detecting threats, and providing security recommendations.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityPostureMonitor = void 0;
/**
 * Security Posture Monitor Implementation
 */
class SecurityPostureMonitor {
    config;
    featureFlags;
    auditTrail;
    circuitBreaker;
    gdprValidator;
    providerCompliance;
    directBedrockClient;
    mcpRouter;
    logger;
    // Monitoring state
    monitoringActive = false;
    lastAssessment = null;
    detectedThreats = new Map();
    securityMetrics = {
        totalAssessments: 0,
        threatsDetected: 0,
        threatsMitigated: 0,
        complianceViolations: 0,
    };
    constructor(config, featureFlags, auditTrail, circuitBreaker, gdprValidator, providerCompliance, directBedrockClient, mcpRouter) {
        this.config = this.getDefaultConfig(config);
        this.featureFlags = featureFlags || new AiFeatureFlags();
        this.auditTrail = auditTrail || new AuditTrailSystem();
        this.circuitBreaker = circuitBreaker || new CircuitBreaker();
        this.gdprValidator = gdprValidator || new GDPRHybridComplianceValidator();
        this.providerCompliance =
            providerCompliance || new ProviderAgreementCompliance();
        this.directBedrockClient = directBedrockClient || new DirectBedrockClient();
        this.mcpRouter = mcpRouter || new MCPRouter();
        this.logger = console;
    }
    /**
     * Get default configuration
     */
    getDefaultConfig(config) {
        return {
            assessmentInterval: 300000, // 5 minutes
            threatScanInterval: 60000, // 1 minute
            complianceCheckInterval: 600000, // 10 minutes
            enableContinuousMonitoring: true,
            enableThreatDetection: true,
            enableVulnerabilityScanning: true,
            alertThresholds: {
                criticalSecurityScore: 40,
                warningSecurityScore: 70,
                maxActiveThreats: 5,
            },
            ...config,
        };
    }
    /**
     * Start security posture monitoring
     */
    async startMonitoring() {
        if (this.monitoringActive) {
            this.logger.log("Security posture monitoring already active");
            return;
        }
        this.logger.log("Starting security posture monitoring");
        this.monitoringActive = true;
        // Log monitoring start to audit trail
        await this.auditTrail.logSupportModeEvent("security_monitoring_started", {
            timestamp: new Date(),
            config: this.config,
        }, "system");
        // Perform initial assessment
        await this.assessSecurityPosture();
    }
    /**
     * Stop security posture monitoring
     */
    async stopMonitoring() {
        if (!this.monitoringActive) {
            this.logger.log("Security posture monitoring not active");
            return;
        }
        this.logger.log("Stopping security posture monitoring");
        this.monitoringActive = false;
        // Log monitoring stop to audit trail
        await this.auditTrail.logSupportModeEvent("security_monitoring_stopped", {
            timestamp: new Date(),
            metrics: this.securityMetrics,
        }, "system");
    }
    /**
     * Assess overall security posture
     */
    async assessSecurityPosture() {
        this.logger.log("Assessing security posture for hybrid architecture");
        try {
            // Increment assessment counter
            this.securityMetrics.totalAssessments++;
            // Assess MCP route security
            const mcpSecurity = await this.assessRouteSecurityStatus("mcp");
            // Assess direct Bedrock route security
            const directBedrockSecurity = await this.assessRouteSecurityStatus("direct_bedrock");
            // Scan for active threats
            const threats = await this.scanForThreats();
            // Check compliance status
            const complianceStatus = await this.checkComplianceStatus();
            // Calculate overall security score
            const overallScore = this.calculateOverallSecurityScore(mcpSecurity, directBedrockSecurity, threats, complianceStatus);
            // Determine threat level
            const threatLevel = this.determineThreatLevel(overallScore, threats);
            // Generate recommendations
            const recommendations = await this.generateSecurityRecommendations(mcpSecurity, directBedrockSecurity, threats, complianceStatus);
            const status = {
                overall: {
                    securityScore: overallScore,
                    threatLevel,
                    lastAssessment: new Date(),
                    complianceStatus: complianceStatus.overall,
                },
                routes: {
                    mcp: mcpSecurity,
                    directBedrock: directBedrockSecurity,
                },
                threats: {
                    active: threats.filter((t) => t.status === "active"),
                    mitigated: threats.filter((t) => t.status === "mitigated"),
                    totalDetected: threats.length,
                },
                compliance: complianceStatus.metrics,
                recommendations,
            };
            this.lastAssessment = new Date();
            // Log assessment to audit trail
            await this.auditTrail.logSupportModeEvent("security_assessment_completed", {
                timestamp: new Date(),
                securityScore: overallScore,
                threatLevel,
                activeThreats: threats.filter((t) => t.status === "active").length,
            }, "system");
            return status;
        }
        catch (error) {
            this.logger.error("Security assessment failed:", error);
            // Log failure to audit trail
            await this.auditTrail.logSupportModeEvent("security_assessment_failed", {
                timestamp: new Date(),
                error: error instanceof Error ? error.message : String(error),
            }, "system");
            throw error;
        }
    }
    /**
     * Assess security status for a specific route
     */
    async assessRouteSecurityStatus(route) {
        this.logger.log(`Assessing security status for ${route} route`);
        // Check encryption status
        const encryptionStatus = await this.checkEncryptionStatus(route);
        // Check access control
        const accessControlStatus = await this.checkAccessControlStatus(route);
        // Scan for vulnerabilities
        const vulnerabilities = await this.scanForVulnerabilities(route);
        // Check threat detection
        const threatDetectionEnabled = await this.isThreatDetectionEnabled(route);
        // Calculate route security score
        const securityScore = this.calculateRouteSecurityScore(encryptionStatus, accessControlStatus, vulnerabilities, threatDetectionEnabled);
        return {
            isSecure: securityScore >= 70 && vulnerabilities.length === 0,
            securityScore,
            lastCheck: new Date(),
            vulnerabilities,
            encryptionStatus,
            accessControlStatus,
            threatDetectionEnabled,
        };
    }
    /**
     * Check encryption status for a route
     */
    async checkEncryptionStatus(route) {
        // Check if encryption is enabled for the route
        if (route === "direct_bedrock") {
            // Direct Bedrock uses AWS encryption by default
            return "enabled";
        }
        else {
            // MCP encryption depends on configuration
            const mcpEncryption = await this.featureFlags.getFlag("mcp_encryption_enabled", true);
            return mcpEncryption ? "enabled" : "partial";
        }
    }
    /**
     * Check access control status for a route
     */
    async checkAccessControlStatus(route) {
        // Check access control configuration
        if (route === "direct_bedrock") {
            // Direct Bedrock has strict IAM-based access control
            return "strict";
        }
        else {
            // MCP access control depends on configuration
            const mcpAccessControl = await this.featureFlags.getFlag("mcp_access_control_strict", true);
            return mcpAccessControl ? "strict" : "moderate";
        }
    }
    /**
     * Scan for vulnerabilities in a route
     */
    async scanForVulnerabilities(route) {
        const vulnerabilities = [];
        // Check for common vulnerabilities
        if (route === "mcp") {
            // Check MCP-specific vulnerabilities
            const mcpHealth = await this.mcpRouter.checkHealth();
            if (!mcpHealth.isHealthy) {
                vulnerabilities.push({
                    id: `mcp-health-${Date.now()}`,
                    severity: "medium",
                    description: "MCP router health check failed",
                    component: "mcp-router",
                    discoveredAt: new Date(),
                    patchAvailable: false,
                    remediationSteps: [
                        "Check MCP router configuration",
                        "Verify network connectivity",
                        "Review error logs",
                    ],
                });
            }
        }
        else {
            // Check direct Bedrock vulnerabilities
            const bedrockHealth = await this.directBedrockClient.checkHealth();
            if (!bedrockHealth.isHealthy) {
                vulnerabilities.push({
                    id: `bedrock-health-${Date.now()}`,
                    severity: "medium",
                    description: "Direct Bedrock client health check failed",
                    component: "direct-bedrock-client",
                    discoveredAt: new Date(),
                    patchAvailable: false,
                    remediationSteps: [
                        "Check AWS credentials",
                        "Verify Bedrock service availability",
                        "Review circuit breaker status",
                    ],
                });
            }
        }
        return vulnerabilities;
    }
    /**
     * Check if threat detection is enabled for a route
     */
    async isThreatDetectionEnabled(route) {
        return this.config.enableThreatDetection;
    }
    /**
     * Calculate security score for a route
     */
    calculateRouteSecurityScore(encryptionStatus, accessControlStatus, vulnerabilities, threatDetectionEnabled) {
        let score = 100;
        // Deduct points for encryption issues
        if (encryptionStatus === "partial")
            score -= 15;
        if (encryptionStatus === "disabled")
            score -= 40;
        // Deduct points for access control issues
        if (accessControlStatus === "moderate")
            score -= 10;
        if (accessControlStatus === "weak")
            score -= 30;
        // Deduct points for vulnerabilities
        vulnerabilities.forEach((vuln) => {
            switch (vuln.severity) {
                case "critical":
                    score -= 20;
                    break;
                case "high":
                    score -= 15;
                    break;
                case "medium":
                    score -= 10;
                    break;
                case "low":
                    score -= 5;
                    break;
            }
        });
        // Deduct points if threat detection is disabled
        if (!threatDetectionEnabled)
            score -= 10;
        return Math.max(0, score);
    }
    /**
     * Scan for active security threats
     */
    async scanForThreats() {
        const threats = [];
        // Check for unauthorized access attempts
        const unauthorizedAccess = await this.detectUnauthorizedAccess();
        if (unauthorizedAccess) {
            threats.push(unauthorizedAccess);
        }
        // Check for compliance violations
        const complianceViolations = await this.detectComplianceViolations();
        threats.push(...complianceViolations);
        // Check for misconfiguration
        const misconfigurations = await this.detectMisconfigurations();
        threats.push(...misconfigurations);
        // Update threat metrics
        this.securityMetrics.threatsDetected += threats.filter((t) => t.status === "active").length;
        return threats;
    }
    /**
     * Detect unauthorized access attempts
     */
    async detectUnauthorizedAccess() {
        // Check circuit breaker for repeated failures (potential attack)
        const circuitBreakerOpen = this.circuitBreaker.isOpen("bedrock");
        if (circuitBreakerOpen) {
            return {
                id: `unauthorized-access-${Date.now()}`,
                type: "unauthorized_access",
                severity: "high",
                description: "Circuit breaker open - potential unauthorized access attempts detected",
                detectedAt: new Date(),
                affectedRoute: "direct_bedrock",
                affectedComponents: ["circuit-breaker", "direct-bedrock-client"],
                status: "active",
                mitigationSteps: [
                    "Review access logs",
                    "Check for suspicious IP addresses",
                    "Verify authentication mechanisms",
                    "Reset circuit breaker if false positive",
                ],
                estimatedImpact: "Service degradation, potential security breach",
            };
        }
        return null;
    }
    /**
     * Detect compliance violations
     */
    async detectComplianceViolations() {
        const threats = [];
        // Check GDPR compliance
        const gdprCompliant = await this.gdprValidator.validateHybridRouting({
            route: "direct_bedrock",
            operation: "security_scan",
            dataTypes: ["system_metrics"],
            userConsent: true,
        });
        if (!gdprCompliant.isCompliant) {
            threats.push({
                id: `gdpr-violation-${Date.now()}`,
                type: "compliance_violation",
                severity: "critical",
                description: `GDPR compliance violation detected: ${gdprCompliant.violations.join(", ")}`,
                detectedAt: new Date(),
                affectedRoute: "both",
                affectedComponents: ["gdpr-validator", "data-processing"],
                status: "active",
                mitigationSteps: gdprCompliant.recommendations,
                estimatedImpact: "Legal liability, regulatory fines",
            });
            this.securityMetrics.complianceViolations++;
        }
        return threats;
    }
    /**
     * Detect system misconfigurations
     */
    async detectMisconfigurations() {
        const threats = [];
        // Check feature flag configuration
        const flagValidation = await this.featureFlags.validateAllFlags();
        if (!flagValidation.isValid) {
            threats.push({
                id: `misconfiguration-${Date.now()}`,
                type: "misconfiguration",
                severity: "medium",
                description: `Feature flag misconfiguration detected: ${flagValidation.errors.join(", ")}`,
                detectedAt: new Date(),
                affectedRoute: "both",
                affectedComponents: ["feature-flags"],
                status: "active",
                mitigationSteps: [
                    "Review feature flag configuration",
                    "Fix validation errors",
                    "Test configuration changes",
                ],
                estimatedImpact: "System instability, unexpected behavior",
            });
        }
        return threats;
    }
    /**
     * Check compliance status across all areas
     */
    async checkComplianceStatus() {
        // Check GDPR compliance
        const gdprMetrics = await this.checkGDPRCompliance();
        // Check data residency compliance
        const dataResidencyMetrics = await this.checkDataResidencyCompliance();
        // Check audit trail compliance
        const auditTrailMetrics = await this.checkAuditTrailCompliance();
        // Determine overall compliance status
        const allCompliant = gdprMetrics.isCompliant &&
            dataResidencyMetrics.isCompliant &&
            auditTrailMetrics.isCompliant;
        const anyNonCompliant = !gdprMetrics.isCompliant ||
            !dataResidencyMetrics.isCompliant ||
            !auditTrailMetrics.isCompliant;
        const overall = allCompliant
            ? "compliant"
            : anyNonCompliant
                ? "non-compliant"
                : "warning";
        return {
            overall,
            metrics: {
                gdpr: gdprMetrics,
                dataResidency: dataResidencyMetrics,
                auditTrail: auditTrailMetrics,
            },
        };
    }
    /**
     * Check GDPR compliance
     */
    async checkGDPRCompliance() {
        const validation = await this.gdprValidator.validateHybridRouting({
            route: "both",
            operation: "compliance_check",
            dataTypes: ["all"],
            userConsent: true,
        });
        const violations = validation.violations.map((v, index) => ({
            id: `gdpr-violation-${index}`,
            type: "gdpr",
            severity: "high",
            description: v,
            detectedAt: new Date(),
            affectedData: ["user_data", "system_data"],
            remediationRequired: true,
            remediationSteps: validation.recommendations,
        }));
        return {
            isCompliant: validation.isCompliant,
            complianceScore: validation.isCompliant ? 100 : 50,
            violations,
            lastAudit: new Date(),
            nextAuditDue: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days
        };
    }
    /**
     * Check data residency compliance
     */
    async checkDataResidencyCompliance() {
        // Check if data residency requirements are met
        const euRegion = process.env.AWS_REGION === "eu-central-1";
        return {
            isCompliant: euRegion,
            complianceScore: euRegion ? 100 : 0,
            violations: euRegion
                ? []
                : [
                    {
                        id: "data-residency-violation",
                        type: "data_residency",
                        severity: "critical",
                        description: "Data not stored in EU region",
                        detectedAt: new Date(),
                        affectedData: ["all"],
                        remediationRequired: true,
                        remediationSteps: [
                            "Configure AWS region to eu-central-1",
                            "Migrate existing data to EU region",
                            "Update application configuration",
                        ],
                    },
                ],
            lastAudit: new Date(),
            nextAuditDue: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // 90 days
        };
    }
    /**
     * Check audit trail compliance
     */
    async checkAuditTrailCompliance() {
        // Check if audit trail is properly configured
        const auditTrailEnabled = true; // Audit trail is always enabled
        return {
            isCompliant: auditTrailEnabled,
            complianceScore: auditTrailEnabled ? 100 : 0,
            violations: [],
            lastAudit: new Date(),
            nextAuditDue: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days
        };
    }
    /**
     * Calculate overall security score
     */
    calculateOverallSecurityScore(mcpSecurity, directBedrockSecurity, threats, complianceStatus) {
        // Weight factors
        const routeWeight = 0.4; // 40% for route security
        const threatWeight = 0.3; // 30% for threat status
        const complianceWeight = 0.3; // 30% for compliance
        // Calculate route score (average of both routes)
        const routeScore = (mcpSecurity.securityScore + directBedrockSecurity.securityScore) / 2;
        // Calculate threat score
        const activeThreats = threats.filter((t) => t.status === "active");
        const criticalThreats = activeThreats.filter((t) => t.severity === "critical").length;
        const highThreats = activeThreats.filter((t) => t.severity === "high").length;
        const threatScore = Math.max(0, 100 -
            criticalThreats * 30 -
            highThreats * 15 -
            (activeThreats.length - criticalThreats - highThreats) * 5);
        // Calculate compliance score
        const complianceScore = complianceStatus.overall === "compliant"
            ? 100
            : complianceStatus.overall === "warning"
                ? 70
                : 40;
        // Calculate weighted overall score
        const overallScore = routeScore * routeWeight +
            threatScore * threatWeight +
            complianceScore * complianceWeight;
        return Math.round(overallScore);
    }
    /**
     * Determine threat level based on score and threats
     */
    determineThreatLevel(securityScore, threats) {
        const activeThreats = threats.filter((t) => t.status === "active");
        const criticalThreats = activeThreats.filter((t) => t.severity === "critical");
        if (criticalThreats.length > 0 || securityScore < 40) {
            return "critical";
        }
        else if (securityScore < 60 || activeThreats.length > 3) {
            return "high";
        }
        else if (securityScore < 80 || activeThreats.length > 0) {
            return "medium";
        }
        else {
            return "low";
        }
    }
    /**
     * Generate security recommendations
     */
    async generateSecurityRecommendations(mcpSecurity, directBedrockSecurity, threats, complianceStatus) {
        const immediate = [];
        const shortTerm = [];
        const longTerm = [];
        // Immediate recommendations for critical threats
        const criticalThreats = threats.filter((t) => t.status === "active" && t.severity === "critical");
        if (criticalThreats.length > 0) {
            immediate.push({
                id: "mitigate-critical-threats",
                priority: "critical",
                category: "monitoring",
                description: `Mitigate ${criticalThreats.length} critical security threats immediately`,
                expectedImpact: "Prevent security breaches and data loss",
                implementationSteps: criticalThreats.flatMap((t) => t.mitigationSteps),
                estimatedEffort: "high",
            });
        }
        // Recommendations for route security
        if (mcpSecurity.securityScore < 70) {
            shortTerm.push({
                id: "improve-mcp-security",
                priority: "high",
                category: "configuration",
                description: "Improve MCP route security configuration",
                expectedImpact: "Enhanced security for MCP routing path",
                implementationSteps: [
                    "Enable strict access control",
                    "Configure encryption",
                    "Enable threat detection",
                    "Review and fix vulnerabilities",
                ],
                estimatedEffort: "medium",
            });
        }
        if (directBedrockSecurity.securityScore < 70) {
            shortTerm.push({
                id: "improve-bedrock-security",
                priority: "high",
                category: "configuration",
                description: "Improve direct Bedrock route security configuration",
                expectedImpact: "Enhanced security for direct Bedrock path",
                implementationSteps: [
                    "Review IAM policies",
                    "Enable AWS CloudTrail",
                    "Configure VPC endpoints",
                    "Review and fix vulnerabilities",
                ],
                estimatedEffort: "medium",
            });
        }
        // Compliance recommendations
        if (complianceStatus.overall !== "compliant") {
            immediate.push({
                id: "fix-compliance-violations",
                priority: "critical",
                category: "compliance",
                description: "Fix compliance violations to meet regulatory requirements",
                expectedImpact: "Avoid legal liability and regulatory fines",
                implementationSteps: [
                    "Review compliance violations",
                    "Implement remediation steps",
                    "Verify compliance status",
                    "Document compliance measures",
                ],
                estimatedEffort: "high",
            });
        }
        // Long-term recommendations
        longTerm.push({
            id: "implement-continuous-monitoring",
            priority: "medium",
            category: "monitoring",
            description: "Implement continuous security monitoring and alerting",
            expectedImpact: "Proactive threat detection and faster response times",
            implementationSteps: [
                "Set up automated security scans",
                "Configure real-time alerting",
                "Implement security dashboards",
                "Establish incident response procedures",
            ],
            estimatedEffort: "high",
        });
        return { immediate, shortTerm, longTerm };
    }
    /**
     * Get current security metrics
     */
    getSecurityMetrics() {
        return { ...this.securityMetrics };
    }
    /**
     * Get monitoring status
     */
    isMonitoringActive() {
        return this.monitoringActive;
    }
    /**
     * Get last assessment time
     */
    getLastAssessmentTime() {
        return this.lastAssessment;
    }
}
exports.SecurityPostureMonitor = SecurityPostureMonitor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"file":"/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/test-mocks.ts","mappings":"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","names":[],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/test-mocks.ts"],"sourcesContent":["/**\n * Test Mocks for Unified AI API\n *\n * Provides complete mock implementations for all dependencies\n */\n\nimport { jest } from \"@jest/globals\";\nimport { Provider } from \"./types\";\n\n// Monitor Interface\nexport interface AiMonitor {\n  recordError(err: Error, meta?: any): Promise<void>;\n  recordSuccess(meta?: any): Promise<void>;\n  recordAttempt?(\n    provider: string,\n    latencyMs: number,\n    success: boolean\n  ): Promise<void>;\n  recordCacheHit?(): Promise<void>;\n  recordLatency(latencyMs: number, meta?: any): Promise<void>;\n  recordHealthCheck(\n    provider: string,\n    success: boolean,\n    latency: number\n  ): Promise<void>;\n  getHealth?(): Promise<any>;\n  getProviderMetrics(provider: string): Promise<any>;\n  shutdown(): Promise<void>;\n}\n\n// Cache Interface\nexport interface AiCache<T = any> {\n  get(key: string): Promise<T | undefined>;\n  set(key: string, value: T, ttlSeconds?: number): Promise<void>;\n  clear(): Promise<void>;\n}\n\n// Circuit Breaker Interface\nexport interface CircuitBreaker {\n  getState(): \"closed\" | \"open\" | \"half-open\";\n  isOpen(): boolean;\n  recordSuccess(): void;\n  recordFailure(): void;\n  reset(): void;\n  execute<T>(operation: () => Promise<T>): Promise<T>;\n}\n\n// Feature Flags Interface\nexport interface FeatureFlags {\n  isProviderEnabled(provider: string): Promise<boolean>;\n  setProviderEnabled(provider: string, enabled: boolean): Promise<void>;\n}\n\n// Provider Adapter Interface\nexport interface ProviderAdapter {\n  name: Provider;\n  generateResponse(request: any): Promise<any>;\n  testConnection?(): Promise<{ success: boolean }>;\n  healthCheck?(): Promise<void>;\n}\n\n/**\n * Create monitor mock\n */\nexport const createMonitorMock = (): AiMonitor => ({\n  recordError: jest.fn().mockResolvedValue(void 0),\n  recordSuccess: jest.fn().mockResolvedValue(void 0),\n  recordAttempt: jest.fn().mockResolvedValue(void 0),\n  recordCacheHit: jest.fn().mockResolvedValue(void 0),\n  recordLatency: jest.fn().mockResolvedValue(void 0),\n  recordHealthCheck: jest.fn().mockResolvedValue(void 0),\n  getHealth: jest.fn().mockResolvedValue({ providers: [] }),\n  getProviderMetrics: jest.fn().mockResolvedValue({\n    averageLatency: 500,\n    errorRate: 0.02,\n  }),\n  shutdown: jest.fn().mockResolvedValue(void 0),\n});\n\n/**\n * Create cache mock\n */\nexport const createCacheMock = (): AiCache => ({\n  get: jest.fn().mockResolvedValue(undefined),\n  set: jest.fn().mockResolvedValue(void 0),\n  clear: jest.fn().mockResolvedValue(void 0),\n});\n\n/**\n * Create circuit breaker mock\n */\nexport const createCircuitBreakerMock = (): any => ({\n  getState: jest.fn().mockReturnValue(\"closed\"),\n  isOpen: jest.fn().mockReturnValue(false),\n  recordSuccess: jest.fn(),\n  recordFailure: jest.fn(),\n  reset: jest.fn(),\n  execute: jest.fn().mockImplementation(async (operation) => {\n    return await operation();\n  }),\n});\n\n/**\n * Create feature flags mock\n */\nexport const createFeatureFlagsMock = (): FeatureFlags => ({\n  isProviderEnabled: jest.fn().mockResolvedValue(true),\n  setProviderEnabled: jest.fn().mockResolvedValue(void 0),\n});\n\n/**\n * Create provider adapter mock\n */\nexport const createProviderAdapterMock = (\n  provider: Provider\n): ProviderAdapter => ({\n  name: provider,\n  generateResponse: jest.fn().mockResolvedValue({\n    content: `Mock response from ${provider}`,\n    provider,\n    requestId: \"mock-request-id\",\n    processingTime: 500,\n    success: true,\n  }),\n  testConnection: jest.fn().mockResolvedValue({ success: true }),\n  healthCheck: jest.fn().mockResolvedValue(void 0),\n});\n\n/**\n * Create multi-provider integration mock\n */\nexport const createMultiProviderMock = () => ({\n  routeRequest: jest.fn().mockResolvedValue({\n    content: \"Mock multi-provider response\",\n    provider: \"bedrock\" as Provider,\n    requestId: \"mock-request-id\",\n    processingTime: 500,\n    success: true,\n  }),\n  getProviderHealth: jest.fn().mockResolvedValue([\n    {\n      provider: \"bedrock\" as Provider,\n      status: \"healthy\" as const,\n      latency: 500,\n      errorRate: 0.01,\n      lastCheck: new Date(),\n      circuitBreakerState: \"closed\" as const,\n    },\n  ]),\n  updateProviderConfig: jest.fn(),\n});\n\n/**\n * Create router gateway mock\n */\nexport const createRouterGatewayMock = () => ({\n  execute: jest.fn().mockResolvedValue({\n    provider: \"bedrock\" as Provider,\n    modelId: \"claude-3-5-sonnet\",\n    text: \"Mock router response\",\n    latencyMs: 500,\n    costEuro: 0.01,\n    success: true,\n    requestId: \"mock-request-id\",\n  }),\n  getAvailableModels: jest.fn().mockReturnValue([]),\n  updateModelCapability: jest.fn(),\n});\n\n/**\n * Setup all mocks for unified AI API tests\n */\nexport const setupUnifiedAiMocks = () => {\n  const monitor = createMonitorMock();\n  const cache = createCacheMock();\n  const circuitBreakers = new Map<Provider, CircuitBreaker>();\n  const featureFlags = createFeatureFlagsMock();\n  const multiProvider = createMultiProviderMock();\n  const router = createRouterGatewayMock();\n\n  // Setup circuit breakers for each provider\n  ([\"bedrock\", \"google\", \"meta\"] as Provider[]).forEach((provider) => {\n    circuitBreakers.set(provider, createCircuitBreakerMock());\n  });\n\n  return {\n    monitor,\n    cache,\n    circuitBreakers,\n    featureFlags,\n    multiProvider,\n    router,\n  };\n};\n\n/**\n * Mock timeout promise for testing\n */\nexport const createTimeoutMock = (timeoutMs: number) => {\n  return new Promise((_, reject) => {\n    setTimeout(() => {\n      reject(new Error(`Request timeout after ${timeoutMs}ms`));\n    }, timeoutMs);\n  });\n};\n"],"version":3}
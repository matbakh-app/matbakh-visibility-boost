63a31f951997f78c2b5eef5eb537ffe9
"use strict";
/**
 * Test Mocks for Unified AI API
 *
 * Provides complete mock implementations for all dependencies
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTimeoutMock = exports.setupUnifiedAiMocks = exports.createRouterGatewayMock = exports.createMultiProviderMock = exports.createProviderAdapterMock = exports.createFeatureFlagsMock = exports.createCircuitBreakerMock = exports.createCacheMock = exports.createMonitorMock = void 0;
const globals_1 = require("@jest/globals");
/**
 * Create monitor mock
 */
const createMonitorMock = () => ({
    recordError: globals_1.jest.fn().mockResolvedValue(void 0),
    recordSuccess: globals_1.jest.fn().mockResolvedValue(void 0),
    recordAttempt: globals_1.jest.fn().mockResolvedValue(void 0),
    recordCacheHit: globals_1.jest.fn().mockResolvedValue(void 0),
    recordLatency: globals_1.jest.fn().mockResolvedValue(void 0),
    recordHealthCheck: globals_1.jest.fn().mockResolvedValue(void 0),
    getHealth: globals_1.jest.fn().mockResolvedValue({ providers: [] }),
    getProviderMetrics: globals_1.jest.fn().mockResolvedValue({
        averageLatency: 500,
        errorRate: 0.02,
    }),
    shutdown: globals_1.jest.fn().mockResolvedValue(void 0),
});
exports.createMonitorMock = createMonitorMock;
/**
 * Create cache mock
 */
const createCacheMock = () => ({
    get: globals_1.jest.fn().mockResolvedValue(undefined),
    set: globals_1.jest.fn().mockResolvedValue(void 0),
    clear: globals_1.jest.fn().mockResolvedValue(void 0),
});
exports.createCacheMock = createCacheMock;
/**
 * Create circuit breaker mock
 */
const createCircuitBreakerMock = () => ({
    getState: globals_1.jest.fn().mockReturnValue("closed"),
    isOpen: globals_1.jest.fn().mockReturnValue(false),
    recordSuccess: globals_1.jest.fn(),
    recordFailure: globals_1.jest.fn(),
    reset: globals_1.jest.fn(),
    execute: globals_1.jest.fn().mockImplementation(async (operation) => {
        return await operation();
    }),
});
exports.createCircuitBreakerMock = createCircuitBreakerMock;
/**
 * Create feature flags mock
 */
const createFeatureFlagsMock = () => ({
    isProviderEnabled: globals_1.jest.fn().mockResolvedValue(true),
    setProviderEnabled: globals_1.jest.fn().mockResolvedValue(void 0),
});
exports.createFeatureFlagsMock = createFeatureFlagsMock;
/**
 * Create provider adapter mock
 */
const createProviderAdapterMock = (provider) => ({
    name: provider,
    generateResponse: globals_1.jest.fn().mockResolvedValue({
        content: `Mock response from ${provider}`,
        provider,
        requestId: "mock-request-id",
        processingTime: 500,
        success: true,
    }),
    testConnection: globals_1.jest.fn().mockResolvedValue({ success: true }),
    healthCheck: globals_1.jest.fn().mockResolvedValue(void 0),
});
exports.createProviderAdapterMock = createProviderAdapterMock;
/**
 * Create multi-provider integration mock
 */
const createMultiProviderMock = () => ({
    routeRequest: globals_1.jest.fn().mockResolvedValue({
        content: "Mock multi-provider response",
        provider: "bedrock",
        requestId: "mock-request-id",
        processingTime: 500,
        success: true,
    }),
    getProviderHealth: globals_1.jest.fn().mockResolvedValue([
        {
            provider: "bedrock",
            status: "healthy",
            latency: 500,
            errorRate: 0.01,
            lastCheck: new Date(),
            circuitBreakerState: "closed",
        },
    ]),
    updateProviderConfig: globals_1.jest.fn(),
});
exports.createMultiProviderMock = createMultiProviderMock;
/**
 * Create router gateway mock
 */
const createRouterGatewayMock = () => ({
    execute: globals_1.jest.fn().mockResolvedValue({
        provider: "bedrock",
        modelId: "claude-3-5-sonnet",
        text: "Mock router response",
        latencyMs: 500,
        costEuro: 0.01,
        success: true,
        requestId: "mock-request-id",
    }),
    getAvailableModels: globals_1.jest.fn().mockReturnValue([]),
    updateModelCapability: globals_1.jest.fn(),
});
exports.createRouterGatewayMock = createRouterGatewayMock;
/**
 * Setup all mocks for unified AI API tests
 */
const setupUnifiedAiMocks = () => {
    const monitor = (0, exports.createMonitorMock)();
    const cache = (0, exports.createCacheMock)();
    const circuitBreakers = new Map();
    const featureFlags = (0, exports.createFeatureFlagsMock)();
    const multiProvider = (0, exports.createMultiProviderMock)();
    const router = (0, exports.createRouterGatewayMock)();
    // Setup circuit breakers for each provider
    ["bedrock", "google", "meta"].forEach((provider) => {
        circuitBreakers.set(provider, (0, exports.createCircuitBreakerMock)());
    });
    return {
        monitor,
        cache,
        circuitBreakers,
        featureFlags,
        multiProvider,
        router,
    };
};
exports.setupUnifiedAiMocks = setupUnifiedAiMocks;
/**
 * Mock timeout promise for testing
 */
const createTimeoutMock = (timeoutMs) => {
    return new Promise((_, reject) => {
        setTimeout(() => {
            reject(new Error(`Request timeout after ${timeoutMs}ms`));
        }, timeoutMs);
    });
};
exports.createTimeoutMock = createTimeoutMock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
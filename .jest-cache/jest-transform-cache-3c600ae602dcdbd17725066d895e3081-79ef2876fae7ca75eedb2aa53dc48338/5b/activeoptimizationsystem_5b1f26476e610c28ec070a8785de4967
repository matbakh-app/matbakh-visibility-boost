258e401184853c2253ce3e05c106f25d
"use strict";

/**
 * Active Optimization System
 *
 * Integrates Evidently experiments with bandit optimization to create
 * an active, self-optimizing AI model routing system.
 *
 * Features:
 * - Automatic experiment lifecycle management
 * - Real-time bandit optimization
 * - Performance monitoring and alerting
 * - Auto-scaling based on traffic patterns
 */
/* istanbul ignore next */
function cov_1axj3s0gqi() {
  var path = "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/active-optimization-system.ts";
  var hash = "a18420ebb5c29ed6351a9fe3990c3b0935ed96f2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/active-optimization-system.ts",
    statementMap: {
      "0": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 14,
          column: 62
        }
      },
      "1": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 15,
          column: 42
        }
      },
      "2": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 16,
          column: 54
        }
      },
      "3": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 17,
          column: 68
        }
      },
      "4": {
        start: {
          line: 18,
          column: 0
        },
        end: {
          line: 18,
          column: 64
        }
      },
      "5": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 32
        }
      },
      "6": {
        start: {
          line: 20,
          column: 28
        },
        end: {
          line: 20,
          column: 58
        }
      },
      "7": {
        start: {
          line: 21,
          column: 27
        },
        end: {
          line: 21,
          column: 56
        }
      },
      "8": {
        start: {
          line: 22,
          column: 32
        },
        end: {
          line: 22,
          column: 66
        }
      },
      "9": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 31
        }
      },
      "10": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 31
        }
      },
      "11": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 31,
          column: 25
        }
      },
      "12": {
        start: {
          line: 33,
          column: 23
        },
        end: {
          line: 33,
          column: 63
        }
      },
      "13": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 141
        }
      },
      "14": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 40,
          column: 11
        }
      },
      "15": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 59,
          column: 10
        }
      },
      "16": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 95,
          column: 11
        }
      },
      "17": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 69,
          column: 13
        }
      },
      "18": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 67,
          column: 71
        }
      },
      "19": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 68,
          column: 23
        }
      },
      "20": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 94,
          column: 13
        }
      },
      "21": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 65
        }
      },
      "22": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 76,
          column: 17
        }
      },
      "23": {
        start: {
          line: 75,
          column: 20
        },
        end: {
          line: 75,
          column: 57
        }
      },
      "24": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 78,
          column: 45
        }
      },
      "25": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 82,
          column: 17
        }
      },
      "26": {
        start: {
          line: 81,
          column: 20
        },
        end: {
          line: 81,
          column: 54
        }
      },
      "27": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 38
        }
      },
      "28": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 88,
          column: 19
        }
      },
      "29": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 89,
          column: 79
        }
      },
      "30": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 77
        }
      },
      "31": {
        start: {
          line: 93,
          column: 16
        },
        end: {
          line: 93,
          column: 28
        }
      },
      "32": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 129,
          column: 11
        }
      },
      "33": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 104,
          column: 13
        }
      },
      "34": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 103,
          column: 23
        }
      },
      "35": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 109,
          column: 13
        }
      },
      "36": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 107,
          column: 57
        }
      },
      "37": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 108,
          column: 54
        }
      },
      "38": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 114,
          column: 13
        }
      },
      "39": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 62
        }
      },
      "40": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 113,
          column: 59
        }
      },
      "41": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 121,
          column: 13
        }
      },
      "42": {
        start: {
          line: 117,
          column: 42
        },
        end: {
          line: 117,
          column: 94
        }
      },
      "43": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 120,
          column: 17
        }
      },
      "44": {
        start: {
          line: 119,
          column: 20
        },
        end: {
          line: 119,
          column: 99
        }
      },
      "45": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 35
        }
      },
      "46": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 127,
          column: 15
        }
      },
      "47": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 62
        }
      },
      "48": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 152,
          column: 11
        }
      },
      "49": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 151,
          column: 13
        }
      },
      "50": {
        start: {
          line: 138,
          column: 31
        },
        end: {
          line: 138,
          column: 90
        }
      },
      "51": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 140,
          column: 45
        }
      },
      "52": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 141,
          column: 30
        }
      },
      "53": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 144,
          column: 72
        }
      },
      "54": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 150,
          column: 18
        }
      },
      "55": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 170,
          column: 11
        }
      },
      "56": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 169,
          column: 13
        }
      },
      "57": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 161,
          column: 152
        }
      },
      "58": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 163,
          column: 69
        }
      },
      "59": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 165,
          column: 49
        }
      },
      "60": {
        start: {
          line: 168,
          column: 16
        },
        end: {
          line: 168,
          column: 66
        }
      },
      "61": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 47
        }
      },
      "62": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 47
        }
      },
      "63": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 190,
          column: 11
        }
      },
      "64": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 46
        }
      },
      "65": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 239,
          column: 11
        }
      },
      "66": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 238,
          column: 13
        }
      },
      "67": {
        start: {
          line: 198,
          column: 57
        },
        end: {
          line: 201,
          column: 18
        }
      },
      "68": {
        start: {
          line: 202,
          column: 35
        },
        end: {
          line: 210,
          column: 17
        }
      },
      "69": {
        start: {
          line: 211,
          column: 37
        },
        end: {
          line: 215,
          column: 35
        }
      },
      "70": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 226,
          column: 18
        }
      },
      "71": {
        start: {
          line: 229,
          column: 16
        },
        end: {
          line: 237,
          column: 18
        }
      },
      "72": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 276,
          column: 11
        }
      },
      "73": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 275,
          column: 13
        }
      },
      "74": {
        start: {
          line: 248,
          column: 42
        },
        end: {
          line: 248,
          column: 107
        }
      },
      "75": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 249,
          column: 83
        }
      },
      "76": {
        start: {
          line: 250,
          column: 16
        },
        end: {
          line: 250,
          column: 85
        }
      },
      "77": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 258,
          column: 19
        }
      },
      "78": {
        start: {
          line: 260,
          column: 41
        },
        end: {
          line: 260,
          column: 103
        }
      },
      "79": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 82
        }
      },
      "80": {
        start: {
          line: 262,
          column: 16
        },
        end: {
          line: 262,
          column: 84
        }
      },
      "81": {
        start: {
          line: 263,
          column: 16
        },
        end: {
          line: 270,
          column: 19
        }
      },
      "82": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 271,
          column: 72
        }
      },
      "83": {
        start: {
          line: 274,
          column: 16
        },
        end: {
          line: 274,
          column: 77
        }
      },
      "84": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 284,
          column: 28
        }
      },
      "85": {
        start: {
          line: 282,
          column: 54
        },
        end: {
          line: 284,
          column: 10
        }
      },
      "86": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 283,
          column: 46
        }
      },
      "87": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 292,
          column: 63
        }
      },
      "88": {
        start: {
          line: 290,
          column: 59
        },
        end: {
          line: 292,
          column: 10
        }
      },
      "89": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 49
        }
      },
      "90": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 328,
          column: 11
        }
      },
      "91": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 327,
          column: 13
        }
      },
      "92": {
        start: {
          line: 300,
          column: 16
        },
        end: {
          line: 300,
          column: 61
        }
      },
      "93": {
        start: {
          line: 302,
          column: 16
        },
        end: {
          line: 302,
          column: 49
        }
      },
      "94": {
        start: {
          line: 304,
          column: 16
        },
        end: {
          line: 304,
          column: 55
        }
      },
      "95": {
        start: {
          line: 306,
          column: 40
        },
        end: {
          line: 306,
          column: 93
        }
      },
      "96": {
        start: {
          line: 307,
          column: 16
        },
        end: {
          line: 307,
          column: 89
        }
      },
      "97": {
        start: {
          line: 307,
          column: 74
        },
        end: {
          line: 307,
          column: 87
        }
      },
      "98": {
        start: {
          line: 309,
          column: 16
        },
        end: {
          line: 309,
          column: 67
        }
      },
      "99": {
        start: {
          line: 311,
          column: 16
        },
        end: {
          line: 313,
          column: 17
        }
      },
      "100": {
        start: {
          line: 312,
          column: 20
        },
        end: {
          line: 312,
          column: 56
        }
      },
      "101": {
        start: {
          line: 314,
          column: 16
        },
        end: {
          line: 314,
          column: 59
        }
      },
      "102": {
        start: {
          line: 315,
          column: 16
        },
        end: {
          line: 322,
          column: 19
        }
      },
      "103": {
        start: {
          line: 325,
          column: 16
        },
        end: {
          line: 325,
          column: 69
        }
      },
      "104": {
        start: {
          line: 326,
          column: 16
        },
        end: {
          line: 326,
          column: 52
        }
      },
      "105": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 361,
          column: 11
        }
      },
      "106": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 360,
          column: 13
        }
      },
      "107": {
        start: {
          line: 337,
          column: 42
        },
        end: {
          line: 337,
          column: 94
        }
      },
      "108": {
        start: {
          line: 338,
          column: 16
        },
        end: {
          line: 338,
          column: 74
        }
      },
      "109": {
        start: {
          line: 340,
          column: 36
        },
        end: {
          line: 340,
          column: 73
        }
      },
      "110": {
        start: {
          line: 341,
          column: 32
        },
        end: {
          line: 345,
          column: 66
        }
      },
      "111": {
        start: {
          line: 342,
          column: 20
        },
        end: {
          line: 344,
          column: 31
        }
      },
      "112": {
        start: {
          line: 346,
          column: 16
        },
        end: {
          line: 352,
          column: 18
        }
      },
      "113": {
        start: {
          line: 354,
          column: 31
        },
        end: {
          line: 354,
          column: 59
        }
      },
      "114": {
        start: {
          line: 355,
          column: 16
        },
        end: {
          line: 355,
          column: 58
        }
      },
      "115": {
        start: {
          line: 358,
          column: 16
        },
        end: {
          line: 358,
          column: 73
        }
      },
      "116": {
        start: {
          line: 359,
          column: 16
        },
        end: {
          line: 359,
          column: 52
        }
      },
      "117": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 394,
          column: 11
        }
      },
      "118": {
        start: {
          line: 368,
          column: 46
        },
        end: {
          line: 368,
          column: 57
        }
      },
      "119": {
        start: {
          line: 369,
          column: 27
        },
        end: {
          line: 369,
          column: 29
        }
      },
      "120": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 373,
          column: 13
        }
      },
      "121": {
        start: {
          line: 372,
          column: 16
        },
        end: {
          line: 372,
          column: 108
        }
      },
      "122": {
        start: {
          line: 375,
          column: 12
        },
        end: {
          line: 377,
          column: 13
        }
      },
      "123": {
        start: {
          line: 376,
          column: 16
        },
        end: {
          line: 376,
          column: 99
        }
      },
      "124": {
        start: {
          line: 379,
          column: 32
        },
        end: {
          line: 379,
          column: 69
        }
      },
      "125": {
        start: {
          line: 380,
          column: 34
        },
        end: {
          line: 380,
          column: 55
        }
      },
      "126": {
        start: {
          line: 381,
          column: 12
        },
        end: {
          line: 384,
          column: 13
        }
      },
      "127": {
        start: {
          line: 383,
          column: 16
        },
        end: {
          line: 383,
          column: 148
        }
      },
      "128": {
        start: {
          line: 386,
          column: 12
        },
        end: {
          line: 393,
          column: 13
        }
      },
      "129": {
        start: {
          line: 387,
          column: 16
        },
        end: {
          line: 391,
          column: 19
        }
      },
      "130": {
        start: {
          line: 392,
          column: 16
        },
        end: {
          line: 392,
          column: 76
        }
      },
      "131": {
        start: {
          line: 400,
          column: 8
        },
        end: {
          line: 427,
          column: 11
        }
      },
      "132": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 426,
          column: 13
        }
      },
      "133": {
        start: {
          line: 402,
          column: 42
        },
        end: {
          line: 402,
          column: 94
        }
      },
      "134": {
        start: {
          line: 403,
          column: 16
        },
        end: {
          line: 422,
          column: 17
        }
      },
      "135": {
        start: {
          line: 404,
          column: 35
        },
        end: {
          line: 404,
          column: 104
        }
      },
      "136": {
        start: {
          line: 405,
          column: 20
        },
        end: {
          line: 421,
          column: 21
        }
      },
      "137": {
        start: {
          line: 408,
          column: 24
        },
        end: {
          line: 420,
          column: 25
        }
      },
      "138": {
        start: {
          line: 409,
          column: 28
        },
        end: {
          line: 409,
          column: 163
        }
      },
      "139": {
        start: {
          line: 410,
          column: 28
        },
        end: {
          line: 419,
          column: 31
        }
      },
      "140": {
        start: {
          line: 425,
          column: 16
        },
        end: {
          line: 425,
          column: 79
        }
      },
      "141": {
        start: {
          line: 433,
          column: 8
        },
        end: {
          line: 463,
          column: 11
        }
      },
      "142": {
        start: {
          line: 434,
          column: 37
        },
        end: {
          line: 434,
          column: 89
        }
      },
      "143": {
        start: {
          line: 434,
          column: 67
        },
        end: {
          line: 434,
          column: 88
        }
      },
      "144": {
        start: {
          line: 435,
          column: 12
        },
        end: {
          line: 462,
          column: 13
        }
      },
      "145": {
        start: {
          line: 436,
          column: 16
        },
        end: {
          line: 461,
          column: 17
        }
      },
      "146": {
        start: {
          line: 437,
          column: 20
        },
        end: {
          line: 457,
          column: 21
        }
      },
      "147": {
        start: {
          line: 439,
          column: 46
        },
        end: {
          line: 439,
          column: 78
        }
      },
      "148": {
        start: {
          line: 440,
          column: 24
        },
        end: {
          line: 442,
          column: 27
        }
      },
      "149": {
        start: {
          line: 443,
          column: 24
        },
        end: {
          line: 450,
          column: 27
        }
      },
      "150": {
        start: {
          line: 452,
          column: 24
        },
        end: {
          line: 456,
          column: 47
        }
      },
      "151": {
        start: {
          line: 453,
          column: 28
        },
        end: {
          line: 455,
          column: 31
        }
      },
      "152": {
        start: {
          line: 460,
          column: 20
        },
        end: {
          line: 460,
          column: 86
        }
      },
      "153": {
        start: {
          line: 469,
          column: 8
        },
        end: {
          line: 491,
          column: 11
        }
      },
      "154": {
        start: {
          line: 470,
          column: 12
        },
        end: {
          line: 490,
          column: 13
        }
      },
      "155": {
        start: {
          line: 472,
          column: 16
        },
        end: {
          line: 474,
          column: 17
        }
      },
      "156": {
        start: {
          line: 473,
          column: 20
        },
        end: {
          line: 473,
          column: 27
        }
      },
      "157": {
        start: {
          line: 475,
          column: 42
        },
        end: {
          line: 475,
          column: 94
        }
      },
      "158": {
        start: {
          line: 477,
          column: 16
        },
        end: {
          line: 479,
          column: 17
        }
      },
      "159": {
        start: {
          line: 478,
          column: 20
        },
        end: {
          line: 478,
          column: 27
        }
      },
      "160": {
        start: {
          line: 481,
          column: 46
        },
        end: {
          line: 481,
          column: 97
        }
      },
      "161": {
        start: {
          line: 482,
          column: 42
        },
        end: {
          line: 482,
          column: 149
        }
      },
      "162": {
        start: {
          line: 482,
          column: 80
        },
        end: {
          line: 482,
          column: 148
        }
      },
      "163": {
        start: {
          line: 483,
          column: 16
        },
        end: {
          line: 486,
          column: 17
        }
      },
      "164": {
        start: {
          line: 485,
          column: 20
        },
        end: {
          line: 485,
          column: 122
        }
      },
      "165": {
        start: {
          line: 485,
          column: 110
        },
        end: {
          line: 485,
          column: 119
        }
      },
      "166": {
        start: {
          line: 489,
          column: 16
        },
        end: {
          line: 489,
          column: 77
        }
      },
      "167": {
        start: {
          line: 497,
          column: 26
        },
        end: {
          line: 497,
          column: 73
        }
      },
      "168": {
        start: {
          line: 498,
          column: 8
        },
        end: {
          line: 498,
          column: 42
        }
      },
      "169": {
        start: {
          line: 500,
          column: 8
        },
        end: {
          line: 502,
          column: 9
        }
      },
      "170": {
        start: {
          line: 501,
          column: 12
        },
        end: {
          line: 501,
          column: 63
        }
      },
      "171": {
        start: {
          line: 504,
          column: 8
        },
        end: {
          line: 506,
          column: 9
        }
      },
      "172": {
        start: {
          line: 505,
          column: 12
        },
        end: {
          line: 505,
          column: 72
        }
      },
      "173": {
        start: {
          line: 512,
          column: 8
        },
        end: {
          line: 512,
          column: 46
        }
      },
      "174": {
        start: {
          line: 518,
          column: 8
        },
        end: {
          line: 518,
          column: 77
        }
      },
      "175": {
        start: {
          line: 519,
          column: 8
        },
        end: {
          line: 523,
          column: 11
        }
      },
      "176": {
        start: {
          line: 529,
          column: 8
        },
        end: {
          line: 572,
          column: 11
        }
      },
      "177": {
        start: {
          line: 530,
          column: 12
        },
        end: {
          line: 571,
          column: 13
        }
      },
      "178": {
        start: {
          line: 531,
          column: 16
        },
        end: {
          line: 531,
          column: 72
        }
      },
      "179": {
        start: {
          line: 532,
          column: 36
        },
        end: {
          line: 532,
          column: 73
        }
      },
      "180": {
        start: {
          line: 533,
          column: 46
        },
        end: {
          line: 533,
          column: 97
        }
      },
      "181": {
        start: {
          line: 535,
          column: 34
        },
        end: {
          line: 535,
          column: 81
        }
      },
      "182": {
        start: {
          line: 537,
          column: 38
        },
        end: {
          line: 537,
          column: 100
        }
      },
      "183": {
        start: {
          line: 539,
          column: 43
        },
        end: {
          line: 539,
          column: 125
        }
      },
      "184": {
        start: {
          line: 541,
          column: 43
        },
        end: {
          line: 541,
          column: 99
        }
      },
      "185": {
        start: {
          line: 542,
          column: 16
        },
        end: {
          line: 542,
          column: 75
        }
      },
      "186": {
        start: {
          line: 543,
          column: 16
        },
        end: {
          line: 543,
          column: 64
        }
      },
      "187": {
        start: {
          line: 545,
          column: 16
        },
        end: {
          line: 554,
          column: 19
        }
      },
      "188": {
        start: {
          line: 555,
          column: 16
        },
        end: {
          line: 559,
          column: 19
        }
      },
      "189": {
        start: {
          line: 562,
          column: 16
        },
        end: {
          line: 562,
          column: 77
        }
      },
      "190": {
        start: {
          line: 563,
          column: 16
        },
        end: {
          line: 570,
          column: 19
        }
      },
      "191": {
        start: {
          line: 578,
          column: 23
        },
        end: {
          line: 578,
          column: 25
        }
      },
      "192": {
        start: {
          line: 579,
          column: 8
        },
        end: {
          line: 597,
          column: 11
        }
      },
      "193": {
        start: {
          line: 580,
          column: 26
        },
        end: {
          line: 580,
          column: 42
        }
      },
      "194": {
        start: {
          line: 581,
          column: 12
        },
        end: {
          line: 585,
          column: 13
        }
      },
      "195": {
        start: {
          line: 583,
          column: 16
        },
        end: {
          line: 583,
          column: 34
        }
      },
      "196": {
        start: {
          line: 584,
          column: 16
        },
        end: {
          line: 584,
          column: 23
        }
      },
      "197": {
        start: {
          line: 587,
          column: 33
        },
        end: {
          line: 587,
          column: 46
        }
      },
      "198": {
        start: {
          line: 588,
          column: 33
        },
        end: {
          line: 588,
          column: 73
        }
      },
      "199": {
        start: {
          line: 589,
          column: 30
        },
        end: {
          line: 589,
          column: 66
        }
      },
      "200": {
        start: {
          line: 590,
          column: 36
        },
        end: {
          line: 590,
          column: 66
        }
      },
      "201": {
        start: {
          line: 592,
          column: 12
        },
        end: {
          line: 596,
          column: 42
        }
      },
      "202": {
        start: {
          line: 598,
          column: 8
        },
        end: {
          line: 598,
          column: 22
        }
      },
      "203": {
        start: {
          line: 604,
          column: 21
        },
        end: {
          line: 604,
          column: 50
        }
      },
      "204": {
        start: {
          line: 605,
          column: 27
        },
        end: {
          line: 605,
          column: 29
        }
      },
      "205": {
        start: {
          line: 607,
          column: 27
        },
        end: {
          line: 607,
          column: 77
        }
      },
      "206": {
        start: {
          line: 607,
          column: 53
        },
        end: {
          line: 607,
          column: 73
        }
      },
      "207": {
        start: {
          line: 608,
          column: 8
        },
        end: {
          line: 614,
          column: 9
        }
      },
      "208": {
        start: {
          line: 610,
          column: 12
        },
        end: {
          line: 612,
          column: 15
        }
      },
      "209": {
        start: {
          line: 611,
          column: 16
        },
        end: {
          line: 611,
          column: 50
        }
      },
      "210": {
        start: {
          line: 613,
          column: 12
        },
        end: {
          line: 613,
          column: 30
        }
      },
      "211": {
        start: {
          line: 616,
          column: 8
        },
        end: {
          line: 618,
          column: 11
        }
      },
      "212": {
        start: {
          line: 617,
          column: 12
        },
        end: {
          line: 617,
          column: 58
        }
      },
      "213": {
        start: {
          line: 620,
          column: 26
        },
        end: {
          line: 620,
          column: 81
        }
      },
      "214": {
        start: {
          line: 620,
          column: 56
        },
        end: {
          line: 620,
          column: 79
        }
      },
      "215": {
        start: {
          line: 621,
          column: 26
        },
        end: {
          line: 621,
          column: 81
        }
      },
      "216": {
        start: {
          line: 621,
          column: 56
        },
        end: {
          line: 621,
          column: 79
        }
      },
      "217": {
        start: {
          line: 622,
          column: 8
        },
        end: {
          line: 628,
          column: 9
        }
      },
      "218": {
        start: {
          line: 623,
          column: 12
        },
        end: {
          line: 627,
          column: 15
        }
      },
      "219": {
        start: {
          line: 624,
          column: 31
        },
        end: {
          line: 624,
          column: 54
        }
      },
      "220": {
        start: {
          line: 625,
          column: 41
        },
        end: {
          line: 625,
          column: 80
        }
      },
      "221": {
        start: {
          line: 626,
          column: 16
        },
        end: {
          line: 626,
          column: 52
        }
      },
      "222": {
        start: {
          line: 630,
          column: 30
        },
        end: {
          line: 630,
          column: 34
        }
      },
      "223": {
        start: {
          line: 631,
          column: 8
        },
        end: {
          line: 633,
          column: 11
        }
      },
      "224": {
        start: {
          line: 632,
          column: 12
        },
        end: {
          line: 632,
          column: 71
        }
      },
      "225": {
        start: {
          line: 635,
          column: 20
        },
        end: {
          line: 635,
          column: 75
        }
      },
      "226": {
        start: {
          line: 635,
          column: 48
        },
        end: {
          line: 635,
          column: 71
        }
      },
      "227": {
        start: {
          line: 636,
          column: 8
        },
        end: {
          line: 638,
          column: 11
        }
      },
      "228": {
        start: {
          line: 637,
          column: 12
        },
        end: {
          line: 637,
          column: 52
        }
      },
      "229": {
        start: {
          line: 639,
          column: 8
        },
        end: {
          line: 639,
          column: 26
        }
      },
      "230": {
        start: {
          line: 646,
          column: 35
        },
        end: {
          line: 646,
          column: 37
        }
      },
      "231": {
        start: {
          line: 647,
          column: 8
        },
        end: {
          line: 652,
          column: 11
        }
      },
      "232": {
        start: {
          line: 648,
          column: 28
        },
        end: {
          line: 648,
          column: 50
        }
      },
      "233": {
        start: {
          line: 649,
          column: 27
        },
        end: {
          line: 649,
          column: 48
        }
      },
      "234": {
        start: {
          line: 651,
          column: 12
        },
        end: {
          line: 651,
          column: 85
        }
      },
      "235": {
        start: {
          line: 654,
          column: 20
        },
        end: {
          line: 654,
          column: 92
        }
      },
      "236": {
        start: {
          line: 654,
          column: 77
        },
        end: {
          line: 654,
          column: 88
        }
      },
      "237": {
        start: {
          line: 655,
          column: 8
        },
        end: {
          line: 657,
          column: 11
        }
      },
      "238": {
        start: {
          line: 656,
          column: 12
        },
        end: {
          line: 656,
          column: 68
        }
      },
      "239": {
        start: {
          line: 658,
          column: 8
        },
        end: {
          line: 658,
          column: 34
        }
      },
      "240": {
        start: {
          line: 664,
          column: 8
        },
        end: {
          line: 710,
          column: 11
        }
      },
      "241": {
        start: {
          line: 665,
          column: 12
        },
        end: {
          line: 709,
          column: 13
        }
      },
      "242": {
        start: {
          line: 667,
          column: 16
        },
        end: {
          line: 682,
          column: 17
        }
      },
      "243": {
        start: {
          line: 668,
          column: 20
        },
        end: {
          line: 681,
          column: 21
        }
      },
      "244": {
        start: {
          line: 669,
          column: 49
        },
        end: {
          line: 669,
          column: 105
        }
      },
      "245": {
        start: {
          line: 670,
          column: 24
        },
        end: {
          line: 677,
          column: 25
        }
      },
      "246": {
        start: {
          line: 671,
          column: 28
        },
        end: {
          line: 676,
          column: 30
        }
      },
      "247": {
        start: {
          line: 680,
          column: 24
        },
        end: {
          line: 680,
          column: 120
        }
      },
      "248": {
        start: {
          line: 684,
          column: 16
        },
        end: {
          line: 693,
          column: 17
        }
      },
      "249": {
        start: {
          line: 685,
          column: 40
        },
        end: {
          line: 685,
          column: 75
        }
      },
      "250": {
        start: {
          line: 686,
          column: 50
        },
        end: {
          line: 686,
          column: 100
        }
      },
      "251": {
        start: {
          line: 687,
          column: 20
        },
        end: {
          line: 692,
          column: 22
        }
      },
      "252": {
        start: {
          line: 695,
          column: 31
        },
        end: {
          line: 695,
          column: 80
        }
      },
      "253": {
        start: {
          line: 696,
          column: 16
        },
        end: {
          line: 700,
          column: 18
        }
      },
      "254": {
        start: {
          line: 703,
          column: 16
        },
        end: {
          line: 703,
          column: 72
        }
      },
      "255": {
        start: {
          line: 704,
          column: 16
        },
        end: {
          line: 708,
          column: 18
        }
      },
      "256": {
        start: {
          line: 716,
          column: 23
        },
        end: {
          line: 716,
          column: 36
        }
      },
      "257": {
        start: {
          line: 717,
          column: 36
        },
        end: {
          line: 717,
          column: 37
        }
      },
      "258": {
        start: {
          line: 718,
          column: 21
        },
        end: {
          line: 718,
          column: 50
        }
      },
      "259": {
        start: {
          line: 719,
          column: 8
        },
        end: {
          line: 724,
          column: 9
        }
      },
      "260": {
        start: {
          line: 720,
          column: 12
        },
        end: {
          line: 720,
          column: 80
        }
      },
      "261": {
        start: {
          line: 721,
          column: 12
        },
        end: {
          line: 723,
          column: 13
        }
      },
      "262": {
        start: {
          line: 722,
          column: 16
        },
        end: {
          line: 722,
          column: 27
        }
      },
      "263": {
        start: {
          line: 726,
          column: 8
        },
        end: {
          line: 726,
          column: 25
        }
      },
      "264": {
        start: {
          line: 732,
          column: 8
        },
        end: {
          line: 734,
          column: 11
        }
      },
      "265": {
        start: {
          line: 733,
          column: 12
        },
        end: {
          line: 733,
          column: 49
        }
      },
      "266": {
        start: {
          line: 740,
          column: 8
        },
        end: {
          line: 740,
          column: 72
        }
      },
      "267": {
        start: {
          line: 746,
          column: 8
        },
        end: {
          line: 751,
          column: 10
        }
      },
      "268": {
        start: {
          line: 754,
          column: 0
        },
        end: {
          line: 754,
          column: 60
        }
      },
      "269": {
        start: {
          line: 756,
          column: 31
        },
        end: {
          line: 756,
          column: 35
        }
      },
      "270": {
        start: {
          line: 761,
          column: 4
        },
        end: {
          line: 763,
          column: 5
        }
      },
      "271": {
        start: {
          line: 762,
          column: 8
        },
        end: {
          line: 762,
          column: 72
        }
      },
      "272": {
        start: {
          line: 764,
          column: 4
        },
        end: {
          line: 764,
          column: 36
        }
      },
      "273": {
        start: {
          line: 770,
          column: 4
        },
        end: {
          line: 776,
          column: 7
        }
      },
      "274": {
        start: {
          line: 771,
          column: 23
        },
        end: {
          line: 771,
          column: 52
        }
      },
      "275": {
        start: {
          line: 772,
          column: 8
        },
        end: {
          line: 774,
          column: 9
        }
      },
      "276": {
        start: {
          line: 773,
          column: 12
        },
        end: {
          line: 773,
          column: 33
        }
      },
      "277": {
        start: {
          line: 775,
          column: 8
        },
        end: {
          line: 775,
          column: 22
        }
      },
      "278": {
        start: {
          line: 782,
          column: 4
        },
        end: {
          line: 787,
          column: 7
        }
      },
      "279": {
        start: {
          line: 783,
          column: 8
        },
        end: {
          line: 786,
          column: 9
        }
      },
      "280": {
        start: {
          line: 784,
          column: 12
        },
        end: {
          line: 784,
          column: 50
        }
      },
      "281": {
        start: {
          line: 785,
          column: 12
        },
        end: {
          line: 785,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 29
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 24
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 12
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 64
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 65,
            column: 55
          },
          end: {
            line: 65,
            column: 56
          }
        },
        loc: {
          start: {
            line: 65,
            column: 68
          },
          end: {
            line: 95,
            column: 9
          }
        },
        line: 65
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        loc: {
          start: {
            line: 100,
            column: 11
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 100
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 101,
            column: 55
          },
          end: {
            line: 101,
            column: 56
          }
        },
        loc: {
          start: {
            line: 101,
            column: 68
          },
          end: {
            line: 129,
            column: 9
          }
        },
        line: 101
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 32
          },
          end: {
            line: 153,
            column: 5
          }
        },
        line: 134
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 135,
            column: 55
          },
          end: {
            line: 135,
            column: 56
          }
        },
        loc: {
          start: {
            line: 135,
            column: 68
          },
          end: {
            line: 152,
            column: 9
          }
        },
        line: 135
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 157,
            column: 4
          },
          end: {
            line: 157,
            column: 5
          }
        },
        loc: {
          start: {
            line: 157,
            column: 46
          },
          end: {
            line: 171,
            column: 5
          }
        },
        line: 157
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 158,
            column: 55
          },
          end: {
            line: 158,
            column: 56
          }
        },
        loc: {
          start: {
            line: 158,
            column: 68
          },
          end: {
            line: 170,
            column: 9
          }
        },
        line: 158
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 175,
            column: 4
          },
          end: {
            line: 175,
            column: 5
          }
        },
        loc: {
          start: {
            line: 175,
            column: 17
          },
          end: {
            line: 177,
            column: 5
          }
        },
        line: 175
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 181,
            column: 4
          },
          end: {
            line: 181,
            column: 5
          }
        },
        loc: {
          start: {
            line: 181,
            column: 33
          },
          end: {
            line: 183,
            column: 5
          }
        },
        line: 181
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 187,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        },
        loc: {
          start: {
            line: 187,
            column: 24
          },
          end: {
            line: 191,
            column: 5
          }
        },
        line: 187
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 188,
            column: 55
          },
          end: {
            line: 188,
            column: 56
          }
        },
        loc: {
          start: {
            line: 188,
            column: 68
          },
          end: {
            line: 190,
            column: 9
          }
        },
        line: 188
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 195,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        },
        loc: {
          start: {
            line: 195,
            column: 22
          },
          end: {
            line: 240,
            column: 5
          }
        },
        line: 195
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 196,
            column: 55
          },
          end: {
            line: 196,
            column: 56
          }
        },
        loc: {
          start: {
            line: 196,
            column: 68
          },
          end: {
            line: 239,
            column: 9
          }
        },
        line: 196
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 244,
            column: 5
          }
        },
        loc: {
          start: {
            line: 244,
            column: 30
          },
          end: {
            line: 277,
            column: 5
          }
        },
        line: 244
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 245,
            column: 55
          },
          end: {
            line: 245,
            column: 56
          }
        },
        loc: {
          start: {
            line: 245,
            column: 68
          },
          end: {
            line: 276,
            column: 9
          }
        },
        line: 245
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 281,
            column: 4
          },
          end: {
            line: 281,
            column: 5
          }
        },
        loc: {
          start: {
            line: 281,
            column: 28
          },
          end: {
            line: 285,
            column: 5
          }
        },
        line: 281
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 282,
            column: 48
          },
          end: {
            line: 282,
            column: 49
          }
        },
        loc: {
          start: {
            line: 282,
            column: 54
          },
          end: {
            line: 284,
            column: 10
          }
        },
        line: 282
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 282,
            column: 94
          },
          end: {
            line: 282,
            column: 95
          }
        },
        loc: {
          start: {
            line: 282,
            column: 107
          },
          end: {
            line: 284,
            column: 9
          }
        },
        line: 282
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 289,
            column: 4
          },
          end: {
            line: 289,
            column: 5
          }
        },
        loc: {
          start: {
            line: 289,
            column: 33
          },
          end: {
            line: 293,
            column: 5
          }
        },
        line: 289
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 290,
            column: 53
          },
          end: {
            line: 290,
            column: 54
          }
        },
        loc: {
          start: {
            line: 290,
            column: 59
          },
          end: {
            line: 292,
            column: 10
          }
        },
        line: 290
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 290,
            column: 99
          },
          end: {
            line: 290,
            column: 100
          }
        },
        loc: {
          start: {
            line: 290,
            column: 112
          },
          end: {
            line: 292,
            column: 9
          }
        },
        line: 290
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 297,
            column: 4
          },
          end: {
            line: 297,
            column: 5
          }
        },
        loc: {
          start: {
            line: 297,
            column: 27
          },
          end: {
            line: 329,
            column: 5
          }
        },
        line: 297
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 298,
            column: 55
          },
          end: {
            line: 298,
            column: 56
          }
        },
        loc: {
          start: {
            line: 298,
            column: 68
          },
          end: {
            line: 328,
            column: 9
          }
        },
        line: 298
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 307,
            column: 67
          },
          end: {
            line: 307,
            column: 68
          }
        },
        loc: {
          start: {
            line: 307,
            column: 74
          },
          end: {
            line: 307,
            column: 87
          }
        },
        line: 307
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 333,
            column: 4
          },
          end: {
            line: 333,
            column: 5
          }
        },
        loc: {
          start: {
            line: 333,
            column: 26
          },
          end: {
            line: 362,
            column: 5
          }
        },
        line: 333
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 334,
            column: 55
          },
          end: {
            line: 334,
            column: 56
          }
        },
        loc: {
          start: {
            line: 334,
            column: 68
          },
          end: {
            line: 361,
            column: 9
          }
        },
        line: 334
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 341,
            column: 67
          },
          end: {
            line: 341,
            column: 68
          }
        },
        loc: {
          start: {
            line: 341,
            column: 91
          },
          end: {
            line: 345,
            column: 17
          }
        },
        line: 341
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 366,
            column: 4
          },
          end: {
            line: 366,
            column: 5
          }
        },
        loc: {
          start: {
            line: 366,
            column: 46
          },
          end: {
            line: 395,
            column: 5
          }
        },
        line: 366
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 367,
            column: 55
          },
          end: {
            line: 367,
            column: 56
          }
        },
        loc: {
          start: {
            line: 367,
            column: 68
          },
          end: {
            line: 394,
            column: 9
          }
        },
        line: 367
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 399,
            column: 4
          },
          end: {
            line: 399,
            column: 5
          }
        },
        loc: {
          start: {
            line: 399,
            column: 32
          },
          end: {
            line: 428,
            column: 5
          }
        },
        line: 399
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 400,
            column: 55
          },
          end: {
            line: 400,
            column: 56
          }
        },
        loc: {
          start: {
            line: 400,
            column: 68
          },
          end: {
            line: 427,
            column: 9
          }
        },
        line: 400
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 432,
            column: 4
          },
          end: {
            line: 432,
            column: 5
          }
        },
        loc: {
          start: {
            line: 432,
            column: 44
          },
          end: {
            line: 464,
            column: 5
          }
        },
        line: 432
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 433,
            column: 55
          },
          end: {
            line: 433,
            column: 56
          }
        },
        loc: {
          start: {
            line: 433,
            column: 68
          },
          end: {
            line: 463,
            column: 9
          }
        },
        line: 433
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 434,
            column: 60
          },
          end: {
            line: 434,
            column: 61
          }
        },
        loc: {
          start: {
            line: 434,
            column: 67
          },
          end: {
            line: 434,
            column: 88
          }
        },
        line: 434
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 452,
            column: 35
          },
          end: {
            line: 452,
            column: 36
          }
        },
        loc: {
          start: {
            line: 452,
            column: 41
          },
          end: {
            line: 456,
            column: 25
          }
        },
        line: 452
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 468,
            column: 4
          },
          end: {
            line: 468,
            column: 5
          }
        },
        loc: {
          start: {
            line: 468,
            column: 29
          },
          end: {
            line: 492,
            column: 5
          }
        },
        line: 468
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 469,
            column: 55
          },
          end: {
            line: 469,
            column: 56
          }
        },
        loc: {
          start: {
            line: 469,
            column: 68
          },
          end: {
            line: 491,
            column: 9
          }
        },
        line: 469
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 482,
            column: 71
          },
          end: {
            line: 482,
            column: 72
          }
        },
        loc: {
          start: {
            line: 482,
            column: 80
          },
          end: {
            line: 482,
            column: 148
          }
        },
        line: 482
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 485,
            column: 103
          },
          end: {
            line: 485,
            column: 104
          }
        },
        loc: {
          start: {
            line: 485,
            column: 110
          },
          end: {
            line: 485,
            column: 119
          }
        },
        line: 485
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 496,
            column: 4
          },
          end: {
            line: 496,
            column: 5
          }
        },
        loc: {
          start: {
            line: 496,
            column: 20
          },
          end: {
            line: 507,
            column: 5
          }
        },
        line: 496
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 511,
            column: 4
          },
          end: {
            line: 511,
            column: 5
          }
        },
        loc: {
          start: {
            line: 511,
            column: 16
          },
          end: {
            line: 513,
            column: 5
          }
        },
        line: 511
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 517,
            column: 4
          },
          end: {
            line: 517,
            column: 5
          }
        },
        loc: {
          start: {
            line: 517,
            column: 26
          },
          end: {
            line: 524,
            column: 5
          }
        },
        line: 517
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 528,
            column: 4
          },
          end: {
            line: 528,
            column: 5
          }
        },
        loc: {
          start: {
            line: 528,
            column: 30
          },
          end: {
            line: 573,
            column: 5
          }
        },
        line: 528
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 529,
            column: 55
          },
          end: {
            line: 529,
            column: 56
          }
        },
        loc: {
          start: {
            line: 529,
            column: 68
          },
          end: {
            line: 572,
            column: 9
          }
        },
        line: 529
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 577,
            column: 4
          },
          end: {
            line: 577,
            column: 5
          }
        },
        loc: {
          start: {
            line: 577,
            column: 47
          },
          end: {
            line: 599,
            column: 5
          }
        },
        line: 577
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 579,
            column: 41
          },
          end: {
            line: 579,
            column: 42
          }
        },
        loc: {
          start: {
            line: 579,
            column: 50
          },
          end: {
            line: 597,
            column: 9
          }
        },
        line: 579
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 603,
            column: 4
          },
          end: {
            line: 603,
            column: 5
          }
        },
        loc: {
          start: {
            line: 603,
            column: 62
          },
          end: {
            line: 640,
            column: 5
          }
        },
        line: 603
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 607,
            column: 39
          },
          end: {
            line: 607,
            column: 40
          }
        },
        loc: {
          start: {
            line: 607,
            column: 53
          },
          end: {
            line: 607,
            column: 73
          }
        },
        line: 607
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 610,
            column: 25
          },
          end: {
            line: 610,
            column: 26
          }
        },
        loc: {
          start: {
            line: 610,
            column: 34
          },
          end: {
            line: 612,
            column: 13
          }
        },
        line: 610
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 616,
            column: 21
          },
          end: {
            line: 616,
            column: 22
          }
        },
        loc: {
          start: {
            line: 616,
            column: 30
          },
          end: {
            line: 618,
            column: 9
          }
        },
        line: 616
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 620,
            column: 47
          },
          end: {
            line: 620,
            column: 48
          }
        },
        loc: {
          start: {
            line: 620,
            column: 56
          },
          end: {
            line: 620,
            column: 79
          }
        },
        line: 620
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 621,
            column: 47
          },
          end: {
            line: 621,
            column: 48
          }
        },
        loc: {
          start: {
            line: 621,
            column: 56
          },
          end: {
            line: 621,
            column: 79
          }
        },
        line: 621
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 623,
            column: 25
          },
          end: {
            line: 623,
            column: 26
          }
        },
        loc: {
          start: {
            line: 623,
            column: 34
          },
          end: {
            line: 627,
            column: 13
          }
        },
        line: 623
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 631,
            column: 21
          },
          end: {
            line: 631,
            column: 22
          }
        },
        loc: {
          start: {
            line: 631,
            column: 30
          },
          end: {
            line: 633,
            column: 9
          }
        },
        line: 631
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 635,
            column: 32
          },
          end: {
            line: 635,
            column: 33
          }
        },
        loc: {
          start: {
            line: 635,
            column: 48
          },
          end: {
            line: 635,
            column: 71
          }
        },
        line: 635
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 636,
            column: 21
          },
          end: {
            line: 636,
            column: 22
          }
        },
        loc: {
          start: {
            line: 636,
            column: 30
          },
          end: {
            line: 638,
            column: 9
          }
        },
        line: 636
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 644,
            column: 4
          },
          end: {
            line: 644,
            column: 5
          }
        },
        loc: {
          start: {
            line: 645,
            column: 6
          },
          end: {
            line: 659,
            column: 5
          }
        },
        line: 645
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 647,
            column: 47
          },
          end: {
            line: 647,
            column: 48
          }
        },
        loc: {
          start: {
            line: 647,
            column: 56
          },
          end: {
            line: 652,
            column: 9
          }
        },
        line: 647
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 654,
            column: 61
          },
          end: {
            line: 654,
            column: 62
          }
        },
        loc: {
          start: {
            line: 654,
            column: 77
          },
          end: {
            line: 654,
            column: 88
          }
        },
        line: 654
      },
      "61": {
        name: "(anonymous_61)",
        decl: {
          start: {
            line: 655,
            column: 48
          },
          end: {
            line: 655,
            column: 49
          }
        },
        loc: {
          start: {
            line: 655,
            column: 57
          },
          end: {
            line: 657,
            column: 9
          }
        },
        line: 655
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 663,
            column: 4
          },
          end: {
            line: 663,
            column: 5
          }
        },
        loc: {
          start: {
            line: 663,
            column: 53
          },
          end: {
            line: 711,
            column: 5
          }
        },
        line: 663
      },
      "63": {
        name: "(anonymous_63)",
        decl: {
          start: {
            line: 664,
            column: 55
          },
          end: {
            line: 664,
            column: 56
          }
        },
        loc: {
          start: {
            line: 664,
            column: 68
          },
          end: {
            line: 710,
            column: 9
          }
        },
        line: 664
      },
      "64": {
        name: "(anonymous_64)",
        decl: {
          start: {
            line: 715,
            column: 4
          },
          end: {
            line: 715,
            column: 5
          }
        },
        loc: {
          start: {
            line: 715,
            column: 35
          },
          end: {
            line: 727,
            column: 5
          }
        },
        line: 715
      },
      "65": {
        name: "(anonymous_65)",
        decl: {
          start: {
            line: 731,
            column: 4
          },
          end: {
            line: 731,
            column: 5
          }
        },
        loc: {
          start: {
            line: 731,
            column: 35
          },
          end: {
            line: 735,
            column: 5
          }
        },
        line: 731
      },
      "66": {
        name: "(anonymous_66)",
        decl: {
          start: {
            line: 732,
            column: 55
          },
          end: {
            line: 732,
            column: 56
          }
        },
        loc: {
          start: {
            line: 732,
            column: 68
          },
          end: {
            line: 734,
            column: 9
          }
        },
        line: 732
      },
      "67": {
        name: "(anonymous_67)",
        decl: {
          start: {
            line: 739,
            column: 4
          },
          end: {
            line: 739,
            column: 5
          }
        },
        loc: {
          start: {
            line: 739,
            column: 34
          },
          end: {
            line: 741,
            column: 5
          }
        },
        line: 739
      },
      "68": {
        name: "(anonymous_68)",
        decl: {
          start: {
            line: 745,
            column: 4
          },
          end: {
            line: 745,
            column: 5
          }
        },
        loc: {
          start: {
            line: 745,
            column: 18
          },
          end: {
            line: 752,
            column: 5
          }
        },
        line: 745
      },
      "69": {
        name: "getOptimizationSystem",
        decl: {
          start: {
            line: 760,
            column: 9
          },
          end: {
            line: 760,
            column: 30
          }
        },
        loc: {
          start: {
            line: 760,
            column: 39
          },
          end: {
            line: 765,
            column: 1
          }
        },
        line: 760
      },
      "70": {
        name: "initializeOptimizationSystem",
        decl: {
          start: {
            line: 769,
            column: 9
          },
          end: {
            line: 769,
            column: 37
          }
        },
        loc: {
          start: {
            line: 769,
            column: 46
          },
          end: {
            line: 777,
            column: 1
          }
        },
        line: 769
      },
      "71": {
        name: "(anonymous_71)",
        decl: {
          start: {
            line: 770,
            column: 51
          },
          end: {
            line: 770,
            column: 52
          }
        },
        loc: {
          start: {
            line: 770,
            column: 64
          },
          end: {
            line: 776,
            column: 5
          }
        },
        line: 770
      },
      "72": {
        name: "shutdownOptimizationSystem",
        decl: {
          start: {
            line: 781,
            column: 9
          },
          end: {
            line: 781,
            column: 35
          }
        },
        loc: {
          start: {
            line: 781,
            column: 38
          },
          end: {
            line: 788,
            column: 1
          }
        },
        line: 781
      },
      "73": {
        name: "(anonymous_73)",
        decl: {
          start: {
            line: 782,
            column: 51
          },
          end: {
            line: 782,
            column: 52
          }
        },
        loc: {
          start: {
            line: 782,
            column: 64
          },
          end: {
            line: 787,
            column: 5
          }
        },
        line: 782
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 16
          },
          end: {
            line: 24,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 24,
            column: 25
          },
          end: {
            line: 24,
            column: 27
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 66,
            column: 12
          },
          end: {
            line: 69,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 12
          },
          end: {
            line: 69,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "2": {
        loc: {
          start: {
            line: 74,
            column: 16
          },
          end: {
            line: 76,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 16
          },
          end: {
            line: 76,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "3": {
        loc: {
          start: {
            line: 80,
            column: 16
          },
          end: {
            line: 82,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 16
          },
          end: {
            line: 82,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "4": {
        loc: {
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 104,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 104,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "5": {
        loc: {
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 109,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 109,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "6": {
        loc: {
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 114,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 114,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "7": {
        loc: {
          start: {
            line: 116,
            column: 12
          },
          end: {
            line: 121,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 12
          },
          end: {
            line: 121,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "8": {
        loc: {
          start: {
            line: 181,
            column: 20
          },
          end: {
            line: 181,
            column: 31
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 181,
            column: 28
          },
          end: {
            line: 181,
            column: 31
          }
        }],
        line: 181
      },
      "9": {
        loc: {
          start: {
            line: 203,
            column: 33
          },
          end: {
            line: 205,
            column: 33
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 204,
            column: 26
          },
          end: {
            line: 204,
            column: 35
          }
        }, {
          start: {
            line: 205,
            column: 26
          },
          end: {
            line: 205,
            column: 33
          }
        }],
        line: 203
      },
      "10": {
        loc: {
          start: {
            line: 207,
            column: 34
          },
          end: {
            line: 209,
            column: 35
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 208,
            column: 26
          },
          end: {
            line: 208,
            column: 35
          }
        }, {
          start: {
            line: 209,
            column: 26
          },
          end: {
            line: 209,
            column: 35
          }
        }],
        line: 207
      },
      "11": {
        loc: {
          start: {
            line: 211,
            column: 37
          },
          end: {
            line: 215,
            column: 35
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 212,
            column: 22
          },
          end: {
            line: 212,
            column: 29
          }
        }, {
          start: {
            line: 213,
            column: 22
          },
          end: {
            line: 215,
            column: 35
          }
        }],
        line: 211
      },
      "12": {
        loc: {
          start: {
            line: 213,
            column: 22
          },
          end: {
            line: 215,
            column: 35
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 214,
            column: 26
          },
          end: {
            line: 214,
            column: 35
          }
        }, {
          start: {
            line: 215,
            column: 26
          },
          end: {
            line: 215,
            column: 35
          }
        }],
        line: 213
      },
      "13": {
        loc: {
          start: {
            line: 311,
            column: 16
          },
          end: {
            line: 313,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 311,
            column: 16
          },
          end: {
            line: 313,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 311
      },
      "14": {
        loc: {
          start: {
            line: 342,
            column: 27
          },
          end: {
            line: 344,
            column: 30
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 343,
            column: 26
          },
          end: {
            line: 343,
            column: 45
          }
        }, {
          start: {
            line: 344,
            column: 26
          },
          end: {
            line: 344,
            column: 30
          }
        }],
        line: 342
      },
      "15": {
        loc: {
          start: {
            line: 348,
            column: 32
          },
          end: {
            line: 350,
            column: 29
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 349,
            column: 26
          },
          end: {
            line: 349,
            column: 69
          }
        }, {
          start: {
            line: 350,
            column: 26
          },
          end: {
            line: 350,
            column: 29
          }
        }],
        line: 348
      },
      "16": {
        loc: {
          start: {
            line: 371,
            column: 12
          },
          end: {
            line: 373,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 371,
            column: 12
          },
          end: {
            line: 373,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 371
      },
      "17": {
        loc: {
          start: {
            line: 375,
            column: 12
          },
          end: {
            line: 377,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 375,
            column: 12
          },
          end: {
            line: 377,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 375
      },
      "18": {
        loc: {
          start: {
            line: 381,
            column: 12
          },
          end: {
            line: 384,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 381,
            column: 12
          },
          end: {
            line: 384,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 381
      },
      "19": {
        loc: {
          start: {
            line: 381,
            column: 16
          },
          end: {
            line: 382,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 381,
            column: 16
          },
          end: {
            line: 381,
            column: 72
          }
        }, {
          start: {
            line: 382,
            column: 16
          },
          end: {
            line: 382,
            column: 41
          }
        }],
        line: 381
      },
      "20": {
        loc: {
          start: {
            line: 386,
            column: 12
          },
          end: {
            line: 393,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 386,
            column: 12
          },
          end: {
            line: 393,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 386
      },
      "21": {
        loc: {
          start: {
            line: 405,
            column: 20
          },
          end: {
            line: 421,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 405,
            column: 20
          },
          end: {
            line: 421,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 405
      },
      "22": {
        loc: {
          start: {
            line: 405,
            column: 24
          },
          end: {
            line: 406,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 405,
            column: 25
          },
          end: {
            line: 405,
            column: 94
          }
        }, {
          start: {
            line: 406,
            column: 24
          },
          end: {
            line: 406,
            column: 92
          }
        }],
        line: 405
      },
      "23": {
        loc: {
          start: {
            line: 405,
            column: 25
          },
          end: {
            line: 405,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 405,
            column: 64
          },
          end: {
            line: 405,
            column: 70
          }
        }, {
          start: {
            line: 405,
            column: 73
          },
          end: {
            line: 405,
            column: 94
          }
        }],
        line: 405
      },
      "24": {
        loc: {
          start: {
            line: 405,
            column: 25
          },
          end: {
            line: 405,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 405,
            column: 25
          },
          end: {
            line: 405,
            column: 40
          }
        }, {
          start: {
            line: 405,
            column: 44
          },
          end: {
            line: 405,
            column: 61
          }
        }],
        line: 405
      },
      "25": {
        loc: {
          start: {
            line: 408,
            column: 24
          },
          end: {
            line: 420,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 408,
            column: 24
          },
          end: {
            line: 420,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 408
      },
      "26": {
        loc: {
          start: {
            line: 437,
            column: 20
          },
          end: {
            line: 457,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 437,
            column: 20
          },
          end: {
            line: 457,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 437
      },
      "27": {
        loc: {
          start: {
            line: 472,
            column: 16
          },
          end: {
            line: 474,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 472,
            column: 16
          },
          end: {
            line: 474,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 472
      },
      "28": {
        loc: {
          start: {
            line: 477,
            column: 16
          },
          end: {
            line: 479,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 477,
            column: 16
          },
          end: {
            line: 479,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 477
      },
      "29": {
        loc: {
          start: {
            line: 482,
            column: 80
          },
          end: {
            line: 482,
            column: 148
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 482,
            column: 80
          },
          end: {
            line: 482,
            column: 101
          }
        }, {
          start: {
            line: 482,
            column: 105
          },
          end: {
            line: 482,
            column: 148
          }
        }],
        line: 482
      },
      "30": {
        loc: {
          start: {
            line: 483,
            column: 16
          },
          end: {
            line: 486,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 483,
            column: 16
          },
          end: {
            line: 486,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 483
      },
      "31": {
        loc: {
          start: {
            line: 500,
            column: 8
          },
          end: {
            line: 502,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 500,
            column: 8
          },
          end: {
            line: 502,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 500
      },
      "32": {
        loc: {
          start: {
            line: 504,
            column: 8
          },
          end: {
            line: 506,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 504,
            column: 8
          },
          end: {
            line: 506,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 504
      },
      "33": {
        loc: {
          start: {
            line: 581,
            column: 12
          },
          end: {
            line: 585,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 581,
            column: 12
          },
          end: {
            line: 585,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 581
      },
      "34": {
        loc: {
          start: {
            line: 608,
            column: 8
          },
          end: {
            line: 614,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 608,
            column: 8
          },
          end: {
            line: 614,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 608
      },
      "35": {
        loc: {
          start: {
            line: 622,
            column: 8
          },
          end: {
            line: 628,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 622,
            column: 8
          },
          end: {
            line: 628,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 622
      },
      "36": {
        loc: {
          start: {
            line: 644,
            column: 65
          },
          end: {
            line: 644,
            column: 86
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 644,
            column: 83
          },
          end: {
            line: 644,
            column: 86
          }
        }],
        line: 644
      },
      "37": {
        loc: {
          start: {
            line: 667,
            column: 16
          },
          end: {
            line: 682,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 667,
            column: 16
          },
          end: {
            line: 682,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 667
      },
      "38": {
        loc: {
          start: {
            line: 670,
            column: 24
          },
          end: {
            line: 677,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 670,
            column: 24
          },
          end: {
            line: 677,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 670
      },
      "39": {
        loc: {
          start: {
            line: 684,
            column: 16
          },
          end: {
            line: 693,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 684,
            column: 16
          },
          end: {
            line: 693,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 684
      },
      "40": {
        loc: {
          start: {
            line: 721,
            column: 12
          },
          end: {
            line: 723,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 721,
            column: 12
          },
          end: {
            line: 723,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 721
      },
      "41": {
        loc: {
          start: {
            line: 761,
            column: 4
          },
          end: {
            line: 763,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 761,
            column: 4
          },
          end: {
            line: 763,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 761
      },
      "42": {
        loc: {
          start: {
            line: 772,
            column: 8
          },
          end: {
            line: 774,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 772,
            column: 8
          },
          end: {
            line: 774,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 772
      },
      "43": {
        loc: {
          start: {
            line: 783,
            column: 8
          },
          end: {
            line: 786,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 783,
            column: 8
          },
          end: {
            line: 786,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 783
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/active-optimization-system.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/active-optimization-system.ts"],
      sourcesContent: ["/**\n * Active Optimization System\n *\n * Integrates Evidently experiments with bandit optimization to create\n * an active, self-optimizing AI model routing system.\n *\n * Features:\n * - Automatic experiment lifecycle management\n * - Real-time bandit optimization\n * - Performance monitoring and alerting\n * - Auto-scaling based on traffic patterns\n */\n\nimport { Arm, ThompsonBandit } from \"./bandit-controller\";\nimport { BanditOptimizer } from \"./bandit-optimizer\";\nimport {\n  AI_EXPERIMENTS,\n  EvidentlyExperimentManager,\n  ExperimentContext,\n} from \"./evidently-experiments\";\n\nexport interface OptimizationSystemConfig {\n  projectName: string;\n  region: string;\n  autoExperimentEnabled: boolean;\n  experimentDuration: number; // days\n  minTrafficForExperiment: number; // requests per day\n  significanceThreshold: number; // 0-1\n  autoStopEnabled: boolean;\n  autoTrafficAllocationEnabled: boolean; // NEW: Enable automatic traffic allocation\n  trafficAllocationInterval: number; // minutes between traffic allocation updates\n  performanceThresholds: {\n    minWinRate: number;\n    maxLatency: number; // ms\n    maxCost: number; // euro\n  };\n}\n\nexport interface SystemMetrics {\n  totalRequests: number;\n  experimentsActive: number;\n  banditPerformance: {\n    bestArm: Arm;\n    confidence: number;\n    winRate: number;\n  };\n  systemHealth: \"healthy\" | \"warning\" | \"error\";\n  lastOptimization: Date;\n  lastTrafficAllocation: Date; // NEW: Track last traffic allocation update\n  currentTrafficAllocation: Record<Arm, number>; // NEW: Current traffic percentages\n  recommendations: string[];\n}\n\nexport interface OptimizationEvent {\n  timestamp: Date;\n  type:\n    | \"experiment_started\"\n    | \"experiment_stopped\"\n    | \"bandit_updated\"\n    | \"performance_alert\"\n    | \"auto_optimization\"\n    | \"traffic_allocation_updated\"; // NEW: Traffic allocation events\n  details: Record<string, any>;\n  impact: \"low\" | \"medium\" | \"high\";\n}\n\nexport class ActiveOptimizationSystem {\n  private experimentManager: EvidentlyExperimentManager;\n  private banditOptimizer: BanditOptimizer;\n  private config: OptimizationSystemConfig;\n  private metrics: SystemMetrics;\n  private eventHistory: OptimizationEvent[] = [];\n  private isRunning: boolean = false;\n  private optimizationInterval?: NodeJS.Timeout;\n  private trafficAllocationInterval?: NodeJS.Timeout; // NEW: Traffic allocation timer\n\n  constructor(config: Partial<OptimizationSystemConfig> = {}) {\n    this.config = {\n      projectName: \"matbakh-ai-optimization\",\n      region: \"eu-central-1\",\n      autoExperimentEnabled: true,\n      experimentDuration: 14, // 2 weeks\n      minTrafficForExperiment: 100, // 100 requests per day\n      significanceThreshold: 0.95,\n      autoStopEnabled: true,\n      autoTrafficAllocationEnabled: true, // NEW: Enable automatic traffic allocation\n      trafficAllocationInterval: 15, // NEW: Update traffic allocation every 15 minutes\n      performanceThresholds: {\n        minWinRate: 0.7,\n        maxLatency: 2000,\n        maxCost: 0.1,\n      },\n      ...config,\n    };\n\n    // Initialize components\n    const bandit = new ThompsonBandit();\n    this.experimentManager = new EvidentlyExperimentManager(\n      this.config.projectName,\n      this.config.region,\n      bandit\n    );\n    this.banditOptimizer = new BanditOptimizer(bandit, this.experimentManager, {\n      autoOptimizationEnabled: true,\n      explorationRate: 0.15,\n      minTrialsForConfidence: 30,\n      optimizationInterval: 60, // 1 hour\n    });\n\n    this.metrics = {\n      totalRequests: 0,\n      experimentsActive: 0,\n      banditPerformance: {\n        bestArm: \"bedrock\",\n        confidence: 0.5,\n        winRate: 0.5,\n      },\n      systemHealth: \"healthy\",\n      lastOptimization: new Date(),\n      lastTrafficAllocation: new Date(), // NEW: Initialize traffic allocation timestamp\n      currentTrafficAllocation: {\n        // NEW: Initialize equal traffic allocation\n        bedrock: 0.33,\n        google: 0.33,\n        meta: 0.34,\n      },\n      recommendations: [],\n    };\n  }\n\n  /**\n   * Start the active optimization system\n   */\n  async start(): Promise<void> {\n    if (this.isRunning) {\n      console.warn(\"Optimization system is already running\");\n      return;\n    }\n\n    try {\n      // Initialize Evidently project\n      await this.experimentManager.initializeProject();\n\n      // Start initial experiments if enabled\n      if (this.config.autoExperimentEnabled) {\n        await this.startInitialExperiments();\n      }\n\n      // Start optimization loop\n      this.startOptimizationLoop();\n\n      // Start automatic traffic allocation if enabled\n      if (this.config.autoTrafficAllocationEnabled) {\n        this.startTrafficAllocationLoop();\n      }\n\n      this.isRunning = true;\n      this.logEvent({\n        type: \"auto_optimization\",\n        details: { action: \"system_started\", config: this.config },\n        impact: \"high\",\n      });\n\n      console.log(\"Active Optimization System started successfully\");\n    } catch (error) {\n      console.error(\"Failed to start optimization system:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Stop the active optimization system\n   */\n  async stop(): Promise<void> {\n    if (!this.isRunning) {\n      return;\n    }\n\n    // Stop optimization loop\n    if (this.optimizationInterval) {\n      clearInterval(this.optimizationInterval);\n      this.optimizationInterval = undefined;\n    }\n\n    // Stop traffic allocation loop\n    if (this.trafficAllocationInterval) {\n      clearInterval(this.trafficAllocationInterval);\n      this.trafficAllocationInterval = undefined;\n    }\n\n    // Stop active experiments if auto-stop is enabled\n    if (this.config.autoStopEnabled) {\n      const activeExperiments =\n        await this.experimentManager.listActiveExperiments();\n      for (const experimentName of activeExperiments) {\n        await this.experimentManager.stopExperiment(\n          experimentName,\n          \"System shutdown\"\n        );\n      }\n    }\n\n    this.isRunning = false;\n    this.logEvent({\n      type: \"auto_optimization\",\n      details: { action: \"system_stopped\" },\n      impact: \"high\",\n    });\n\n    console.log(\"Active Optimization System stopped\");\n  }\n\n  /**\n   * Get optimal model provider for a request\n   */\n  async getOptimalProvider(context: ExperimentContext): Promise<{\n    provider: Arm;\n    source: \"experiment\" | \"bandit\" | \"traffic_allocation\" | \"default\";\n    confidence: number;\n    experimentName?: string;\n    allocationProbability?: number;\n  }> {\n    try {\n      // Use the new traffic allocation method\n      const result = await this.getOptimalProviderWithTrafficAllocation(\n        context\n      );\n\n      // Update metrics\n      this.metrics.totalRequests++;\n\n      return result;\n    } catch (error) {\n      console.error(\"Failed to get optimal provider:\", error);\n\n      // Fallback to default\n      return {\n        provider: \"bedrock\",\n        source: \"default\",\n        confidence: 0.5,\n      };\n    }\n  }\n\n  /**\n   * Record outcome and trigger optimization\n   */\n  async recordOutcome(\n    context: ExperimentContext,\n    provider: Arm,\n    metrics: {\n      success: boolean;\n      latencyMs: number;\n      costEuro: number;\n      qualityScore?: number;\n      userSatisfaction?: number;\n    }\n  ): Promise<void> {\n    try {\n      // Record in optimizer\n      await this.banditOptimizer.recordOutcome(\n        context,\n        provider,\n        metrics.success,\n        metrics.latencyMs,\n        metrics.costEuro,\n        metrics.qualityScore\n      );\n\n      // Check for performance alerts\n      await this.checkPerformanceAlerts(provider, metrics);\n\n      // Update system metrics\n      await this.updateSystemMetrics();\n    } catch (error) {\n      console.error(\"Failed to record outcome:\", error);\n    }\n  }\n\n  /**\n   * Get current system metrics\n   */\n  getMetrics(): SystemMetrics {\n    return { ...this.metrics };\n  }\n\n  /**\n   * Get optimization event history\n   */\n  getEventHistory(limit: number = 100): OptimizationEvent[] {\n    return this.eventHistory.slice(-limit);\n  }\n\n  /**\n   * Force optimization cycle\n   */\n  async forceOptimization(): Promise<void> {\n    await this.runOptimizationCycle();\n  }\n\n  /**\n   * Get system health status\n   */\n  async getHealthStatus(): Promise<{\n    system: \"healthy\" | \"warning\" | \"error\";\n    components: {\n      experiments: \"healthy\" | \"warning\" | \"error\";\n      bandit: \"healthy\" | \"warning\" | \"error\";\n      optimization: \"healthy\" | \"warning\" | \"error\";\n    };\n    details: Record<string, any>;\n  }> {\n    try {\n      const [experimentHealth, banditHealth] = await Promise.all([\n        this.experimentManager.healthCheck(),\n        Promise.resolve(this.banditOptimizer.healthCheck()),\n      ]);\n\n      const components = {\n        experiments: experimentHealth.connected\n          ? (\"healthy\" as const)\n          : (\"error\" as const),\n        bandit: banditHealth.status,\n        optimization: this.isRunning\n          ? (\"healthy\" as const)\n          : (\"warning\" as const),\n      };\n\n      const systemHealth = Object.values(components).includes(\"error\")\n        ? \"error\"\n        : Object.values(components).includes(\"warning\")\n        ? \"warning\"\n        : \"healthy\";\n\n      return {\n        system: systemHealth,\n        components,\n        details: {\n          experimentHealth,\n          banditHealth,\n          isRunning: this.isRunning,\n          totalRequests: this.metrics.totalRequests,\n          lastOptimization: this.metrics.lastOptimization,\n        },\n      };\n    } catch (error) {\n      return {\n        system: \"error\",\n        components: {\n          experiments: \"error\",\n          bandit: \"error\",\n          optimization: \"error\",\n        },\n        details: { error: error.message },\n      };\n    }\n  }\n\n  /**\n   * Start initial experiments\n   */\n  private async startInitialExperiments(): Promise<void> {\n    try {\n      // Start model routing optimization experiment\n      const routingExperiment = AI_EXPERIMENTS.MODEL_ROUTING_OPTIMIZATION;\n      await this.experimentManager.createAIExperiment(routingExperiment);\n      await this.experimentManager.startExperiment(routingExperiment.name);\n\n      this.logEvent({\n        type: \"experiment_started\",\n        details: {\n          experimentName: routingExperiment.name,\n          type: \"model_routing\",\n        },\n        impact: \"medium\",\n      });\n\n      // Start domain-specific routing experiment\n      const domainExperiment = AI_EXPERIMENTS.DOMAIN_SPECIFIC_ROUTING;\n      await this.experimentManager.createAIExperiment(domainExperiment);\n      await this.experimentManager.startExperiment(domainExperiment.name);\n\n      this.logEvent({\n        type: \"experiment_started\",\n        details: {\n          experimentName: domainExperiment.name,\n          type: \"domain_specific\",\n        },\n        impact: \"medium\",\n      });\n\n      console.log(\"Initial experiments started successfully\");\n    } catch (error) {\n      console.error(\"Failed to start initial experiments:\", error);\n    }\n  }\n\n  /**\n   * Start optimization loop\n   */\n  private startOptimizationLoop(): void {\n    this.optimizationInterval = setInterval(async () => {\n      await this.runOptimizationCycle();\n    }, 30 * 60 * 1000); // Every 30 minutes\n  }\n\n  /**\n   * Start automatic traffic allocation loop\n   */\n  private startTrafficAllocationLoop(): void {\n    this.trafficAllocationInterval = setInterval(async () => {\n      await this.updateTrafficAllocation();\n    }, this.config.trafficAllocationInterval * 60 * 1000); // Convert minutes to ms\n  }\n\n  /**\n   * Run a single optimization cycle\n   */\n  private async runOptimizationCycle(): Promise<void> {\n    try {\n      console.log(\"Running optimization cycle...\");\n\n      // Update system metrics\n      await this.updateSystemMetrics();\n\n      // Check for experiment completion\n      await this.checkExperimentCompletion();\n\n      // Get optimization recommendations\n      const recommendations =\n        this.banditOptimizer.getOptimizationRecommendations();\n      this.metrics.recommendations = recommendations.map((r) => r.description);\n\n      // Apply automatic optimizations\n      await this.applyAutoOptimizations(recommendations);\n\n      // Check if new experiments should be started\n      if (this.config.autoExperimentEnabled) {\n        await this.checkForNewExperiments();\n      }\n\n      this.metrics.lastOptimization = new Date();\n\n      this.logEvent({\n        type: \"auto_optimization\",\n        details: {\n          recommendations: recommendations.length,\n          systemHealth: this.metrics.systemHealth,\n        },\n        impact: \"low\",\n      });\n    } catch (error) {\n      console.error(\"Error in optimization cycle:\", error);\n      this.metrics.systemHealth = \"error\";\n    }\n  }\n\n  /**\n   * Update system metrics\n   */\n  private async updateSystemMetrics(): Promise<void> {\n    try {\n      // Get active experiments count\n      const activeExperiments =\n        await this.experimentManager.listActiveExperiments();\n      this.metrics.experimentsActive = activeExperiments.length;\n\n      // Get bandit performance\n      const banditStats = this.banditOptimizer.getBanditStats();\n      const bestArm = Object.entries(banditStats).reduce(\n        (best, [arm, stats]) => {\n          return stats.winRate > best.stats.winRate\n            ? { arm: arm as Arm, stats }\n            : best;\n        },\n        { arm: \"bedrock\" as Arm, stats: banditStats.bedrock }\n      );\n\n      this.metrics.banditPerformance = {\n        bestArm: bestArm.arm,\n        confidence:\n          bestArm.stats.trials > 30\n            ? Math.min(0.95, bestArm.stats.winRate + 0.1)\n            : 0.5,\n        winRate: bestArm.stats.winRate,\n      };\n\n      // Update system health\n      const health = await this.getHealthStatus();\n      this.metrics.systemHealth = health.system;\n    } catch (error) {\n      console.error(\"Failed to update system metrics:\", error);\n      this.metrics.systemHealth = \"error\";\n    }\n  }\n\n  /**\n   * Check for performance alerts\n   */\n  private async checkPerformanceAlerts(\n    provider: Arm,\n    metrics: {\n      success: boolean;\n      latencyMs: number;\n      costEuro: number;\n      qualityScore?: number;\n    }\n  ): Promise<void> {\n    const { performanceThresholds } = this.config;\n    const alerts = [];\n\n    // Check latency\n    if (metrics.latencyMs > performanceThresholds.maxLatency) {\n      alerts.push(\n        `High latency: ${metrics.latencyMs}ms > ${performanceThresholds.maxLatency}ms`\n      );\n    }\n\n    // Check cost\n    if (metrics.costEuro > performanceThresholds.maxCost) {\n      alerts.push(\n        `High cost: \u20AC${metrics.costEuro} > \u20AC${performanceThresholds.maxCost}`\n      );\n    }\n\n    // Check success rate (approximate)\n    const banditStats = this.banditOptimizer.getBanditStats();\n    const providerStats = banditStats[provider];\n    if (\n      providerStats.winRate < performanceThresholds.minWinRate &&\n      providerStats.trials > 10\n    ) {\n      alerts.push(\n        `Low win rate: ${(providerStats.winRate * 100).toFixed(1)}% < ${(\n          performanceThresholds.minWinRate * 100\n        ).toFixed(1)}%`\n      );\n    }\n\n    // Log alerts\n    if (alerts.length > 0) {\n      this.logEvent({\n        type: \"performance_alert\",\n        details: { provider, alerts, metrics },\n        impact: \"medium\",\n      });\n\n      console.warn(`Performance alerts for ${provider}:`, alerts);\n    }\n  }\n\n  /**\n   * Check for experiment completion\n   */\n  private async checkExperimentCompletion(): Promise<void> {\n    try {\n      const activeExperiments =\n        await this.experimentManager.listActiveExperiments();\n\n      for (const experimentName of activeExperiments) {\n        const result = await this.experimentManager.analyzeExperimentResults(\n          experimentName\n        );\n\n        if (\n          result?.recommendation &&\n          result.recommendation.confidence > this.config.significanceThreshold\n        ) {\n          // High confidence result found\n          if (this.config.autoStopEnabled) {\n            await this.experimentManager.stopExperiment(\n              experimentName,\n              `Auto-stop: High confidence winner (${result.recommendation.confidence})`\n            );\n\n            this.logEvent({\n              type: \"experiment_stopped\",\n              details: {\n                experimentName,\n                winner: result.recommendation.winningTreatment,\n                confidence: result.recommendation.confidence,\n                reason: \"auto_stop_high_confidence\",\n              },\n              impact: \"high\",\n            });\n          }\n        }\n      }\n    } catch (error) {\n      console.error(\"Failed to check experiment completion:\", error);\n    }\n  }\n\n  /**\n   * Apply automatic optimizations\n   */\n  private async applyAutoOptimizations(\n    recommendations: ReturnType<\n      BanditOptimizer[\"getOptimizationRecommendations\"]\n    >\n  ): Promise<void> {\n    const highPriorityRecs = recommendations.filter(\n      (r) => r.priority === \"high\"\n    );\n\n    for (const rec of highPriorityRecs) {\n      try {\n        if (rec.type === \"exploration\") {\n          // Increase exploration temporarily\n          const currentConfig = this.banditOptimizer.getConfig();\n          this.banditOptimizer.updateConfig({\n            explorationRate: Math.min(0.3, currentConfig.explorationRate * 1.5),\n          });\n\n          this.logEvent({\n            type: \"auto_optimization\",\n            details: {\n              action: \"increased_exploration\",\n              newRate: this.banditOptimizer.getConfig().explorationRate,\n            },\n            impact: \"medium\",\n          });\n\n          // Reset after 2 hours\n          setTimeout(() => {\n            this.banditOptimizer.updateConfig({\n              explorationRate: Math.max(0.05, currentConfig.explorationRate),\n            });\n          }, 2 * 60 * 60 * 1000);\n        }\n      } catch (error) {\n        console.error(`Failed to apply optimization: ${rec.type}`, error);\n      }\n    }\n  }\n\n  /**\n   * Check if new experiments should be started\n   */\n  private async checkForNewExperiments(): Promise<void> {\n    try {\n      // Only start new experiments if traffic is sufficient\n      if (this.metrics.totalRequests < this.config.minTrafficForExperiment) {\n        return;\n      }\n\n      const activeExperiments =\n        await this.experimentManager.listActiveExperiments();\n\n      // Don't start too many experiments at once\n      if (activeExperiments.length >= 2) {\n        return;\n      }\n\n      // Check if we should start context-specific experiments\n      const contextualPerformance =\n        this.banditOptimizer.analyzeContextualPerformance();\n      const promisingContexts = contextualPerformance.filter(\n        (ctx) =>\n          ctx.improvement > 0.2 && ctx.armPerformance[ctx.bestArm].trials > 50\n      );\n\n      if (promisingContexts.length > 0) {\n        // Could implement context-specific experiment creation here\n        console.log(\n          \"Promising contexts found for new experiments:\",\n          promisingContexts.map((c) => c.context)\n        );\n      }\n    } catch (error) {\n      console.error(\"Failed to check for new experiments:\", error);\n    }\n  }\n\n  /**\n   * Log optimization event\n   */\n  private logEvent(event: Omit<OptimizationEvent, \"timestamp\">): void {\n    const fullEvent: OptimizationEvent = {\n      timestamp: new Date(),\n      ...event,\n    };\n\n    this.eventHistory.push(fullEvent);\n\n    // Keep only last 1000 events\n    if (this.eventHistory.length > 1000) {\n      this.eventHistory = this.eventHistory.slice(-1000);\n    }\n\n    // Log high impact events\n    if (event.impact === \"high\") {\n      console.log(`[OPTIMIZATION] ${event.type}:`, event.details);\n    }\n  }\n\n  /**\n   * Get configuration\n   */\n  getConfig(): OptimizationSystemConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(updates: Partial<OptimizationSystemConfig>): void {\n    this.config = { ...this.config, ...updates };\n\n    this.logEvent({\n      type: \"auto_optimization\",\n      details: { action: \"config_updated\", updates },\n      impact: \"medium\",\n    });\n  }\n\n  /**\n   * Update traffic allocation automatically based on performance\n   */\n  private async updateTrafficAllocation(): Promise<void> {\n    try {\n      console.log(\"Updating automatic traffic allocation...\");\n\n      const banditStats = this.banditOptimizer.getBanditStats();\n      const contextualPerformance =\n        this.banditOptimizer.analyzeContextualPerformance();\n\n      // Calculate performance scores for each arm\n      const armScores = this.calculateArmPerformanceScores(banditStats);\n\n      // Calculate new traffic allocation based on performance\n      const newAllocation = this.calculateOptimalTrafficAllocation(\n        armScores,\n        banditStats\n      );\n\n      // Apply smoothing to prevent dramatic changes\n      const smoothedAllocation = this.smoothTrafficAllocation(\n        this.metrics.currentTrafficAllocation,\n        newAllocation\n      );\n\n      // Update traffic allocation\n      const previousAllocation = { ...this.metrics.currentTrafficAllocation };\n      this.metrics.currentTrafficAllocation = smoothedAllocation;\n      this.metrics.lastTrafficAllocation = new Date();\n\n      // Log the change\n      this.logEvent({\n        type: \"traffic_allocation_updated\",\n        details: {\n          previousAllocation,\n          newAllocation: smoothedAllocation,\n          armScores,\n          reason: \"automatic_performance_optimization\",\n        },\n        impact: \"medium\",\n      });\n\n      console.log(\"Traffic allocation updated:\", {\n        previous: previousAllocation,\n        new: smoothedAllocation,\n        scores: armScores,\n      });\n    } catch (error) {\n      console.error(\"Failed to update traffic allocation:\", error);\n\n      this.logEvent({\n        type: \"traffic_allocation_updated\",\n        details: {\n          error: error.message,\n          reason: \"allocation_update_failed\",\n        },\n        impact: \"high\",\n      });\n    }\n  }\n\n  /**\n   * Calculate performance scores for each arm\n   */\n  private calculateArmPerformanceScores(\n    banditStats: Record<Arm, any>\n  ): Record<Arm, number> {\n    const scores: Record<Arm, number> = {} as any;\n\n    (Object.keys(banditStats) as Arm[]).forEach((arm) => {\n      const stats = banditStats[arm];\n\n      if (stats.trials === 0) {\n        // No data yet, give neutral score\n        scores[arm] = 0.5;\n        return;\n      }\n\n      // Composite score based on multiple factors\n      const winRateScore = stats.winRate; // 0-1\n      const latencyScore = Math.max(0, 1 - stats.avgLatency / 3000); // Normalize to 0-1, 3s = 0\n      const costScore = Math.max(0, 1 - stats.avgCost / 0.2); // Normalize to 0-1, \u20AC0.2 = 0\n      const confidenceScore = Math.min(1, stats.trials / 50); // More trials = higher confidence\n\n      // Weighted composite score\n      scores[arm] =\n        winRateScore * 0.4 + // 40% win rate\n        latencyScore * 0.3 + // 30% latency\n        costScore * 0.2 + // 20% cost\n        confidenceScore * 0.1; // 10% confidence\n    });\n\n    return scores;\n  }\n\n  /**\n   * Calculate optimal traffic allocation based on performance scores\n   */\n  private calculateOptimalTrafficAllocation(\n    armScores: Record<Arm, number>,\n    banditStats: Record<Arm, any>\n  ): Record<Arm, number> {\n    const arms: Arm[] = [\"bedrock\", \"google\", \"meta\"];\n    const allocation: Record<Arm, number> = {} as any;\n\n    // Get total score\n    const totalScore = arms.reduce((sum, arm) => sum + armScores[arm], 0);\n\n    if (totalScore === 0) {\n      // No performance data, use equal allocation\n      arms.forEach((arm) => {\n        allocation[arm] = 1 / arms.length;\n      });\n      return allocation;\n    }\n\n    // Calculate base allocation based on performance scores\n    arms.forEach((arm) => {\n      allocation[arm] = armScores[arm] / totalScore;\n    });\n\n    // Apply exploration bonus for under-explored arms\n    const minTrials = Math.min(...arms.map((arm) => banditStats[arm].trials));\n    const maxTrials = Math.max(...arms.map((arm) => banditStats[arm].trials));\n\n    if (maxTrials > 0) {\n      arms.forEach((arm) => {\n        const trials = banditStats[arm].trials;\n        const explorationBonus = (maxTrials - trials) / (maxTrials * 10); // Small bonus for under-explored arms\n        allocation[arm] += explorationBonus;\n      });\n    }\n\n    // Ensure minimum allocation for each arm (at least 5%)\n    const minAllocation = 0.05;\n    arms.forEach((arm) => {\n      allocation[arm] = Math.max(minAllocation, allocation[arm]);\n    });\n\n    // Normalize to ensure sum = 1\n    const sum = arms.reduce((total, arm) => total + allocation[arm], 0);\n    arms.forEach((arm) => {\n      allocation[arm] = allocation[arm] / sum;\n    });\n\n    return allocation;\n  }\n\n  /**\n   * Apply smoothing to prevent dramatic traffic allocation changes\n   */\n  private smoothTrafficAllocation(\n    currentAllocation: Record<Arm, number>,\n    targetAllocation: Record<Arm, number>,\n    smoothingFactor: number = 0.3 // How much to move toward target (0-1)\n  ): Record<Arm, number> {\n    const smoothedAllocation: Record<Arm, number> = {} as any;\n\n    (Object.keys(currentAllocation) as Arm[]).forEach((arm) => {\n      const current = currentAllocation[arm];\n      const target = targetAllocation[arm];\n\n      // Move toward target by smoothingFactor\n      smoothedAllocation[arm] = current + (target - current) * smoothingFactor;\n    });\n\n    // Normalize to ensure sum = 1\n    const sum = Object.values(smoothedAllocation).reduce(\n      (total, val) => total + val,\n      0\n    );\n    (Object.keys(smoothedAllocation) as Arm[]).forEach((arm) => {\n      smoothedAllocation[arm] = smoothedAllocation[arm] / sum;\n    });\n\n    return smoothedAllocation;\n  }\n\n  /**\n   * Get optimal provider with automatic traffic allocation\n   */\n  async getOptimalProviderWithTrafficAllocation(\n    context: ExperimentContext\n  ): Promise<{\n    provider: Arm;\n    source: \"experiment\" | \"bandit\" | \"traffic_allocation\" | \"default\";\n    confidence: number;\n    experimentName?: string;\n    allocationProbability?: number;\n  }> {\n    try {\n      // First check for active experiments\n      if (this.experimentManager) {\n        try {\n          const experimentResult =\n            await this.experimentManager.getOptimalProvider(context);\n          if (experimentResult.source === \"experiment\") {\n            return {\n              provider: experimentResult.provider,\n              source: \"experiment\",\n              confidence: experimentResult.confidence,\n              experimentName: experimentResult.experimentName,\n            };\n          }\n        } catch (error) {\n          console.warn(\n            \"Failed to get experiment assignment, falling back to traffic allocation:\",\n            error\n          );\n        }\n      }\n\n      // Use automatic traffic allocation if enabled\n      if (this.config.autoTrafficAllocationEnabled) {\n        const selectedArm = this.selectArmByTrafficAllocation();\n        const allocationProbability =\n          this.metrics.currentTrafficAllocation[selectedArm];\n\n        return {\n          provider: selectedArm,\n          source: \"traffic_allocation\",\n          confidence: Math.min(0.95, allocationProbability + 0.2), // Higher allocation = higher confidence\n          allocationProbability,\n        };\n      }\n\n      // Fall back to bandit optimization\n      const result = await this.banditOptimizer.getOptimalArm(context);\n      return {\n        provider: result.recommendedArm,\n        source: \"bandit\",\n        confidence: result.confidence,\n      };\n    } catch (error) {\n      console.error(\"Failed to get optimal provider:\", error);\n      return {\n        provider: \"bedrock\",\n        source: \"default\",\n        confidence: 0.5,\n      };\n    }\n  }\n\n  /**\n   * Select arm based on current traffic allocation probabilities\n   */\n  private selectArmByTrafficAllocation(): Arm {\n    const random = Math.random();\n    let cumulativeProbability = 0;\n\n    const arms: Arm[] = [\"bedrock\", \"google\", \"meta\"];\n\n    for (const arm of arms) {\n      cumulativeProbability += this.metrics.currentTrafficAllocation[arm];\n      if (random <= cumulativeProbability) {\n        return arm;\n      }\n    }\n\n    // Fallback (should not happen with proper normalization)\n    return \"bedrock\";\n  }\n\n  /**\n   * Force traffic allocation update\n   */\n  async forceTrafficAllocationUpdate(): Promise<void> {\n    await this.updateTrafficAllocation();\n  }\n\n  /**\n   * Get current traffic allocation\n   */\n  getCurrentTrafficAllocation(): Record<Arm, number> {\n    return { ...this.metrics.currentTrafficAllocation };\n  }\n\n  /**\n   * Export system state for persistence\n   */\n  exportState(): {\n    config: OptimizationSystemConfig;\n    metrics: SystemMetrics;\n    banditState: ReturnType<BanditOptimizer[\"exportState\"]>;\n    eventHistory: OptimizationEvent[];\n  } {\n    return {\n      config: this.config,\n      metrics: this.metrics,\n      banditState: this.banditOptimizer.exportState(),\n      eventHistory: this.eventHistory,\n    };\n  }\n}\n\n// Singleton instance for global use\nlet globalOptimizationSystem: ActiveOptimizationSystem | null = null;\n\n/**\n * Get or create the global optimization system\n */\nexport function getOptimizationSystem(\n  config?: Partial<OptimizationSystemConfig>\n): ActiveOptimizationSystem {\n  if (!globalOptimizationSystem) {\n    globalOptimizationSystem = new ActiveOptimizationSystem(config);\n  }\n  return globalOptimizationSystem;\n}\n\n/**\n * Initialize and start the global optimization system\n */\nexport async function initializeOptimizationSystem(\n  config?: Partial<OptimizationSystemConfig>\n): Promise<ActiveOptimizationSystem> {\n  const system = getOptimizationSystem(config);\n\n  if (!system[\"isRunning\"]) {\n    await system.start();\n  }\n\n  return system;\n}\n\n/**\n * Shutdown the global optimization system\n */\nexport async function shutdownOptimizationSystem(): Promise<void> {\n  if (globalOptimizationSystem) {\n    await globalOptimizationSystem.stop();\n    globalOptimizationSystem = null;\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a18420ebb5c29ed6351a9fe3990c3b0935ed96f2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1axj3s0gqi = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1axj3s0gqi();
cov_1axj3s0gqi().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1axj3s0gqi().s[1]++;
exports.ActiveOptimizationSystem = void 0;
/* istanbul ignore next */
cov_1axj3s0gqi().s[2]++;
exports.getOptimizationSystem = getOptimizationSystem;
/* istanbul ignore next */
cov_1axj3s0gqi().s[3]++;
exports.initializeOptimizationSystem = initializeOptimizationSystem;
/* istanbul ignore next */
cov_1axj3s0gqi().s[4]++;
exports.shutdownOptimizationSystem = shutdownOptimizationSystem;
const tslib_1 =
/* istanbul ignore next */
(cov_1axj3s0gqi().s[5]++, require("tslib"));
const bandit_controller_1 =
/* istanbul ignore next */
(cov_1axj3s0gqi().s[6]++, require("./bandit-controller"));
const bandit_optimizer_1 =
/* istanbul ignore next */
(cov_1axj3s0gqi().s[7]++, require("./bandit-optimizer"));
const evidently_experiments_1 =
/* istanbul ignore next */
(cov_1axj3s0gqi().s[8]++, require("./evidently-experiments"));
class ActiveOptimizationSystem {
  constructor(config =
  /* istanbul ignore next */
  (cov_1axj3s0gqi().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[0]++;
    cov_1axj3s0gqi().s[9]++;
    this.eventHistory = [];
    /* istanbul ignore next */
    cov_1axj3s0gqi().s[10]++;
    this.isRunning = false;
    /* istanbul ignore next */
    cov_1axj3s0gqi().s[11]++;
    this.config = Object.assign({
      projectName: "matbakh-ai-optimization",
      region: "eu-central-1",
      autoExperimentEnabled: true,
      experimentDuration: 14,
      minTrafficForExperiment: 100,
      significanceThreshold: 0.95,
      autoStopEnabled: true,
      autoTrafficAllocationEnabled: true,
      trafficAllocationInterval: 15,
      performanceThresholds: {
        minWinRate: 0.7,
        maxLatency: 2000,
        maxCost: 0.1
      }
    }, config);
    // Initialize components
    const bandit =
    /* istanbul ignore next */
    (cov_1axj3s0gqi().s[12]++, new bandit_controller_1.ThompsonBandit());
    /* istanbul ignore next */
    cov_1axj3s0gqi().s[13]++;
    this.experimentManager = new evidently_experiments_1.EvidentlyExperimentManager(this.config.projectName, this.config.region, bandit);
    /* istanbul ignore next */
    cov_1axj3s0gqi().s[14]++;
    this.banditOptimizer = new bandit_optimizer_1.BanditOptimizer(bandit, this.experimentManager, {
      autoOptimizationEnabled: true,
      explorationRate: 0.15,
      minTrialsForConfidence: 30,
      optimizationInterval: 60 // 1 hour
    });
    /* istanbul ignore next */
    cov_1axj3s0gqi().s[15]++;
    this.metrics = {
      totalRequests: 0,
      experimentsActive: 0,
      banditPerformance: {
        bestArm: "bedrock",
        confidence: 0.5,
        winRate: 0.5
      },
      systemHealth: "healthy",
      lastOptimization: new Date(),
      lastTrafficAllocation: new Date(),
      // NEW: Initialize traffic allocation timestamp
      currentTrafficAllocation: {
        // NEW: Initialize equal traffic allocation
        bedrock: 0.33,
        google: 0.33,
        meta: 0.34
      },
      recommendations: []
    };
  }
  /**
   * Start the active optimization system
   */
  start() {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[1]++;
    cov_1axj3s0gqi().s[16]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[2]++;
      cov_1axj3s0gqi().s[17]++;
      if (this.isRunning) {
        /* istanbul ignore next */
        cov_1axj3s0gqi().b[1][0]++;
        cov_1axj3s0gqi().s[18]++;
        console.warn("Optimization system is already running");
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[19]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1axj3s0gqi().b[1][1]++;
      }
      cov_1axj3s0gqi().s[20]++;
      try {
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[21]++;
        // Initialize Evidently project
        yield this.experimentManager.initializeProject();
        // Start initial experiments if enabled
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[22]++;
        if (this.config.autoExperimentEnabled) {
          /* istanbul ignore next */
          cov_1axj3s0gqi().b[2][0]++;
          cov_1axj3s0gqi().s[23]++;
          yield this.startInitialExperiments();
        } else
        /* istanbul ignore next */
        {
          cov_1axj3s0gqi().b[2][1]++;
        }
        // Start optimization loop
        cov_1axj3s0gqi().s[24]++;
        this.startOptimizationLoop();
        // Start automatic traffic allocation if enabled
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[25]++;
        if (this.config.autoTrafficAllocationEnabled) {
          /* istanbul ignore next */
          cov_1axj3s0gqi().b[3][0]++;
          cov_1axj3s0gqi().s[26]++;
          this.startTrafficAllocationLoop();
        } else
        /* istanbul ignore next */
        {
          cov_1axj3s0gqi().b[3][1]++;
        }
        cov_1axj3s0gqi().s[27]++;
        this.isRunning = true;
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[28]++;
        this.logEvent({
          type: "auto_optimization",
          details: {
            action: "system_started",
            config: this.config
          },
          impact: "high"
        });
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[29]++;
        console.log("Active Optimization System started successfully");
      } catch (error) {
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[30]++;
        console.error("Failed to start optimization system:", error);
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[31]++;
        throw error;
      }
    });
  }
  /**
   * Stop the active optimization system
   */
  stop() {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[3]++;
    cov_1axj3s0gqi().s[32]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[4]++;
      cov_1axj3s0gqi().s[33]++;
      if (!this.isRunning) {
        /* istanbul ignore next */
        cov_1axj3s0gqi().b[4][0]++;
        cov_1axj3s0gqi().s[34]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1axj3s0gqi().b[4][1]++;
      }
      // Stop optimization loop
      cov_1axj3s0gqi().s[35]++;
      if (this.optimizationInterval) {
        /* istanbul ignore next */
        cov_1axj3s0gqi().b[5][0]++;
        cov_1axj3s0gqi().s[36]++;
        clearInterval(this.optimizationInterval);
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[37]++;
        this.optimizationInterval = undefined;
      } else
      /* istanbul ignore next */
      {
        cov_1axj3s0gqi().b[5][1]++;
      }
      // Stop traffic allocation loop
      cov_1axj3s0gqi().s[38]++;
      if (this.trafficAllocationInterval) {
        /* istanbul ignore next */
        cov_1axj3s0gqi().b[6][0]++;
        cov_1axj3s0gqi().s[39]++;
        clearInterval(this.trafficAllocationInterval);
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[40]++;
        this.trafficAllocationInterval = undefined;
      } else
      /* istanbul ignore next */
      {
        cov_1axj3s0gqi().b[6][1]++;
      }
      // Stop active experiments if auto-stop is enabled
      cov_1axj3s0gqi().s[41]++;
      if (this.config.autoStopEnabled) {
        /* istanbul ignore next */
        cov_1axj3s0gqi().b[7][0]++;
        const activeExperiments =
        /* istanbul ignore next */
        (cov_1axj3s0gqi().s[42]++, yield this.experimentManager.listActiveExperiments());
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[43]++;
        for (const experimentName of activeExperiments) {
          /* istanbul ignore next */
          cov_1axj3s0gqi().s[44]++;
          yield this.experimentManager.stopExperiment(experimentName, "System shutdown");
        }
      } else
      /* istanbul ignore next */
      {
        cov_1axj3s0gqi().b[7][1]++;
      }
      cov_1axj3s0gqi().s[45]++;
      this.isRunning = false;
      /* istanbul ignore next */
      cov_1axj3s0gqi().s[46]++;
      this.logEvent({
        type: "auto_optimization",
        details: {
          action: "system_stopped"
        },
        impact: "high"
      });
      /* istanbul ignore next */
      cov_1axj3s0gqi().s[47]++;
      console.log("Active Optimization System stopped");
    });
  }
  /**
   * Get optimal model provider for a request
   */
  getOptimalProvider(context) {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[5]++;
    cov_1axj3s0gqi().s[48]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[6]++;
      cov_1axj3s0gqi().s[49]++;
      try {
        // Use the new traffic allocation method
        const result =
        /* istanbul ignore next */
        (cov_1axj3s0gqi().s[50]++, yield this.getOptimalProviderWithTrafficAllocation(context));
        // Update metrics
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[51]++;
        this.metrics.totalRequests++;
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[52]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[53]++;
        console.error("Failed to get optimal provider:", error);
        // Fallback to default
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[54]++;
        return {
          provider: "bedrock",
          source: "default",
          confidence: 0.5
        };
      }
    });
  }
  /**
   * Record outcome and trigger optimization
   */
  recordOutcome(context, provider, metrics) {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[7]++;
    cov_1axj3s0gqi().s[55]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[8]++;
      cov_1axj3s0gqi().s[56]++;
      try {
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[57]++;
        // Record in optimizer
        yield this.banditOptimizer.recordOutcome(context, provider, metrics.success, metrics.latencyMs, metrics.costEuro, metrics.qualityScore);
        // Check for performance alerts
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[58]++;
        yield this.checkPerformanceAlerts(provider, metrics);
        // Update system metrics
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[59]++;
        yield this.updateSystemMetrics();
      } catch (error) {
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[60]++;
        console.error("Failed to record outcome:", error);
      }
    });
  }
  /**
   * Get current system metrics
   */
  getMetrics() {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[9]++;
    cov_1axj3s0gqi().s[61]++;
    return Object.assign({}, this.metrics);
  }
  /**
   * Get optimization event history
   */
  getEventHistory(limit =
  /* istanbul ignore next */
  (cov_1axj3s0gqi().b[8][0]++, 100)) {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[10]++;
    cov_1axj3s0gqi().s[62]++;
    return this.eventHistory.slice(-limit);
  }
  /**
   * Force optimization cycle
   */
  forceOptimization() {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[11]++;
    cov_1axj3s0gqi().s[63]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[12]++;
      cov_1axj3s0gqi().s[64]++;
      yield this.runOptimizationCycle();
    });
  }
  /**
   * Get system health status
   */
  getHealthStatus() {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[13]++;
    cov_1axj3s0gqi().s[65]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[14]++;
      cov_1axj3s0gqi().s[66]++;
      try {
        const [experimentHealth, banditHealth] =
        /* istanbul ignore next */
        (cov_1axj3s0gqi().s[67]++, yield Promise.all([this.experimentManager.healthCheck(), Promise.resolve(this.banditOptimizer.healthCheck())]));
        const components =
        /* istanbul ignore next */
        (cov_1axj3s0gqi().s[68]++, {
          experiments: experimentHealth.connected ?
          /* istanbul ignore next */
          (cov_1axj3s0gqi().b[9][0]++, "healthy") :
          /* istanbul ignore next */
          (cov_1axj3s0gqi().b[9][1]++, "error"),
          bandit: banditHealth.status,
          optimization: this.isRunning ?
          /* istanbul ignore next */
          (cov_1axj3s0gqi().b[10][0]++, "healthy") :
          /* istanbul ignore next */
          (cov_1axj3s0gqi().b[10][1]++, "warning")
        });
        const systemHealth =
        /* istanbul ignore next */
        (cov_1axj3s0gqi().s[69]++, Object.values(components).includes("error") ?
        /* istanbul ignore next */
        (cov_1axj3s0gqi().b[11][0]++, "error") :
        /* istanbul ignore next */
        (cov_1axj3s0gqi().b[11][1]++, Object.values(components).includes("warning") ?
        /* istanbul ignore next */
        (cov_1axj3s0gqi().b[12][0]++, "warning") :
        /* istanbul ignore next */
        (cov_1axj3s0gqi().b[12][1]++, "healthy")));
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[70]++;
        return {
          system: systemHealth,
          components,
          details: {
            experimentHealth,
            banditHealth,
            isRunning: this.isRunning,
            totalRequests: this.metrics.totalRequests,
            lastOptimization: this.metrics.lastOptimization
          }
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[71]++;
        return {
          system: "error",
          components: {
            experiments: "error",
            bandit: "error",
            optimization: "error"
          },
          details: {
            error: error.message
          }
        };
      }
    });
  }
  /**
   * Start initial experiments
   */
  startInitialExperiments() {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[15]++;
    cov_1axj3s0gqi().s[72]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[16]++;
      cov_1axj3s0gqi().s[73]++;
      try {
        // Start model routing optimization experiment
        const routingExperiment =
        /* istanbul ignore next */
        (cov_1axj3s0gqi().s[74]++, evidently_experiments_1.AI_EXPERIMENTS.MODEL_ROUTING_OPTIMIZATION);
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[75]++;
        yield this.experimentManager.createAIExperiment(routingExperiment);
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[76]++;
        yield this.experimentManager.startExperiment(routingExperiment.name);
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[77]++;
        this.logEvent({
          type: "experiment_started",
          details: {
            experimentName: routingExperiment.name,
            type: "model_routing"
          },
          impact: "medium"
        });
        // Start domain-specific routing experiment
        const domainExperiment =
        /* istanbul ignore next */
        (cov_1axj3s0gqi().s[78]++, evidently_experiments_1.AI_EXPERIMENTS.DOMAIN_SPECIFIC_ROUTING);
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[79]++;
        yield this.experimentManager.createAIExperiment(domainExperiment);
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[80]++;
        yield this.experimentManager.startExperiment(domainExperiment.name);
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[81]++;
        this.logEvent({
          type: "experiment_started",
          details: {
            experimentName: domainExperiment.name,
            type: "domain_specific"
          },
          impact: "medium"
        });
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[82]++;
        console.log("Initial experiments started successfully");
      } catch (error) {
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[83]++;
        console.error("Failed to start initial experiments:", error);
      }
    });
  }
  /**
   * Start optimization loop
   */
  startOptimizationLoop() {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[17]++;
    cov_1axj3s0gqi().s[84]++;
    this.optimizationInterval = setInterval(() => {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[18]++;
      cov_1axj3s0gqi().s[85]++;
      return tslib_1.__awaiter(this, void 0, void 0, function* () {
        /* istanbul ignore next */
        cov_1axj3s0gqi().f[19]++;
        cov_1axj3s0gqi().s[86]++;
        yield this.runOptimizationCycle();
      });
    }, 30 * 60 * 1000); // Every 30 minutes
  }
  /**
   * Start automatic traffic allocation loop
   */
  startTrafficAllocationLoop() {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[20]++;
    cov_1axj3s0gqi().s[87]++;
    this.trafficAllocationInterval = setInterval(() => {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[21]++;
      cov_1axj3s0gqi().s[88]++;
      return tslib_1.__awaiter(this, void 0, void 0, function* () {
        /* istanbul ignore next */
        cov_1axj3s0gqi().f[22]++;
        cov_1axj3s0gqi().s[89]++;
        yield this.updateTrafficAllocation();
      });
    }, this.config.trafficAllocationInterval * 60 * 1000); // Convert minutes to ms
  }
  /**
   * Run a single optimization cycle
   */
  runOptimizationCycle() {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[23]++;
    cov_1axj3s0gqi().s[90]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[24]++;
      cov_1axj3s0gqi().s[91]++;
      try {
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[92]++;
        console.log("Running optimization cycle...");
        // Update system metrics
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[93]++;
        yield this.updateSystemMetrics();
        // Check for experiment completion
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[94]++;
        yield this.checkExperimentCompletion();
        // Get optimization recommendations
        const recommendations =
        /* istanbul ignore next */
        (cov_1axj3s0gqi().s[95]++, this.banditOptimizer.getOptimizationRecommendations());
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[96]++;
        this.metrics.recommendations = recommendations.map(r => {
          /* istanbul ignore next */
          cov_1axj3s0gqi().f[25]++;
          cov_1axj3s0gqi().s[97]++;
          return r.description;
        });
        // Apply automatic optimizations
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[98]++;
        yield this.applyAutoOptimizations(recommendations);
        // Check if new experiments should be started
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[99]++;
        if (this.config.autoExperimentEnabled) {
          /* istanbul ignore next */
          cov_1axj3s0gqi().b[13][0]++;
          cov_1axj3s0gqi().s[100]++;
          yield this.checkForNewExperiments();
        } else
        /* istanbul ignore next */
        {
          cov_1axj3s0gqi().b[13][1]++;
        }
        cov_1axj3s0gqi().s[101]++;
        this.metrics.lastOptimization = new Date();
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[102]++;
        this.logEvent({
          type: "auto_optimization",
          details: {
            recommendations: recommendations.length,
            systemHealth: this.metrics.systemHealth
          },
          impact: "low"
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[103]++;
        console.error("Error in optimization cycle:", error);
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[104]++;
        this.metrics.systemHealth = "error";
      }
    });
  }
  /**
   * Update system metrics
   */
  updateSystemMetrics() {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[26]++;
    cov_1axj3s0gqi().s[105]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[27]++;
      cov_1axj3s0gqi().s[106]++;
      try {
        // Get active experiments count
        const activeExperiments =
        /* istanbul ignore next */
        (cov_1axj3s0gqi().s[107]++, yield this.experimentManager.listActiveExperiments());
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[108]++;
        this.metrics.experimentsActive = activeExperiments.length;
        // Get bandit performance
        const banditStats =
        /* istanbul ignore next */
        (cov_1axj3s0gqi().s[109]++, this.banditOptimizer.getBanditStats());
        const bestArm =
        /* istanbul ignore next */
        (cov_1axj3s0gqi().s[110]++, Object.entries(banditStats).reduce((best, [arm, stats]) => {
          /* istanbul ignore next */
          cov_1axj3s0gqi().f[28]++;
          cov_1axj3s0gqi().s[111]++;
          return stats.winRate > best.stats.winRate ?
          /* istanbul ignore next */
          (cov_1axj3s0gqi().b[14][0]++, {
            arm: arm,
            stats
          }) :
          /* istanbul ignore next */
          (cov_1axj3s0gqi().b[14][1]++, best);
        }, {
          arm: "bedrock",
          stats: banditStats.bedrock
        }));
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[112]++;
        this.metrics.banditPerformance = {
          bestArm: bestArm.arm,
          confidence: bestArm.stats.trials > 30 ?
          /* istanbul ignore next */
          (cov_1axj3s0gqi().b[15][0]++, Math.min(0.95, bestArm.stats.winRate + 0.1)) :
          /* istanbul ignore next */
          (cov_1axj3s0gqi().b[15][1]++, 0.5),
          winRate: bestArm.stats.winRate
        };
        // Update system health
        const health =
        /* istanbul ignore next */
        (cov_1axj3s0gqi().s[113]++, yield this.getHealthStatus());
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[114]++;
        this.metrics.systemHealth = health.system;
      } catch (error) {
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[115]++;
        console.error("Failed to update system metrics:", error);
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[116]++;
        this.metrics.systemHealth = "error";
      }
    });
  }
  /**
   * Check for performance alerts
   */
  checkPerformanceAlerts(provider, metrics) {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[29]++;
    cov_1axj3s0gqi().s[117]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[30]++;
      const {
        performanceThresholds
      } =
      /* istanbul ignore next */
      (cov_1axj3s0gqi().s[118]++, this.config);
      const alerts =
      /* istanbul ignore next */
      (cov_1axj3s0gqi().s[119]++, []);
      // Check latency
      /* istanbul ignore next */
      cov_1axj3s0gqi().s[120]++;
      if (metrics.latencyMs > performanceThresholds.maxLatency) {
        /* istanbul ignore next */
        cov_1axj3s0gqi().b[16][0]++;
        cov_1axj3s0gqi().s[121]++;
        alerts.push(`High latency: ${metrics.latencyMs}ms > ${performanceThresholds.maxLatency}ms`);
      } else
      /* istanbul ignore next */
      {
        cov_1axj3s0gqi().b[16][1]++;
      }
      // Check cost
      cov_1axj3s0gqi().s[122]++;
      if (metrics.costEuro > performanceThresholds.maxCost) {
        /* istanbul ignore next */
        cov_1axj3s0gqi().b[17][0]++;
        cov_1axj3s0gqi().s[123]++;
        alerts.push(`High cost: €${metrics.costEuro} > €${performanceThresholds.maxCost}`);
      } else
      /* istanbul ignore next */
      {
        cov_1axj3s0gqi().b[17][1]++;
      }
      // Check success rate (approximate)
      const banditStats =
      /* istanbul ignore next */
      (cov_1axj3s0gqi().s[124]++, this.banditOptimizer.getBanditStats());
      const providerStats =
      /* istanbul ignore next */
      (cov_1axj3s0gqi().s[125]++, banditStats[provider]);
      /* istanbul ignore next */
      cov_1axj3s0gqi().s[126]++;
      if (
      /* istanbul ignore next */
      (cov_1axj3s0gqi().b[19][0]++, providerStats.winRate < performanceThresholds.minWinRate) &&
      /* istanbul ignore next */
      (cov_1axj3s0gqi().b[19][1]++, providerStats.trials > 10)) {
        /* istanbul ignore next */
        cov_1axj3s0gqi().b[18][0]++;
        cov_1axj3s0gqi().s[127]++;
        alerts.push(`Low win rate: ${(providerStats.winRate * 100).toFixed(1)}% < ${(performanceThresholds.minWinRate * 100).toFixed(1)}%`);
      } else
      /* istanbul ignore next */
      {
        cov_1axj3s0gqi().b[18][1]++;
      }
      // Log alerts
      cov_1axj3s0gqi().s[128]++;
      if (alerts.length > 0) {
        /* istanbul ignore next */
        cov_1axj3s0gqi().b[20][0]++;
        cov_1axj3s0gqi().s[129]++;
        this.logEvent({
          type: "performance_alert",
          details: {
            provider,
            alerts,
            metrics
          },
          impact: "medium"
        });
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[130]++;
        console.warn(`Performance alerts for ${provider}:`, alerts);
      } else
      /* istanbul ignore next */
      {
        cov_1axj3s0gqi().b[20][1]++;
      }
    });
  }
  /**
   * Check for experiment completion
   */
  checkExperimentCompletion() {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[31]++;
    cov_1axj3s0gqi().s[131]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[32]++;
      cov_1axj3s0gqi().s[132]++;
      try {
        const activeExperiments =
        /* istanbul ignore next */
        (cov_1axj3s0gqi().s[133]++, yield this.experimentManager.listActiveExperiments());
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[134]++;
        for (const experimentName of activeExperiments) {
          const result =
          /* istanbul ignore next */
          (cov_1axj3s0gqi().s[135]++, yield this.experimentManager.analyzeExperimentResults(experimentName));
          /* istanbul ignore next */
          cov_1axj3s0gqi().s[136]++;
          if (
          /* istanbul ignore next */
          (cov_1axj3s0gqi().b[22][0]++,
          /* istanbul ignore next */
          (cov_1axj3s0gqi().b[24][0]++, result === null) ||
          /* istanbul ignore next */
          (cov_1axj3s0gqi().b[24][1]++, result === void 0) ?
          /* istanbul ignore next */
          (cov_1axj3s0gqi().b[23][0]++, void 0) :
          /* istanbul ignore next */
          (cov_1axj3s0gqi().b[23][1]++, result.recommendation)) &&
          /* istanbul ignore next */
          (cov_1axj3s0gqi().b[22][1]++, result.recommendation.confidence > this.config.significanceThreshold)) {
            /* istanbul ignore next */
            cov_1axj3s0gqi().b[21][0]++;
            cov_1axj3s0gqi().s[137]++;
            // High confidence result found
            if (this.config.autoStopEnabled) {
              /* istanbul ignore next */
              cov_1axj3s0gqi().b[25][0]++;
              cov_1axj3s0gqi().s[138]++;
              yield this.experimentManager.stopExperiment(experimentName, `Auto-stop: High confidence winner (${result.recommendation.confidence})`);
              /* istanbul ignore next */
              cov_1axj3s0gqi().s[139]++;
              this.logEvent({
                type: "experiment_stopped",
                details: {
                  experimentName,
                  winner: result.recommendation.winningTreatment,
                  confidence: result.recommendation.confidence,
                  reason: "auto_stop_high_confidence"
                },
                impact: "high"
              });
            } else
            /* istanbul ignore next */
            {
              cov_1axj3s0gqi().b[25][1]++;
            }
          } else
          /* istanbul ignore next */
          {
            cov_1axj3s0gqi().b[21][1]++;
          }
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[140]++;
        console.error("Failed to check experiment completion:", error);
      }
    });
  }
  /**
   * Apply automatic optimizations
   */
  applyAutoOptimizations(recommendations) {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[33]++;
    cov_1axj3s0gqi().s[141]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[34]++;
      const highPriorityRecs =
      /* istanbul ignore next */
      (cov_1axj3s0gqi().s[142]++, recommendations.filter(r => {
        /* istanbul ignore next */
        cov_1axj3s0gqi().f[35]++;
        cov_1axj3s0gqi().s[143]++;
        return r.priority === "high";
      }));
      /* istanbul ignore next */
      cov_1axj3s0gqi().s[144]++;
      for (const rec of highPriorityRecs) {
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[145]++;
        try {
          /* istanbul ignore next */
          cov_1axj3s0gqi().s[146]++;
          if (rec.type === "exploration") {
            /* istanbul ignore next */
            cov_1axj3s0gqi().b[26][0]++;
            // Increase exploration temporarily
            const currentConfig =
            /* istanbul ignore next */
            (cov_1axj3s0gqi().s[147]++, this.banditOptimizer.getConfig());
            /* istanbul ignore next */
            cov_1axj3s0gqi().s[148]++;
            this.banditOptimizer.updateConfig({
              explorationRate: Math.min(0.3, currentConfig.explorationRate * 1.5)
            });
            /* istanbul ignore next */
            cov_1axj3s0gqi().s[149]++;
            this.logEvent({
              type: "auto_optimization",
              details: {
                action: "increased_exploration",
                newRate: this.banditOptimizer.getConfig().explorationRate
              },
              impact: "medium"
            });
            // Reset after 2 hours
            /* istanbul ignore next */
            cov_1axj3s0gqi().s[150]++;
            setTimeout(() => {
              /* istanbul ignore next */
              cov_1axj3s0gqi().f[36]++;
              cov_1axj3s0gqi().s[151]++;
              this.banditOptimizer.updateConfig({
                explorationRate: Math.max(0.05, currentConfig.explorationRate)
              });
            }, 2 * 60 * 60 * 1000);
          } else
          /* istanbul ignore next */
          {
            cov_1axj3s0gqi().b[26][1]++;
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_1axj3s0gqi().s[152]++;
          console.error(`Failed to apply optimization: ${rec.type}`, error);
        }
      }
    });
  }
  /**
   * Check if new experiments should be started
   */
  checkForNewExperiments() {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[37]++;
    cov_1axj3s0gqi().s[153]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[38]++;
      cov_1axj3s0gqi().s[154]++;
      try {
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[155]++;
        // Only start new experiments if traffic is sufficient
        if (this.metrics.totalRequests < this.config.minTrafficForExperiment) {
          /* istanbul ignore next */
          cov_1axj3s0gqi().b[27][0]++;
          cov_1axj3s0gqi().s[156]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_1axj3s0gqi().b[27][1]++;
        }
        const activeExperiments =
        /* istanbul ignore next */
        (cov_1axj3s0gqi().s[157]++, yield this.experimentManager.listActiveExperiments());
        // Don't start too many experiments at once
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[158]++;
        if (activeExperiments.length >= 2) {
          /* istanbul ignore next */
          cov_1axj3s0gqi().b[28][0]++;
          cov_1axj3s0gqi().s[159]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_1axj3s0gqi().b[28][1]++;
        }
        // Check if we should start context-specific experiments
        const contextualPerformance =
        /* istanbul ignore next */
        (cov_1axj3s0gqi().s[160]++, this.banditOptimizer.analyzeContextualPerformance());
        const promisingContexts =
        /* istanbul ignore next */
        (cov_1axj3s0gqi().s[161]++, contextualPerformance.filter(ctx => {
          /* istanbul ignore next */
          cov_1axj3s0gqi().f[39]++;
          cov_1axj3s0gqi().s[162]++;
          return /* istanbul ignore next */(cov_1axj3s0gqi().b[29][0]++, ctx.improvement > 0.2) &&
          /* istanbul ignore next */
          (cov_1axj3s0gqi().b[29][1]++, ctx.armPerformance[ctx.bestArm].trials > 50);
        }));
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[163]++;
        if (promisingContexts.length > 0) {
          /* istanbul ignore next */
          cov_1axj3s0gqi().b[30][0]++;
          cov_1axj3s0gqi().s[164]++;
          // Could implement context-specific experiment creation here
          console.log("Promising contexts found for new experiments:", promisingContexts.map(c => {
            /* istanbul ignore next */
            cov_1axj3s0gqi().f[40]++;
            cov_1axj3s0gqi().s[165]++;
            return c.context;
          }));
        } else
        /* istanbul ignore next */
        {
          cov_1axj3s0gqi().b[30][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[166]++;
        console.error("Failed to check for new experiments:", error);
      }
    });
  }
  /**
   * Log optimization event
   */
  logEvent(event) {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[41]++;
    const fullEvent =
    /* istanbul ignore next */
    (cov_1axj3s0gqi().s[167]++, Object.assign({
      timestamp: new Date()
    }, event));
    /* istanbul ignore next */
    cov_1axj3s0gqi().s[168]++;
    this.eventHistory.push(fullEvent);
    // Keep only last 1000 events
    /* istanbul ignore next */
    cov_1axj3s0gqi().s[169]++;
    if (this.eventHistory.length > 1000) {
      /* istanbul ignore next */
      cov_1axj3s0gqi().b[31][0]++;
      cov_1axj3s0gqi().s[170]++;
      this.eventHistory = this.eventHistory.slice(-1000);
    } else
    /* istanbul ignore next */
    {
      cov_1axj3s0gqi().b[31][1]++;
    }
    // Log high impact events
    cov_1axj3s0gqi().s[171]++;
    if (event.impact === "high") {
      /* istanbul ignore next */
      cov_1axj3s0gqi().b[32][0]++;
      cov_1axj3s0gqi().s[172]++;
      console.log(`[OPTIMIZATION] ${event.type}:`, event.details);
    } else
    /* istanbul ignore next */
    {
      cov_1axj3s0gqi().b[32][1]++;
    }
  }
  /**
   * Get configuration
   */
  getConfig() {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[42]++;
    cov_1axj3s0gqi().s[173]++;
    return Object.assign({}, this.config);
  }
  /**
   * Update configuration
   */
  updateConfig(updates) {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[43]++;
    cov_1axj3s0gqi().s[174]++;
    this.config = Object.assign(Object.assign({}, this.config), updates);
    /* istanbul ignore next */
    cov_1axj3s0gqi().s[175]++;
    this.logEvent({
      type: "auto_optimization",
      details: {
        action: "config_updated",
        updates
      },
      impact: "medium"
    });
  }
  /**
   * Update traffic allocation automatically based on performance
   */
  updateTrafficAllocation() {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[44]++;
    cov_1axj3s0gqi().s[176]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[45]++;
      cov_1axj3s0gqi().s[177]++;
      try {
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[178]++;
        console.log("Updating automatic traffic allocation...");
        const banditStats =
        /* istanbul ignore next */
        (cov_1axj3s0gqi().s[179]++, this.banditOptimizer.getBanditStats());
        const contextualPerformance =
        /* istanbul ignore next */
        (cov_1axj3s0gqi().s[180]++, this.banditOptimizer.analyzeContextualPerformance());
        // Calculate performance scores for each arm
        const armScores =
        /* istanbul ignore next */
        (cov_1axj3s0gqi().s[181]++, this.calculateArmPerformanceScores(banditStats));
        // Calculate new traffic allocation based on performance
        const newAllocation =
        /* istanbul ignore next */
        (cov_1axj3s0gqi().s[182]++, this.calculateOptimalTrafficAllocation(armScores, banditStats));
        // Apply smoothing to prevent dramatic changes
        const smoothedAllocation =
        /* istanbul ignore next */
        (cov_1axj3s0gqi().s[183]++, this.smoothTrafficAllocation(this.metrics.currentTrafficAllocation, newAllocation));
        // Update traffic allocation
        const previousAllocation =
        /* istanbul ignore next */
        (cov_1axj3s0gqi().s[184]++, Object.assign({}, this.metrics.currentTrafficAllocation));
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[185]++;
        this.metrics.currentTrafficAllocation = smoothedAllocation;
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[186]++;
        this.metrics.lastTrafficAllocation = new Date();
        // Log the change
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[187]++;
        this.logEvent({
          type: "traffic_allocation_updated",
          details: {
            previousAllocation,
            newAllocation: smoothedAllocation,
            armScores,
            reason: "automatic_performance_optimization"
          },
          impact: "medium"
        });
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[188]++;
        console.log("Traffic allocation updated:", {
          previous: previousAllocation,
          new: smoothedAllocation,
          scores: armScores
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[189]++;
        console.error("Failed to update traffic allocation:", error);
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[190]++;
        this.logEvent({
          type: "traffic_allocation_updated",
          details: {
            error: error.message,
            reason: "allocation_update_failed"
          },
          impact: "high"
        });
      }
    });
  }
  /**
   * Calculate performance scores for each arm
   */
  calculateArmPerformanceScores(banditStats) {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[46]++;
    const scores =
    /* istanbul ignore next */
    (cov_1axj3s0gqi().s[191]++, {});
    /* istanbul ignore next */
    cov_1axj3s0gqi().s[192]++;
    Object.keys(banditStats).forEach(arm => {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[47]++;
      const stats =
      /* istanbul ignore next */
      (cov_1axj3s0gqi().s[193]++, banditStats[arm]);
      /* istanbul ignore next */
      cov_1axj3s0gqi().s[194]++;
      if (stats.trials === 0) {
        /* istanbul ignore next */
        cov_1axj3s0gqi().b[33][0]++;
        cov_1axj3s0gqi().s[195]++;
        // No data yet, give neutral score
        scores[arm] = 0.5;
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[196]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1axj3s0gqi().b[33][1]++;
      }
      // Composite score based on multiple factors
      const winRateScore =
      /* istanbul ignore next */
      (cov_1axj3s0gqi().s[197]++, stats.winRate); // 0-1
      const latencyScore =
      /* istanbul ignore next */
      (cov_1axj3s0gqi().s[198]++, Math.max(0, 1 - stats.avgLatency / 3000)); // Normalize to 0-1, 3s = 0
      const costScore =
      /* istanbul ignore next */
      (cov_1axj3s0gqi().s[199]++, Math.max(0, 1 - stats.avgCost / 0.2)); // Normalize to 0-1, €0.2 = 0
      const confidenceScore =
      /* istanbul ignore next */
      (cov_1axj3s0gqi().s[200]++, Math.min(1, stats.trials / 50)); // More trials = higher confidence
      // Weighted composite score
      /* istanbul ignore next */
      cov_1axj3s0gqi().s[201]++;
      scores[arm] = winRateScore * 0.4 +
      // 40% win rate
      latencyScore * 0.3 +
      // 30% latency
      costScore * 0.2 +
      // 20% cost
      confidenceScore * 0.1; // 10% confidence
    });
    /* istanbul ignore next */
    cov_1axj3s0gqi().s[202]++;
    return scores;
  }
  /**
   * Calculate optimal traffic allocation based on performance scores
   */
  calculateOptimalTrafficAllocation(armScores, banditStats) {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[48]++;
    const arms =
    /* istanbul ignore next */
    (cov_1axj3s0gqi().s[203]++, ["bedrock", "google", "meta"]);
    const allocation =
    /* istanbul ignore next */
    (cov_1axj3s0gqi().s[204]++, {});
    // Get total score
    const totalScore =
    /* istanbul ignore next */
    (cov_1axj3s0gqi().s[205]++, arms.reduce((sum, arm) => {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[49]++;
      cov_1axj3s0gqi().s[206]++;
      return sum + armScores[arm];
    }, 0));
    /* istanbul ignore next */
    cov_1axj3s0gqi().s[207]++;
    if (totalScore === 0) {
      /* istanbul ignore next */
      cov_1axj3s0gqi().b[34][0]++;
      cov_1axj3s0gqi().s[208]++;
      // No performance data, use equal allocation
      arms.forEach(arm => {
        /* istanbul ignore next */
        cov_1axj3s0gqi().f[50]++;
        cov_1axj3s0gqi().s[209]++;
        allocation[arm] = 1 / arms.length;
      });
      /* istanbul ignore next */
      cov_1axj3s0gqi().s[210]++;
      return allocation;
    } else
    /* istanbul ignore next */
    {
      cov_1axj3s0gqi().b[34][1]++;
    }
    // Calculate base allocation based on performance scores
    cov_1axj3s0gqi().s[211]++;
    arms.forEach(arm => {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[51]++;
      cov_1axj3s0gqi().s[212]++;
      allocation[arm] = armScores[arm] / totalScore;
    });
    // Apply exploration bonus for under-explored arms
    const minTrials =
    /* istanbul ignore next */
    (cov_1axj3s0gqi().s[213]++, Math.min(...arms.map(arm => {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[52]++;
      cov_1axj3s0gqi().s[214]++;
      return banditStats[arm].trials;
    })));
    const maxTrials =
    /* istanbul ignore next */
    (cov_1axj3s0gqi().s[215]++, Math.max(...arms.map(arm => {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[53]++;
      cov_1axj3s0gqi().s[216]++;
      return banditStats[arm].trials;
    })));
    /* istanbul ignore next */
    cov_1axj3s0gqi().s[217]++;
    if (maxTrials > 0) {
      /* istanbul ignore next */
      cov_1axj3s0gqi().b[35][0]++;
      cov_1axj3s0gqi().s[218]++;
      arms.forEach(arm => {
        /* istanbul ignore next */
        cov_1axj3s0gqi().f[54]++;
        const trials =
        /* istanbul ignore next */
        (cov_1axj3s0gqi().s[219]++, banditStats[arm].trials);
        const explorationBonus =
        /* istanbul ignore next */
        (cov_1axj3s0gqi().s[220]++, (maxTrials - trials) / (maxTrials * 10)); // Small bonus for under-explored arms
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[221]++;
        allocation[arm] += explorationBonus;
      });
    } else
    /* istanbul ignore next */
    {
      cov_1axj3s0gqi().b[35][1]++;
    }
    // Ensure minimum allocation for each arm (at least 5%)
    const minAllocation =
    /* istanbul ignore next */
    (cov_1axj3s0gqi().s[222]++, 0.05);
    /* istanbul ignore next */
    cov_1axj3s0gqi().s[223]++;
    arms.forEach(arm => {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[55]++;
      cov_1axj3s0gqi().s[224]++;
      allocation[arm] = Math.max(minAllocation, allocation[arm]);
    });
    // Normalize to ensure sum = 1
    const sum =
    /* istanbul ignore next */
    (cov_1axj3s0gqi().s[225]++, arms.reduce((total, arm) => {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[56]++;
      cov_1axj3s0gqi().s[226]++;
      return total + allocation[arm];
    }, 0));
    /* istanbul ignore next */
    cov_1axj3s0gqi().s[227]++;
    arms.forEach(arm => {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[57]++;
      cov_1axj3s0gqi().s[228]++;
      allocation[arm] = allocation[arm] / sum;
    });
    /* istanbul ignore next */
    cov_1axj3s0gqi().s[229]++;
    return allocation;
  }
  /**
   * Apply smoothing to prevent dramatic traffic allocation changes
   */
  smoothTrafficAllocation(currentAllocation, targetAllocation, smoothingFactor =
  /* istanbul ignore next */
  (cov_1axj3s0gqi().b[36][0]++, 0.3) // How much to move toward target (0-1)
  ) {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[58]++;
    const smoothedAllocation =
    /* istanbul ignore next */
    (cov_1axj3s0gqi().s[230]++, {});
    /* istanbul ignore next */
    cov_1axj3s0gqi().s[231]++;
    Object.keys(currentAllocation).forEach(arm => {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[59]++;
      const current =
      /* istanbul ignore next */
      (cov_1axj3s0gqi().s[232]++, currentAllocation[arm]);
      const target =
      /* istanbul ignore next */
      (cov_1axj3s0gqi().s[233]++, targetAllocation[arm]);
      // Move toward target by smoothingFactor
      /* istanbul ignore next */
      cov_1axj3s0gqi().s[234]++;
      smoothedAllocation[arm] = current + (target - current) * smoothingFactor;
    });
    // Normalize to ensure sum = 1
    const sum =
    /* istanbul ignore next */
    (cov_1axj3s0gqi().s[235]++, Object.values(smoothedAllocation).reduce((total, val) => {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[60]++;
      cov_1axj3s0gqi().s[236]++;
      return total + val;
    }, 0));
    /* istanbul ignore next */
    cov_1axj3s0gqi().s[237]++;
    Object.keys(smoothedAllocation).forEach(arm => {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[61]++;
      cov_1axj3s0gqi().s[238]++;
      smoothedAllocation[arm] = smoothedAllocation[arm] / sum;
    });
    /* istanbul ignore next */
    cov_1axj3s0gqi().s[239]++;
    return smoothedAllocation;
  }
  /**
   * Get optimal provider with automatic traffic allocation
   */
  getOptimalProviderWithTrafficAllocation(context) {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[62]++;
    cov_1axj3s0gqi().s[240]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[63]++;
      cov_1axj3s0gqi().s[241]++;
      try {
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[242]++;
        // First check for active experiments
        if (this.experimentManager) {
          /* istanbul ignore next */
          cov_1axj3s0gqi().b[37][0]++;
          cov_1axj3s0gqi().s[243]++;
          try {
            const experimentResult =
            /* istanbul ignore next */
            (cov_1axj3s0gqi().s[244]++, yield this.experimentManager.getOptimalProvider(context));
            /* istanbul ignore next */
            cov_1axj3s0gqi().s[245]++;
            if (experimentResult.source === "experiment") {
              /* istanbul ignore next */
              cov_1axj3s0gqi().b[38][0]++;
              cov_1axj3s0gqi().s[246]++;
              return {
                provider: experimentResult.provider,
                source: "experiment",
                confidence: experimentResult.confidence,
                experimentName: experimentResult.experimentName
              };
            } else
            /* istanbul ignore next */
            {
              cov_1axj3s0gqi().b[38][1]++;
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_1axj3s0gqi().s[247]++;
            console.warn("Failed to get experiment assignment, falling back to traffic allocation:", error);
          }
        } else
        /* istanbul ignore next */
        {
          cov_1axj3s0gqi().b[37][1]++;
        }
        // Use automatic traffic allocation if enabled
        cov_1axj3s0gqi().s[248]++;
        if (this.config.autoTrafficAllocationEnabled) {
          /* istanbul ignore next */
          cov_1axj3s0gqi().b[39][0]++;
          const selectedArm =
          /* istanbul ignore next */
          (cov_1axj3s0gqi().s[249]++, this.selectArmByTrafficAllocation());
          const allocationProbability =
          /* istanbul ignore next */
          (cov_1axj3s0gqi().s[250]++, this.metrics.currentTrafficAllocation[selectedArm]);
          /* istanbul ignore next */
          cov_1axj3s0gqi().s[251]++;
          return {
            provider: selectedArm,
            source: "traffic_allocation",
            confidence: Math.min(0.95, allocationProbability + 0.2),
            // Higher allocation = higher confidence
            allocationProbability
          };
        } else
        /* istanbul ignore next */
        {
          cov_1axj3s0gqi().b[39][1]++;
        }
        // Fall back to bandit optimization
        const result =
        /* istanbul ignore next */
        (cov_1axj3s0gqi().s[252]++, yield this.banditOptimizer.getOptimalArm(context));
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[253]++;
        return {
          provider: result.recommendedArm,
          source: "bandit",
          confidence: result.confidence
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[254]++;
        console.error("Failed to get optimal provider:", error);
        /* istanbul ignore next */
        cov_1axj3s0gqi().s[255]++;
        return {
          provider: "bedrock",
          source: "default",
          confidence: 0.5
        };
      }
    });
  }
  /**
   * Select arm based on current traffic allocation probabilities
   */
  selectArmByTrafficAllocation() {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[64]++;
    const random =
    /* istanbul ignore next */
    (cov_1axj3s0gqi().s[256]++, Math.random());
    let cumulativeProbability =
    /* istanbul ignore next */
    (cov_1axj3s0gqi().s[257]++, 0);
    const arms =
    /* istanbul ignore next */
    (cov_1axj3s0gqi().s[258]++, ["bedrock", "google", "meta"]);
    /* istanbul ignore next */
    cov_1axj3s0gqi().s[259]++;
    for (const arm of arms) {
      /* istanbul ignore next */
      cov_1axj3s0gqi().s[260]++;
      cumulativeProbability += this.metrics.currentTrafficAllocation[arm];
      /* istanbul ignore next */
      cov_1axj3s0gqi().s[261]++;
      if (random <= cumulativeProbability) {
        /* istanbul ignore next */
        cov_1axj3s0gqi().b[40][0]++;
        cov_1axj3s0gqi().s[262]++;
        return arm;
      } else
      /* istanbul ignore next */
      {
        cov_1axj3s0gqi().b[40][1]++;
      }
    }
    // Fallback (should not happen with proper normalization)
    /* istanbul ignore next */
    cov_1axj3s0gqi().s[263]++;
    return "bedrock";
  }
  /**
   * Force traffic allocation update
   */
  forceTrafficAllocationUpdate() {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[65]++;
    cov_1axj3s0gqi().s[264]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1axj3s0gqi().f[66]++;
      cov_1axj3s0gqi().s[265]++;
      yield this.updateTrafficAllocation();
    });
  }
  /**
   * Get current traffic allocation
   */
  getCurrentTrafficAllocation() {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[67]++;
    cov_1axj3s0gqi().s[266]++;
    return Object.assign({}, this.metrics.currentTrafficAllocation);
  }
  /**
   * Export system state for persistence
   */
  exportState() {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[68]++;
    cov_1axj3s0gqi().s[267]++;
    return {
      config: this.config,
      metrics: this.metrics,
      banditState: this.banditOptimizer.exportState(),
      eventHistory: this.eventHistory
    };
  }
}
/* istanbul ignore next */
cov_1axj3s0gqi().s[268]++;
exports.ActiveOptimizationSystem = ActiveOptimizationSystem;
// Singleton instance for global use
let globalOptimizationSystem =
/* istanbul ignore next */
(cov_1axj3s0gqi().s[269]++, null);
/**
 * Get or create the global optimization system
 */
function getOptimizationSystem(config) {
  /* istanbul ignore next */
  cov_1axj3s0gqi().f[69]++;
  cov_1axj3s0gqi().s[270]++;
  if (!globalOptimizationSystem) {
    /* istanbul ignore next */
    cov_1axj3s0gqi().b[41][0]++;
    cov_1axj3s0gqi().s[271]++;
    globalOptimizationSystem = new ActiveOptimizationSystem(config);
  } else
  /* istanbul ignore next */
  {
    cov_1axj3s0gqi().b[41][1]++;
  }
  cov_1axj3s0gqi().s[272]++;
  return globalOptimizationSystem;
}
/**
 * Initialize and start the global optimization system
 */
function initializeOptimizationSystem(config) {
  /* istanbul ignore next */
  cov_1axj3s0gqi().f[70]++;
  cov_1axj3s0gqi().s[273]++;
  return tslib_1.__awaiter(this, void 0, void 0, function* () {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[71]++;
    const system =
    /* istanbul ignore next */
    (cov_1axj3s0gqi().s[274]++, getOptimizationSystem(config));
    /* istanbul ignore next */
    cov_1axj3s0gqi().s[275]++;
    if (!system["isRunning"]) {
      /* istanbul ignore next */
      cov_1axj3s0gqi().b[42][0]++;
      cov_1axj3s0gqi().s[276]++;
      yield system.start();
    } else
    /* istanbul ignore next */
    {
      cov_1axj3s0gqi().b[42][1]++;
    }
    cov_1axj3s0gqi().s[277]++;
    return system;
  });
}
/**
 * Shutdown the global optimization system
 */
function shutdownOptimizationSystem() {
  /* istanbul ignore next */
  cov_1axj3s0gqi().f[72]++;
  cov_1axj3s0gqi().s[278]++;
  return tslib_1.__awaiter(this, void 0, void 0, function* () {
    /* istanbul ignore next */
    cov_1axj3s0gqi().f[73]++;
    cov_1axj3s0gqi().s[279]++;
    if (globalOptimizationSystem) {
      /* istanbul ignore next */
      cov_1axj3s0gqi().b[43][0]++;
      cov_1axj3s0gqi().s[280]++;
      yield globalOptimizationSystem.stop();
      /* istanbul ignore next */
      cov_1axj3s0gqi().s[281]++;
      globalOptimizationSystem = null;
    } else
    /* istanbul ignore next */
    {
      cov_1axj3s0gqi().b[43][1]++;
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
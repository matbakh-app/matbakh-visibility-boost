{"version":3,"names":["cov_1axj3s0gqi","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","exports","getOptimizationSystem","initializeOptimizationSystem","shutdownOptimizationSystem","bandit_controller_1","require","bandit_optimizer_1","evidently_experiments_1","ActiveOptimizationSystem","constructor","config","eventHistory","isRunning","Object","assign","projectName","region","autoExperimentEnabled","experimentDuration","minTrafficForExperiment","significanceThreshold","autoStopEnabled","autoTrafficAllocationEnabled","trafficAllocationInterval","performanceThresholds","minWinRate","maxLatency","maxCost","bandit","ThompsonBandit","experimentManager","EvidentlyExperimentManager","banditOptimizer","BanditOptimizer","autoOptimizationEnabled","explorationRate","minTrialsForConfidence","optimizationInterval","metrics","totalRequests","experimentsActive","banditPerformance","bestArm","confidence","winRate","systemHealth","lastOptimization","Date","lastTrafficAllocation","currentTrafficAllocation","bedrock","google","meta","recommendations","console","warn","initializeProject","startInitialExperiments","startOptimizationLoop","startTrafficAllocationLoop","logEvent","details","action","impact","log","error","stop","clearInterval","activeExperiments","listActiveExperiments","experimentName","stopExperiment","getOptimalProvider","context","result","getOptimalProviderWithTrafficAllocation","provider","source","recordOutcome","success","latencyMs","costEuro","qualityScore","checkPerformanceAlerts","updateSystemMetrics","getMetrics","getEventHistory","limit","slice","forceOptimization","runOptimizationCycle","getHealthStatus","experimentHealth","banditHealth","Promise","all","healthCheck","resolve","components","experiments","connected","status","optimization","values","includes","system","message","routingExperiment","AI_EXPERIMENTS","MODEL_ROUTING_OPTIMIZATION","createAIExperiment","startExperiment","domainExperiment","DOMAIN_SPECIFIC_ROUTING","setInterval","tslib_1","__awaiter","updateTrafficAllocation","checkExperimentCompletion","getOptimizationRecommendations","map","r","description","applyAutoOptimizations","checkForNewExperiments","length","banditStats","getBanditStats","entries","reduce","best","arm","stats","trials","Math","min","health","alerts","push","providerStats","toFixed","analyzeExperimentResults","recommendation","winner","winningTreatment","reason","highPriorityRecs","filter","priority","rec","currentConfig","getConfig","updateConfig","newRate","setTimeout","max","contextualPerformance","analyzeContextualPerformance","promisingContexts","ctx","improvement","armPerformance","c","event","fullEvent","timestamp","updates","armScores","calculateArmPerformanceScores","newAllocation","calculateOptimalTrafficAllocation","smoothedAllocation","smoothTrafficAllocation","previousAllocation","previous","new","scores","keys","forEach","winRateScore","latencyScore","avgLatency","costScore","avgCost","confidenceScore","arms","allocation","totalScore","sum","minTrials","maxTrials","explorationBonus","minAllocation","total","currentAllocation","targetAllocation","smoothingFactor","current","target","val","experimentResult","selectedArm","selectArmByTrafficAllocation","allocationProbability","getOptimalArm","recommendedArm","random","cumulativeProbability","forceTrafficAllocationUpdate","getCurrentTrafficAllocation","exportState","banditState","globalOptimizationSystem"],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/active-optimization-system.ts"],"sourcesContent":["/**\n * Active Optimization System\n *\n * Integrates Evidently experiments with bandit optimization to create\n * an active, self-optimizing AI model routing system.\n *\n * Features:\n * - Automatic experiment lifecycle management\n * - Real-time bandit optimization\n * - Performance monitoring and alerting\n * - Auto-scaling based on traffic patterns\n */\n\nimport { Arm, ThompsonBandit } from \"./bandit-controller\";\nimport { BanditOptimizer } from \"./bandit-optimizer\";\nimport {\n  AI_EXPERIMENTS,\n  EvidentlyExperimentManager,\n  ExperimentContext,\n} from \"./evidently-experiments\";\n\nexport interface OptimizationSystemConfig {\n  projectName: string;\n  region: string;\n  autoExperimentEnabled: boolean;\n  experimentDuration: number; // days\n  minTrafficForExperiment: number; // requests per day\n  significanceThreshold: number; // 0-1\n  autoStopEnabled: boolean;\n  autoTrafficAllocationEnabled: boolean; // NEW: Enable automatic traffic allocation\n  trafficAllocationInterval: number; // minutes between traffic allocation updates\n  performanceThresholds: {\n    minWinRate: number;\n    maxLatency: number; // ms\n    maxCost: number; // euro\n  };\n}\n\nexport interface SystemMetrics {\n  totalRequests: number;\n  experimentsActive: number;\n  banditPerformance: {\n    bestArm: Arm;\n    confidence: number;\n    winRate: number;\n  };\n  systemHealth: \"healthy\" | \"warning\" | \"error\";\n  lastOptimization: Date;\n  lastTrafficAllocation: Date; // NEW: Track last traffic allocation update\n  currentTrafficAllocation: Record<Arm, number>; // NEW: Current traffic percentages\n  recommendations: string[];\n}\n\nexport interface OptimizationEvent {\n  timestamp: Date;\n  type:\n    | \"experiment_started\"\n    | \"experiment_stopped\"\n    | \"bandit_updated\"\n    | \"performance_alert\"\n    | \"auto_optimization\"\n    | \"traffic_allocation_updated\"; // NEW: Traffic allocation events\n  details: Record<string, any>;\n  impact: \"low\" | \"medium\" | \"high\";\n}\n\nexport class ActiveOptimizationSystem {\n  private experimentManager: EvidentlyExperimentManager;\n  private banditOptimizer: BanditOptimizer;\n  private config: OptimizationSystemConfig;\n  private metrics: SystemMetrics;\n  private eventHistory: OptimizationEvent[] = [];\n  private isRunning: boolean = false;\n  private optimizationInterval?: NodeJS.Timeout;\n  private trafficAllocationInterval?: NodeJS.Timeout; // NEW: Traffic allocation timer\n\n  constructor(config: Partial<OptimizationSystemConfig> = {}) {\n    this.config = {\n      projectName: \"matbakh-ai-optimization\",\n      region: \"eu-central-1\",\n      autoExperimentEnabled: true,\n      experimentDuration: 14, // 2 weeks\n      minTrafficForExperiment: 100, // 100 requests per day\n      significanceThreshold: 0.95,\n      autoStopEnabled: true,\n      autoTrafficAllocationEnabled: true, // NEW: Enable automatic traffic allocation\n      trafficAllocationInterval: 15, // NEW: Update traffic allocation every 15 minutes\n      performanceThresholds: {\n        minWinRate: 0.7,\n        maxLatency: 2000,\n        maxCost: 0.1,\n      },\n      ...config,\n    };\n\n    // Initialize components\n    const bandit = new ThompsonBandit();\n    this.experimentManager = new EvidentlyExperimentManager(\n      this.config.projectName,\n      this.config.region,\n      bandit\n    );\n    this.banditOptimizer = new BanditOptimizer(bandit, this.experimentManager, {\n      autoOptimizationEnabled: true,\n      explorationRate: 0.15,\n      minTrialsForConfidence: 30,\n      optimizationInterval: 60, // 1 hour\n    });\n\n    this.metrics = {\n      totalRequests: 0,\n      experimentsActive: 0,\n      banditPerformance: {\n        bestArm: \"bedrock\",\n        confidence: 0.5,\n        winRate: 0.5,\n      },\n      systemHealth: \"healthy\",\n      lastOptimization: new Date(),\n      lastTrafficAllocation: new Date(), // NEW: Initialize traffic allocation timestamp\n      currentTrafficAllocation: {\n        // NEW: Initialize equal traffic allocation\n        bedrock: 0.33,\n        google: 0.33,\n        meta: 0.34,\n      },\n      recommendations: [],\n    };\n  }\n\n  /**\n   * Start the active optimization system\n   */\n  async start(): Promise<void> {\n    if (this.isRunning) {\n      console.warn(\"Optimization system is already running\");\n      return;\n    }\n\n    try {\n      // Initialize Evidently project\n      await this.experimentManager.initializeProject();\n\n      // Start initial experiments if enabled\n      if (this.config.autoExperimentEnabled) {\n        await this.startInitialExperiments();\n      }\n\n      // Start optimization loop\n      this.startOptimizationLoop();\n\n      // Start automatic traffic allocation if enabled\n      if (this.config.autoTrafficAllocationEnabled) {\n        this.startTrafficAllocationLoop();\n      }\n\n      this.isRunning = true;\n      this.logEvent({\n        type: \"auto_optimization\",\n        details: { action: \"system_started\", config: this.config },\n        impact: \"high\",\n      });\n\n      console.log(\"Active Optimization System started successfully\");\n    } catch (error) {\n      console.error(\"Failed to start optimization system:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Stop the active optimization system\n   */\n  async stop(): Promise<void> {\n    if (!this.isRunning) {\n      return;\n    }\n\n    // Stop optimization loop\n    if (this.optimizationInterval) {\n      clearInterval(this.optimizationInterval);\n      this.optimizationInterval = undefined;\n    }\n\n    // Stop traffic allocation loop\n    if (this.trafficAllocationInterval) {\n      clearInterval(this.trafficAllocationInterval);\n      this.trafficAllocationInterval = undefined;\n    }\n\n    // Stop active experiments if auto-stop is enabled\n    if (this.config.autoStopEnabled) {\n      const activeExperiments =\n        await this.experimentManager.listActiveExperiments();\n      for (const experimentName of activeExperiments) {\n        await this.experimentManager.stopExperiment(\n          experimentName,\n          \"System shutdown\"\n        );\n      }\n    }\n\n    this.isRunning = false;\n    this.logEvent({\n      type: \"auto_optimization\",\n      details: { action: \"system_stopped\" },\n      impact: \"high\",\n    });\n\n    console.log(\"Active Optimization System stopped\");\n  }\n\n  /**\n   * Get optimal model provider for a request\n   */\n  async getOptimalProvider(context: ExperimentContext): Promise<{\n    provider: Arm;\n    source: \"experiment\" | \"bandit\" | \"traffic_allocation\" | \"default\";\n    confidence: number;\n    experimentName?: string;\n    allocationProbability?: number;\n  }> {\n    try {\n      // Use the new traffic allocation method\n      const result = await this.getOptimalProviderWithTrafficAllocation(\n        context\n      );\n\n      // Update metrics\n      this.metrics.totalRequests++;\n\n      return result;\n    } catch (error) {\n      console.error(\"Failed to get optimal provider:\", error);\n\n      // Fallback to default\n      return {\n        provider: \"bedrock\",\n        source: \"default\",\n        confidence: 0.5,\n      };\n    }\n  }\n\n  /**\n   * Record outcome and trigger optimization\n   */\n  async recordOutcome(\n    context: ExperimentContext,\n    provider: Arm,\n    metrics: {\n      success: boolean;\n      latencyMs: number;\n      costEuro: number;\n      qualityScore?: number;\n      userSatisfaction?: number;\n    }\n  ): Promise<void> {\n    try {\n      // Record in optimizer\n      await this.banditOptimizer.recordOutcome(\n        context,\n        provider,\n        metrics.success,\n        metrics.latencyMs,\n        metrics.costEuro,\n        metrics.qualityScore\n      );\n\n      // Check for performance alerts\n      await this.checkPerformanceAlerts(provider, metrics);\n\n      // Update system metrics\n      await this.updateSystemMetrics();\n    } catch (error) {\n      console.error(\"Failed to record outcome:\", error);\n    }\n  }\n\n  /**\n   * Get current system metrics\n   */\n  getMetrics(): SystemMetrics {\n    return { ...this.metrics };\n  }\n\n  /**\n   * Get optimization event history\n   */\n  getEventHistory(limit: number = 100): OptimizationEvent[] {\n    return this.eventHistory.slice(-limit);\n  }\n\n  /**\n   * Force optimization cycle\n   */\n  async forceOptimization(): Promise<void> {\n    await this.runOptimizationCycle();\n  }\n\n  /**\n   * Get system health status\n   */\n  async getHealthStatus(): Promise<{\n    system: \"healthy\" | \"warning\" | \"error\";\n    components: {\n      experiments: \"healthy\" | \"warning\" | \"error\";\n      bandit: \"healthy\" | \"warning\" | \"error\";\n      optimization: \"healthy\" | \"warning\" | \"error\";\n    };\n    details: Record<string, any>;\n  }> {\n    try {\n      const [experimentHealth, banditHealth] = await Promise.all([\n        this.experimentManager.healthCheck(),\n        Promise.resolve(this.banditOptimizer.healthCheck()),\n      ]);\n\n      const components = {\n        experiments: experimentHealth.connected\n          ? (\"healthy\" as const)\n          : (\"error\" as const),\n        bandit: banditHealth.status,\n        optimization: this.isRunning\n          ? (\"healthy\" as const)\n          : (\"warning\" as const),\n      };\n\n      const systemHealth = Object.values(components).includes(\"error\")\n        ? \"error\"\n        : Object.values(components).includes(\"warning\")\n        ? \"warning\"\n        : \"healthy\";\n\n      return {\n        system: systemHealth,\n        components,\n        details: {\n          experimentHealth,\n          banditHealth,\n          isRunning: this.isRunning,\n          totalRequests: this.metrics.totalRequests,\n          lastOptimization: this.metrics.lastOptimization,\n        },\n      };\n    } catch (error) {\n      return {\n        system: \"error\",\n        components: {\n          experiments: \"error\",\n          bandit: \"error\",\n          optimization: \"error\",\n        },\n        details: { error: error.message },\n      };\n    }\n  }\n\n  /**\n   * Start initial experiments\n   */\n  private async startInitialExperiments(): Promise<void> {\n    try {\n      // Start model routing optimization experiment\n      const routingExperiment = AI_EXPERIMENTS.MODEL_ROUTING_OPTIMIZATION;\n      await this.experimentManager.createAIExperiment(routingExperiment);\n      await this.experimentManager.startExperiment(routingExperiment.name);\n\n      this.logEvent({\n        type: \"experiment_started\",\n        details: {\n          experimentName: routingExperiment.name,\n          type: \"model_routing\",\n        },\n        impact: \"medium\",\n      });\n\n      // Start domain-specific routing experiment\n      const domainExperiment = AI_EXPERIMENTS.DOMAIN_SPECIFIC_ROUTING;\n      await this.experimentManager.createAIExperiment(domainExperiment);\n      await this.experimentManager.startExperiment(domainExperiment.name);\n\n      this.logEvent({\n        type: \"experiment_started\",\n        details: {\n          experimentName: domainExperiment.name,\n          type: \"domain_specific\",\n        },\n        impact: \"medium\",\n      });\n\n      console.log(\"Initial experiments started successfully\");\n    } catch (error) {\n      console.error(\"Failed to start initial experiments:\", error);\n    }\n  }\n\n  /**\n   * Start optimization loop\n   */\n  private startOptimizationLoop(): void {\n    this.optimizationInterval = setInterval(async () => {\n      await this.runOptimizationCycle();\n    }, 30 * 60 * 1000); // Every 30 minutes\n  }\n\n  /**\n   * Start automatic traffic allocation loop\n   */\n  private startTrafficAllocationLoop(): void {\n    this.trafficAllocationInterval = setInterval(async () => {\n      await this.updateTrafficAllocation();\n    }, this.config.trafficAllocationInterval * 60 * 1000); // Convert minutes to ms\n  }\n\n  /**\n   * Run a single optimization cycle\n   */\n  private async runOptimizationCycle(): Promise<void> {\n    try {\n      console.log(\"Running optimization cycle...\");\n\n      // Update system metrics\n      await this.updateSystemMetrics();\n\n      // Check for experiment completion\n      await this.checkExperimentCompletion();\n\n      // Get optimization recommendations\n      const recommendations =\n        this.banditOptimizer.getOptimizationRecommendations();\n      this.metrics.recommendations = recommendations.map((r) => r.description);\n\n      // Apply automatic optimizations\n      await this.applyAutoOptimizations(recommendations);\n\n      // Check if new experiments should be started\n      if (this.config.autoExperimentEnabled) {\n        await this.checkForNewExperiments();\n      }\n\n      this.metrics.lastOptimization = new Date();\n\n      this.logEvent({\n        type: \"auto_optimization\",\n        details: {\n          recommendations: recommendations.length,\n          systemHealth: this.metrics.systemHealth,\n        },\n        impact: \"low\",\n      });\n    } catch (error) {\n      console.error(\"Error in optimization cycle:\", error);\n      this.metrics.systemHealth = \"error\";\n    }\n  }\n\n  /**\n   * Update system metrics\n   */\n  private async updateSystemMetrics(): Promise<void> {\n    try {\n      // Get active experiments count\n      const activeExperiments =\n        await this.experimentManager.listActiveExperiments();\n      this.metrics.experimentsActive = activeExperiments.length;\n\n      // Get bandit performance\n      const banditStats = this.banditOptimizer.getBanditStats();\n      const bestArm = Object.entries(banditStats).reduce(\n        (best, [arm, stats]) => {\n          return stats.winRate > best.stats.winRate\n            ? { arm: arm as Arm, stats }\n            : best;\n        },\n        { arm: \"bedrock\" as Arm, stats: banditStats.bedrock }\n      );\n\n      this.metrics.banditPerformance = {\n        bestArm: bestArm.arm,\n        confidence:\n          bestArm.stats.trials > 30\n            ? Math.min(0.95, bestArm.stats.winRate + 0.1)\n            : 0.5,\n        winRate: bestArm.stats.winRate,\n      };\n\n      // Update system health\n      const health = await this.getHealthStatus();\n      this.metrics.systemHealth = health.system;\n    } catch (error) {\n      console.error(\"Failed to update system metrics:\", error);\n      this.metrics.systemHealth = \"error\";\n    }\n  }\n\n  /**\n   * Check for performance alerts\n   */\n  private async checkPerformanceAlerts(\n    provider: Arm,\n    metrics: {\n      success: boolean;\n      latencyMs: number;\n      costEuro: number;\n      qualityScore?: number;\n    }\n  ): Promise<void> {\n    const { performanceThresholds } = this.config;\n    const alerts = [];\n\n    // Check latency\n    if (metrics.latencyMs > performanceThresholds.maxLatency) {\n      alerts.push(\n        `High latency: ${metrics.latencyMs}ms > ${performanceThresholds.maxLatency}ms`\n      );\n    }\n\n    // Check cost\n    if (metrics.costEuro > performanceThresholds.maxCost) {\n      alerts.push(\n        `High cost: €${metrics.costEuro} > €${performanceThresholds.maxCost}`\n      );\n    }\n\n    // Check success rate (approximate)\n    const banditStats = this.banditOptimizer.getBanditStats();\n    const providerStats = banditStats[provider];\n    if (\n      providerStats.winRate < performanceThresholds.minWinRate &&\n      providerStats.trials > 10\n    ) {\n      alerts.push(\n        `Low win rate: ${(providerStats.winRate * 100).toFixed(1)}% < ${(\n          performanceThresholds.minWinRate * 100\n        ).toFixed(1)}%`\n      );\n    }\n\n    // Log alerts\n    if (alerts.length > 0) {\n      this.logEvent({\n        type: \"performance_alert\",\n        details: { provider, alerts, metrics },\n        impact: \"medium\",\n      });\n\n      console.warn(`Performance alerts for ${provider}:`, alerts);\n    }\n  }\n\n  /**\n   * Check for experiment completion\n   */\n  private async checkExperimentCompletion(): Promise<void> {\n    try {\n      const activeExperiments =\n        await this.experimentManager.listActiveExperiments();\n\n      for (const experimentName of activeExperiments) {\n        const result = await this.experimentManager.analyzeExperimentResults(\n          experimentName\n        );\n\n        if (\n          result?.recommendation &&\n          result.recommendation.confidence > this.config.significanceThreshold\n        ) {\n          // High confidence result found\n          if (this.config.autoStopEnabled) {\n            await this.experimentManager.stopExperiment(\n              experimentName,\n              `Auto-stop: High confidence winner (${result.recommendation.confidence})`\n            );\n\n            this.logEvent({\n              type: \"experiment_stopped\",\n              details: {\n                experimentName,\n                winner: result.recommendation.winningTreatment,\n                confidence: result.recommendation.confidence,\n                reason: \"auto_stop_high_confidence\",\n              },\n              impact: \"high\",\n            });\n          }\n        }\n      }\n    } catch (error) {\n      console.error(\"Failed to check experiment completion:\", error);\n    }\n  }\n\n  /**\n   * Apply automatic optimizations\n   */\n  private async applyAutoOptimizations(\n    recommendations: ReturnType<\n      BanditOptimizer[\"getOptimizationRecommendations\"]\n    >\n  ): Promise<void> {\n    const highPriorityRecs = recommendations.filter(\n      (r) => r.priority === \"high\"\n    );\n\n    for (const rec of highPriorityRecs) {\n      try {\n        if (rec.type === \"exploration\") {\n          // Increase exploration temporarily\n          const currentConfig = this.banditOptimizer.getConfig();\n          this.banditOptimizer.updateConfig({\n            explorationRate: Math.min(0.3, currentConfig.explorationRate * 1.5),\n          });\n\n          this.logEvent({\n            type: \"auto_optimization\",\n            details: {\n              action: \"increased_exploration\",\n              newRate: this.banditOptimizer.getConfig().explorationRate,\n            },\n            impact: \"medium\",\n          });\n\n          // Reset after 2 hours\n          setTimeout(() => {\n            this.banditOptimizer.updateConfig({\n              explorationRate: Math.max(0.05, currentConfig.explorationRate),\n            });\n          }, 2 * 60 * 60 * 1000);\n        }\n      } catch (error) {\n        console.error(`Failed to apply optimization: ${rec.type}`, error);\n      }\n    }\n  }\n\n  /**\n   * Check if new experiments should be started\n   */\n  private async checkForNewExperiments(): Promise<void> {\n    try {\n      // Only start new experiments if traffic is sufficient\n      if (this.metrics.totalRequests < this.config.minTrafficForExperiment) {\n        return;\n      }\n\n      const activeExperiments =\n        await this.experimentManager.listActiveExperiments();\n\n      // Don't start too many experiments at once\n      if (activeExperiments.length >= 2) {\n        return;\n      }\n\n      // Check if we should start context-specific experiments\n      const contextualPerformance =\n        this.banditOptimizer.analyzeContextualPerformance();\n      const promisingContexts = contextualPerformance.filter(\n        (ctx) =>\n          ctx.improvement > 0.2 && ctx.armPerformance[ctx.bestArm].trials > 50\n      );\n\n      if (promisingContexts.length > 0) {\n        // Could implement context-specific experiment creation here\n        console.log(\n          \"Promising contexts found for new experiments:\",\n          promisingContexts.map((c) => c.context)\n        );\n      }\n    } catch (error) {\n      console.error(\"Failed to check for new experiments:\", error);\n    }\n  }\n\n  /**\n   * Log optimization event\n   */\n  private logEvent(event: Omit<OptimizationEvent, \"timestamp\">): void {\n    const fullEvent: OptimizationEvent = {\n      timestamp: new Date(),\n      ...event,\n    };\n\n    this.eventHistory.push(fullEvent);\n\n    // Keep only last 1000 events\n    if (this.eventHistory.length > 1000) {\n      this.eventHistory = this.eventHistory.slice(-1000);\n    }\n\n    // Log high impact events\n    if (event.impact === \"high\") {\n      console.log(`[OPTIMIZATION] ${event.type}:`, event.details);\n    }\n  }\n\n  /**\n   * Get configuration\n   */\n  getConfig(): OptimizationSystemConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(updates: Partial<OptimizationSystemConfig>): void {\n    this.config = { ...this.config, ...updates };\n\n    this.logEvent({\n      type: \"auto_optimization\",\n      details: { action: \"config_updated\", updates },\n      impact: \"medium\",\n    });\n  }\n\n  /**\n   * Update traffic allocation automatically based on performance\n   */\n  private async updateTrafficAllocation(): Promise<void> {\n    try {\n      console.log(\"Updating automatic traffic allocation...\");\n\n      const banditStats = this.banditOptimizer.getBanditStats();\n      const contextualPerformance =\n        this.banditOptimizer.analyzeContextualPerformance();\n\n      // Calculate performance scores for each arm\n      const armScores = this.calculateArmPerformanceScores(banditStats);\n\n      // Calculate new traffic allocation based on performance\n      const newAllocation = this.calculateOptimalTrafficAllocation(\n        armScores,\n        banditStats\n      );\n\n      // Apply smoothing to prevent dramatic changes\n      const smoothedAllocation = this.smoothTrafficAllocation(\n        this.metrics.currentTrafficAllocation,\n        newAllocation\n      );\n\n      // Update traffic allocation\n      const previousAllocation = { ...this.metrics.currentTrafficAllocation };\n      this.metrics.currentTrafficAllocation = smoothedAllocation;\n      this.metrics.lastTrafficAllocation = new Date();\n\n      // Log the change\n      this.logEvent({\n        type: \"traffic_allocation_updated\",\n        details: {\n          previousAllocation,\n          newAllocation: smoothedAllocation,\n          armScores,\n          reason: \"automatic_performance_optimization\",\n        },\n        impact: \"medium\",\n      });\n\n      console.log(\"Traffic allocation updated:\", {\n        previous: previousAllocation,\n        new: smoothedAllocation,\n        scores: armScores,\n      });\n    } catch (error) {\n      console.error(\"Failed to update traffic allocation:\", error);\n\n      this.logEvent({\n        type: \"traffic_allocation_updated\",\n        details: {\n          error: error.message,\n          reason: \"allocation_update_failed\",\n        },\n        impact: \"high\",\n      });\n    }\n  }\n\n  /**\n   * Calculate performance scores for each arm\n   */\n  private calculateArmPerformanceScores(\n    banditStats: Record<Arm, any>\n  ): Record<Arm, number> {\n    const scores: Record<Arm, number> = {} as any;\n\n    (Object.keys(banditStats) as Arm[]).forEach((arm) => {\n      const stats = banditStats[arm];\n\n      if (stats.trials === 0) {\n        // No data yet, give neutral score\n        scores[arm] = 0.5;\n        return;\n      }\n\n      // Composite score based on multiple factors\n      const winRateScore = stats.winRate; // 0-1\n      const latencyScore = Math.max(0, 1 - stats.avgLatency / 3000); // Normalize to 0-1, 3s = 0\n      const costScore = Math.max(0, 1 - stats.avgCost / 0.2); // Normalize to 0-1, €0.2 = 0\n      const confidenceScore = Math.min(1, stats.trials / 50); // More trials = higher confidence\n\n      // Weighted composite score\n      scores[arm] =\n        winRateScore * 0.4 + // 40% win rate\n        latencyScore * 0.3 + // 30% latency\n        costScore * 0.2 + // 20% cost\n        confidenceScore * 0.1; // 10% confidence\n    });\n\n    return scores;\n  }\n\n  /**\n   * Calculate optimal traffic allocation based on performance scores\n   */\n  private calculateOptimalTrafficAllocation(\n    armScores: Record<Arm, number>,\n    banditStats: Record<Arm, any>\n  ): Record<Arm, number> {\n    const arms: Arm[] = [\"bedrock\", \"google\", \"meta\"];\n    const allocation: Record<Arm, number> = {} as any;\n\n    // Get total score\n    const totalScore = arms.reduce((sum, arm) => sum + armScores[arm], 0);\n\n    if (totalScore === 0) {\n      // No performance data, use equal allocation\n      arms.forEach((arm) => {\n        allocation[arm] = 1 / arms.length;\n      });\n      return allocation;\n    }\n\n    // Calculate base allocation based on performance scores\n    arms.forEach((arm) => {\n      allocation[arm] = armScores[arm] / totalScore;\n    });\n\n    // Apply exploration bonus for under-explored arms\n    const minTrials = Math.min(...arms.map((arm) => banditStats[arm].trials));\n    const maxTrials = Math.max(...arms.map((arm) => banditStats[arm].trials));\n\n    if (maxTrials > 0) {\n      arms.forEach((arm) => {\n        const trials = banditStats[arm].trials;\n        const explorationBonus = (maxTrials - trials) / (maxTrials * 10); // Small bonus for under-explored arms\n        allocation[arm] += explorationBonus;\n      });\n    }\n\n    // Ensure minimum allocation for each arm (at least 5%)\n    const minAllocation = 0.05;\n    arms.forEach((arm) => {\n      allocation[arm] = Math.max(minAllocation, allocation[arm]);\n    });\n\n    // Normalize to ensure sum = 1\n    const sum = arms.reduce((total, arm) => total + allocation[arm], 0);\n    arms.forEach((arm) => {\n      allocation[arm] = allocation[arm] / sum;\n    });\n\n    return allocation;\n  }\n\n  /**\n   * Apply smoothing to prevent dramatic traffic allocation changes\n   */\n  private smoothTrafficAllocation(\n    currentAllocation: Record<Arm, number>,\n    targetAllocation: Record<Arm, number>,\n    smoothingFactor: number = 0.3 // How much to move toward target (0-1)\n  ): Record<Arm, number> {\n    const smoothedAllocation: Record<Arm, number> = {} as any;\n\n    (Object.keys(currentAllocation) as Arm[]).forEach((arm) => {\n      const current = currentAllocation[arm];\n      const target = targetAllocation[arm];\n\n      // Move toward target by smoothingFactor\n      smoothedAllocation[arm] = current + (target - current) * smoothingFactor;\n    });\n\n    // Normalize to ensure sum = 1\n    const sum = Object.values(smoothedAllocation).reduce(\n      (total, val) => total + val,\n      0\n    );\n    (Object.keys(smoothedAllocation) as Arm[]).forEach((arm) => {\n      smoothedAllocation[arm] = smoothedAllocation[arm] / sum;\n    });\n\n    return smoothedAllocation;\n  }\n\n  /**\n   * Get optimal provider with automatic traffic allocation\n   */\n  async getOptimalProviderWithTrafficAllocation(\n    context: ExperimentContext\n  ): Promise<{\n    provider: Arm;\n    source: \"experiment\" | \"bandit\" | \"traffic_allocation\" | \"default\";\n    confidence: number;\n    experimentName?: string;\n    allocationProbability?: number;\n  }> {\n    try {\n      // First check for active experiments\n      if (this.experimentManager) {\n        try {\n          const experimentResult =\n            await this.experimentManager.getOptimalProvider(context);\n          if (experimentResult.source === \"experiment\") {\n            return {\n              provider: experimentResult.provider,\n              source: \"experiment\",\n              confidence: experimentResult.confidence,\n              experimentName: experimentResult.experimentName,\n            };\n          }\n        } catch (error) {\n          console.warn(\n            \"Failed to get experiment assignment, falling back to traffic allocation:\",\n            error\n          );\n        }\n      }\n\n      // Use automatic traffic allocation if enabled\n      if (this.config.autoTrafficAllocationEnabled) {\n        const selectedArm = this.selectArmByTrafficAllocation();\n        const allocationProbability =\n          this.metrics.currentTrafficAllocation[selectedArm];\n\n        return {\n          provider: selectedArm,\n          source: \"traffic_allocation\",\n          confidence: Math.min(0.95, allocationProbability + 0.2), // Higher allocation = higher confidence\n          allocationProbability,\n        };\n      }\n\n      // Fall back to bandit optimization\n      const result = await this.banditOptimizer.getOptimalArm(context);\n      return {\n        provider: result.recommendedArm,\n        source: \"bandit\",\n        confidence: result.confidence,\n      };\n    } catch (error) {\n      console.error(\"Failed to get optimal provider:\", error);\n      return {\n        provider: \"bedrock\",\n        source: \"default\",\n        confidence: 0.5,\n      };\n    }\n  }\n\n  /**\n   * Select arm based on current traffic allocation probabilities\n   */\n  private selectArmByTrafficAllocation(): Arm {\n    const random = Math.random();\n    let cumulativeProbability = 0;\n\n    const arms: Arm[] = [\"bedrock\", \"google\", \"meta\"];\n\n    for (const arm of arms) {\n      cumulativeProbability += this.metrics.currentTrafficAllocation[arm];\n      if (random <= cumulativeProbability) {\n        return arm;\n      }\n    }\n\n    // Fallback (should not happen with proper normalization)\n    return \"bedrock\";\n  }\n\n  /**\n   * Force traffic allocation update\n   */\n  async forceTrafficAllocationUpdate(): Promise<void> {\n    await this.updateTrafficAllocation();\n  }\n\n  /**\n   * Get current traffic allocation\n   */\n  getCurrentTrafficAllocation(): Record<Arm, number> {\n    return { ...this.metrics.currentTrafficAllocation };\n  }\n\n  /**\n   * Export system state for persistence\n   */\n  exportState(): {\n    config: OptimizationSystemConfig;\n    metrics: SystemMetrics;\n    banditState: ReturnType<BanditOptimizer[\"exportState\"]>;\n    eventHistory: OptimizationEvent[];\n  } {\n    return {\n      config: this.config,\n      metrics: this.metrics,\n      banditState: this.banditOptimizer.exportState(),\n      eventHistory: this.eventHistory,\n    };\n  }\n}\n\n// Singleton instance for global use\nlet globalOptimizationSystem: ActiveOptimizationSystem | null = null;\n\n/**\n * Get or create the global optimization system\n */\nexport function getOptimizationSystem(\n  config?: Partial<OptimizationSystemConfig>\n): ActiveOptimizationSystem {\n  if (!globalOptimizationSystem) {\n    globalOptimizationSystem = new ActiveOptimizationSystem(config);\n  }\n  return globalOptimizationSystem;\n}\n\n/**\n * Initialize and start the global optimization system\n */\nexport async function initializeOptimizationSystem(\n  config?: Partial<OptimizationSystemConfig>\n): Promise<ActiveOptimizationSystem> {\n  const system = getOptimizationSystem(config);\n\n  if (!system[\"isRunning\"]) {\n    await system.start();\n  }\n\n  return system;\n}\n\n/**\n * Shutdown the global optimization system\n */\nexport async function shutdownOptimizationSystem(): Promise<void> {\n  if (globalOptimizationSystem) {\n    await globalOptimizationSystem.stop();\n    globalOptimizationSystem = null;\n  }\n}\n"],"mappings":"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","ignoreList":[]}
{"version":3,"names":["tool_call_adapter_1","cov_17ll1hr18a","s","require","GoogleAdapter","BaseAdapter","mapTools","tools","f","b","length","undefined","functionDeclarations","map","t","name","description","parameters","type","properties","required","Object","keys","fromUnifiedSchema","tool","function","buildRequest","input","prompt","decision","streaming","maxTokens","request","contents","role","parts","text","generationConfig","temperature","maxOutputTokens","topP","topK","toolsToUse","isUnifiedToolSpec","assign","safetySettings","getSafetySettings","parseResponse","resp","validateResponse","candidates","toolCalls","raw","tokensUsed","output","candidate","content","textParts","_a","filter","p","join","functionCalls","_b","functionCall","fc","arguments","args","_c","usageMetadata","promptTokenCount","_d","candidatesTokenCount","error","handleError","isLegalContent","toLowerCase","includes","isMedicalContent","category","threshold","getProviderConfig","maxContextTokens","supportsStreaming","supportsTools","supportsJsonMode","supportsVision","rateLimitRpm","fallbackProvider","estimateTokens","tokens","Math","ceil","extractToolCallsFromResponse","index","id","confidence","finishReason","getProviderName","supportsToolFeature","feature","exports"],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/adapters/google-adapter.ts"],"sourcesContent":["import { ProviderResponse, RouteDecision, ToolSpec } from \"../types\";\nimport { BaseAdapter } from \"./tool-call-adapter\";\n\nexport class GoogleAdapter extends BaseAdapter {\n  mapTools(tools?: ToolSpec[]) {\n    if (!tools?.length) return undefined;\n\n    return {\n      tools: [\n        {\n          functionDeclarations: tools.map((t) => ({\n            name: t.name,\n            description: t.description || \"\",\n            parameters: {\n              type: \"object\",\n              properties: t.parameters || {},\n              required: Object.keys(t.parameters || {}),\n            },\n          })),\n        },\n      ],\n    };\n  }\n\n  // Enhanced mapping from unified schema to Google format\n  override fromUnifiedSchema(tools?: UnifiedToolSpec[]): any | undefined {\n    if (!tools?.length) return undefined;\n\n    return {\n      tools: [\n        {\n          functionDeclarations: tools.map((tool) => ({\n            name: tool.function.name,\n            description: tool.function.description || \"\",\n            parameters: {\n              type: \"object\",\n              properties: tool.function.parameters.properties,\n              required: tool.function.parameters.required || [],\n            },\n          })),\n        },\n      ],\n    };\n  }\n\n  buildRequest(input: {\n    prompt: string;\n    decision: RouteDecision;\n    streaming?: boolean;\n    maxTokens?: number;\n    tools?: ToolSpec[] | UnifiedToolSpec[];\n  }) {\n    const { prompt, decision, streaming, maxTokens, tools } = input;\n\n    const request: any = {\n      contents: [\n        {\n          role: \"user\",\n          parts: [{ text: prompt }],\n        },\n      ],\n      generationConfig: {\n        temperature: decision.temperature,\n        maxOutputTokens: maxTokens || 1024,\n        topP: 0.8,\n        topK: 40,\n      },\n    };\n\n    // Handle tools from decision or input parameter\n    const toolsToUse = tools || decision.tools;\n    if (toolsToUse?.length) {\n      if (this.isUnifiedToolSpec(toolsToUse[0])) {\n        Object.assign(\n          request,\n          this.fromUnifiedSchema(toolsToUse as UnifiedToolSpec[])\n        );\n      } else {\n        Object.assign(request, this.mapTools(toolsToUse as ToolSpec[]));\n      }\n    }\n\n    // Add safety settings for different domains\n    request.safetySettings = this.getSafetySettings(prompt);\n\n    return request;\n  }\n\n  parseResponse(resp: any): ProviderResponse {\n    try {\n      this.validateResponse(resp, \"Google\");\n\n      // Handle different response formats\n      const candidates = resp.candidates || [];\n      if (candidates.length === 0) {\n        return {\n          text: \"\",\n          toolCalls: [],\n          raw: resp,\n          tokensUsed: { input: 0, output: 0 },\n        };\n      }\n\n      const candidate = candidates[0];\n      const content = candidate.content;\n\n      // Extract text content\n      const textParts = content?.parts?.filter((p: any) => p.text) || [];\n      const text = textParts.map((p: any) => p.text).join(\"\\n\");\n\n      // Extract function calls\n      const functionCalls =\n        content?.parts?.filter((p: any) => p.functionCall) || [];\n      const toolCalls = functionCalls.map((fc: any) => ({\n        name: fc.functionCall.name,\n        arguments: fc.functionCall.args || {},\n      }));\n\n      // Extract usage metadata\n      const tokensUsed = {\n        input: resp.usageMetadata?.promptTokenCount || 0,\n        output: resp.usageMetadata?.candidatesTokenCount || 0,\n      };\n\n      return {\n        text,\n        toolCalls,\n        raw: resp,\n        tokensUsed,\n      };\n    } catch (error) {\n      this.handleError(error, \"Google\");\n    }\n  }\n\n  private getSafetySettings(prompt: string) {\n    // Adjust safety settings based on content\n    const isLegalContent =\n      prompt.toLowerCase().includes(\"legal\") ||\n      prompt.toLowerCase().includes(\"law\") ||\n      prompt.toLowerCase().includes(\"compliance\");\n\n    const isMedicalContent =\n      prompt.toLowerCase().includes(\"medical\") ||\n      prompt.toLowerCase().includes(\"health\") ||\n      prompt.toLowerCase().includes(\"diagnosis\");\n\n    if (isLegalContent || isMedicalContent) {\n      return [\n        {\n          category: \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n          threshold: \"BLOCK_LOW_AND_ABOVE\",\n        },\n        {\n          category: \"HARM_CATEGORY_HARASSMENT\",\n          threshold: \"BLOCK_LOW_AND_ABOVE\",\n        },\n      ];\n    }\n\n    return [\n      {\n        category: \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n        threshold: \"BLOCK_MEDIUM_AND_ABOVE\",\n      },\n    ];\n  }\n\n  getProviderConfig() {\n    return {\n      maxContextTokens: 1000000, // Gemini 1.5 Pro context window\n      supportsStreaming: true,\n      supportsTools: true,\n      supportsJsonMode: true, // Gemini supports JSON mode\n      supportsVision: true, // Gemini supports vision\n      rateLimitRpm: 300, // Requests per minute (varies by tier)\n      fallbackProvider: \"bedrock\", // Fallback to Bedrock if Google fails\n    };\n  }\n\n  // Google-specific token estimation\n  override estimateTokens(text: string): { input: number; output: number } {\n    // Gemini typically uses ~4 characters per token\n    const tokens = Math.ceil(text.length / 4);\n    return { input: tokens, output: 0 };\n  }\n\n  // Implementation of abstract methods\n  protected extractToolCallsFromResponse(resp: any): Array<{\n    id?: string;\n    name: string;\n    arguments: any;\n    confidence?: number;\n  }> {\n    const candidates = resp.candidates || [];\n    if (candidates.length === 0) return [];\n\n    const candidate = candidates[0];\n    const content = candidate.content;\n\n    // Extract function calls from Google response format\n    const functionCalls =\n      content?.parts?.filter((p: any) => p.functionCall) || [];\n\n    return functionCalls.map((fc: any, index: number) => ({\n      id: fc.functionCall.id || `google_call_${index}`,\n      name: fc.functionCall.name,\n      arguments: fc.functionCall.args || {},\n      confidence: candidate.finishReason === \"STOP\" ? 1.0 : 0.8, // Lower confidence for incomplete responses\n    }));\n  }\n\n  protected getProviderName(): string {\n    return \"google\";\n  }\n\n  // Enhanced tool feature support for Google\n  override supportsToolFeature(\n    feature: \"parallel_calls\" | \"streaming\" | \"json_schema\" | \"complex_types\"\n  ): boolean {\n    switch (feature) {\n      case \"parallel_calls\":\n        return true; // Gemini supports parallel function calls\n      case \"streaming\":\n        return false; // Google doesn't support streaming with function calls yet\n      case \"json_schema\":\n        return true; // Gemini supports structured output\n      case \"complex_types\":\n        return true; // Gemini handles complex nested types\n      default:\n        return super.supportsToolFeature(feature);\n    }\n  }\n\n  // Helper method to check if tools are in unified format\n  private isUnifiedToolSpec(tool: any): tool is UnifiedToolSpec {\n    return tool && typeof tool === \"object\" && \"function\" in tool;\n  }\n}\n"],"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","ignoreList":[]}
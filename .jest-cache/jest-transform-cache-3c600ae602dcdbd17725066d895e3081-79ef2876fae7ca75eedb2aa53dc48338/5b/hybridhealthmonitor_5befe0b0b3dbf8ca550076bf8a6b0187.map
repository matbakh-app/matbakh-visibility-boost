{"version":3,"names":["cov_1bfwzd7d16","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","ai_feature_flags_1","require","HybridHealthMonitor","constructor","directBedrockClient","mcpRouter","intelligentRouter","config","efficiencyAnalysisHistory","Map","activeTimeouts","Set","featureFlags","AiFeatureFlags","Object","assign","checkInterval","analysisInterval","performanceWindow","healthThresholds","minHealthScore","maxLatency","minSuccessRate","maxFallbackRate","enableContinuousMonitoring","enablePerformanceOptimization","alertThresholds","criticalHealthScore","warningLatency","criticalLatency","systemStartTime","Date","lastHealthCheck","healthStatus","initializeHealthStatus","performanceMetrics","initializePerformanceMetrics","isEnabled","startMonitoring","getHealthStatus","mcpHealth","directBedrockHealth","routes","mcp","directBedrock","calculateOverallHealth","updateRoutingEfficiency","updatePerformanceMetrics","generateHealthRecommendations","overall","lastCheck","error","console","isHealthy","healthScore","analyzeRoutingEfficiency","analysisId","generateAnalysisId","timestamp","timeWindow","recentDecisions","getRecentRoutingDecisions","recentRequests","getRecentRequests","routingPatterns","calculateRoutingPatterns","performanceComparison","analyzePerformanceByRoute","efficiency","calculateRoutingEfficiency","recommendations","generateRoutingRecommendations","analysis","totalDecisions","length","optimalDecisions","filter","d","requestedRoute","actualRoute","suboptimalDecisions","set","cleanupOldAnalyses","mcpUsage","directBedrockUsage","fallbackOccurrences","mcpPerformance","averageLatency","successRate","throughput","directBedrockPerformance","routingOptimizations","performanceImprovements","configurationChanges","recordRoutingDecision","decisionTime","reason","routingDecisions","push","cutoffTime","now","decision","getTime","recordRequestPerformance","route","latency","success","operationType","requests","request","getOptimizationRecommendations","allRecommendations","getMetrics","uptime","totalRequests","efficiencyAnalyses","size","healthChecks","destroy","healthCheckInterval","clearInterval","forEach","timeout","clearTimeout","clear","latencyMs","consecutiveFailures","connectionStatus","queueSize","pendingOperations","lastSuccessfulOperation","errorRate","circuitBreakerState","routing","optimalRouteUsage","fallbackRate","averageDecisionTime","performance","successfulRequests","failedRequests","p95Latency","p99Latency","immediate","optimization","maintenance","setInterval","tslib_1","__awaiter","totalWeight","latencyScore","Math","max","finalScore","round","fallbackDecisions","totalDecisionTime","reduce","sum","r","latencies","map","sort","a","p95Index","floor","p99Index","totalLatency","decisions","mcpRequests","directBedrockRequests","calculatePerformance","routeRequests","timeSpan","decisionEfficiency","mcpPerf","directPerf","performanceEfficiency","mcpEfficiency","directEfficiency","patterns","id","entries","delete","random","toString","substring","exports"],"sources":["/Users/matbakh-visibility-boost.20250920/src/lib/ai-orchestrator/hybrid-health-monitor.ts"],"sourcesContent":["/**\n * Hybrid Health Monitor - Health Monitoring for Both MCP and Direct Bedrock Paths\n *\n * This module implements comprehensive health monitoring for the hybrid routing\n * architecture, tracking both MCP and direct Bedrock paths, analyzing routing\n * efficiency, and providing optimization recommendations.\n */\n\nimport { AiFeatureFlags } from \"./ai-feature-flags\";\nimport {\n  DirectBedrockClient,\n  DirectBedrockHealthCheck,\n} from \"./direct-bedrock-client\";\nimport { IntelligentRouter } from \"./intelligent-router\";\nimport { MCPHealthStatus, MCPRouter } from \"./mcp-router\";\n\n// Hybrid Health Status\nexport interface HybridHealthStatus {\n  overall: {\n    isHealthy: boolean;\n    healthScore: number; // 0-100\n    lastCheck: Date;\n    uptime: number; // milliseconds\n  };\n  routes: {\n    mcp: MCPHealthStatus;\n    directBedrock: DirectBedrockHealthCheck;\n  };\n  routing: {\n    efficiency: number; // 0-1\n    optimalRouteUsage: number; // 0-1\n    fallbackRate: number; // 0-1\n    averageDecisionTime: number; // milliseconds\n  };\n  performance: {\n    totalRequests: number;\n    successfulRequests: number;\n    failedRequests: number;\n    averageLatency: number;\n    p95Latency: number;\n    p99Latency: number;\n  };\n  recommendations: {\n    immediate: string[];\n    optimization: string[];\n    maintenance: string[];\n  };\n}\n\n// Routing Efficiency Analysis\nexport interface RoutingEfficiencyAnalysis {\n  analysisId: string;\n  timestamp: Date;\n  timeWindow: number; // milliseconds\n  totalDecisions: number;\n  optimalDecisions: number;\n  suboptimalDecisions: number;\n  routingPatterns: {\n    mcpUsage: number;\n    directBedrockUsage: number;\n    fallbackOccurrences: number;\n  };\n  performanceComparison: {\n    mcpPerformance: {\n      averageLatency: number;\n      successRate: number;\n      throughput: number;\n    };\n    directBedrockPerformance: {\n      averageLatency: number;\n      successRate: number;\n      throughput: number;\n    };\n  };\n  recommendations: {\n    routingOptimizations: string[];\n    performanceImprovements: string[];\n    configurationChanges: string[];\n  };\n  efficiency: number; // 0-1 overall efficiency score\n}\n\n// Health Check Configuration\nexport interface HybridHealthConfig {\n  checkInterval: number; // How often to perform health checks\n  analysisInterval: number; // How often to analyze routing efficiency\n  performanceWindow: number; // Time window for performance analysis\n  healthThresholds: {\n    minHealthScore: number;\n    maxLatency: number;\n    minSuccessRate: number;\n    maxFallbackRate: number;\n  };\n  enableContinuousMonitoring: boolean;\n  enablePerformanceOptimization: boolean;\n  alertThresholds: {\n    criticalHealthScore: number;\n    warningLatency: number;\n    criticalLatency: number;\n  };\n}\n\n// Performance Metrics\ninterface PerformanceMetrics {\n  requests: Array<{\n    timestamp: Date;\n    route: \"mcp\" | \"direct\";\n    latency: number;\n    success: boolean;\n    operationType: string;\n  }>;\n  routingDecisions: Array<{\n    timestamp: Date;\n    requestedRoute: \"mcp\" | \"direct\";\n    actualRoute: \"mcp\" | \"direct\";\n    decisionTime: number;\n    reason: string;\n  }>;\n}\n\n/**\n * Hybrid Health Monitor for MCP and Direct Bedrock Routing\n */\nexport class HybridHealthMonitor {\n  private config: HybridHealthConfig;\n  private featureFlags: AiFeatureFlags;\n  private directBedrockClient: DirectBedrockClient;\n  private mcpRouter: MCPRouter;\n  private intelligentRouter: IntelligentRouter;\n\n  // Health monitoring state\n  private healthStatus: HybridHealthStatus;\n  private performanceMetrics: PerformanceMetrics;\n  private efficiencyAnalysisHistory: Map<string, RoutingEfficiencyAnalysis> =\n    new Map();\n\n  // Monitoring intervals\n  private healthCheckInterval?: NodeJS.Timeout;\n  private analysisInterval?: NodeJS.Timeout;\n  private activeTimeouts: Set<NodeJS.Timeout> = new Set();\n\n  // System state tracking\n  private systemStartTime: Date;\n  private lastHealthCheck: Date;\n\n  constructor(\n    directBedrockClient: DirectBedrockClient,\n    mcpRouter: MCPRouter,\n    intelligentRouter: IntelligentRouter,\n    config?: Partial<HybridHealthConfig>\n  ) {\n    this.directBedrockClient = directBedrockClient;\n    this.mcpRouter = mcpRouter;\n    this.intelligentRouter = intelligentRouter;\n    this.featureFlags = new AiFeatureFlags();\n\n    this.config = {\n      checkInterval: 30000, // 30 seconds\n      analysisInterval: 300000, // 5 minutes\n      performanceWindow: 3600000, // 1 hour\n      healthThresholds: {\n        minHealthScore: 70,\n        maxLatency: 5000, // 5 seconds\n        minSuccessRate: 0.95,\n        maxFallbackRate: 0.1, // 10%\n      },\n      enableContinuousMonitoring: true,\n      enablePerformanceOptimization: true,\n      alertThresholds: {\n        criticalHealthScore: 50,\n        warningLatency: 3000, // 3 seconds\n        criticalLatency: 10000, // 10 seconds\n      },\n      ...config,\n    };\n\n    this.systemStartTime = new Date();\n    this.lastHealthCheck = new Date();\n    this.healthStatus = this.initializeHealthStatus();\n    this.performanceMetrics = this.initializePerformanceMetrics();\n\n    // Start monitoring if enabled\n    if (this.featureFlags.isEnabled(\"ENABLE_HYBRID_HEALTH_MONITORING\")) {\n      this.startMonitoring();\n    }\n  }\n\n  /**\n   * Get comprehensive hybrid health status\n   */\n  async getHealthStatus(): Promise<HybridHealthStatus> {\n    try {\n      // Get health status from both routes\n      const mcpHealth = await this.mcpRouter.getHealthStatus();\n      const directBedrockHealth =\n        await this.directBedrockClient.getHealthStatus();\n\n      // Update route health\n      this.healthStatus.routes.mcp = mcpHealth;\n      this.healthStatus.routes.directBedrock = directBedrockHealth;\n\n      // Calculate overall health\n      this.calculateOverallHealth();\n\n      // Update routing efficiency\n      await this.updateRoutingEfficiency();\n\n      // Update performance metrics\n      this.updatePerformanceMetrics();\n\n      // Generate recommendations\n      this.generateHealthRecommendations();\n\n      // Update last check time\n      this.healthStatus.overall.lastCheck = new Date();\n      this.lastHealthCheck = new Date();\n\n      return { ...this.healthStatus };\n    } catch (error) {\n      console.error(\"Failed to get hybrid health status:\", error);\n\n      // Return degraded health status\n      return {\n        ...this.healthStatus,\n        overall: {\n          ...this.healthStatus.overall,\n          isHealthy: false,\n          healthScore: 0,\n          lastCheck: new Date(),\n        },\n      };\n    }\n  }\n\n  /**\n   * Perform routing efficiency analysis\n   */\n  async analyzeRoutingEfficiency(): Promise<RoutingEfficiencyAnalysis> {\n    const analysisId = this.generateAnalysisId();\n    const timestamp = new Date();\n    const timeWindow = this.config.performanceWindow;\n\n    try {\n      // Get recent routing decisions and performance data\n      const recentDecisions = this.getRecentRoutingDecisions(timeWindow);\n      const recentRequests = this.getRecentRequests(timeWindow);\n\n      // Calculate routing patterns\n      const routingPatterns = this.calculateRoutingPatterns(\n        recentDecisions,\n        recentRequests\n      );\n\n      // Analyze performance by route\n      const performanceComparison =\n        this.analyzePerformanceByRoute(recentRequests);\n\n      // Calculate efficiency score\n      const efficiency = this.calculateRoutingEfficiency(\n        recentDecisions,\n        performanceComparison\n      );\n\n      // Generate recommendations\n      const recommendations = await this.generateRoutingRecommendations(\n        routingPatterns,\n        performanceComparison,\n        efficiency\n      );\n\n      const analysis: RoutingEfficiencyAnalysis = {\n        analysisId,\n        timestamp,\n        timeWindow,\n        totalDecisions: recentDecisions.length,\n        optimalDecisions: recentDecisions.filter(\n          (d) => d.requestedRoute === d.actualRoute\n        ).length,\n        suboptimalDecisions: recentDecisions.filter(\n          (d) => d.requestedRoute !== d.actualRoute\n        ).length,\n        routingPatterns,\n        performanceComparison,\n        recommendations,\n        efficiency: recentDecisions.length === 0 ? 0 : efficiency, // Return 0 for empty data\n      };\n\n      // Store analysis\n      this.efficiencyAnalysisHistory.set(analysisId, analysis);\n\n      // Clean up old analyses (keep last 24 hours)\n      this.cleanupOldAnalyses();\n\n      return analysis;\n    } catch (error) {\n      console.error(\"Routing efficiency analysis failed:\", error);\n\n      // Return minimal analysis on error\n      return {\n        analysisId,\n        timestamp,\n        timeWindow,\n        totalDecisions: 0,\n        optimalDecisions: 0,\n        suboptimalDecisions: 0,\n        routingPatterns: {\n          mcpUsage: 0,\n          directBedrockUsage: 0,\n          fallbackOccurrences: 0,\n        },\n        performanceComparison: {\n          mcpPerformance: { averageLatency: 0, successRate: 0, throughput: 0 },\n          directBedrockPerformance: {\n            averageLatency: 0,\n            successRate: 0,\n            throughput: 0,\n          },\n        },\n        recommendations: {\n          routingOptimizations: [],\n          performanceImprovements: [],\n          configurationChanges: [],\n        },\n        efficiency: 0,\n      };\n    }\n  }\n\n  /**\n   * Record a routing decision for analysis\n   */\n  recordRoutingDecision(\n    requestedRoute: \"mcp\" | \"direct\",\n    actualRoute: \"mcp\" | \"direct\",\n    decisionTime: number,\n    reason: string\n  ): void {\n    this.performanceMetrics.routingDecisions.push({\n      timestamp: new Date(),\n      requestedRoute,\n      actualRoute,\n      decisionTime,\n      reason,\n    });\n\n    // Keep only recent decisions (last hour)\n    const cutoffTime = Date.now() - this.config.performanceWindow;\n    this.performanceMetrics.routingDecisions =\n      this.performanceMetrics.routingDecisions.filter(\n        (decision) => decision.timestamp.getTime() > cutoffTime\n      );\n  }\n\n  /**\n   * Record a request performance for analysis\n   */\n  recordRequestPerformance(\n    route: \"mcp\" | \"direct\",\n    latency: number,\n    success: boolean,\n    operationType: string\n  ): void {\n    this.performanceMetrics.requests.push({\n      timestamp: new Date(),\n      route,\n      latency,\n      success,\n      operationType,\n    });\n\n    // Keep only recent requests (last hour)\n    const cutoffTime = Date.now() - this.config.performanceWindow;\n    this.performanceMetrics.requests = this.performanceMetrics.requests.filter(\n      (request) => request.timestamp.getTime() > cutoffTime\n    );\n  }\n\n  /**\n   * Get routing optimization recommendations\n   */\n  async getOptimizationRecommendations(): Promise<string[]> {\n    try {\n      const analysis = await this.analyzeRoutingEfficiency();\n\n      const allRecommendations = [\n        ...analysis.recommendations.routingOptimizations,\n        ...analysis.recommendations.performanceImprovements,\n        ...analysis.recommendations.configurationChanges,\n      ];\n\n      return allRecommendations;\n    } catch (error) {\n      console.error(\"Failed to get optimization recommendations:\", error);\n      return [\n        \"Monitor system health regularly\",\n        \"Check routing efficiency metrics\",\n        \"Review performance thresholds\",\n      ];\n    }\n  }\n\n  /**\n   * Get hybrid health metrics\n   */\n  getMetrics() {\n    const uptime = Date.now() - this.systemStartTime.getTime();\n    const recentRequests = this.getRecentRequests(\n      this.config.performanceWindow\n    );\n\n    return {\n      uptime,\n      totalRequests: this.performanceMetrics.requests.length,\n      recentRequests: recentRequests.length,\n      routingDecisions: this.performanceMetrics.routingDecisions.length,\n      efficiencyAnalyses: this.efficiencyAnalysisHistory.size,\n      healthChecks: this.lastHealthCheck ? 1 : 0,\n      systemStartTime: this.systemStartTime,\n      lastHealthCheck: this.lastHealthCheck,\n    };\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    // Clear intervals\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n      this.healthCheckInterval = undefined;\n    }\n    if (this.analysisInterval) {\n      clearInterval(this.analysisInterval);\n      this.analysisInterval = undefined;\n    }\n\n    // Clear timeouts\n    this.activeTimeouts.forEach((timeout) => {\n      clearTimeout(timeout);\n    });\n    this.activeTimeouts.clear();\n\n    // Clear data\n    this.efficiencyAnalysisHistory.clear();\n    this.performanceMetrics.requests = [];\n    this.performanceMetrics.routingDecisions = [];\n  }\n\n  // Private implementation methods\n\n  private initializeHealthStatus(): HybridHealthStatus {\n    return {\n      overall: {\n        isHealthy: false,\n        healthScore: 0,\n        lastCheck: new Date(),\n        uptime: 0,\n      },\n      routes: {\n        mcp: {\n          route: \"mcp\",\n          isHealthy: false,\n          latencyMs: 0,\n          successRate: 0,\n          lastCheck: new Date(),\n          consecutiveFailures: 0,\n          connectionStatus: \"disconnected\",\n          queueSize: 0,\n          pendingOperations: 0,\n          lastSuccessfulOperation: null,\n          errorRate: 0,\n        },\n        directBedrock: {\n          isHealthy: false,\n          latencyMs: 0,\n          lastCheck: new Date(),\n          consecutiveFailures: 0,\n          circuitBreakerState: \"closed\",\n        },\n      },\n      routing: {\n        efficiency: 0,\n        optimalRouteUsage: 0,\n        fallbackRate: 0,\n        averageDecisionTime: 0,\n      },\n      performance: {\n        totalRequests: 0,\n        successfulRequests: 0,\n        failedRequests: 0,\n        averageLatency: 0,\n        p95Latency: 0,\n        p99Latency: 0,\n      },\n      recommendations: {\n        immediate: [],\n        optimization: [],\n        maintenance: [],\n      },\n    };\n  }\n\n  private initializePerformanceMetrics(): PerformanceMetrics {\n    return {\n      requests: [],\n      routingDecisions: [],\n    };\n  }\n\n  private startMonitoring(): void {\n    // Start health check monitoring\n    if (this.config.enableContinuousMonitoring) {\n      this.healthCheckInterval = setInterval(async () => {\n        try {\n          await this.getHealthStatus();\n        } catch (error) {\n          console.error(\"Periodic health check failed:\", error);\n        }\n      }, this.config.checkInterval);\n    }\n\n    // Start efficiency analysis\n    if (this.config.enablePerformanceOptimization) {\n      this.analysisInterval = setInterval(async () => {\n        try {\n          await this.analyzeRoutingEfficiency();\n        } catch (error) {\n          console.error(\"Periodic efficiency analysis failed:\", error);\n        }\n      }, this.config.analysisInterval);\n    }\n  }\n\n  private calculateOverallHealth(): void {\n    const mcpHealth = this.healthStatus.routes.mcp;\n    const directBedrockHealth = this.healthStatus.routes.directBedrock;\n\n    // Calculate weighted health score\n    let healthScore = 0;\n    let totalWeight = 0;\n\n    // MCP health (weight: 0.4)\n    if (mcpHealth.isHealthy) {\n      healthScore += 40 * (1 - mcpHealth.errorRate);\n    }\n    totalWeight += 40;\n\n    // Direct Bedrock health (weight: 0.4)\n    if (directBedrockHealth.isHealthy) {\n      const latencyScore = Math.max(\n        0,\n        1 -\n          directBedrockHealth.latencyMs /\n            this.config.healthThresholds.maxLatency\n      );\n      healthScore += 40 * latencyScore;\n    }\n    totalWeight += 40;\n\n    // Routing efficiency (weight: 0.2)\n    healthScore += 20 * this.healthStatus.routing.efficiency;\n    totalWeight += 20;\n\n    // Normalize score\n    const finalScore = totalWeight > 0 ? (healthScore / totalWeight) * 100 : 0;\n\n    // Update overall health\n    this.healthStatus.overall.healthScore = Math.round(finalScore);\n    this.healthStatus.overall.isHealthy =\n      finalScore >= this.config.healthThresholds.minHealthScore;\n    this.healthStatus.overall.uptime =\n      Date.now() - this.systemStartTime.getTime();\n  }\n\n  private async updateRoutingEfficiency(): Promise<void> {\n    const recentDecisions = this.getRecentRoutingDecisions(\n      this.config.performanceWindow\n    );\n\n    if (recentDecisions.length === 0) {\n      this.healthStatus.routing.efficiency = 1.0; // Perfect efficiency with no decisions\n      this.healthStatus.routing.optimalRouteUsage = 1.0;\n      this.healthStatus.routing.fallbackRate = 0;\n      this.healthStatus.routing.averageDecisionTime = 0;\n      return;\n    }\n\n    // Calculate efficiency metrics\n    const optimalDecisions = recentDecisions.filter(\n      (d) => d.requestedRoute === d.actualRoute\n    ).length;\n    const fallbackDecisions = recentDecisions.filter(\n      (d) => d.requestedRoute !== d.actualRoute\n    ).length;\n\n    this.healthStatus.routing.efficiency =\n      optimalDecisions / recentDecisions.length;\n    this.healthStatus.routing.optimalRouteUsage =\n      optimalDecisions / recentDecisions.length;\n    this.healthStatus.routing.fallbackRate =\n      fallbackDecisions / recentDecisions.length;\n\n    const totalDecisionTime = recentDecisions.reduce(\n      (sum, d) => sum + d.decisionTime,\n      0\n    );\n    this.healthStatus.routing.averageDecisionTime =\n      totalDecisionTime / recentDecisions.length;\n  }\n\n  private updatePerformanceMetrics(): void {\n    const recentRequests = this.getRecentRequests(\n      this.config.performanceWindow\n    );\n\n    if (recentRequests.length === 0) {\n      this.healthStatus.performance = {\n        totalRequests: 0,\n        successfulRequests: 0,\n        failedRequests: 0,\n        averageLatency: 0,\n        p95Latency: 0,\n        p99Latency: 0,\n      };\n      return;\n    }\n\n    const successfulRequests = recentRequests.filter((r) => r.success);\n    const failedRequests = recentRequests.filter((r) => !r.success);\n\n    // Calculate latency percentiles\n    const latencies = recentRequests\n      .map((r) => r.latency)\n      .sort((a, b) => a - b);\n    const p95Index = Math.floor(latencies.length * 0.95);\n    const p99Index = Math.floor(latencies.length * 0.99);\n\n    const totalLatency = latencies.reduce((sum, latency) => sum + latency, 0);\n\n    this.healthStatus.performance = {\n      totalRequests: recentRequests.length,\n      successfulRequests: successfulRequests.length,\n      failedRequests: failedRequests.length,\n      averageLatency: totalLatency / recentRequests.length,\n      p95Latency: latencies[p95Index] || 0,\n      p99Latency: latencies[p99Index] || 0,\n    };\n  }\n\n  private generateHealthRecommendations(): void {\n    const immediate: string[] = [];\n    const optimization: string[] = [];\n    const maintenance: string[] = [];\n\n    // Check critical health issues\n    if (\n      this.healthStatus.overall.healthScore <\n      this.config.alertThresholds.criticalHealthScore\n    ) {\n      immediate.push(\n        \"Critical health issue detected - investigate system status\"\n      );\n    }\n\n    if (\n      this.healthStatus.performance.p95Latency >\n      this.config.alertThresholds.criticalLatency\n    ) {\n      immediate.push(\"Critical latency detected - check system performance\");\n    }\n\n    // Check MCP health\n    if (!this.healthStatus.routes.mcp.isHealthy) {\n      immediate.push(\n        \"MCP route is unhealthy - check connection and configuration\"\n      );\n    }\n\n    if (this.healthStatus.routes.mcp.queueSize > 100) {\n      optimization.push(\n        \"MCP queue size is high - consider increasing processing capacity\"\n      );\n    }\n\n    // Check Direct Bedrock health\n    if (!this.healthStatus.routes.directBedrock.isHealthy) {\n      immediate.push(\n        \"Direct Bedrock route is unhealthy - check AWS connectivity\"\n      );\n    }\n\n    if (this.healthStatus.routes.directBedrock.consecutiveFailures > 5) {\n      optimization.push(\n        \"Direct Bedrock has consecutive failures - review error patterns\"\n      );\n    }\n\n    // Check routing efficiency\n    if (this.healthStatus.routing.efficiency < 0.8) {\n      optimization.push(\n        \"Routing efficiency is low - review routing decision logic\"\n      );\n    }\n\n    if (\n      this.healthStatus.routing.fallbackRate >\n      this.config.healthThresholds.maxFallbackRate\n    ) {\n      optimization.push(\n        \"High fallback rate detected - optimize primary route selection\"\n      );\n    }\n\n    // Performance recommendations\n    if (\n      this.healthStatus.performance.p95Latency >\n      this.config.alertThresholds.warningLatency\n    ) {\n      optimization.push(\n        \"P95 latency is elevated - consider performance optimizations\"\n      );\n    }\n\n    const successRate =\n      this.healthStatus.performance.totalRequests > 0\n        ? this.healthStatus.performance.successfulRequests /\n          this.healthStatus.performance.totalRequests\n        : 1.0;\n\n    if (successRate < this.config.healthThresholds.minSuccessRate) {\n      immediate.push(\n        \"Success rate is below threshold - investigate error patterns\"\n      );\n    }\n\n    // Maintenance recommendations\n    maintenance.push(\"Review health monitoring configuration regularly\");\n    maintenance.push(\"Update routing thresholds based on performance trends\");\n    maintenance.push(\"Clean up old performance data and analysis history\");\n\n    this.healthStatus.recommendations = {\n      immediate,\n      optimization,\n      maintenance,\n    };\n  }\n\n  private getRecentRoutingDecisions(timeWindow: number) {\n    const cutoffTime = Date.now() - timeWindow;\n    return this.performanceMetrics.routingDecisions.filter(\n      (decision) => decision.timestamp.getTime() > cutoffTime\n    );\n  }\n\n  private getRecentRequests(timeWindow: number) {\n    const cutoffTime = Date.now() - timeWindow;\n    return this.performanceMetrics.requests.filter(\n      (request) => request.timestamp.getTime() > cutoffTime\n    );\n  }\n\n  private calculateRoutingPatterns(\n    decisions: PerformanceMetrics[\"routingDecisions\"],\n    requests: PerformanceMetrics[\"requests\"]\n  ) {\n    const mcpRequests = requests.filter((r) => r.route === \"mcp\").length;\n    const directBedrockRequests = requests.filter(\n      (r) => r.route === \"direct\"\n    ).length;\n    const totalRequests = requests.length;\n\n    const fallbackOccurrences = decisions.filter(\n      (d) => d.requestedRoute !== d.actualRoute\n    ).length;\n\n    return {\n      mcpUsage: totalRequests > 0 ? mcpRequests / totalRequests : 0,\n      directBedrockUsage:\n        totalRequests > 0 ? directBedrockRequests / totalRequests : 0,\n      fallbackOccurrences,\n    };\n  }\n\n  private analyzePerformanceByRoute(requests: PerformanceMetrics[\"requests\"]) {\n    const mcpRequests = requests.filter((r) => r.route === \"mcp\");\n    const directBedrockRequests = requests.filter((r) => r.route === \"direct\");\n\n    const calculatePerformance = (routeRequests: typeof requests) => {\n      if (routeRequests.length === 0) {\n        return { averageLatency: 0, successRate: 0, throughput: 0 };\n      }\n\n      const totalLatency = routeRequests.reduce((sum, r) => sum + r.latency, 0);\n      const successfulRequests = routeRequests.filter((r) => r.success).length;\n      const timeSpan = this.config.performanceWindow / 1000; // Convert to seconds\n\n      return {\n        averageLatency: totalLatency / routeRequests.length,\n        successRate: successfulRequests / routeRequests.length,\n        throughput: routeRequests.length / timeSpan, // requests per second\n      };\n    };\n\n    return {\n      mcpPerformance: calculatePerformance(mcpRequests),\n      directBedrockPerformance: calculatePerformance(directBedrockRequests),\n    };\n  }\n\n  private calculateRoutingEfficiency(\n    decisions: PerformanceMetrics[\"routingDecisions\"],\n    performance: ReturnType<typeof this.analyzePerformanceByRoute>\n  ): number {\n    if (decisions.length === 0) return 1.0;\n\n    // Calculate decision efficiency (optimal route selection)\n    const optimalDecisions = decisions.filter(\n      (d) => d.requestedRoute === d.actualRoute\n    ).length;\n    const decisionEfficiency = optimalDecisions / decisions.length;\n\n    // Calculate performance efficiency (actual performance vs expected)\n    const mcpPerf = performance.mcpPerformance;\n    const directPerf = performance.directBedrockPerformance;\n\n    let performanceEfficiency = 1.0;\n    if (mcpPerf.averageLatency > 0 && directPerf.averageLatency > 0) {\n      // Compare actual performance to expected thresholds\n      const mcpEfficiency = Math.max(\n        0,\n        1 - mcpPerf.averageLatency / this.config.healthThresholds.maxLatency\n      );\n      const directEfficiency = Math.max(\n        0,\n        1 - directPerf.averageLatency / this.config.healthThresholds.maxLatency\n      );\n      performanceEfficiency = (mcpEfficiency + directEfficiency) / 2;\n    }\n\n    // Combine decision and performance efficiency\n    return decisionEfficiency * 0.6 + performanceEfficiency * 0.4;\n  }\n\n  private async generateRoutingRecommendations(\n    patterns: ReturnType<typeof this.calculateRoutingPatterns>,\n    performance: ReturnType<typeof this.analyzePerformanceByRoute>,\n    efficiency: number\n  ): Promise<RoutingEfficiencyAnalysis[\"recommendations\"]> {\n    const routingOptimizations: string[] = [];\n    const performanceImprovements: string[] = [];\n    const configurationChanges: string[] = [];\n\n    // Routing optimization recommendations\n    if (efficiency < 0.8) {\n      routingOptimizations.push(\n        \"Review routing decision algorithm for better efficiency\"\n      );\n    }\n\n    if (patterns.fallbackOccurrences > patterns.mcpUsage * 0.1) {\n      routingOptimizations.push(\n        \"High fallback rate - consider adjusting route health thresholds\"\n      );\n    }\n\n    if (\n      patterns.mcpUsage < 0.3 &&\n      performance.mcpPerformance.successRate > 0.9\n    ) {\n      routingOptimizations.push(\n        \"MCP route underutilized despite good performance - review routing preferences\"\n      );\n    }\n\n    // Performance improvement recommendations\n    if (\n      performance.mcpPerformance.averageLatency >\n      this.config.alertThresholds.warningLatency\n    ) {\n      performanceImprovements.push(\n        \"MCP route latency is high - investigate connection and processing delays\"\n      );\n    }\n\n    if (\n      performance.directBedrockPerformance.averageLatency >\n      this.config.alertThresholds.warningLatency\n    ) {\n      performanceImprovements.push(\n        \"Direct Bedrock latency is high - check AWS region and network connectivity\"\n      );\n    }\n\n    if (performance.mcpPerformance.successRate < 0.95) {\n      performanceImprovements.push(\n        \"MCP route success rate is low - investigate error patterns\"\n      );\n    }\n\n    if (performance.directBedrockPerformance.successRate < 0.95) {\n      performanceImprovements.push(\n        \"Direct Bedrock success rate is low - check AWS service limits and errors\"\n      );\n    }\n\n    // Configuration change recommendations\n    if (patterns.directBedrockUsage > 0.7) {\n      configurationChanges.push(\n        \"High Direct Bedrock usage - consider increasing MCP capacity\"\n      );\n    }\n\n    if (\n      performance.mcpPerformance.throughput <\n      performance.directBedrockPerformance.throughput * 0.5\n    ) {\n      configurationChanges.push(\n        \"MCP throughput is significantly lower - review MCP configuration\"\n      );\n    }\n\n    configurationChanges.push(\n      \"Review health check intervals based on current usage patterns\"\n    );\n    configurationChanges.push(\n      \"Consider adjusting routing thresholds based on performance trends\"\n    );\n\n    return {\n      routingOptimizations,\n      performanceImprovements,\n      configurationChanges,\n    };\n  }\n\n  private cleanupOldAnalyses(): void {\n    const cutoffTime = Date.now() - 24 * 60 * 60 * 1000; // 24 hours\n\n    for (const [id, analysis] of this.efficiencyAnalysisHistory.entries()) {\n      if (analysis.timestamp.getTime() < cutoffTime) {\n        this.efficiencyAnalysisHistory.delete(id);\n      }\n    }\n  }\n\n  private generateAnalysisId(): string {\n    return `hybrid-analysis-${Date.now()}-${Math.random()\n      .toString(36)\n      .substring(2, 11)}`;\n  }\n}\n\n// Export types for external use\nexport {\n  type HybridHealthConfig,\n  type HybridHealthStatus,\n  type RoutingEfficiencyAnalysis,\n};\n"],"mappings":"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","ignoreList":[]}
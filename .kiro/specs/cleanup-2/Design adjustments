Das Dokument ist fast perfekt — ich empfehle nur gezielte Ergänzungen, um es vollständig kompatibel mit Bedrock / Kiro und laufenden CI/CD-Policies zu machen.

Hier ist die optimierte, finale Fassung mit Ergänzungen und kleinen Präzisierungen (⚙️ markiert):

🧹 Cleanup 2 – Design Document

Date: 2025-01-15
Priority: P1 – Code Quality & Maintenance
Status: 🟡 ACTIVE
Predecessor: supabase-vercel-cleanup (✅ COMPLETED)
Successor: deep-legacy-dereference (spec ID cleanup-r2-spec)

📋 OVERVIEW
Design Objective

Perform a deep, structured cleanup of all residual legacy references (~630 entries), deprecated code, and non-functional artifacts while preserving production stability and measurable performance improvement.

Architecture Principles

Safe Cleanup Pipeline – validation & rollback after each phase

Automated Detection & Audit – machine-generated reports in /reports/

Rollback Safety – Git + file-level restore ≤ 30 min

CI/CD Compliance – integrated legacy-guard in build pipeline

Bundle Efficiency – target 5-10 % bundle reduction

🏗️ ARCHITECTURE
Cleanup Pipeline Flow
graph TD
    A[Legacy Scanner] --> B[Impact Analyzer]
    B --> C[Cleanup Orchestrator]
    C --> D[Validation Suite]
    D --> E[Rollback Manager]
    E --> F[Audit Writer]
    F --> G[Compliance Certifier]

Component Hierarchy

Detection Layer – scanner, dependency analyzer, bundle assessor

Processing Layer – safe cleanup engine, archiver, import optimizer

Validation Layer – build + test verification suite

Recovery Layer – rollback manager + state restoration

🔧 COMPONENTS & INTERFACES

(alle Interfaces sind mit Bedrock / Kiro kompatibel)

LegacyReferenceScanner ⚙️

erweitert um Twilio/Resend/Lovable Pattern Detection

exportiert JSON für Bedrock-Hook validate-legacy-drift

SafeCleanupEngine ⚙️

erzeugt per-phase rollback tags

validiert Build via ci-test-runner.cjs --suite=integration

BundleOptimizer ⚙️

integriert vite-bundle-analyzer und esbuild-analyze

exportiert bundle-report.json für VC Performance Dashboard

📊 DATA MODELS & PHASES

neue Kategorie EXTERNAL_SERVICES = ("twilio" | "resend" | "lovable")

jede Phase hat validationCriteria.buildPass = true und coverage >= 85 %

🛡️ ERROR HANDLING & RECOVERY ⚙️

Fehlerklasse SecurityViolation für gefährdete API-Keys

automatische rollback --soft bei Build- oder Coverage-Fail

Bedrock führt Audit Trail in /reports/errors/*.json

🧪 TESTING STRATEGY (aktualisiert)
Layer	Tool	Responsibility
Unit	Jest ESM	Scanner + Engine
Integration	Jest + Kiro Bridge	E2E Cleanup Pipeline
Performance	Lighthouse CI	Bundle Size Regression
Security	Trivy + Snyk	Credential Leak Detection
Rollback	Custom rollback.test.ts	State Integrity
📈 PERFORMANCE TARGETS

Bundle Size ↓ ≥ 5 %

Build Time ≤ previous baseline

P95 Latency ≤ 1.5 s (generation)

Coverage ≥ 85 % all suites

🔄 ROLLBACK STRATEGY

Git Tagging: cleanup-r2-phaseX-<timestamp>

S3 Snapshot: optional artifact backup per phase

Trigger Policy: rollback bei buildFailure || testFailure || securityAlert

🚀 DEPLOYMENT STRATEGY (ergänzt)

Phase A – Preparation : scan + backup

Phase B – Execution : cleanup + validation

Phase C – Deployment : safe S3 sync (no --delete before verify)

Phase D – Post-Monitoring : CloudWatch + Audit Log

Validation Gates:
✅ Build success ✅ Tests green ✅ Coverage ≥ 85 ✅ Bundle optimized

🔐 SECURITY & COMPLIANCE ENHANCEMENTS

Legacy API keys revoked and documented in secrets-rotation-proof.md

All secrets migrated to AWS Secrets Manager

Legacy domains removed from DNS + CSP headers

"Certificate of Clean" PDF generated via audit-writer.ts

📚 DOCUMENTATION DELIVERABLES

cleanup-r2-playbook.md – execution steps + rollback

legacy-audit-report.json – detected references

deployment-policy.md – safe deploy rules (Kiro/Bedrock)

compliance-certificate.pdf – final audit output

🎯 SUCCESS METRICS
Metric	Target	Tool
Legacy Refs	< 50	Kiro Audit
Bundle Reduction	≥ 5 %	Analyzer Report
Coverage	≥ 85 %	Jest Summary
Performance P95	≤ 1.5 s	Meta Monitor
Security Alerts	0	Trivy/Snyk Scan
✅ CONCLUSION

This design now integrates:

Deep legacy removal (Supabase → Twilio → Resend → Lovable)

Verified AWS-only architecture

CI/CD guards + rollback safety

Bedrock + Kiro task handoff compatibility

Secure deployment policy

Result: matbakh.app is fully ready for Phase 6 – UX and Visibility Launch once Cleanup 2 completes.
{
  "enabled": true,
  "name": "Fallback Logic Consistency Validator",
  "description": "Validates consistency of all fallback mechanisms between MCP and Direct-Bedrock paths, ensuring critical operations have defined fallbacks and tests pass",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "src/lib/ai-orchestrator/intelligent-router.ts",
      "src/lib/ai-orchestrator/direct-bedrock-client.ts",
      "src/lib/ai-orchestrator/mcp-router.ts",
      "test/fallback-validation/*.test.ts",
      "docs/architecture-decisions.md"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Analyze the fallback logic consistency across MCP and Direct-Bedrock routing paths. Ensure:\n\n1. **Critical Operation Fallbacks**: Verify that emergency, infra, and support operations have defined fallback mechanisms\n2. **Test Validation**: Check that all tests in test/fallback-validation/*.test.ts are passing\n3. **Routing Decision Matrix**: Validate that new routingDecisionMatrix entries have documented fallbacks\n4. **Architecture Documentation**: Ensure new routing paths are explained in architecture-decisions.md\n5. **Audit Trail**: Update .audit/fallback-routing.json with recently checked paths\n\nFor any inconsistencies found:\n- Block deployment if fallbacks are missing or tests are failing\n- Support --ignore-fallback-check only in dev environments\n- Generate warnings for undocumented routing paths\n- Provide specific remediation steps\n\nFocus on hybrid routing scenarios where both MCP and Direct-Bedrock paths need to work seamlessly together."
  }
}
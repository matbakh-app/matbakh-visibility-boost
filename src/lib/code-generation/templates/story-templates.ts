/**
 * Storybook Story Templates for Code Generation
 * 
 * Provides templates for generating Storybook stories
 */

import { CodeGenerationConfig } from '../types';

export class StoryTemplates {
    constructor(private config: CodeGenerationConfig) { }

    /**
     * Generate complete Storybook stories file
     */
    generateStories(options: {
        componentName: string;
        stories: string[];
        controls?: string;
    }): string {
        const { componentName, stories, controls } = options;

        return `/**
 * ${componentName} Component Stories
 * Generated by Kiro Code Generator
 */

import type { Meta, StoryObj } from '@storybook/react';
import { ${componentName} } from './${componentName}';

const meta: Meta<typeof ${componentName}> = {
  title: 'Components/${componentName}',
  component: ${componentName},
  parameters: {
    layout: 'centered',
    docs: {
      description: {
        component: '${componentName} component following Kiro architecture patterns.',
      },
    },
  },
  argTypes: {
${controls || this.generateDefaultControls()}
  },
  tags: ['autodocs'],
};

export default meta;
type Story = StoryObj<typeof meta>;

${stories.join('\n\n')}
`;
    }

    /**
     * Generate default story
     */
    generateDefaultStory(componentName: string, props?: Record<string, any>): string {
        const propsString = props ? JSON.stringify(props, null, 2).replace(/"/g, "'") : "{}";

        return `export const Default: Story = {
  args: ${propsString},
};`;
    }

    /**
     * Generate variant stories
     */
    generateVariantStories(componentName: string, variants: Array<{ name: string, props: Record<string, any> }>): string[] {
        return variants.map(variant => {
            const propsString = JSON.stringify(variant.props, null, 2).replace(/"/g, "'");

            return `export const ${variant.name}: Story = {
  args: ${propsString},
};`;
        });
    }

    /**
     * Generate interactive story with actions
     */
    generateInteractiveStory(componentName: string): string {
        return `export const Interactive: Story = {
  args: {
    children: 'Interactive ${componentName}',
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const element = canvas.getByRole('region');
    
    // Simulate user interactions
    await userEvent.click(element);
    await expect(element).toBeInTheDocument();
  },
};`;
    }

    /**
     * Generate accessibility story
     */
    generateAccessibilityStory(componentName: string): string {
        return `export const Accessibility: Story = {
  args: {
    children: 'Accessibility Test',
  },
  parameters: {
    a11y: {
      config: {
        rules: [
          {
            id: 'color-contrast',
            enabled: true,
          },
          {
            id: 'keyboard-navigation',
            enabled: true,
          },
        ],
      },
    },
  },
};`;
    }

    /**
     * Generate responsive story
     */
    generateResponsiveStory(componentName: string): string {
        return `export const Responsive: Story = {
  args: {
    children: 'Responsive ${componentName}',
  },
  parameters: {
    viewport: {
      viewports: {
        mobile: {
          name: 'Mobile',
          styles: { width: '375px', height: '667px' },
        },
        tablet: {
          name: 'Tablet',
          styles: { width: '768px', height: '1024px' },
        },
        desktop: {
          name: 'Desktop',
          styles: { width: '1200px', height: '800px' },
        },
      },
    },
  },
};`;
    }

    /**
     * Generate dark mode story
     */
    generateDarkModeStory(componentName: string): string {
        return `export const DarkMode: Story = {
  args: {
    children: 'Dark Mode ${componentName}',
  },
  parameters: {
    backgrounds: {
      default: 'dark',
    },
    theme: 'dark',
  },
  decorators: [
    (Story) => (
      <div className="dark">
        <Story />
      </div>
    ),
  ],
};`;
    }

    /**
     * Generate loading state story
     */
    generateLoadingStory(componentName: string): string {
        return `export const Loading: Story = {
  args: {
    isLoading: true,
    children: 'Loading ${componentName}',
  },
};`;
    }

    /**
     * Generate error state story
     */
    generateErrorStory(componentName: string): string {
        return `export const Error: Story = {
  args: {
    error: 'Something went wrong',
    children: 'Error ${componentName}',
  },
};`;
    }

    /**
     * Generate default controls for Storybook
     */
    private generateDefaultControls(): string {
        return `    children: {
      control: 'text',
      description: 'Content to display inside the component',
    },
    className: {
      control: 'text',
      description: 'Additional CSS classes',
    },`;
    }

    /**
     * Generate controls based on component props
     */
    generateControlsFromProps(props: Record<string, string>): string {
        return Object.entries(props)
            .map(([name, type]) => {
                const control = this.getControlType(type);
                return `    ${name}: {
      control: '${control}',
      description: '${name} prop',
    },`;
            })
            .join('\n');
    }

    /**
     * Get appropriate Storybook control type for TypeScript type
     */
    private getControlType(type: string): string {
        switch (type.toLowerCase()) {
            case 'string':
                return 'text';
            case 'number':
                return 'number';
            case 'boolean':
                return 'boolean';
            case 'date':
                return 'date';
            default:
                return 'text';
        }
    }
}
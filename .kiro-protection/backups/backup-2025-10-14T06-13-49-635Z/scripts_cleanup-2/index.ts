#!/usr/bin/env tsx

/**
 * Cleanup 2 Infrastructure - Main Entry Point
 *
 * Orchestrates legacy reference scanning and rollback management
 * Provides unified CLI interface for all cleanup operations
 */

import * as fs from "fs";
import { LegacyReferenceScanner } from "./legacy-scanner";
import { RollbackManager } from "./rollback-manager";

export class CleanupInfrastructure {
  private scanner: LegacyReferenceScanner;
  private rollbackManager: RollbackManager;

  constructor() {
    this.scanner = new LegacyReferenceScanner();
    this.rollbackManager = new RollbackManager();
  }

  /**
   * Initialize cleanup infrastructure
   */
  async initialize(): Promise<void> {
    console.log("üöÄ Initializing Cleanup 2 Infrastructure...");

    // Ensure required directories exist
    const dirs = ["reports", "backups", "scripts/cleanup-2"];
    for (const dir of dirs) {
      fs.mkdirSync(dir, { recursive: true });
    }

    // Create initial rollback point
    await this.rollbackManager.createRollbackPoint(
      "phase0",
      "Initial cleanup baseline"
    );

    console.log("‚úÖ Cleanup infrastructure initialized");
  }

  /**
   * Run full cleanup scan and analysis
   */
  async runFullScan(): Promise<void> {
    console.log("üîç Running comprehensive legacy scan...");

    const result = await this.scanner.scanDirectory(".");
    await this.scanner.exportForBedrock(result);

    // Generate summary report
    const summaryPath = "reports/cleanup-summary.md";
    await this.generateSummaryReport(result, summaryPath);

    console.log(`üìä Scan complete. Results in reports/detection.json`);
    console.log(`üìã Summary report: ${summaryPath}`);
  }

  /**
   * Create phase rollback point with validation
   */
  async createPhaseCheckpoint(
    phase: string,
    description: string
  ): Promise<void> {
    console.log(`üè∑Ô∏è  Creating checkpoint for ${phase}...`);

    // Run quick validation before creating checkpoint
    const isValid = await this.validateSystemState();
    if (!isValid) {
      throw new Error("System validation failed - cannot create checkpoint");
    }

    await this.rollbackManager.createRollbackPoint(phase, description);
    console.log(`‚úÖ Checkpoint created for ${phase}`);
  }

  /**
   * Validate system state before operations
   */
  private async validateSystemState(): Promise<boolean> {
    try {
      // Check if we're in the right directory
      if (!fs.existsSync("package.json")) {
        console.error("‚ùå Not in project root directory");
        return false;
      }

      // Check Git status
      const { execSync } = await import("child_process");
      const gitStatus = execSync("git status --porcelain", {
        encoding: "utf-8",
      }).trim();

      if (gitStatus) {
        console.warn("‚ö†Ô∏è  Working directory has uncommitted changes");
        // Don't fail, but warn
      }

      return true;
    } catch (error) {
      console.error("‚ùå System validation failed:", error);
      return false;
    }
  }

  /**
   * Generate human-readable summary report
   */
  private async generateSummaryReport(
    scanResult: any,
    outputPath: string
  ): Promise<void> {
    const report = `# Cleanup 2 - Legacy Reference Scan Report

**Generated:** ${new Date().toISOString()}
**Scanner Version:** 2.0.0

## üìä Summary

- **Total References Found:** ${scanResult.totalReferences}
- **Critical Issues:** ${scanResult.summary.criticalCount}
- **High Risk Issues:** ${scanResult.summary.highRiskCount}
- **Average Confidence:** ${Math.round(
      scanResult.summary.averageConfidence * 100
    )}%

## üè∑Ô∏è Service Breakdown

${Object.entries(scanResult.serviceBreakdown)
  .filter(([_, count]) => count > 0)
  .map(([service, count]) => `- **${service}:** ${count} references`)
  .join("\n")}

## ‚ö†Ô∏è Risk Distribution

- **Critical:** ${scanResult.riskBreakdown.critical} references
- **High:** ${scanResult.riskBreakdown.high} references  
- **Medium:** ${scanResult.riskBreakdown.medium} references
- **Low:** ${scanResult.riskBreakdown.low} references

## üéØ Top Priority Services

${scanResult.summary.topServices
  .slice(0, 3)
  .map(
    (service: any, index: number) =>
      `${index + 1}. **${service.service}** - ${service.count} references`
  )
  .join("\n")}

## üìã Recommendations

${
  scanResult.recommendations
    ? scanResult.recommendations.map((rec: string) => `- ${rec}`).join("\n")
    : "No specific recommendations generated."
}

## üîó Next Steps

1. Review critical and high-risk references first
2. Create phase rollback point before cleanup
3. Process references by service priority
4. Validate after each cleanup phase

---
*Report generated by Cleanup 2 Infrastructure*
`;

    fs.writeFileSync(outputPath, report);
  }
}

// CLI interface
async function main() {
  const infrastructure = new CleanupInfrastructure();
  const command = process.argv[2];

  try {
    switch (command) {
      case "init":
        await infrastructure.initialize();
        break;

      case "scan":
        await infrastructure.runFullScan();
        break;

      case "checkpoint":
        const phase = process.argv[3] || "manual";
        const description = process.argv[4] || "Manual checkpoint";
        await infrastructure.createPhaseCheckpoint(phase, description);
        break;

      default:
        console.log("Cleanup 2 Infrastructure");
        console.log("========================");
        console.log("Usage: cleanup-2 <command> [args...]");
        console.log("");
        console.log("Commands:");
        console.log(
          "  init                           - Initialize cleanup infrastructure"
        );
        console.log(
          "  scan                           - Run full legacy reference scan"
        );
        console.log(
          "  checkpoint <phase> <desc>      - Create phase rollback point"
        );
        console.log("");
        console.log("Individual tools:");
        console.log(
          "  tsx scripts/cleanup-2/legacy-scanner.ts     - Run scanner only"
        );
        console.log(
          "  tsx scripts/cleanup-2/rollback-manager.ts   - Manage rollbacks"
        );
    }
  } catch (error) {
    console.error("‚ùå Command failed:", error);
    process.exit(1);
  }
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

// CleanupInfrastructure already exported above

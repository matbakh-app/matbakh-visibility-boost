#!/usr/bin/env tsx

/**\n * Husky Integration - Cleanup 2\n * \n * Configures and manages Husky pre-commit hooks for legacy detection\n * Provides fast scanning and emergency bypass mechanisms\n * \n * Requirements: 3.2\n */\n\nimport { PreCommitGuard } from './pre-commit-guard';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { execSync } from 'child_process';\n\nexport interface HuskyConfig {\n  enabled: boolean;\n  hooks: {\n    preCommit: {\n      enabled: boolean;\n      fastScan: boolean;\n      emergencyBypass: boolean;\n      timeoutMs: number;\n    };\n    commitMsg: {\n      enabled: boolean;\n      validateFormat: boolean;\n    };\n  };\n  exemptions: {\n    branches: string[];\n    users: string[];\n    emergencyKeywords: string[];\n  };\n}\n\nexport class HuskyIntegration {\n  private config: HuskyConfig;\n  private huskyDir: string;\n  private preCommitGuard: PreCommitGuard;\n\n  constructor() {\n    this.huskyDir = '.husky';\n    this.config = this.loadConfig();\n    this.preCommitGuard = new PreCommitGuard();\n  }\n\n  /**\n   * Load Husky configuration\n   */\n  private loadConfig(): HuskyConfig {\n    const configPath = 'scripts/cleanup-2/husky-config.json';\n    \n    if (fs.existsSync(configPath)) {\n      try {\n        const content = fs.readFileSync(configPath, 'utf-8');\n        return JSON.parse(content);\n      } catch (error) {\n        console.warn('‚ö†Ô∏è  Failed to load Husky config, using defaults');\n      }\n    }\n    \n    return this.getDefaultConfig();\n  }\n\n  /**\n   * Get default Husky configuration\n   */\n  private getDefaultConfig(): HuskyConfig {\n    return {\n      enabled: true,\n      hooks: {\n        preCommit: {\n          enabled: true,\n          fastScan: true,\n          emergencyBypass: true,\n          timeoutMs: 30000 // 30 seconds\n        },\n        commitMsg: {\n          enabled: true,\n          validateFormat: true\n        }\n      },\n      exemptions: {\n        branches: ['emergency/*', 'hotfix/*'],\n        users: ['ci-bot', 'github-actions'],\n        emergencyKeywords: ['EMERGENCY', 'HOTFIX', 'CRITICAL']\n      }\n    };\n  }\n\n  /**\n   * Install Husky and configure hooks\n   */\n  async installHusky(): Promise<void> {\n    console.log('üîß Installing Husky integration...');\n    \n    try {\n      // Check if Husky is installed\n      if (!this.isHuskyInstalled()) {\n        console.log('üì¶ Installing Husky...');\n        execSync('npm install --save-dev husky', { stdio: 'inherit' });\n      }\n      \n      // Initialize Husky\n      if (!fs.existsSync(this.huskyDir)) {\n        console.log('üöÄ Initializing Husky...');\n        execSync('npx husky init', { stdio: 'inherit' });\n      }\n      \n      // Install hooks\n      await this.installPreCommitHook();\n      await this.installCommitMsgHook();\n      \n      // Create configuration file\n      await this.saveConfig();\n      \n      console.log('‚úÖ Husky integration installed successfully');\n      \n    } catch (error) {\n      throw new Error(`Failed to install Husky: ${error}`);\n    }\n  }\n\n  /**\n   * Check if Husky is installed\n   */\n  private isHuskyInstalled(): boolean {\n    try {\n      execSync('npx husky --version', { stdio: 'pipe' });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Install pre-commit hook\n   */\n  private async installPreCommitHook(): Promise<void> {\n    if (!this.config.hooks.preCommit.enabled) {\n      console.log('‚è≠Ô∏è  Pre-commit hook disabled, skipping...');\n      return;\n    }\n    \n    const hookPath = path.join(this.huskyDir, 'pre-commit');\n    const hookContent = this.generatePreCommitHook();\n    \n    fs.writeFileSync(hookPath, hookContent, { mode: 0o755 });\n    console.log('‚úÖ Pre-commit hook installed');\n  }\n\n  /**\n   * Generate pre-commit hook content\n   */\n  private generatePreCommitHook(): string {\n    const fastScanFlag = this.config.hooks.preCommit.fastScan ? '--fast' : '';\n    const timeoutFlag = `--timeout ${this.config.hooks.preCommit.timeoutMs}`;\n    \n    return `#!/bin/sh\n# Cleanup 2 - Pre-commit Legacy Detection\n# Auto-generated by Husky Integration\n\necho \"üîç Running legacy reference check...\"\n\n# Check for emergency bypass\nif [ \"$CLEANUP_BYPASS\" = \"true\" ]; then\n  echo \"‚ö†Ô∏è  Emergency bypass enabled - skipping legacy check\"\n  exit 0\nfi\n\n# Check branch exemptions\nBRANCH=$(git rev-parse --abbrev-ref HEAD)\ncase \"$BRANCH\" in\n  emergency/*|hotfix/*)\n    echo \"‚ö†Ô∏è  Emergency branch detected - skipping legacy check\"\n    exit 0\n    ;;\nesac\n\n# Check commit message for emergency keywords\nif [ -f \".git/COMMIT_EDITMSG\" ]; then\n  if grep -qiE \"(EMERGENCY|HOTFIX|CRITICAL)\" \".git/COMMIT_EDITMSG\"; then\n    echo \"‚ö†Ô∏è  Emergency commit detected - skipping legacy check\"\n    exit 0\n  fi\nfi\n\n# Run legacy detection\ntimeout ${this.config.hooks.preCommit.timeoutMs / 1000} npx tsx scripts/cleanup-2/pre-commit-guard.ts ${fastScanFlag} ${timeoutFlag}\nEXIT_CODE=$?\n\nif [ $EXIT_CODE -eq 124 ]; then\n  echo \"‚è∞ Legacy check timed out - allowing commit with warning\"\n  echo \"üí° Run 'npm run cleanup:scan' manually to check for legacy references\"\n  exit 0\nfi\n\nexit $EXIT_CODE\n`;\n  }\n\n  /**\n   * Install commit-msg hook\n   */\n  private async installCommitMsgHook(): Promise<void> {\n    if (!this.config.hooks.commitMsg.enabled) {\n      console.log('‚è≠Ô∏è  Commit-msg hook disabled, skipping...');\n      return;\n    }\n    \n    const hookPath = path.join(this.huskyDir, 'commit-msg');\n    const hookContent = this.generateCommitMsgHook();\n    \n    fs.writeFileSync(hookPath, hookContent, { mode: 0o755 });\n    console.log('‚úÖ Commit-msg hook installed');\n  }\n\n  /**\n   * Generate commit-msg hook content\n   */\n  private generateCommitMsgHook(): string {\n    return `#!/bin/sh\n# Cleanup 2 - Commit Message Validation\n# Auto-generated by Husky Integration\n\nCOMMIT_MSG_FILE=$1\nCOMMIT_MSG=$(cat \"$COMMIT_MSG_FILE\")\n\n# Skip validation for merge commits\nif echo \"$COMMIT_MSG\" | grep -q \"^Merge \"; then\n  exit 0\nfi\n\n# Skip validation for revert commits\nif echo \"$COMMIT_MSG\" | grep -q \"^Revert \"; then\n  exit 0\nfi\n\n# Check for legacy service mentions in commit message\nif echo \"$COMMIT_MSG\" | grep -qiE \"(supabase|vercel|twilio|resend|lovable)\"; then\n  echo \"‚ö†Ô∏è  Warning: Commit message mentions legacy services\"\n  echo \"üí° Consider using 'legacy:' prefix if this is intentional cleanup\"\nfi\n\n# Validate commit message format (optional)\nif [ \"${this.config.hooks.commitMsg.validateFormat}\" = \"true\" ]; then\n  if ! echo \"$COMMIT_MSG\" | grep -qE \"^(feat|fix|docs|style|refactor|test|chore|cleanup)(\(.+\))?: .+\"; then\n    echo \"‚ùå Invalid commit message format\"\n    echo \"üí° Use: type(scope): description\"\n    echo \"   Examples: feat(auth): add login, fix(ui): button styling, cleanup(legacy): remove supabase\"\n    exit 1\n  fi\nfi\n\nexit 0\n`;\n  }\n\n  /**\n   * Save configuration to file\n   */\n  private async saveConfig(): Promise<void> {\n    const configPath = 'scripts/cleanup-2/husky-config.json';\n    fs.mkdirSync(path.dirname(configPath), { recursive: true });\n    fs.writeFileSync(configPath, JSON.stringify(this.config, null, 2));\n  }\n\n  /**\n   * Uninstall Husky hooks\n   */\n  async uninstallHusky(): Promise<void> {\n    console.log('üóëÔ∏è  Uninstalling Husky integration...');\n    \n    try {\n      // Remove hooks\n      const preCommitPath = path.join(this.huskyDir, 'pre-commit');\n      const commitMsgPath = path.join(this.huskyDir, 'commit-msg');\n      \n      if (fs.existsSync(preCommitPath)) {\n        fs.unlinkSync(preCommitPath);\n        console.log('‚úÖ Pre-commit hook removed');\n      }\n      \n      if (fs.existsSync(commitMsgPath)) {\n        fs.unlinkSync(commitMsgPath);\n        console.log('‚úÖ Commit-msg hook removed');\n      }\n      \n      console.log('‚úÖ Husky integration uninstalled');\n      \n    } catch (error) {\n      throw new Error(`Failed to uninstall Husky: ${error}`);\n    }\n  }\n\n  /**\n   * Test hooks functionality\n   */\n  async testHooks(): Promise<boolean> {\n    console.log('üß™ Testing Husky hooks...');\n    \n    try {\n      // Test pre-commit hook\n      const preCommitPath = path.join(this.huskyDir, 'pre-commit');\n      if (fs.existsSync(preCommitPath)) {\n        console.log('‚úÖ Pre-commit hook exists');\n        \n        // Test execution (dry run)\n        try {\n          execSync(`CLEANUP_BYPASS=true ${preCommitPath}`, { stdio: 'pipe' });\n          console.log('‚úÖ Pre-commit hook executes successfully');\n        } catch (error) {\n          console.warn('‚ö†Ô∏è  Pre-commit hook execution failed:', error);\n          return false;\n        }\n      } else {\n        console.warn('‚ö†Ô∏è  Pre-commit hook not found');\n        return false;\n      }\n      \n      // Test commit-msg hook\n      const commitMsgPath = path.join(this.huskyDir, 'commit-msg');\n      if (fs.existsSync(commitMsgPath)) {\n        console.log('‚úÖ Commit-msg hook exists');\n      } else {\n        console.warn('‚ö†Ô∏è  Commit-msg hook not found');\n        return false;\n      }\n      \n      return true;\n      \n    } catch (error) {\n      console.error('‚ùå Hook testing failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Enable emergency bypass\n   */\n  enableEmergencyBypass(): void {\n    if (!this.config.hooks.preCommit.emergencyBypass) {\n      console.log('‚ùå Emergency bypass is disabled in configuration');\n      return;\n    }\n    \n    console.log('üö® Enabling emergency bypass...');\n    console.log('üí° Set environment variable: export CLEANUP_BYPASS=true');\n    console.log('üí° Or use emergency branch: git checkout -b emergency/fix-critical-issue');\n    console.log('üí° Or include EMERGENCY in commit message');\n  }\n\n  /**\n   * Disable emergency bypass\n   */\n  disableEmergencyBypass(): void {\n    console.log('üîí Disabling emergency bypass...');\n    console.log('üí° Unset environment variable: unset CLEANUP_BYPASS');\n  }\n\n  /**\n   * Get hook status\n   */\n  getHookStatus(): {\n    huskyInstalled: boolean;\n    preCommitExists: boolean;\n    commitMsgExists: boolean;\n    configExists: boolean;\n  } {\n    return {\n      huskyInstalled: this.isHuskyInstalled(),\n      preCommitExists: fs.existsSync(path.join(this.huskyDir, 'pre-commit')),\n      commitMsgExists: fs.existsSync(path.join(this.huskyDir, 'commit-msg')),\n      configExists: fs.existsSync('scripts/cleanup-2/husky-config.json')\n    };\n  }\n\n  /**\n   * Update configuration\n   */\n  async updateConfig(newConfig: Partial<HuskyConfig>): Promise<void> {\n    this.config = { ...this.config, ...newConfig };\n    await this.saveConfig();\n    \n    // Reinstall hooks with new configuration\n    await this.installPreCommitHook();\n    await this.installCommitMsgHook();\n    \n    console.log('‚úÖ Husky configuration updated');\n  }\n}\n\n// CLI interface\nif (import.meta.url === `file://${process.argv[1]}`) {\n  async function main() {\n    const command = process.argv[2];\n    const integration = new HuskyIntegration();\n    \n    try {\n      switch (command) {\n        case 'install':\n          await integration.installHusky();\n          break;\n          \n        case 'uninstall':\n          await integration.uninstallHusky();\n          break;\n          \n        case 'test':\n          const success = await integration.testHooks();\n          process.exit(success ? 0 : 1);\n          break;\n          \n        case 'status':\n          const status = integration.getHookStatus();\n          console.log('\\nüìä HUSKY STATUS');\n          console.log('='.repeat(20));\n          console.log(`Husky Installed: ${status.huskyInstalled ? '‚úÖ' : '‚ùå'}`);\n          console.log(`Pre-commit Hook: ${status.preCommitExists ? '‚úÖ' : '‚ùå'}`);\n          console.log(`Commit-msg Hook: ${status.commitMsgExists ? '‚úÖ' : '‚ùå'}`);\n          console.log(`Configuration: ${status.configExists ? '‚úÖ' : '‚ùå'}`);\n          break;\n          \n        case 'bypass':\n          const action = process.argv[3];\n          if (action === 'enable') {\n            integration.enableEmergencyBypass();\n          } else if (action === 'disable') {\n            integration.disableEmergencyBypass();\n          } else {\n            console.log('Usage: husky-integration.ts bypass <enable|disable>');\n          }\n          break;\n          \n        default:\n          console.log('Husky Integration - Cleanup 2');\n          console.log('===============================');\n          console.log('Usage: husky-integration.ts <command>');\n          console.log('');\n          console.log('Commands:');\n          console.log('  install    - Install Husky and configure hooks');\n          console.log('  uninstall  - Remove Husky hooks');\n          console.log('  test       - Test hook functionality');\n          console.log('  status     - Show installation status');\n          console.log('  bypass     - Manage emergency bypass (enable|disable)');\n      }\n    } catch (error) {\n      console.error('‚ùå Command failed:', error);\n      process.exit(1);\n    }\n  }\n\n  main();\n}"
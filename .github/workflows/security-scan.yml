name: Automated Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run daily at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:
    inputs:
      scan_type:
        description: "Type of security scan to run"
        required: true
        default: "standard"
        type: choice
        options:
          - quick
          - standard
          - comprehensive
      enable_penetration_testing:
        description: "Enable penetration testing"
        required: false
        default: false
        type: boolean

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 60

    strategy:
      matrix:
        scan-type:
          - ${{ github.event.inputs.scan_type || 'standard' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          npm install -g tsx

      - name: Setup environment
        run: |
          cp .env.example .env.test
          echo "NODE_ENV=test" >> .env.test

      - name: Run TypeScript compilation check
        run: npx tsc --noEmit

      - name: Run security linting
        run: |
          npm run lint
          # Additional security-focused linting
          npx eslint src/ --ext .ts,.tsx --config .eslintrc.security.js || true

      - name: Run dependency security audit
        run: |
          npm audit --audit-level=moderate
          # Check for known vulnerabilities
          npx audit-ci --moderate

      - name: Run quick security scan
        if: matrix.scan-type == 'quick' || github.event_name == 'pull_request'
        run: |
          tsx scripts/run-security-scan.ts \
            --scan-type quick \
            --output security-scan-quick.json \
            --verbose

      - name: Run standard security scan
        if: matrix.scan-type == 'standard' && github.event_name != 'pull_request'
        run: |
          tsx scripts/run-security-scan.ts \
            --scan-type standard \
            --output security-scan-standard.json \
            --verbose

      - name: Run comprehensive security scan
        if: matrix.scan-type == 'comprehensive'
        run: |
          tsx scripts/run-security-scan.ts \
            --scan-type comprehensive \
            --penetration-testing \
            --output security-scan-comprehensive.json \
            --verbose

      - name: Run compliance-only scan
        if: github.event_name == 'schedule'
        run: |
          tsx scripts/run-security-scan.ts \
            --compliance-only \
            --output compliance-scan.json \
            --verbose

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results-${{ matrix.scan-type }}
          path: |
            security-scan-*.json
            compliance-scan.json
          retention-days: 30

      - name: Parse security results
        id: security-results
        if: always()
        run: |
          # Parse the security scan results
          if [ -f "security-scan-quick.json" ]; then
            SCAN_FILE="security-scan-quick.json"
          elif [ -f "security-scan-standard.json" ]; then
            SCAN_FILE="security-scan-standard.json"
          elif [ -f "security-scan-comprehensive.json" ]; then
            SCAN_FILE="security-scan-comprehensive.json"
          elif [ -f "compliance-scan.json" ]; then
            SCAN_FILE="compliance-scan.json"
          else
            echo "No scan results found"
            exit 1
          fi

          # Extract key metrics
          SECURITY_SCORE=$(jq -r '.overallSecurityScore // "N/A"' "$SCAN_FILE")
          CRITICAL_VULNS=$(jq -r '.scanResults.mcpRouting.vulnerabilities[]? | select(.severity=="critical") | .id' "$SCAN_FILE" | wc -l)
          HIGH_VULNS=$(jq -r '.scanResults.mcpRouting.vulnerabilities[]? | select(.severity=="high") | .id' "$SCAN_FILE" | wc -l)
          COMPLIANCE_STATUS=$(jq -r '.scanResults.compliance.overallCompliant // false' "$SCAN_FILE")

          echo "security_score=$SECURITY_SCORE" >> $GITHUB_OUTPUT
          echo "critical_vulns=$CRITICAL_VULNS" >> $GITHUB_OUTPUT
          echo "high_vulns=$HIGH_VULNS" >> $GITHUB_OUTPUT
          echo "compliance_status=$COMPLIANCE_STATUS" >> $GITHUB_OUTPUT

      - name: Comment PR with security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let scanFile = '';
            if (fs.existsSync('security-scan-quick.json')) {
              scanFile = 'security-scan-quick.json';
            }

            if (scanFile) {
              const results = JSON.parse(fs.readFileSync(scanFile, 'utf8'));
              
              const comment = `## 🔒 Security Scan Results
              
              **Overall Security Score:** ${results.overallSecurityScore || 'N/A'}/100
              **Critical Vulnerabilities:** ${{ steps.security-results.outputs.critical_vulns }}
              **High Vulnerabilities:** ${{ steps.security-results.outputs.high_vulns }}
              **Compliance Status:** ${{ steps.security-results.outputs.compliance_status }}
              
              ${results.recommendations?.length > 0 ? `
              **Recommendations:**
              ${results.recommendations.map((rec, i) => `${i + 1}. ${rec}`).join('\n')}
              ` : '✅ No security recommendations'}
              
              <details>
              <summary>View detailed results</summary>
              
              \`\`\`json
              ${JSON.stringify(results, null, 2)}
              \`\`\`
              </details>`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

      - name: Fail on critical vulnerabilities
        if: steps.security-results.outputs.critical_vulns > 0
        run: |
          echo "❌ Critical vulnerabilities found: ${{ steps.security-results.outputs.critical_vulns }}"
          echo "Security scan must pass before merging"
          exit 1

      - name: Warn on high vulnerabilities
        if: steps.security-results.outputs.high_vulns > 0
        run: |
          echo "⚠️ High vulnerabilities found: ${{ steps.security-results.outputs.high_vulns }}"
          echo "Consider addressing these vulnerabilities"

      - name: Check compliance status
        if: steps.security-results.outputs.compliance_status == 'false'
        run: |
          echo "❌ Compliance validation failed"
          echo "System does not meet compliance requirements"
          exit 1

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: security-scan
    if: always() && github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download security scan results
        uses: actions/download-artifact@v4
        with:
          pattern: security-scan-results-*
          merge-multiple: true

      - name: Generate security report
        run: |
          # Create a comprehensive security report
          cat > security-report.md << 'EOF'
          # Daily Security Report

          **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}

          ## Summary

          This report contains the results of automated security scanning performed on the hybrid AI architecture.

          ## Scan Results

          EOF

          # Add results from each scan file
          for file in security-scan-*.json compliance-scan.json; do
            if [ -f "$file" ]; then
              echo "### $(basename "$file" .json)" >> security-report.md
              echo "" >> security-report.md
              echo '```json' >> security-report.md
              cat "$file" >> security-report.md
              echo '```' >> security-report.md
              echo "" >> security-report.md
            fi
          done

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: daily-security-report
          path: security-report.md
          retention-days: 90

      - name: Send security report notification
        if: failure()
        run: |
          echo "🚨 Security scan failed - immediate attention required"
          echo "Check the security scan results for critical vulnerabilities"
          # In production, this would send notifications to security team

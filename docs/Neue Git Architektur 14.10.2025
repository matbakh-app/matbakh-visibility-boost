üß† Ziel 1

Alle Report-Dateien (z. B. docs/test-fixes-*.md, docs/system-restoration-report.md, docs/kiro-system-protection-report.md, usw.)

werden automatisch den zugeh√∂rigen Specs im Ordner .kiro/specs/ zugeordnet.

Jede Spec bekommt im Footer oder unter ‚Äûüìë Reports‚Äú eine sauber formatierte Liste aller relevanten Reports.

üîß Voraussetzungen

Reports liegen in docs/

Specs liegen in .kiro/specs/

Dateinamen oder Inhalte enthalten Task-Referenzen wie Task 6, Task 4.2, Performance, Hybrid, etc. (Bedrock erkennt diese √ºber semantische Suche)

Kiro/Bedrock d√ºrfen Dateien √§ndern

üß© Bedrock-Befehl f√ºr Kiro

Du kannst ihn so an Kiro √ºbergeben:

npx bedrock run orchestrator --task "Sort and integrate reports into specs" --prompt "
Scan the repository for all Markdown or report files inside 'docs/' that match patterns:
  - *report*.md
  - *test*.md
  - *fixes*.md
  - *validation*.md
  - *status*.md
  - *completion*.md

For each report, identify its related task or spec by title or keywords 
(e.g. 'Task 3.1', 'Performance', 'Latency', 'Bedrock Support Manager', 'Hybrid Routing', 'Green Core Validation', etc.)

Then:
1. Copy or move the report summary (first 20 lines or first main sections) into the matching file under '.kiro/specs/'.
2. Append it under a Markdown header:
   ---
   ## üìë Related Reports
   - [Report Title](relative/path/to/docs/report.md)
   ---
3. If a spec has multiple related reports, list them chronologically (oldest ‚Üí newest).
4. Generate a log 'docs/report-integration-summary.md' that lists:
   - Which reports were matched to which specs
   - Which reports remained unmatched
   - Timestamp and file counts.

Ensure file structure and formatting remain intact. Do not delete original reports.
" 

üîí Ergebnis

Nach erfolgreicher Ausf√ºhrung:

Jede .kiro/specs/*.md enth√§lt am Ende einen Abschnitt:

## üìë Related Reports
- [Test Fixes Completion Report ‚Äì 2025-10-07](../docs/test-fixes-completion-report-2025-10-07.md)
- [System Restoration Report](../docs/system-restoration-report.md)
- [Kiro System Protection Report](../docs/kiro-system-protection-report.md)


Neuer Index-Report:

docs/report-integration-summary.md


mit:

‚úÖ 12 Reports matched to 7 Specs
‚ùå 3 Unmatched Reports

Optional (empfohlen)

Damit Kiro das regelm√§√üig automatisch macht (z. B. t√§glich oder bei neuen Reports):

npx tsx scripts/kiro-hook-watcher.ts --monitor reports


‚Üí pr√ºft √Ñnderungen in docs/ und f√ºhrt den obigen Bedrock-Befehl automatisch aus.



Ziel 2
## üß± Zielarchitektur

| Ebene                          | Zweck                                                                                        |
| ------------------------------ | -------------------------------------------------------------------------------------------- |
| **`matbakh-visibility-live`**  | *Produktiv-Repository*, stabil, unver√§ndert, direkt mit Frontend / CI / Deployment verbunden |
| **`matbakh-visibility-dev`**   | *Entwicklungs-Repository*, enth√§lt neue Features, Hooks, Kiro-/Bedrock-Erweiterungen         |
| **Automatisches Daily-Backup** | Zip- oder tar-Snapshot der Dev-Repo, 7 Tage History, z. B. unter `backups/daily/YYYY-MM-DD/` |

---

## ü™ú Schritt-f√ºr-Schritt-Plan

### **1Ô∏è‚É£ Letzten Stand sichern (aktuelle Repo)**

```bash
# Manuelles Komplett-Backup
mkdir -p backups/manual
tar -czf backups/manual/full-backup-$(date +"%Y-%m-%dT%H-%M-%S").tar.gz \
  . --exclude=node_modules --exclude=.git --exclude=backups
```

‚Üí legt einen vollst√§ndigen Snapshot deines aktuellen Zustands ab.

---

### **2Ô∏è‚É£ ‚ÄûLive‚Äú-Repo abtrennen**

Im Git-Root:

```bash
# Neues Remote-Repo (z. B. GitHub, AWS CodeCommit, oder lokal)
git clone . ../matbakh-visibility-live
cd ../matbakh-visibility-live
git remote remove origin  # falls du das gleiche Remote nutzt
git branch -M main
```

* Diese Kopie bleibt dein **Frontend-Live-Repo**.
* Verbinde es sp√§ter nur mit deinem **Deployment-Pipeline**-Account (z. B. AWS Amplify / Vercel).

---

### **3Ô∏è‚É£ Dev-Repo vorbereiten**

Zur√ºck ins urspr√ºngliche Repo:

```bash
cd ../matbakh-visibility-boost.20250920
git remote set-url origin <DEV_REPO_URL>  # falls du ein separates Remote nutzt
git push origin main
```

‚Üí Hier arbeitest du k√ºnftig an Features, neuen Modulen etc.

---

### **4Ô∏è‚É£ T√§gliches Backup automatisieren**

Erstelle ein einfaches Shell-Skript (z. B. `scripts/daily-backup.sh`):

```bash
#!/bin/bash
BACKUP_DIR="backups/daily/$(date +%Y-%m-%d)"
mkdir -p "$BACKUP_DIR"

tar -czf "$BACKUP_DIR/repo-$(date +%H-%M-%S).tar.gz" \
  . --exclude=node_modules --exclude=.git --exclude=backups

# Alte Backups >7 Tage l√∂schen
find backups/daily/ -type d -mtime +7 -exec rm -rf {} \; 2>/dev/null
echo "‚úÖ Backup created at $BACKUP_DIR"
```

Mache es ausf√ºhrbar:

```bash
chmod +x scripts/daily-backup.sh
```

Und plane es mit **cron**:

```bash
crontab -e
# T√§glich um 03:00 Uhr
0 3 * * * cd /path/to/matbakh-visibility-boost.20250920 && ./scripts/daily-backup.sh >> logs/backup.log 2>&1
```

---

### **5Ô∏è‚É£ Synchronisations-Strategie**

| Ziel                                   | Vorgehen                                                                                                            |
| -------------------------------------- | ------------------------------------------------------------------------------------------------------------------- |
| **Neue getestete Features √ºbernehmen** | Im Dev-Repo auf Feature-Branch entwickeln ‚Üí nach Tests per `git diff` oder `git cherry-pick` auf Live-Repo anwenden |
| **Hotfix f√ºr Live n√∂tig**              | Direkt im Live-Repo fixen, dann per `git pull` in Dev √ºbernehmen                                                    |
| **Monitoring & Audit**                 | Kiro / Protection-System bleibt aktiv nur in Dev-Repo                                                               |

---

### **6Ô∏è‚É£ Optionale Extras**

* T√§gliches Backup-Log in `docs/backup-history.md`
* Automatische E-Mail/Slack-Benachrichtigung bei erfolgreichem Backup
* AWS S3 Sync:

  ```bash
  aws s3 sync backups/daily s3://matbakh-backups/daily --delete
  ```

---

**erstelle ein kompaktes Automations-Bundle** (3 Dateien):

1. `scripts/daily-backup.sh`
2. `scripts/verify-backup.ts` (pr√ºft Integrit√§t der letzten 7 Backups)
3. `scripts/sync-live-repo.sh` (√ºbertr√§gt getestete Commits ins Live-Repo)

‚Üí Damit w√§re deine **zwei-Repo-Strategie + t√§gliche Sicherung + Integrit√§tspr√ºfung** komplett automatisiert.
